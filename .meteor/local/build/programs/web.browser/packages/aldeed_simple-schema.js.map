{"version":3,"sources":["meteor://ðŸ’»app/packages/aldeed_simple-schema/packages/aldeed_simple-schema.js"],"names":[],"mappingsfile":"/packages/aldeed_simple-schema.js","sourcesContent":["(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:simple-schema/string.js                                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/*                                                                                                                     // 1\nstring.js - Copyright (C) 2012-2013, JP Richardson <jprichardson@gmail.com>                                            // 2\n*/                                                                                                                     // 3\n                                                                                                                       // 4\n!(function() {                                                                                                         // 5\n  \"use strict\";                                                                                                        // 6\n                                                                                                                       // 7\n  var VERSION = '1.5.0';                                                                                               // 8\n                                                                                                                       // 9\n  var ENTITIES = {};                                                                                                   // 10\n                                                                                                                       // 11\n  function S(s) {                                                                                                      // 12\n    if (s !== null && s !== undefined) {                                                                               // 13\n      if (typeof s === 'string')                                                                                       // 14\n        this.s = s;                                                                                                    // 15\n      else                                                                                                             // 16\n        this.s = s.toString();                                                                                         // 17\n    } else {                                                                                                           // 18\n      this.s = s; //null or undefined                                                                                  // 19\n    }                                                                                                                  // 20\n                                                                                                                       // 21\n    this.orig = s; //original object, currently only used by toCSV() and toBoolean()                                   // 22\n                                                                                                                       // 23\n    if (s !== null && s !== undefined) {                                                                               // 24\n      if (this.__defineGetter__) {                                                                                     // 25\n        this.__defineGetter__('length', function() {                                                                   // 26\n          return this.s.length;                                                                                        // 27\n        })                                                                                                             // 28\n      } else {                                                                                                         // 29\n        this.length = s.length;                                                                                        // 30\n      }                                                                                                                // 31\n    } else {                                                                                                           // 32\n      this.length = -1;                                                                                                // 33\n    }                                                                                                                  // 34\n  }                                                                                                                    // 35\n                                                                                                                       // 36\n  var __nsp = String.prototype;                                                                                        // 37\n  var __sp = S.prototype = {                                                                                           // 38\n                                                                                                                       // 39\n    between: function(left, right) {                                                                                   // 40\n      var s = this.s;                                                                                                  // 41\n      var startPos = s.indexOf(left);                                                                                  // 42\n      var endPos = s.indexOf(right);                                                                                   // 43\n      var start = startPos + left.length;                                                                              // 44\n      return new S(endPos > startPos ?  s.slice(start, endPos) : \"\");                                                  // 45\n    },                                                                                                                 // 46\n                                                                                                                       // 47\n    //# modified slightly from https://github.com/epeli/underscore.string                                              // 48\n    camelize: function() {                                                                                             // 49\n      var s = this.trim().s.replace(/(\\-|_|\\s)+(.)?/g, function(mathc, sep, c) {                                       // 50\n        return (c ? c.toUpperCase() : '');                                                                             // 51\n      });                                                                                                              // 52\n      return new S(s);                                                                                                 // 53\n    },                                                                                                                 // 54\n                                                                                                                       // 55\n    capitalize: function() {                                                                                           // 56\n      return new S(this.s.substr(0, 1).toUpperCase() + this.s.substring(1).toLowerCase());                             // 57\n    },                                                                                                                 // 58\n                                                                                                                       // 59\n    charAt: function(index) {                                                                                          // 60\n      return this.s.charAt(index);                                                                                     // 61\n    },                                                                                                                 // 62\n                                                                                                                       // 63\n    chompLeft: function(prefix) {                                                                                      // 64\n      var s = this.s;                                                                                                  // 65\n      if (s.indexOf(prefix) === 0) {                                                                                   // 66\n         s = s.slice(prefix.length);                                                                                   // 67\n         return new S(s);                                                                                              // 68\n      } else {                                                                                                         // 69\n        return this;                                                                                                   // 70\n      }                                                                                                                // 71\n    },                                                                                                                 // 72\n                                                                                                                       // 73\n    chompRight: function(suffix) {                                                                                     // 74\n      if (this.endsWith(suffix)) {                                                                                     // 75\n        var s = this.s;                                                                                                // 76\n        s = s.slice(0, s.length - suffix.length);                                                                      // 77\n        return new S(s);                                                                                               // 78\n      } else {                                                                                                         // 79\n        return this;                                                                                                   // 80\n      }                                                                                                                // 81\n    },                                                                                                                 // 82\n                                                                                                                       // 83\n    //#thanks Google                                                                                                   // 84\n    collapseWhitespace: function() {                                                                                   // 85\n      var s = this.s.replace(/[\\s\\xa0]+/g, ' ').replace(/^\\s+|\\s+$/g, '');                                             // 86\n      return new S(s);                                                                                                 // 87\n    },                                                                                                                 // 88\n                                                                                                                       // 89\n    contains: function(ss) {                                                                                           // 90\n      return this.s.indexOf(ss) >= 0;                                                                                  // 91\n    },                                                                                                                 // 92\n                                                                                                                       // 93\n    count: function(ss) {                                                                                              // 94\n      var count = 0                                                                                                    // 95\n        , pos = this.s.indexOf(ss)                                                                                     // 96\n                                                                                                                       // 97\n      while (pos >= 0) {                                                                                               // 98\n        count += 1                                                                                                     // 99\n        pos = this.s.indexOf(ss, pos + 1)                                                                              // 100\n      }                                                                                                                // 101\n                                                                                                                       // 102\n      return count                                                                                                     // 103\n    },                                                                                                                 // 104\n                                                                                                                       // 105\n    //#modified from https://github.com/epeli/underscore.string                                                        // 106\n    dasherize: function() {                                                                                            // 107\n      var s = this.trim().s.replace(/[_\\s]+/g, '-').replace(/([A-Z])/g, '-$1').replace(/-+/g, '-').toLowerCase();      // 108\n      return new S(s);                                                                                                 // 109\n    },                                                                                                                 // 110\n                                                                                                                       // 111\n    decodeHtmlEntities: function() { //https://github.com/substack/node-ent/blob/master/index.js                       // 112\n      var s = this.s;                                                                                                  // 113\n      s = s.replace(/&#(\\d+);?/g, function (_, code) {                                                                 // 114\n        return String.fromCharCode(code);                                                                              // 115\n      })                                                                                                               // 116\n      .replace(/&#[xX]([A-Fa-f0-9]+);?/g, function (_, hex) {                                                          // 117\n        return String.fromCharCode(parseInt(hex, 16));                                                                 // 118\n      })                                                                                                               // 119\n      .replace(/&([^;\\W]+;?)/g, function (m, e) {                                                                      // 120\n        var ee = e.replace(/;$/, '');                                                                                  // 121\n        var target = ENTITIES[e] || (e.match(/;$/) && ENTITIES[ee]);                                                   // 122\n                                                                                                                       // 123\n        if (typeof target === 'number') {                                                                              // 124\n          return String.fromCharCode(target);                                                                          // 125\n        }                                                                                                              // 126\n        else if (typeof target === 'string') {                                                                         // 127\n          return target;                                                                                               // 128\n        }                                                                                                              // 129\n        else {                                                                                                         // 130\n          return m;                                                                                                    // 131\n        }                                                                                                              // 132\n      })                                                                                                               // 133\n                                                                                                                       // 134\n      return new S(s);                                                                                                 // 135\n    },                                                                                                                 // 136\n                                                                                                                       // 137\n    endsWith: function(suffix) {                                                                                       // 138\n      var l  = this.s.length - suffix.length;                                                                          // 139\n      return l >= 0 && this.s.indexOf(suffix, l) === l;                                                                // 140\n    },                                                                                                                 // 141\n                                                                                                                       // 142\n    escapeHTML: function() { //from underscore.string                                                                  // 143\n      return new S(this.s.replace(/[&<>\"']/g, function(m){ return '&' + reversedEscapeChars[m] + ';'; }));             // 144\n    },                                                                                                                 // 145\n                                                                                                                       // 146\n    ensureLeft: function(prefix) {                                                                                     // 147\n      var s = this.s;                                                                                                  // 148\n      if (s.indexOf(prefix) === 0) {                                                                                   // 149\n        return this;                                                                                                   // 150\n      } else {                                                                                                         // 151\n        return new S(prefix + s);                                                                                      // 152\n      }                                                                                                                // 153\n    },                                                                                                                 // 154\n                                                                                                                       // 155\n    ensureRight: function(suffix) {                                                                                    // 156\n      var s = this.s;                                                                                                  // 157\n      if (this.endsWith(suffix))  {                                                                                    // 158\n        return this;                                                                                                   // 159\n      } else {                                                                                                         // 160\n        return new S(s + suffix);                                                                                      // 161\n      }                                                                                                                // 162\n    },                                                                                                                 // 163\n                                                                                                                       // 164\n    humanize: function() { //modified from underscore.string                                                           // 165\n      if (this.s === null || this.s === undefined)                                                                     // 166\n        return new S('')                                                                                               // 167\n      var s = this.underscore().replace(/_id$/,'').replace(/_/g, ' ').trim().capitalize()                              // 168\n      return new S(s)                                                                                                  // 169\n    },                                                                                                                 // 170\n                                                                                                                       // 171\n    isAlpha: function() {                                                                                              // 172\n      return !/[^a-z\\xC0-\\xFF]/.test(this.s.toLowerCase());                                                            // 173\n    },                                                                                                                 // 174\n                                                                                                                       // 175\n    isAlphaNumeric: function() {                                                                                       // 176\n      return !/[^0-9a-z\\xC0-\\xFF]/.test(this.s.toLowerCase());                                                         // 177\n    },                                                                                                                 // 178\n                                                                                                                       // 179\n    isEmpty: function() {                                                                                              // 180\n      return this.s === null || this.s === undefined ? true : /^[\\s\\xa0]*$/.test(this.s);                              // 181\n    },                                                                                                                 // 182\n                                                                                                                       // 183\n    isLower: function() {                                                                                              // 184\n      return this.isAlpha() && this.s.toLowerCase() === this.s;                                                        // 185\n    },                                                                                                                 // 186\n                                                                                                                       // 187\n    isNumeric: function() {                                                                                            // 188\n      return !/[^0-9]/.test(this.s);                                                                                   // 189\n    },                                                                                                                 // 190\n                                                                                                                       // 191\n    isUpper: function() {                                                                                              // 192\n      return this.isAlpha() && this.s.toUpperCase() === this.s;                                                        // 193\n    },                                                                                                                 // 194\n                                                                                                                       // 195\n    left: function(N) {                                                                                                // 196\n      if (N >= 0) {                                                                                                    // 197\n        var s = this.s.substr(0, N);                                                                                   // 198\n        return new S(s);                                                                                               // 199\n      } else {                                                                                                         // 200\n        return this.right(-N);                                                                                         // 201\n      }                                                                                                                // 202\n    },                                                                                                                 // 203\n                                                                                                                       // 204\n    lines: function() { //convert windows newlines to unix newlines then convert to an Array of lines                  // 205\n      return this.replaceAll('\\r\\n', '\\n').s.split('\\n');                                                              // 206\n    },                                                                                                                 // 207\n                                                                                                                       // 208\n    pad: function(len, ch) { //https://github.com/component/pad                                                        // 209\n      ch = ch || ' ';                                                                                                  // 210\n      if (this.s.length >= len) return new S(this.s);                                                                  // 211\n      len = len - this.s.length;                                                                                       // 212\n      var left = Array(Math.ceil(len / 2) + 1).join(ch);                                                               // 213\n      var right = Array(Math.floor(len / 2) + 1).join(ch);                                                             // 214\n      return new S(left + this.s + right);                                                                             // 215\n    },                                                                                                                 // 216\n                                                                                                                       // 217\n    padLeft: function(len, ch) { //https://github.com/component/pad                                                    // 218\n      ch = ch || ' ';                                                                                                  // 219\n      if (this.s.length >= len) return new S(this.s);                                                                  // 220\n      return new S(Array(len - this.s.length + 1).join(ch) + this.s);                                                  // 221\n    },                                                                                                                 // 222\n                                                                                                                       // 223\n    padRight: function(len, ch) { //https://github.com/component/pad                                                   // 224\n      ch = ch || ' ';                                                                                                  // 225\n      if (this.s.length >= len) return new S(this.s);                                                                  // 226\n      return new S(this.s + Array(len - this.s.length + 1).join(ch));                                                  // 227\n    },                                                                                                                 // 228\n                                                                                                                       // 229\n    parseCSV: function(delimiter, qualifier, escape, lineDelimiter) { //try to parse no matter what                    // 230\n      delimiter = delimiter || ',';                                                                                    // 231\n      escape = escape || '\\\\'                                                                                          // 232\n      if (typeof qualifier == 'undefined')                                                                             // 233\n        qualifier = '\"';                                                                                               // 234\n                                                                                                                       // 235\n      var i = 0, fieldBuffer = [], fields = [], len = this.s.length, inField = false, self = this;                     // 236\n      var ca = function(i){return self.s.charAt(i)};                                                                   // 237\n      if (typeof lineDelimiter !== 'undefined') var rows = [];                                                         // 238\n                                                                                                                       // 239\n      if (!qualifier)                                                                                                  // 240\n        inField = true;                                                                                                // 241\n                                                                                                                       // 242\n      while (i < len) {                                                                                                // 243\n        var current = ca(i);                                                                                           // 244\n        switch (current) {                                                                                             // 245\n          case escape:                                                                                                 // 246\n          //fix for issues #32 and #35                                                                                 // 247\n          if (inField && ((escape !== qualifier) || ca(i+1) === qualifier)) {                                          // 248\n              i += 1;                                                                                                  // 249\n              fieldBuffer.push(ca(i));                                                                                 // 250\n              break;                                                                                                   // 251\n          }                                                                                                            // 252\n          if (escape !== qualifier) break;                                                                             // 253\n          case qualifier:                                                                                              // 254\n            inField = !inField;                                                                                        // 255\n            break;                                                                                                     // 256\n          case delimiter:                                                                                              // 257\n            if (inField && qualifier)                                                                                  // 258\n              fieldBuffer.push(current);                                                                               // 259\n            else {                                                                                                     // 260\n              fields.push(fieldBuffer.join(''))                                                                        // 261\n              fieldBuffer.length = 0;                                                                                  // 262\n            }                                                                                                          // 263\n            break;                                                                                                     // 264\n          case lineDelimiter:                                                                                          // 265\n            if (inField) {                                                                                             // 266\n                fieldBuffer.push(current);                                                                             // 267\n            } else {                                                                                                   // 268\n                if (rows) {                                                                                            // 269\n                    fields.push(fieldBuffer.join(''))                                                                  // 270\n                    rows.push(fields);                                                                                 // 271\n                    fields = [];                                                                                       // 272\n                    fieldBuffer.length = 0;                                                                            // 273\n                }                                                                                                      // 274\n            }                                                                                                          // 275\n            break;                                                                                                     // 276\n          default:                                                                                                     // 277\n            if (inField)                                                                                               // 278\n              fieldBuffer.push(current);                                                                               // 279\n            break;                                                                                                     // 280\n        }                                                                                                              // 281\n        i += 1;                                                                                                        // 282\n      }                                                                                                                // 283\n                                                                                                                       // 284\n      fields.push(fieldBuffer.join(''));                                                                               // 285\n      if (rows) {                                                                                                      // 286\n        rows.push(fields);                                                                                             // 287\n        return rows;                                                                                                   // 288\n      }                                                                                                                // 289\n      return fields;                                                                                                   // 290\n    },                                                                                                                 // 291\n                                                                                                                       // 292\n    replaceAll: function(ss, r) {                                                                                      // 293\n      //var s = this.s.replace(new RegExp(ss, 'g'), r);                                                                // 294\n      var s = this.s.split(ss).join(r)                                                                                 // 295\n      return new S(s);                                                                                                 // 296\n    },                                                                                                                 // 297\n                                                                                                                       // 298\n    right: function(N) {                                                                                               // 299\n      if (N >= 0) {                                                                                                    // 300\n        var s = this.s.substr(this.s.length - N, N);                                                                   // 301\n        return new S(s);                                                                                               // 302\n      } else {                                                                                                         // 303\n        return this.left(-N);                                                                                          // 304\n      }                                                                                                                // 305\n    },                                                                                                                 // 306\n                                                                                                                       // 307\n    slugify: function() {                                                                                              // 308\n      var sl = (new S(this.s.replace(/[^\\w\\s-]/g, '').toLowerCase())).dasherize().s;                                   // 309\n      if (sl.charAt(0) === '-')                                                                                        // 310\n        sl = sl.substr(1);                                                                                             // 311\n      return new S(sl);                                                                                                // 312\n    },                                                                                                                 // 313\n                                                                                                                       // 314\n    startsWith: function(prefix) {                                                                                     // 315\n      return this.s.lastIndexOf(prefix, 0) === 0;                                                                      // 316\n    },                                                                                                                 // 317\n                                                                                                                       // 318\n    stripPunctuation: function() {                                                                                     // 319\n      //return new S(this.s.replace(/[\\.,-\\/#!$%\\^&\\*;:{}=\\-_`~()]/g,\"\"));                                             // 320\n      return new S(this.s.replace(/[^\\w\\s]|_/g, \"\").replace(/\\s+/g, \" \"));                                             // 321\n    },                                                                                                                 // 322\n                                                                                                                       // 323\n    stripTags: function() { //from sugar.js                                                                            // 324\n      var s = this.s, args = arguments.length > 0 ? arguments : [''];                                                  // 325\n      multiArgs(args, function(tag) {                                                                                  // 326\n        s = s.replace(RegExp('<\\/?' + tag + '[^<>]*>', 'gi'), '');                                                     // 327\n      });                                                                                                              // 328\n      return new S(s);                                                                                                 // 329\n    },                                                                                                                 // 330\n                                                                                                                       // 331\n    template: function(values, opening, closing) {                                                                     // 332\n      var s = this.s                                                                                                   // 333\n      var opening = opening || Export.TMPL_OPEN                                                                        // 334\n      var closing = closing || Export.TMPL_CLOSE                                                                       // 335\n      var r = new RegExp(opening + '(.+?)' + closing, 'g')                                                             // 336\n        //, r = /\\{\\{(.+?)\\}\\}/g                                                                                       // 337\n      var matches = s.match(r) || [];                                                                                  // 338\n                                                                                                                       // 339\n      matches.forEach(function(match) {                                                                                // 340\n        var key = match.substring(opening.length, match.length - closing.length);//chop {{ and }}                      // 341\n        if (values[key])                                                                                               // 342\n          s = s.replace(match, values[key]);                                                                           // 343\n      });                                                                                                              // 344\n      return new S(s);                                                                                                 // 345\n    },                                                                                                                 // 346\n                                                                                                                       // 347\n    times: function(n) {                                                                                               // 348\n      return new S(new Array(n + 1).join(this.s));                                                                     // 349\n    },                                                                                                                 // 350\n                                                                                                                       // 351\n    toBoolean: function() {                                                                                            // 352\n      if (typeof this.orig === 'string') {                                                                             // 353\n        var s = this.s.toLowerCase();                                                                                  // 354\n        return s === 'true' || s === 'yes' || s === 'on';                                                              // 355\n      } else                                                                                                           // 356\n        return this.orig === true || this.orig === 1;                                                                  // 357\n    },                                                                                                                 // 358\n                                                                                                                       // 359\n    toFloat: function(precision) {                                                                                     // 360\n      var num = parseFloat(this.s)                                                                                     // 361\n      if (precision)                                                                                                   // 362\n        return parseFloat(num.toFixed(precision))                                                                      // 363\n      else                                                                                                             // 364\n        return num                                                                                                     // 365\n    },                                                                                                                 // 366\n                                                                                                                       // 367\n    toInt: function() { //thanks Google                                                                                // 368\n      // If the string starts with '0x' or '-0x', parse as hex.                                                        // 369\n      return /^\\s*-?0x/i.test(this.s) ? parseInt(this.s, 16) : parseInt(this.s, 10)                                    // 370\n    },                                                                                                                 // 371\n                                                                                                                       // 372\n    trim: function() {                                                                                                 // 373\n      var s;                                                                                                           // 374\n      if (typeof __nsp.trim === 'undefined')                                                                           // 375\n        s = this.s.replace(/(^\\s*|\\s*$)/g, '')                                                                         // 376\n      else                                                                                                             // 377\n        s = this.s.trim()                                                                                              // 378\n      return new S(s);                                                                                                 // 379\n    },                                                                                                                 // 380\n                                                                                                                       // 381\n    trimLeft: function() {                                                                                             // 382\n      var s;                                                                                                           // 383\n      if (__nsp.trimLeft)                                                                                              // 384\n        s = this.s.trimLeft();                                                                                         // 385\n      else                                                                                                             // 386\n        s = this.s.replace(/(^\\s*)/g, '');                                                                             // 387\n      return new S(s);                                                                                                 // 388\n    },                                                                                                                 // 389\n                                                                                                                       // 390\n    trimRight: function() {                                                                                            // 391\n      var s;                                                                                                           // 392\n      if (__nsp.trimRight)                                                                                             // 393\n        s = this.s.trimRight();                                                                                        // 394\n      else                                                                                                             // 395\n        s = this.s.replace(/\\s+$/, '');                                                                                // 396\n      return new S(s);                                                                                                 // 397\n    },                                                                                                                 // 398\n                                                                                                                       // 399\n    truncate: function(length, pruneStr) { //from underscore.string, author: github.com/rwz                            // 400\n      var str = this.s;                                                                                                // 401\n                                                                                                                       // 402\n      length = ~~length;                                                                                               // 403\n      pruneStr = pruneStr || '...';                                                                                    // 404\n                                                                                                                       // 405\n      if (str.length <= length) return new S(str);                                                                     // 406\n                                                                                                                       // 407\n      var tmpl = function(c){ return c.toUpperCase() !== c.toLowerCase() ? 'A' : ' '; },                               // 408\n        template = str.slice(0, length+1).replace(/.(?=\\W*\\w*$)/g, tmpl); // 'Hello, world' -> 'HellAA AAAAA'          // 409\n                                                                                                                       // 410\n      if (template.slice(template.length-2).match(/\\w\\w/))                                                             // 411\n        template = template.replace(/\\s*\\S+$/, '');                                                                    // 412\n      else                                                                                                             // 413\n        template = new S(template.slice(0, template.length-1)).trimRight().s;                                          // 414\n                                                                                                                       // 415\n      return (template+pruneStr).length > str.length ? new S(str) : new S(str.slice(0, template.length)+pruneStr);     // 416\n    },                                                                                                                 // 417\n                                                                                                                       // 418\n    toCSV: function() {                                                                                                // 419\n      var delim = ',', qualifier = '\"', escape = '\\\\', encloseNumbers = true, keys = false;                            // 420\n      var dataArray = [];                                                                                              // 421\n                                                                                                                       // 422\n      function hasVal(it) {                                                                                            // 423\n        return it !== null && it !== '';                                                                               // 424\n      }                                                                                                                // 425\n                                                                                                                       // 426\n      if (typeof arguments[0] === 'object') {                                                                          // 427\n        delim = arguments[0].delimiter || delim;                                                                       // 428\n        delim = arguments[0].separator || delim;                                                                       // 429\n        qualifier = arguments[0].qualifier || qualifier;                                                               // 430\n        encloseNumbers = !!arguments[0].encloseNumbers;                                                                // 431\n        escape = arguments[0].escape || escape;                                                                        // 432\n        keys = !!arguments[0].keys;                                                                                    // 433\n      } else if (typeof arguments[0] === 'string') {                                                                   // 434\n        delim = arguments[0];                                                                                          // 435\n      }                                                                                                                // 436\n                                                                                                                       // 437\n      if (typeof arguments[1] === 'string')                                                                            // 438\n        qualifier = arguments[1];                                                                                      // 439\n                                                                                                                       // 440\n      if (arguments[1] === null)                                                                                       // 441\n        qualifier = null;                                                                                              // 442\n                                                                                                                       // 443\n       if (this.orig instanceof Array)                                                                                 // 444\n        dataArray  = this.orig;                                                                                        // 445\n      else { //object                                                                                                  // 446\n        for (var key in this.orig)                                                                                     // 447\n          if (this.orig.hasOwnProperty(key))                                                                           // 448\n            if (keys)                                                                                                  // 449\n              dataArray.push(key);                                                                                     // 450\n            else                                                                                                       // 451\n              dataArray.push(this.orig[key]);                                                                          // 452\n      }                                                                                                                // 453\n                                                                                                                       // 454\n      var rep = escape + qualifier;                                                                                    // 455\n      var buildString = [];                                                                                            // 456\n      for (var i = 0; i < dataArray.length; ++i) {                                                                     // 457\n        var shouldQualify = hasVal(qualifier)                                                                          // 458\n        if (typeof dataArray[i] == 'number')                                                                           // 459\n          shouldQualify &= encloseNumbers;                                                                             // 460\n                                                                                                                       // 461\n        if (shouldQualify)                                                                                             // 462\n          buildString.push(qualifier);                                                                                 // 463\n                                                                                                                       // 464\n        if (dataArray[i] !== null && dataArray[i] !== undefined) {                                                     // 465\n          var d = new S(dataArray[i]).replaceAll(qualifier, rep).s;                                                    // 466\n          buildString.push(d);                                                                                         // 467\n        } else                                                                                                         // 468\n          buildString.push('')                                                                                         // 469\n                                                                                                                       // 470\n        if (shouldQualify)                                                                                             // 471\n          buildString.push(qualifier);                                                                                 // 472\n                                                                                                                       // 473\n        if (delim)                                                                                                     // 474\n          buildString.push(delim);                                                                                     // 475\n      }                                                                                                                // 476\n                                                                                                                       // 477\n      //chop last delim                                                                                                // 478\n      //console.log(buildString.length)                                                                                // 479\n      buildString.length = buildString.length - 1;                                                                     // 480\n      return new S(buildString.join(''));                                                                              // 481\n    },                                                                                                                 // 482\n                                                                                                                       // 483\n    toString: function() {                                                                                             // 484\n      return this.s;                                                                                                   // 485\n    },                                                                                                                 // 486\n                                                                                                                       // 487\n    //#modified from https://github.com/epeli/underscore.string                                                        // 488\n    underscore: function() {                                                                                           // 489\n      var s = this.trim().s.replace(/([a-z\\d])([A-Z]+)/g, '$1_$2').replace(/[-\\s]+/g, '_').toLowerCase();              // 490\n      if ((new S(this.s.charAt(0))).isUpper()) {                                                                       // 491\n        s = '_' + s;                                                                                                   // 492\n      }                                                                                                                // 493\n      return new S(s);                                                                                                 // 494\n    },                                                                                                                 // 495\n                                                                                                                       // 496\n    unescapeHTML: function() { //from underscore.string                                                                // 497\n      return new S(this.s.replace(/\\&([^;]+);/g, function(entity, entityCode){                                         // 498\n        var match;                                                                                                     // 499\n                                                                                                                       // 500\n        if (entityCode in escapeChars) {                                                                               // 501\n          return escapeChars[entityCode];                                                                              // 502\n        } else if (match = entityCode.match(/^#x([\\da-fA-F]+)$/)) {                                                    // 503\n          return String.fromCharCode(parseInt(match[1], 16));                                                          // 504\n        } else if (match = entityCode.match(/^#(\\d+)$/)) {                                                             // 505\n          return String.fromCharCode(~~match[1]);                                                                      // 506\n        } else {                                                                                                       // 507\n          return entity;                                                                                               // 508\n        }                                                                                                              // 509\n      }));                                                                                                             // 510\n    },                                                                                                                 // 511\n                                                                                                                       // 512\n    valueOf: function() {                                                                                              // 513\n      return this.s.valueOf();                                                                                         // 514\n    }                                                                                                                  // 515\n                                                                                                                       // 516\n  }                                                                                                                    // 517\n                                                                                                                       // 518\n  var methodsAdded = [];                                                                                               // 519\n  function extendPrototype() {                                                                                         // 520\n    for (var name in __sp) {                                                                                           // 521\n      (function(name){                                                                                                 // 522\n        var func = __sp[name];                                                                                         // 523\n        if (!__nsp.hasOwnProperty(name)) {                                                                             // 524\n          methodsAdded.push(name);                                                                                     // 525\n          __nsp[name] = function() {                                                                                   // 526\n            String.prototype.s = this;                                                                                 // 527\n            return func.apply(this, arguments);                                                                        // 528\n          }                                                                                                            // 529\n        }                                                                                                              // 530\n      })(name);                                                                                                        // 531\n    }                                                                                                                  // 532\n  }                                                                                                                    // 533\n                                                                                                                       // 534\n  function restorePrototype() {                                                                                        // 535\n    for (var i = 0; i < methodsAdded.length; ++i)                                                                      // 536\n      delete String.prototype[methodsAdded[i]];                                                                        // 537\n    methodsAdded.length = 0;                                                                                           // 538\n  }                                                                                                                    // 539\n                                                                                                                       // 540\n                                                                                                                       // 541\n/*************************************                                                                                 // 542\n/* Attach Native JavaScript String Properties                                                                          // 543\n/*************************************/                                                                                // 544\n                                                                                                                       // 545\n  var nativeProperties = getNativeStringProperties();                                                                  // 546\n  for (var name in nativeProperties) {                                                                                 // 547\n    (function(name) {                                                                                                  // 548\n      var stringProp = __nsp[name];                                                                                    // 549\n      if (typeof stringProp == 'function') {                                                                           // 550\n        //console.log(stringProp)                                                                                      // 551\n        if (!__sp[name]) {                                                                                             // 552\n          if (nativeProperties[name] === 'string') {                                                                   // 553\n            __sp[name] = function() {                                                                                  // 554\n              //console.log(name)                                                                                      // 555\n              return new S(stringProp.apply(this, arguments));                                                         // 556\n            }                                                                                                          // 557\n          } else {                                                                                                     // 558\n            __sp[name] = stringProp;                                                                                   // 559\n          }                                                                                                            // 560\n        }                                                                                                              // 561\n      }                                                                                                                // 562\n    })(name);                                                                                                          // 563\n  }                                                                                                                    // 564\n                                                                                                                       // 565\n                                                                                                                       // 566\n/*************************************                                                                                 // 567\n/* Function Aliases                                                                                                    // 568\n/*************************************/                                                                                // 569\n                                                                                                                       // 570\n  __sp.repeat = __sp.times;                                                                                            // 571\n  __sp.include = __sp.contains;                                                                                        // 572\n  __sp.toInteger = __sp.toInt;                                                                                         // 573\n  __sp.toBool = __sp.toBoolean;                                                                                        // 574\n  __sp.decodeHTMLEntities = __sp.decodeHtmlEntities //ensure consistent casing scheme of 'HTML'                        // 575\n                                                                                                                       // 576\n                                                                                                                       // 577\n/*************************************                                                                                 // 578\n/* Private Functions                                                                                                   // 579\n/*************************************/                                                                                // 580\n                                                                                                                       // 581\n  function getNativeStringProperties() {                                                                               // 582\n    var names = getNativeStringPropertyNames();                                                                        // 583\n    var retObj = {};                                                                                                   // 584\n                                                                                                                       // 585\n    for (var i = 0; i < names.length; ++i) {                                                                           // 586\n      var name = names[i];                                                                                             // 587\n      var func = __nsp[name];                                                                                          // 588\n      try {                                                                                                            // 589\n        var type = typeof func.apply('teststring', []);                                                                // 590\n        retObj[name] = type;                                                                                           // 591\n      } catch (e) {}                                                                                                   // 592\n    }                                                                                                                  // 593\n    return retObj;                                                                                                     // 594\n  }                                                                                                                    // 595\n                                                                                                                       // 596\n  function getNativeStringPropertyNames() {                                                                            // 597\n    var results = [];                                                                                                  // 598\n    if (Object.getOwnPropertyNames) {                                                                                  // 599\n      results = Object.getOwnPropertyNames(__nsp);                                                                     // 600\n      results.splice(results.indexOf('valueOf'), 1);                                                                   // 601\n      results.splice(results.indexOf('toString'), 1);                                                                  // 602\n      return results;                                                                                                  // 603\n    } else { //meant for legacy cruft, this could probably be made more efficient                                      // 604\n      var stringNames = {};                                                                                            // 605\n      var objectNames = [];                                                                                            // 606\n      for (var name in String.prototype)                                                                               // 607\n        stringNames[name] = name;                                                                                      // 608\n                                                                                                                       // 609\n      for (var name in Object.prototype)                                                                               // 610\n        delete stringNames[name];                                                                                      // 611\n                                                                                                                       // 612\n      //stringNames['toString'] = 'toString'; //this was deleted with the rest of the object names                     // 613\n      for (var name in stringNames) {                                                                                  // 614\n        results.push(name);                                                                                            // 615\n      }                                                                                                                // 616\n      return results;                                                                                                  // 617\n    }                                                                                                                  // 618\n  }                                                                                                                    // 619\n                                                                                                                       // 620\n  function Export(str) {                                                                                               // 621\n    return new S(str);                                                                                                 // 622\n  };                                                                                                                   // 623\n                                                                                                                       // 624\n  //attach exports to StringJSWrapper                                                                                  // 625\n  Export.extendPrototype = extendPrototype;                                                                            // 626\n  Export.restorePrototype = restorePrototype;                                                                          // 627\n  Export.VERSION = VERSION;                                                                                            // 628\n  Export.TMPL_OPEN = '{{';                                                                                             // 629\n  Export.TMPL_CLOSE = '}}';                                                                                            // 630\n  Export.ENTITIES = ENTITIES;                                                                                          // 631\n                                                                                                                       // 632\n                                                                                                                       // 633\n                                                                                                                       // 634\n/*************************************                                                                                 // 635\n/* Exports                                                                                                             // 636\n/*************************************/                                                                                // 637\n                                                                                                                       // 638\n  if (typeof module !== 'undefined'  && typeof module.exports !== 'undefined') {                                       // 639\n    module.exports = Export;                                                                                           // 640\n                                                                                                                       // 641\n  } else {                                                                                                             // 642\n                                                                                                                       // 643\n    if(typeof define === \"function\" && define.amd) {                                                                   // 644\n      define([], function() {                                                                                          // 645\n        return Export;                                                                                                 // 646\n      });                                                                                                              // 647\n    } else {                                                                                                           // 648\n      window.S = Export;                                                                                               // 649\n    }                                                                                                                  // 650\n  }                                                                                                                    // 651\n                                                                                                                       // 652\n                                                                                                                       // 653\n/*************************************                                                                                 // 654\n/* 3rd Party Private Functions                                                                                         // 655\n/*************************************/                                                                                // 656\n                                                                                                                       // 657\n  //from sugar.js                                                                                                      // 658\n  function multiArgs(args, fn) {                                                                                       // 659\n    var result = [], i;                                                                                                // 660\n    for(i = 0; i < args.length; i++) {                                                                                 // 661\n      result.push(args[i]);                                                                                            // 662\n      if(fn) fn.call(args, args[i], i);                                                                                // 663\n    }                                                                                                                  // 664\n    return result;                                                                                                     // 665\n  }                                                                                                                    // 666\n                                                                                                                       // 667\n  //from underscore.string                                                                                             // 668\n  var escapeChars = {                                                                                                  // 669\n    lt: '<',                                                                                                           // 670\n    gt: '>',                                                                                                           // 671\n    quot: '\"',                                                                                                         // 672\n    apos: \"'\",                                                                                                         // 673\n    amp: '&'                                                                                                           // 674\n  };                                                                                                                   // 675\n                                                                                                                       // 676\n  //from underscore.string                                                                                             // 677\n  var reversedEscapeChars = {};                                                                                        // 678\n  for(var key in escapeChars){ reversedEscapeChars[escapeChars[key]] = key; }                                          // 679\n                                                                                                                       // 680\n  ENTITIES = {                                                                                                         // 681\n    \"amp\" : \"&\",                                                                                                       // 682\n    \"gt\" : \">\",                                                                                                        // 683\n    \"lt\" : \"<\",                                                                                                        // 684\n    \"quot\" : \"\\\"\",                                                                                                     // 685\n    \"apos\" : \"'\",                                                                                                      // 686\n    \"AElig\" : 198,                                                                                                     // 687\n    \"Aacute\" : 193,                                                                                                    // 688\n    \"Acirc\" : 194,                                                                                                     // 689\n    \"Agrave\" : 192,                                                                                                    // 690\n    \"Aring\" : 197,                                                                                                     // 691\n    \"Atilde\" : 195,                                                                                                    // 692\n    \"Auml\" : 196,                                                                                                      // 693\n    \"Ccedil\" : 199,                                                                                                    // 694\n    \"ETH\" : 208,                                                                                                       // 695\n    \"Eacute\" : 201,                                                                                                    // 696\n    \"Ecirc\" : 202,                                                                                                     // 697\n    \"Egrave\" : 200,                                                                                                    // 698\n    \"Euml\" : 203,                                                                                                      // 699\n    \"Iacute\" : 205,                                                                                                    // 700\n    \"Icirc\" : 206,                                                                                                     // 701\n    \"Igrave\" : 204,                                                                                                    // 702\n    \"Iuml\" : 207,                                                                                                      // 703\n    \"Ntilde\" : 209,                                                                                                    // 704\n    \"Oacute\" : 211,                                                                                                    // 705\n    \"Ocirc\" : 212,                                                                                                     // 706\n    \"Ograve\" : 210,                                                                                                    // 707\n    \"Oslash\" : 216,                                                                                                    // 708\n    \"Otilde\" : 213,                                                                                                    // 709\n    \"Ouml\" : 214,                                                                                                      // 710\n    \"THORN\" : 222,                                                                                                     // 711\n    \"Uacute\" : 218,                                                                                                    // 712\n    \"Ucirc\" : 219,                                                                                                     // 713\n    \"Ugrave\" : 217,                                                                                                    // 714\n    \"Uuml\" : 220,                                                                                                      // 715\n    \"Yacute\" : 221,                                                                                                    // 716\n    \"aacute\" : 225,                                                                                                    // 717\n    \"acirc\" : 226,                                                                                                     // 718\n    \"aelig\" : 230,                                                                                                     // 719\n    \"agrave\" : 224,                                                                                                    // 720\n    \"aring\" : 229,                                                                                                     // 721\n    \"atilde\" : 227,                                                                                                    // 722\n    \"auml\" : 228,                                                                                                      // 723\n    \"ccedil\" : 231,                                                                                                    // 724\n    \"eacute\" : 233,                                                                                                    // 725\n    \"ecirc\" : 234,                                                                                                     // 726\n    \"egrave\" : 232,                                                                                                    // 727\n    \"eth\" : 240,                                                                                                       // 728\n    \"euml\" : 235,                                                                                                      // 729\n    \"iacute\" : 237,                                                                                                    // 730\n    \"icirc\" : 238,                                                                                                     // 731\n    \"igrave\" : 236,                                                                                                    // 732\n    \"iuml\" : 239,                                                                                                      // 733\n    \"ntilde\" : 241,                                                                                                    // 734\n    \"oacute\" : 243,                                                                                                    // 735\n    \"ocirc\" : 244,                                                                                                     // 736\n    \"ograve\" : 242,                                                                                                    // 737\n    \"oslash\" : 248,                                                                                                    // 738\n    \"otilde\" : 245,                                                                                                    // 739\n    \"ouml\" : 246,                                                                                                      // 740\n    \"szlig\" : 223,                                                                                                     // 741\n    \"thorn\" : 254,                                                                                                     // 742\n    \"uacute\" : 250,                                                                                                    // 743\n    \"ucirc\" : 251,                                                                                                     // 744\n    \"ugrave\" : 249,                                                                                                    // 745\n    \"uuml\" : 252,                                                                                                      // 746\n    \"yacute\" : 253,                                                                                                    // 747\n    \"yuml\" : 255,                                                                                                      // 748\n    \"copy\" : 169,                                                                                                      // 749\n    \"reg\" : 174,                                                                                                       // 750\n    \"nbsp\" : 160,                                                                                                      // 751\n    \"iexcl\" : 161,                                                                                                     // 752\n    \"cent\" : 162,                                                                                                      // 753\n    \"pound\" : 163,                                                                                                     // 754\n    \"curren\" : 164,                                                                                                    // 755\n    \"yen\" : 165,                                                                                                       // 756\n    \"brvbar\" : 166,                                                                                                    // 757\n    \"sect\" : 167,                                                                                                      // 758\n    \"uml\" : 168,                                                                                                       // 759\n    \"ordf\" : 170,                                                                                                      // 760\n    \"laquo\" : 171,                                                                                                     // 761\n    \"not\" : 172,                                                                                                       // 762\n    \"shy\" : 173,                                                                                                       // 763\n    \"macr\" : 175,                                                                                                      // 764\n    \"deg\" : 176,                                                                                                       // 765\n    \"plusmn\" : 177,                                                                                                    // 766\n    \"sup1\" : 185,                                                                                                      // 767\n    \"sup2\" : 178,                                                                                                      // 768\n    \"sup3\" : 179,                                                                                                      // 769\n    \"acute\" : 180,                                                                                                     // 770\n    \"micro\" : 181,                                                                                                     // 771\n    \"para\" : 182,                                                                                                      // 772\n    \"middot\" : 183,                                                                                                    // 773\n    \"cedil\" : 184,                                                                                                     // 774\n    \"ordm\" : 186,                                                                                                      // 775\n    \"raquo\" : 187,                                                                                                     // 776\n    \"frac14\" : 188,                                                                                                    // 777\n    \"frac12\" : 189,                                                                                                    // 778\n    \"frac34\" : 190,                                                                                                    // 779\n    \"iquest\" : 191,                                                                                                    // 780\n    \"times\" : 215,                                                                                                     // 781\n    \"divide\" : 247,                                                                                                    // 782\n    \"OElig;\" : 338,                                                                                                    // 783\n    \"oelig;\" : 339,                                                                                                    // 784\n    \"Scaron;\" : 352,                                                                                                   // 785\n    \"scaron;\" : 353,                                                                                                   // 786\n    \"Yuml;\" : 376,                                                                                                     // 787\n    \"fnof;\" : 402,                                                                                                     // 788\n    \"circ;\" : 710,                                                                                                     // 789\n    \"tilde;\" : 732,                                                                                                    // 790\n    \"Alpha;\" : 913,                                                                                                    // 791\n    \"Beta;\" : 914,                                                                                                     // 792\n    \"Gamma;\" : 915,                                                                                                    // 793\n    \"Delta;\" : 916,                                                                                                    // 794\n    \"Epsilon;\" : 917,                                                                                                  // 795\n    \"Zeta;\" : 918,                                                                                                     // 796\n    \"Eta;\" : 919,                                                                                                      // 797\n    \"Theta;\" : 920,                                                                                                    // 798\n    \"Iota;\" : 921,                                                                                                     // 799\n    \"Kappa;\" : 922,                                                                                                    // 800\n    \"Lambda;\" : 923,                                                                                                   // 801\n    \"Mu;\" : 924,                                                                                                       // 802\n    \"Nu;\" : 925,                                                                                                       // 803\n    \"Xi;\" : 926,                                                                                                       // 804\n    \"Omicron;\" : 927,                                                                                                  // 805\n    \"Pi;\" : 928,                                                                                                       // 806\n    \"Rho;\" : 929,                                                                                                      // 807\n    \"Sigma;\" : 931,                                                                                                    // 808\n    \"Tau;\" : 932,                                                                                                      // 809\n    \"Upsilon;\" : 933,                                                                                                  // 810\n    \"Phi;\" : 934,                                                                                                      // 811\n    \"Chi;\" : 935,                                                                                                      // 812\n    \"Psi;\" : 936,                                                                                                      // 813\n    \"Omega;\" : 937,                                                                                                    // 814\n    \"alpha;\" : 945,                                                                                                    // 815\n    \"beta;\" : 946,                                                                                                     // 816\n    \"gamma;\" : 947,                                                                                                    // 817\n    \"delta;\" : 948,                                                                                                    // 818\n    \"epsilon;\" : 949,                                                                                                  // 819\n    \"zeta;\" : 950,                                                                                                     // 820\n    \"eta;\" : 951,                                                                                                      // 821\n    \"theta;\" : 952,                                                                                                    // 822\n    \"iota;\" : 953,                                                                                                     // 823\n    \"kappa;\" : 954,                                                                                                    // 824\n    \"lambda;\" : 955,                                                                                                   // 825\n    \"mu;\" : 956,                                                                                                       // 826\n    \"nu;\" : 957,                                                                                                       // 827\n    \"xi;\" : 958,                                                                                                       // 828\n    \"omicron;\" : 959,                                                                                                  // 829\n    \"pi;\" : 960,                                                                                                       // 830\n    \"rho;\" : 961,                                                                                                      // 831\n    \"sigmaf;\" : 962,                                                                                                   // 832\n    \"sigma;\" : 963,                                                                                                    // 833\n    \"tau;\" : 964,                                                                                                      // 834\n    \"upsilon;\" : 965,                                                                                                  // 835\n    \"phi;\" : 966,                                                                                                      // 836\n    \"chi;\" : 967,                                                                                                      // 837\n    \"psi;\" : 968,                                                                                                      // 838\n    \"omega;\" : 969,                                                                                                    // 839\n    \"thetasym;\" : 977,                                                                                                 // 840\n    \"upsih;\" : 978,                                                                                                    // 841\n    \"piv;\" : 982,                                                                                                      // 842\n    \"ensp;\" : 8194,                                                                                                    // 843\n    \"emsp;\" : 8195,                                                                                                    // 844\n    \"thinsp;\" : 8201,                                                                                                  // 845\n    \"zwnj;\" : 8204,                                                                                                    // 846\n    \"zwj;\" : 8205,                                                                                                     // 847\n    \"lrm;\" : 8206,                                                                                                     // 848\n    \"rlm;\" : 8207,                                                                                                     // 849\n    \"ndash;\" : 8211,                                                                                                   // 850\n    \"mdash;\" : 8212,                                                                                                   // 851\n    \"lsquo;\" : 8216,                                                                                                   // 852\n    \"rsquo;\" : 8217,                                                                                                   // 853\n    \"sbquo;\" : 8218,                                                                                                   // 854\n    \"ldquo;\" : 8220,                                                                                                   // 855\n    \"rdquo;\" : 8221,                                                                                                   // 856\n    \"bdquo;\" : 8222,                                                                                                   // 857\n    \"dagger;\" : 8224,                                                                                                  // 858\n    \"Dagger;\" : 8225,                                                                                                  // 859\n    \"bull;\" : 8226,                                                                                                    // 860\n    \"hellip;\" : 8230,                                                                                                  // 861\n    \"permil;\" : 8240,                                                                                                  // 862\n    \"prime;\" : 8242,                                                                                                   // 863\n    \"Prime;\" : 8243,                                                                                                   // 864\n    \"lsaquo;\" : 8249,                                                                                                  // 865\n    \"rsaquo;\" : 8250,                                                                                                  // 866\n    \"oline;\" : 8254,                                                                                                   // 867\n    \"frasl;\" : 8260,                                                                                                   // 868\n    \"euro;\" : 8364,                                                                                                    // 869\n    \"image;\" : 8465,                                                                                                   // 870\n    \"weierp;\" : 8472,                                                                                                  // 871\n    \"real;\" : 8476,                                                                                                    // 872\n    \"trade;\" : 8482,                                                                                                   // 873\n    \"alefsym;\" : 8501,                                                                                                 // 874\n    \"larr;\" : 8592,                                                                                                    // 875\n    \"uarr;\" : 8593,                                                                                                    // 876\n    \"rarr;\" : 8594,                                                                                                    // 877\n    \"darr;\" : 8595,                                                                                                    // 878\n    \"harr;\" : 8596,                                                                                                    // 879\n    \"crarr;\" : 8629,                                                                                                   // 880\n    \"lArr;\" : 8656,                                                                                                    // 881\n    \"uArr;\" : 8657,                                                                                                    // 882\n    \"rArr;\" : 8658,                                                                                                    // 883\n    \"dArr;\" : 8659,                                                                                                    // 884\n    \"hArr;\" : 8660,                                                                                                    // 885\n    \"forall;\" : 8704,                                                                                                  // 886\n    \"part;\" : 8706,                                                                                                    // 887\n    \"exist;\" : 8707,                                                                                                   // 888\n    \"empty;\" : 8709,                                                                                                   // 889\n    \"nabla;\" : 8711,                                                                                                   // 890\n    \"isin;\" : 8712,                                                                                                    // 891\n    \"notin;\" : 8713,                                                                                                   // 892\n    \"ni;\" : 8715,                                                                                                      // 893\n    \"prod;\" : 8719,                                                                                                    // 894\n    \"sum;\" : 8721,                                                                                                     // 895\n    \"minus;\" : 8722,                                                                                                   // 896\n    \"lowast;\" : 8727,                                                                                                  // 897\n    \"radic;\" : 8730,                                                                                                   // 898\n    \"prop;\" : 8733,                                                                                                    // 899\n    \"infin;\" : 8734,                                                                                                   // 900\n    \"ang;\" : 8736,                                                                                                     // 901\n    \"and;\" : 8743,                                                                                                     // 902\n    \"or;\" : 8744,                                                                                                      // 903\n    \"cap;\" : 8745,                                                                                                     // 904\n    \"cup;\" : 8746,                                                                                                     // 905\n    \"int;\" : 8747,                                                                                                     // 906\n    \"there4;\" : 8756,                                                                                                  // 907\n    \"sim;\" : 8764,                                                                                                     // 908\n    \"cong;\" : 8773,                                                                                                    // 909\n    \"asymp;\" : 8776,                                                                                                   // 910\n    \"ne;\" : 8800,                                                                                                      // 911\n    \"equiv;\" : 8801,                                                                                                   // 912\n    \"le;\" : 8804,                                                                                                      // 913\n    \"ge;\" : 8805,                                                                                                      // 914\n    \"sub;\" : 8834,                                                                                                     // 915\n    \"sup;\" : 8835,                                                                                                     // 916\n    \"nsub;\" : 8836,                                                                                                    // 917\n    \"sube;\" : 8838,                                                                                                    // 918\n    \"supe;\" : 8839,                                                                                                    // 919\n    \"oplus;\" : 8853,                                                                                                   // 920\n    \"otimes;\" : 8855,                                                                                                  // 921\n    \"perp;\" : 8869,                                                                                                    // 922\n    \"sdot;\" : 8901,                                                                                                    // 923\n    \"lceil;\" : 8968,                                                                                                   // 924\n    \"rceil;\" : 8969,                                                                                                   // 925\n    \"lfloor;\" : 8970,                                                                                                  // 926\n    \"rfloor;\" : 8971,                                                                                                  // 927\n    \"lang;\" : 9001,                                                                                                    // 928\n    \"rang;\" : 9002,                                                                                                    // 929\n    \"loz;\" : 9674,                                                                                                     // 930\n    \"spades;\" : 9824,                                                                                                  // 931\n    \"clubs;\" : 9827,                                                                                                   // 932\n    \"hearts;\" : 9829,                                                                                                  // 933\n    \"diams;\" : 9830                                                                                                    // 934\n  }                                                                                                                    // 935\n                                                                                                                       // 936\n                                                                                                                       // 937\n}).call(this);                                                                                                         // 938\n                                                                                                                       // 939\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:simple-schema/mongo-object.js                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global MongoObject:true */                                                                                          // 1\n                                                                                                                       // 2\n                                                                                                                       // 3\nvar isObject = function(obj) {                                                                                         // 4\n  return obj === Object(obj);                                                                                          // 5\n};                                                                                                                     // 6\n                                                                                                                       // 7\n// getPrototypeOf polyfill                                                                                             // 8\nif (typeof Object.getPrototypeOf !== \"function\") {                                                                     // 9\n  if (typeof \"\".__proto__ === \"object\") {                                                                              // 10\n    Object.getPrototypeOf = function(object) {                                                                         // 11\n      return object.__proto__;                                                                                         // 12\n    };                                                                                                                 // 13\n  } else {                                                                                                             // 14\n    Object.getPrototypeOf = function(object) {                                                                         // 15\n      // May break if the constructor has been tampered with                                                           // 16\n      return object.constructor.prototype;                                                                             // 17\n    };                                                                                                                 // 18\n  }                                                                                                                    // 19\n}                                                                                                                      // 20\n                                                                                                                       // 21\n/* Tests whether \"obj\" is an Object as opposed to                                                                      // 22\n * something that inherits from Object                                                                                 // 23\n *                                                                                                                     // 24\n * @param {any} obj                                                                                                    // 25\n * @returns {Boolean}                                                                                                  // 26\n */                                                                                                                    // 27\nvar isBasicObject = function(obj) {                                                                                    // 28\n  return isObject(obj) && Object.getPrototypeOf(obj) === Object.prototype;                                             // 29\n};                                                                                                                     // 30\n                                                                                                                       // 31\n/* Takes a specific string that uses mongo-style dot notation                                                          // 32\n * and returns a generic string equivalent. Replaces all numeric                                                       // 33\n * \"pieces\" with a dollar sign ($).                                                                                    // 34\n *                                                                                                                     // 35\n * @param {type} name                                                                                                  // 36\n * @returns {unresolved}                                                                                               // 37\n */                                                                                                                    // 38\nvar makeGeneric = function makeGeneric(name) {                                                                         // 39\n  if (typeof name !== \"string\") {                                                                                      // 40\n    return null;                                                                                                       // 41\n  }                                                                                                                    // 42\n  return name.replace(/\\.[0-9]+\\./g, '.$.').replace(/\\.[0-9]+$/g, '.$');                                               // 43\n};                                                                                                                     // 44\n                                                                                                                       // 45\nvar appendAffectedKey = function appendAffectedKey(affectedKey, key) {                                                 // 46\n  if (key === \"$each\") {                                                                                               // 47\n    return affectedKey;                                                                                                // 48\n  } else {                                                                                                             // 49\n    return (affectedKey ? affectedKey + \".\" + key : key);                                                              // 50\n  }                                                                                                                    // 51\n};                                                                                                                     // 52\n                                                                                                                       // 53\n// Extracts operator piece, if present, from position string                                                           // 54\nvar extractOp = function extractOp(position) {                                                                         // 55\n  var firstPositionPiece = position.slice(0, position.indexOf(\"[\"));                                                   // 56\n  return (firstPositionPiece.substring(0, 1) === \"$\") ? firstPositionPiece : null;                                     // 57\n};                                                                                                                     // 58\n                                                                                                                       // 59\n/*                                                                                                                     // 60\n * @constructor                                                                                                        // 61\n * @param {Object} objOrModifier                                                                                       // 62\n * @param {string[]} blackBoxKeys - A list of the names of keys that shouldn't be traversed                            // 63\n * @returns {undefined}                                                                                                // 64\n *                                                                                                                     // 65\n * Creates a new MongoObject instance. The object passed as the first argument                                         // 66\n * will be modified in place by calls to instance methods. Also, immediately                                           // 67\n * upon creation of the instance, the object will have any `undefined` keys                                            // 68\n * removed recursively.                                                                                                // 69\n */                                                                                                                    // 70\nMongoObject = function(objOrModifier, blackBoxKeys) {                                                                  // 71\n  var self = this;                                                                                                     // 72\n  self._obj = objOrModifier;                                                                                           // 73\n  self._affectedKeys = {};                                                                                             // 74\n  self._genericAffectedKeys = {};                                                                                      // 75\n  self._parentPositions = [];                                                                                          // 76\n  self._positionsInsideArrays = [];                                                                                    // 77\n  self._objectPositions = [];                                                                                          // 78\n                                                                                                                       // 79\n  function parseObj(val, currentPosition, affectedKey, operator, adjusted, isWithinArray) {                            // 80\n                                                                                                                       // 81\n    // Adjust for first-level modifier operators                                                                       // 82\n    if (!operator && affectedKey && affectedKey.substring(0, 1) === \"$\") {                                             // 83\n      operator = affectedKey;                                                                                          // 84\n      affectedKey = null;                                                                                              // 85\n    }                                                                                                                  // 86\n                                                                                                                       // 87\n    var affectedKeyIsBlackBox = false;                                                                                 // 88\n    var affectedKeyGeneric;                                                                                            // 89\n    var stop = false;                                                                                                  // 90\n    if (affectedKey) {                                                                                                 // 91\n                                                                                                                       // 92\n      // Adjust for $push and $addToSet and $pull and $pop                                                             // 93\n      if (!adjusted) {                                                                                                 // 94\n        if (operator === \"$push\" || operator === \"$addToSet\" || operator === \"$pop\") {                                 // 95\n          // Adjust for $each                                                                                          // 96\n          // We can simply jump forward and pretend like the $each array                                               // 97\n          // is the array for the field. This has the added benefit of                                                 // 98\n          // skipping past any $slice, which we also don't care about.                                                 // 99\n          if (isBasicObject(val) && \"$each\" in val) {                                                                  // 100\n            val = val.$each;                                                                                           // 101\n            currentPosition = currentPosition + \"[$each]\";                                                             // 102\n          } else {                                                                                                     // 103\n            affectedKey = affectedKey + \".0\";                                                                          // 104\n          }                                                                                                            // 105\n          adjusted = true;                                                                                             // 106\n        } else if (operator === \"$pull\") {                                                                             // 107\n          affectedKey = affectedKey + \".0\";                                                                            // 108\n          if (isBasicObject(val)) {                                                                                    // 109\n            stop = true;                                                                                               // 110\n          }                                                                                                            // 111\n          adjusted = true;                                                                                             // 112\n        }                                                                                                              // 113\n      }                                                                                                                // 114\n                                                                                                                       // 115\n      // Make generic key                                                                                              // 116\n      affectedKeyGeneric = makeGeneric(affectedKey);                                                                   // 117\n                                                                                                                       // 118\n      // Determine whether affected key should be treated as a black box                                               // 119\n      affectedKeyIsBlackBox = _.contains(blackBoxKeys, affectedKeyGeneric);                                            // 120\n                                                                                                                       // 121\n      // Mark that this position affects this generic and non-generic key                                              // 122\n      if (currentPosition) {                                                                                           // 123\n        self._affectedKeys[currentPosition] = affectedKey;                                                             // 124\n        self._genericAffectedKeys[currentPosition] = affectedKeyGeneric;                                               // 125\n                                                                                                                       // 126\n        // If we're within an array, mark this position so we can omit it from flat docs                               // 127\n        isWithinArray && self._positionsInsideArrays.push(currentPosition);                                            // 128\n      }                                                                                                                // 129\n    }                                                                                                                  // 130\n                                                                                                                       // 131\n    if (stop) {                                                                                                        // 132\n      return;                                                                                                          // 133\n    }                                                                                                                  // 134\n                                                                                                                       // 135\n    // Loop through arrays                                                                                             // 136\n    if (_.isArray(val) && !_.isEmpty(val)) {                                                                           // 137\n      if (currentPosition) {                                                                                           // 138\n        // Mark positions with arrays that should be ignored when we want endpoints only                               // 139\n        self._parentPositions.push(currentPosition);                                                                   // 140\n      }                                                                                                                // 141\n                                                                                                                       // 142\n      // Loop                                                                                                          // 143\n      _.each(val, function(v, i) {                                                                                     // 144\n        parseObj(v, (currentPosition ? currentPosition + \"[\" + i + \"]\" : i), affectedKey + '.' + i, operator, adjusted, true);\n      });                                                                                                              // 146\n    }                                                                                                                  // 147\n                                                                                                                       // 148\n    // Loop through object keys, only for basic objects,                                                               // 149\n    // but always for the passed-in object, even if it                                                                 // 150\n    // is a custom object.                                                                                             // 151\n    else if ((isBasicObject(val) && !affectedKeyIsBlackBox) || !currentPosition) {                                     // 152\n      if (currentPosition && !_.isEmpty(val)) {                                                                        // 153\n        // Mark positions with objects that should be ignored when we want endpoints only                              // 154\n        self._parentPositions.push(currentPosition);                                                                   // 155\n        // Mark positions with objects that should be left out of flat docs.                                           // 156\n        self._objectPositions.push(currentPosition);                                                                   // 157\n      }                                                                                                                // 158\n      // Loop                                                                                                          // 159\n      _.each(val, function(v, k) {                                                                                     // 160\n        if (v === void 0) {                                                                                            // 161\n          delete val[k];                                                                                               // 162\n        } else if (k !== \"$slice\") {                                                                                   // 163\n          parseObj(v, (currentPosition ? currentPosition + \"[\" + k + \"]\" : k), appendAffectedKey(affectedKey, k), operator, adjusted, isWithinArray);\n        }                                                                                                              // 165\n      });                                                                                                              // 166\n    }                                                                                                                  // 167\n                                                                                                                       // 168\n  }                                                                                                                    // 169\n  parseObj(self._obj);                                                                                                 // 170\n                                                                                                                       // 171\n  function reParseObj() {                                                                                              // 172\n    self._affectedKeys = {};                                                                                           // 173\n    self._genericAffectedKeys = {};                                                                                    // 174\n    self._parentPositions = [];                                                                                        // 175\n    self._positionsInsideArrays = [];                                                                                  // 176\n    self._objectPositions = [];                                                                                        // 177\n    parseObj(self._obj);                                                                                               // 178\n  }                                                                                                                    // 179\n                                                                                                                       // 180\n  /**                                                                                                                  // 181\n   * @method MongoObject.forEachNode                                                                                   // 182\n   * @param {Function} func                                                                                            // 183\n   * @param {Object} [options]                                                                                         // 184\n   * @param {Boolean} [options.endPointsOnly=true] - Only call function for endpoints and not for nodes that contain other nodes\n   * @returns {undefined}                                                                                              // 186\n   *                                                                                                                   // 187\n   * Runs a function for each endpoint node in the object tree, including all items in every array.                    // 188\n   * The function arguments are                                                                                        // 189\n   * (1) the value at this node                                                                                        // 190\n   * (2) a string representing the node position                                                                       // 191\n   * (3) the representation of what would be changed in mongo, using mongo dot notation                                // 192\n   * (4) the generic equivalent of argument 3, with \"$\" instead of numeric pieces                                      // 193\n   */                                                                                                                  // 194\n  self.forEachNode = function(func, options) {                                                                         // 195\n    if (typeof func !== \"function\") {                                                                                  // 196\n      throw new Error(\"filter requires a loop function\");                                                              // 197\n    }                                                                                                                  // 198\n                                                                                                                       // 199\n    options = _.extend({                                                                                               // 200\n      endPointsOnly: true                                                                                              // 201\n    }, options);                                                                                                       // 202\n                                                                                                                       // 203\n    var updatedValues = {};                                                                                            // 204\n    _.each(self._affectedKeys, function(affectedKey, position) {                                                       // 205\n      if (options.endPointsOnly && _.contains(self._parentPositions, position)) {                                      // 206\n        return; //only endpoints                                                                                       // 207\n      }                                                                                                                // 208\n      func.call({                                                                                                      // 209\n        value: self.getValueForPosition(position),                                                                     // 210\n        operator: extractOp(position),                                                                                 // 211\n        position: position,                                                                                            // 212\n        key: affectedKey,                                                                                              // 213\n        genericKey: self._genericAffectedKeys[position],                                                               // 214\n        updateValue: function(newVal) {                                                                                // 215\n          updatedValues[position] = newVal;                                                                            // 216\n        },                                                                                                             // 217\n        remove: function() {                                                                                           // 218\n          updatedValues[position] = void 0;                                                                            // 219\n        }                                                                                                              // 220\n      });                                                                                                              // 221\n    });                                                                                                                // 222\n                                                                                                                       // 223\n    // Actually update/remove values as instructed                                                                     // 224\n    _.each(updatedValues, function(newVal, position) {                                                                 // 225\n      self.setValueForPosition(position, newVal);                                                                      // 226\n    });                                                                                                                // 227\n                                                                                                                       // 228\n  };                                                                                                                   // 229\n                                                                                                                       // 230\n  self.getValueForPosition = function(position) {                                                                      // 231\n    var subkey, subkeys = position.split(\"[\"), current = self._obj;                                                    // 232\n    for (var i = 0, ln = subkeys.length; i < ln; i++) {                                                                // 233\n      subkey = subkeys[i];                                                                                             // 234\n      // If the subkey ends in \"]\", remove the ending                                                                  // 235\n      if (subkey.slice(-1) === \"]\") {                                                                                  // 236\n        subkey = subkey.slice(0, -1);                                                                                  // 237\n      }                                                                                                                // 238\n      current = current[subkey];                                                                                       // 239\n      if (!_.isArray(current) && !isBasicObject(current) && i < ln - 1) {                                              // 240\n        return;                                                                                                        // 241\n      }                                                                                                                // 242\n    }                                                                                                                  // 243\n    return current;                                                                                                    // 244\n  };                                                                                                                   // 245\n                                                                                                                       // 246\n  /**                                                                                                                  // 247\n   * @method MongoObject.prototype.setValueForPosition                                                                 // 248\n   * @param {String} position                                                                                          // 249\n   * @param {Any} value                                                                                                // 250\n   * @returns {undefined}                                                                                              // 251\n   */                                                                                                                  // 252\n  self.setValueForPosition = function(position, value) {                                                               // 253\n    var nextPiece, subkey, subkeys = position.split(\"[\"), current = self._obj;                                         // 254\n                                                                                                                       // 255\n    for (var i = 0, ln = subkeys.length; i < ln; i++) {                                                                // 256\n      subkey = subkeys[i];                                                                                             // 257\n      // If the subkey ends in \"]\", remove the ending                                                                  // 258\n      if (subkey.slice(-1) === \"]\") {                                                                                  // 259\n        subkey = subkey.slice(0, -1);                                                                                  // 260\n      }                                                                                                                // 261\n      // If we've reached the key in the object tree that needs setting or                                             // 262\n      // deleting, do it.                                                                                              // 263\n      if (i === ln - 1) {                                                                                              // 264\n        current[subkey] = value;                                                                                       // 265\n        //if value is undefined, delete the property                                                                   // 266\n        if (value === void 0) {                                                                                        // 267\n          delete current[subkey];                                                                                      // 268\n        }                                                                                                              // 269\n      }                                                                                                                // 270\n      // Otherwise attempt to keep moving deeper into the object.                                                      // 271\n      else {                                                                                                           // 272\n        // If we're setting (as opposed to deleting) a key and we hit a place                                          // 273\n        // in the ancestor chain where the keys are not yet created, create them.                                      // 274\n        if (current[subkey] === void 0 && value !== void 0) {                                                          // 275\n          //see if the next piece is a number                                                                          // 276\n          nextPiece = subkeys[i + 1];                                                                                  // 277\n          nextPiece = parseInt(nextPiece, 10);                                                                         // 278\n          current[subkey] = isNaN(nextPiece) ? {} : [];                                                                // 279\n        }                                                                                                              // 280\n                                                                                                                       // 281\n        // Move deeper into the object                                                                                 // 282\n        current = current[subkey];                                                                                     // 283\n                                                                                                                       // 284\n        // If we can go no further, then quit                                                                          // 285\n        if (!_.isArray(current) && !isBasicObject(current) && i < ln - 1) {                                            // 286\n          return;                                                                                                      // 287\n        }                                                                                                              // 288\n      }                                                                                                                // 289\n    }                                                                                                                  // 290\n                                                                                                                       // 291\n    reParseObj();                                                                                                      // 292\n  };                                                                                                                   // 293\n                                                                                                                       // 294\n  /**                                                                                                                  // 295\n   * @method MongoObject.prototype.removeValueForPosition                                                              // 296\n   * @param {String} position                                                                                          // 297\n   * @returns {undefined}                                                                                              // 298\n   */                                                                                                                  // 299\n  self.removeValueForPosition = function(position) {                                                                   // 300\n    self.setValueForPosition(position, void 0);                                                                        // 301\n  };                                                                                                                   // 302\n                                                                                                                       // 303\n  /**                                                                                                                  // 304\n   * @method MongoObject.prototype.getKeyForPosition                                                                   // 305\n   * @param {String} position                                                                                          // 306\n   * @returns {undefined}                                                                                              // 307\n   */                                                                                                                  // 308\n  self.getKeyForPosition = function(position) {                                                                        // 309\n    return self._affectedKeys[position];                                                                               // 310\n  };                                                                                                                   // 311\n                                                                                                                       // 312\n  /**                                                                                                                  // 313\n   * @method MongoObject.prototype.getGenericKeyForPosition                                                            // 314\n   * @param {String} position                                                                                          // 315\n   * @returns {undefined}                                                                                              // 316\n   */                                                                                                                  // 317\n  self.getGenericKeyForPosition = function(position) {                                                                 // 318\n    return self._genericAffectedKeys[position];                                                                        // 319\n  };                                                                                                                   // 320\n                                                                                                                       // 321\n  /**                                                                                                                  // 322\n   * @method MongoObject.getInfoForKey                                                                                 // 323\n   * @param {String} key - Non-generic key                                                                             // 324\n   * @returns {undefined|Object}                                                                                       // 325\n   *                                                                                                                   // 326\n   * Returns the value and operator of the requested non-generic key.                                                  // 327\n   * Example: {value: 1, operator: \"$pull\"}                                                                            // 328\n   */                                                                                                                  // 329\n  self.getInfoForKey = function(key) {                                                                                 // 330\n    // Get the info                                                                                                    // 331\n    var position = self.getPositionForKey(key);                                                                        // 332\n    if (position) {                                                                                                    // 333\n      return {                                                                                                         // 334\n        value: self.getValueForPosition(position),                                                                     // 335\n        operator: extractOp(position)                                                                                  // 336\n      };                                                                                                               // 337\n    }                                                                                                                  // 338\n                                                                                                                       // 339\n    // If we haven't returned yet, check to see if there is an array value                                             // 340\n    // corresponding to this key                                                                                       // 341\n    // We find the first item within the array, strip the last piece off the                                           // 342\n    // position string, and then return whatever is at that new position in                                            // 343\n    // the original object.                                                                                            // 344\n    var positions = self.getPositionsForGenericKey(key + \".$\"), p, v;                                                  // 345\n    for (var i = 0, ln = positions.length; i < ln; i++) {                                                              // 346\n      p = positions[i];                                                                                                // 347\n      v = self.getValueForPosition(p) || self.getValueForPosition(p.slice(0, p.lastIndexOf(\"[\")));                     // 348\n      if (v) {                                                                                                         // 349\n        return {                                                                                                       // 350\n          value: v,                                                                                                    // 351\n          operator: extractOp(p)                                                                                       // 352\n        };                                                                                                             // 353\n      }                                                                                                                // 354\n    }                                                                                                                  // 355\n  };                                                                                                                   // 356\n                                                                                                                       // 357\n  /**                                                                                                                  // 358\n   * @method MongoObject.getPositionForKey                                                                             // 359\n   * @param {String} key - Non-generic key                                                                             // 360\n   * @returns {undefined|String} Position string                                                                       // 361\n   *                                                                                                                   // 362\n   * Returns the position string for the place in the object that                                                      // 363\n   * affects the requested non-generic key.                                                                            // 364\n   * Example: 'foo[bar][0]'                                                                                            // 365\n   */                                                                                                                  // 366\n  self.getPositionForKey = function(key) {                                                                             // 367\n    // Get the info                                                                                                    // 368\n    for (var position in self._affectedKeys) {                                                                         // 369\n      if (self._affectedKeys.hasOwnProperty(position)) {                                                               // 370\n        if (self._affectedKeys[position] === key) {                                                                    // 371\n          // We return the first one we find. While it's                                                               // 372\n          // possible that multiple update operators could                                                             // 373\n          // affect the same non-generic key, we'll assume that's not the case.                                        // 374\n          return position;                                                                                             // 375\n        }                                                                                                              // 376\n      }                                                                                                                // 377\n    }                                                                                                                  // 378\n                                                                                                                       // 379\n    // If we haven't returned yet, we need to check for affected keys                                                  // 380\n  };                                                                                                                   // 381\n                                                                                                                       // 382\n  /**                                                                                                                  // 383\n   * @method MongoObject.getPositionsForGenericKey                                                                     // 384\n   * @param {String} key - Generic key                                                                                 // 385\n   * @returns {String[]} Array of position strings                                                                     // 386\n   *                                                                                                                   // 387\n   * Returns an array of position strings for the places in the object that                                            // 388\n   * affect the requested generic key.                                                                                 // 389\n   * Example: ['foo[bar][0]']                                                                                          // 390\n   */                                                                                                                  // 391\n  self.getPositionsForGenericKey = function(key) {                                                                     // 392\n    // Get the info                                                                                                    // 393\n    var list = [];                                                                                                     // 394\n    for (var position in self._genericAffectedKeys) {                                                                  // 395\n      if (self._genericAffectedKeys.hasOwnProperty(position)) {                                                        // 396\n        if (self._genericAffectedKeys[position] === key) {                                                             // 397\n          list.push(position);                                                                                         // 398\n        }                                                                                                              // 399\n      }                                                                                                                // 400\n    }                                                                                                                  // 401\n                                                                                                                       // 402\n    return list;                                                                                                       // 403\n  };                                                                                                                   // 404\n                                                                                                                       // 405\n  /**                                                                                                                  // 406\n   * @deprecated Use getInfoForKey                                                                                     // 407\n   * @method MongoObject.getValueForKey                                                                                // 408\n   * @param {String} key - Non-generic key                                                                             // 409\n   * @returns {undefined|Any}                                                                                          // 410\n   *                                                                                                                   // 411\n   * Returns the value of the requested non-generic key                                                                // 412\n   */                                                                                                                  // 413\n  self.getValueForKey = function(key) {                                                                                // 414\n    var position = self.getPositionForKey(key);                                                                        // 415\n    if (position) {                                                                                                    // 416\n      return self.getValueForPosition(position);                                                                       // 417\n    }                                                                                                                  // 418\n  };                                                                                                                   // 419\n                                                                                                                       // 420\n  /**                                                                                                                  // 421\n   * @method MongoObject.prototype.addKey                                                                              // 422\n   * @param {String} key - Key to set                                                                                  // 423\n   * @param {Any} val - Value to give this key                                                                         // 424\n   * @param {String} op - Operator under which to set it, or `null` for a non-modifier object                          // 425\n   * @returns {undefined}                                                                                              // 426\n   *                                                                                                                   // 427\n   * Adds `key` with value `val` under operator `op` to the source object.                                             // 428\n   */                                                                                                                  // 429\n  self.addKey = function(key, val, op) {                                                                               // 430\n    var position = op ? op + \"[\" + key + \"]\" : MongoObject._keyToPosition(key);                                        // 431\n    self.setValueForPosition(position, val);                                                                           // 432\n  };                                                                                                                   // 433\n                                                                                                                       // 434\n  /**                                                                                                                  // 435\n   * @method MongoObject.prototype.removeGenericKeys                                                                   // 436\n   * @param {String[]} keys                                                                                            // 437\n   * @returns {undefined}                                                                                              // 438\n   *                                                                                                                   // 439\n   * Removes anything that affects any of the generic keys in the list                                                 // 440\n   */                                                                                                                  // 441\n  self.removeGenericKeys = function(keys) {                                                                            // 442\n    for (var position in self._genericAffectedKeys) {                                                                  // 443\n      if (self._genericAffectedKeys.hasOwnProperty(position)) {                                                        // 444\n        if (_.contains(keys, self._genericAffectedKeys[position])) {                                                   // 445\n          self.removeValueForPosition(position);                                                                       // 446\n        }                                                                                                              // 447\n      }                                                                                                                // 448\n    }                                                                                                                  // 449\n  };                                                                                                                   // 450\n                                                                                                                       // 451\n  /**                                                                                                                  // 452\n   * @method MongoObject.removeGenericKey                                                                              // 453\n   * @param {String} key                                                                                               // 454\n   * @returns {undefined}                                                                                              // 455\n   *                                                                                                                   // 456\n   * Removes anything that affects the requested generic key                                                           // 457\n   */                                                                                                                  // 458\n  self.removeGenericKey = function(key) {                                                                              // 459\n    for (var position in self._genericAffectedKeys) {                                                                  // 460\n      if (self._genericAffectedKeys.hasOwnProperty(position)) {                                                        // 461\n        if (self._genericAffectedKeys[position] === key) {                                                             // 462\n          self.removeValueForPosition(position);                                                                       // 463\n        }                                                                                                              // 464\n      }                                                                                                                // 465\n    }                                                                                                                  // 466\n  };                                                                                                                   // 467\n                                                                                                                       // 468\n  /**                                                                                                                  // 469\n   * @method MongoObject.removeKey                                                                                     // 470\n   * @param {String} key                                                                                               // 471\n   * @returns {undefined}                                                                                              // 472\n   *                                                                                                                   // 473\n   * Removes anything that affects the requested non-generic key                                                       // 474\n   */                                                                                                                  // 475\n  self.removeKey = function(key) {                                                                                     // 476\n    // We don't use getPositionForKey here because we want to be sure to                                               // 477\n    // remove for all positions if there are multiple.                                                                 // 478\n    for (var position in self._affectedKeys) {                                                                         // 479\n      if (self._affectedKeys.hasOwnProperty(position)) {                                                               // 480\n        if (self._affectedKeys[position] === key) {                                                                    // 481\n          self.removeValueForPosition(position);                                                                       // 482\n        }                                                                                                              // 483\n      }                                                                                                                // 484\n    }                                                                                                                  // 485\n  };                                                                                                                   // 486\n                                                                                                                       // 487\n  /**                                                                                                                  // 488\n   * @method MongoObject.removeKeys                                                                                    // 489\n   * @param {String[]} keys                                                                                            // 490\n   * @returns {undefined}                                                                                              // 491\n   *                                                                                                                   // 492\n   * Removes anything that affects any of the non-generic keys in the list                                             // 493\n   */                                                                                                                  // 494\n  self.removeKeys = function(keys) {                                                                                   // 495\n    for (var i = 0, ln = keys.length; i < ln; i++) {                                                                   // 496\n      self.removeKey(keys[i]);                                                                                         // 497\n    }                                                                                                                  // 498\n  };                                                                                                                   // 499\n                                                                                                                       // 500\n  /**                                                                                                                  // 501\n   * @method MongoObject.filterGenericKeys                                                                             // 502\n   * @param {Function} test - Test function                                                                            // 503\n   * @returns {undefined}                                                                                              // 504\n   *                                                                                                                   // 505\n   * Passes all affected keys to a test function, which                                                                // 506\n   * should return false to remove whatever is affecting that key                                                      // 507\n   */                                                                                                                  // 508\n  self.filterGenericKeys = function(test) {                                                                            // 509\n    var gk, checkedKeys = [], keysToRemove = [];                                                                       // 510\n    for (var position in self._genericAffectedKeys) {                                                                  // 511\n      if (self._genericAffectedKeys.hasOwnProperty(position)) {                                                        // 512\n        gk = self._genericAffectedKeys[position];                                                                      // 513\n        if (!_.contains(checkedKeys, gk)) {                                                                            // 514\n          checkedKeys.push(gk);                                                                                        // 515\n          if (gk && !test(gk)) {                                                                                       // 516\n            keysToRemove.push(gk);                                                                                     // 517\n          }                                                                                                            // 518\n        }                                                                                                              // 519\n      }                                                                                                                // 520\n    }                                                                                                                  // 521\n                                                                                                                       // 522\n    _.each(keysToRemove, function(key) {                                                                               // 523\n      self.removeGenericKey(key);                                                                                      // 524\n    });                                                                                                                // 525\n  };                                                                                                                   // 526\n                                                                                                                       // 527\n  /**                                                                                                                  // 528\n   * @method MongoObject.setValueForKey                                                                                // 529\n   * @param {String} key                                                                                               // 530\n   * @param {Any} val                                                                                                  // 531\n   * @returns {undefined}                                                                                              // 532\n   *                                                                                                                   // 533\n   * Sets the value for every place in the object that affects                                                         // 534\n   * the requested non-generic key                                                                                     // 535\n   */                                                                                                                  // 536\n  self.setValueForKey = function(key, val) {                                                                           // 537\n    // We don't use getPositionForKey here because we want to be sure to                                               // 538\n    // set the value for all positions if there are multiple.                                                          // 539\n    for (var position in self._affectedKeys) {                                                                         // 540\n      if (self._affectedKeys.hasOwnProperty(position)) {                                                               // 541\n        if (self._affectedKeys[position] === key) {                                                                    // 542\n          self.setValueForPosition(position, val);                                                                     // 543\n        }                                                                                                              // 544\n      }                                                                                                                // 545\n    }                                                                                                                  // 546\n  };                                                                                                                   // 547\n                                                                                                                       // 548\n  /**                                                                                                                  // 549\n   * @method MongoObject.setValueForGenericKey                                                                         // 550\n   * @param {String} key                                                                                               // 551\n   * @param {Any} val                                                                                                  // 552\n   * @returns {undefined}                                                                                              // 553\n   *                                                                                                                   // 554\n   * Sets the value for every place in the object that affects                                                         // 555\n   * the requested generic key                                                                                         // 556\n   */                                                                                                                  // 557\n  self.setValueForGenericKey = function(key, val) {                                                                    // 558\n    // We don't use getPositionForKey here because we want to be sure to                                               // 559\n    // set the value for all positions if there are multiple.                                                          // 560\n    for (var position in self._genericAffectedKeys) {                                                                  // 561\n      if (self._genericAffectedKeys.hasOwnProperty(position)) {                                                        // 562\n        if (self._genericAffectedKeys[position] === key) {                                                             // 563\n          self.setValueForPosition(position, val);                                                                     // 564\n        }                                                                                                              // 565\n      }                                                                                                                // 566\n    }                                                                                                                  // 567\n  };                                                                                                                   // 568\n                                                                                                                       // 569\n  /**                                                                                                                  // 570\n   * @method MongoObject.getObject                                                                                     // 571\n   * @returns {Object}                                                                                                 // 572\n   *                                                                                                                   // 573\n   * Get the source object, potentially modified by other method calls on this                                         // 574\n   * MongoObject instance.                                                                                             // 575\n   */                                                                                                                  // 576\n  self.getObject = function() {                                                                                        // 577\n    return self._obj;                                                                                                  // 578\n  };                                                                                                                   // 579\n                                                                                                                       // 580\n  /**                                                                                                                  // 581\n   * @method MongoObject.getFlatObject                                                                                 // 582\n   * @returns {Object}                                                                                                 // 583\n   *                                                                                                                   // 584\n   * Gets a flat object based on the MongoObject instance.                                                             // 585\n   * In a flat object, the key is the name of the non-generic affectedKey,                                             // 586\n   * with mongo dot notation if necessary, and the value is the value for                                              // 587\n   * that key.                                                                                                         // 588\n   *                                                                                                                   // 589\n   * With `keepArrays: true`, we don't flatten within arrays. Currently                                                // 590\n   * MongoDB does not see a key such as `a.0.b` and automatically assume                                               // 591\n   * an array. Instead it would create an object with key \"0\" if there                                                 // 592\n   * wasn't already an array saved as the value of `a`, which is rarely                                                // 593\n   * if ever what we actually want. To avoid this confusion, we                                                        // 594\n   * set entire arrays.                                                                                                // 595\n   */                                                                                                                  // 596\n  self.getFlatObject = function(options) {                                                                             // 597\n    options = options || {};                                                                                           // 598\n    var newObj = {};                                                                                                   // 599\n    _.each(self._affectedKeys, function(affectedKey, position) {                                                       // 600\n      if (typeof affectedKey === \"string\" &&                                                                           // 601\n        (options.keepArrays === true && !_.contains(self._positionsInsideArrays, position) && !_.contains(self._objectPositions, position)) ||\n        (!options.keepArrays && !_.contains(self._parentPositions, position))                                          // 603\n        ) {                                                                                                            // 604\n        newObj[affectedKey] = self.getValueForPosition(position);                                                      // 605\n      }                                                                                                                // 606\n    });                                                                                                                // 607\n    return newObj;                                                                                                     // 608\n  };                                                                                                                   // 609\n                                                                                                                       // 610\n  /**                                                                                                                  // 611\n   * @method MongoObject.affectsKey                                                                                    // 612\n   * @param {String} key                                                                                               // 613\n   * @returns {Object}                                                                                                 // 614\n   *                                                                                                                   // 615\n   * Returns true if the non-generic key is affected by this object                                                    // 616\n   */                                                                                                                  // 617\n  self.affectsKey = function(key) {                                                                                    // 618\n    return !!self.getPositionForKey(key);                                                                              // 619\n  };                                                                                                                   // 620\n                                                                                                                       // 621\n  /**                                                                                                                  // 622\n   * @method MongoObject.affectsGenericKey                                                                             // 623\n   * @param {String} key                                                                                               // 624\n   * @returns {Object}                                                                                                 // 625\n   *                                                                                                                   // 626\n   * Returns true if the generic key is affected by this object                                                        // 627\n   */                                                                                                                  // 628\n  self.affectsGenericKey = function(key) {                                                                             // 629\n    for (var position in self._genericAffectedKeys) {                                                                  // 630\n      if (self._genericAffectedKeys.hasOwnProperty(position)) {                                                        // 631\n        if (self._genericAffectedKeys[position] === key) {                                                             // 632\n          return true;                                                                                                 // 633\n        }                                                                                                              // 634\n      }                                                                                                                // 635\n    }                                                                                                                  // 636\n    return false;                                                                                                      // 637\n  };                                                                                                                   // 638\n                                                                                                                       // 639\n  /**                                                                                                                  // 640\n   * @method MongoObject.affectsGenericKeyImplicit                                                                     // 641\n   * @param {String} key                                                                                               // 642\n   * @returns {Object}                                                                                                 // 643\n   *                                                                                                                   // 644\n   * Like affectsGenericKey, but will return true if a child key is affected                                           // 645\n   */                                                                                                                  // 646\n  self.affectsGenericKeyImplicit = function(key) {                                                                     // 647\n    for (var position in self._genericAffectedKeys) {                                                                  // 648\n      if (self._genericAffectedKeys.hasOwnProperty(position)) {                                                        // 649\n        var affectedKey = self._genericAffectedKeys[position];                                                         // 650\n                                                                                                                       // 651\n        // If the affected key is the test key                                                                         // 652\n        if (affectedKey === key) {                                                                                     // 653\n          return true;                                                                                                 // 654\n        }                                                                                                              // 655\n                                                                                                                       // 656\n        // If the affected key implies the test key because the affected key                                           // 657\n        // starts with the test key followed by a period                                                               // 658\n        if (affectedKey.substring(0, key.length + 1) === key + \".\") {                                                  // 659\n          return true;                                                                                                 // 660\n        }                                                                                                              // 661\n                                                                                                                       // 662\n        // If the affected key implies the test key because the affected key                                           // 663\n        // starts with the test key and the test key ends with \".$\"                                                    // 664\n        var lastTwo = key.slice(-2);                                                                                   // 665\n        if (lastTwo === \".$\" && key.slice(0, -2) === affectedKey) {                                                    // 666\n          return true;                                                                                                 // 667\n        }                                                                                                              // 668\n      }                                                                                                                // 669\n    }                                                                                                                  // 670\n    return false;                                                                                                      // 671\n  };                                                                                                                   // 672\n};                                                                                                                     // 673\n                                                                                                                       // 674\n/** Takes a string representation of an object key and its value                                                       // 675\n *  and updates \"obj\" to contain that key with that value.                                                             // 676\n *                                                                                                                     // 677\n *  Example keys and results if val is 1:                                                                              // 678\n *    \"a\" -> {a: 1}                                                                                                    // 679\n *    \"a[b]\" -> {a: {b: 1}}                                                                                            // 680\n *    \"a[b][0]\" -> {a: {b: [1]}}                                                                                       // 681\n *    \"a[b.0.c]\" -> {a: {'b.0.c': 1}}                                                                                  // 682\n */                                                                                                                    // 683\n                                                                                                                       // 684\n/** Takes a string representation of an object key and its value                                                       // 685\n *  and updates \"obj\" to contain that key with that value.                                                             // 686\n *                                                                                                                     // 687\n *  Example keys and results if val is 1:                                                                              // 688\n *    \"a\" -> {a: 1}                                                                                                    // 689\n *    \"a[b]\" -> {a: {b: 1}}                                                                                            // 690\n *    \"a[b][0]\" -> {a: {b: [1]}}                                                                                       // 691\n *    \"a[b.0.c]\" -> {a: {'b.0.c': 1}}                                                                                  // 692\n *                                                                                                                     // 693\n * @param {any} val                                                                                                    // 694\n * @param {String} key                                                                                                 // 695\n * @param {Object} obj                                                                                                 // 696\n * @returns {undefined}                                                                                                // 697\n */                                                                                                                    // 698\nMongoObject.expandKey = function(val, key, obj) {                                                                      // 699\n  var nextPiece, subkey, subkeys = key.split(\"[\"), current = obj;                                                      // 700\n  for (var i = 0, ln = subkeys.length; i < ln; i++) {                                                                  // 701\n    subkey = subkeys[i];                                                                                               // 702\n    if (subkey.slice(-1) === \"]\") {                                                                                    // 703\n      subkey = subkey.slice(0, -1);                                                                                    // 704\n    }                                                                                                                  // 705\n    if (i === ln - 1) {                                                                                                // 706\n      //last iteration; time to set the value; always overwrite                                                        // 707\n      current[subkey] = val;                                                                                           // 708\n      //if val is undefined, delete the property                                                                       // 709\n      if (val === void 0) {                                                                                            // 710\n        delete current[subkey];                                                                                        // 711\n      }                                                                                                                // 712\n    } else {                                                                                                           // 713\n      //see if the next piece is a number                                                                              // 714\n      nextPiece = subkeys[i + 1];                                                                                      // 715\n      nextPiece = parseInt(nextPiece, 10);                                                                             // 716\n      if (!current[subkey]) {                                                                                          // 717\n        current[subkey] = isNaN(nextPiece) ? {} : [];                                                                  // 718\n      }                                                                                                                // 719\n    }                                                                                                                  // 720\n    current = current[subkey];                                                                                         // 721\n  }                                                                                                                    // 722\n};                                                                                                                     // 723\n                                                                                                                       // 724\nMongoObject._keyToPosition = function keyToPosition(key, wrapAll) {                                                    // 725\n  var position = '';                                                                                                   // 726\n  _.each(key.split(\".\"), function (piece, i) {                                                                         // 727\n    if (i === 0 && !wrapAll) {                                                                                         // 728\n      position += piece;                                                                                               // 729\n    } else {                                                                                                           // 730\n      position += \"[\" + piece + \"]\";                                                                                   // 731\n    }                                                                                                                  // 732\n  });                                                                                                                  // 733\n  return position;                                                                                                     // 734\n};                                                                                                                     // 735\n                                                                                                                       // 736\n/**                                                                                                                    // 737\n * @method MongoObject._positionToKey                                                                                  // 738\n * @param {String} position                                                                                            // 739\n * @returns {String} The key that this position in an object would affect.                                             // 740\n *                                                                                                                     // 741\n * This is different from MongoObject.prototype.getKeyForPosition in that                                              // 742\n * this method does not depend on the requested position actually being                                                // 743\n * present in any particular MongoObject.                                                                              // 744\n */                                                                                                                    // 745\nMongoObject._positionToKey = function positionToKey(position) {                                                        // 746\n  //XXX Probably a better way to do this, but this is                                                                  // 747\n  //foolproof for now.                                                                                                 // 748\n  var mDoc = new MongoObject({});                                                                                      // 749\n  mDoc.setValueForPosition(position, 1); //value doesn't matter                                                        // 750\n  var key = mDoc.getKeyForPosition(position);                                                                          // 751\n  mDoc = null;                                                                                                         // 752\n  return key;                                                                                                          // 753\n};                                                                                                                     // 754\n                                                                                                                       // 755\n                                                                                                                       // 756\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:simple-schema/simple-schema-utility.js                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global Utility:true */                                                                                              // 1\n                                                                                                                       // 2\nUtility = {                                                                                                            // 3\n  appendAffectedKey: function appendAffectedKey(affectedKey, key) {                                                    // 4\n    if (key === \"$each\") {                                                                                             // 5\n      return affectedKey;                                                                                              // 6\n    } else {                                                                                                           // 7\n      return (affectedKey ? affectedKey + \".\" + key : key);                                                            // 8\n    }                                                                                                                  // 9\n  },                                                                                                                   // 10\n  shouldCheck: function shouldCheck(key) {                                                                             // 11\n    if (key === \"$pushAll\") {                                                                                          // 12\n      throw new Error(\"$pushAll is not supported; use $push + $each\");                                                 // 13\n    }                                                                                                                  // 14\n    return !_.contains([\"$pull\", \"$pullAll\", \"$pop\", \"$slice\"], key);                                                  // 15\n  },                                                                                                                   // 16\n  errorObject: function errorObject(errorType, keyName, keyValue) {                                                    // 17\n    return {name: keyName, type: errorType, value: keyValue};                                                          // 18\n  },                                                                                                                   // 19\n  // Tests whether it's an Object as opposed to something that inherits from Object                                    // 20\n  isBasicObject: function isBasicObject(obj) {                                                                         // 21\n    return _.isObject(obj) && Object.getPrototypeOf(obj) === Object.prototype;                                         // 22\n  },                                                                                                                   // 23\n  // The latest Safari returns false for Uint8Array, etc. instanceof Function                                          // 24\n  // unlike other browsers.                                                                                            // 25\n  safariBugFix: function safariBugFix(type) {                                                                          // 26\n    return (typeof Uint8Array !== \"undefined\" && type === Uint8Array) ||                                               // 27\n      (typeof Uint16Array !== \"undefined\" && type === Uint16Array) ||                                                  // 28\n      (typeof Uint32Array !== \"undefined\" && type === Uint32Array) ||                                                  // 29\n      (typeof Uint8ClampedArray !== \"undefined\" && type === Uint8ClampedArray);                                        // 30\n  },                                                                                                                   // 31\n  isNotNullOrUndefined: function isNotNullOrUndefined(val) {                                                           // 32\n    return val !== void 0 && val !== null;                                                                             // 33\n  },                                                                                                                   // 34\n  // Extracts operator piece, if present, from position string                                                         // 35\n  extractOp: function extractOp(position) {                                                                            // 36\n    var firstPositionPiece = position.slice(0, position.indexOf(\"[\"));                                                 // 37\n    return (firstPositionPiece.substring(0, 1) === \"$\") ? firstPositionPiece : null;                                   // 38\n  },                                                                                                                   // 39\n  deleteIfPresent: function deleteIfPresent(obj, key) {                                                                // 40\n    if (key in obj) {                                                                                                  // 41\n      delete obj[key];                                                                                                 // 42\n    }                                                                                                                  // 43\n  },                                                                                                                   // 44\n  looksLikeModifier: function looksLikeModifier(obj) {                                                                 // 45\n    for (var key in obj) {                                                                                             // 46\n      if (obj.hasOwnProperty(key) && key.substring(0, 1) === \"$\") {                                                    // 47\n        return true;                                                                                                   // 48\n      }                                                                                                                // 49\n    }                                                                                                                  // 50\n    return false;                                                                                                      // 51\n  },                                                                                                                   // 52\n  dateToDateString: function dateToDateString(date) {                                                                  // 53\n    var m = (date.getUTCMonth() + 1);                                                                                  // 54\n    if (m < 10) {                                                                                                      // 55\n      m = \"0\" + m;                                                                                                     // 56\n    }                                                                                                                  // 57\n    var d = date.getUTCDate();                                                                                         // 58\n    if (d < 10) {                                                                                                      // 59\n      d = \"0\" + d;                                                                                                     // 60\n    }                                                                                                                  // 61\n    return date.getUTCFullYear() + '-' + m + '-' + d;                                                                  // 62\n  }                                                                                                                    // 63\n};                                                                                                                     // 64\n                                                                                                                       // 65\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:simple-schema/simple-schema.js                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global SimpleSchema:true */                                                                                         // 1\n/* global SimpleSchemaValidationContext */                                                                             // 2\n/* global MongoObject */                                                                                               // 3\n/* global Utility */                                                                                                   // 4\n/* global S:true */                                                                                                    // 5\n                                                                                                                       // 6\nif (Meteor.isServer) {                                                                                                 // 7\n  S = Npm.require(\"string\");                                                                                           // 8\n}                                                                                                                      // 9\nif (Meteor.isClient) {                                                                                                 // 10\n  S = window.S;                                                                                                        // 11\n}                                                                                                                      // 12\n                                                                                                                       // 13\nvar schemaDefinition = {                                                                                               // 14\n  type: Match.Any,                                                                                                     // 15\n  label: Match.Optional(Match.OneOf(String, Function)),                                                                // 16\n  optional: Match.Optional(Match.OneOf(Boolean, Function)),                                                            // 17\n  min: Match.Optional(Match.OneOf(Number, Date, Function)),                                                            // 18\n  max: Match.Optional(Match.OneOf(Number, Date, Function)),                                                            // 19\n  minCount: Match.Optional(Match.OneOf(Number, Function)),                                                             // 20\n  maxCount: Match.Optional(Match.OneOf(Number, Function)),                                                             // 21\n  allowedValues: Match.Optional(Match.OneOf([Match.Any], Function)),                                                   // 22\n  decimal: Match.Optional(Boolean),                                                                                    // 23\n  exclusiveMax: Match.Optional(Boolean),                                                                               // 24\n  exclusiveMin: Match.Optional(Boolean),                                                                               // 25\n  regEx: Match.Optional(Match.OneOf(RegExp, [RegExp])),                                                                // 26\n  custom: Match.Optional(Function),                                                                                    // 27\n  blackbox: Match.Optional(Boolean),                                                                                   // 28\n  autoValue: Match.Optional(Function),                                                                                 // 29\n  defaultValue: Match.Optional(Match.Any),                                                                             // 30\n  trim: Match.Optional(Boolean)                                                                                        // 31\n};                                                                                                                     // 32\n                                                                                                                       // 33\n/*                                                                                                                     // 34\n * PRIVATE FUNCTIONS                                                                                                   // 35\n */                                                                                                                    // 36\n                                                                                                                       // 37\n//called by clean()                                                                                                    // 38\nvar typeconvert = function(value, type) {                                                                              // 39\n  var parsedDate;                                                                                                      // 40\n                                                                                                                       // 41\n  if (_.isArray(value) || (_.isObject(value) && !(value instanceof Date))) {                                           // 42\n    return value; //can't and shouldn't convert arrays or objects                                                      // 43\n  }                                                                                                                    // 44\n  if (type === String) {                                                                                               // 45\n    if (typeof value !== \"undefined\" && value !== null && typeof value !== \"string\") {                                 // 46\n      return value.toString();                                                                                         // 47\n    }                                                                                                                  // 48\n    return value;                                                                                                      // 49\n  }                                                                                                                    // 50\n  if (type === Number) {                                                                                               // 51\n    if (typeof value === \"string\" && !S(value).isEmpty()) {                                                            // 52\n      //try to convert numeric strings to numbers                                                                      // 53\n      var numberVal = Number(value);                                                                                   // 54\n      if (!isNaN(numberVal)) {                                                                                         // 55\n        return numberVal;                                                                                              // 56\n      } else {                                                                                                         // 57\n        return value; //leave string; will fail validation                                                             // 58\n      }                                                                                                                // 59\n    }                                                                                                                  // 60\n    return value;                                                                                                      // 61\n  }                                                                                                                    // 62\n  //                                                                                                                   // 63\n  // If target type is a Date we can safely convert from either a                                                      // 64\n  // number (Integer value representing the number of milliseconds                                                     // 65\n  // since 1 January 1970 00:00:00 UTC) or a string that can be parsed                                                 // 66\n  // by Date.                                                                                                          // 67\n  //                                                                                                                   // 68\n  if (type === Date) {                                                                                                 // 69\n    if (typeof value === \"string\") {                                                                                   // 70\n      parsedDate = Date.parse(value);                                                                                  // 71\n      if (isNaN(parsedDate) === false) {                                                                               // 72\n        return new Date(parsedDate);                                                                                   // 73\n      }                                                                                                                // 74\n    }                                                                                                                  // 75\n    if (typeof value === \"number\") {                                                                                   // 76\n      return new Date(value);                                                                                          // 77\n    }                                                                                                                  // 78\n  }                                                                                                                    // 79\n  return value;                                                                                                        // 80\n};                                                                                                                     // 81\n                                                                                                                       // 82\nvar expandSchema = function(schema) {                                                                                  // 83\n  // Flatten schema by inserting nested definitions                                                                    // 84\n  _.each(schema, function(val, key) {                                                                                  // 85\n    var dot, type;                                                                                                     // 86\n    if (!val) {                                                                                                        // 87\n      return;                                                                                                          // 88\n    }                                                                                                                  // 89\n    if (Match.test(val.type, SimpleSchema)) {                                                                          // 90\n      dot = '.';                                                                                                       // 91\n      type = val.type;                                                                                                 // 92\n      val.type = Object;                                                                                               // 93\n    } else if (Match.test(val.type, [SimpleSchema])) {                                                                 // 94\n      dot = '.$.';                                                                                                     // 95\n      type = val.type[0];                                                                                              // 96\n      val.type = [Object];                                                                                             // 97\n    } else {                                                                                                           // 98\n      return;                                                                                                          // 99\n    }                                                                                                                  // 100\n    //add child schema definitions to parent schema                                                                    // 101\n    _.each(type._schema, function(subVal, subKey) {                                                                    // 102\n      var newKey = key + dot + subKey;                                                                                 // 103\n      if (!(newKey in schema)) {                                                                                       // 104\n        schema[newKey] = subVal;                                                                                       // 105\n      }                                                                                                                // 106\n    });                                                                                                                // 107\n  });                                                                                                                  // 108\n  return schema;                                                                                                       // 109\n};                                                                                                                     // 110\n                                                                                                                       // 111\nvar adjustArrayFields = function(schema) {                                                                             // 112\n  _.each(schema, function(def, existingKey) {                                                                          // 113\n    if (_.isArray(def.type) || def.type === Array) {                                                                   // 114\n      // Copy some options to array-item definition                                                                    // 115\n      var itemKey = existingKey + \".$\";                                                                                // 116\n      if (!(itemKey in schema)) {                                                                                      // 117\n        schema[itemKey] = {};                                                                                          // 118\n      }                                                                                                                // 119\n      if (_.isArray(def.type)) {                                                                                       // 120\n        schema[itemKey].type = def.type[0];                                                                            // 121\n      }                                                                                                                // 122\n      if (def.label) {                                                                                                 // 123\n        schema[itemKey].label = def.label;                                                                             // 124\n      }                                                                                                                // 125\n      schema[itemKey].optional = true;                                                                                 // 126\n      if (typeof def.min !== \"undefined\") {                                                                            // 127\n        schema[itemKey].min = def.min;                                                                                 // 128\n      }                                                                                                                // 129\n      if (typeof def.max !== \"undefined\") {                                                                            // 130\n        schema[itemKey].max = def.max;                                                                                 // 131\n      }                                                                                                                // 132\n      if (typeof def.allowedValues !== \"undefined\") {                                                                  // 133\n        schema[itemKey].allowedValues = def.allowedValues;                                                             // 134\n      }                                                                                                                // 135\n      if (typeof def.decimal !== \"undefined\") {                                                                        // 136\n        schema[itemKey].decimal = def.decimal;                                                                         // 137\n      }                                                                                                                // 138\n      if (typeof def.exclusiveMax !== \"undefined\") {                                                                   // 139\n        schema[itemKey].exclusiveMax = def.exclusiveMax;                                                               // 140\n      }                                                                                                                // 141\n      if (typeof def.exclusiveMin !== \"undefined\") {                                                                   // 142\n        schema[itemKey].exclusiveMin = def.exclusiveMin;                                                               // 143\n      }                                                                                                                // 144\n      if (typeof def.regEx !== \"undefined\") {                                                                          // 145\n        schema[itemKey].regEx = def.regEx;                                                                             // 146\n      }                                                                                                                // 147\n      if (typeof def.blackbox !== \"undefined\") {                                                                       // 148\n        schema[itemKey].blackbox = def.blackbox;                                                                       // 149\n      }                                                                                                                // 150\n      // Remove copied options and adjust type                                                                         // 151\n      def.type = Array;                                                                                                // 152\n      _.each(['min', 'max', 'allowedValues', 'decimal', 'exclusiveMax', 'exclusiveMin', 'regEx', 'blackbox'], function(k) {\n        Utility.deleteIfPresent(def, k);                                                                               // 154\n      });                                                                                                              // 155\n    }                                                                                                                  // 156\n  });                                                                                                                  // 157\n};                                                                                                                     // 158\n                                                                                                                       // 159\n/**                                                                                                                    // 160\n * Adds implied keys.                                                                                                  // 161\n * * If schema contains a key like \"foo.$.bar\" but not \"foo\", adds \"foo\".                                              // 162\n * * If schema contains a key like \"foo\" with an array type, adds \"foo.$\".                                             // 163\n * @param {Object} schema                                                                                              // 164\n * @returns {Object} modified schema                                                                                   // 165\n */                                                                                                                    // 166\nvar addImplicitKeys = function(schema) {                                                                               // 167\n  var arrayKeysToAdd = [], objectKeysToAdd = [], newKey, key, i, ln;                                                   // 168\n                                                                                                                       // 169\n  // Pass 1 (objects)                                                                                                  // 170\n  _.each(schema, function(def, existingKey) {                                                                          // 171\n    var pos = existingKey.indexOf(\".\");                                                                                // 172\n    while (pos !== -1) {                                                                                               // 173\n      newKey = existingKey.substring(0, pos);                                                                          // 174\n                                                                                                                       // 175\n      // It's an array item; nothing to add                                                                            // 176\n      if (newKey.substring(newKey.length - 2) === \".$\") {                                                              // 177\n        pos = -1;                                                                                                      // 178\n      }                                                                                                                // 179\n      // It's an array of objects; add it with type [Object] if not already in the schema                              // 180\n      else if (existingKey.substring(pos, pos + 3) === \".$.\") {                                                        // 181\n        arrayKeysToAdd.push(newKey); // add later, since we are iterating over schema right now                        // 182\n        pos = existingKey.indexOf(\".\", pos + 3); // skip over next dot, find the one after                             // 183\n      }                                                                                                                // 184\n      // It's an object; add it with type Object if not already in the schema                                          // 185\n      else {                                                                                                           // 186\n        objectKeysToAdd.push(newKey); // add later, since we are iterating over schema right now                       // 187\n        pos = existingKey.indexOf(\".\", pos + 1); // find next dot                                                      // 188\n      }                                                                                                                // 189\n    }                                                                                                                  // 190\n  });                                                                                                                  // 191\n                                                                                                                       // 192\n  for (i = 0, ln = arrayKeysToAdd.length; i < ln; i++) {                                                               // 193\n    key = arrayKeysToAdd[i];                                                                                           // 194\n    if (!(key in schema)) {                                                                                            // 195\n      schema[key] = {type: [Object], optional: true};                                                                  // 196\n    }                                                                                                                  // 197\n  }                                                                                                                    // 198\n                                                                                                                       // 199\n  for (i = 0, ln = objectKeysToAdd.length; i < ln; i++) {                                                              // 200\n    key = objectKeysToAdd[i];                                                                                          // 201\n    if (!(key in schema)) {                                                                                            // 202\n      schema[key] = {type: Object, optional: true};                                                                    // 203\n    }                                                                                                                  // 204\n  }                                                                                                                    // 205\n                                                                                                                       // 206\n  // Pass 2 (arrays)                                                                                                   // 207\n  adjustArrayFields(schema);                                                                                           // 208\n                                                                                                                       // 209\n  return schema;                                                                                                       // 210\n};                                                                                                                     // 211\n                                                                                                                       // 212\nvar mergeSchemas = function(schemas) {                                                                                 // 213\n                                                                                                                       // 214\n  // Merge all provided schema definitions.                                                                            // 215\n  // This is effectively a shallow clone of each object, too,                                                          // 216\n  // which is what we want since we are going to manipulate it.                                                        // 217\n  var mergedSchema = {};                                                                                               // 218\n  _.each(schemas, function(schema) {                                                                                   // 219\n                                                                                                                       // 220\n    // Create a temporary SS instance so that the internal object                                                      // 221\n    // we use for merging/extending will be fully expanded                                                             // 222\n    if (Match.test(schema, SimpleSchema)) {                                                                            // 223\n      schema = schema._schema;                                                                                         // 224\n    } else {                                                                                                           // 225\n      schema = addImplicitKeys(expandSchema(schema));                                                                  // 226\n    }                                                                                                                  // 227\n                                                                                                                       // 228\n    // Loop through and extend each individual field                                                                   // 229\n    // definition. That way you can extend and overwrite                                                               // 230\n    // base field definitions.                                                                                         // 231\n    _.each(schema, function(def, field) {                                                                              // 232\n      mergedSchema[field] = mergedSchema[field] || {};                                                                 // 233\n      _.extend(mergedSchema[field], def);                                                                              // 234\n    });                                                                                                                // 235\n                                                                                                                       // 236\n  });                                                                                                                  // 237\n                                                                                                                       // 238\n  // If we merged some schemas, do this again to make sure                                                             // 239\n  // extended definitions are pushed into array item field                                                             // 240\n  // definitions properly.                                                                                             // 241\n  schemas.length && adjustArrayFields(mergedSchema);                                                                   // 242\n                                                                                                                       // 243\n  return mergedSchema;                                                                                                 // 244\n};                                                                                                                     // 245\n                                                                                                                       // 246\n// Returns an object relating the keys in the list                                                                     // 247\n// to their parent object.                                                                                             // 248\nvar getObjectKeys = function(schema, schemaKeyList) {                                                                  // 249\n  var keyPrefix, remainingText, rKeys = {}, loopArray;                                                                 // 250\n  _.each(schema, function(definition, fieldName) {                                                                     // 251\n    if (definition.type === Object) {                                                                                  // 252\n      //object                                                                                                         // 253\n      keyPrefix = fieldName + \".\";                                                                                     // 254\n    } else {                                                                                                           // 255\n      return;                                                                                                          // 256\n    }                                                                                                                  // 257\n                                                                                                                       // 258\n    loopArray = [];                                                                                                    // 259\n    _.each(schemaKeyList, function(fieldName2) {                                                                       // 260\n      if (S(fieldName2).startsWith(keyPrefix)) {                                                                       // 261\n        remainingText = fieldName2.substring(keyPrefix.length);                                                        // 262\n        if (remainingText.indexOf(\".\") === -1) {                                                                       // 263\n          loopArray.push(remainingText);                                                                               // 264\n        }                                                                                                              // 265\n      }                                                                                                                // 266\n    });                                                                                                                // 267\n    rKeys[keyPrefix] = loopArray;                                                                                      // 268\n  });                                                                                                                  // 269\n  return rKeys;                                                                                                        // 270\n};                                                                                                                     // 271\n                                                                                                                       // 272\n// returns an inflected version of fieldName to use as the label                                                       // 273\nvar inflectedLabel = function(fieldName) {                                                                             // 274\n  var label = fieldName, lastPeriod = label.lastIndexOf(\".\");                                                          // 275\n  if (lastPeriod !== -1) {                                                                                             // 276\n    label = label.substring(lastPeriod + 1);                                                                           // 277\n    if (label === \"$\") {                                                                                               // 278\n      var pcs = fieldName.split(\".\");                                                                                  // 279\n      label = pcs[pcs.length - 2];                                                                                     // 280\n    }                                                                                                                  // 281\n  }                                                                                                                    // 282\n  if (label === \"_id\") {                                                                                               // 283\n    return \"ID\";                                                                                                       // 284\n  }                                                                                                                    // 285\n  return S(label).humanize().s;                                                                                        // 286\n};                                                                                                                     // 287\n                                                                                                                       // 288\n/**                                                                                                                    // 289\n * @method getAutoValues                                                                                               // 290\n * @private                                                                                                            // 291\n * @param {MongoObject} mDoc                                                                                           // 292\n * @param {Boolean} [isModifier=false] - Is it a modifier doc?                                                         // 293\n * @param {Object} [extendedAutoValueContext] - Object that will be added to the context when calling each autoValue function\n * @returns {undefined}                                                                                                // 295\n *                                                                                                                     // 296\n * Updates doc with automatic values from autoValue functions or default                                               // 297\n * values from defaultValue. Modifies the referenced object in place.                                                  // 298\n */                                                                                                                    // 299\nfunction getAutoValues(mDoc, isModifier, extendedAutoValueContext) {                                                   // 300\n  var self = this;                                                                                                     // 301\n  var doneKeys = [];                                                                                                   // 302\n                                                                                                                       // 303\n  //on the client we can add the userId if not already in the custom context                                           // 304\n  if (Meteor.isClient && extendedAutoValueContext.userId === void 0) {                                                 // 305\n    extendedAutoValueContext.userId = (Meteor.userId && Meteor.userId()) || null;                                      // 306\n  }                                                                                                                    // 307\n                                                                                                                       // 308\n  function runAV(func) {                                                                                               // 309\n    var affectedKey = this.key;                                                                                        // 310\n    // If already called for this key, skip it                                                                         // 311\n    if (_.contains(doneKeys, affectedKey)) {                                                                           // 312\n      return;                                                                                                          // 313\n    }                                                                                                                  // 314\n    var lastDot = affectedKey.lastIndexOf('.');                                                                        // 315\n    var fieldParentName = lastDot === -1 ? '' : affectedKey.slice(0, lastDot + 1);                                     // 316\n    var doUnset = false;                                                                                               // 317\n    var autoValue = func.call(_.extend({                                                                               // 318\n      isSet: (this.value !== void 0),                                                                                  // 319\n      unset: function() {                                                                                              // 320\n        doUnset = true;                                                                                                // 321\n      },                                                                                                               // 322\n      value: this.value,                                                                                               // 323\n      operator: this.operator,                                                                                         // 324\n      field: function(fName) {                                                                                         // 325\n        var keyInfo = mDoc.getInfoForKey(fName) || {};                                                                 // 326\n        return {                                                                                                       // 327\n          isSet: (keyInfo.value !== void 0),                                                                           // 328\n          value: keyInfo.value,                                                                                        // 329\n          operator: keyInfo.operator || null                                                                           // 330\n        };                                                                                                             // 331\n      },                                                                                                               // 332\n      siblingField: function(fName) {                                                                                  // 333\n        var keyInfo = mDoc.getInfoForKey(fieldParentName + fName) || {};                                               // 334\n        return {                                                                                                       // 335\n          isSet: (keyInfo.value !== void 0),                                                                           // 336\n          value: keyInfo.value,                                                                                        // 337\n          operator: keyInfo.operator || null                                                                           // 338\n        };                                                                                                             // 339\n      }                                                                                                                // 340\n    }, extendedAutoValueContext || {}), mDoc.getObject());                                                             // 341\n                                                                                                                       // 342\n    // Update tracking of which keys we've run autovalue for                                                           // 343\n    doneKeys.push(affectedKey);                                                                                        // 344\n                                                                                                                       // 345\n    if (autoValue === void 0) {                                                                                        // 346\n      if (doUnset) {                                                                                                   // 347\n        mDoc.removeValueForPosition(this.position);                                                                    // 348\n      }                                                                                                                // 349\n      return;                                                                                                          // 350\n    }                                                                                                                  // 351\n                                                                                                                       // 352\n    // If the user's auto value is of the pseudo-modifier format, parse it                                             // 353\n    // into operator and value.                                                                                        // 354\n    var op, newValue;                                                                                                  // 355\n    if (_.isObject(autoValue)) {                                                                                       // 356\n      for (var key in autoValue) {                                                                                     // 357\n        if (autoValue.hasOwnProperty(key) && key.substring(0, 1) === \"$\") {                                            // 358\n          op = key;                                                                                                    // 359\n          newValue = autoValue[key];                                                                                   // 360\n          break;                                                                                                       // 361\n        }                                                                                                              // 362\n      }                                                                                                                // 363\n    }                                                                                                                  // 364\n                                                                                                                       // 365\n    // Add $set for updates and upserts if necessary                                                                   // 366\n    if (!op && isModifier && this.position.slice(0, 1) !== '$') {                                                      // 367\n      op = \"$set\";                                                                                                     // 368\n      newValue = autoValue;                                                                                            // 369\n    }                                                                                                                  // 370\n                                                                                                                       // 371\n    // Update/change value                                                                                             // 372\n    if (op) {                                                                                                          // 373\n      mDoc.removeValueForPosition(this.position);                                                                      // 374\n      mDoc.setValueForPosition(op + '[' + affectedKey + ']', newValue);                                                // 375\n    } else {                                                                                                           // 376\n      mDoc.setValueForPosition(this.position, autoValue);                                                              // 377\n    }                                                                                                                  // 378\n  }                                                                                                                    // 379\n                                                                                                                       // 380\n  _.each(self._autoValues, function(func, fieldName) {                                                                 // 381\n    var positionSuffix, key, keySuffix, positions;                                                                     // 382\n                                                                                                                       // 383\n    // If we're under an array, run autovalue for all the properties of                                                // 384\n    // any objects that are present in the nearest ancestor array.                                                     // 385\n    if (fieldName.indexOf(\"$\") !== -1) {                                                                               // 386\n      var testField = fieldName.slice(0, fieldName.lastIndexOf(\"$\") + 1);                                              // 387\n      keySuffix = fieldName.slice(testField.length + 1);                                                               // 388\n      positionSuffix = MongoObject._keyToPosition(keySuffix, true);                                                    // 389\n      keySuffix = '.' + keySuffix;                                                                                     // 390\n      positions = mDoc.getPositionsForGenericKey(testField);                                                           // 391\n    } else {                                                                                                           // 392\n                                                                                                                       // 393\n      // See if anything in the object affects this key                                                                // 394\n      positions = mDoc.getPositionsForGenericKey(fieldName);                                                           // 395\n                                                                                                                       // 396\n      // Run autovalue for properties that are set in the object                                                       // 397\n      if (positions.length) {                                                                                          // 398\n        key = fieldName;                                                                                               // 399\n        keySuffix = '';                                                                                                // 400\n        positionSuffix = '';                                                                                           // 401\n      }                                                                                                                // 402\n                                                                                                                       // 403\n      // Run autovalue for properties that are NOT set in the object                                                   // 404\n      else {                                                                                                           // 405\n        key = fieldName;                                                                                               // 406\n        keySuffix = '';                                                                                                // 407\n        positionSuffix = '';                                                                                           // 408\n        if (isModifier) {                                                                                              // 409\n          positions = [\"$set[\" + fieldName + \"]\"];                                                                     // 410\n        } else {                                                                                                       // 411\n          positions = [MongoObject._keyToPosition(fieldName)];                                                         // 412\n        }                                                                                                              // 413\n      }                                                                                                                // 414\n                                                                                                                       // 415\n    }                                                                                                                  // 416\n                                                                                                                       // 417\n    _.each(positions, function(position) {                                                                             // 418\n      runAV.call({                                                                                                     // 419\n        key: (key || MongoObject._positionToKey(position)) + keySuffix,                                                // 420\n        value: mDoc.getValueForPosition(position + positionSuffix),                                                    // 421\n        operator: Utility.extractOp(position),                                                                         // 422\n        position: position + positionSuffix                                                                            // 423\n      }, func);                                                                                                        // 424\n    });                                                                                                                // 425\n  });                                                                                                                  // 426\n}                                                                                                                      // 427\n                                                                                                                       // 428\n//exported                                                                                                             // 429\nSimpleSchema = function(schemas, options) {                                                                            // 430\n  var self = this;                                                                                                     // 431\n  var firstLevelSchemaKeys = [];                                                                                       // 432\n  var fieldNameRoot;                                                                                                   // 433\n  options = options || {};                                                                                             // 434\n  schemas = schemas || {};                                                                                             // 435\n                                                                                                                       // 436\n  if (!_.isArray(schemas)) {                                                                                           // 437\n    schemas = [schemas];                                                                                               // 438\n  }                                                                                                                    // 439\n                                                                                                                       // 440\n  // adjust and store a copy of the schema definitions                                                                 // 441\n  self._schema = mergeSchemas(schemas);                                                                                // 442\n                                                                                                                       // 443\n  // store the list of defined keys for speedier checking                                                              // 444\n  self._schemaKeys = [];                                                                                               // 445\n                                                                                                                       // 446\n  // store autoValue functions by key                                                                                  // 447\n  self._autoValues = {};                                                                                               // 448\n                                                                                                                       // 449\n  // store the list of blackbox keys for passing to MongoObject constructor                                            // 450\n  self._blackboxKeys = [];                                                                                             // 451\n                                                                                                                       // 452\n  // a place to store custom validators for this instance                                                              // 453\n  self._validators = [];                                                                                               // 454\n                                                                                                                       // 455\n  // a place to store custom error messages for this schema                                                            // 456\n  self._messages = {};                                                                                                 // 457\n                                                                                                                       // 458\n  self._depsMessages = new Deps.Dependency();                                                                          // 459\n  self._depsLabels = {};                                                                                               // 460\n                                                                                                                       // 461\n  _.each(self._schema, function(definition, fieldName) {                                                               // 462\n    // Validate the field definition                                                                                   // 463\n    if (!Match.test(definition, schemaDefinition)) {                                                                   // 464\n      throw new Error('Invalid definition for ' + fieldName + ' field.');                                              // 465\n    }                                                                                                                  // 466\n                                                                                                                       // 467\n    fieldNameRoot = fieldName.split(\".\")[0];                                                                           // 468\n                                                                                                                       // 469\n    self._schemaKeys.push(fieldName);                                                                                  // 470\n                                                                                                                       // 471\n    // We support defaultValue shortcut by converting it immediately into an                                           // 472\n    // autoValue.                                                                                                      // 473\n    if ('defaultValue' in definition) {                                                                                // 474\n      if ('autoValue' in definition) {                                                                                 // 475\n        console.warn('SimpleSchema: Found both autoValue and defaultValue options for \"' + fieldName + '\". Ignoring defaultValue.');\n      } else {                                                                                                         // 477\n        if (fieldName.slice(-2) === \".$\") {                                                                            // 478\n          throw new Error('An array item field (one that ends with \".$\") cannot have defaultValue.');                  // 479\n        }                                                                                                              // 480\n        self._autoValues[fieldName] = (function defineAutoValue(v) {                                                   // 481\n          return function() {                                                                                          // 482\n            if (this.operator === null && !this.isSet) {                                                               // 483\n              return v;                                                                                                // 484\n            }                                                                                                          // 485\n          };                                                                                                           // 486\n        })(definition.defaultValue);                                                                                   // 487\n      }                                                                                                                // 488\n    }                                                                                                                  // 489\n                                                                                                                       // 490\n    if ('autoValue' in definition) {                                                                                   // 491\n      if (fieldName.slice(-2) === \".$\") {                                                                              // 492\n        throw new Error('An array item field (one that ends with \".$\") cannot have autoValue.');                       // 493\n      }                                                                                                                // 494\n      self._autoValues[fieldName] = definition.autoValue;                                                              // 495\n    }                                                                                                                  // 496\n                                                                                                                       // 497\n    self._depsLabels[fieldName] = new Deps.Dependency();                                                               // 498\n                                                                                                                       // 499\n    if (definition.blackbox === true) {                                                                                // 500\n      self._blackboxKeys.push(fieldName);                                                                              // 501\n    }                                                                                                                  // 502\n                                                                                                                       // 503\n    if (!_.contains(firstLevelSchemaKeys, fieldNameRoot)) {                                                            // 504\n      firstLevelSchemaKeys.push(fieldNameRoot);                                                                        // 505\n    }                                                                                                                  // 506\n  });                                                                                                                  // 507\n                                                                                                                       // 508\n                                                                                                                       // 509\n  // Cache these lists                                                                                                 // 510\n  self._firstLevelSchemaKeys = firstLevelSchemaKeys;                                                                   // 511\n  self._objectKeys = getObjectKeys(self._schema, self._schemaKeys);                                                    // 512\n                                                                                                                       // 513\n  // We will store named validation contexts here                                                                      // 514\n  self._validationContexts = {};                                                                                       // 515\n};                                                                                                                     // 516\n                                                                                                                       // 517\n// This allows other packages or users to extend the schema                                                            // 518\n// definition options that are supported.                                                                              // 519\nSimpleSchema.extendOptions = function(options) {                                                                       // 520\n  _.extend(schemaDefinition, options);                                                                                 // 521\n};                                                                                                                     // 522\n                                                                                                                       // 523\n// this domain regex matches all domains that have at least one .                                                      // 524\n// sadly IPv4 Adresses will be caught too but technically those are valid domains                                      // 525\n// this expression is extracted from the original RFC 5322 mail expression                                             // 526\n// a modification enforces that the tld consists only of characters                                                    // 527\nvar RX_DOMAIN = '(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\\\.)+[a-z](?:[a-z-]*[a-z])?';                                       // 528\n// this domain regex matches everythign that could be a domain in intranet                                             // 529\n// that means \"localhost\" is a valid domain                                                                            // 530\nvar RX_NAME_DOMAIN = '(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?(?:\\\\.|$))+';                                                  // 531\n// strict IPv4 expression which allows 0-255 per oktett                                                                // 532\nvar RX_IPv4 = '(?:(?:[0-1]?\\\\d{1,2}|2[0-4]\\\\d|25[0-5])(?:\\\\.|$)){4}';                                                  // 533\n// strict IPv6 expression which allows (and validates) all shortcuts                                                   // 534\nvar RX_IPv6 = '(?:(?:[\\\\dA-Fa-f]{1,4}(?::|$)){8}' // full adress                                                       // 535\n  + '|(?=(?:[^:\\\\s]|:[^:\\\\s])*::(?:[^:\\\\s]|:[^:\\\\s])*$)' // or min/max one '::'                                        // 536\n  + '[\\\\dA-Fa-f]{0,4}(?:::?(?:[\\\\dA-Fa-f]{1,4}|$)){1,6})'; // and short adress                                         // 537\n// this allows domains (also localhost etc) and ip adresses                                                            // 538\nvar RX_WEAK_DOMAIN = '(?:' + [RX_NAME_DOMAIN,RX_IPv4,RX_IPv6].join('|') + ')';                                         // 539\n                                                                                                                       // 540\nSimpleSchema.RegEx = {                                                                                                 // 541\n  // We use the RegExp suggested by W3C in http://www.w3.org/TR/html5/forms.html#valid-e-mail-address                  // 542\n  // This is probably the same logic used by most browsers when type=email, which is our goal. It is                   // 543\n  // a very permissive expression. Some apps may wish to be more strict and can write their own RegExp.                // 544\n  Email: /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/,\n                                                                                                                       // 546\n  Domain: new RegExp('^' + RX_DOMAIN + '$'),                                                                           // 547\n  WeakDomain: new RegExp('^' + RX_WEAK_DOMAIN + '$'),                                                                  // 548\n                                                                                                                       // 549\n  IP: new RegExp('^(?:' + RX_IPv4 + '|' + RX_IPv6 + ')$'),                                                             // 550\n  IPv4: new RegExp('^' + RX_IPv4 + '$'),                                                                               // 551\n  IPv6: new RegExp('^' + RX_IPv6 + '$'),                                                                               // 552\n  // URL RegEx from https://gist.github.com/dperini/729294                                                             // 553\n  // http://mathiasbynens.be/demo/url-regex                                                                            // 554\n  Url: /^(?:(?:https?|ftp):\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!10(?:\\.\\d{1,3}){3})(?!127(?:\\.\\d{1,3}){3})(?!169\\.254(?:\\.\\d{1,3}){2})(?!192\\.168(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]+-?)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]+-?)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:\\/[^\\s]*)?$/i,\n  // unique id from the random package also used by minimongo                                                          // 556\n  // character list: https://github.com/meteor/meteor/blob/release/0.8.0/packages/random/random.js#L88                 // 557\n  // string length: https://github.com/meteor/meteor/blob/release/0.8.0/packages/random/random.js#L143                 // 558\n  Id: /^[23456789ABCDEFGHJKLMNPQRSTWXYZabcdefghijkmnopqrstuvwxyz]{17}$/,                                               // 559\n  // allows for a 5 digit zip code followed by a whitespace or dash and then 4 more digits                             // 560\n  // matches 11111 and 11111-1111 and 11111 1111                                                                       // 561\n  ZipCode: /^\\d{5}(?:[-\\s]\\d{4})?$/                                                                                    // 562\n};                                                                                                                     // 563\n                                                                                                                       // 564\nSimpleSchema._makeGeneric = function(name) {                                                                           // 565\n  if (typeof name !== \"string\") {                                                                                      // 566\n    return null;                                                                                                       // 567\n  }                                                                                                                    // 568\n                                                                                                                       // 569\n  return name.replace(/\\.[0-9]+(?=\\.|$)/g, '.$');                                                                      // 570\n};                                                                                                                     // 571\n                                                                                                                       // 572\nSimpleSchema._depsGlobalMessages = new Deps.Dependency();                                                              // 573\n                                                                                                                       // 574\n// Inherit from Match.Where                                                                                            // 575\n// This allow SimpleSchema instance to be recognized as a Match.Where instance as well                                 // 576\n// as a SimpleSchema instance                                                                                          // 577\nSimpleSchema.prototype = new Match.Where();                                                                            // 578\n                                                                                                                       // 579\n// If an object is an instance of Match.Where, Meteor built-in check API will look at                                  // 580\n// the function named `condition` and will pass it the document to validate                                            // 581\nSimpleSchema.prototype.condition = function(obj) {                                                                     // 582\n  var self = this;                                                                                                     // 583\n                                                                                                                       // 584\n  //determine whether obj is a modifier                                                                                // 585\n  var isModifier, isNotModifier;                                                                                       // 586\n  _.each(obj, function(val, key) {                                                                                     // 587\n    if (key.substring(0, 1) === \"$\") {                                                                                 // 588\n      isModifier = true;                                                                                               // 589\n    } else {                                                                                                           // 590\n      isNotModifier = true;                                                                                            // 591\n    }                                                                                                                  // 592\n  });                                                                                                                  // 593\n                                                                                                                       // 594\n  if (isModifier && isNotModifier) {                                                                                   // 595\n    throw new Match.Error(\"Object cannot contain modifier operators alongside other keys\");                            // 596\n  }                                                                                                                    // 597\n                                                                                                                       // 598\n  var ctx = self.newContext();                                                                                         // 599\n  if (!ctx.validate(obj, {modifier: isModifier, filter: false, autoConvert: false})) {                                 // 600\n    var error = ctx.getErrorObject();                                                                                  // 601\n    var matchError = new Match.Error(error.message);                                                                   // 602\n    matchError.invalidKeys = error.invalidKeys;                                                                        // 603\n    if (Meteor.isServer) {                                                                                             // 604\n      matchError.sanitizedError = error.sanitizedError;                                                                // 605\n    }                                                                                                                  // 606\n    throw matchError;                                                                                                  // 607\n  }                                                                                                                    // 608\n                                                                                                                       // 609\n  return true;                                                                                                         // 610\n};                                                                                                                     // 611\n                                                                                                                       // 612\nfunction logInvalidKeysForContext(context, name) {                                                                     // 613\n  Meteor.startup(function() {                                                                                          // 614\n    Deps.autorun(function() {                                                                                          // 615\n      if (!context.isValid()) {                                                                                        // 616\n        console.log('SimpleSchema invalid keys for \"' + name + '\" context:', context.invalidKeys());                   // 617\n      }                                                                                                                // 618\n    });                                                                                                                // 619\n  });                                                                                                                  // 620\n}                                                                                                                      // 621\n                                                                                                                       // 622\nSimpleSchema.prototype.namedContext = function(name) {                                                                 // 623\n  var self = this;                                                                                                     // 624\n  if (typeof name !== \"string\") {                                                                                      // 625\n    name = \"default\";                                                                                                  // 626\n  }                                                                                                                    // 627\n  if (!self._validationContexts[name]) {                                                                               // 628\n    self._validationContexts[name] = new SimpleSchemaValidationContext(self);                                          // 629\n                                                                                                                       // 630\n    // In debug mode, log all invalid key errors to the browser console                                                // 631\n    if (SimpleSchema.debug && Meteor.isClient) {                                                                       // 632\n      Deps.nonreactive(function() {                                                                                    // 633\n        logInvalidKeysForContext(self._validationContexts[name], name);                                                // 634\n      });                                                                                                              // 635\n    }                                                                                                                  // 636\n  }                                                                                                                    // 637\n  return self._validationContexts[name];                                                                               // 638\n};                                                                                                                     // 639\n                                                                                                                       // 640\n// Global custom validators                                                                                            // 641\nSimpleSchema._validators = [];                                                                                         // 642\nSimpleSchema.addValidator = function(func) {                                                                           // 643\n  SimpleSchema._validators.push(func);                                                                                 // 644\n};                                                                                                                     // 645\n                                                                                                                       // 646\n// Instance custom validators                                                                                          // 647\n// validator is deprecated; use addValidator                                                                           // 648\nSimpleSchema.prototype.addValidator = SimpleSchema.prototype.validator = function(func) {                              // 649\n  this._validators.push(func);                                                                                         // 650\n};                                                                                                                     // 651\n                                                                                                                       // 652\n/**                                                                                                                    // 653\n * @method SimpleSchema.prototype.pick                                                                                 // 654\n * @param {[fields]} The list of fields to pick to instantiate the subschema                                           // 655\n * @returns {SimpleSchema} The subschema                                                                               // 656\n */                                                                                                                    // 657\nSimpleSchema.prototype.pick = function(/* arguments */) {                                                              // 658\n  var self = this;                                                                                                     // 659\n  var args = _.toArray(arguments);                                                                                     // 660\n  args.unshift(self._schema);                                                                                          // 661\n                                                                                                                       // 662\n  var newSchema = _.pick.apply(null, args);                                                                            // 663\n  return new SimpleSchema(newSchema);                                                                                  // 664\n};                                                                                                                     // 665\n                                                                                                                       // 666\n/**                                                                                                                    // 667\n * @method SimpleSchema.prototype.clean                                                                                // 668\n * @param {Object} doc - Document or modifier to clean. Referenced object will be modified in place.                   // 669\n * @param {Object} [options]                                                                                           // 670\n * @param {Boolean} [options.filter=true] - Do filtering?                                                              // 671\n * @param {Boolean} [options.autoConvert=true] - Do automatic type converting?                                         // 672\n * @param {Boolean} [options.removeEmptyStrings=true] - Remove keys in normal object or $set where the value is an empty string?\n * @param {Boolean} [options.trimStrings=true] - Trim string values?                                                   // 674\n * @param {Boolean} [options.getAutoValues=true] - Inject automatic and default values?                                // 675\n * @param {Boolean} [options.isModifier=false] - Is doc a modifier object?                                             // 676\n * @param {Object} [options.extendAutoValueContext] - This object will be added to the `this` context of autoValue functions.\n * @returns {Object} The modified doc.                                                                                 // 678\n *                                                                                                                     // 679\n * Cleans a document or modifier object. By default, will filter, automatically                                        // 680\n * type convert where possible, and inject automatic/default values. Use the options                                   // 681\n * to skip one or more of these.                                                                                       // 682\n */                                                                                                                    // 683\nSimpleSchema.prototype.clean = function(doc, options) {                                                                // 684\n  var self = this;                                                                                                     // 685\n                                                                                                                       // 686\n  // By default, doc will be filtered and autoconverted                                                                // 687\n  options = _.extend({                                                                                                 // 688\n    filter: true,                                                                                                      // 689\n    autoConvert: true,                                                                                                 // 690\n    removeEmptyStrings: true,                                                                                          // 691\n    trimStrings: true,                                                                                                 // 692\n    getAutoValues: true,                                                                                               // 693\n    isModifier: false,                                                                                                 // 694\n    extendAutoValueContext: {}                                                                                         // 695\n  }, options || {});                                                                                                   // 696\n                                                                                                                       // 697\n  // Convert $pushAll (deprecated) to $push with $each                                                                 // 698\n  if (\"$pushAll\" in doc) {                                                                                             // 699\n    console.warn(\"SimpleSchema.clean: $pushAll is deprecated; converting to $push with $each\");                        // 700\n    doc.$push = doc.$push || {};                                                                                       // 701\n    for (var field in doc.$pushAll) {                                                                                  // 702\n      doc.$push[field] = doc.$push[field] || {};                                                                       // 703\n      doc.$push[field].$each = doc.$push[field].$each || [];                                                           // 704\n      for (var i = 0, ln = doc.$pushAll[field].length; i < ln; i++) {                                                  // 705\n        doc.$push[field].$each.push(doc.$pushAll[field][i]);                                                           // 706\n      }                                                                                                                // 707\n      delete doc.$pushAll;                                                                                             // 708\n    }                                                                                                                  // 709\n  }                                                                                                                    // 710\n                                                                                                                       // 711\n  var mDoc = new MongoObject(doc, self._blackboxKeys);                                                                 // 712\n                                                                                                                       // 713\n  // Clean loop                                                                                                        // 714\n  if (options.filter || options.autoConvert || options.removeEmptyStrings || options.trimStrings) {                    // 715\n    mDoc.forEachNode(function() {                                                                                      // 716\n      var gKey = this.genericKey, p, def, val;                                                                         // 717\n      if (gKey) {                                                                                                      // 718\n        def = self._schema[gKey];                                                                                      // 719\n        val = this.value;                                                                                              // 720\n        // Filter out props if necessary; any property is OK for $unset because we want to                             // 721\n        // allow conversions to remove props that have been removed from the schema.                                   // 722\n        if (options.filter && this.operator !== \"$unset\" && !self.allowsKey(gKey)) {                                   // 723\n          // XXX Special handling for $each; maybe this could be made nicer                                            // 724\n          if (this.position.slice(-7) === \"[$each]\") {                                                                 // 725\n            mDoc.removeValueForPosition(this.position.slice(0, -7));                                                   // 726\n          } else {                                                                                                     // 727\n            this.remove();                                                                                             // 728\n          }                                                                                                            // 729\n          if (SimpleSchema.debug) {                                                                                    // 730\n            console.info('SimpleSchema.clean: filtered out value that would have affected key \"' + gKey + '\", which is not allowed by the schema');\n          }                                                                                                            // 732\n          return; // no reason to do more                                                                              // 733\n        }                                                                                                              // 734\n        if (val !== void 0) {                                                                                          // 735\n          // Autoconvert values if requested and if possible                                                           // 736\n          var wasAutoConverted = false;                                                                                // 737\n          if (options.autoConvert && this.operator !== \"$unset\" && def) {                                              // 738\n            var newVal = typeconvert(val, def.type);                                                                   // 739\n            // trim strings                                                                                            // 740\n            if (options.trimStrings && typeof newVal === \"string\") {                                                   // 741\n              newVal = S(newVal).trim().s;                                                                             // 742\n            }                                                                                                          // 743\n            if (newVal !== void 0 && newVal !== val) {                                                                 // 744\n              // remove empty strings                                                                                  // 745\n              if (options.removeEmptyStrings && (!this.operator || this.operator === \"$set\") && typeof newVal === \"string\" && !newVal.length) {\n                // For a document, we remove any fields that are being set to an empty string                          // 747\n                newVal = void 0;                                                                                       // 748\n                // For a modifier, we $unset any fields that are being set to an empty string                          // 749\n                if (this.operator === \"$set\" && this.position.match(/\\[.+?\\]/g).length < 2) {                          // 750\n                                                                                                                       // 751\n                  p = this.position.replace(\"$set\", \"$unset\");                                                         // 752\n                  mDoc.setValueForPosition(p, \"\");                                                                     // 753\n                }                                                                                                      // 754\n              }                                                                                                        // 755\n                                                                                                                       // 756\n              // Change value; if undefined, will remove it                                                            // 757\n              SimpleSchema.debug && console.info('SimpleSchema.clean: autoconverted value ' + val + ' from ' + typeof val + ' to ' + typeof newVal + ' for ' + gKey);\n              this.updateValue(newVal);                                                                                // 759\n              wasAutoConverted = true;                                                                                 // 760\n            }                                                                                                          // 761\n          }                                                                                                            // 762\n          if (!wasAutoConverted) {                                                                                     // 763\n            // trim strings                                                                                            // 764\n            if (options.trimStrings && typeof val === \"string\" && (!def || (def && def.trim !== false))) {             // 765\n              this.updateValue(S(val).trim().s);                                                                       // 766\n            }                                                                                                          // 767\n            // remove empty strings                                                                                    // 768\n            if (options.removeEmptyStrings && (!this.operator || this.operator === \"$set\") && typeof val === \"string\" && !val.length) {\n              // For a document, we remove any fields that are being set to an empty string                            // 770\n              this.remove();                                                                                           // 771\n              // For a modifier, we $unset any fields that are being set to an empty string. But only if we're not already within an entire object that is being set.\n              if (this.operator === \"$set\" && this.position.match(/\\[.+?\\]/g).length < 2) {                            // 773\n                p = this.position.replace(\"$set\", \"$unset\");                                                           // 774\n                mDoc.setValueForPosition(p, \"\");                                                                       // 775\n              }                                                                                                        // 776\n            }                                                                                                          // 777\n          }                                                                                                            // 778\n        }                                                                                                              // 779\n      }                                                                                                                // 780\n    }, {endPointsOnly: false});                                                                                        // 781\n  }                                                                                                                    // 782\n                                                                                                                       // 783\n  // Set automatic values                                                                                              // 784\n  options.getAutoValues && getAutoValues.call(self, mDoc, options.isModifier, options.extendAutoValueContext);         // 785\n                                                                                                                       // 786\n  // Ensure we don't have any operators set to an empty object                                                         // 787\n  // since MongoDB 2.6+ will throw errors.                                                                             // 788\n  if (options.isModifier) {                                                                                            // 789\n    for (var op in doc) {                                                                                              // 790\n      if (doc.hasOwnProperty(op) && _.isEmpty(doc[op])) {                                                              // 791\n        delete doc[op];                                                                                                // 792\n      }                                                                                                                // 793\n    }                                                                                                                  // 794\n  }                                                                                                                    // 795\n                                                                                                                       // 796\n  return doc;                                                                                                          // 797\n};                                                                                                                     // 798\n                                                                                                                       // 799\n// Returns the entire schema object or just the definition for one key                                                 // 800\n// in the schema.                                                                                                      // 801\nSimpleSchema.prototype.schema = function(key) {                                                                        // 802\n  var self = this;                                                                                                     // 803\n  // if not null or undefined (more specific)                                                                          // 804\n  if (key !== null && key !== void 0) {                                                                                // 805\n    return self._schema[SimpleSchema._makeGeneric(key)];                                                               // 806\n  } else {                                                                                                             // 807\n    return self._schema;                                                                                               // 808\n  }                                                                                                                    // 809\n};                                                                                                                     // 810\n                                                                                                                       // 811\n// Returns the evaluated definition for one key in the schema                                                          // 812\n// key = non-generic key                                                                                               // 813\n// [propList] = props to include in the result, for performance                                                        // 814\n// [functionContext] = used for evaluating schema options that are functions                                           // 815\nSimpleSchema.prototype.getDefinition = function(key, propList, functionContext) {                                      // 816\n  var self = this;                                                                                                     // 817\n  var defs = self.schema(key);                                                                                         // 818\n  if (!defs) {                                                                                                         // 819\n    return;                                                                                                            // 820\n  }                                                                                                                    // 821\n                                                                                                                       // 822\n  if (_.isArray(propList)) {                                                                                           // 823\n    defs = _.pick(defs, propList);                                                                                     // 824\n  } else {                                                                                                             // 825\n    defs = _.clone(defs);                                                                                              // 826\n  }                                                                                                                    // 827\n                                                                                                                       // 828\n  // For any options that support specifying a function,                                                               // 829\n  // evaluate the functions.                                                                                           // 830\n  _.each(['min', 'max', 'minCount', 'maxCount', 'allowedValues', 'optional', 'label'], function (prop) {               // 831\n    if (_.isFunction(defs[prop])) {                                                                                    // 832\n      defs[prop] = defs[prop].call(functionContext || {});                                                             // 833\n    }                                                                                                                  // 834\n  });                                                                                                                  // 835\n                                                                                                                       // 836\n  // Inflect label if not defined                                                                                      // 837\n  defs.label = defs.label || inflectedLabel(key);                                                                      // 838\n                                                                                                                       // 839\n  return defs;                                                                                                         // 840\n};                                                                                                                     // 841\n                                                                                                                       // 842\n// Check if the key is a nested dot-syntax key inside of a blackbox object                                             // 843\nSimpleSchema.prototype.keyIsInBlackBox = function(key) {                                                               // 844\n  var self = this;                                                                                                     // 845\n  var parentPath = SimpleSchema._makeGeneric(key), lastDot, def;                                                       // 846\n                                                                                                                       // 847\n  // Iterate the dot-syntax hierarchy until we find a key in our schema                                                // 848\n  do {                                                                                                                 // 849\n    lastDot = parentPath.lastIndexOf('.');                                                                             // 850\n    if (lastDot !== -1) {                                                                                              // 851\n      parentPath = parentPath.slice(0, lastDot); // Remove last path component                                         // 852\n      def = self.getDefinition(parentPath);                                                                            // 853\n    }                                                                                                                  // 854\n  } while (lastDot !== -1 && !def);                                                                                    // 855\n                                                                                                                       // 856\n  return !!(def && def.blackbox);                                                                                      // 857\n};                                                                                                                     // 858\n                                                                                                                       // 859\n// Use to dynamically change the schema labels.                                                                        // 860\nSimpleSchema.prototype.labels = function(labels) {                                                                     // 861\n  var self = this;                                                                                                     // 862\n  _.each(labels, function(label, fieldName) {                                                                          // 863\n    if (!_.isString(label) && !_.isFunction(label)) {                                                                  // 864\n      return;                                                                                                          // 865\n    }                                                                                                                  // 866\n                                                                                                                       // 867\n    if (!(fieldName in self._schema)) {                                                                                // 868\n      return;                                                                                                          // 869\n    }                                                                                                                  // 870\n                                                                                                                       // 871\n    self._schema[fieldName].label = label;                                                                             // 872\n    self._depsLabels[fieldName] && self._depsLabels[fieldName].changed();                                              // 873\n  });                                                                                                                  // 874\n};                                                                                                                     // 875\n                                                                                                                       // 876\n// should be used to safely get a label as string                                                                      // 877\nSimpleSchema.prototype.label = function(key) {                                                                         // 878\n  var self = this;                                                                                                     // 879\n                                                                                                                       // 880\n  // Get all labels                                                                                                    // 881\n  if (key === null || key === void 0) {                                                                                // 882\n    var result = {};                                                                                                   // 883\n    _.each(self.schema(), function(def, fieldName) {                                                                   // 884\n      result[fieldName] = self.label(fieldName);                                                                       // 885\n    });                                                                                                                // 886\n    return result;                                                                                                     // 887\n  }                                                                                                                    // 888\n                                                                                                                       // 889\n  // Get label for one field                                                                                           // 890\n  var def = self.getDefinition(key);                                                                                   // 891\n  if (def) {                                                                                                           // 892\n    var genericKey = SimpleSchema._makeGeneric(key);                                                                   // 893\n    self._depsLabels[genericKey] && self._depsLabels[genericKey].depend();                                             // 894\n    return def.label;                                                                                                  // 895\n  }                                                                                                                    // 896\n                                                                                                                       // 897\n  return null;                                                                                                         // 898\n};                                                                                                                     // 899\n                                                                                                                       // 900\n// Global messages                                                                                                     // 901\n                                                                                                                       // 902\nSimpleSchema._globalMessages = {                                                                                       // 903\n  required: \"[label] is required\",                                                                                     // 904\n  minString: \"[label] must be at least [min] characters\",                                                              // 905\n  maxString: \"[label] cannot exceed [max] characters\",                                                                 // 906\n  minNumber: \"[label] must be at least [min]\",                                                                         // 907\n  maxNumber: \"[label] cannot exceed [max]\",                                                                            // 908\n  minNumberExclusive: \"[label] must be greater than [min]\",                                                            // 909\n  maxNumberExclusive: \"[label] must be less than [max]\",                                                               // 910\n  minDate: \"[label] must be on or after [min]\",                                                                        // 911\n  maxDate: \"[label] cannot be after [max]\",                                                                            // 912\n  badDate: \"[label] is not a valid date\",                                                                              // 913\n  minCount: \"You must specify at least [minCount] values\",                                                             // 914\n  maxCount: \"You cannot specify more than [maxCount] values\",                                                          // 915\n  noDecimal: \"[label] must be an integer\",                                                                             // 916\n  notAllowed: \"[value] is not an allowed value\",                                                                       // 917\n  expectedString: \"[label] must be a string\",                                                                          // 918\n  expectedNumber: \"[label] must be a number\",                                                                          // 919\n  expectedBoolean: \"[label] must be a boolean\",                                                                        // 920\n  expectedArray: \"[label] must be an array\",                                                                           // 921\n  expectedObject: \"[label] must be an object\",                                                                         // 922\n  expectedConstructor: \"[label] must be a [type]\",                                                                     // 923\n  regEx: [                                                                                                             // 924\n    {msg: \"[label] failed regular expression validation\"},                                                             // 925\n    {exp: SimpleSchema.RegEx.Email, msg: \"[label] must be a valid e-mail address\"},                                    // 926\n    {exp: SimpleSchema.RegEx.WeakEmail, msg: \"[label] must be a valid e-mail address\"},                                // 927\n    {exp: SimpleSchema.RegEx.Domain, msg: \"[label] must be a valid domain\"},                                           // 928\n    {exp: SimpleSchema.RegEx.WeakDomain, msg: \"[label] must be a valid domain\"},                                       // 929\n    {exp: SimpleSchema.RegEx.IP, msg: \"[label] must be a valid IPv4 or IPv6 address\"},                                 // 930\n    {exp: SimpleSchema.RegEx.IPv4, msg: \"[label] must be a valid IPv4 address\"},                                       // 931\n    {exp: SimpleSchema.RegEx.IPv6, msg: \"[label] must be a valid IPv6 address\"},                                       // 932\n    {exp: SimpleSchema.RegEx.Url, msg: \"[label] must be a valid URL\"},                                                 // 933\n    {exp: SimpleSchema.RegEx.Id, msg: \"[label] must be a valid alphanumeric ID\"}                                       // 934\n  ],                                                                                                                   // 935\n  keyNotInSchema: \"[key] is not allowed by the schema\"                                                                 // 936\n};                                                                                                                     // 937\n                                                                                                                       // 938\nSimpleSchema.messages = function(messages) {                                                                           // 939\n  _.extend(SimpleSchema._globalMessages, messages);                                                                    // 940\n  SimpleSchema._depsGlobalMessages.changed();                                                                          // 941\n};                                                                                                                     // 942\n                                                                                                                       // 943\n// Schema-specific messages                                                                                            // 944\n                                                                                                                       // 945\nSimpleSchema.prototype.messages = function(messages) {                                                                 // 946\n  var self = this;                                                                                                     // 947\n  _.extend(self._messages, messages);                                                                                  // 948\n  self._depsMessages.changed();                                                                                        // 949\n};                                                                                                                     // 950\n                                                                                                                       // 951\n// Returns a string message for the given error type and key. Uses the                                                 // 952\n// def and value arguments to fill in placeholders in the error messages.                                              // 953\nSimpleSchema.prototype.messageForError = function(type, key, def, value) {                                             // 954\n  var self = this;                                                                                                     // 955\n                                                                                                                       // 956\n  // We proceed even if we can't get a definition because it might be a keyNotInSchema error                           // 957\n  def = def || self.getDefinition(key, ['regEx', 'label', 'minCount', 'maxCount', 'min', 'max', 'type']) || {};        // 958\n                                                                                                                       // 959\n  // Adjust for complex types, currently only regEx,                                                                   // 960\n  // where we might have regEx.1 meaning the second                                                                    // 961\n  // expression in the array.                                                                                          // 962\n  var firstTypePeriod = type.indexOf(\".\"), index = null;                                                               // 963\n  if (firstTypePeriod !== -1) {                                                                                        // 964\n    index = type.substring(firstTypePeriod + 1);                                                                       // 965\n    index = parseInt(index, 10);                                                                                       // 966\n    type = type.substring(0, firstTypePeriod);                                                                         // 967\n  }                                                                                                                    // 968\n                                                                                                                       // 969\n  // Which regExp is it?                                                                                               // 970\n  var regExpMatch;                                                                                                     // 971\n  if (type === \"regEx\") {                                                                                              // 972\n    if (index !== null && index !== void 0 && !isNaN(index)) {                                                         // 973\n      regExpMatch = def.regEx[index];                                                                                  // 974\n    } else {                                                                                                           // 975\n      regExpMatch = def.regEx;                                                                                         // 976\n    }                                                                                                                  // 977\n    if (regExpMatch) {                                                                                                 // 978\n      regExpMatch = regExpMatch.toString();                                                                            // 979\n    }                                                                                                                  // 980\n  }                                                                                                                    // 981\n                                                                                                                       // 982\n  // Prep some strings to be used when finding the correct message for this error                                      // 983\n  var typePlusKey = type + \" \" + key;                                                                                  // 984\n  var genericKey = SimpleSchema._makeGeneric(key);                                                                     // 985\n  var typePlusGenKey = type + \" \" + genericKey;                                                                        // 986\n                                                                                                                       // 987\n  // reactively update when message templates are changed                                                              // 988\n  SimpleSchema._depsGlobalMessages.depend();                                                                           // 989\n  self._depsMessages.depend();                                                                                         // 990\n                                                                                                                       // 991\n  // Prep a function that finds the correct message for regEx errors                                                   // 992\n  function findRegExError(message) {                                                                                   // 993\n    if (type !== \"regEx\" || !_.isArray(message)) {                                                                     // 994\n      return message;                                                                                                  // 995\n    }                                                                                                                  // 996\n    // Parse regEx messages, which are provided in a special object array format                                       // 997\n    // [{exp: RegExp, msg: \"Foo\"}]                                                                                     // 998\n    // Where `exp` is optional                                                                                         // 999\n                                                                                                                       // 1000\n    var msgObj;                                                                                                        // 1001\n    // First see if there's one where exp matches this expression                                                      // 1002\n    if (regExpMatch) {                                                                                                 // 1003\n      msgObj = _.find(message, function (o) {                                                                          // 1004\n        return o.exp && o.exp.toString() === regExpMatch;                                                              // 1005\n      });                                                                                                              // 1006\n    }                                                                                                                  // 1007\n                                                                                                                       // 1008\n    // If not, see if there's a default message defined                                                                // 1009\n    if (!msgObj) {                                                                                                     // 1010\n      msgObj = _.findWhere(message, {exp: null});                                                                      // 1011\n      if (!msgObj) {                                                                                                   // 1012\n        msgObj = _.findWhere(message, {exp: void 0});                                                                  // 1013\n      }                                                                                                                // 1014\n    }                                                                                                                  // 1015\n                                                                                                                       // 1016\n    return msgObj ? msgObj.msg : null;                                                                                 // 1017\n  }                                                                                                                    // 1018\n                                                                                                                       // 1019\n  // Try finding the correct message to use at various levels, from most                                               // 1020\n  // specific to least specific.                                                                                       // 1021\n  var message = self._messages[typePlusKey] ||                  // (1) Use schema-specific message for specific key    // 1022\n                self._messages[typePlusGenKey] ||               // (2) Use schema-specific message for generic key     // 1023\n                self._messages[type];                           // (3) Use schema-specific message for type            // 1024\n  message = findRegExError(message);                                                                                   // 1025\n                                                                                                                       // 1026\n  if (!message) {                                                                                                      // 1027\n    message = SimpleSchema._globalMessages[typePlusKey] ||      // (4) Use global message for specific key             // 1028\n              SimpleSchema._globalMessages[typePlusGenKey] ||   // (5) Use global message for generic key              // 1029\n              SimpleSchema._globalMessages[type];               // (6) Use global message for type                     // 1030\n    message = findRegExError(message);                                                                                 // 1031\n  }                                                                                                                    // 1032\n                                                                                                                       // 1033\n  if (!message) {                                                                                                      // 1034\n    return \"Unknown validation error\";                                                                                 // 1035\n  }                                                                                                                    // 1036\n                                                                                                                       // 1037\n  // Now replace all placeholders in the message with the correct values                                               // 1038\n                                                                                                                       // 1039\n  // [key]                                                                                                             // 1040\n  message = message.replace(\"[key]\", key);                                                                             // 1041\n                                                                                                                       // 1042\n  // [label]                                                                                                           // 1043\n  // The call to self.label() establishes a reactive dependency, too                                                   // 1044\n  message = message.replace(\"[label]\", self.label(key));                                                               // 1045\n                                                                                                                       // 1046\n  // [minCount]                                                                                                        // 1047\n  if (typeof def.minCount !== \"undefined\") {                                                                           // 1048\n    message = message.replace(\"[minCount]\", def.minCount);                                                             // 1049\n  }                                                                                                                    // 1050\n                                                                                                                       // 1051\n  // [maxCount]                                                                                                        // 1052\n  if (typeof def.maxCount !== \"undefined\") {                                                                           // 1053\n    message = message.replace(\"[maxCount]\", def.maxCount);                                                             // 1054\n  }                                                                                                                    // 1055\n                                                                                                                       // 1056\n  // [value]                                                                                                           // 1057\n  if (value !== void 0 && value !== null) {                                                                            // 1058\n    message = message.replace(\"[value]\", value.toString());                                                            // 1059\n  } else {                                                                                                             // 1060\n    message = message.replace(\"[value]\", 'null');                                                                      // 1061\n  }                                                                                                                    // 1062\n                                                                                                                       // 1063\n  // [min] and [max]                                                                                                   // 1064\n  var min = def.min;                                                                                                   // 1065\n  var max = def.max;                                                                                                   // 1066\n  if (def.type === Date || def.type === [Date]) {                                                                      // 1067\n    if (typeof min !== \"undefined\") {                                                                                  // 1068\n      message = message.replace(\"[min]\", Utility.dateToDateString(min));                                               // 1069\n    }                                                                                                                  // 1070\n    if (typeof max !== \"undefined\") {                                                                                  // 1071\n      message = message.replace(\"[max]\", Utility.dateToDateString(max));                                               // 1072\n    }                                                                                                                  // 1073\n  } else {                                                                                                             // 1074\n    if (typeof min !== \"undefined\") {                                                                                  // 1075\n      message = message.replace(\"[min]\", min);                                                                         // 1076\n    }                                                                                                                  // 1077\n    if (typeof max !== \"undefined\") {                                                                                  // 1078\n      message = message.replace(\"[max]\", max);                                                                         // 1079\n    }                                                                                                                  // 1080\n  }                                                                                                                    // 1081\n                                                                                                                       // 1082\n  // [type]                                                                                                            // 1083\n  if (def.type instanceof Function) {                                                                                  // 1084\n    message = message.replace(\"[type]\", def.type.name);                                                                // 1085\n  }                                                                                                                    // 1086\n                                                                                                                       // 1087\n  // Now return the message                                                                                            // 1088\n  return message;                                                                                                      // 1089\n};                                                                                                                     // 1090\n                                                                                                                       // 1091\n// Returns true if key is explicitly allowed by the schema or implied                                                  // 1092\n// by other explicitly allowed keys.                                                                                   // 1093\n// The key string should have $ in place of any numeric array positions.                                               // 1094\nSimpleSchema.prototype.allowsKey = function(key) {                                                                     // 1095\n  var self = this;                                                                                                     // 1096\n                                                                                                                       // 1097\n  // Loop through all keys in the schema                                                                               // 1098\n  return _.any(self._schemaKeys, function(schemaKey) {                                                                 // 1099\n                                                                                                                       // 1100\n    // If the schema key is the test key, it's allowed.                                                                // 1101\n    if (schemaKey === key) {                                                                                           // 1102\n      return true;                                                                                                     // 1103\n    }                                                                                                                  // 1104\n                                                                                                                       // 1105\n    // Black box handling                                                                                              // 1106\n    if (self.schema(schemaKey).blackbox === true) {                                                                    // 1107\n      var kl = schemaKey.length;                                                                                       // 1108\n      var compare1 = key.slice(0, kl + 2);                                                                             // 1109\n      var compare2 = compare1.slice(0, -1);                                                                            // 1110\n                                                                                                                       // 1111\n      // If the test key is the black box key + \".$\", then the test                                                    // 1112\n      // key is NOT allowed because black box keys are by definition                                                   // 1113\n      // only for objects, and not for arrays.                                                                         // 1114\n      if (compare1 === schemaKey + '.$') {                                                                             // 1115\n        return false;                                                                                                  // 1116\n      }                                                                                                                // 1117\n                                                                                                                       // 1118\n      // Otherwise                                                                                                     // 1119\n      if (compare2 === schemaKey + '.') {                                                                              // 1120\n        return true;                                                                                                   // 1121\n      }                                                                                                                // 1122\n    }                                                                                                                  // 1123\n                                                                                                                       // 1124\n    return false;                                                                                                      // 1125\n  });                                                                                                                  // 1126\n};                                                                                                                     // 1127\n                                                                                                                       // 1128\nSimpleSchema.prototype.newContext = function() {                                                                       // 1129\n  return new SimpleSchemaValidationContext(this);                                                                      // 1130\n};                                                                                                                     // 1131\n                                                                                                                       // 1132\n// Returns all the child keys for the object identified by the generic prefix,                                         // 1133\n// or all the top level keys if no prefix is supplied.                                                                 // 1134\nSimpleSchema.prototype.objectKeys = function(keyPrefix) {                                                              // 1135\n  var self = this;                                                                                                     // 1136\n  if (!keyPrefix) {                                                                                                    // 1137\n    return self._firstLevelSchemaKeys;                                                                                 // 1138\n  }                                                                                                                    // 1139\n  return self._objectKeys[keyPrefix + \".\"] || [];                                                                      // 1140\n};                                                                                                                     // 1141\n                                                                                                                       // 1142\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:simple-schema/simple-schema-validation.js                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global Utility */                                                                                                   // 1\n/* global _ */                                                                                                         // 2\n/* global SimpleSchema */                                                                                              // 3\n/* global MongoObject */                                                                                               // 4\n/* global doValidation1:true */                                                                                        // 5\n                                                                                                                       // 6\nfunction doTypeChecks(def, keyValue, op) {                                                                             // 7\n  var expectedType = def.type;                                                                                         // 8\n                                                                                                                       // 9\n  // String checks                                                                                                     // 10\n  if (expectedType === String) {                                                                                       // 11\n    if (typeof keyValue !== \"string\") {                                                                                // 12\n      return \"expectedString\";                                                                                         // 13\n    } else if (def.max !== null && def.max < keyValue.length) {                                                        // 14\n      return \"maxString\";                                                                                              // 15\n    } else if (def.min !== null && def.min > keyValue.length) {                                                        // 16\n      return \"minString\";                                                                                              // 17\n    } else if (def.regEx instanceof RegExp && !def.regEx.test(keyValue)) {                                             // 18\n      return \"regEx\";                                                                                                  // 19\n    } else if (_.isArray(def.regEx)) {                                                                                 // 20\n      var regExError;                                                                                                  // 21\n      _.every(def.regEx, function(re, i) {                                                                             // 22\n        if (!re.test(keyValue)) {                                                                                      // 23\n          regExError = \"regEx.\" + i;                                                                                   // 24\n          return false;                                                                                                // 25\n        }                                                                                                              // 26\n        return true;                                                                                                   // 27\n      });                                                                                                              // 28\n      if (regExError) {                                                                                                // 29\n        return regExError;                                                                                             // 30\n      }                                                                                                                // 31\n    }                                                                                                                  // 32\n  }                                                                                                                    // 33\n                                                                                                                       // 34\n  // Number checks                                                                                                     // 35\n  else if (expectedType === Number) {                                                                                  // 36\n    if (typeof keyValue !== \"number\" || isNaN(keyValue)) {                                                             // 37\n      return \"expectedNumber\";                                                                                         // 38\n    } else if (op !== \"$inc\" && def.max !== null && (!!def.exclusiveMax ? def.max <= keyValue : def.max < keyValue)) { // 39\n       return !!def.exclusiveMax ? \"maxNumberExclusive\" : \"maxNumber\";                                                 // 40\n    } else if (op !== \"$inc\" && def.min !== null && (!!def.exclusiveMin ? def.min >= keyValue : def.min > keyValue)) { // 41\n       return !!def.exclusiveMin ? \"minNumberExclusive\" : \"minNumber\";                                                 // 42\n    } else if (!def.decimal && keyValue.toString().indexOf(\".\") > -1) {                                                // 43\n      return \"noDecimal\";                                                                                              // 44\n    }                                                                                                                  // 45\n  }                                                                                                                    // 46\n                                                                                                                       // 47\n  // Boolean checks                                                                                                    // 48\n  else if (expectedType === Boolean) {                                                                                 // 49\n    if (typeof keyValue !== \"boolean\") {                                                                               // 50\n      return \"expectedBoolean\";                                                                                        // 51\n    }                                                                                                                  // 52\n  }                                                                                                                    // 53\n                                                                                                                       // 54\n  // Object checks                                                                                                     // 55\n  else if (expectedType === Object) {                                                                                  // 56\n    if (!Utility.isBasicObject(keyValue)) {                                                                            // 57\n      return \"expectedObject\";                                                                                         // 58\n    }                                                                                                                  // 59\n  }                                                                                                                    // 60\n                                                                                                                       // 61\n  // Array checks                                                                                                      // 62\n  else if (expectedType === Array) {                                                                                   // 63\n    if (!_.isArray(keyValue)) {                                                                                        // 64\n      return \"expectedArray\";                                                                                          // 65\n    } else if (def.minCount !== null && keyValue.length < def.minCount) {                                              // 66\n      return \"minCount\";                                                                                               // 67\n    } else if (def.maxCount !== null && keyValue.length > def.maxCount) {                                              // 68\n      return \"maxCount\";                                                                                               // 69\n    }                                                                                                                  // 70\n  }                                                                                                                    // 71\n                                                                                                                       // 72\n  // Constructor function checks                                                                                       // 73\n  else if (expectedType instanceof Function || Utility.safariBugFix(expectedType)) {                                   // 74\n                                                                                                                       // 75\n    // Generic constructor checks                                                                                      // 76\n    if (!(keyValue instanceof expectedType)) {                                                                         // 77\n      return \"expectedConstructor\";                                                                                    // 78\n    }                                                                                                                  // 79\n                                                                                                                       // 80\n    // Date checks                                                                                                     // 81\n    else if (expectedType === Date) {                                                                                  // 82\n      if (isNaN(keyValue.getTime())) {                                                                                 // 83\n        return \"badDate\";                                                                                              // 84\n      }                                                                                                                // 85\n                                                                                                                       // 86\n      if (_.isDate(def.min) && def.min.getTime() > keyValue.getTime()) {                                               // 87\n        return \"minDate\";                                                                                              // 88\n      } else if (_.isDate(def.max) && def.max.getTime() < keyValue.getTime()) {                                        // 89\n        return \"maxDate\";                                                                                              // 90\n      }                                                                                                                // 91\n    }                                                                                                                  // 92\n  }                                                                                                                    // 93\n                                                                                                                       // 94\n}                                                                                                                      // 95\n                                                                                                                       // 96\ndoValidation1 = function doValidation1(obj, isModifier, isUpsert, keyToValidate, ss, extendedCustomContext) {          // 97\n  // First do some basic checks of the object, and throw errors if necessary                                           // 98\n  if (!_.isObject(obj)) {                                                                                              // 99\n    throw new Error(\"The first argument of validate() or validateOne() must be an object\");                            // 100\n  }                                                                                                                    // 101\n                                                                                                                       // 102\n  if (!isModifier && Utility.looksLikeModifier(obj)) {                                                                 // 103\n    throw new Error(\"When the validation object contains mongo operators, you must set the modifier option to true\");  // 104\n  }                                                                                                                    // 105\n                                                                                                                       // 106\n  var invalidKeys = [];                                                                                                // 107\n  var mDoc; // for caching the MongoObject if necessary                                                                // 108\n                                                                                                                       // 109\n  // Validation function called for each affected key                                                                  // 110\n  function validate(val, affectedKey, affectedKeyGeneric, def, op, skipRequiredCheck, isInArrayItemObject, isInSubObject) {\n                                                                                                                       // 112\n    // Get the schema for this key, marking invalid if there isn't one.                                                // 113\n    if (!def) {                                                                                                        // 114\n      invalidKeys.push(Utility.errorObject(\"keyNotInSchema\", affectedKey, val, def, ss));                              // 115\n      return;                                                                                                          // 116\n    }                                                                                                                  // 117\n                                                                                                                       // 118\n    // Check for missing required values. The general logic is this:                                                   // 119\n    // * If the operator is $unset or $rename, it's invalid.                                                           // 120\n    // * If the value is null, it's invalid.                                                                           // 121\n    // * If the value is undefined and one of the following are true, it's invalid:                                    // 122\n    //     * We're validating a key of a sub-object.                                                                   // 123\n    //     * We're validating a key of an object that is an array item.                                                // 124\n    //     * We're validating a document (as opposed to a modifier).                                                   // 125\n    //     * We're validating a key under the $set operator in a modifier, and it's an upsert.                         // 126\n    if (!skipRequiredCheck && !def.optional) {                                                                         // 127\n      if (                                                                                                             // 128\n        val === null ||                                                                                                // 129\n        op === \"$unset\" ||                                                                                             // 130\n        op === \"$rename\" ||                                                                                            // 131\n        (val === void 0 && (isInArrayItemObject || isInSubObject || !op || op === \"$set\"))                             // 132\n        ) {                                                                                                            // 133\n        invalidKeys.push(Utility.errorObject(\"required\", affectedKey, null, def, ss));                                 // 134\n        return;                                                                                                        // 135\n      }                                                                                                                // 136\n    }                                                                                                                  // 137\n                                                                                                                       // 138\n    // For $rename, make sure that the new name is allowed by the schema                                               // 139\n    if (op === \"$rename\" && typeof val === \"string\" && !ss.allowsKey(val)) {                                           // 140\n      invalidKeys.push(Utility.errorObject(\"keyNotInSchema\", val, null, null, ss));                                    // 141\n      return;                                                                                                          // 142\n    }                                                                                                                  // 143\n                                                                                                                       // 144\n    // Value checks are not necessary for null or undefined values                                                     // 145\n    // or for $unset or $rename values                                                                                 // 146\n    if (op !== \"$unset\" && op !== \"$rename\" && Utility.isNotNullOrUndefined(val)) {                                    // 147\n                                                                                                                       // 148\n      // Check that value is of the correct type                                                                       // 149\n      var typeError = doTypeChecks(def, val, op);                                                                      // 150\n      if (typeError) {                                                                                                 // 151\n        invalidKeys.push(Utility.errorObject(typeError, affectedKey, val, def, ss));                                   // 152\n        return;                                                                                                        // 153\n      }                                                                                                                // 154\n                                                                                                                       // 155\n      // Check value against allowedValues array                                                                       // 156\n      if (def.allowedValues && !_.contains(def.allowedValues, val)) {                                                  // 157\n        invalidKeys.push(Utility.errorObject(\"notAllowed\", affectedKey, val, def, ss));                                // 158\n        return;                                                                                                        // 159\n      }                                                                                                                // 160\n                                                                                                                       // 161\n    }                                                                                                                  // 162\n                                                                                                                       // 163\n    // Perform custom validation                                                                                       // 164\n    var lastDot = affectedKey.lastIndexOf('.');                                                                        // 165\n    var fieldParentName = lastDot === -1 ? '' : affectedKey.slice(0, lastDot + 1);                                     // 166\n    var validators = def.custom ? [def.custom] : [];                                                                   // 167\n    validators = validators.concat(ss._validators).concat(SimpleSchema._validators);                                   // 168\n    _.every(validators, function(validator) {                                                                          // 169\n      var errorType = validator.call(_.extend({                                                                        // 170\n        key: affectedKey,                                                                                              // 171\n        genericKey: affectedKeyGeneric,                                                                                // 172\n        definition: def,                                                                                               // 173\n        isSet: (val !== void 0),                                                                                       // 174\n        value: val,                                                                                                    // 175\n        operator: op,                                                                                                  // 176\n        field: function(fName) {                                                                                       // 177\n          mDoc = mDoc || new MongoObject(obj, ss._blackboxKeys); //create if necessary, cache for speed                // 178\n          var keyInfo = mDoc.getInfoForKey(fName) || {};                                                               // 179\n          return {                                                                                                     // 180\n            isSet: (keyInfo.value !== void 0),                                                                         // 181\n            value: keyInfo.value,                                                                                      // 182\n            operator: keyInfo.operator                                                                                 // 183\n          };                                                                                                           // 184\n        },                                                                                                             // 185\n        siblingField: function(fName) {                                                                                // 186\n          mDoc = mDoc || new MongoObject(obj, ss._blackboxKeys); //create if necessary, cache for speed                // 187\n          var keyInfo = mDoc.getInfoForKey(fieldParentName + fName) || {};                                             // 188\n          return {                                                                                                     // 189\n            isSet: (keyInfo.value !== void 0),                                                                         // 190\n            value: keyInfo.value,                                                                                      // 191\n            operator: keyInfo.operator                                                                                 // 192\n          };                                                                                                           // 193\n        }                                                                                                              // 194\n      }, extendedCustomContext || {}));                                                                                // 195\n      if (typeof errorType === \"string\") {                                                                             // 196\n        invalidKeys.push(Utility.errorObject(errorType, affectedKey, val, def, ss));                                   // 197\n        return false;                                                                                                  // 198\n      }                                                                                                                // 199\n      return true;                                                                                                     // 200\n    });                                                                                                                // 201\n  }                                                                                                                    // 202\n                                                                                                                       // 203\n  // The recursive function                                                                                            // 204\n  function checkObj(val, affectedKey, operator, setKeys, isInArrayItemObject, isInSubObject) {                         // 205\n    var affectedKeyGeneric, def;                                                                                       // 206\n                                                                                                                       // 207\n    if (affectedKey) {                                                                                                 // 208\n      // When we hit a blackbox key, we don't progress any further                                                     // 209\n      if (ss.keyIsInBlackBox(affectedKey)) {                                                                           // 210\n        return;                                                                                                        // 211\n      }                                                                                                                // 212\n                                                                                                                       // 213\n      // Make a generic version of the affected key, and use that                                                      // 214\n      // to get the schema for this key.                                                                               // 215\n      affectedKeyGeneric = SimpleSchema._makeGeneric(affectedKey);                                                     // 216\n      def = ss.getDefinition(affectedKey);                                                                             // 217\n                                                                                                                       // 218\n      // Perform validation for this key                                                                               // 219\n      if (!keyToValidate || keyToValidate === affectedKey || keyToValidate === affectedKeyGeneric) {                   // 220\n        // We can skip the required check for keys that are ancestors                                                  // 221\n        // of those in $set or $setOnInsert because they will be created                                               // 222\n        // by MongoDB while setting.                                                                                   // 223\n        var skipRequiredCheck = _.some(setKeys, function(sk) {                                                         // 224\n          return (sk.slice(0, affectedKey.length + 1) === affectedKey + \".\");                                          // 225\n        });                                                                                                            // 226\n        validate(val, affectedKey, affectedKeyGeneric, def, operator, skipRequiredCheck, isInArrayItemObject, isInSubObject);\n      }                                                                                                                // 228\n    }                                                                                                                  // 229\n                                                                                                                       // 230\n    // Temporarily convert missing objects to empty objects                                                            // 231\n    // so that the looping code will be called and required                                                            // 232\n    // descendent keys can be validated.                                                                               // 233\n    if ((val === void 0 || val === null) && (!def || (def.type === Object && !def.optional))) {                        // 234\n      val = {};                                                                                                        // 235\n    }                                                                                                                  // 236\n                                                                                                                       // 237\n    // Loop through arrays                                                                                             // 238\n    if (_.isArray(val)) {                                                                                              // 239\n      _.each(val, function(v, i) {                                                                                     // 240\n        checkObj(v, affectedKey + '.' + i, operator, setKeys);                                                         // 241\n      });                                                                                                              // 242\n    }                                                                                                                  // 243\n                                                                                                                       // 244\n    // Loop through object keys                                                                                        // 245\n    else if (Utility.isBasicObject(val) && (!def || !def.blackbox)) {                                                  // 246\n                                                                                                                       // 247\n      // Get list of present keys                                                                                      // 248\n      var presentKeys = _.keys(val);                                                                                   // 249\n                                                                                                                       // 250\n      // Check all present keys plus all keys defined by the schema.                                                   // 251\n      // This allows us to detect extra keys not allowed by the schema plus                                            // 252\n      // any missing required keys, and to run any custom functions for other keys.                                    // 253\n      var keysToCheck = _.union(presentKeys, ss.objectKeys(affectedKeyGeneric));                                       // 254\n                                                                                                                       // 255\n      // If this object is within an array, make sure we check for                                                     // 256\n      // required as if it's not a modifier                                                                            // 257\n      isInArrayItemObject = (affectedKeyGeneric && affectedKeyGeneric.slice(-2) === \".$\");                             // 258\n                                                                                                                       // 259\n      // Check all keys in the merged list                                                                             // 260\n      _.each(keysToCheck, function(key) {                                                                              // 261\n        checkObj(val[key], Utility.appendAffectedKey(affectedKey, key), operator, setKeys, isInArrayItemObject, true); // 262\n      });                                                                                                              // 263\n    }                                                                                                                  // 264\n                                                                                                                       // 265\n  }                                                                                                                    // 266\n                                                                                                                       // 267\n  function checkModifier(mod) {                                                                                        // 268\n    // Check for empty modifier                                                                                        // 269\n    if (_.isEmpty(mod)) {                                                                                              // 270\n      throw new Error(\"When the modifier option is true, validation object must have at least one operator\");          // 271\n    }                                                                                                                  // 272\n                                                                                                                       // 273\n    // Get a list of all keys in $set and $setOnInsert combined, for use later                                         // 274\n    var setKeys = _.keys(mod.$set || {}).concat(_.keys(mod.$setOnInsert || {}));                                       // 275\n                                                                                                                       // 276\n    // If this is an upsert, add all the $setOnInsert keys to $set;                                                    // 277\n    // since we don't know whether it will be an insert or update, we'll                                               // 278\n    // validate upserts as if they will be an insert.                                                                  // 279\n    if (\"$setOnInsert\" in mod) {                                                                                       // 280\n      if (isUpsert) {                                                                                                  // 281\n        mod.$set = mod.$set || {};                                                                                     // 282\n        mod.$set = _.extend(mod.$set, mod.$setOnInsert);                                                               // 283\n      }                                                                                                                // 284\n      delete mod.$setOnInsert;                                                                                         // 285\n    }                                                                                                                  // 286\n                                                                                                                       // 287\n    // Loop through operators                                                                                          // 288\n    _.each(mod, function (opObj, op) {                                                                                 // 289\n      // If non-operators are mixed in, throw error                                                                    // 290\n      if (op.slice(0, 1) !== \"$\") {                                                                                    // 291\n        throw new Error(\"When the modifier option is true, all validation object keys must be operators. Did you forget `$set`?\");\n      }                                                                                                                // 293\n      if (Utility.shouldCheck(op)) {                                                                                   // 294\n        // For an upsert, missing props would not be set if an insert is performed,                                    // 295\n        // so we add null keys to the modifier to force any \"required\" checks to fail                                  // 296\n        if (isUpsert && op === \"$set\") {                                                                               // 297\n          var presentKeys = _.keys(opObj);                                                                             // 298\n          _.each(ss.objectKeys(), function (schemaKey) {                                                               // 299\n            if (!_.contains(presentKeys, schemaKey)) {                                                                 // 300\n              checkObj(void 0, schemaKey, op, setKeys);                                                                // 301\n            }                                                                                                          // 302\n          });                                                                                                          // 303\n        }                                                                                                              // 304\n        _.each(opObj, function (v, k) {                                                                                // 305\n          if (op === \"$push\" || op === \"$addToSet\") {                                                                  // 306\n            if (Utility.isBasicObject(v) && \"$each\" in v) {                                                            // 307\n              v = v.$each;                                                                                             // 308\n            } else {                                                                                                   // 309\n              k = k + \".0\";                                                                                            // 310\n            }                                                                                                          // 311\n          }                                                                                                            // 312\n          checkObj(v, k, op, setKeys);                                                                                 // 313\n        });                                                                                                            // 314\n      }                                                                                                                // 315\n    });                                                                                                                // 316\n  }                                                                                                                    // 317\n                                                                                                                       // 318\n  // Kick off the validation                                                                                           // 319\n  if (isModifier) {                                                                                                    // 320\n    checkModifier(obj);                                                                                                // 321\n  } else {                                                                                                             // 322\n    checkObj(obj);                                                                                                     // 323\n  }                                                                                                                    // 324\n                                                                                                                       // 325\n  // Make sure there is only one error per fieldName                                                                   // 326\n  var addedFieldNames = [];                                                                                            // 327\n  invalidKeys = _.filter(invalidKeys, function(errObj) {                                                               // 328\n    if (!_.contains(addedFieldNames, errObj.name)) {                                                                   // 329\n      addedFieldNames.push(errObj.name);                                                                               // 330\n      return true;                                                                                                     // 331\n    }                                                                                                                  // 332\n    return false;                                                                                                      // 333\n  });                                                                                                                  // 334\n                                                                                                                       // 335\n  return invalidKeys;                                                                                                  // 336\n};                                                                                                                     // 337\n                                                                                                                       // 338\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:simple-schema/simple-schema-validation-new.js                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global Utility */                                                                                                   // 1\n/* global _ */                                                                                                         // 2\n/* global SimpleSchema */                                                                                              // 3\n/* global MongoObject */                                                                                               // 4\n/* global Meteor */                                                                                                    // 5\n/* global Random */                                                                                                    // 6\n/* global doValidation2:true */                                                                                        // 7\n                                                                                                                       // 8\nfunction doTypeChecks(def, keyValue, op) {                                                                             // 9\n  var expectedType = def.type;                                                                                         // 10\n                                                                                                                       // 11\n  // String checks                                                                                                     // 12\n  if (expectedType === String) {                                                                                       // 13\n    if (typeof keyValue !== \"string\") {                                                                                // 14\n      return \"expectedString\";                                                                                         // 15\n    } else if (def.max !== null && def.max < keyValue.length) {                                                        // 16\n      return \"maxString\";                                                                                              // 17\n    } else if (def.min !== null && def.min > keyValue.length) {                                                        // 18\n      return \"minString\";                                                                                              // 19\n    } else if (def.regEx instanceof RegExp && !def.regEx.test(keyValue)) {                                             // 20\n      return \"regEx\";                                                                                                  // 21\n    } else if (_.isArray(def.regEx)) {                                                                                 // 22\n      var regExError;                                                                                                  // 23\n      _.every(def.regEx, function(re, i) {                                                                             // 24\n        if (!re.test(keyValue)) {                                                                                      // 25\n          regExError = \"regEx.\" + i;                                                                                   // 26\n          return false;                                                                                                // 27\n        }                                                                                                              // 28\n        return true;                                                                                                   // 29\n      });                                                                                                              // 30\n      if (regExError) {                                                                                                // 31\n        return regExError;                                                                                             // 32\n      }                                                                                                                // 33\n    }                                                                                                                  // 34\n  }                                                                                                                    // 35\n                                                                                                                       // 36\n  // Number checks                                                                                                     // 37\n  else if (expectedType === Number) {                                                                                  // 38\n    if (typeof keyValue !== \"number\" || isNaN(keyValue)) {                                                             // 39\n      return \"expectedNumber\";                                                                                         // 40\n    } else if (op !== \"$inc\" && def.max !== null && (!!def.exclusiveMax ? def.max <= keyValue : def.max < keyValue)) { // 41\n       return !!def.exclusiveMax ? \"maxNumberExclusive\" : \"maxNumber\";                                                 // 42\n    } else if (op !== \"$inc\" && def.min !== null && (!!def.exclusiveMin ? def.min >= keyValue : def.min > keyValue)) { // 43\n       return !!def.exclusiveMin ? \"minNumberExclusive\" : \"minNumber\";                                                 // 44\n    } else if (!def.decimal && keyValue.toString().indexOf(\".\") > -1) {                                                // 45\n      return \"noDecimal\";                                                                                              // 46\n    }                                                                                                                  // 47\n  }                                                                                                                    // 48\n                                                                                                                       // 49\n  // Boolean checks                                                                                                    // 50\n  else if (expectedType === Boolean) {                                                                                 // 51\n    if (typeof keyValue !== \"boolean\") {                                                                               // 52\n      return \"expectedBoolean\";                                                                                        // 53\n    }                                                                                                                  // 54\n  }                                                                                                                    // 55\n                                                                                                                       // 56\n  // Object checks                                                                                                     // 57\n  else if (expectedType === Object) {                                                                                  // 58\n    if (!Utility.isBasicObject(keyValue)) {                                                                            // 59\n      return \"expectedObject\";                                                                                         // 60\n    }                                                                                                                  // 61\n  }                                                                                                                    // 62\n                                                                                                                       // 63\n  // Array checks                                                                                                      // 64\n  else if (expectedType === Array) {                                                                                   // 65\n    if (!_.isArray(keyValue)) {                                                                                        // 66\n      return \"expectedArray\";                                                                                          // 67\n    } else if (def.minCount !== null && keyValue.length < def.minCount) {                                              // 68\n      return \"minCount\";                                                                                               // 69\n    } else if (def.maxCount !== null && keyValue.length > def.maxCount) {                                              // 70\n      return \"maxCount\";                                                                                               // 71\n    }                                                                                                                  // 72\n  }                                                                                                                    // 73\n                                                                                                                       // 74\n  // Constructor function checks                                                                                       // 75\n  else if (expectedType instanceof Function || Utility.safariBugFix(expectedType)) {                                   // 76\n                                                                                                                       // 77\n    // Generic constructor checks                                                                                      // 78\n    if (!(keyValue instanceof expectedType)) {                                                                         // 79\n      return \"expectedConstructor\";                                                                                    // 80\n    }                                                                                                                  // 81\n                                                                                                                       // 82\n    // Date checks                                                                                                     // 83\n    else if (expectedType === Date) {                                                                                  // 84\n      if (isNaN(keyValue.getTime())) {                                                                                 // 85\n        return \"badDate\";                                                                                              // 86\n      }                                                                                                                // 87\n                                                                                                                       // 88\n      if (_.isDate(def.min) && def.min.getTime() > keyValue.getTime()) {                                               // 89\n        return \"minDate\";                                                                                              // 90\n      } else if (_.isDate(def.max) && def.max.getTime() < keyValue.getTime()) {                                        // 91\n        return \"maxDate\";                                                                                              // 92\n      }                                                                                                                // 93\n    }                                                                                                                  // 94\n  }                                                                                                                    // 95\n                                                                                                                       // 96\n}                                                                                                                      // 97\n                                                                                                                       // 98\ndoValidation2 = function doValidation2(obj, isModifier, isUpsert, keyToValidate, ss, extendedCustomContext) {          // 99\n                                                                                                                       // 100\n  // First do some basic checks of the object, and throw errors if necessary                                           // 101\n  if (!_.isObject(obj)) {                                                                                              // 102\n    throw new Error(\"The first argument of validate() or validateOne() must be an object\");                            // 103\n  }                                                                                                                    // 104\n                                                                                                                       // 105\n  if (isModifier) {                                                                                                    // 106\n    if (_.isEmpty(obj)) {                                                                                              // 107\n      throw new Error(\"When the modifier option is true, validation object must have at least one operator\");          // 108\n    } else {                                                                                                           // 109\n      var allKeysAreOperators = _.every(obj, function(v, k) {                                                          // 110\n        return (k.substring(0, 1) === \"$\");                                                                            // 111\n      });                                                                                                              // 112\n      if (!allKeysAreOperators) {                                                                                      // 113\n        throw new Error(\"When the modifier option is true, all validation object keys must be operators\");             // 114\n      }                                                                                                                // 115\n                                                                                                                       // 116\n      // We use a LocalCollection to figure out what the resulting doc                                                 // 117\n      // would be in a worst case scenario. Then we validate that doc                                                  // 118\n      // so that we don't have to validate the modifier object directly.                                               // 119\n      obj = convertModifierToDoc(obj, ss.schema(), isUpsert);                                                          // 120\n    }                                                                                                                  // 121\n  } else if (Utility.looksLikeModifier(obj)) {                                                                         // 122\n    throw new Error(\"When the validation object contains mongo operators, you must set the modifier option to true\");  // 123\n  }                                                                                                                    // 124\n                                                                                                                       // 125\n  var invalidKeys = [];                                                                                                // 126\n  var mDoc; // for caching the MongoObject if necessary                                                                // 127\n                                                                                                                       // 128\n  // Validation function called for each affected key                                                                  // 129\n  function validate(val, affectedKey, affectedKeyGeneric, def, op, skipRequiredCheck, strictRequiredCheck) {           // 130\n                                                                                                                       // 131\n    // Get the schema for this key, marking invalid if there isn't one.                                                // 132\n    if (!def) {                                                                                                        // 133\n      invalidKeys.push(Utility.errorObject(\"keyNotInSchema\", affectedKey, val, def, ss));                              // 134\n      return;                                                                                                          // 135\n    }                                                                                                                  // 136\n                                                                                                                       // 137\n    // Check for missing required values. The general logic is this:                                                   // 138\n    // * If the operator is $unset or $rename, it's invalid.                                                           // 139\n    // * If the value is null, it's invalid.                                                                           // 140\n    // * If the value is undefined and one of the following are true, it's invalid:                                    // 141\n    //     * We're validating a key of a sub-object.                                                                   // 142\n    //     * We're validating a key of an object that is an array item.                                                // 143\n    //     * We're validating a document (as opposed to a modifier).                                                   // 144\n    //     * We're validating a key under the $set operator in a modifier, and it's an upsert.                         // 145\n    if (!skipRequiredCheck && !def.optional) {                                                                         // 146\n      if (val === null || val === void 0) {                                                                            // 147\n        invalidKeys.push(Utility.errorObject(\"required\", affectedKey, null, def, ss));                                 // 148\n        return;                                                                                                        // 149\n      }                                                                                                                // 150\n    }                                                                                                                  // 151\n                                                                                                                       // 152\n    // Value checks are not necessary for null or undefined values                                                     // 153\n    if (Utility.isNotNullOrUndefined(val)) {                                                                           // 154\n                                                                                                                       // 155\n      // Check that value is of the correct type                                                                       // 156\n      var typeError = doTypeChecks(def, val, op);                                                                      // 157\n      if (typeError) {                                                                                                 // 158\n        invalidKeys.push(Utility.errorObject(typeError, affectedKey, val, def, ss));                                   // 159\n        return;                                                                                                        // 160\n      }                                                                                                                // 161\n                                                                                                                       // 162\n      // Check value against allowedValues array                                                                       // 163\n      if (def.allowedValues && !_.contains(def.allowedValues, val)) {                                                  // 164\n        invalidKeys.push(Utility.errorObject(\"notAllowed\", affectedKey, val, def, ss));                                // 165\n        return;                                                                                                        // 166\n      }                                                                                                                // 167\n                                                                                                                       // 168\n    }                                                                                                                  // 169\n                                                                                                                       // 170\n    // Perform custom validation                                                                                       // 171\n    var lastDot = affectedKey.lastIndexOf('.');                                                                        // 172\n    var fieldParentName = lastDot === -1 ? '' : affectedKey.slice(0, lastDot + 1);                                     // 173\n    var validators = def.custom ? [def.custom] : [];                                                                   // 174\n    validators = validators.concat(ss._validators).concat(SimpleSchema._validators);                                   // 175\n    _.every(validators, function(validator) {                                                                          // 176\n      var errorType = validator.call(_.extend({                                                                        // 177\n        key: affectedKey,                                                                                              // 178\n        genericKey: affectedKeyGeneric,                                                                                // 179\n        definition: def,                                                                                               // 180\n        isSet: (val !== void 0),                                                                                       // 181\n        value: val,                                                                                                    // 182\n        operator: op,                                                                                                  // 183\n        field: function(fName) {                                                                                       // 184\n          mDoc = mDoc || new MongoObject(obj, ss._blackboxKeys); //create if necessary, cache for speed                // 185\n          var keyInfo = mDoc.getInfoForKey(fName) || {};                                                               // 186\n          return {                                                                                                     // 187\n            isSet: (keyInfo.value !== void 0),                                                                         // 188\n            value: keyInfo.value,                                                                                      // 189\n            operator: keyInfo.operator                                                                                 // 190\n          };                                                                                                           // 191\n        },                                                                                                             // 192\n        siblingField: function(fName) {                                                                                // 193\n          mDoc = mDoc || new MongoObject(obj, ss._blackboxKeys); //create if necessary, cache for speed                // 194\n          var keyInfo = mDoc.getInfoForKey(fieldParentName + fName) || {};                                             // 195\n          return {                                                                                                     // 196\n            isSet: (keyInfo.value !== void 0),                                                                         // 197\n            value: keyInfo.value,                                                                                      // 198\n            operator: keyInfo.operator                                                                                 // 199\n          };                                                                                                           // 200\n        }                                                                                                              // 201\n      }, extendedCustomContext || {}));                                                                                // 202\n      if (typeof errorType === \"string\") {                                                                             // 203\n        invalidKeys.push(Utility.errorObject(errorType, affectedKey, val, def, ss));                                   // 204\n        return false;                                                                                                  // 205\n      }                                                                                                                // 206\n      return true;                                                                                                     // 207\n    });                                                                                                                // 208\n  }                                                                                                                    // 209\n                                                                                                                       // 210\n  // The recursive function                                                                                            // 211\n  function checkObj(val, affectedKey, skipRequiredCheck, strictRequiredCheck) {                                        // 212\n    var affectedKeyGeneric, def;                                                                                       // 213\n                                                                                                                       // 214\n    if (affectedKey) {                                                                                                 // 215\n                                                                                                                       // 216\n      // When we hit a blackbox key, we don't progress any further                                                     // 217\n      if (ss.keyIsInBlackBox(affectedKey)) {                                                                           // 218\n        return;                                                                                                        // 219\n      }                                                                                                                // 220\n                                                                                                                       // 221\n      // Make a generic version of the affected key, and use that                                                      // 222\n      // to get the schema for this key.                                                                               // 223\n      affectedKeyGeneric = SimpleSchema._makeGeneric(affectedKey);                                                     // 224\n      def = ss.getDefinition(affectedKey);                                                                             // 225\n                                                                                                                       // 226\n      // Perform validation for this key                                                                               // 227\n      if (!keyToValidate || keyToValidate === affectedKey || keyToValidate === affectedKeyGeneric) {                   // 228\n        validate(val, affectedKey, affectedKeyGeneric, def, null, skipRequiredCheck, strictRequiredCheck);             // 229\n      }                                                                                                                // 230\n    }                                                                                                                  // 231\n                                                                                                                       // 232\n    // Temporarily convert missing objects to empty objects                                                            // 233\n    // so that the looping code will be called and required                                                            // 234\n    // descendent keys can be validated.                                                                               // 235\n    if ((val === void 0 || val === null) && (!def || (def.type === Object && !def.optional))) {                        // 236\n      val = {};                                                                                                        // 237\n    }                                                                                                                  // 238\n                                                                                                                       // 239\n    // Loop through arrays                                                                                             // 240\n    if (_.isArray(val)) {                                                                                              // 241\n      _.each(val, function(v, i) {                                                                                     // 242\n        checkObj(v, affectedKey + '.' + i);                                                                            // 243\n      });                                                                                                              // 244\n    }                                                                                                                  // 245\n                                                                                                                       // 246\n    // Loop through object keys                                                                                        // 247\n    else if (Utility.isBasicObject(val) && (!def || !def.blackbox)) {                                                  // 248\n                                                                                                                       // 249\n      // Get list of present keys                                                                                      // 250\n      var presentKeys = _.keys(val);                                                                                   // 251\n                                                                                                                       // 252\n      // Check all present keys plus all keys defined by the schema.                                                   // 253\n      // This allows us to detect extra keys not allowed by the schema plus                                            // 254\n      // any missing required keys, and to run any custom functions for other keys.                                    // 255\n      var keysToCheck = _.union(presentKeys, ss._schemaKeys);                                                          // 256\n                                                                                                                       // 257\n      // If this object is within an array, make sure we check for                                                     // 258\n      // required as if it's not a modifier                                                                            // 259\n      strictRequiredCheck = (affectedKeyGeneric && affectedKeyGeneric.slice(-2) === \".$\");                             // 260\n                                                                                                                       // 261\n      // Check all keys in the merged list                                                                             // 262\n      _.each(keysToCheck, function(key) {                                                                              // 263\n        if (Utility.shouldCheck(key)) {                                                                                // 264\n          checkObj(val[key], Utility.appendAffectedKey(affectedKey, key), skipRequiredCheck, strictRequiredCheck);     // 265\n        }                                                                                                              // 266\n      });                                                                                                              // 267\n    }                                                                                                                  // 268\n                                                                                                                       // 269\n  }                                                                                                                    // 270\n                                                                                                                       // 271\n  // Kick off the validation                                                                                           // 272\n  checkObj(obj);                                                                                                       // 273\n                                                                                                                       // 274\n  // Make sure there is only one error per fieldName                                                                   // 275\n  var addedFieldNames = [];                                                                                            // 276\n  invalidKeys = _.filter(invalidKeys, function(errObj) {                                                               // 277\n    if (!_.contains(addedFieldNames, errObj.name)) {                                                                   // 278\n      addedFieldNames.push(errObj.name);                                                                               // 279\n      return true;                                                                                                     // 280\n    }                                                                                                                  // 281\n    return false;                                                                                                      // 282\n  });                                                                                                                  // 283\n                                                                                                                       // 284\n  return invalidKeys;                                                                                                  // 285\n};                                                                                                                     // 286\n                                                                                                                       // 287\nfunction convertModifierToDoc(mod, schema, isUpsert) {                                                                 // 288\n  // Create unmanaged LocalCollection as scratchpad                                                                    // 289\n  var t = new Meteor.Collection(null);                                                                                 // 290\n                                                                                                                       // 291\n  // LocalCollections are in memory, and it seems                                                                      // 292\n  // that it's fine to use them synchronously on                                                                       // 293\n  // either client or server                                                                                           // 294\n  var id;                                                                                                              // 295\n  if (isUpsert) {                                                                                                      // 296\n    // We assume upserts will be inserts (conservative                                                                 // 297\n    // validation of requiredness)                                                                                     // 298\n    id = Random.id();                                                                                                  // 299\n    t.upsert({_id: id}, mod);                                                                                          // 300\n  } else {                                                                                                             // 301\n    var mDoc = new MongoObject(mod);                                                                                   // 302\n    // Create a ficticious existing document                                                                           // 303\n    var fakeDoc = new MongoObject({});                                                                                 // 304\n    _.each(schema, function (def, fieldName) {                                                                         // 305\n      var setVal;                                                                                                      // 306\n      // Prefill doc with empty arrays to avoid the                                                                    // 307\n      // mongodb issue where it does not understand                                                                    // 308\n      // that numeric pieces should create arrays.                                                                     // 309\n      if (def.type === Array && mDoc.affectsGenericKey(fieldName)) {                                                   // 310\n        setVal = [];                                                                                                   // 311\n      }                                                                                                                // 312\n      // Set dummy values for required fields because                                                                  // 313\n      // we assume any existing data would be valid.                                                                   // 314\n      else if (!def.optional) {                                                                                        // 315\n        // TODO correct value type based on schema type                                                                // 316\n        if (def.type === Boolean) {                                                                                    // 317\n          setVal = true;                                                                                               // 318\n        } else if (def.type === Number) {                                                                              // 319\n          setVal = def.min || 0;                                                                                       // 320\n        } else if (def.type === Date) {                                                                                // 321\n          setVal = def.min || new Date();                                                                              // 322\n        } else if (def.type === Array) {                                                                               // 323\n          setVal = [];                                                                                                 // 324\n        } else if (def.type === Object) {                                                                              // 325\n          setVal = {};                                                                                                 // 326\n        } else {                                                                                                       // 327\n          setVal = \"0\";                                                                                                // 328\n        }                                                                                                              // 329\n      }                                                                                                                // 330\n                                                                                                                       // 331\n      if (setVal !== void 0) {                                                                                         // 332\n        var key = fieldName.replace(/\\.\\$/g, \".0\");                                                                    // 333\n        var pos = MongoObject._keyToPosition(key, false);                                                              // 334\n        fakeDoc.setValueForPosition(pos, setVal);                                                                      // 335\n      }                                                                                                                // 336\n    });                                                                                                                // 337\n    fakeDoc = fakeDoc.getObject();                                                                                     // 338\n    // Insert fake doc into local scratch collection                                                                   // 339\n    id = t.insert(fakeDoc);                                                                                            // 340\n    // Now update it with the modifier                                                                                 // 341\n    t.update(id, mod);                                                                                                 // 342\n  }                                                                                                                    // 343\n                                                                                                                       // 344\n  var doc = t.findOne(id);                                                                                             // 345\n  // We're done with it                                                                                                // 346\n  t.remove(id);                                                                                                        // 347\n  // Currently we don't validate _id unless it is                                                                      // 348\n  // explicitly added to the schema                                                                                    // 349\n  if (!schema._id) {                                                                                                   // 350\n    delete doc._id;                                                                                                    // 351\n  }                                                                                                                    // 352\n  return doc;                                                                                                          // 353\n}                                                                                                                      // 354\n                                                                                                                       // 355\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:simple-schema/simple-schema-context.js                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global SimpleSchema */                                                                                              // 1\n/* global SimpleSchemaValidationContext:true */                                                                        // 2\n/* global doValidation1 */                                                                                             // 3\n/* global doValidation2 */                                                                                             // 4\n                                                                                                                       // 5\nfunction doValidation(obj, isModifier, isUpsert, keyToValidate, ss, extendedCustomContext) {                           // 6\n  var useOld = true; //for now this can be manually changed to try the experimental method, which doesn't yet work properly\n  var func = useOld ? doValidation1 : doValidation2;                                                                   // 8\n  return func(obj, isModifier, isUpsert, keyToValidate, ss, extendedCustomContext);                                    // 9\n}                                                                                                                      // 10\n                                                                                                                       // 11\n/*                                                                                                                     // 12\n * PUBLIC API                                                                                                          // 13\n */                                                                                                                    // 14\n                                                                                                                       // 15\nSimpleSchemaValidationContext = function SimpleSchemaValidationContext(ss) {                                           // 16\n  var self = this;                                                                                                     // 17\n  self._simpleSchema = ss;                                                                                             // 18\n  self._schema = ss.schema();                                                                                          // 19\n  self._schemaKeys = _.keys(self._schema);                                                                             // 20\n  self._invalidKeys = [];                                                                                              // 21\n  //set up validation dependencies                                                                                     // 22\n  self._deps = {};                                                                                                     // 23\n  self._depsAny = new Deps.Dependency();                                                                               // 24\n  _.each(self._schemaKeys, function(name) {                                                                            // 25\n    self._deps[name] = new Deps.Dependency();                                                                          // 26\n  });                                                                                                                  // 27\n};                                                                                                                     // 28\n                                                                                                                       // 29\n//validates the object against the simple schema and sets a reactive array of error objects                            // 30\nSimpleSchemaValidationContext.prototype.validate = function simpleSchemaValidationContextValidate(doc, options) {      // 31\n  var self = this;                                                                                                     // 32\n  options = _.extend({                                                                                                 // 33\n    modifier: false,                                                                                                   // 34\n    upsert: false,                                                                                                     // 35\n    extendedCustomContext: {}                                                                                          // 36\n  }, options || {});                                                                                                   // 37\n                                                                                                                       // 38\n  //on the client we can add the userId if not already in the custom context                                           // 39\n  if (Meteor.isClient && options.extendedCustomContext.userId === void 0) {                                            // 40\n    options.extendedCustomContext.userId = (Meteor.userId && Meteor.userId()) || null;                                 // 41\n  }                                                                                                                    // 42\n                                                                                                                       // 43\n  var invalidKeys = doValidation(doc, options.modifier, options.upsert, null, self._simpleSchema, options.extendedCustomContext);\n                                                                                                                       // 45\n  //now update self._invalidKeys and dependencies                                                                      // 46\n                                                                                                                       // 47\n  //note any currently invalid keys so that we can mark them as changed                                                // 48\n  //due to new validation (they may be valid now, or invalid in a different way)                                       // 49\n  var removedKeys = _.pluck(self._invalidKeys, \"name\");                                                                // 50\n                                                                                                                       // 51\n  //update                                                                                                             // 52\n  self._invalidKeys = invalidKeys;                                                                                     // 53\n                                                                                                                       // 54\n  //add newly invalid keys to changedKeys                                                                              // 55\n  var addedKeys = _.pluck(self._invalidKeys, \"name\");                                                                  // 56\n                                                                                                                       // 57\n  //mark all changed keys as changed                                                                                   // 58\n  var changedKeys = _.union(addedKeys, removedKeys);                                                                   // 59\n  self._markKeysChanged(changedKeys);                                                                                  // 60\n                                                                                                                       // 61\n  // Return true if it was valid; otherwise, return false                                                              // 62\n  return self._invalidKeys.length === 0;                                                                               // 63\n};                                                                                                                     // 64\n                                                                                                                       // 65\n//validates doc against self._schema for one key and sets a reactive array of error objects                            // 66\nSimpleSchemaValidationContext.prototype.validateOne = function simpleSchemaValidationContextValidateOne(doc, keyName, options) {\n  var self = this, i, ln, k;                                                                                           // 68\n  options = _.extend({                                                                                                 // 69\n    modifier: false,                                                                                                   // 70\n    upsert: false,                                                                                                     // 71\n    extendedCustomContext: {}                                                                                          // 72\n  }, options || {});                                                                                                   // 73\n                                                                                                                       // 74\n  //on the client we can add the userId if not already in the custom context                                           // 75\n  if (Meteor.isClient && options.extendedCustomContext.userId === void 0) {                                            // 76\n    options.extendedCustomContext.userId = (Meteor.userId && Meteor.userId()) || null;                                 // 77\n  }                                                                                                                    // 78\n                                                                                                                       // 79\n  var invalidKeys = doValidation(doc, options.modifier, options.upsert, keyName, self._simpleSchema, options.extendedCustomContext);\n                                                                                                                       // 81\n  //now update self._invalidKeys and dependencies                                                                      // 82\n                                                                                                                       // 83\n  //remove objects from self._invalidKeys where name = keyName                                                         // 84\n  var newInvalidKeys = [];                                                                                             // 85\n  for (i = 0, ln = self._invalidKeys.length; i < ln; i++) {                                                            // 86\n    k = self._invalidKeys[i];                                                                                          // 87\n    if (k.name !== keyName) {                                                                                          // 88\n      newInvalidKeys.push(k);                                                                                          // 89\n    }                                                                                                                  // 90\n  }                                                                                                                    // 91\n  self._invalidKeys = newInvalidKeys;                                                                                  // 92\n                                                                                                                       // 93\n  //merge invalidKeys into self._invalidKeys                                                                           // 94\n  for (i = 0, ln = invalidKeys.length; i < ln; i++) {                                                                  // 95\n    k = invalidKeys[i];                                                                                                // 96\n    self._invalidKeys.push(k);                                                                                         // 97\n  }                                                                                                                    // 98\n                                                                                                                       // 99\n  //mark key as changed due to new validation (they may be valid now, or invalid in a different way)                   // 100\n  self._markKeysChanged([keyName]);                                                                                    // 101\n                                                                                                                       // 102\n  // Return true if it was valid; otherwise, return false                                                              // 103\n  return !self._keyIsInvalid(keyName);                                                                                 // 104\n};                                                                                                                     // 105\n                                                                                                                       // 106\n//reset the invalidKeys array                                                                                          // 107\nSimpleSchemaValidationContext.prototype.resetValidation = function simpleSchemaValidationContextResetValidation() {    // 108\n  var self = this;                                                                                                     // 109\n  var removedKeys = _.pluck(self._invalidKeys, \"name\");                                                                // 110\n  self._invalidKeys = [];                                                                                              // 111\n  self._markKeysChanged(removedKeys);                                                                                  // 112\n};                                                                                                                     // 113\n                                                                                                                       // 114\nSimpleSchemaValidationContext.prototype.isValid = function simpleSchemaValidationContextIsValid() {                    // 115\n  var self = this;                                                                                                     // 116\n  self._depsAny.depend();                                                                                              // 117\n  return !self._invalidKeys.length;                                                                                    // 118\n};                                                                                                                     // 119\n                                                                                                                       // 120\nSimpleSchemaValidationContext.prototype.invalidKeys = function simpleSchemaValidationContextInvalidKeys() {            // 121\n  var self = this;                                                                                                     // 122\n  self._depsAny.depend();                                                                                              // 123\n  return self._invalidKeys;                                                                                            // 124\n};                                                                                                                     // 125\n                                                                                                                       // 126\nSimpleSchemaValidationContext.prototype.addInvalidKeys = function simpleSchemaValidationContextAddInvalidKeys(errors) {\n  var self = this;                                                                                                     // 128\n                                                                                                                       // 129\n  if (!errors || !errors.length) {                                                                                     // 130\n    return;                                                                                                            // 131\n  }                                                                                                                    // 132\n                                                                                                                       // 133\n  var changedKeys = [];                                                                                                // 134\n  _.each(errors, function (errorObject) {                                                                              // 135\n    changedKeys.push(errorObject.name);                                                                                // 136\n    self._invalidKeys.push(errorObject);                                                                               // 137\n  });                                                                                                                  // 138\n                                                                                                                       // 139\n  self._markKeysChanged(changedKeys);                                                                                  // 140\n};                                                                                                                     // 141\n                                                                                                                       // 142\nSimpleSchemaValidationContext.prototype._markKeysChanged = function simpleSchemaValidationContextMarkKeysChanged(keys) {\n  var self = this;                                                                                                     // 144\n                                                                                                                       // 145\n  if (!keys || !keys.length) {                                                                                         // 146\n    return;                                                                                                            // 147\n  }                                                                                                                    // 148\n                                                                                                                       // 149\n  _.each(keys, function(name) {                                                                                        // 150\n    var genericName = SimpleSchema._makeGeneric(name);                                                                 // 151\n    if (genericName in self._deps) {                                                                                   // 152\n      self._deps[genericName].changed();                                                                               // 153\n    }                                                                                                                  // 154\n  });                                                                                                                  // 155\n  self._depsAny.changed();                                                                                             // 156\n};                                                                                                                     // 157\n                                                                                                                       // 158\nSimpleSchemaValidationContext.prototype._getInvalidKeyObject = function simpleSchemaValidationContextGetInvalidKeyObject(name, genericName) {\n  var self = this;                                                                                                     // 160\n  genericName = genericName || SimpleSchema._makeGeneric(name);                                                        // 161\n                                                                                                                       // 162\n  var errorObj = _.findWhere(self._invalidKeys, {name: name});                                                         // 163\n  if (!errorObj) {                                                                                                     // 164\n    errorObj = _.findWhere(self._invalidKeys, {name: genericName});                                                    // 165\n  }                                                                                                                    // 166\n  return errorObj;                                                                                                     // 167\n};                                                                                                                     // 168\n                                                                                                                       // 169\nSimpleSchemaValidationContext.prototype._keyIsInvalid = function simpleSchemaValidationContextKeyIsInvalid(name, genericName) {\n  return !!this._getInvalidKeyObject(name, genericName);                                                               // 171\n};                                                                                                                     // 172\n                                                                                                                       // 173\n// Like the internal one, but with deps                                                                                // 174\nSimpleSchemaValidationContext.prototype.keyIsInvalid = function simpleSchemaValidationContextKeyIsInvalid(name) {      // 175\n  var self = this, genericName = SimpleSchema._makeGeneric(name);                                                      // 176\n  self._deps[genericName] && self._deps[genericName].depend();                                                         // 177\n                                                                                                                       // 178\n  return self._keyIsInvalid(name, genericName);                                                                        // 179\n};                                                                                                                     // 180\n                                                                                                                       // 181\nSimpleSchemaValidationContext.prototype.keyErrorMessage = function simpleSchemaValidationContextKeyErrorMessage(name) {\n  var self = this, genericName = SimpleSchema._makeGeneric(name);                                                      // 183\n  self._deps[genericName] && self._deps[genericName].depend();                                                         // 184\n                                                                                                                       // 185\n  var errorObj = self._getInvalidKeyObject(name, genericName);                                                         // 186\n  if (!errorObj) {                                                                                                     // 187\n    return \"\";                                                                                                         // 188\n  }                                                                                                                    // 189\n                                                                                                                       // 190\n  return self._simpleSchema.messageForError(errorObj.type, errorObj.name, null, errorObj.value);                       // 191\n};                                                                                                                     // 192\n                                                                                                                       // 193\nSimpleSchemaValidationContext.prototype.getErrorObject = function simpleSchemaValidationContextGetErrorObject() {      // 194\n  var self = this, message, invalidKeys = this._invalidKeys;                                                           // 195\n  if (invalidKeys.length) {                                                                                            // 196\n    message = self.keyErrorMessage(invalidKeys[0].name);                                                               // 197\n    // We add `message` prop to the invalidKeys.                                                                       // 198\n    invalidKeys = _.map(invalidKeys, function (o) {                                                                    // 199\n      return _.extend({message: self.keyErrorMessage(o.name)}, o);                                                     // 200\n    });                                                                                                                // 201\n  } else {                                                                                                             // 202\n    message = \"Failed validation\";                                                                                     // 203\n  }                                                                                                                    // 204\n  var error = new Error(message);                                                                                      // 205\n  error.invalidKeys = invalidKeys;                                                                                     // 206\n  // If on the server, we add a sanitized error, too, in case we're                                                    // 207\n  // called from a method.                                                                                             // 208\n  if (Meteor.isServer) {                                                                                               // 209\n    error.sanitizedError = new Meteor.Error(400, message);                                                             // 210\n  }                                                                                                                    // 211\n  return error;                                                                                                        // 212\n};                                                                                                                     // 213\n                                                                                                                       // 214\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}