{"version":3,"sources":["meteor://ðŸ’»app/packages/cfs_http-methods/packages/cfs_http-methods.js"],"names":[],"mappingsfile":"/packages/cfs_http-methods.js","sourcesContent":["(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/cfs:http-methods/http.methods.server.api.js                                                               //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/*                                                                                                                    // 1\n                                                                                                                      // 2\nGET /note                                                                                                             // 3\nGET /note/:id                                                                                                         // 4\nPOST /note                                                                                                            // 5\nPUT /note/:id                                                                                                         // 6\nDELETE /note/:id                                                                                                      // 7\n                                                                                                                      // 8\n*/                                                                                                                    // 9\nHTTP = Package.http && Package.http.HTTP || {};                                                                       // 10\n                                                                                                                      // 11\n// Primary local test scope                                                                                           // 12\n_methodHTTP = {};                                                                                                     // 13\n                                                                                                                      // 14\n                                                                                                                      // 15\n_methodHTTP.methodHandlers = {};                                                                                      // 16\n_methodHTTP.methodTree = {};                                                                                          // 17\n                                                                                                                      // 18\n// This could be changed eg. could allow larger data chunks than 1.000.000                                            // 19\n// 5mb = 5 * 1024 * 1024 = 5242880;                                                                                   // 20\nHTTP.methodsMaxDataLength = 5242880; //1e6;                                                                           // 21\n                                                                                                                      // 22\n_methodHTTP.nameFollowsConventions = function(name) {                                                                 // 23\n  // Check that name is string, not a falsy or empty                                                                  // 24\n  return name && name === '' + name && name !== '';                                                                   // 25\n};                                                                                                                    // 26\n                                                                                                                      // 27\n                                                                                                                      // 28\n_methodHTTP.getNameList = function(name) {                                                                            // 29\n  // Remove leading and trailing slashes and make command array                                                       // 30\n  name = name && name.replace(/^\\//g, '') || ''; // /^\\/|\\/$/g                                                        // 31\n  // TODO: Get the format from the url - eg.: \"/list/45.json\" format should be                                        // 32\n  // set in this function by splitting the last list item by . and have format                                        // 33\n  // as the last item. How should we toggle:                                                                          // 34\n  // \"/list/45/item.name.json\" and \"/list/45/item.name\"?                                                              // 35\n  // We would either have to check all known formats or allways determin the \".\"                                      // 36\n  // as an extension. Resolving in \"json\" and \"name\" as handed format - the user                                      // 37\n  // Could simply just add the format as a parametre? or be explicit about                                            // 38\n  // naming                                                                                                           // 39\n  return name && name.split('/') || [];                                                                               // 40\n};                                                                                                                    // 41\n                                                                                                                      // 42\n// Merge two arrays one containing keys and one values                                                                // 43\n_methodHTTP.createObject = function(keys, values) {                                                                   // 44\n  var result = {};                                                                                                    // 45\n  if (keys && values) {                                                                                               // 46\n    for (var i = 0; i < keys.length; i++) {                                                                           // 47\n      result[keys[i]] = values[i] && decodeURIComponent(values[i]) || '';                                             // 48\n    }                                                                                                                 // 49\n  }                                                                                                                   // 50\n  return result;                                                                                                      // 51\n};                                                                                                                    // 52\n                                                                                                                      // 53\n_methodHTTP.addToMethodTree = function(methodName) {                                                                  // 54\n  var list = _methodHTTP.getNameList(methodName);                                                                     // 55\n  var name = '/';                                                                                                     // 56\n  // Contains the list of params names                                                                                // 57\n  var params = [];                                                                                                    // 58\n  var currentMethodTree = _methodHTTP.methodTree;                                                                     // 59\n                                                                                                                      // 60\n  for (var i = 0; i < list.length; i++) {                                                                             // 61\n                                                                                                                      // 62\n    // get the key name                                                                                               // 63\n    var key = list[i];                                                                                                // 64\n    // Check if it expects a value                                                                                    // 65\n    if (key[0] === ':') {                                                                                             // 66\n      // This is a value                                                                                              // 67\n      params.push(key.slice(1));                                                                                      // 68\n      key = ':value';                                                                                                 // 69\n    }                                                                                                                 // 70\n    name += key + '/';                                                                                                // 71\n                                                                                                                      // 72\n    // Set the key into the method tree                                                                               // 73\n    if (typeof currentMethodTree[key] === 'undefined') {                                                              // 74\n      currentMethodTree[key] = {};                                                                                    // 75\n    }                                                                                                                 // 76\n                                                                                                                      // 77\n    // Dig deeper                                                                                                     // 78\n    currentMethodTree = currentMethodTree[key];                                                                       // 79\n                                                                                                                      // 80\n  }                                                                                                                   // 81\n                                                                                                                      // 82\n  if (_.isEmpty(currentMethodTree[':ref'])) {                                                                         // 83\n    currentMethodTree[':ref'] = {                                                                                     // 84\n      name: name,                                                                                                     // 85\n      params: params                                                                                                  // 86\n    };                                                                                                                // 87\n  }                                                                                                                   // 88\n                                                                                                                      // 89\n  return currentMethodTree[':ref'];                                                                                   // 90\n};                                                                                                                    // 91\n                                                                                                                      // 92\n// This method should be optimized for speed since its called on allmost every                                        // 93\n// http call to the server so we return null as soon as we know its not a method                                      // 94\n_methodHTTP.getMethod = function(name) {                                                                              // 95\n  // Check if the                                                                                                     // 96\n  if (!_methodHTTP.nameFollowsConventions(name)) {                                                                    // 97\n    return null;                                                                                                      // 98\n  }                                                                                                                   // 99\n  var list = _methodHTTP.getNameList(name);                                                                           // 100\n  // Check if we got a correct list                                                                                   // 101\n  if (!list || !list.length) {                                                                                        // 102\n    return null;                                                                                                      // 103\n  }                                                                                                                   // 104\n  // Set current refernce in the _methodHTTP.methodTree                                                               // 105\n  var currentMethodTree = _methodHTTP.methodTree;                                                                     // 106\n  // Buffer for values to hand on later                                                                               // 107\n  var values = [];                                                                                                    // 108\n  // Iterate over the method name and check if its found in the method tree                                           // 109\n  for (var i = 0; i < list.length; i++) {                                                                             // 110\n    // get the key name                                                                                               // 111\n    var key = list[i];                                                                                                // 112\n    // We expect to find the key or :value if not we break                                                            // 113\n    if (typeof currentMethodTree[key] !== 'undefined' ||                                                              // 114\n            typeof currentMethodTree[':value'] !== 'undefined') {                                                     // 115\n      // We got a result now check if its a value                                                                     // 116\n      if (typeof currentMethodTree[key] === 'undefined') {                                                            // 117\n        // Push the value                                                                                             // 118\n        values.push(key);                                                                                             // 119\n        // Set the key to :value to dig deeper                                                                        // 120\n        key = ':value';                                                                                               // 121\n      }                                                                                                               // 122\n                                                                                                                      // 123\n    } else {                                                                                                          // 124\n      // Break - method call not found                                                                                // 125\n      return null;                                                                                                    // 126\n    }                                                                                                                 // 127\n                                                                                                                      // 128\n    // Dig deeper                                                                                                     // 129\n    currentMethodTree = currentMethodTree[key];                                                                       // 130\n  }                                                                                                                   // 131\n                                                                                                                      // 132\n  // Extract reference pointer                                                                                        // 133\n  var reference = currentMethodTree && currentMethodTree[':ref'];                                                     // 134\n  if (typeof reference !== 'undefined') {                                                                             // 135\n    return {                                                                                                          // 136\n      name: reference.name,                                                                                           // 137\n      params: _methodHTTP.createObject(reference.params, values),                                                     // 138\n      handle: _methodHTTP.methodHandlers[reference.name]                                                              // 139\n    };                                                                                                                // 140\n  } else {                                                                                                            // 141\n    // Did not get any reference to the method                                                                        // 142\n    return null;                                                                                                      // 143\n  }                                                                                                                   // 144\n};                                                                                                                    // 145\n                                                                                                                      // 146\n// This method retrieves the userId from the token and makes sure that the token                                      // 147\n// is valid and not expired                                                                                           // 148\n_methodHTTP.getUserId = function() {                                                                                  // 149\n  var self = this;                                                                                                    // 150\n                                                                                                                      // 151\n  // // Get ip, x-forwarded-for can be comma seperated ips where the first is the                                     // 152\n  // // client ip                                                                                                     // 153\n  // var ip = self.req.headers['x-forwarded-for'] &&                                                                  // 154\n  //         // Return the first item in ip list                                                                      // 155\n  //         self.req.headers['x-forwarded-for'].split(',')[0] ||                                                     // 156\n  //         // or return the remoteAddress                                                                           // 157\n  //         self.req.connection.remoteAddress;                                                                       // 158\n                                                                                                                      // 159\n  // Check authentication                                                                                             // 160\n  var userToken = self.query.token;                                                                                   // 161\n                                                                                                                      // 162\n  // Check if we are handed strings                                                                                   // 163\n  try {                                                                                                               // 164\n    userToken && check(userToken, String);                                                                            // 165\n  } catch(err) {                                                                                                      // 166\n    throw new Meteor.Error(404, 'Error user token and id not of type strings, Error: ' + (err.stack || err.message)); // 167\n  }                                                                                                                   // 168\n                                                                                                                      // 169\n  // Set the this.userId                                                                                              // 170\n  if (userToken) {                                                                                                    // 171\n    // Look up user to check if user exists and is loggedin via token                                                 // 172\n    var user = Meteor.users.findOne({                                                                                 // 173\n        $or: [                                                                                                        // 174\n          {'services.resume.loginTokens.hashedToken': Accounts._hashLoginToken(userToken)},                           // 175\n          {'services.resume.loginTokens.token': userToken}                                                            // 176\n        ]                                                                                                             // 177\n      });                                                                                                             // 178\n    // TODO: check 'services.resume.loginTokens.when' to have the token expire                                        // 179\n                                                                                                                      // 180\n    // Set the userId in the scope                                                                                    // 181\n    return user && user._id;                                                                                          // 182\n  }                                                                                                                   // 183\n                                                                                                                      // 184\n  return null;                                                                                                        // 185\n};                                                                                                                    // 186\n                                                                                                                      // 187\n// Expose the default auth for calling from custom authentication handlers.                                           // 188\nHTTP.defaultAuth = _methodHTTP.getUserId;                                                                             // 189\n                                                                                                                      // 190\n/*                                                                                                                    // 191\n                                                                                                                      // 192\nAdd default support for options                                                                                       // 193\n                                                                                                                      // 194\n*/                                                                                                                    // 195\n_methodHTTP.defaultOptionsHandler = function(methodObject) {                                                          // 196\n  // List of supported methods                                                                                        // 197\n  var allowMethods = [];                                                                                              // 198\n  // The final result object                                                                                          // 199\n  var result = {};                                                                                                    // 200\n                                                                                                                      // 201\n  // Iterate over the methods                                                                                         // 202\n  // XXX: We should have a way to extend this - We should have some schema model                                      // 203\n  // for our methods...                                                                                               // 204\n  _.each(methodObject, function(f, methodName) {                                                                      // 205\n    // Skip the stream and auth functions - they are not public / accessible                                          // 206\n    if (methodName !== 'stream' && methodName !== 'auth') {                                                           // 207\n                                                                                                                      // 208\n      // Create an empty description                                                                                  // 209\n      result[methodName] = { description: '', parameters: {} };                                                       // 210\n      // Add method name to headers                                                                                   // 211\n      allowMethods.push(methodName);                                                                                  // 212\n                                                                                                                      // 213\n    }                                                                                                                 // 214\n  });                                                                                                                 // 215\n                                                                                                                      // 216\n  // Lets play nice                                                                                                   // 217\n  this.setStatusCode(200);                                                                                            // 218\n                                                                                                                      // 219\n  // We have to set some allow headers here                                                                           // 220\n  this.addHeader('Allow', allowMethods.join(','));                                                                    // 221\n                                                                                                                      // 222\n  // Return json result - Pretty print                                                                                // 223\n  return JSON.stringify(result, null, '\\t');                                                                          // 224\n};                                                                                                                    // 225\n                                                                                                                      // 226\n// Public interface for adding server-side http methods - if setting a method to                                      // 227\n// 'false' it would actually remove the method (can be used to unpublish a method)                                    // 228\nHTTP.methods = function(newMethods) {                                                                                 // 229\n  _.each(newMethods, function(func, name) {                                                                           // 230\n    if (_methodHTTP.nameFollowsConventions(name)) {                                                                   // 231\n      // Check if we got a function                                                                                   // 232\n      //if (typeof func === 'function') {                                                                             // 233\n        var method = _methodHTTP.addToMethodTree(name);                                                               // 234\n        // The func is good                                                                                           // 235\n        if (typeof _methodHTTP.methodHandlers[method.name] !== 'undefined') {                                         // 236\n          if (func === false) {                                                                                       // 237\n            // If the method is set to false then unpublish                                                           // 238\n            delete _methodHTTP.methodHandlers[method.name];                                                           // 239\n            // Delete the reference in the _methodHTTP.methodTree                                                     // 240\n            delete method.name;                                                                                       // 241\n            delete method.params;                                                                                     // 242\n          } else {                                                                                                    // 243\n            // We should not allow overwriting - following Meteor.methods                                             // 244\n            throw new Error('HTTP method \"' + name + '\" is already registered');                                      // 245\n          }                                                                                                           // 246\n        } else {                                                                                                      // 247\n          // We could have a function or a object                                                                     // 248\n          // The object could have:                                                                                   // 249\n          // '/test/': {                                                                                              // 250\n          //   auth: function() ... returning the userId using over default                                           // 251\n          //                                                                                                          // 252\n          //   method: function() ...                                                                                 // 253\n          //   or                                                                                                     // 254\n          //   post: function() ...                                                                                   // 255\n          //   put:                                                                                                   // 256\n          //   get:                                                                                                   // 257\n          //   delete:                                                                                                // 258\n          //   head:                                                                                                  // 259\n          // }                                                                                                        // 260\n                                                                                                                      // 261\n          /*                                                                                                          // 262\n          We conform to the object format:                                                                            // 263\n          {                                                                                                           // 264\n            auth:                                                                                                     // 265\n            post:                                                                                                     // 266\n            put:                                                                                                      // 267\n            get:                                                                                                      // 268\n            delete:                                                                                                   // 269\n            head:                                                                                                     // 270\n          }                                                                                                           // 271\n          This way we have a uniform reference                                                                        // 272\n          */                                                                                                          // 273\n                                                                                                                      // 274\n          var uniObj = {};                                                                                            // 275\n          if (typeof func === 'function') {                                                                           // 276\n            uniObj = {                                                                                                // 277\n              'auth': _methodHTTP.getUserId,                                                                          // 278\n              'stream': false,                                                                                        // 279\n              'POST': func,                                                                                           // 280\n              'PUT': func,                                                                                            // 281\n              'GET': func,                                                                                            // 282\n              'DELETE': func,                                                                                         // 283\n              'HEAD': func,                                                                                           // 284\n              'OPTIONS': _methodHTTP.defaultOptionsHandler                                                            // 285\n            };                                                                                                        // 286\n          } else {                                                                                                    // 287\n            uniObj = {                                                                                                // 288\n              'stream': func.stream || false,                                                                         // 289\n              'auth': func.auth || _methodHTTP.getUserId,                                                             // 290\n              'POST': func.post || func.method,                                                                       // 291\n              'PUT': func.put || func.method,                                                                         // 292\n              'GET': func.get || func.method,                                                                         // 293\n              'DELETE': func.delete || func.method,                                                                   // 294\n              'HEAD': func.head || func.get || func.method,                                                           // 295\n              'OPTIONS': func.options || _methodHTTP.defaultOptionsHandler                                            // 296\n            };                                                                                                        // 297\n          }                                                                                                           // 298\n                                                                                                                      // 299\n          // Registre the method                                                                                      // 300\n          _methodHTTP.methodHandlers[method.name] = uniObj; // func;                                                  // 301\n                                                                                                                      // 302\n        }                                                                                                             // 303\n      // } else {                                                                                                     // 304\n      //   // We do require a function as a function to execute later                                                 // 305\n      //   throw new Error('HTTP.methods failed: ' + name + ' is not a function');                                    // 306\n      // }                                                                                                            // 307\n    } else {                                                                                                          // 308\n      // We have to follow the naming spec defined in nameFollowsConventions                                          // 309\n      throw new Error('HTTP.method \"' + name + '\" invalid naming of method');                                         // 310\n    }                                                                                                                 // 311\n  });                                                                                                                 // 312\n};                                                                                                                    // 313\n                                                                                                                      // 314\nvar sendError = function(res, code, message) {                                                                        // 315\n  if (code) {                                                                                                         // 316\n    res.writeHead(code);                                                                                              // 317\n  } else {                                                                                                            // 318\n    res.writeHead(500);                                                                                               // 319\n  }                                                                                                                   // 320\n  res.end(message);                                                                                                   // 321\n};                                                                                                                    // 322\n                                                                                                                      // 323\n// This handler collects the header data into either an object (if json) or the                                       // 324\n// raw data. The data is passed to the callback                                                                       // 325\nvar requestHandler = function(req, res, callback) {                                                                   // 326\n  if (typeof callback !== 'function') {                                                                               // 327\n    return null;                                                                                                      // 328\n  }                                                                                                                   // 329\n                                                                                                                      // 330\n  // Container for buffers and a sum of the length                                                                    // 331\n  var bufferData = [], dataLen = 0;                                                                                   // 332\n                                                                                                                      // 333\n  // Extract the body                                                                                                 // 334\n  req.on('data', function(data) {                                                                                     // 335\n    bufferData.push(data);                                                                                            // 336\n    dataLen += data.length;                                                                                           // 337\n                                                                                                                      // 338\n    // We have to check the data length in order to spare the server                                                  // 339\n    if (dataLen > HTTP.methodsMaxDataLength) {                                                                        // 340\n      dataLen = 0;                                                                                                    // 341\n      bufferData = [];                                                                                                // 342\n      // Flood attack or faulty client                                                                                // 343\n      sendError(res, 413, 'Flood attack or faulty client');                                                           // 344\n      req.connection.destroy();                                                                                       // 345\n    }                                                                                                                 // 346\n  });                                                                                                                 // 347\n                                                                                                                      // 348\n  // When message is ready to be passed on                                                                            // 349\n  req.on('end', function() {                                                                                          // 350\n    if (res.finished) {                                                                                               // 351\n      return;                                                                                                         // 352\n    }                                                                                                                 // 353\n                                                                                                                      // 354\n    // Allow the result to be undefined if so                                                                         // 355\n    var result;                                                                                                       // 356\n                                                                                                                      // 357\n    // If data found the work it - either buffer or json                                                              // 358\n    if (dataLen > 0) {                                                                                                // 359\n      result = new Buffer(dataLen);                                                                                   // 360\n      // Merge the chunks into one buffer                                                                             // 361\n      for (var i = 0, ln = bufferData.length, pos = 0; i < ln; i++) {                                                 // 362\n        bufferData[i].copy(result, pos);                                                                              // 363\n        pos += bufferData[i].length;                                                                                  // 364\n        delete bufferData[i];                                                                                         // 365\n      }                                                                                                               // 366\n      // Check if we could be dealing with json                                                                       // 367\n      if (result[0] == 0x7b && result[1] === 0x22) {                                                                  // 368\n        try {                                                                                                         // 369\n          // Convert the body into json and extract the data object                                                   // 370\n          result = EJSON.parse(result.toString());                                                                    // 371\n        } catch(err) {                                                                                                // 372\n          // Could not parse so we return the raw data                                                                // 373\n        }                                                                                                             // 374\n      }                                                                                                               // 375\n    } // Else result will be undefined                                                                                // 376\n                                                                                                                      // 377\n    try {                                                                                                             // 378\n      callback(result);                                                                                               // 379\n    } catch(err) {                                                                                                    // 380\n      sendError(res, 500, 'Error in requestHandler callback, Error: ' + (err.stack || err.message) );                 // 381\n    }                                                                                                                 // 382\n  });                                                                                                                 // 383\n                                                                                                                      // 384\n};                                                                                                                    // 385\n                                                                                                                      // 386\n// This is the simplest handler - it simply passes req stream as data to the                                          // 387\n// method                                                                                                             // 388\nvar streamHandler = function(req, res, callback) {                                                                    // 389\n  try {                                                                                                               // 390\n    callback();                                                                                                       // 391\n  } catch(err) {                                                                                                      // 392\n    sendError(res, 500, 'Error in requestHandler callback, Error: ' + (err.stack || err.message) );                   // 393\n  }                                                                                                                   // 394\n};                                                                                                                    // 395\n                                                                                                                      // 396\n/*                                                                                                                    // 397\n  Allow file uploads in cordova cfs                                                                                   // 398\n*/                                                                                                                    // 399\nvar setCordovaHeaders = function(res) {                                                                               // 400\n  res.setHeader(\"Access-Control-Allow-Origin\", \"http://meteor.local\");                                                // 401\n  res.setHeader(\"Access-Control-Allow-Methods\", \"PUT\");                                                               // 402\n  res.setHeader(\"Access-Control-Allow-Headers\", \"Content-Type\");                                                      // 403\n};                                                                                                                    // 404\n                                                                                                                      // 405\n// Handle the actual connection                                                                                       // 406\nWebApp.connectHandlers.use(function(req, res, next) {                                                                 // 407\n                                                                                                                      // 408\n  // Check to se if this is a http method call                                                                        // 409\n  var method = _methodHTTP.getMethod(req._parsedUrl.pathname);                                                        // 410\n                                                                                                                      // 411\n  // If method is null then it wasn't and we pass the request along                                                   // 412\n  if (method === null) {                                                                                              // 413\n    return next();                                                                                                    // 414\n  }                                                                                                                   // 415\n                                                                                                                      // 416\n  var dataHandle = (method.handle && method.handle.stream)?streamHandler:requestHandler;                              // 417\n                                                                                                                      // 418\n  dataHandle(req, res, function(data) {                                                                               // 419\n    // If methodsHandler not found or somehow the methodshandler is not a                                             // 420\n    // function then return a 404                                                                                     // 421\n    if (typeof method.handle === 'undefined') {                                                                       // 422\n      sendError(res, 404, 'Error HTTP method handler \"' + method.name + '\" is not found');                            // 423\n      return;                                                                                                         // 424\n    }                                                                                                                 // 425\n                                                                                                                      // 426\n    // Set CORS headers for Meteor Cordova clients                                                                    // 427\n    setCordovaHeaders(res);                                                                                           // 428\n                                                                                                                      // 429\n    // Set fiber scope                                                                                                // 430\n    var fiberScope = {                                                                                                // 431\n      // Pointers to Request / Response                                                                               // 432\n      req: req,                                                                                                       // 433\n      res: res,                                                                                                       // 434\n      // Request / Response helpers                                                                                   // 435\n      statusCode: 200,                                                                                                // 436\n      method: req.method,                                                                                             // 437\n      // Headers for response                                                                                         // 438\n      headers: {                                                                                                      // 439\n        'Content-Type': 'text/html'  // Set default type                                                              // 440\n      },                                                                                                              // 441\n      // Arguments                                                                                                    // 442\n      data: data,                                                                                                     // 443\n      query: req.query,                                                                                               // 444\n      params: method.params,                                                                                          // 445\n      // Method reference                                                                                             // 446\n      reference: method.name,                                                                                         // 447\n      methodObject: method.handle,                                                                                    // 448\n      _streamsWaiting: 0                                                                                              // 449\n    };                                                                                                                // 450\n                                                                                                                      // 451\n    // Helper functions this scope                                                                                    // 452\n    Fiber = Npm.require('fibers');                                                                                    // 453\n    runServerMethod = Fiber(function(self) {                                                                          // 454\n      var result, resultBuffer;                                                                                       // 455\n                                                                                                                      // 456\n      // We fetch methods data from methodsHandler, the handler uses the this.addItem()                               // 457\n      // function to populate the methods, this way we have better check control and                                  // 458\n      // better error handling + messages                                                                             // 459\n                                                                                                                      // 460\n      // The scope for the user methodObject callbacks                                                                // 461\n      var thisScope = {                                                                                               // 462\n        // The user whos id and token was used to run this method, if set/found                                       // 463\n        userId: null,                                                                                                 // 464\n        // The id of the data                                                                                         // 465\n        _id: null,                                                                                                    // 466\n        // Set the query params ?token=1&id=2 -> { token: 1, id: 2 }                                                  // 467\n        query: self.query,                                                                                            // 468\n        // Set params /foo/:name/test/:id -> { name: '', id: '' }                                                     // 469\n        params: self.params,                                                                                          // 470\n        // Method GET, PUT, POST, DELETE, HEAD                                                                        // 471\n        method: self.method,                                                                                          // 472\n        // User agent                                                                                                 // 473\n        userAgent: req.headers['user-agent'],                                                                         // 474\n        // All request headers                                                                                        // 475\n        requestHeaders: req.headers,                                                                                  // 476\n        // Add the request object it self                                                                             // 477\n        request: req,                                                                                                 // 478\n        // Set the userId                                                                                             // 479\n        setUserId: function(id) {                                                                                     // 480\n          this.userId = id;                                                                                           // 481\n        },                                                                                                            // 482\n        // We dont simulate / run this on the client at the moment                                                    // 483\n        isSimulation: false,                                                                                          // 484\n        // Run the next method in a new fiber - This is default at the moment                                         // 485\n        unblock: function() {},                                                                                       // 486\n        // Set the content type in header, defaults to text/html?                                                     // 487\n        setContentType: function(type) {                                                                              // 488\n          self.headers['Content-Type'] = type;                                                                        // 489\n        },                                                                                                            // 490\n        setStatusCode: function(code) {                                                                               // 491\n          self.statusCode = code;                                                                                     // 492\n        },                                                                                                            // 493\n        addHeader: function(key, value) {                                                                             // 494\n          self.headers[key] = value;                                                                                  // 495\n        },                                                                                                            // 496\n        createReadStream: function() {                                                                                // 497\n          self._streamsWaiting++;                                                                                     // 498\n          return req;                                                                                                 // 499\n        },                                                                                                            // 500\n        createWriteStream: function() {                                                                               // 501\n          self._streamsWaiting++;                                                                                     // 502\n          return res;                                                                                                 // 503\n        },                                                                                                            // 504\n        Error: function(err) {                                                                                        // 505\n                                                                                                                      // 506\n          if (err instanceof Meteor.Error) {                                                                          // 507\n            // Return controlled error                                                                                // 508\n            sendError(res, err.error, err.message);                                                                   // 509\n          } else if (err instanceof Error) {                                                                          // 510\n            // Return error trace - this is not intented                                                              // 511\n            sendError(res, 503, 'Error in method \"' + self.reference + '\", Error: ' + (err.stack || err.message) );   // 512\n          } else {                                                                                                    // 513\n            sendError(res, 503, 'Error in method \"' + self.reference + '\"' );                                         // 514\n          }                                                                                                           // 515\n                                                                                                                      // 516\n        },                                                                                                            // 517\n        // getData: function() {                                                                                      // 518\n        //   // XXX: TODO if we could run the request handler stuff eg.                                               // 519\n        //   // in here in a fiber sync it could be cool - and the user did                                           // 520\n        //   // not have to specify the stream=true flag?                                                             // 521\n        // }                                                                                                          // 522\n      };                                                                                                              // 523\n                                                                                                                      // 524\n      // This function sends the final response. Depending on the                                                     // 525\n      // timing of the streaming, we might have to wait for all                                                       // 526\n      // streaming to end, or we might have to wait for this function                                                 // 527\n      // to finish after streaming ends. The checks in this function                                                  // 528\n      // and the fact that we call it twice ensure that we will always                                                // 529\n      // send the response if we haven't sent an error response, but                                                  // 530\n      // we will not send it too early.                                                                               // 531\n      function sendResponseIfDone() {                                                                                 // 532\n        res.statusCode = self.statusCode;                                                                             // 533\n        // If no streams are waiting                                                                                  // 534\n        if (self._streamsWaiting === 0 &&                                                                             // 535\n            (self.statusCode === 200 || self.statusCode === 206) &&                                                   // 536\n            self.done &&                                                                                              // 537\n            !self._responseSent &&                                                                                    // 538\n            !res.finished) {                                                                                          // 539\n          self._responseSent = true;                                                                                  // 540\n          res.end(resultBuffer);                                                                                      // 541\n        }                                                                                                             // 542\n      }                                                                                                               // 543\n                                                                                                                      // 544\n      var methodCall = self.methodObject[self.method];                                                                // 545\n                                                                                                                      // 546\n      // If the method call is set for the POST/PUT/GET or DELETE then run the                                        // 547\n      // respective methodCall if its a function                                                                      // 548\n      if (typeof methodCall === 'function') {                                                                         // 549\n                                                                                                                      // 550\n        // Get the userId - This is either set as a method specific handler and                                       // 551\n        // will allways default back to the builtin getUserId handler                                                 // 552\n        try {                                                                                                         // 553\n          // Try to set the userId                                                                                    // 554\n          thisScope.userId = self.methodObject.auth.apply(self);                                                      // 555\n        } catch(err) {                                                                                                // 556\n          sendError(res, err.error, (err.message || err.stack));                                                      // 557\n          return;                                                                                                     // 558\n        }                                                                                                             // 559\n                                                                                                                      // 560\n        // This must be attached before there's any chance of `createReadStream`                                      // 561\n        // or `createWriteStream` being called, which means before we do                                              // 562\n        // `methodCall.apply` below.                                                                                  // 563\n        req.on('end', function() {                                                                                    // 564\n          self._streamsWaiting--;                                                                                     // 565\n          sendResponseIfDone();                                                                                       // 566\n        });                                                                                                           // 567\n                                                                                                                      // 568\n        // Get the result of the methodCall                                                                           // 569\n        try {                                                                                                         // 570\n          if (self.method === 'OPTIONS') {                                                                            // 571\n            result = methodCall.apply(thisScope, [self.methodObject]) || '';                                          // 572\n          } else {                                                                                                    // 573\n            result = methodCall.apply(thisScope, [self.data]) || '';                                                  // 574\n          }                                                                                                           // 575\n        } catch(err) {                                                                                                // 576\n          if (err instanceof Meteor.Error) {                                                                          // 577\n            // Return controlled error                                                                                // 578\n            sendError(res, err.error, err.message);                                                                   // 579\n          } else {                                                                                                    // 580\n            // Return error trace - this is not intented                                                              // 581\n            sendError(res, 503, 'Error in method \"' + self.reference + '\", Error: ' + (err.stack || err.message) );   // 582\n          }                                                                                                           // 583\n          return;                                                                                                     // 584\n        }                                                                                                             // 585\n                                                                                                                      // 586\n        // Set headers                                                                                                // 587\n        _.each(self.headers, function(value, key) {                                                                   // 588\n          // If value is defined then set the header, this allows for unsetting                                       // 589\n          // the default content-type                                                                                 // 590\n          if (typeof value !== 'undefined')                                                                           // 591\n            res.setHeader(key, value);                                                                                // 592\n        });                                                                                                           // 593\n                                                                                                                      // 594\n        // If OK / 200 then Return the result                                                                         // 595\n        if (self.statusCode === 200 || self.statusCode === 206) {                                                     // 596\n                                                                                                                      // 597\n          if (self.method !== \"HEAD\") {                                                                               // 598\n            // Return result                                                                                          // 599\n            if (typeof result === 'string') {                                                                         // 600\n              resultBuffer = new Buffer(result);                                                                      // 601\n            } else {                                                                                                  // 602\n              resultBuffer = new Buffer(JSON.stringify(result));                                                      // 603\n            }                                                                                                         // 604\n                                                                                                                      // 605\n            // Check if user wants to overwrite content length for some reason?                                       // 606\n            if (typeof self.headers['Content-Length'] === 'undefined') {                                              // 607\n              self.headers['Content-Length'] = resultBuffer.length;                                                   // 608\n            }                                                                                                         // 609\n                                                                                                                      // 610\n          }                                                                                                           // 611\n                                                                                                                      // 612\n          self.done = true;                                                                                           // 613\n          sendResponseIfDone();                                                                                       // 614\n                                                                                                                      // 615\n        } else {                                                                                                      // 616\n          // Allow user to alter the status code and send a message                                                   // 617\n          sendError(res, self.statusCode, result);                                                                    // 618\n        }                                                                                                             // 619\n                                                                                                                      // 620\n      } else {                                                                                                        // 621\n        sendError(res, 404, 'Service not found');                                                                     // 622\n      }                                                                                                               // 623\n                                                                                                                      // 624\n                                                                                                                      // 625\n    });                                                                                                               // 626\n    // Run http methods handler                                                                                       // 627\n    try {                                                                                                             // 628\n      runServerMethod.run(fiberScope);                                                                                // 629\n    } catch(err) {                                                                                                    // 630\n      sendError(res, 500, 'Error running the server http method handler, Error: ' + (err.stack || err.message));      // 631\n    }                                                                                                                 // 632\n                                                                                                                      // 633\n  }); // EO Request handler                                                                                           // 634\n                                                                                                                      // 635\n                                                                                                                      // 636\n});                                                                                                                   // 637\n                                                                                                                      // 638\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}