{"version":3,"sources":["meteor://ðŸ’»app/packages/modules/.npm/package/node_modules/install/install.js","meteor://ðŸ’»app/packages/modules/modules.js"],"names":[],"mappingsqF;;;;;;;;;;;;;;;;;;ACnUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oF","file":"/packages/modules.js","sourcesContent":["makeInstaller = function (options) {\n  options = options || {};\n\n  // These file extensions will be appended to required module identifiers\n  // if they do not exactly match an installed module.\n  var extensions = options.extensions || [\".js\", \".json\"];\n\n  // This constructor will be used to instantiate the module objects\n  // passed to module factory functions (i.e. the third argument after\n  // require and exports).\n  var Module = options.Module || function Module(id, parent) {\n    this.id = id;\n    this.parent = parent;\n  };\n\n  // If defined, the options.onInstall function will be called any time\n  // new modules are installed.\n  var onInstall = options.onInstall;\n\n  // If defined, the options.fallback function will be called when no\n  // installed module is found for a required module identifier. Often\n  // options.fallback will be implemented in terms of the native Node\n  // require function, which has the ability to load binary modules.\n  var fallback = options.fallback;\n\n  // Whenever a new require function is created in the makeRequire\n  // function below, any methods contained by options.requireMethods will\n  // be bound and attached as methods to that function object. This option\n  // is intended to support user-defined require.* extensions like\n  // require.ensure and require.promise.\n  var requireMethods = options.requireMethods;\n\n  // Sentinel returned by fileEvaluate when module resolution fails.\n  var MISSING = {};\n\n  // Nothing special about MISSING.hasOwnProperty, except that it's fewer\n  // characters than Object.prototype.hasOwnProperty after minification.\n  var hasOwn = MISSING.hasOwnProperty;\n\n  // The file object representing the root directory of the installed\n  // module tree.\n  var root = new File({});\n\n  // Merges the given tree of directories and module factory functions\n  // into the tree of installed modules and returns a require function\n  // that behaves as if called from a module in the root directory.\n  function install(tree) {\n    if (isObject(tree)) {\n      fileMergeContents(root, tree);\n      if (isFunction(onInstall)) {\n        onInstall(root.r);\n      }\n    }\n    return root.r;\n  }\n\n  function getOwn(obj, key) {\n    return hasOwn.call(obj, key) && obj[key];\n  }\n\n  function isObject(value) {\n    return value && typeof value === \"object\";\n  }\n\n  function isFunction(value) {\n    return typeof value === \"function\";\n  }\n\n  function isString(value) {\n    return typeof value === \"string\";\n  }\n\n  function makeRequire(file) {\n    function require(id) {\n      var result = fileEvaluate(fileResolve(file, id));\n      if (result === MISSING) {\n        var error = new Error(\"Cannot find module '\" + id + \"'\");\n        if (isFunction(fallback)) {\n          result = fallback(\n            id, // The missing module identifier.\n            file.m.id, // The path of the enclosing directory.\n            error // The error we would have thrown.\n          );\n        } else throw error;\n      }\n      return result;\n    }\n\n    // A function that immediately returns true iff all the transitive\n    // dependencies of the module identified by id have been installed.\n    // This function can be used with options.onInstall to implement\n    // asynchronous module loading APIs like require.ensure.\n    require.ready = function (id) {\n      return fileReady(fileResolve(file, id));\n    };\n\n    if (requireMethods) {\n      Object.keys(requireMethods).forEach(function (name) {\n        if (isFunction(requireMethods[name])) {\n          require[name] = requireMethods[name].bind(require);\n        }\n      });\n    }\n\n    return require;\n  }\n\n  // File objects represent either directories or modules that have been\n  // installed. When a `File` respresents a directory, its `.c` (contents)\n  // property is an object containing the names of the files (or\n  // directories) that it contains. When a `File` represents a module, its\n  // `.c` property is a function that can be invoked with the appropriate\n  // `(require, exports, module)` arguments to evaluate the module. The\n  // `.p` (parent) property of a File is either a directory `File` or\n  // `null`. Note that a child may claim another `File` as its parent even\n  // if the parent does not have an entry for that child in its `.c`\n  // object.  This is important for implementing anonymous files, and\n  // preventing child modules from using `../relative/identifier` syntax\n  // to examine unrelated modules.\n  function File(contents, /*optional:*/ parent, name) {\n    var file = this;\n\n    // Link to the parent file.\n    file.p = parent = parent || null;\n\n    // The module object for this File, which will eventually boast an\n    // .exports property when/if the file is evaluated.\n    file.m = new Module(\n      // If this file was created with `name`, join it with `parent.m.id`\n      // to generate a module identifier.\n      name ? (parent && parent.m.id || \"\") + \"/\" + name : null,\n      parent && parent.m\n    );\n\n    // Queue for tracking required modules with unmet dependencies,\n    // inherited from the `parent`.\n    file.q = parent && parent.q;\n\n    // Each directory has its own bound version of the `require` function\n    // that can resolve relative identifiers. Non-directory Files inherit\n    // the require function of their parent directories, so we don't have\n    // to create a new require function every time we evaluate a module.\n    file.r = isObject(contents)\n      ? makeRequire(file)\n      : parent && parent.r;\n\n    // Set the initial value of `file.c` (the \"contents\" of the File).\n    fileMergeContents(file, contents);\n\n    // When the file is a directory, `file.ready` is an object mapping\n    // module identifiers to boolean ready statuses. This information can\n    // be shared by all files in the directory, because module resolution\n    // always has the same results for all files in a given directory.\n    file.ready = fileIsDirectory(file) && {};\n  }\n\n  // A file is ready if all of its dependencies are installed and ready.\n  function fileReady(file) {\n    var result = !! file;\n    var factory = file && file.c;\n    var deps = isFunction(factory) && factory.d;\n    if (deps && ! getOwn(factory, \"seen\")) {\n      factory.seen = true;\n      var parentReadyCache = file.p.ready;\n      result = deps.every(function (dep) {\n        // By storing the results of these lookups in `parentReadyCache`,\n        // we benefit when any other file in the same directory resolves\n        // the same identifier.\n        return parentReadyCache[dep] =\n          parentReadyCache[dep] ||\n          fileReady(fileResolve(file.p, dep));\n      });\n      factory.seen = false;\n    }\n    return result;\n  }\n\n  function fileEvaluate(file) {\n    var factory = file && file.c;\n    if (isFunction(factory)) {\n      var module = file.m;\n      if (! hasOwn.call(module, \"exports\")) {\n        factory(file.r, module.exports = {}, module);\n      }\n      return module.exports;\n    }\n    return MISSING;\n  }\n\n  function fileIsDirectory(file) {\n    return isObject(file.c);\n  }\n\n  function fileMergeContents(file, contents) {\n    // If contents is an array of strings and functions, return the last\n    // function with a `.d` property containing all the strings.\n    if (Array.isArray(contents)) {\n      var deps = [];\n\n      contents.forEach(function (item) {\n        if (isString(item)) {\n          deps.push(item);\n        } else if (isFunction(item)) {\n          contents = item;\n        }\n      });\n\n      if (isFunction(contents)) {\n        contents.d = deps;\n      } else {\n        // If the array did not contain a function, merge nothing.\n        contents = null;\n      }\n\n    } else if (isFunction(contents)) {\n      // If contents is already a function, make sure it has `.d`.\n      contents.d = contents.d || [];\n\n    } else if (! isObject(contents)) {\n      // If contents is neither an array nor a function nor an object,\n      // just give up and merge nothing.\n      contents = null;\n    }\n\n    if (contents) {\n      var fileContents = file.c = file.c || (\n        isFunction(contents) ? contents : {}\n      );\n\n      if (isObject(contents) && fileIsDirectory(file)) {\n        Object.keys(contents).forEach(function (key) {\n          var child = getOwn(fileContents, key);\n          if (child) {\n            fileMergeContents(child, contents[key]);\n          } else {\n            fileContents[key] = new File(contents[key], file, key);\n          }\n        });\n      }\n    }\n  }\n\n  function fileAppendIdPart(file, part, isLastPart) {\n    // Always append relative to a directory.\n    while (file && ! fileIsDirectory(file)) {\n      file = file.p;\n    }\n\n    if (! file || ! part || part === \".\") {\n      return file;\n    }\n\n    if (part === \"..\") {\n      return file.p;\n    }\n\n    var exactChild = getOwn(file.c, part);\n\n    // Only consider multiple file extensions if this part is the last\n    // part of a module identifier and not equal to `.` or `..`, and there\n    // was no exact match or the exact match was a directory.\n    if (isLastPart && (! exactChild || fileIsDirectory(exactChild))) {\n      for (var e = 0; e < extensions.length; ++e) {\n        var child = getOwn(file.c, part + extensions[e]);\n        if (child) {\n          return child;\n        }\n      }\n    }\n\n    return exactChild;\n  }\n\n  function fileAppendId(file, id) {\n    var parts = id.split(\"/\");\n    // Use `Array.prototype.every` to terminate iteration early if\n    // `fileAppendIdPart` returns a falsy value.\n    parts.every(function (part, i) {\n      return file = fileAppendIdPart(file, part, i === parts.length - 1);\n    });\n    return file;\n  }\n\n  function fileResolve(file, id) {\n    file =\n      // Absolute module identifiers (i.e. those that begin with a `/`\n      // character) are interpreted relative to the root directory, which\n      // is a slight deviation from Node, which has access to the entire\n      // file system.\n      id.charAt(0) === \"/\" ? fileAppendId(root, id) :\n      // Relative module identifiers are interpreted relative to the\n      // current file, naturally.\n      id.charAt(0) === \".\" ? fileAppendId(file, id) :\n      // Top-level module identifiers are interpreted as referring to\n      // packages in `node_modules` directories.\n      nodeModulesLookup(file, id);\n\n    // If the identifier resolves to a directory, we use the same logic as\n    // Node to find an `index.js` or `package.json` file to evaluate.\n    while (file && fileIsDirectory(file)) {\n      // If `package.json` does not exist, `fileEvaluate` will return the\n      // `MISSING` object, which has no `.main` property.\n      var pkg = fileEvaluate(fileAppendIdPart(file, \"package.json\"));\n      file = pkg && isString(pkg.main) &&\n        fileAppendId(file, pkg.main) || // Might resolve to another directory!\n        fileAppendIdPart(file, \"index.js\");\n    }\n\n    return file;\n  };\n\n  function nodeModulesLookup(file, id) {\n    return fileIsDirectory(file) &&\n      fileAppendId(file, \"node_modules/\" + id) ||\n      (file.p && nodeModulesLookup(file.p, id));\n  }\n\n  return install;\n};\n\nif (typeof exports === \"object\") {\n  exports.makeInstaller = makeInstaller;\n}\n","var options = {};\nvar hasOwn = options.hasOwnProperty;\n\n// RegExp matching strings that don't start with a `.` or a `/`.\nvar topLevelIdPattern = /^[^./]/;\n\n// This function will be called whenever a module identifier that hasn't\n// been installed is required. For backwards compatibility, and so that we\n// can require binary dependencies on the server, we implement the\n// fallback in terms of Npm.require.\noptions.fallback = function (id, dir, error) {\n  // For simplicity, we honor only top-level module identifiers here.\n  // We could try to honor relative and absolute module identifiers by\n  // somehow combining `id` with `dir`, but we'd have to be really careful\n  // that the resulting modules were located in a known directory (not\n  // some arbitrary location on the file system), and we only really need\n  // the fallback for dependencies installed in node_modules directories.\n  if (topLevelIdPattern.test(id)) {\n    var parts = id.split(\"/\");\n    if (parts.length === 2 &&\n        parts[0] === \"meteor\" &&\n        hasOwn.call(Package, parts[1])) {\n      return Package[parts[1]];\n    }\n\n    if (typeof Npm === \"object\" &&\n        typeof Npm.require === \"function\") {\n      return Npm.require(id);\n    }\n  }\n\n  throw error;\n};\n\nmeteorInstall = makeInstaller(options);\n"]}