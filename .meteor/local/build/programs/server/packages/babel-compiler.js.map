{"version":3,"sources":["meteor://ðŸ’»app/packages/babel-compiler/babel.js","meteor://ðŸ’»app/packages/babel-compiler/babel-compiler.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+F;;;;;;;;;;;;;;;;;;ACzEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+F","file":"/packages/babel-compiler.js","sourcesContent":["var meteorBabel = Npm.require('meteor-babel');\n\nfunction validateExtraFeatures(extraFeatures) {\n  if (extraFeatures) {\n    check(extraFeatures, {\n      // Modify options to enable ES2015 module syntax.\n      modules: Match.Optional(Boolean),\n      // Modify options to enable async/await syntax powered by Fibers.\n      meteorAsyncAwait: Match.Optional(Boolean),\n      // Modify options to enable async/await syntax powered by Promises and Regenerator.\n      asyncAwait: Match.Optional(Boolean),\n      // Modify options to enable React/JSX syntax.\n      react: Match.Optional(Boolean),\n      // Improve compatibility in older versions of Internet Explorer.\n      jscript: Match.Optional(Boolean)\n    });\n  }\n}\n\n/**\n * Returns a new object containing default options appropriate for\n */\nfunction getDefaultOptions(extraFeatures) {\n  validateExtraFeatures(extraFeatures);\n\n  // See https://github.com/meteor/babel/blob/master/options.js for more\n  // information about what the default options are.\n  var options = meteorBabel.getDefaultOptions(extraFeatures);\n\n  // The sourceMap option should probably be removed from the default\n  // options returned by meteorBabel.getDefaultOptions.\n  delete options.sourceMap;\n\n  return options;\n}\n\nBabel = {\n  getDefaultOptions: getDefaultOptions,\n\n  validateExtraFeatures: validateExtraFeatures,\n\n  compile: function (source, options) {\n    options = options || getDefaultOptions();\n    return meteorBabel.compile(source, options);\n  },\n\n  // Provided for backwards compatibility; prefer Babel.compile.\n  transformMeteor: function (source, extraOptions) {\n    var options = getDefaultOptions();\n\n    if (extraOptions) {\n      if (extraOptions.extraWhitelist) {\n        options.whitelist.push.apply(\n          options.whitelist,\n          extraOptions.extraWhitelist\n        );\n      }\n\n      for (var key in extraOptions) {\n        if (key !== \"extraWhitelist\" &&\n            hasOwnProperty.call(extraOptions, key)) {\n          options[key] = extraOptions[key];\n        }\n      }\n    }\n\n    return meteorBabel.compile(source, options);\n  },\n\n  setCacheDir: function (cacheDir) {\n    meteorBabel.setCacheDir(cacheDir);\n  }\n};\n","/**\n * A compiler that can be instantiated with features and used inside\n * Plugin.registerCompiler\n * @param {Object} extraFeatures The same object that getDefaultOptions takes\n */\nBabelCompiler = function BabelCompiler(extraFeatures) {\n  Babel.validateExtraFeatures(extraFeatures);\n  this.extraFeatures = extraFeatures;\n};\n\nvar BCp = BabelCompiler.prototype;\nvar excludedFileExtensionPattern = /\\.es5\\.js$/i;\n\nBCp.processFilesForTarget = function (inputFiles) {\n  var self = this;\n\n  inputFiles.forEach(function (inputFile) {\n    var source = inputFile.getContentsAsString();\n    var packageName = inputFile.getPackageName();\n    var inputFilePath = inputFile.getPathInPackage();\n    var outputFilePath = inputFilePath;\n    var fileOptions = inputFile.getFileOptions();\n    var toBeAdded = {\n      sourcePath: inputFilePath,\n      path: outputFilePath,\n      data: source,\n      hash: inputFile.getSourceHash(),\n      sourceMap: null,\n      bare: !! fileOptions.bare\n    };\n\n    // If you need to exclude a specific file within a package from Babel\n    // compilation, pass the { transpile: false } options to api.addFiles\n    // when you add that file.\n    if (fileOptions.transpile !== false &&\n        // If you need to exclude a specific file within an app from Babel\n        // compilation, give it the following file extension: .es5.js\n        ! excludedFileExtensionPattern.test(inputFilePath)) {\n\n      var targetCouldBeInternetExplorer8 =\n        inputFile.getArch() === \"web.browser\";\n\n      self.extraFeatures = self.extraFeatures || {};\n      if (! self.extraFeatures.hasOwnProperty(\"jscript\")) {\n        // Perform some additional transformations to improve\n        // compatibility in older browsers (e.g. wrapping named function\n        // expressions, per http://kiro.me/blog/nfe_dilemma.html).\n        self.extraFeatures.jscript = targetCouldBeInternetExplorer8;\n      }\n\n      var babelOptions = Babel.getDefaultOptions(self.extraFeatures);\n\n      babelOptions.sourceMap = true;\n      babelOptions.filename =\n      babelOptions.sourceFileName = packageName\n        ? \"/packages/\" + packageName + \"/\" + inputFilePath\n        : \"/\" + inputFilePath;\n\n      babelOptions.sourceMapName = babelOptions.filename + \".map\";\n\n      try {\n        var result = Babel.compile(source, babelOptions);\n      } catch (e) {\n        if (e.loc) {\n          inputFile.error({\n            message: e.message,\n            line: e.loc.line,\n            column: e.loc.column,\n          });\n\n          return;\n        }\n\n        throw e;\n      }\n\n      toBeAdded.data = result.code;\n      toBeAdded.hash = result.hash;\n      toBeAdded.sourceMap = result.map;\n    }\n\n    inputFile.addJavaScript(toBeAdded);\n  });\n};\n\nBCp.setDiskCacheDirectory = function (cacheDir) {\n  Babel.setCacheDir(cacheDir);\n};\n"]}