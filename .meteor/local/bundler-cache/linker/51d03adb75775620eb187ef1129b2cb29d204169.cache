[{"type":"js","data":"(function () {\n\n/* Imports */\nvar process = Package.meteor.process;\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar Log = Package.logging.Log;\nvar _ = Package.underscore._;\nvar RoutePolicy = Package.routepolicy.RoutePolicy;\nvar Boilerplate = Package['boilerplate-generator'].Boilerplate;\nvar WebAppHashing = Package['webapp-hashing'].WebAppHashing;\n\n/* Package-scope variables */\nvar WebApp, WebAppInternals, main;\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/webapp/webapp_server.js                                                                                  //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\n////////// Requires //////////                                                                                       // 1\n                                                                                                                     // 2\nvar fs = Npm.require(\"fs\");                                                                                          // 3\nvar http = Npm.require(\"http\");                                                                                      // 4\nvar os = Npm.require(\"os\");                                                                                          // 5\nvar path = Npm.require(\"path\");                                                                                      // 6\nvar url = Npm.require(\"url\");                                                                                        // 7\nvar crypto = Npm.require(\"crypto\");                                                                                  // 8\n                                                                                                                     // 9\nvar connect = Npm.require('connect');                                                                                // 10\nvar useragent = Npm.require('useragent');                                                                            // 11\nvar send = Npm.require('send');                                                                                      // 12\n                                                                                                                     // 13\nvar Future = Npm.require('fibers/future');                                                                           // 14\nvar Fiber = Npm.require('fibers');                                                                                   // 15\n                                                                                                                     // 16\nvar SHORT_SOCKET_TIMEOUT = 5*1000;                                                                                   // 17\nvar LONG_SOCKET_TIMEOUT = 120*1000;                                                                                  // 18\n                                                                                                                     // 19\nWebApp = {};                                                                                                         // 20\nWebAppInternals = {};                                                                                                // 21\n                                                                                                                     // 22\nWebAppInternals.NpmModules = {                                                                                       // 23\n  connect: {                                                                                                         // 24\n    version: Npm.require('connect/package.json').version,                                                            // 25\n    module: connect                                                                                                  // 26\n  }                                                                                                                  // 27\n};                                                                                                                   // 28\n                                                                                                                     // 29\nWebApp.defaultArch = 'web.browser';                                                                                  // 30\n                                                                                                                     // 31\n// XXX maps archs to manifests                                                                                       // 32\nWebApp.clientPrograms = {};                                                                                          // 33\n                                                                                                                     // 34\n// XXX maps archs to program path on filesystem                                                                      // 35\nvar archPath = {};                                                                                                   // 36\n                                                                                                                     // 37\nvar bundledJsCssUrlRewriteHook;                                                                                      // 38\n                                                                                                                     // 39\nvar sha1 = function (contents) {                                                                                     // 40\n  var hash = crypto.createHash('sha1');                                                                              // 41\n  hash.update(contents);                                                                                             // 42\n  return hash.digest('hex');                                                                                         // 43\n};                                                                                                                   // 44\n                                                                                                                     // 45\nvar readUtf8FileSync = function (filename) {                                                                         // 46\n  return Meteor.wrapAsync(fs.readFile)(filename, 'utf8');                                                            // 47\n};                                                                                                                   // 48\n                                                                                                                     // 49\n// #BrowserIdentification                                                                                            // 50\n//                                                                                                                   // 51\n// We have multiple places that want to identify the browser: the                                                    // 52\n// unsupported browser page, the appcache package, and, eventually                                                   // 53\n// delivering browser polyfills only as needed.                                                                      // 54\n//                                                                                                                   // 55\n// To avoid detecting the browser in multiple places ad-hoc, we create a                                             // 56\n// Meteor \"browser\" object. It uses but does not expose the npm                                                      // 57\n// useragent module (we could choose a different mechanism to identify                                               // 58\n// the browser in the future if we wanted to).  The browser object                                                   // 59\n// contains                                                                                                          // 60\n//                                                                                                                   // 61\n// * `name`: the name of the browser in camel case                                                                   // 62\n// * `major`, `minor`, `patch`: integers describing the browser version                                              // 63\n//                                                                                                                   // 64\n// Also here is an early version of a Meteor `request` object, intended                                              // 65\n// to be a high-level description of the request without exposing                                                    // 66\n// details of connect's low-level `req`.  Currently it contains:                                                     // 67\n//                                                                                                                   // 68\n// * `browser`: browser identification object described above                                                        // 69\n// * `url`: parsed url, including parsed query params                                                                // 70\n//                                                                                                                   // 71\n// As a temporary hack there is a `categorizeRequest` function on WebApp which                                       // 72\n// converts a connect `req` to a Meteor `request`. This can go away once smart                                       // 73\n// packages such as appcache are being passed a `request` object directly when                                       // 74\n// they serve content.                                                                                               // 75\n//                                                                                                                   // 76\n// This allows `request` to be used uniformly: it is passed to the html                                              // 77\n// attributes hook, and the appcache package can use it when deciding                                                // 78\n// whether to generate a 404 for the manifest.                                                                       // 79\n//                                                                                                                   // 80\n// Real routing / server side rendering will probably refactor this                                                  // 81\n// heavily.                                                                                                          // 82\n                                                                                                                     // 83\n                                                                                                                     // 84\n// e.g. \"Mobile Safari\" => \"mobileSafari\"                                                                            // 85\nvar camelCase = function (name) {                                                                                    // 86\n  var parts = name.split(' ');                                                                                       // 87\n  parts[0] = parts[0].toLowerCase();                                                                                 // 88\n  for (var i = 1;  i < parts.length;  ++i) {                                                                         // 89\n    parts[i] = parts[i].charAt(0).toUpperCase() + parts[i].substr(1);                                                // 90\n  }                                                                                                                  // 91\n  return parts.join('');                                                                                             // 92\n};                                                                                                                   // 93\n                                                                                                                     // 94\nvar identifyBrowser = function (userAgentString) {                                                                   // 95\n  var userAgent = useragent.lookup(userAgentString);                                                                 // 96\n  return {                                                                                                           // 97\n    name: camelCase(userAgent.family),                                                                               // 98\n    major: +userAgent.major,                                                                                         // 99\n    minor: +userAgent.minor,                                                                                         // 100\n    patch: +userAgent.patch                                                                                          // 101\n  };                                                                                                                 // 102\n};                                                                                                                   // 103\n                                                                                                                     // 104\n// XXX Refactor as part of implementing real routing.                                                                // 105\nWebAppInternals.identifyBrowser = identifyBrowser;                                                                   // 106\n                                                                                                                     // 107\nWebApp.categorizeRequest = function (req) {                                                                          // 108\n  return {                                                                                                           // 109\n    browser: identifyBrowser(req.headers['user-agent']),                                                             // 110\n    url: url.parse(req.url, true)                                                                                    // 111\n  };                                                                                                                 // 112\n};                                                                                                                   // 113\n                                                                                                                     // 114\n// HTML attribute hooks: functions to be called to determine any attributes to                                       // 115\n// be added to the '<html>' tag. Each function is passed a 'request' object (see                                     // 116\n// #BrowserIdentification) and should return null or object.                                                         // 117\nvar htmlAttributeHooks = [];                                                                                         // 118\nvar getHtmlAttributes = function (request) {                                                                         // 119\n  var combinedAttributes  = {};                                                                                      // 120\n  _.each(htmlAttributeHooks || [], function (hook) {                                                                 // 121\n    var attributes = hook(request);                                                                                  // 122\n    if (attributes === null)                                                                                         // 123\n      return;                                                                                                        // 124\n    if (typeof attributes !== 'object')                                                                              // 125\n      throw Error(\"HTML attribute hook must return null or object\");                                                 // 126\n    _.extend(combinedAttributes, attributes);                                                                        // 127\n  });                                                                                                                // 128\n  return combinedAttributes;                                                                                         // 129\n};                                                                                                                   // 130\nWebApp.addHtmlAttributeHook = function (hook) {                                                                      // 131\n  htmlAttributeHooks.push(hook);                                                                                     // 132\n};                                                                                                                   // 133\n                                                                                                                     // 134\n// Serve app HTML for this URL?                                                                                      // 135\nvar appUrl = function (url) {                                                                                        // 136\n  if (url === '/favicon.ico' || url === '/robots.txt')                                                               // 137\n    return false;                                                                                                    // 138\n                                                                                                                     // 139\n  // NOTE: app.manifest is not a web standard like favicon.ico and                                                   // 140\n  // robots.txt. It is a file name we have chosen to use for HTML5                                                   // 141\n  // appcache URLs. It is included here to prevent using an appcache                                                 // 142\n  // then removing it from poisoning an app permanently. Eventually,                                                 // 143\n  // once we have server side routing, this won't be needed as                                                       // 144\n  // unknown URLs with return a 404 automatically.                                                                   // 145\n  if (url === '/app.manifest')                                                                                       // 146\n    return false;                                                                                                    // 147\n                                                                                                                     // 148\n  // Avoid serving app HTML for declared routes such as /sockjs/.                                                    // 149\n  if (RoutePolicy.classify(url))                                                                                     // 150\n    return false;                                                                                                    // 151\n                                                                                                                     // 152\n  // we currently return app HTML on all URLs by default                                                             // 153\n  return true;                                                                                                       // 154\n};                                                                                                                   // 155\n                                                                                                                     // 156\n                                                                                                                     // 157\n// We need to calculate the client hash after all packages have loaded                                               // 158\n// to give them a chance to populate __meteor_runtime_config__.                                                      // 159\n//                                                                                                                   // 160\n// Calculating the hash during startup means that packages can only                                                  // 161\n// populate __meteor_runtime_config__ during load, not during startup.                                               // 162\n//                                                                                                                   // 163\n// Calculating instead it at the beginning of main after all startup                                                 // 164\n// hooks had run would allow packages to also populate                                                               // 165\n// __meteor_runtime_config__ during startup, but that's too late for                                                 // 166\n// autoupdate because it needs to have the client hash at startup to                                                 // 167\n// insert the auto update version itself into                                                                        // 168\n// __meteor_runtime_config__ to get it to the client.                                                                // 169\n//                                                                                                                   // 170\n// An alternative would be to give autoupdate a \"post-start,                                                         // 171\n// pre-listen\" hook to allow it to insert the auto update version at                                                 // 172\n// the right moment.                                                                                                 // 173\n                                                                                                                     // 174\nMeteor.startup(function () {                                                                                         // 175\n  var calculateClientHash = WebAppHashing.calculateClientHash;                                                       // 176\n  WebApp.clientHash = function (archName) {                                                                          // 177\n    archName = archName || WebApp.defaultArch;                                                                       // 178\n    return calculateClientHash(WebApp.clientPrograms[archName].manifest);                                            // 179\n  };                                                                                                                 // 180\n                                                                                                                     // 181\n  WebApp.calculateClientHashRefreshable = function (archName) {                                                      // 182\n    archName = archName || WebApp.defaultArch;                                                                       // 183\n    return calculateClientHash(WebApp.clientPrograms[archName].manifest,                                             // 184\n      function (name) {                                                                                              // 185\n        return name === \"css\";                                                                                       // 186\n      });                                                                                                            // 187\n  };                                                                                                                 // 188\n  WebApp.calculateClientHashNonRefreshable = function (archName) {                                                   // 189\n    archName = archName || WebApp.defaultArch;                                                                       // 190\n    return calculateClientHash(WebApp.clientPrograms[archName].manifest,                                             // 191\n      function (name) {                                                                                              // 192\n        return name !== \"css\";                                                                                       // 193\n      });                                                                                                            // 194\n  };                                                                                                                 // 195\n  WebApp.calculateClientHashCordova = function () {                                                                  // 196\n    var archName = 'web.cordova';                                                                                    // 197\n    if (! WebApp.clientPrograms[archName])                                                                           // 198\n      return 'none';                                                                                                 // 199\n                                                                                                                     // 200\n    return calculateClientHash(                                                                                      // 201\n      WebApp.clientPrograms[archName].manifest, null, _.pick(                                                        // 202\n        __meteor_runtime_config__, 'PUBLIC_SETTINGS'));                                                              // 203\n  };                                                                                                                 // 204\n});                                                                                                                  // 205\n                                                                                                                     // 206\n                                                                                                                     // 207\n                                                                                                                     // 208\n// When we have a request pending, we want the socket timeout to be long, to                                         // 209\n// give ourselves a while to serve it, and to allow sockjs long polls to                                             // 210\n// complete.  On the other hand, we want to close idle sockets relatively                                            // 211\n// quickly, so that we can shut down relatively promptly but cleanly, without                                        // 212\n// cutting off anyone's response.                                                                                    // 213\nWebApp._timeoutAdjustmentRequestCallback = function (req, res) {                                                     // 214\n  // this is really just req.socket.setTimeout(LONG_SOCKET_TIMEOUT);                                                 // 215\n  req.setTimeout(LONG_SOCKET_TIMEOUT);                                                                               // 216\n  // Insert our new finish listener to run BEFORE the existing one which removes                                     // 217\n  // the response from the socket.                                                                                   // 218\n  var finishListeners = res.listeners('finish');                                                                     // 219\n  // XXX Apparently in Node 0.12 this event is now called 'prefinish'.                                               // 220\n  // https://github.com/joyent/node/commit/7c9b6070                                                                  // 221\n  res.removeAllListeners('finish');                                                                                  // 222\n  res.on('finish', function () {                                                                                     // 223\n    res.setTimeout(SHORT_SOCKET_TIMEOUT);                                                                            // 224\n  });                                                                                                                // 225\n  _.each(finishListeners, function (l) { res.on('finish', l); });                                                    // 226\n};                                                                                                                   // 227\n                                                                                                                     // 228\n                                                                                                                     // 229\n// Will be updated by main before we listen.                                                                         // 230\n// Map from client arch to boilerplate object.                                                                       // 231\n// Boilerplate object has:                                                                                           // 232\n//   - func: XXX                                                                                                     // 233\n//   - baseData: XXX                                                                                                 // 234\nvar boilerplateByArch = {};                                                                                          // 235\n                                                                                                                     // 236\n// Given a request (as returned from `categorizeRequest`), return the                                                // 237\n// boilerplate HTML to serve for that request. Memoizes on HTML                                                      // 238\n// attributes (used by, eg, appcache) and whether inline scripts are                                                 // 239\n// currently allowed.                                                                                                // 240\n// XXX so far this function is always called with arch === 'web.browser'                                             // 241\nvar memoizedBoilerplate = {};                                                                                        // 242\nvar getBoilerplate = function (request, arch) {                                                                      // 243\n                                                                                                                     // 244\n  var htmlAttributes = getHtmlAttributes(request);                                                                   // 245\n                                                                                                                     // 246\n  // The only thing that changes from request to request (for now) are                                               // 247\n  // the HTML attributes (used by, eg, appcache) and whether inline                                                  // 248\n  // scripts are allowed, so we can memoize based on that.                                                           // 249\n  var memHash = JSON.stringify({                                                                                     // 250\n    inlineScriptsAllowed: inlineScriptsAllowed,                                                                      // 251\n    htmlAttributes: htmlAttributes,                                                                                  // 252\n    arch: arch                                                                                                       // 253\n  });                                                                                                                // 254\n                                                                                                                     // 255\n  if (! memoizedBoilerplate[memHash]) {                                                                              // 256\n    memoizedBoilerplate[memHash] = boilerplateByArch[arch].toHTML({                                                  // 257\n      htmlAttributes: htmlAttributes                                                                                 // 258\n    });                                                                                                              // 259\n  }                                                                                                                  // 260\n  return memoizedBoilerplate[memHash];                                                                               // 261\n};                                                                                                                   // 262\n                                                                                                                     // 263\nWebAppInternals.generateBoilerplateInstance = function (arch,                                                        // 264\n                                                        manifest,                                                    // 265\n                                                        additionalOptions) {                                         // 266\n  additionalOptions = additionalOptions || {};                                                                       // 267\n                                                                                                                     // 268\n  var runtimeConfig = _.extend(                                                                                      // 269\n    _.clone(__meteor_runtime_config__),                                                                              // 270\n    additionalOptions.runtimeConfigOverrides || {}                                                                   // 271\n  );                                                                                                                 // 272\n                                                                                                                     // 273\n  var jsCssUrlRewriteHook = bundledJsCssUrlRewriteHook || function (url) {                                           // 274\n    var bundledPrefix =                                                                                              // 275\n       __meteor_runtime_config__.ROOT_URL_PATH_PREFIX || '';                                                         // 276\n    return bundledPrefix + url;                                                                                      // 277\n  };                                                                                                                 // 278\n                                                                                                                     // 279\n  return new Boilerplate(arch, manifest,                                                                             // 280\n    _.extend({                                                                                                       // 281\n      pathMapper: function (itemPath) {                                                                              // 282\n        return path.join(archPath[arch], itemPath); },                                                               // 283\n      baseDataExtension: {                                                                                           // 284\n        additionalStaticJs: _.map(                                                                                   // 285\n          additionalStaticJs || [],                                                                                  // 286\n          function (contents, pathname) {                                                                            // 287\n            return {                                                                                                 // 288\n              pathname: pathname,                                                                                    // 289\n              contents: contents                                                                                     // 290\n            };                                                                                                       // 291\n          }                                                                                                          // 292\n        ),                                                                                                           // 293\n        // Convert to a JSON string, then get rid of most weird characters, then                                     // 294\n        // wrap in double quotes. (The outermost JSON.stringify really ought to                                      // 295\n        // just be \"wrap in double quotes\" but we use it to be safe.) This might                                     // 296\n        // end up inside a <script> tag so we need to be careful to not include                                      // 297\n        // \"</script>\", but normal {{spacebars}} escaping escapes too much! See                                      // 298\n        // https://github.com/meteor/meteor/issues/3730                                                              // 299\n        meteorRuntimeConfig: JSON.stringify(                                                                         // 300\n          encodeURIComponent(JSON.stringify(runtimeConfig))),                                                        // 301\n        rootUrlPathPrefix: __meteor_runtime_config__.ROOT_URL_PATH_PREFIX || '',                                     // 302\n        bundledJsCssUrlRewriteHook: jsCssUrlRewriteHook,                                                             // 303\n        inlineScriptsAllowed: WebAppInternals.inlineScriptsAllowed(),                                                // 304\n        inline: additionalOptions.inline                                                                             // 305\n      }                                                                                                              // 306\n    }, additionalOptions)                                                                                            // 307\n  );                                                                                                                 // 308\n};                                                                                                                   // 309\n                                                                                                                     // 310\n// A mapping from url path to \"info\". Where \"info\" has the following fields:                                         // 311\n// - type: the type of file to be served                                                                             // 312\n// - cacheable: optionally, whether the file should be cached or not                                                 // 313\n// - sourceMapUrl: optionally, the url of the source map                                                             // 314\n//                                                                                                                   // 315\n// Info also contains one of the following:                                                                          // 316\n// - content: the stringified content that should be served at this path                                             // 317\n// - absolutePath: the absolute path on disk to the file                                                             // 318\n                                                                                                                     // 319\nvar staticFiles;                                                                                                     // 320\n                                                                                                                     // 321\n// Serve static files from the manifest or added with                                                                // 322\n// `addStaticJs`. Exported for tests.                                                                                // 323\nWebAppInternals.staticFilesMiddleware = function (staticFiles, req, res, next) {                                     // 324\n  if ('GET' != req.method && 'HEAD' != req.method) {                                                                 // 325\n    next();                                                                                                          // 326\n    return;                                                                                                          // 327\n  }                                                                                                                  // 328\n  var pathname = connect.utils.parseUrl(req).pathname;                                                               // 329\n  try {                                                                                                              // 330\n    pathname = decodeURIComponent(pathname);                                                                         // 331\n  } catch (e) {                                                                                                      // 332\n    next();                                                                                                          // 333\n    return;                                                                                                          // 334\n  }                                                                                                                  // 335\n                                                                                                                     // 336\n  var serveStaticJs = function (s) {                                                                                 // 337\n    res.writeHead(200, {                                                                                             // 338\n      'Content-type': 'application/javascript; charset=UTF-8'                                                        // 339\n    });                                                                                                              // 340\n    res.write(s);                                                                                                    // 341\n    res.end();                                                                                                       // 342\n  };                                                                                                                 // 343\n                                                                                                                     // 344\n  if (pathname === \"/meteor_runtime_config.js\" &&                                                                    // 345\n      ! WebAppInternals.inlineScriptsAllowed()) {                                                                    // 346\n    serveStaticJs(\"__meteor_runtime_config__ = \" +                                                                   // 347\n                  JSON.stringify(__meteor_runtime_config__) + \";\");                                                  // 348\n    return;                                                                                                          // 349\n  } else if (_.has(additionalStaticJs, pathname) &&                                                                  // 350\n              ! WebAppInternals.inlineScriptsAllowed()) {                                                            // 351\n    serveStaticJs(additionalStaticJs[pathname]);                                                                     // 352\n    return;                                                                                                          // 353\n  }                                                                                                                  // 354\n                                                                                                                     // 355\n  if (!_.has(staticFiles, pathname)) {                                                                               // 356\n    next();                                                                                                          // 357\n    return;                                                                                                          // 358\n  }                                                                                                                  // 359\n                                                                                                                     // 360\n  // We don't need to call pause because, unlike 'static', once we call into                                         // 361\n  // 'send' and yield to the event loop, we never call another handler with                                          // 362\n  // 'next'.                                                                                                         // 363\n                                                                                                                     // 364\n  var info = staticFiles[pathname];                                                                                  // 365\n                                                                                                                     // 366\n  // Cacheable files are files that should never change. Typically                                                   // 367\n  // named by their hash (eg meteor bundled js and css files).                                                       // 368\n  // We cache them ~forever (1yr).                                                                                   // 369\n  //                                                                                                                 // 370\n  // We cache non-cacheable files anyway. This isn't really correct, as users                                        // 371\n  // can change the files and changes won't propagate immediately. However, if                                       // 372\n  // we don't cache them, browsers will 'flicker' when rerendering                                                   // 373\n  // images. Eventually we will probably want to rewrite URLs of static assets                                       // 374\n  // to include a query parameter to bust caches. That way we can both get                                           // 375\n  // good caching behavior and allow users to change assets without delay.                                           // 376\n  // https://github.com/meteor/meteor/issues/773                                                                     // 377\n  var maxAge = info.cacheable                                                                                        // 378\n        ? 1000 * 60 * 60 * 24 * 365                                                                                  // 379\n        : 1000 * 60 * 60 * 24;                                                                                       // 380\n                                                                                                                     // 381\n  // Set the X-SourceMap header, which current Chrome, FireFox, and Safari                                           // 382\n  // understand.  (The SourceMap header is slightly more spec-correct but FF                                         // 383\n  // doesn't understand it.)                                                                                         // 384\n  //                                                                                                                 // 385\n  // You may also need to enable source maps in Chrome: open dev tools, click                                        // 386\n  // the gear in the bottom right corner, and select \"enable source maps\".                                           // 387\n  if (info.sourceMapUrl) {                                                                                           // 388\n    res.setHeader('X-SourceMap',                                                                                     // 389\n                  __meteor_runtime_config__.ROOT_URL_PATH_PREFIX +                                                   // 390\n                  info.sourceMapUrl);                                                                                // 391\n  }                                                                                                                  // 392\n                                                                                                                     // 393\n  if (info.type === \"js\") {                                                                                          // 394\n    res.setHeader(\"Content-Type\", \"application/javascript; charset=UTF-8\");                                          // 395\n  } else if (info.type === \"css\") {                                                                                  // 396\n    res.setHeader(\"Content-Type\", \"text/css; charset=UTF-8\");                                                        // 397\n  } else if (info.type === \"json\") {                                                                                 // 398\n    res.setHeader(\"Content-Type\", \"application/json; charset=UTF-8\");                                                // 399\n    // XXX if it is a manifest we are serving, set additional headers                                                // 400\n    if (/\\/manifest\\.json$/.test(pathname)) {                                                                        // 401\n      res.setHeader(\"Access-Control-Allow-Origin\", \"*\");                                                             // 402\n    }                                                                                                                // 403\n  }                                                                                                                  // 404\n                                                                                                                     // 405\n  if (info.content) {                                                                                                // 406\n    res.write(info.content);                                                                                         // 407\n    res.end();                                                                                                       // 408\n  } else {                                                                                                           // 409\n    send(req, info.absolutePath)                                                                                     // 410\n      .maxage(maxAge)                                                                                                // 411\n      .hidden(true)  // if we specified a dotfile in the manifest, serve it                                          // 412\n      .on('error', function (err) {                                                                                  // 413\n        Log.error(\"Error serving static file \" + err);                                                               // 414\n        res.writeHead(500);                                                                                          // 415\n        res.end();                                                                                                   // 416\n      })                                                                                                             // 417\n      .on('directory', function () {                                                                                 // 418\n        Log.error(\"Unexpected directory \" + info.absolutePath);                                                      // 419\n        res.writeHead(500);                                                                                          // 420\n        res.end();                                                                                                   // 421\n      })                                                                                                             // 422\n      .pipe(res);                                                                                                    // 423\n  }                                                                                                                  // 424\n};                                                                                                                   // 425\n                                                                                                                     // 426\nvar getUrlPrefixForArch = function (arch) {                                                                          // 427\n  // XXX we rely on the fact that arch names don't contain slashes                                                   // 428\n  // in that case we would need to uri escape it                                                                     // 429\n                                                                                                                     // 430\n  // We add '__' to the beginning of non-standard archs to \"scope\" the url                                           // 431\n  // to Meteor internals.                                                                                            // 432\n  return arch === WebApp.defaultArch ?                                                                               // 433\n    '' : '/' + '__' + arch.replace(/^web\\./, '');                                                                    // 434\n};                                                                                                                   // 435\n                                                                                                                     // 436\n// parse port to see if its a Windows Server style named pipe. If so, return as-is (String), otherwise return as Int\nWebAppInternals.parsePort = function (port) {                                                                        // 438\n  if( /\\\\\\\\?.+\\\\pipe\\\\?.+/.test(port) ) {                                                                            // 439\n    return port;                                                                                                     // 440\n  }                                                                                                                  // 441\n                                                                                                                     // 442\n  return parseInt(port);                                                                                             // 443\n};                                                                                                                   // 444\n                                                                                                                     // 445\nvar runWebAppServer = function () {                                                                                  // 446\n  var shuttingDown = false;                                                                                          // 447\n  var syncQueue = new Meteor._SynchronousQueue();                                                                    // 448\n                                                                                                                     // 449\n  var getItemPathname = function (itemUrl) {                                                                         // 450\n    return decodeURIComponent(url.parse(itemUrl).pathname);                                                          // 451\n  };                                                                                                                 // 452\n                                                                                                                     // 453\n  WebAppInternals.reloadClientPrograms = function () {                                                               // 454\n    syncQueue.runTask(function() {                                                                                   // 455\n      staticFiles = {};                                                                                              // 456\n      var generateClientProgram = function (clientPath, arch) {                                                      // 457\n        // read the control for the client we'll be serving up                                                       // 458\n        var clientJsonPath = path.join(__meteor_bootstrap__.serverDir,                                               // 459\n                                   clientPath);                                                                      // 460\n        var clientDir = path.dirname(clientJsonPath);                                                                // 461\n        var clientJson = JSON.parse(readUtf8FileSync(clientJsonPath));                                               // 462\n        if (clientJson.format !== \"web-program-pre1\")                                                                // 463\n          throw new Error(\"Unsupported format for client assets: \" +                                                 // 464\n                          JSON.stringify(clientJson.format));                                                        // 465\n                                                                                                                     // 466\n        if (! clientJsonPath || ! clientDir || ! clientJson)                                                         // 467\n          throw new Error(\"Client config file not parsed.\");                                                         // 468\n                                                                                                                     // 469\n        var urlPrefix = getUrlPrefixForArch(arch);                                                                   // 470\n                                                                                                                     // 471\n        var manifest = clientJson.manifest;                                                                          // 472\n        _.each(manifest, function (item) {                                                                           // 473\n          if (item.url && item.where === \"client\") {                                                                 // 474\n            staticFiles[urlPrefix + getItemPathname(item.url)] = {                                                   // 475\n              absolutePath: path.join(clientDir, item.path),                                                         // 476\n              cacheable: item.cacheable,                                                                             // 477\n              // Link from source to its map                                                                         // 478\n              sourceMapUrl: item.sourceMapUrl,                                                                       // 479\n              type: item.type                                                                                        // 480\n            };                                                                                                       // 481\n                                                                                                                     // 482\n            if (item.sourceMap) {                                                                                    // 483\n              // Serve the source map too, under the specified URL. We assume all                                    // 484\n              // source maps are cacheable.                                                                          // 485\n              staticFiles[urlPrefix + getItemPathname(item.sourceMapUrl)] = {                                        // 486\n                absolutePath: path.join(clientDir, item.sourceMap),                                                  // 487\n                cacheable: true                                                                                      // 488\n              };                                                                                                     // 489\n            }                                                                                                        // 490\n          }                                                                                                          // 491\n        });                                                                                                          // 492\n                                                                                                                     // 493\n        var program = {                                                                                              // 494\n          manifest: manifest,                                                                                        // 495\n          version: WebAppHashing.calculateClientHash(manifest, null, _.pick(                                         // 496\n            __meteor_runtime_config__, 'PUBLIC_SETTINGS')),                                                          // 497\n          PUBLIC_SETTINGS: __meteor_runtime_config__.PUBLIC_SETTINGS                                                 // 498\n        };                                                                                                           // 499\n                                                                                                                     // 500\n        WebApp.clientPrograms[arch] = program;                                                                       // 501\n                                                                                                                     // 502\n        // Serve the program as a string at /foo/<arch>/manifest.json                                                // 503\n        // XXX change manifest.json -> program.json                                                                  // 504\n        staticFiles[path.join(urlPrefix, getItemPathname('/manifest.json'))] = {                                     // 505\n          content: JSON.stringify(program),                                                                          // 506\n          cacheable: true,                                                                                           // 507\n          type: \"json\"                                                                                               // 508\n        };                                                                                                           // 509\n      };                                                                                                             // 510\n                                                                                                                     // 511\n      try {                                                                                                          // 512\n        var clientPaths = __meteor_bootstrap__.configJson.clientPaths;                                               // 513\n        _.each(clientPaths, function (clientPath, arch) {                                                            // 514\n          archPath[arch] = path.dirname(clientPath);                                                                 // 515\n          generateClientProgram(clientPath, arch);                                                                   // 516\n        });                                                                                                          // 517\n                                                                                                                     // 518\n        // Exported for tests.                                                                                       // 519\n        WebAppInternals.staticFiles = staticFiles;                                                                   // 520\n      } catch (e) {                                                                                                  // 521\n        Log.error(\"Error reloading the client program: \" + e.stack);                                                 // 522\n        process.exit(1);                                                                                             // 523\n      }                                                                                                              // 524\n    });                                                                                                              // 525\n  };                                                                                                                 // 526\n                                                                                                                     // 527\n  WebAppInternals.generateBoilerplate = function () {                                                                // 528\n    // This boilerplate will be served to the mobile devices when used with                                          // 529\n    // Meteor/Cordova for the Hot-Code Push and since the file will be served by                                     // 530\n    // the device's server, it is important to set the DDP url to the actual                                         // 531\n    // Meteor server accepting DDP connections and not the device's file server.                                     // 532\n    var defaultOptionsForArch = {                                                                                    // 533\n      'web.cordova': {                                                                                               // 534\n        runtimeConfigOverrides: {                                                                                    // 535\n          // XXX We use absoluteUrl() here so that we serve https://                                                 // 536\n          // URLs to cordova clients if force-ssl is in use. If we were                                              // 537\n          // to use __meteor_runtime_config__.ROOT_URL instead of                                                    // 538\n          // absoluteUrl(), then Cordova clients would immediately get a                                             // 539\n          // HCP setting their DDP_DEFAULT_CONNECTION_URL to                                                         // 540\n          // http://example.meteor.com. This breaks the app, because                                                 // 541\n          // force-ssl doesn't serve CORS headers on 302                                                             // 542\n          // redirects. (Plus it's undesirable to have clients                                                       // 543\n          // connecting to http://example.meteor.com when force-ssl is                                               // 544\n          // in use.)                                                                                                // 545\n          DDP_DEFAULT_CONNECTION_URL: process.env.MOBILE_DDP_URL ||                                                  // 546\n            Meteor.absoluteUrl(),                                                                                    // 547\n          ROOT_URL: process.env.MOBILE_ROOT_URL ||                                                                   // 548\n            Meteor.absoluteUrl()                                                                                     // 549\n        }                                                                                                            // 550\n      }                                                                                                              // 551\n    };                                                                                                               // 552\n                                                                                                                     // 553\n    syncQueue.runTask(function() {                                                                                   // 554\n      _.each(WebApp.clientPrograms, function (program, archName) {                                                   // 555\n        boilerplateByArch[archName] =                                                                                // 556\n          WebAppInternals.generateBoilerplateInstance(                                                               // 557\n            archName, program.manifest,                                                                              // 558\n            defaultOptionsForArch[archName]);                                                                        // 559\n      });                                                                                                            // 560\n                                                                                                                     // 561\n      // Clear the memoized boilerplate cache.                                                                       // 562\n      memoizedBoilerplate = {};                                                                                      // 563\n                                                                                                                     // 564\n      // Configure CSS injection for the default arch                                                                // 565\n      // XXX implement the CSS injection for all archs?                                                              // 566\n      WebAppInternals.refreshableAssets = {                                                                          // 567\n        allCss: boilerplateByArch[WebApp.defaultArch].baseData.css                                                   // 568\n      };                                                                                                             // 569\n    });                                                                                                              // 570\n  };                                                                                                                 // 571\n                                                                                                                     // 572\n  WebAppInternals.reloadClientPrograms();                                                                            // 573\n                                                                                                                     // 574\n  // webserver                                                                                                       // 575\n  var app = connect();                                                                                               // 576\n                                                                                                                     // 577\n  // Auto-compress any json, javascript, or text.                                                                    // 578\n  app.use(connect.compress());                                                                                       // 579\n                                                                                                                     // 580\n  // Packages and apps can add handlers that run before any other Meteor                                             // 581\n  // handlers via WebApp.rawConnectHandlers.                                                                         // 582\n  var rawConnectHandlers = connect();                                                                                // 583\n  app.use(rawConnectHandlers);                                                                                       // 584\n                                                                                                                     // 585\n  // We're not a proxy; reject (without crashing) attempts to treat us like                                          // 586\n  // one. (See #1212.)                                                                                               // 587\n  app.use(function(req, res, next) {                                                                                 // 588\n    if (RoutePolicy.isValidUrl(req.url)) {                                                                           // 589\n      next();                                                                                                        // 590\n      return;                                                                                                        // 591\n    }                                                                                                                // 592\n    res.writeHead(400);                                                                                              // 593\n    res.write(\"Not a proxy\");                                                                                        // 594\n    res.end();                                                                                                       // 595\n  });                                                                                                                // 596\n                                                                                                                     // 597\n  // Strip off the path prefix, if it exists.                                                                        // 598\n  app.use(function (request, response, next) {                                                                       // 599\n    var pathPrefix = __meteor_runtime_config__.ROOT_URL_PATH_PREFIX;                                                 // 600\n    var url = Npm.require('url').parse(request.url);                                                                 // 601\n    var pathname = url.pathname;                                                                                     // 602\n    // check if the path in the url starts with the path prefix (and the part                                        // 603\n    // after the path prefix must start with a / if it exists.)                                                      // 604\n    if (pathPrefix && pathname.substring(0, pathPrefix.length) === pathPrefix &&                                     // 605\n       (pathname.length == pathPrefix.length                                                                         // 606\n        || pathname.substring(pathPrefix.length, pathPrefix.length + 1) === \"/\")) {                                  // 607\n      request.url = request.url.substring(pathPrefix.length);                                                        // 608\n      next();                                                                                                        // 609\n    } else if (pathname === \"/favicon.ico\" || pathname === \"/robots.txt\") {                                          // 610\n      next();                                                                                                        // 611\n    } else if (pathPrefix) {                                                                                         // 612\n      response.writeHead(404);                                                                                       // 613\n      response.write(\"Unknown path\");                                                                                // 614\n      response.end();                                                                                                // 615\n    } else {                                                                                                         // 616\n      next();                                                                                                        // 617\n    }                                                                                                                // 618\n  });                                                                                                                // 619\n                                                                                                                     // 620\n  // Parse the query string into res.query. Used by oauth_server, but it's                                           // 621\n  // generally pretty handy..                                                                                        // 622\n  app.use(connect.query());                                                                                          // 623\n                                                                                                                     // 624\n  // Serve static files from the manifest.                                                                           // 625\n  // This is inspired by the 'static' middleware.                                                                    // 626\n  app.use(function (req, res, next) {                                                                                // 627\n    Fiber(function () {                                                                                              // 628\n     WebAppInternals.staticFilesMiddleware(staticFiles, req, res, next);                                             // 629\n    }).run();                                                                                                        // 630\n  });                                                                                                                // 631\n                                                                                                                     // 632\n  // Packages and apps can add handlers to this via WebApp.connectHandlers.                                          // 633\n  // They are inserted before our default handler.                                                                   // 634\n  var packageAndAppHandlers = connect();                                                                             // 635\n  app.use(packageAndAppHandlers);                                                                                    // 636\n                                                                                                                     // 637\n  var suppressConnectErrors = false;                                                                                 // 638\n  // connect knows it is an error handler because it has 4 arguments instead of                                      // 639\n  // 3. go figure.  (It is not smart enough to find such a thing if it's hidden                                      // 640\n  // inside packageAndAppHandlers.)                                                                                  // 641\n  app.use(function (err, req, res, next) {                                                                           // 642\n    if (!err || !suppressConnectErrors || !req.headers['x-suppress-error']) {                                        // 643\n      next(err);                                                                                                     // 644\n      return;                                                                                                        // 645\n    }                                                                                                                // 646\n    res.writeHead(err.status, { 'Content-Type': 'text/plain' });                                                     // 647\n    res.end(\"An error message\");                                                                                     // 648\n  });                                                                                                                // 649\n                                                                                                                     // 650\n  app.use(function (req, res, next) {                                                                                // 651\n    if (! appUrl(req.url))                                                                                           // 652\n      return next();                                                                                                 // 653\n                                                                                                                     // 654\n    var headers = {                                                                                                  // 655\n      'Content-Type':  'text/html; charset=utf-8'                                                                    // 656\n    };                                                                                                               // 657\n    if (shuttingDown)                                                                                                // 658\n      headers['Connection'] = 'Close';                                                                               // 659\n                                                                                                                     // 660\n    var request = WebApp.categorizeRequest(req);                                                                     // 661\n                                                                                                                     // 662\n    if (request.url.query && request.url.query['meteor_css_resource']) {                                             // 663\n      // In this case, we're requesting a CSS resource in the meteor-specific                                        // 664\n      // way, but we don't have it.  Serve a static css file that indicates that                                     // 665\n      // we didn't have it, so we can detect that and refresh.  Make sure                                            // 666\n      // that any proxies or CDNs don't cache this error!  (Normally proxies                                         // 667\n      // or CDNs are smart enough not to cache error pages, but in order to                                          // 668\n      // make this hack work, we need to return the CSS file as a 200, which                                         // 669\n      // would otherwise be cached.)                                                                                 // 670\n      headers['Content-Type'] = 'text/css; charset=utf-8';                                                           // 671\n      headers['Cache-Control'] = 'no-cache';                                                                         // 672\n      res.writeHead(200, headers);                                                                                   // 673\n      res.write(\".meteor-css-not-found-error { width: 0px;}\");                                                       // 674\n      res.end();                                                                                                     // 675\n      return undefined;                                                                                              // 676\n    }                                                                                                                // 677\n                                                                                                                     // 678\n    if (request.url.query && request.url.query['meteor_js_resource']) {                                              // 679\n      // Similarly, we're requesting a JS resource that we don't have.                                               // 680\n      // Serve an uncached 404. (We can't use the same hack we use for CSS,                                          // 681\n      // because actually acting on that hack requires us to have the JS                                             // 682\n      // already!)                                                                                                   // 683\n      headers['Cache-Control'] = 'no-cache';                                                                         // 684\n      res.writeHead(404, headers);                                                                                   // 685\n      res.end(\"404 Not Found\");                                                                                      // 686\n      return undefined;                                                                                              // 687\n    }                                                                                                                // 688\n                                                                                                                     // 689\n    // /packages/asdfsad ... /__cordova/dafsdf.js                                                                    // 690\n    var pathname = connect.utils.parseUrl(req).pathname;                                                             // 691\n    var archKey = pathname.split('/')[1];                                                                            // 692\n    var archKeyCleaned = 'web.' + archKey.replace(/^__/, '');                                                        // 693\n                                                                                                                     // 694\n    if (! /^__/.test(archKey) || ! _.has(archPath, archKeyCleaned)) {                                                // 695\n      archKey = WebApp.defaultArch;                                                                                  // 696\n    } else {                                                                                                         // 697\n      archKey = archKeyCleaned;                                                                                      // 698\n    }                                                                                                                // 699\n                                                                                                                     // 700\n    var boilerplate;                                                                                                 // 701\n    try {                                                                                                            // 702\n      boilerplate = getBoilerplate(request, archKey);                                                                // 703\n    } catch (e) {                                                                                                    // 704\n      Log.error(\"Error running template: \" + e);                                                                     // 705\n      res.writeHead(500, headers);                                                                                   // 706\n      res.end();                                                                                                     // 707\n      return undefined;                                                                                              // 708\n    }                                                                                                                // 709\n                                                                                                                     // 710\n    res.writeHead(200, headers);                                                                                     // 711\n    res.write(boilerplate);                                                                                          // 712\n    res.end();                                                                                                       // 713\n    return undefined;                                                                                                // 714\n  });                                                                                                                // 715\n                                                                                                                     // 716\n  // Return 404 by default, if no other handlers serve this URL.                                                     // 717\n  app.use(function (req, res) {                                                                                      // 718\n    res.writeHead(404);                                                                                              // 719\n    res.end();                                                                                                       // 720\n  });                                                                                                                // 721\n                                                                                                                     // 722\n                                                                                                                     // 723\n  var httpServer = http.createServer(app);                                                                           // 724\n  var onListeningCallbacks = [];                                                                                     // 725\n                                                                                                                     // 726\n  // After 5 seconds w/o data on a socket, kill it.  On the other hand, if                                           // 727\n  // there's an outstanding request, give it a higher timeout instead (to avoid                                      // 728\n  // killing long-polling requests)                                                                                  // 729\n  httpServer.setTimeout(SHORT_SOCKET_TIMEOUT);                                                                       // 730\n                                                                                                                     // 731\n  // Do this here, and then also in livedata/stream_server.js, because                                               // 732\n  // stream_server.js kills all the current request handlers when installing its                                     // 733\n  // own.                                                                                                            // 734\n  httpServer.on('request', WebApp._timeoutAdjustmentRequestCallback);                                                // 735\n                                                                                                                     // 736\n                                                                                                                     // 737\n  // start up app                                                                                                    // 738\n  _.extend(WebApp, {                                                                                                 // 739\n    connectHandlers: packageAndAppHandlers,                                                                          // 740\n    rawConnectHandlers: rawConnectHandlers,                                                                          // 741\n    httpServer: httpServer,                                                                                          // 742\n    // For testing.                                                                                                  // 743\n    suppressConnectErrors: function () {                                                                             // 744\n      suppressConnectErrors = true;                                                                                  // 745\n    },                                                                                                               // 746\n    onListening: function (f) {                                                                                      // 747\n      if (onListeningCallbacks)                                                                                      // 748\n        onListeningCallbacks.push(f);                                                                                // 749\n      else                                                                                                           // 750\n        f();                                                                                                         // 751\n    }                                                                                                                // 752\n  });                                                                                                                // 753\n                                                                                                                     // 754\n  // Let the rest of the packages (and Meteor.startup hooks) insert connect                                          // 755\n  // middlewares and update __meteor_runtime_config__, then keep going to set up                                     // 756\n  // actually serving HTML.                                                                                          // 757\n  main = function (argv) {                                                                                           // 758\n    WebAppInternals.generateBoilerplate();                                                                           // 759\n                                                                                                                     // 760\n    // only start listening after all the startup code has run.                                                      // 761\n    var localPort = WebAppInternals.parsePort(process.env.PORT) || 0;                                                // 762\n    var host = process.env.BIND_IP;                                                                                  // 763\n    var localIp = host || '0.0.0.0';                                                                                 // 764\n    httpServer.listen(localPort, localIp, Meteor.bindEnvironment(function() {                                        // 765\n      if (process.env.METEOR_PRINT_ON_LISTEN)                                                                        // 766\n        console.log(\"LISTENING\"); // must match run-app.js                                                           // 767\n                                                                                                                     // 768\n      var callbacks = onListeningCallbacks;                                                                          // 769\n      onListeningCallbacks = null;                                                                                   // 770\n      _.each(callbacks, function (x) { x(); });                                                                      // 771\n                                                                                                                     // 772\n    }, function (e) {                                                                                                // 773\n      console.error(\"Error listening:\", e);                                                                          // 774\n      console.error(e && e.stack);                                                                                   // 775\n    }));                                                                                                             // 776\n                                                                                                                     // 777\n    return 'DAEMON';                                                                                                 // 778\n  };                                                                                                                 // 779\n};                                                                                                                   // 780\n                                                                                                                     // 781\n                                                                                                                     // 782\nrunWebAppServer();                                                                                                   // 783\n                                                                                                                     // 784\n                                                                                                                     // 785\nvar inlineScriptsAllowed = true;                                                                                     // 786\n                                                                                                                     // 787\nWebAppInternals.inlineScriptsAllowed = function () {                                                                 // 788\n  return inlineScriptsAllowed;                                                                                       // 789\n};                                                                                                                   // 790\n                                                                                                                     // 791\nWebAppInternals.setInlineScriptsAllowed = function (value) {                                                         // 792\n  inlineScriptsAllowed = value;                                                                                      // 793\n  WebAppInternals.generateBoilerplate();                                                                             // 794\n};                                                                                                                   // 795\n                                                                                                                     // 796\n                                                                                                                     // 797\nWebAppInternals.setBundledJsCssUrlRewriteHook = function (hookFn) {                                                  // 798\n  bundledJsCssUrlRewriteHook = hookFn;                                                                               // 799\n  WebAppInternals.generateBoilerplate();                                                                             // 800\n};                                                                                                                   // 801\n                                                                                                                     // 802\nWebAppInternals.setBundledJsCssPrefix = function (prefix) {                                                          // 803\n  var self = this;                                                                                                   // 804\n  self.setBundledJsCssUrlRewriteHook(                                                                                // 805\n    function (url) {                                                                                                 // 806\n      return prefix + url;                                                                                           // 807\n  });                                                                                                                // 808\n};                                                                                                                   // 809\n                                                                                                                     // 810\n// Packages can call `WebAppInternals.addStaticJs` to specify static                                                 // 811\n// JavaScript to be included in the app. This static JS will be inlined,                                             // 812\n// unless inline scripts have been disabled, in which case it will be                                                // 813\n// served under `/<sha1 of contents>`.                                                                               // 814\nvar additionalStaticJs = {};                                                                                         // 815\nWebAppInternals.addStaticJs = function (contents) {                                                                  // 816\n  additionalStaticJs[\"/\" + sha1(contents) + \".js\"] = contents;                                                       // 817\n};                                                                                                                   // 818\n                                                                                                                     // 819\n// Exported for tests                                                                                                // 820\nWebAppInternals.getBoilerplate = getBoilerplate;                                                                     // 821\nWebAppInternals.additionalStaticJs = additionalStaticJs;                                                             // 822\n                                                                                                                     // 823\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package.webapp = {}, {\n  WebApp: WebApp,\n  main: main,\n  WebAppInternals: WebAppInternals\n});\n\n})();\n","servePath":"/packages/webapp.js","sourceMap":{"version":3,"sources":["/packages/webapp/webapp_server.js"],"names":[],"mappingsfile":"/packages/webapp.js","sourcesContent":["////////// Requires //////////\n\nvar fs = Npm.require(\"fs\");\nvar http = Npm.require(\"http\");\nvar os = Npm.require(\"os\");\nvar path = Npm.require(\"path\");\nvar url = Npm.require(\"url\");\nvar crypto = Npm.require(\"crypto\");\n\nvar connect = Npm.require('connect');\nvar useragent = Npm.require('useragent');\nvar send = Npm.require('send');\n\nvar Future = Npm.require('fibers/future');\nvar Fiber = Npm.require('fibers');\n\nvar SHORT_SOCKET_TIMEOUT = 5*1000;\nvar LONG_SOCKET_TIMEOUT = 120*1000;\n\nWebApp = {};\nWebAppInternals = {};\n\nWebAppInternals.NpmModules = {\n  connect: {\n    version: Npm.require('connect/package.json').version,\n    module: connect\n  }\n};\n\nWebApp.defaultArch = 'web.browser';\n\n// XXX maps archs to manifests\nWebApp.clientPrograms = {};\n\n// XXX maps archs to program path on filesystem\nvar archPath = {};\n\nvar bundledJsCssUrlRewriteHook;\n\nvar sha1 = function (contents) {\n  var hash = crypto.createHash('sha1');\n  hash.update(contents);\n  return hash.digest('hex');\n};\n\nvar readUtf8FileSync = function (filename) {\n  return Meteor.wrapAsync(fs.readFile)(filename, 'utf8');\n};\n\n// #BrowserIdentification\n//\n// We have multiple places that want to identify the browser: the\n// unsupported browser page, the appcache package, and, eventually\n// delivering browser polyfills only as needed.\n//\n// To avoid detecting the browser in multiple places ad-hoc, we create a\n// Meteor \"browser\" object. It uses but does not expose the npm\n// useragent module (we could choose a different mechanism to identify\n// the browser in the future if we wanted to).  The browser object\n// contains\n//\n// * `name`: the name of the browser in camel case\n// * `major`, `minor`, `patch`: integers describing the browser version\n//\n// Also here is an early version of a Meteor `request` object, intended\n// to be a high-level description of the request without exposing\n// details of connect's low-level `req`.  Currently it contains:\n//\n// * `browser`: browser identification object described above\n// * `url`: parsed url, including parsed query params\n//\n// As a temporary hack there is a `categorizeRequest` function on WebApp which\n// converts a connect `req` to a Meteor `request`. This can go away once smart\n// packages such as appcache are being passed a `request` object directly when\n// they serve content.\n//\n// This allows `request` to be used uniformly: it is passed to the html\n// attributes hook, and the appcache package can use it when deciding\n// whether to generate a 404 for the manifest.\n//\n// Real routing / server side rendering will probably refactor this\n// heavily.\n\n\n// e.g. \"Mobile Safari\" => \"mobileSafari\"\nvar camelCase = function (name) {\n  var parts = name.split(' ');\n  parts[0] = parts[0].toLowerCase();\n  for (var i = 1;  i < parts.length;  ++i) {\n    parts[i] = parts[i].charAt(0).toUpperCase() + parts[i].substr(1);\n  }\n  return parts.join('');\n};\n\nvar identifyBrowser = function (userAgentString) {\n  var userAgent = useragent.lookup(userAgentString);\n  return {\n    name: camelCase(userAgent.family),\n    major: +userAgent.major,\n    minor: +userAgent.minor,\n    patch: +userAgent.patch\n  };\n};\n\n// XXX Refactor as part of implementing real routing.\nWebAppInternals.identifyBrowser = identifyBrowser;\n\nWebApp.categorizeRequest = function (req) {\n  return {\n    browser: identifyBrowser(req.headers['user-agent']),\n    url: url.parse(req.url, true)\n  };\n};\n\n// HTML attribute hooks: functions to be called to determine any attributes to\n// be added to the '<html>' tag. Each function is passed a 'request' object (see\n// #BrowserIdentification) and should return null or object.\nvar htmlAttributeHooks = [];\nvar getHtmlAttributes = function (request) {\n  var combinedAttributes  = {};\n  _.each(htmlAttributeHooks || [], function (hook) {\n    var attributes = hook(request);\n    if (attributes === null)\n      return;\n    if (typeof attributes !== 'object')\n      throw Error(\"HTML attribute hook must return null or object\");\n    _.extend(combinedAttributes, attributes);\n  });\n  return combinedAttributes;\n};\nWebApp.addHtmlAttributeHook = function (hook) {\n  htmlAttributeHooks.push(hook);\n};\n\n// Serve app HTML for this URL?\nvar appUrl = function (url) {\n  if (url === '/favicon.ico' || url === '/robots.txt')\n    return false;\n\n  // NOTE: app.manifest is not a web standard like favicon.ico and\n  // robots.txt. It is a file name we have chosen to use for HTML5\n  // appcache URLs. It is included here to prevent using an appcache\n  // then removing it from poisoning an app permanently. Eventually,\n  // once we have server side routing, this won't be needed as\n  // unknown URLs with return a 404 automatically.\n  if (url === '/app.manifest')\n    return false;\n\n  // Avoid serving app HTML for declared routes such as /sockjs/.\n  if (RoutePolicy.classify(url))\n    return false;\n\n  // we currently return app HTML on all URLs by default\n  return true;\n};\n\n\n// We need to calculate the client hash after all packages have loaded\n// to give them a chance to populate __meteor_runtime_config__.\n//\n// Calculating the hash during startup means that packages can only\n// populate __meteor_runtime_config__ during load, not during startup.\n//\n// Calculating instead it at the beginning of main after all startup\n// hooks had run would allow packages to also populate\n// __meteor_runtime_config__ during startup, but that's too late for\n// autoupdate because it needs to have the client hash at startup to\n// insert the auto update version itself into\n// __meteor_runtime_config__ to get it to the client.\n//\n// An alternative would be to give autoupdate a \"post-start,\n// pre-listen\" hook to allow it to insert the auto update version at\n// the right moment.\n\nMeteor.startup(function () {\n  var calculateClientHash = WebAppHashing.calculateClientHash;\n  WebApp.clientHash = function (archName) {\n    archName = archName || WebApp.defaultArch;\n    return calculateClientHash(WebApp.clientPrograms[archName].manifest);\n  };\n\n  WebApp.calculateClientHashRefreshable = function (archName) {\n    archName = archName || WebApp.defaultArch;\n    return calculateClientHash(WebApp.clientPrograms[archName].manifest,\n      function (name) {\n        return name === \"css\";\n      });\n  };\n  WebApp.calculateClientHashNonRefreshable = function (archName) {\n    archName = archName || WebApp.defaultArch;\n    return calculateClientHash(WebApp.clientPrograms[archName].manifest,\n      function (name) {\n        return name !== \"css\";\n      });\n  };\n  WebApp.calculateClientHashCordova = function () {\n    var archName = 'web.cordova';\n    if (! WebApp.clientPrograms[archName])\n      return 'none';\n\n    return calculateClientHash(\n      WebApp.clientPrograms[archName].manifest, null, _.pick(\n        __meteor_runtime_config__, 'PUBLIC_SETTINGS'));\n  };\n});\n\n\n\n// When we have a request pending, we want the socket timeout to be long, to\n// give ourselves a while to serve it, and to allow sockjs long polls to\n// complete.  On the other hand, we want to close idle sockets relatively\n// quickly, so that we can shut down relatively promptly but cleanly, without\n// cutting off anyone's response.\nWebApp._timeoutAdjustmentRequestCallback = function (req, res) {\n  // this is really just req.socket.setTimeout(LONG_SOCKET_TIMEOUT);\n  req.setTimeout(LONG_SOCKET_TIMEOUT);\n  // Insert our new finish listener to run BEFORE the existing one which removes\n  // the response from the socket.\n  var finishListeners = res.listeners('finish');\n  // XXX Apparently in Node 0.12 this event is now called 'prefinish'.\n  // https://github.com/joyent/node/commit/7c9b6070\n  res.removeAllListeners('finish');\n  res.on('finish', function () {\n    res.setTimeout(SHORT_SOCKET_TIMEOUT);\n  });\n  _.each(finishListeners, function (l) { res.on('finish', l); });\n};\n\n\n// Will be updated by main before we listen.\n// Map from client arch to boilerplate object.\n// Boilerplate object has:\n//   - func: XXX\n//   - baseData: XXX\nvar boilerplateByArch = {};\n\n// Given a request (as returned from `categorizeRequest`), return the\n// boilerplate HTML to serve for that request. Memoizes on HTML\n// attributes (used by, eg, appcache) and whether inline scripts are\n// currently allowed.\n// XXX so far this function is always called with arch === 'web.browser'\nvar memoizedBoilerplate = {};\nvar getBoilerplate = function (request, arch) {\n\n  var htmlAttributes = getHtmlAttributes(request);\n\n  // The only thing that changes from request to request (for now) are\n  // the HTML attributes (used by, eg, appcache) and whether inline\n  // scripts are allowed, so we can memoize based on that.\n  var memHash = JSON.stringify({\n    inlineScriptsAllowed: inlineScriptsAllowed,\n    htmlAttributes: htmlAttributes,\n    arch: arch\n  });\n\n  if (! memoizedBoilerplate[memHash]) {\n    memoizedBoilerplate[memHash] = boilerplateByArch[arch].toHTML({\n      htmlAttributes: htmlAttributes\n    });\n  }\n  return memoizedBoilerplate[memHash];\n};\n\nWebAppInternals.generateBoilerplateInstance = function (arch,\n                                                        manifest,\n                                                        additionalOptions) {\n  additionalOptions = additionalOptions || {};\n\n  var runtimeConfig = _.extend(\n    _.clone(__meteor_runtime_config__),\n    additionalOptions.runtimeConfigOverrides || {}\n  );\n\n  var jsCssUrlRewriteHook = bundledJsCssUrlRewriteHook || function (url) {\n    var bundledPrefix =\n       __meteor_runtime_config__.ROOT_URL_PATH_PREFIX || '';\n    return bundledPrefix + url;\n  };\n\n  return new Boilerplate(arch, manifest,\n    _.extend({\n      pathMapper: function (itemPath) {\n        return path.join(archPath[arch], itemPath); },\n      baseDataExtension: {\n        additionalStaticJs: _.map(\n          additionalStaticJs || [],\n          function (contents, pathname) {\n            return {\n              pathname: pathname,\n              contents: contents\n            };\n          }\n        ),\n        // Convert to a JSON string, then get rid of most weird characters, then\n        // wrap in double quotes. (The outermost JSON.stringify really ought to\n        // just be \"wrap in double quotes\" but we use it to be safe.) This might\n        // end up inside a <script> tag so we need to be careful to not include\n        // \"</script>\", but normal {{spacebars}} escaping escapes too much! See\n        // https://github.com/meteor/meteor/issues/3730\n        meteorRuntimeConfig: JSON.stringify(\n          encodeURIComponent(JSON.stringify(runtimeConfig))),\n        rootUrlPathPrefix: __meteor_runtime_config__.ROOT_URL_PATH_PREFIX || '',\n        bundledJsCssUrlRewriteHook: jsCssUrlRewriteHook,\n        inlineScriptsAllowed: WebAppInternals.inlineScriptsAllowed(),\n        inline: additionalOptions.inline\n      }\n    }, additionalOptions)\n  );\n};\n\n// A mapping from url path to \"info\". Where \"info\" has the following fields:\n// - type: the type of file to be served\n// - cacheable: optionally, whether the file should be cached or not\n// - sourceMapUrl: optionally, the url of the source map\n//\n// Info also contains one of the following:\n// - content: the stringified content that should be served at this path\n// - absolutePath: the absolute path on disk to the file\n\nvar staticFiles;\n\n// Serve static files from the manifest or added with\n// `addStaticJs`. Exported for tests.\nWebAppInternals.staticFilesMiddleware = function (staticFiles, req, res, next) {\n  if ('GET' != req.method && 'HEAD' != req.method) {\n    next();\n    return;\n  }\n  var pathname = connect.utils.parseUrl(req).pathname;\n  try {\n    pathname = decodeURIComponent(pathname);\n  } catch (e) {\n    next();\n    return;\n  }\n\n  var serveStaticJs = function (s) {\n    res.writeHead(200, {\n      'Content-type': 'application/javascript; charset=UTF-8'\n    });\n    res.write(s);\n    res.end();\n  };\n\n  if (pathname === \"/meteor_runtime_config.js\" &&\n      ! WebAppInternals.inlineScriptsAllowed()) {\n    serveStaticJs(\"__meteor_runtime_config__ = \" +\n                  JSON.stringify(__meteor_runtime_config__) + \";\");\n    return;\n  } else if (_.has(additionalStaticJs, pathname) &&\n              ! WebAppInternals.inlineScriptsAllowed()) {\n    serveStaticJs(additionalStaticJs[pathname]);\n    return;\n  }\n\n  if (!_.has(staticFiles, pathname)) {\n    next();\n    return;\n  }\n\n  // We don't need to call pause because, unlike 'static', once we call into\n  // 'send' and yield to the event loop, we never call another handler with\n  // 'next'.\n\n  var info = staticFiles[pathname];\n\n  // Cacheable files are files that should never change. Typically\n  // named by their hash (eg meteor bundled js and css files).\n  // We cache them ~forever (1yr).\n  //\n  // We cache non-cacheable files anyway. This isn't really correct, as users\n  // can change the files and changes won't propagate immediately. However, if\n  // we don't cache them, browsers will 'flicker' when rerendering\n  // images. Eventually we will probably want to rewrite URLs of static assets\n  // to include a query parameter to bust caches. That way we can both get\n  // good caching behavior and allow users to change assets without delay.\n  // https://github.com/meteor/meteor/issues/773\n  var maxAge = info.cacheable\n        ? 1000 * 60 * 60 * 24 * 365\n        : 1000 * 60 * 60 * 24;\n\n  // Set the X-SourceMap header, which current Chrome, FireFox, and Safari\n  // understand.  (The SourceMap header is slightly more spec-correct but FF\n  // doesn't understand it.)\n  //\n  // You may also need to enable source maps in Chrome: open dev tools, click\n  // the gear in the bottom right corner, and select \"enable source maps\".\n  if (info.sourceMapUrl) {\n    res.setHeader('X-SourceMap',\n                  __meteor_runtime_config__.ROOT_URL_PATH_PREFIX +\n                  info.sourceMapUrl);\n  }\n\n  if (info.type === \"js\") {\n    res.setHeader(\"Content-Type\", \"application/javascript; charset=UTF-8\");\n  } else if (info.type === \"css\") {\n    res.setHeader(\"Content-Type\", \"text/css; charset=UTF-8\");\n  } else if (info.type === \"json\") {\n    res.setHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    // XXX if it is a manifest we are serving, set additional headers\n    if (/\\/manifest\\.json$/.test(pathname)) {\n      res.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n    }\n  }\n\n  if (info.content) {\n    res.write(info.content);\n    res.end();\n  } else {\n    send(req, info.absolutePath)\n      .maxage(maxAge)\n      .hidden(true)  // if we specified a dotfile in the manifest, serve it\n      .on('error', function (err) {\n        Log.error(\"Error serving static file \" + err);\n        res.writeHead(500);\n        res.end();\n      })\n      .on('directory', function () {\n        Log.error(\"Unexpected directory \" + info.absolutePath);\n        res.writeHead(500);\n        res.end();\n      })\n      .pipe(res);\n  }\n};\n\nvar getUrlPrefixForArch = function (arch) {\n  // XXX we rely on the fact that arch names don't contain slashes\n  // in that case we would need to uri escape it\n\n  // We add '__' to the beginning of non-standard archs to \"scope\" the url\n  // to Meteor internals.\n  return arch === WebApp.defaultArch ?\n    '' : '/' + '__' + arch.replace(/^web\\./, '');\n};\n\n// parse port to see if its a Windows Server style named pipe. If so, return as-is (String), otherwise return as Int\nWebAppInternals.parsePort = function (port) {\n  if( /\\\\\\\\?.+\\\\pipe\\\\?.+/.test(port) ) {\n    return port;\n  }\n\n  return parseInt(port);\n};\n\nvar runWebAppServer = function () {\n  var shuttingDown = false;\n  var syncQueue = new Meteor._SynchronousQueue();\n\n  var getItemPathname = function (itemUrl) {\n    return decodeURIComponent(url.parse(itemUrl).pathname);\n  };\n\n  WebAppInternals.reloadClientPrograms = function () {\n    syncQueue.runTask(function() {\n      staticFiles = {};\n      var generateClientProgram = function (clientPath, arch) {\n        // read the control for the client we'll be serving up\n        var clientJsonPath = path.join(__meteor_bootstrap__.serverDir,\n                                   clientPath);\n        var clientDir = path.dirname(clientJsonPath);\n        var clientJson = JSON.parse(readUtf8FileSync(clientJsonPath));\n        if (clientJson.format !== \"web-program-pre1\")\n          throw new Error(\"Unsupported format for client assets: \" +\n                          JSON.stringify(clientJson.format));\n\n        if (! clientJsonPath || ! clientDir || ! clientJson)\n          throw new Error(\"Client config file not parsed.\");\n\n        var urlPrefix = getUrlPrefixForArch(arch);\n\n        var manifest = clientJson.manifest;\n        _.each(manifest, function (item) {\n          if (item.url && item.where === \"client\") {\n            staticFiles[urlPrefix + getItemPathname(item.url)] = {\n              absolutePath: path.join(clientDir, item.path),\n              cacheable: item.cacheable,\n              // Link from source to its map\n              sourceMapUrl: item.sourceMapUrl,\n              type: item.type\n            };\n\n            if (item.sourceMap) {\n              // Serve the source map too, under the specified URL. We assume all\n              // source maps are cacheable.\n              staticFiles[urlPrefix + getItemPathname(item.sourceMapUrl)] = {\n                absolutePath: path.join(clientDir, item.sourceMap),\n                cacheable: true\n              };\n            }\n          }\n        });\n\n        var program = {\n          manifest: manifest,\n          version: WebAppHashing.calculateClientHash(manifest, null, _.pick(\n            __meteor_runtime_config__, 'PUBLIC_SETTINGS')),\n          PUBLIC_SETTINGS: __meteor_runtime_config__.PUBLIC_SETTINGS\n        };\n\n        WebApp.clientPrograms[arch] = program;\n\n        // Serve the program as a string at /foo/<arch>/manifest.json\n        // XXX change manifest.json -> program.json\n        staticFiles[path.join(urlPrefix, getItemPathname('/manifest.json'))] = {\n          content: JSON.stringify(program),\n          cacheable: true,\n          type: \"json\"\n        };\n      };\n\n      try {\n        var clientPaths = __meteor_bootstrap__.configJson.clientPaths;\n        _.each(clientPaths, function (clientPath, arch) {\n          archPath[arch] = path.dirname(clientPath);\n          generateClientProgram(clientPath, arch);\n        });\n\n        // Exported for tests.\n        WebAppInternals.staticFiles = staticFiles;\n      } catch (e) {\n        Log.error(\"Error reloading the client program: \" + e.stack);\n        process.exit(1);\n      }\n    });\n  };\n\n  WebAppInternals.generateBoilerplate = function () {\n    // This boilerplate will be served to the mobile devices when used with\n    // Meteor/Cordova for the Hot-Code Push and since the file will be served by\n    // the device's server, it is important to set the DDP url to the actual\n    // Meteor server accepting DDP connections and not the device's file server.\n    var defaultOptionsForArch = {\n      'web.cordova': {\n        runtimeConfigOverrides: {\n          // XXX We use absoluteUrl() here so that we serve https://\n          // URLs to cordova clients if force-ssl is in use. If we were\n          // to use __meteor_runtime_config__.ROOT_URL instead of\n          // absoluteUrl(), then Cordova clients would immediately get a\n          // HCP setting their DDP_DEFAULT_CONNECTION_URL to\n          // http://example.meteor.com. This breaks the app, because\n          // force-ssl doesn't serve CORS headers on 302\n          // redirects. (Plus it's undesirable to have clients\n          // connecting to http://example.meteor.com when force-ssl is\n          // in use.)\n          DDP_DEFAULT_CONNECTION_URL: process.env.MOBILE_DDP_URL ||\n            Meteor.absoluteUrl(),\n          ROOT_URL: process.env.MOBILE_ROOT_URL ||\n            Meteor.absoluteUrl()\n        }\n      }\n    };\n\n    syncQueue.runTask(function() {\n      _.each(WebApp.clientPrograms, function (program, archName) {\n        boilerplateByArch[archName] =\n          WebAppInternals.generateBoilerplateInstance(\n            archName, program.manifest,\n            defaultOptionsForArch[archName]);\n      });\n\n      // Clear the memoized boilerplate cache.\n      memoizedBoilerplate = {};\n\n      // Configure CSS injection for the default arch\n      // XXX implement the CSS injection for all archs?\n      WebAppInternals.refreshableAssets = {\n        allCss: boilerplateByArch[WebApp.defaultArch].baseData.css\n      };\n    });\n  };\n\n  WebAppInternals.reloadClientPrograms();\n\n  // webserver\n  var app = connect();\n\n  // Auto-compress any json, javascript, or text.\n  app.use(connect.compress());\n\n  // Packages and apps can add handlers that run before any other Meteor\n  // handlers via WebApp.rawConnectHandlers.\n  var rawConnectHandlers = connect();\n  app.use(rawConnectHandlers);\n\n  // We're not a proxy; reject (without crashing) attempts to treat us like\n  // one. (See #1212.)\n  app.use(function(req, res, next) {\n    if (RoutePolicy.isValidUrl(req.url)) {\n      next();\n      return;\n    }\n    res.writeHead(400);\n    res.write(\"Not a proxy\");\n    res.end();\n  });\n\n  // Strip off the path prefix, if it exists.\n  app.use(function (request, response, next) {\n    var pathPrefix = __meteor_runtime_config__.ROOT_URL_PATH_PREFIX;\n    var url = Npm.require('url').parse(request.url);\n    var pathname = url.pathname;\n    // check if the path in the url starts with the path prefix (and the part\n    // after the path prefix must start with a / if it exists.)\n    if (pathPrefix && pathname.substring(0, pathPrefix.length) === pathPrefix &&\n       (pathname.length == pathPrefix.length\n        || pathname.substring(pathPrefix.length, pathPrefix.length + 1) === \"/\")) {\n      request.url = request.url.substring(pathPrefix.length);\n      next();\n    } else if (pathname === \"/favicon.ico\" || pathname === \"/robots.txt\") {\n      next();\n    } else if (pathPrefix) {\n      response.writeHead(404);\n      response.write(\"Unknown path\");\n      response.end();\n    } else {\n      next();\n    }\n  });\n\n  // Parse the query string into res.query. Used by oauth_server, but it's\n  // generally pretty handy..\n  app.use(connect.query());\n\n  // Serve static files from the manifest.\n  // This is inspired by the 'static' middleware.\n  app.use(function (req, res, next) {\n    Fiber(function () {\n     WebAppInternals.staticFilesMiddleware(staticFiles, req, res, next);\n    }).run();\n  });\n\n  // Packages and apps can add handlers to this via WebApp.connectHandlers.\n  // They are inserted before our default handler.\n  var packageAndAppHandlers = connect();\n  app.use(packageAndAppHandlers);\n\n  var suppressConnectErrors = false;\n  // connect knows it is an error handler because it has 4 arguments instead of\n  // 3. go figure.  (It is not smart enough to find such a thing if it's hidden\n  // inside packageAndAppHandlers.)\n  app.use(function (err, req, res, next) {\n    if (!err || !suppressConnectErrors || !req.headers['x-suppress-error']) {\n      next(err);\n      return;\n    }\n    res.writeHead(err.status, { 'Content-Type': 'text/plain' });\n    res.end(\"An error message\");\n  });\n\n  app.use(function (req, res, next) {\n    if (! appUrl(req.url))\n      return next();\n\n    var headers = {\n      'Content-Type':  'text/html; charset=utf-8'\n    };\n    if (shuttingDown)\n      headers['Connection'] = 'Close';\n\n    var request = WebApp.categorizeRequest(req);\n\n    if (request.url.query && request.url.query['meteor_css_resource']) {\n      // In this case, we're requesting a CSS resource in the meteor-specific\n      // way, but we don't have it.  Serve a static css file that indicates that\n      // we didn't have it, so we can detect that and refresh.  Make sure\n      // that any proxies or CDNs don't cache this error!  (Normally proxies\n      // or CDNs are smart enough not to cache error pages, but in order to\n      // make this hack work, we need to return the CSS file as a 200, which\n      // would otherwise be cached.)\n      headers['Content-Type'] = 'text/css; charset=utf-8';\n      headers['Cache-Control'] = 'no-cache';\n      res.writeHead(200, headers);\n      res.write(\".meteor-css-not-found-error { width: 0px;}\");\n      res.end();\n      return undefined;\n    }\n\n    if (request.url.query && request.url.query['meteor_js_resource']) {\n      // Similarly, we're requesting a JS resource that we don't have.\n      // Serve an uncached 404. (We can't use the same hack we use for CSS,\n      // because actually acting on that hack requires us to have the JS\n      // already!)\n      headers['Cache-Control'] = 'no-cache';\n      res.writeHead(404, headers);\n      res.end(\"404 Not Found\");\n      return undefined;\n    }\n\n    // /packages/asdfsad ... /__cordova/dafsdf.js\n    var pathname = connect.utils.parseUrl(req).pathname;\n    var archKey = pathname.split('/')[1];\n    var archKeyCleaned = 'web.' + archKey.replace(/^__/, '');\n\n    if (! /^__/.test(archKey) || ! _.has(archPath, archKeyCleaned)) {\n      archKey = WebApp.defaultArch;\n    } else {\n      archKey = archKeyCleaned;\n    }\n\n    var boilerplate;\n    try {\n      boilerplate = getBoilerplate(request, archKey);\n    } catch (e) {\n      Log.error(\"Error running template: \" + e);\n      res.writeHead(500, headers);\n      res.end();\n      return undefined;\n    }\n\n    res.writeHead(200, headers);\n    res.write(boilerplate);\n    res.end();\n    return undefined;\n  });\n\n  // Return 404 by default, if no other handlers serve this URL.\n  app.use(function (req, res) {\n    res.writeHead(404);\n    res.end();\n  });\n\n\n  var httpServer = http.createServer(app);\n  var onListeningCallbacks = [];\n\n  // After 5 seconds w/o data on a socket, kill it.  On the other hand, if\n  // there's an outstanding request, give it a higher timeout instead (to avoid\n  // killing long-polling requests)\n  httpServer.setTimeout(SHORT_SOCKET_TIMEOUT);\n\n  // Do this here, and then also in livedata/stream_server.js, because\n  // stream_server.js kills all the current request handlers when installing its\n  // own.\n  httpServer.on('request', WebApp._timeoutAdjustmentRequestCallback);\n\n\n  // start up app\n  _.extend(WebApp, {\n    connectHandlers: packageAndAppHandlers,\n    rawConnectHandlers: rawConnectHandlers,\n    httpServer: httpServer,\n    // For testing.\n    suppressConnectErrors: function () {\n      suppressConnectErrors = true;\n    },\n    onListening: function (f) {\n      if (onListeningCallbacks)\n        onListeningCallbacks.push(f);\n      else\n        f();\n    }\n  });\n\n  // Let the rest of the packages (and Meteor.startup hooks) insert connect\n  // middlewares and update __meteor_runtime_config__, then keep going to set up\n  // actually serving HTML.\n  main = function (argv) {\n    WebAppInternals.generateBoilerplate();\n\n    // only start listening after all the startup code has run.\n    var localPort = WebAppInternals.parsePort(process.env.PORT) || 0;\n    var host = process.env.BIND_IP;\n    var localIp = host || '0.0.0.0';\n    httpServer.listen(localPort, localIp, Meteor.bindEnvironment(function() {\n      if (process.env.METEOR_PRINT_ON_LISTEN)\n        console.log(\"LISTENING\"); // must match run-app.js\n\n      var callbacks = onListeningCallbacks;\n      onListeningCallbacks = null;\n      _.each(callbacks, function (x) { x(); });\n\n    }, function (e) {\n      console.error(\"Error listening:\", e);\n      console.error(e && e.stack);\n    }));\n\n    return 'DAEMON';\n  };\n};\n\n\nrunWebAppServer();\n\n\nvar inlineScriptsAllowed = true;\n\nWebAppInternals.inlineScriptsAllowed = function () {\n  return inlineScriptsAllowed;\n};\n\nWebAppInternals.setInlineScriptsAllowed = function (value) {\n  inlineScriptsAllowed = value;\n  WebAppInternals.generateBoilerplate();\n};\n\n\nWebAppInternals.setBundledJsCssUrlRewriteHook = function (hookFn) {\n  bundledJsCssUrlRewriteHook = hookFn;\n  WebAppInternals.generateBoilerplate();\n};\n\nWebAppInternals.setBundledJsCssPrefix = function (prefix) {\n  var self = this;\n  self.setBundledJsCssUrlRewriteHook(\n    function (url) {\n      return prefix + url;\n  });\n};\n\n// Packages can call `WebAppInternals.addStaticJs` to specify static\n// JavaScript to be included in the app. This static JS will be inlined,\n// unless inline scripts have been disabled, in which case it will be\n// served under `/<sha1 of contents>`.\nvar additionalStaticJs = {};\nWebAppInternals.addStaticJs = function (contents) {\n  additionalStaticJs[\"/\" + sha1(contents) + \".js\"] = contents;\n};\n\n// Exported for tests\nWebAppInternals.getBoilerplate = getBoilerplate;\nWebAppInternals.additionalStaticJs = additionalStaticJs;\n"]}}]