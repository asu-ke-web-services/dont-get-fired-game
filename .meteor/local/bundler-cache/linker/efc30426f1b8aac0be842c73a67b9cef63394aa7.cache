[{"type":"js","data":"(function () {\n\n/* Imports */\nvar _ = Package.underscore._;\nvar process = Package.meteor.process;\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar EventEmitter = Package['raix:eventemitter'].EventEmitter;\nvar Util = Package['meteorspark:util'].Util;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar HTTP = Package['cfs:http-methods'].HTTP;\n\n/* Package-scope variables */\nvar globals, TAPi18next, __coffeescriptShare, TAPi18n;\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/tap_i18n/lib/globals.js                                                                                   //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n// The globals object will be accessible to the build plugin, the server and                                          // 1\n// the client                                                                                                         // 2\n                                                                                                                      // 3\nglobals = {                                                                                                           // 4\n  fallback_language: \"en\",                                                                                            // 5\n  langauges_tags_regex: \"([a-z]{2})(-[A-Z]{2})?\",                                                                     // 6\n  project_translations_domain: \"project\",                                                                             // 7\n  browser_path: \"/tap-i18n\",                                                                                          // 8\n  debug: false                                                                                                        // 9\n};                                                                                                                    // 10\n                                                                                                                      // 11\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/tap_i18n/lib/tap_i18next/tap_i18next-1.7.3.js                                                             //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n// tap_i18next is a copy of i18next that expose i18next to the global namespace                                       // 1\n// under the name name TAPi18next instead of i18n to (1) avoid interfering with other                                 // 2\n// Meteor packages that might use i18n with different configurations than we do                                       // 3\n// or worse - (2) using a different version of i18next                                                                // 4\n//                                                                                                                    // 5\n// setJqueryExt is disabled by default in TAPi18next                                                                  // 6\n// sprintf is a default postProcess in TAPi18next                                                                     // 7\n//                                                                                                                    // 8\n// TAPi18next is set outside of the singleton builder to make it available in the                                     // 9\n// package level                                                                                                      // 10\n                                                                                                                      // 11\n// i18next, v1.7.3                                                                                                    // 12\n// Copyright (c)2014 Jan MÃ¼hlemann (jamuhl).                                                                          // 13\n// Distributed under MIT license                                                                                      // 14\n// http://i18next.com                                                                                                 // 15\n                                                                                                                      // 16\n// set TAPi18next outseid of the singleton builder to make it available in the package level                          // 17\nTAPi18next = {};                                                                                                      // 18\n(function() {                                                                                                         // 19\n                                                                                                                      // 20\n    // add indexOf to non ECMA-262 standard compliant browsers                                                        // 21\n    if (!Array.prototype.indexOf) {                                                                                   // 22\n        Array.prototype.indexOf = function (searchElement /*, fromIndex */ ) {                                        // 23\n            \"use strict\";                                                                                             // 24\n            if (this == null) {                                                                                       // 25\n                throw new TypeError();                                                                                // 26\n            }                                                                                                         // 27\n            var t = Object(this);                                                                                     // 28\n            var len = t.length >>> 0;                                                                                 // 29\n            if (len === 0) {                                                                                          // 30\n                return -1;                                                                                            // 31\n            }                                                                                                         // 32\n            var n = 0;                                                                                                // 33\n            if (arguments.length > 0) {                                                                               // 34\n                n = Number(arguments[1]);                                                                             // 35\n                if (n != n) { // shortcut for verifying if it's NaN                                                   // 36\n                    n = 0;                                                                                            // 37\n                } else if (n != 0 && n != Infinity && n != -Infinity) {                                               // 38\n                    n = (n > 0 || -1) * Math.floor(Math.abs(n));                                                      // 39\n                }                                                                                                     // 40\n            }                                                                                                         // 41\n            if (n >= len) {                                                                                           // 42\n                return -1;                                                                                            // 43\n            }                                                                                                         // 44\n            var k = n >= 0 ? n : Math.max(len - Math.abs(n), 0);                                                      // 45\n            for (; k < len; k++) {                                                                                    // 46\n                if (k in t && t[k] === searchElement) {                                                               // 47\n                    return k;                                                                                         // 48\n                }                                                                                                     // 49\n            }                                                                                                         // 50\n            return -1;                                                                                                // 51\n        }                                                                                                             // 52\n    }                                                                                                                 // 53\n                                                                                                                      // 54\n    // add lastIndexOf to non ECMA-262 standard compliant browsers                                                    // 55\n    if (!Array.prototype.lastIndexOf) {                                                                               // 56\n        Array.prototype.lastIndexOf = function(searchElement /*, fromIndex*/) {                                       // 57\n            \"use strict\";                                                                                             // 58\n            if (this == null) {                                                                                       // 59\n                throw new TypeError();                                                                                // 60\n            }                                                                                                         // 61\n            var t = Object(this);                                                                                     // 62\n            var len = t.length >>> 0;                                                                                 // 63\n            if (len === 0) {                                                                                          // 64\n                return -1;                                                                                            // 65\n            }                                                                                                         // 66\n            var n = len;                                                                                              // 67\n            if (arguments.length > 1) {                                                                               // 68\n                n = Number(arguments[1]);                                                                             // 69\n                if (n != n) {                                                                                         // 70\n                    n = 0;                                                                                            // 71\n                } else if (n != 0 && n != (1 / 0) && n != -(1 / 0)) {                                                 // 72\n                    n = (n > 0 || -1) * Math.floor(Math.abs(n));                                                      // 73\n                }                                                                                                     // 74\n            }                                                                                                         // 75\n            var k = n >= 0 ? Math.min(n, len - 1) : len - Math.abs(n);                                                // 76\n            for (; k >= 0; k--) {                                                                                     // 77\n                if (k in t && t[k] === searchElement) {                                                               // 78\n                    return k;                                                                                         // 79\n                }                                                                                                     // 80\n            }                                                                                                         // 81\n            return -1;                                                                                                // 82\n        };                                                                                                            // 83\n    }                                                                                                                 // 84\n                                                                                                                      // 85\n    // Add string trim for IE8.                                                                                       // 86\n    if (typeof String.prototype.trim !== 'function') {                                                                // 87\n        String.prototype.trim = function() {                                                                          // 88\n            return this.replace(/^\\s+|\\s+$/g, '');                                                                    // 89\n        }                                                                                                             // 90\n    }                                                                                                                 // 91\n                                                                                                                      // 92\n    var root = this                                                                                                   // 93\n      , $ = root.jQuery || root.Zepto                                                                                 // 94\n      , resStore = {}                                                                                                 // 95\n      , currentLng                                                                                                    // 96\n      , replacementCounter = 0                                                                                        // 97\n      , languages = []                                                                                                // 98\n      , initialized = false;                                                                                          // 99\n                                                                                                                      // 100\n                                                                                                                      // 101\n    // Export the i18next object for **CommonJS**.                                                                    // 102\n    // If we're not in CommonJS, add `i18n` to the                                                                    // 103\n    // global object or to jquery.                                                                                    // 104\n    if (typeof module !== 'undefined' && module.exports) {                                                            // 105\n        module.exports = TAPi18next;                                                                                  // 106\n    } else {                                                                                                          // 107\n        if ($) {                                                                                                      // 108\n            $.TAPi18next = $.TAPi18next || TAPi18next;                                                                // 109\n        }                                                                                                             // 110\n                                                                                                                      // 111\n        root.TAPi18next = root.TAPi18next || TAPi18next;                                                              // 112\n    }                                                                                                                 // 113\n    // defaults                                                                                                       // 114\n    var o = {                                                                                                         // 115\n        lng: undefined,                                                                                               // 116\n        load: 'all',                                                                                                  // 117\n        preload: [],                                                                                                  // 118\n        lowerCaseLng: false,                                                                                          // 119\n        returnObjectTrees: false,                                                                                     // 120\n        fallbackLng: ['dev'],                                                                                         // 121\n        fallbackNS: [],                                                                                               // 122\n        detectLngQS: 'setLng',                                                                                        // 123\n        ns: 'translation',                                                                                            // 124\n        fallbackOnNull: true,                                                                                         // 125\n        fallbackOnEmpty: false,                                                                                       // 126\n        fallbackToDefaultNS: false,                                                                                   // 127\n        nsseparator: ':',                                                                                             // 128\n        keyseparator: '.',                                                                                            // 129\n        selectorAttr: 'data-i18n',                                                                                    // 130\n        debug: false,                                                                                                 // 131\n                                                                                                                      // 132\n        resGetPath: 'locales/__lng__/__ns__.json',                                                                    // 133\n        resPostPath: 'locales/add/__lng__/__ns__',                                                                    // 134\n                                                                                                                      // 135\n        getAsync: true,                                                                                               // 136\n        postAsync: true,                                                                                              // 137\n                                                                                                                      // 138\n        resStore: undefined,                                                                                          // 139\n        useLocalStorage: false,                                                                                       // 140\n        localStorageExpirationTime: 7*24*60*60*1000,                                                                  // 141\n                                                                                                                      // 142\n        dynamicLoad: false,                                                                                           // 143\n        sendMissing: false,                                                                                           // 144\n        sendMissingTo: 'fallback', // current | all                                                                   // 145\n        sendType: 'POST',                                                                                             // 146\n                                                                                                                      // 147\n        interpolationPrefix: '__',                                                                                    // 148\n        interpolationSuffix: '__',                                                                                    // 149\n        reusePrefix: '$t(',                                                                                           // 150\n        reuseSuffix: ')',                                                                                             // 151\n        pluralSuffix: '_plural',                                                                                      // 152\n        pluralNotFound: ['plural_not_found', Math.random()].join(''),                                                 // 153\n        contextNotFound: ['context_not_found', Math.random()].join(''),                                               // 154\n        escapeInterpolation: false,                                                                                   // 155\n                                                                                                                      // 156\n        setJqueryExt: false,                                                                                          // 157\n        defaultValueFromContent: true,                                                                                // 158\n        useDataAttrOptions: false,                                                                                    // 159\n        cookieExpirationTime: undefined,                                                                              // 160\n        useCookie: true,                                                                                              // 161\n        cookieName: 'TAPi18next',                                                                                     // 162\n        cookieDomain: undefined,                                                                                      // 163\n                                                                                                                      // 164\n        objectTreeKeyHandler: undefined,                                                                              // 165\n        postProcess: [\"sprintf\"],                                                                                     // 166\n        parseMissingKey: undefined,                                                                                   // 167\n                                                                                                                      // 168\n        shortcutFunction: 'sprintf' // or: defaultValue                                                               // 169\n    };                                                                                                                // 170\n    function _extend(target, source) {                                                                                // 171\n        if (!source || typeof source === 'function') {                                                                // 172\n            return target;                                                                                            // 173\n        }                                                                                                             // 174\n                                                                                                                      // 175\n        for (var attr in source) { target[attr] = source[attr]; }                                                     // 176\n        return target;                                                                                                // 177\n    }                                                                                                                 // 178\n                                                                                                                      // 179\n    function _each(object, callback, args) {                                                                          // 180\n        var name, i = 0,                                                                                              // 181\n            length = object.length,                                                                                   // 182\n            isObj = length === undefined || Object.prototype.toString.apply(object) !== '[object Array]' || typeof object === \"function\";\n                                                                                                                      // 184\n        if (args) {                                                                                                   // 185\n            if (isObj) {                                                                                              // 186\n                for (name in object) {                                                                                // 187\n                    if (callback.apply(object[name], args) === false) {                                               // 188\n                        break;                                                                                        // 189\n                    }                                                                                                 // 190\n                }                                                                                                     // 191\n            } else {                                                                                                  // 192\n                for ( ; i < length; ) {                                                                               // 193\n                    if (callback.apply(object[i++], args) === false) {                                                // 194\n                        break;                                                                                        // 195\n                    }                                                                                                 // 196\n                }                                                                                                     // 197\n            }                                                                                                         // 198\n                                                                                                                      // 199\n        // A special, fast, case for the most common use of each                                                      // 200\n        } else {                                                                                                      // 201\n            if (isObj) {                                                                                              // 202\n                for (name in object) {                                                                                // 203\n                    if (callback.call(object[name], name, object[name]) === false) {                                  // 204\n                        break;                                                                                        // 205\n                    }                                                                                                 // 206\n                }                                                                                                     // 207\n            } else {                                                                                                  // 208\n                for ( ; i < length; ) {                                                                               // 209\n                    if (callback.call(object[i], i, object[i++]) === false) {                                         // 210\n                        break;                                                                                        // 211\n                    }                                                                                                 // 212\n                }                                                                                                     // 213\n            }                                                                                                         // 214\n        }                                                                                                             // 215\n                                                                                                                      // 216\n        return object;                                                                                                // 217\n    }                                                                                                                 // 218\n                                                                                                                      // 219\n    var _entityMap = {                                                                                                // 220\n        \"&\": \"&amp;\",                                                                                                 // 221\n        \"<\": \"&lt;\",                                                                                                  // 222\n        \">\": \"&gt;\",                                                                                                  // 223\n        '\"': '&quot;',                                                                                                // 224\n        \"'\": '&#39;',                                                                                                 // 225\n        \"/\": '&#x2F;'                                                                                                 // 226\n    };                                                                                                                // 227\n                                                                                                                      // 228\n    function _escape(data) {                                                                                          // 229\n        if (typeof data === 'string') {                                                                               // 230\n            return data.replace(/[&<>\"'\\/]/g, function (s) {                                                          // 231\n                return _entityMap[s];                                                                                 // 232\n            });                                                                                                       // 233\n        }else{                                                                                                        // 234\n            return data;                                                                                              // 235\n        }                                                                                                             // 236\n    }                                                                                                                 // 237\n                                                                                                                      // 238\n    function _ajax(options) {                                                                                         // 239\n                                                                                                                      // 240\n        // v0.5.0 of https://github.com/goloroden/http.js                                                             // 241\n        var getXhr = function (callback) {                                                                            // 242\n            // Use the native XHR object if the browser supports it.                                                  // 243\n            if (window.XMLHttpRequest) {                                                                              // 244\n                return callback(null, new XMLHttpRequest());                                                          // 245\n            } else if (window.ActiveXObject) {                                                                        // 246\n                // In Internet Explorer check for ActiveX versions of the XHR object.                                 // 247\n                try {                                                                                                 // 248\n                    return callback(null, new ActiveXObject(\"Msxml2.XMLHTTP\"));                                       // 249\n                } catch (e) {                                                                                         // 250\n                    return callback(null, new ActiveXObject(\"Microsoft.XMLHTTP\"));                                    // 251\n                }                                                                                                     // 252\n            }                                                                                                         // 253\n                                                                                                                      // 254\n            // If no XHR support was found, throw an error.                                                           // 255\n            return callback(new Error());                                                                             // 256\n        };                                                                                                            // 257\n                                                                                                                      // 258\n        var encodeUsingUrlEncoding = function (data) {                                                                // 259\n            if(typeof data === 'string') {                                                                            // 260\n                return data;                                                                                          // 261\n            }                                                                                                         // 262\n                                                                                                                      // 263\n            var result = [];                                                                                          // 264\n            for(var dataItem in data) {                                                                               // 265\n                if(data.hasOwnProperty(dataItem)) {                                                                   // 266\n                    result.push(encodeURIComponent(dataItem) + '=' + encodeURIComponent(data[dataItem]));             // 267\n                }                                                                                                     // 268\n            }                                                                                                         // 269\n                                                                                                                      // 270\n            return result.join('&');                                                                                  // 271\n        };                                                                                                            // 272\n                                                                                                                      // 273\n        var utf8 = function (text) {                                                                                  // 274\n            text = text.replace(/\\r\\n/g, '\\n');                                                                       // 275\n            var result = '';                                                                                          // 276\n                                                                                                                      // 277\n            for(var i = 0; i < text.length; i++) {                                                                    // 278\n                var c = text.charCodeAt(i);                                                                           // 279\n                                                                                                                      // 280\n                if(c < 128) {                                                                                         // 281\n                        result += String.fromCharCode(c);                                                             // 282\n                } else if((c > 127) && (c < 2048)) {                                                                  // 283\n                        result += String.fromCharCode((c >> 6) | 192);                                                // 284\n                        result += String.fromCharCode((c & 63) | 128);                                                // 285\n                } else {                                                                                              // 286\n                        result += String.fromCharCode((c >> 12) | 224);                                               // 287\n                        result += String.fromCharCode(((c >> 6) & 63) | 128);                                         // 288\n                        result += String.fromCharCode((c & 63) | 128);                                                // 289\n                }                                                                                                     // 290\n            }                                                                                                         // 291\n                                                                                                                      // 292\n            return result;                                                                                            // 293\n        };                                                                                                            // 294\n                                                                                                                      // 295\n        var base64 = function (text) {                                                                                // 296\n            var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';                         // 297\n                                                                                                                      // 298\n            text = utf8(text);                                                                                        // 299\n            var result = '',                                                                                          // 300\n                    chr1, chr2, chr3,                                                                                 // 301\n                    enc1, enc2, enc3, enc4,                                                                           // 302\n                    i = 0;                                                                                            // 303\n                                                                                                                      // 304\n            do {                                                                                                      // 305\n                chr1 = text.charCodeAt(i++);                                                                          // 306\n                chr2 = text.charCodeAt(i++);                                                                          // 307\n                chr3 = text.charCodeAt(i++);                                                                          // 308\n                                                                                                                      // 309\n                enc1 = chr1 >> 2;                                                                                     // 310\n                enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);                                                               // 311\n                enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);                                                              // 312\n                enc4 = chr3 & 63;                                                                                     // 313\n                                                                                                                      // 314\n                if(isNaN(chr2)) {                                                                                     // 315\n                    enc3 = enc4 = 64;                                                                                 // 316\n                } else if(isNaN(chr3)) {                                                                              // 317\n                    enc4 = 64;                                                                                        // 318\n                }                                                                                                     // 319\n                                                                                                                      // 320\n                result +=                                                                                             // 321\n                    keyStr.charAt(enc1) +                                                                             // 322\n                    keyStr.charAt(enc2) +                                                                             // 323\n                    keyStr.charAt(enc3) +                                                                             // 324\n                    keyStr.charAt(enc4);                                                                              // 325\n                chr1 = chr2 = chr3 = '';                                                                              // 326\n                enc1 = enc2 = enc3 = enc4 = '';                                                                       // 327\n            } while(i < text.length);                                                                                 // 328\n                                                                                                                      // 329\n            return result;                                                                                            // 330\n        };                                                                                                            // 331\n                                                                                                                      // 332\n        var mergeHeaders = function () {                                                                              // 333\n            // Use the first header object as base.                                                                   // 334\n            var result = arguments[0];                                                                                // 335\n                                                                                                                      // 336\n            // Iterate through the remaining header objects and add them.                                             // 337\n            for(var i = 1; i < arguments.length; i++) {                                                               // 338\n                var currentHeaders = arguments[i];                                                                    // 339\n                for(var header in currentHeaders) {                                                                   // 340\n                    if(currentHeaders.hasOwnProperty(header)) {                                                       // 341\n                        result[header] = currentHeaders[header];                                                      // 342\n                    }                                                                                                 // 343\n                }                                                                                                     // 344\n            }                                                                                                         // 345\n                                                                                                                      // 346\n            // Return the merged headers.                                                                             // 347\n            return result;                                                                                            // 348\n        };                                                                                                            // 349\n                                                                                                                      // 350\n        var ajax = function (method, url, options, callback) {                                                        // 351\n            // Adjust parameters.                                                                                     // 352\n            if(typeof options === 'function') {                                                                       // 353\n                callback = options;                                                                                   // 354\n                options = {};                                                                                         // 355\n            }                                                                                                         // 356\n                                                                                                                      // 357\n            // Set default parameter values.                                                                          // 358\n            options.cache = options.cache || false;                                                                   // 359\n            options.data = options.data || {};                                                                        // 360\n            options.headers = options.headers || {};                                                                  // 361\n            options.jsonp = options.jsonp || false;                                                                   // 362\n            options.async = options.async === undefined ? true : options.async;                                       // 363\n                                                                                                                      // 364\n            // Merge the various header objects.                                                                      // 365\n            var headers = mergeHeaders({                                                                              // 366\n                'accept': '*/*',                                                                                      // 367\n                'content-type': 'application/x-www-form-urlencoded;charset=UTF-8'                                     // 368\n            }, ajax.headers, options.headers);                                                                        // 369\n                                                                                                                      // 370\n            // Encode the data according to the content-type.                                                         // 371\n            var payload;                                                                                              // 372\n            if (headers['content-type'] === 'application/json') {                                                     // 373\n                payload = JSON.stringify(options.data);                                                               // 374\n            } else {                                                                                                  // 375\n                payload = encodeUsingUrlEncoding(options.data);                                                       // 376\n            }                                                                                                         // 377\n                                                                                                                      // 378\n            // Specially prepare GET requests: Setup the query string, handle caching and make a JSONP call           // 379\n            // if neccessary.                                                                                         // 380\n            if(method === 'GET') {                                                                                    // 381\n                // Setup the query string.                                                                            // 382\n                var queryString = [];                                                                                 // 383\n                if(payload) {                                                                                         // 384\n                    queryString.push(payload);                                                                        // 385\n                    payload = null;                                                                                   // 386\n                }                                                                                                     // 387\n                                                                                                                      // 388\n                // Handle caching.                                                                                    // 389\n                if(!options.cache) {                                                                                  // 390\n                    queryString.push('_=' + (new Date()).getTime());                                                  // 391\n                }                                                                                                     // 392\n                                                                                                                      // 393\n                // If neccessary prepare the query string for a JSONP call.                                           // 394\n                if(options.jsonp) {                                                                                   // 395\n                    queryString.push('callback=' + options.jsonp);                                                    // 396\n                    queryString.push('jsonp=' + options.jsonp);                                                       // 397\n                }                                                                                                     // 398\n                                                                                                                      // 399\n                // Merge the query string and attach it to the url.                                                   // 400\n                queryString = queryString.join('&');                                                                  // 401\n                if (queryString.length > 1) {                                                                         // 402\n                    if (url.indexOf('?') > -1) {                                                                      // 403\n                        url += '&' + queryString;                                                                     // 404\n                    } else {                                                                                          // 405\n                        url += '?' + queryString;                                                                     // 406\n                    }                                                                                                 // 407\n                }                                                                                                     // 408\n                                                                                                                      // 409\n                // Make a JSONP call if neccessary.                                                                   // 410\n                if(options.jsonp) {                                                                                   // 411\n                    var head = document.getElementsByTagName('head')[0];                                              // 412\n                    var script = document.createElement('script');                                                    // 413\n                    script.type = 'text/javascript';                                                                  // 414\n                    script.src = url;                                                                                 // 415\n                    head.appendChild(script);                                                                         // 416\n                    return;                                                                                           // 417\n                }                                                                                                     // 418\n            }                                                                                                         // 419\n                                                                                                                      // 420\n            // Since we got here, it is no JSONP request, so make a normal XHR request.                               // 421\n            getXhr(function (err, xhr) {                                                                              // 422\n                if(err) return callback(err);                                                                         // 423\n                                                                                                                      // 424\n                // Open the request.                                                                                  // 425\n                xhr.open(method, url, options.async);                                                                 // 426\n                                                                                                                      // 427\n                // Set the request headers.                                                                           // 428\n                for(var header in headers) {                                                                          // 429\n                    if(headers.hasOwnProperty(header)) {                                                              // 430\n                        xhr.setRequestHeader(header, headers[header]);                                                // 431\n                    }                                                                                                 // 432\n                }                                                                                                     // 433\n                                                                                                                      // 434\n                // Handle the request events.                                                                         // 435\n                xhr.onreadystatechange = function () {                                                                // 436\n                    if(xhr.readyState === 4) {                                                                        // 437\n                        var data = xhr.responseText || '';                                                            // 438\n                                                                                                                      // 439\n                        // If no callback is given, return.                                                           // 440\n                        if(!callback) {                                                                               // 441\n                            return;                                                                                   // 442\n                        }                                                                                             // 443\n                                                                                                                      // 444\n                        // Return an object that provides access to the data as text and JSON.                        // 445\n                        callback(xhr.status, {                                                                        // 446\n                            text: function () {                                                                       // 447\n                                return data;                                                                          // 448\n                            },                                                                                        // 449\n                                                                                                                      // 450\n                            json: function () {                                                                       // 451\n                                return JSON.parse(data);                                                              // 452\n                            }                                                                                         // 453\n                        });                                                                                           // 454\n                    }                                                                                                 // 455\n                };                                                                                                    // 456\n                                                                                                                      // 457\n                // Actually send the XHR request.                                                                     // 458\n                xhr.send(payload);                                                                                    // 459\n            });                                                                                                       // 460\n        };                                                                                                            // 461\n                                                                                                                      // 462\n        // Define the external interface.                                                                             // 463\n        var http = {                                                                                                  // 464\n            authBasic: function (username, password) {                                                                // 465\n                ajax.headers['Authorization'] = 'Basic ' + base64(username + ':' + password);                         // 466\n            },                                                                                                        // 467\n                                                                                                                      // 468\n            connect: function (url, options, callback) {                                                              // 469\n                return ajax('CONNECT', url, options, callback);                                                       // 470\n            },                                                                                                        // 471\n                                                                                                                      // 472\n            del: function (url, options, callback) {                                                                  // 473\n                return ajax('DELETE', url, options, callback);                                                        // 474\n            },                                                                                                        // 475\n                                                                                                                      // 476\n            get: function (url, options, callback) {                                                                  // 477\n                return ajax('GET', url, options, callback);                                                           // 478\n            },                                                                                                        // 479\n                                                                                                                      // 480\n            head: function (url, options, callback) {                                                                 // 481\n                return ajax('HEAD', url, options, callback);                                                          // 482\n            },                                                                                                        // 483\n                                                                                                                      // 484\n            headers: function (headers) {                                                                             // 485\n                ajax.headers = headers || {};                                                                         // 486\n            },                                                                                                        // 487\n                                                                                                                      // 488\n            isAllowed: function (url, verb, callback) {                                                               // 489\n                this.options(url, function (status, data) {                                                           // 490\n                    callback(data.text().indexOf(verb) !== -1);                                                       // 491\n                });                                                                                                   // 492\n            },                                                                                                        // 493\n                                                                                                                      // 494\n            options: function (url, options, callback) {                                                              // 495\n                return ajax('OPTIONS', url, options, callback);                                                       // 496\n            },                                                                                                        // 497\n                                                                                                                      // 498\n            patch: function (url, options, callback) {                                                                // 499\n                return ajax('PATCH', url, options, callback);                                                         // 500\n            },                                                                                                        // 501\n                                                                                                                      // 502\n            post: function (url, options, callback) {                                                                 // 503\n                return ajax('POST', url, options, callback);                                                          // 504\n            },                                                                                                        // 505\n                                                                                                                      // 506\n            put: function (url, options, callback) {                                                                  // 507\n                return ajax('PUT', url, options, callback);                                                           // 508\n            },                                                                                                        // 509\n                                                                                                                      // 510\n            trace: function (url, options, callback) {                                                                // 511\n                return ajax('TRACE', url, options, callback);                                                         // 512\n            }                                                                                                         // 513\n        };                                                                                                            // 514\n                                                                                                                      // 515\n                                                                                                                      // 516\n        var methode = options.type ? options.type.toLowerCase() : 'get';                                              // 517\n                                                                                                                      // 518\n        http[methode](options.url, options, function (status, data) {                                                 // 519\n            if (status === 200) {                                                                                     // 520\n                options.success(data.json(), status, null);                                                           // 521\n            } else {                                                                                                  // 522\n                options.error(data.text(), status, null);                                                             // 523\n            }                                                                                                         // 524\n        });                                                                                                           // 525\n    }                                                                                                                 // 526\n                                                                                                                      // 527\n    var _cookie = {                                                                                                   // 528\n        create: function(name,value,minutes,domain) {                                                                 // 529\n            var expires;                                                                                              // 530\n            if (minutes) {                                                                                            // 531\n                var date = new Date();                                                                                // 532\n                date.setTime(date.getTime()+(minutes*60*1000));                                                       // 533\n                expires = \"; expires=\"+date.toGMTString();                                                            // 534\n            }                                                                                                         // 535\n            else expires = \"\";                                                                                        // 536\n            domain = (domain)? \"domain=\"+domain+\";\" : \"\";                                                             // 537\n            document.cookie = name+\"=\"+value+expires+\";\"+domain+\"path=/\";                                             // 538\n        },                                                                                                            // 539\n                                                                                                                      // 540\n        read: function(name) {                                                                                        // 541\n            var nameEQ = name + \"=\";                                                                                  // 542\n            var ca = document.cookie.split(';');                                                                      // 543\n            for(var i=0;i < ca.length;i++) {                                                                          // 544\n                var c = ca[i];                                                                                        // 545\n                while (c.charAt(0)==' ') c = c.substring(1,c.length);                                                 // 546\n                if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length,c.length);                              // 547\n            }                                                                                                         // 548\n            return null;                                                                                              // 549\n        },                                                                                                            // 550\n                                                                                                                      // 551\n        remove: function(name) {                                                                                      // 552\n            this.create(name,\"\",-1);                                                                                  // 553\n        }                                                                                                             // 554\n    };                                                                                                                // 555\n                                                                                                                      // 556\n    var cookie_noop = {                                                                                               // 557\n        create: function(name,value,minutes,domain) {},                                                               // 558\n        read: function(name) { return null; },                                                                        // 559\n        remove: function(name) {}                                                                                     // 560\n    };                                                                                                                // 561\n                                                                                                                      // 562\n                                                                                                                      // 563\n                                                                                                                      // 564\n    // move dependent functions to a container so that                                                                // 565\n    // they can be overriden easier in no jquery environment (node.js)                                                // 566\n    var f = {                                                                                                         // 567\n        extend: $ ? $.extend : _extend,                                                                               // 568\n        each: $ ? $.each : _each,                                                                                     // 569\n        ajax: $ ? $.ajax : (typeof document !== 'undefined' ? _ajax : function() {}),                                 // 570\n        cookie: typeof document !== 'undefined' ? _cookie : cookie_noop,                                              // 571\n        detectLanguage: detectLanguage,                                                                               // 572\n        escape: _escape,                                                                                              // 573\n        log: function(str) {                                                                                          // 574\n            if (o.debug && typeof console !== \"undefined\") console.log(str);                                          // 575\n        },                                                                                                            // 576\n        toLanguages: function(lng) {                                                                                  // 577\n            var languages = [];                                                                                       // 578\n            if (typeof lng === 'string' && lng.indexOf('-') > -1) {                                                   // 579\n                var parts = lng.split('-');                                                                           // 580\n                                                                                                                      // 581\n                lng = o.lowerCaseLng ?                                                                                // 582\n                    parts[0].toLowerCase() +  '-' + parts[1].toLowerCase() :                                          // 583\n                    parts[0].toLowerCase() +  '-' + parts[1].toUpperCase();                                           // 584\n                                                                                                                      // 585\n                if (o.load !== 'unspecific') languages.push(lng);                                                     // 586\n                if (o.load !== 'current') languages.push(parts[0]);                                                   // 587\n            } else {                                                                                                  // 588\n                languages.push(lng);                                                                                  // 589\n            }                                                                                                         // 590\n                                                                                                                      // 591\n            for (var i = 0; i < o.fallbackLng.length; i++) {                                                          // 592\n                if (languages.indexOf(o.fallbackLng[i]) === -1 && o.fallbackLng[i]) languages.push(o.fallbackLng[i]);\n            }                                                                                                         // 594\n                                                                                                                      // 595\n            return languages;                                                                                         // 596\n        },                                                                                                            // 597\n        regexEscape: function(str) {                                                                                  // 598\n            return str.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\");                                        // 599\n        }                                                                                                             // 600\n    };                                                                                                                // 601\n    function init(options, cb) {                                                                                      // 602\n                                                                                                                      // 603\n        if (typeof options === 'function') {                                                                          // 604\n            cb = options;                                                                                             // 605\n            options = {};                                                                                             // 606\n        }                                                                                                             // 607\n        options = options || {};                                                                                      // 608\n                                                                                                                      // 609\n        // override defaults with passed in options                                                                   // 610\n        f.extend(o, options);                                                                                         // 611\n        delete o.fixLng; /* passed in each time */                                                                    // 612\n                                                                                                                      // 613\n        // create namespace object if namespace is passed in as string                                                // 614\n        if (typeof o.ns == 'string') {                                                                                // 615\n            o.ns = { namespaces: [o.ns], defaultNs: o.ns};                                                            // 616\n        }                                                                                                             // 617\n                                                                                                                      // 618\n        // fallback namespaces                                                                                        // 619\n        if (typeof o.fallbackNS == 'string') {                                                                        // 620\n            o.fallbackNS = [o.fallbackNS];                                                                            // 621\n        }                                                                                                             // 622\n                                                                                                                      // 623\n        // fallback languages                                                                                         // 624\n        if (typeof o.fallbackLng == 'string' || typeof o.fallbackLng == 'boolean') {                                  // 625\n            o.fallbackLng = [o.fallbackLng];                                                                          // 626\n        }                                                                                                             // 627\n                                                                                                                      // 628\n        // escape prefix/suffix                                                                                       // 629\n        o.interpolationPrefixEscaped = f.regexEscape(o.interpolationPrefix);                                          // 630\n        o.interpolationSuffixEscaped = f.regexEscape(o.interpolationSuffix);                                          // 631\n                                                                                                                      // 632\n        if (!o.lng) o.lng = f.detectLanguage();                                                                       // 633\n        if (o.lng) {                                                                                                  // 634\n            // set cookie with lng set (as detectLanguage will set cookie on need)                                    // 635\n            if (o.useCookie) f.cookie.create(o.cookieName, o.lng, o.cookieExpirationTime, o.cookieDomain);            // 636\n        } else {                                                                                                      // 637\n            o.lng =  o.fallbackLng[0];                                                                                // 638\n            if (o.useCookie) f.cookie.remove(o.cookieName);                                                           // 639\n        }                                                                                                             // 640\n                                                                                                                      // 641\n        languages = f.toLanguages(o.lng);                                                                             // 642\n        currentLng = languages[0];                                                                                    // 643\n        f.log('currentLng set to: ' + currentLng);                                                                    // 644\n                                                                                                                      // 645\n        var lngTranslate = translate;                                                                                 // 646\n        if (options.fixLng) {                                                                                         // 647\n            lngTranslate = function(key, options) {                                                                   // 648\n                options = options || {};                                                                              // 649\n                options.lng = options.lng || lngTranslate.lng;                                                        // 650\n                return translate(key, options);                                                                       // 651\n            };                                                                                                        // 652\n            lngTranslate.lng = currentLng;                                                                            // 653\n        }                                                                                                             // 654\n                                                                                                                      // 655\n        pluralExtensions.setCurrentLng(currentLng);                                                                   // 656\n                                                                                                                      // 657\n        // add JQuery extensions                                                                                      // 658\n        if ($ && o.setJqueryExt) addJqueryFunct();                                                                    // 659\n                                                                                                                      // 660\n        // jQuery deferred                                                                                            // 661\n        var deferred;                                                                                                 // 662\n        if ($ && $.Deferred) {                                                                                        // 663\n            deferred = $.Deferred();                                                                                  // 664\n        }                                                                                                             // 665\n                                                                                                                      // 666\n        // return immidiatly if res are passed in                                                                     // 667\n        if (o.resStore) {                                                                                             // 668\n            resStore = o.resStore;                                                                                    // 669\n            initialized = true;                                                                                       // 670\n            if (cb) cb(lngTranslate);                                                                                 // 671\n            if (deferred) deferred.resolve(lngTranslate);                                                             // 672\n            if (deferred) return deferred.promise();                                                                  // 673\n            return;                                                                                                   // 674\n        }                                                                                                             // 675\n                                                                                                                      // 676\n        // languages to load                                                                                          // 677\n        var lngsToLoad = f.toLanguages(o.lng);                                                                        // 678\n        if (typeof o.preload === 'string') o.preload = [o.preload];                                                   // 679\n        for (var i = 0, l = o.preload.length; i < l; i++) {                                                           // 680\n            var pres = f.toLanguages(o.preload[i]);                                                                   // 681\n            for (var y = 0, len = pres.length; y < len; y++) {                                                        // 682\n                if (lngsToLoad.indexOf(pres[y]) < 0) {                                                                // 683\n                    lngsToLoad.push(pres[y]);                                                                         // 684\n                }                                                                                                     // 685\n            }                                                                                                         // 686\n        }                                                                                                             // 687\n                                                                                                                      // 688\n        // else load them                                                                                             // 689\n        TAPi18next.sync.load(lngsToLoad, o, function(err, store) {                                                    // 690\n            resStore = store;                                                                                         // 691\n            initialized = true;                                                                                       // 692\n                                                                                                                      // 693\n            if (cb) cb(lngTranslate);                                                                                 // 694\n            if (deferred) deferred.resolve(lngTranslate);                                                             // 695\n        });                                                                                                           // 696\n                                                                                                                      // 697\n        if (deferred) return deferred.promise();                                                                      // 698\n    }                                                                                                                 // 699\n    function preload(lngs, cb) {                                                                                      // 700\n        if (typeof lngs === 'string') lngs = [lngs];                                                                  // 701\n        for (var i = 0, l = lngs.length; i < l; i++) {                                                                // 702\n            if (o.preload.indexOf(lngs[i]) < 0) {                                                                     // 703\n                o.preload.push(lngs[i]);                                                                              // 704\n            }                                                                                                         // 705\n        }                                                                                                             // 706\n        return init(cb);                                                                                              // 707\n    }                                                                                                                 // 708\n                                                                                                                      // 709\n    function addResourceBundle(lng, ns, resources) {                                                                  // 710\n        if (typeof ns !== 'string') {                                                                                 // 711\n            resources = ns;                                                                                           // 712\n            ns = o.ns.defaultNs;                                                                                      // 713\n        } else if (o.ns.namespaces.indexOf(ns) < 0) {                                                                 // 714\n            o.ns.namespaces.push(ns);                                                                                 // 715\n        }                                                                                                             // 716\n                                                                                                                      // 717\n        resStore[lng] = resStore[lng] || {};                                                                          // 718\n        resStore[lng][ns] = resStore[lng][ns] || {};                                                                  // 719\n                                                                                                                      // 720\n        f.extend(resStore[lng][ns], resources);                                                                       // 721\n    }                                                                                                                 // 722\n                                                                                                                      // 723\n    function removeResourceBundle(lng, ns) {                                                                          // 724\n        if (typeof ns !== 'string') {                                                                                 // 725\n            ns = o.ns.defaultNs;                                                                                      // 726\n        }                                                                                                             // 727\n                                                                                                                      // 728\n        resStore[lng] = resStore[lng] || {};                                                                          // 729\n        resStore[lng][ns] = {};                                                                                       // 730\n    }                                                                                                                 // 731\n                                                                                                                      // 732\n    function setDefaultNamespace(ns) {                                                                                // 733\n        o.ns.defaultNs = ns;                                                                                          // 734\n    }                                                                                                                 // 735\n                                                                                                                      // 736\n    function loadNamespace(namespace, cb) {                                                                           // 737\n        loadNamespaces([namespace], cb);                                                                              // 738\n    }                                                                                                                 // 739\n                                                                                                                      // 740\n    function loadNamespaces(namespaces, cb) {                                                                         // 741\n        var opts = {                                                                                                  // 742\n            dynamicLoad: o.dynamicLoad,                                                                               // 743\n            resGetPath: o.resGetPath,                                                                                 // 744\n            getAsync: o.getAsync,                                                                                     // 745\n            customLoad: o.customLoad,                                                                                 // 746\n            ns: { namespaces: namespaces, defaultNs: ''} /* new namespaces to load */                                 // 747\n        };                                                                                                            // 748\n                                                                                                                      // 749\n        // languages to load                                                                                          // 750\n        var lngsToLoad = f.toLanguages(o.lng);                                                                        // 751\n        if (typeof o.preload === 'string') o.preload = [o.preload];                                                   // 752\n        for (var i = 0, l = o.preload.length; i < l; i++) {                                                           // 753\n            var pres = f.toLanguages(o.preload[i]);                                                                   // 754\n            for (var y = 0, len = pres.length; y < len; y++) {                                                        // 755\n                if (lngsToLoad.indexOf(pres[y]) < 0) {                                                                // 756\n                    lngsToLoad.push(pres[y]);                                                                         // 757\n                }                                                                                                     // 758\n            }                                                                                                         // 759\n        }                                                                                                             // 760\n                                                                                                                      // 761\n        // check if we have to load                                                                                   // 762\n        var lngNeedLoad = [];                                                                                         // 763\n        for (var a = 0, lenA = lngsToLoad.length; a < lenA; a++) {                                                    // 764\n            var needLoad = false;                                                                                     // 765\n            var resSet = resStore[lngsToLoad[a]];                                                                     // 766\n            if (resSet) {                                                                                             // 767\n                for (var b = 0, lenB = namespaces.length; b < lenB; b++) {                                            // 768\n                    if (!resSet[namespaces[b]]) needLoad = true;                                                      // 769\n                }                                                                                                     // 770\n            } else {                                                                                                  // 771\n                needLoad = true;                                                                                      // 772\n            }                                                                                                         // 773\n                                                                                                                      // 774\n            if (needLoad) lngNeedLoad.push(lngsToLoad[a]);                                                            // 775\n        }                                                                                                             // 776\n                                                                                                                      // 777\n        if (lngNeedLoad.length) {                                                                                     // 778\n            TAPi18next.sync._fetch(lngNeedLoad, opts, function(err, store) {                                          // 779\n                var todo = namespaces.length * lngNeedLoad.length;                                                    // 780\n                                                                                                                      // 781\n                // load each file individual                                                                          // 782\n                f.each(namespaces, function(nsIndex, nsValue) {                                                       // 783\n                                                                                                                      // 784\n                    // append namespace to namespace array                                                            // 785\n                    if (o.ns.namespaces.indexOf(nsValue) < 0) {                                                       // 786\n                        o.ns.namespaces.push(nsValue);                                                                // 787\n                    }                                                                                                 // 788\n                                                                                                                      // 789\n                    f.each(lngNeedLoad, function(lngIndex, lngValue) {                                                // 790\n                        resStore[lngValue] = resStore[lngValue] || {};                                                // 791\n                        resStore[lngValue][nsValue] = store[lngValue][nsValue];                                       // 792\n                                                                                                                      // 793\n                        todo--; // wait for all done befor callback                                                   // 794\n                        if (todo === 0 && cb) {                                                                       // 795\n                            if (o.useLocalStorage) TAPi18next.sync._storeLocal(resStore);                             // 796\n                            cb();                                                                                     // 797\n                        }                                                                                             // 798\n                    });                                                                                               // 799\n                });                                                                                                   // 800\n            });                                                                                                       // 801\n        } else {                                                                                                      // 802\n            if (cb) cb();                                                                                             // 803\n        }                                                                                                             // 804\n    }                                                                                                                 // 805\n                                                                                                                      // 806\n    function setLng(lng, options, cb) {                                                                               // 807\n        if (typeof options === 'function') {                                                                          // 808\n            cb = options;                                                                                             // 809\n            options = {};                                                                                             // 810\n        } else if (!options) {                                                                                        // 811\n            options = {};                                                                                             // 812\n        }                                                                                                             // 813\n                                                                                                                      // 814\n        options.lng = lng;                                                                                            // 815\n        return init(options, cb);                                                                                     // 816\n    }                                                                                                                 // 817\n                                                                                                                      // 818\n    function lng() {                                                                                                  // 819\n        return currentLng;                                                                                            // 820\n    }                                                                                                                 // 821\n    function addJqueryFunct() {                                                                                       // 822\n        // $.t shortcut                                                                                               // 823\n        $.t = $.t || translate;                                                                                       // 824\n                                                                                                                      // 825\n        function parse(ele, key, options) {                                                                           // 826\n            if (key.length === 0) return;                                                                             // 827\n                                                                                                                      // 828\n            var attr = 'text';                                                                                        // 829\n                                                                                                                      // 830\n            if (key.indexOf('[') === 0) {                                                                             // 831\n                var parts = key.split(']');                                                                           // 832\n                key = parts[1];                                                                                       // 833\n                attr = parts[0].substr(1, parts[0].length-1);                                                         // 834\n            }                                                                                                         // 835\n                                                                                                                      // 836\n            if (key.indexOf(';') === key.length-1) {                                                                  // 837\n                key = key.substr(0, key.length-2);                                                                    // 838\n            }                                                                                                         // 839\n                                                                                                                      // 840\n            var optionsToUse;                                                                                         // 841\n            if (attr === 'html') {                                                                                    // 842\n                optionsToUse = o.defaultValueFromContent ? $.extend({ defaultValue: ele.html() }, options) : options;\n                ele.html($.t(key, optionsToUse));                                                                     // 844\n            } else if (attr === 'text') {                                                                             // 845\n                optionsToUse = o.defaultValueFromContent ? $.extend({ defaultValue: ele.text() }, options) : options;\n                ele.text($.t(key, optionsToUse));                                                                     // 847\n            } else if (attr === 'prepend') {                                                                          // 848\n                optionsToUse = o.defaultValueFromContent ? $.extend({ defaultValue: ele.html() }, options) : options;\n                ele.prepend($.t(key, optionsToUse));                                                                  // 850\n            } else if (attr === 'append') {                                                                           // 851\n                optionsToUse = o.defaultValueFromContent ? $.extend({ defaultValue: ele.html() }, options) : options;\n                ele.append($.t(key, optionsToUse));                                                                   // 853\n            } else if (attr.indexOf(\"data-\") === 0) {                                                                 // 854\n                var dataAttr = attr.substr((\"data-\").length);                                                         // 855\n                optionsToUse = o.defaultValueFromContent ? $.extend({ defaultValue: ele.data(dataAttr) }, options) : options;\n                var translated = $.t(key, optionsToUse);                                                              // 857\n                //we change into the data cache                                                                       // 858\n                ele.data(dataAttr, translated);                                                                       // 859\n                //we change into the dom                                                                              // 860\n                ele.attr(attr, translated);                                                                           // 861\n            } else {                                                                                                  // 862\n                optionsToUse = o.defaultValueFromContent ? $.extend({ defaultValue: ele.attr(attr) }, options) : options;\n                ele.attr(attr, $.t(key, optionsToUse));                                                               // 864\n            }                                                                                                         // 865\n        }                                                                                                             // 866\n                                                                                                                      // 867\n        function localize(ele, options) {                                                                             // 868\n            var key = ele.attr(o.selectorAttr);                                                                       // 869\n            if (!key && typeof key !== 'undefined' && key !== false) key = ele.text() || ele.val();                   // 870\n            if (!key) return;                                                                                         // 871\n                                                                                                                      // 872\n            var target = ele                                                                                          // 873\n              , targetSelector = ele.data(\"i18n-target\");                                                             // 874\n            if (targetSelector) {                                                                                     // 875\n                target = ele.find(targetSelector) || ele;                                                             // 876\n            }                                                                                                         // 877\n                                                                                                                      // 878\n            if (!options && o.useDataAttrOptions === true) {                                                          // 879\n                options = ele.data(\"i18n-options\");                                                                   // 880\n            }                                                                                                         // 881\n            options = options || {};                                                                                  // 882\n                                                                                                                      // 883\n            if (key.indexOf(';') >= 0) {                                                                              // 884\n                var keys = key.split(';');                                                                            // 885\n                                                                                                                      // 886\n                $.each(keys, function(m, k) {                                                                         // 887\n                    if (k !== '') parse(target, k, options);                                                          // 888\n                });                                                                                                   // 889\n                                                                                                                      // 890\n            } else {                                                                                                  // 891\n                parse(target, key, options);                                                                          // 892\n            }                                                                                                         // 893\n                                                                                                                      // 894\n            if (o.useDataAttrOptions === true) ele.data(\"i18n-options\", options);                                     // 895\n        }                                                                                                             // 896\n                                                                                                                      // 897\n        // fn                                                                                                         // 898\n        $.fn.TAPi18next = function (options) {                                                                        // 899\n            return this.each(function() {                                                                             // 900\n                // localize element itself                                                                            // 901\n                localize($(this), options);                                                                           // 902\n                                                                                                                      // 903\n                // localize childs                                                                                    // 904\n                var elements =  $(this).find('[' + o.selectorAttr + ']');                                             // 905\n                elements.each(function() {                                                                            // 906\n                    localize($(this), options);                                                                       // 907\n                });                                                                                                   // 908\n            });                                                                                                       // 909\n        };                                                                                                            // 910\n    }                                                                                                                 // 911\n    function applyReplacement(str, replacementHash, nestedKey, options) {                                             // 912\n        if (!str) return str;                                                                                         // 913\n                                                                                                                      // 914\n        options = options || replacementHash; // first call uses replacement hash combined with options               // 915\n        if (str.indexOf(options.interpolationPrefix || o.interpolationPrefix) < 0) return str;                        // 916\n                                                                                                                      // 917\n        var prefix = options.interpolationPrefix ? f.regexEscape(options.interpolationPrefix) : o.interpolationPrefixEscaped\n          , suffix = options.interpolationSuffix ? f.regexEscape(options.interpolationSuffix) : o.interpolationSuffixEscaped\n          , unEscapingSuffix = 'HTML'+suffix;                                                                         // 920\n                                                                                                                      // 921\n        f.each(replacementHash, function(key, value) {                                                                // 922\n            var nextKey = nestedKey ? nestedKey + o.keyseparator + key : key;                                         // 923\n            if (typeof value === 'object' && value !== null) {                                                        // 924\n                str = applyReplacement(str, value, nextKey, options);                                                 // 925\n            } else {                                                                                                  // 926\n                if (options.escapeInterpolation || o.escapeInterpolation) {                                           // 927\n                    str = str.replace(new RegExp([prefix, nextKey, unEscapingSuffix].join(''), 'g'), value);          // 928\n                    str = str.replace(new RegExp([prefix, nextKey, suffix].join(''), 'g'), f.escape(value));          // 929\n                } else {                                                                                              // 930\n                    str = str.replace(new RegExp([prefix, nextKey, suffix].join(''), 'g'), value);                    // 931\n                }                                                                                                     // 932\n                // str = options.escapeInterpolation;                                                                 // 933\n            }                                                                                                         // 934\n        });                                                                                                           // 935\n        return str;                                                                                                   // 936\n    }                                                                                                                 // 937\n                                                                                                                      // 938\n    // append it to functions                                                                                         // 939\n    f.applyReplacement = applyReplacement;                                                                            // 940\n                                                                                                                      // 941\n    function applyReuse(translated, options) {                                                                        // 942\n        var comma = ',';                                                                                              // 943\n        var options_open = '{';                                                                                       // 944\n        var options_close = '}';                                                                                      // 945\n                                                                                                                      // 946\n        var opts = f.extend({}, options);                                                                             // 947\n        delete opts.postProcess;                                                                                      // 948\n                                                                                                                      // 949\n        while (translated.indexOf(o.reusePrefix) != -1) {                                                             // 950\n            replacementCounter++;                                                                                     // 951\n            if (replacementCounter > o.maxRecursion) { break; } // safety net for too much recursion                  // 952\n            var index_of_opening = translated.lastIndexOf(o.reusePrefix);                                             // 953\n            var index_of_end_of_closing = translated.indexOf(o.reuseSuffix, index_of_opening) + o.reuseSuffix.length;\n            var token = translated.substring(index_of_opening, index_of_end_of_closing);                              // 955\n            var token_without_symbols = token.replace(o.reusePrefix, '').replace(o.reuseSuffix, '');                  // 956\n                                                                                                                      // 957\n                                                                                                                      // 958\n            if (token_without_symbols.indexOf(comma) != -1) {                                                         // 959\n                var index_of_token_end_of_closing = token_without_symbols.indexOf(comma);                             // 960\n                if (token_without_symbols.indexOf(options_open, index_of_token_end_of_closing) != -1 && token_without_symbols.indexOf(options_close, index_of_token_end_of_closing) != -1) {\n                    var index_of_opts_opening = token_without_symbols.indexOf(options_open, index_of_token_end_of_closing);\n                    var index_of_opts_end_of_closing = token_without_symbols.indexOf(options_close, index_of_opts_opening) + options_close.length;\n                    try {                                                                                             // 964\n                        opts = f.extend(opts, JSON.parse(token_without_symbols.substring(index_of_opts_opening, index_of_opts_end_of_closing)));\n                        token_without_symbols = token_without_symbols.substring(0, index_of_token_end_of_closing);    // 966\n                    } catch (e) {                                                                                     // 967\n                    }                                                                                                 // 968\n                }                                                                                                     // 969\n            }                                                                                                         // 970\n                                                                                                                      // 971\n            var translated_token = _translate(token_without_symbols, opts);                                           // 972\n            translated = translated.replace(token, translated_token);                                                 // 973\n        }                                                                                                             // 974\n        return translated;                                                                                            // 975\n    }                                                                                                                 // 976\n                                                                                                                      // 977\n    function hasContext(options) {                                                                                    // 978\n        return (options.context && (typeof options.context == 'string' || typeof options.context == 'number'));       // 979\n    }                                                                                                                 // 980\n                                                                                                                      // 981\n    function needsPlural(options) {                                                                                   // 982\n        return (options.count !== undefined && typeof options.count != 'string' && options.count !== 1);              // 983\n    }                                                                                                                 // 984\n                                                                                                                      // 985\n    function exists(key, options) {                                                                                   // 986\n        options = options || {};                                                                                      // 987\n                                                                                                                      // 988\n        var notFound = _getDefaultValue(key, options)                                                                 // 989\n            , found = _find(key, options);                                                                            // 990\n                                                                                                                      // 991\n        return found !== undefined || found === notFound;                                                             // 992\n    }                                                                                                                 // 993\n                                                                                                                      // 994\n    function translate(key, options) {                                                                                // 995\n        if (typeof options === 'undefined') {                                                                         // 996\n          options = {};                                                                                               // 997\n        }                                                                                                             // 998\n                                                                                                                      // 999\n        if (!initialized) {                                                                                           // 1000\n            f.log('i18next not finished initialization. you might have called t function before loading resources finished.')\n            return options.defaultValue || '';                                                                        // 1002\n        };                                                                                                            // 1003\n        replacementCounter = 0;                                                                                       // 1004\n        return _translate.apply(null, arguments);                                                                     // 1005\n    }                                                                                                                 // 1006\n                                                                                                                      // 1007\n    function _getDefaultValue(key, options) {                                                                         // 1008\n        return (options.defaultValue !== undefined) ? options.defaultValue : key;                                     // 1009\n    }                                                                                                                 // 1010\n                                                                                                                      // 1011\n    function _injectSprintfProcessor() {                                                                              // 1012\n                                                                                                                      // 1013\n        var values = [];                                                                                              // 1014\n                                                                                                                      // 1015\n        // mh: build array from second argument onwards                                                               // 1016\n        for (var i = 1; i < arguments.length; i++) {                                                                  // 1017\n            values.push(arguments[i]);                                                                                // 1018\n        }                                                                                                             // 1019\n                                                                                                                      // 1020\n        return {                                                                                                      // 1021\n            postProcess: 'sprintf',                                                                                   // 1022\n            sprintf:     values                                                                                       // 1023\n        };                                                                                                            // 1024\n    }                                                                                                                 // 1025\n                                                                                                                      // 1026\n    function _translate(potentialKeys, options) {                                                                     // 1027\n        if (typeof options !== \"undefined\" && options !== null && typeof options !== 'object') {                      // 1028\n            if (o.shortcutFunction === 'sprintf') {                                                                   // 1029\n                // mh: gettext like sprintf syntax found, automatically create sprintf processor                      // 1030\n                options = _injectSprintfProcessor.apply(null, arguments);                                             // 1031\n            } else if (o.shortcutFunction === 'defaultValue') {                                                       // 1032\n                options = {                                                                                           // 1033\n                    defaultValue: options                                                                             // 1034\n                }                                                                                                     // 1035\n            }                                                                                                         // 1036\n        } else {                                                                                                      // 1037\n            options = options || {};                                                                                  // 1038\n        }                                                                                                             // 1039\n                                                                                                                      // 1040\n        if (potentialKeys === undefined || potentialKeys === null) return '';                                         // 1041\n                                                                                                                      // 1042\n        if (typeof potentialKeys == 'string') {                                                                       // 1043\n            potentialKeys = [potentialKeys];                                                                          // 1044\n        }                                                                                                             // 1045\n                                                                                                                      // 1046\n        var key = potentialKeys[0];                                                                                   // 1047\n                                                                                                                      // 1048\n        if (potentialKeys.length > 1) {                                                                               // 1049\n            for (var i = 0; i < potentialKeys.length; i++) {                                                          // 1050\n                key = potentialKeys[i];                                                                               // 1051\n                if (exists(key, options)) {                                                                           // 1052\n                    break;                                                                                            // 1053\n                }                                                                                                     // 1054\n            }                                                                                                         // 1055\n        }                                                                                                             // 1056\n                                                                                                                      // 1057\n        var notFound = _getDefaultValue(key, options)                                                                 // 1058\n            , found = _find(key, options)                                                                             // 1059\n            , lngs = options.lng ? f.toLanguages(options.lng) : languages                                             // 1060\n            , ns = options.ns || o.ns.defaultNs                                                                       // 1061\n            , parts;                                                                                                  // 1062\n                                                                                                                      // 1063\n        // split ns and key                                                                                           // 1064\n        if (key.indexOf(o.nsseparator) > -1) {                                                                        // 1065\n            parts = key.split(o.nsseparator);                                                                         // 1066\n            ns = parts[0];                                                                                            // 1067\n            key = parts[1];                                                                                           // 1068\n        }                                                                                                             // 1069\n                                                                                                                      // 1070\n        if (found === undefined && o.sendMissing) {                                                                   // 1071\n            if (options.lng) {                                                                                        // 1072\n                sync.postMissing(lngs[0], ns, key, notFound, lngs);                                                   // 1073\n            } else {                                                                                                  // 1074\n                sync.postMissing(o.lng, ns, key, notFound, lngs);                                                     // 1075\n            }                                                                                                         // 1076\n        }                                                                                                             // 1077\n                                                                                                                      // 1078\n        var postProcessor = options.postProcess || o.postProcess;                                                     // 1079\n        if (found !== undefined && postProcessor) {                                                                   // 1080\n            if (postProcessors[postProcessor]) {                                                                      // 1081\n                found = postProcessors[postProcessor](found, key, options);                                           // 1082\n            }                                                                                                         // 1083\n        }                                                                                                             // 1084\n                                                                                                                      // 1085\n        // process notFound if function exists                                                                        // 1086\n        var splitNotFound = notFound;                                                                                 // 1087\n        if (notFound.indexOf(o.nsseparator) > -1) {                                                                   // 1088\n            parts = notFound.split(o.nsseparator);                                                                    // 1089\n            splitNotFound = parts[1];                                                                                 // 1090\n        }                                                                                                             // 1091\n        if (splitNotFound === key && o.parseMissingKey) {                                                             // 1092\n            notFound = o.parseMissingKey(notFound);                                                                   // 1093\n        }                                                                                                             // 1094\n                                                                                                                      // 1095\n        if (found === undefined) {                                                                                    // 1096\n            notFound = applyReplacement(notFound, options);                                                           // 1097\n            notFound = applyReuse(notFound, options);                                                                 // 1098\n                                                                                                                      // 1099\n            if (postProcessor && postProcessors[postProcessor]) {                                                     // 1100\n                var val = _getDefaultValue(key, options);                                                             // 1101\n                found = postProcessors[postProcessor](val, key, options);                                             // 1102\n            }                                                                                                         // 1103\n        }                                                                                                             // 1104\n                                                                                                                      // 1105\n        return (found !== undefined) ? found : notFound;                                                              // 1106\n    }                                                                                                                 // 1107\n                                                                                                                      // 1108\n    function _find(key, options) {                                                                                    // 1109\n        options = options || {};                                                                                      // 1110\n                                                                                                                      // 1111\n        var optionWithoutCount, translated                                                                            // 1112\n            , notFound = _getDefaultValue(key, options)                                                               // 1113\n            , lngs = languages;                                                                                       // 1114\n                                                                                                                      // 1115\n        if (!resStore) { return notFound; } // no resStore to translate from                                          // 1116\n                                                                                                                      // 1117\n        // CI mode                                                                                                    // 1118\n        if (lngs[0].toLowerCase() === 'cimode') return notFound;                                                      // 1119\n                                                                                                                      // 1120\n        // passed in lng                                                                                              // 1121\n        if (options.lng) {                                                                                            // 1122\n            lngs = f.toLanguages(options.lng);                                                                        // 1123\n                                                                                                                      // 1124\n            if (!resStore[lngs[0]]) {                                                                                 // 1125\n                var oldAsync = o.getAsync;                                                                            // 1126\n                o.getAsync = false;                                                                                   // 1127\n                                                                                                                      // 1128\n                TAPi18next.sync.load(lngs, o, function(err, store) {                                                  // 1129\n                    f.extend(resStore, store);                                                                        // 1130\n                    o.getAsync = oldAsync;                                                                            // 1131\n                });                                                                                                   // 1132\n            }                                                                                                         // 1133\n        }                                                                                                             // 1134\n                                                                                                                      // 1135\n        var ns = options.ns || o.ns.defaultNs;                                                                        // 1136\n        if (key.indexOf(o.nsseparator) > -1) {                                                                        // 1137\n            var parts = key.split(o.nsseparator);                                                                     // 1138\n            ns = parts[0];                                                                                            // 1139\n            key = parts[1];                                                                                           // 1140\n        }                                                                                                             // 1141\n                                                                                                                      // 1142\n        if (hasContext(options)) {                                                                                    // 1143\n            optionWithoutCount = f.extend({}, options);                                                               // 1144\n            delete optionWithoutCount.context;                                                                        // 1145\n            optionWithoutCount.defaultValue = o.contextNotFound;                                                      // 1146\n                                                                                                                      // 1147\n            var contextKey = ns + o.nsseparator + key + '_' + options.context;                                        // 1148\n                                                                                                                      // 1149\n            translated = translate(contextKey, optionWithoutCount);                                                   // 1150\n            if (translated != o.contextNotFound) {                                                                    // 1151\n                return applyReplacement(translated, { context: options.context }); // apply replacement for context only\n            } // else continue translation with original/nonContext key                                               // 1153\n        }                                                                                                             // 1154\n                                                                                                                      // 1155\n        if (needsPlural(options)) {                                                                                   // 1156\n            optionWithoutCount = f.extend({}, options);                                                               // 1157\n            delete optionWithoutCount.count;                                                                          // 1158\n            optionWithoutCount.defaultValue = o.pluralNotFound;                                                       // 1159\n                                                                                                                      // 1160\n            var pluralKey = ns + o.nsseparator + key + o.pluralSuffix;                                                // 1161\n            var pluralExtension = pluralExtensions.get(lngs[0], options.count);                                       // 1162\n            if (pluralExtension >= 0) {                                                                               // 1163\n                pluralKey = pluralKey + '_' + pluralExtension;                                                        // 1164\n            } else if (pluralExtension === 1) {                                                                       // 1165\n                pluralKey = ns + o.nsseparator + key; // singular                                                     // 1166\n            }                                                                                                         // 1167\n                                                                                                                      // 1168\n            translated = translate(pluralKey, optionWithoutCount);                                                    // 1169\n            if (translated != o.pluralNotFound) {                                                                     // 1170\n                return applyReplacement(translated, {                                                                 // 1171\n                    count: options.count,                                                                             // 1172\n                    interpolationPrefix: options.interpolationPrefix,                                                 // 1173\n                    interpolationSuffix: options.interpolationSuffix                                                  // 1174\n                }); // apply replacement for count only                                                               // 1175\n            } // else continue translation with original/singular key                                                 // 1176\n        }                                                                                                             // 1177\n                                                                                                                      // 1178\n        var found;                                                                                                    // 1179\n        var keys = key.split(o.keyseparator);                                                                         // 1180\n        for (var i = 0, len = lngs.length; i < len; i++ ) {                                                           // 1181\n            if (found !== undefined) break;                                                                           // 1182\n                                                                                                                      // 1183\n            var l = lngs[i];                                                                                          // 1184\n                                                                                                                      // 1185\n            var x = 0;                                                                                                // 1186\n            var value = resStore[l] && resStore[l][ns];                                                               // 1187\n            while (keys[x]) {                                                                                         // 1188\n                value = value && value[keys[x]];                                                                      // 1189\n                x++;                                                                                                  // 1190\n            }                                                                                                         // 1191\n            if (value !== undefined) {                                                                                // 1192\n                var valueType = Object.prototype.toString.apply(value);                                               // 1193\n                if (typeof value === 'string') {                                                                      // 1194\n                    value = applyReplacement(value, options);                                                         // 1195\n                    value = applyReuse(value, options);                                                               // 1196\n                } else if (valueType === '[object Array]' && !o.returnObjectTrees && !options.returnObjectTrees) {    // 1197\n                    value = value.join('\\n');                                                                         // 1198\n                    value = applyReplacement(value, options);                                                         // 1199\n                    value = applyReuse(value, options);                                                               // 1200\n                } else if (value === null && o.fallbackOnNull === true) {                                             // 1201\n                    value = undefined;                                                                                // 1202\n                } else if (value !== null) {                                                                          // 1203\n                    if (!o.returnObjectTrees && !options.returnObjectTrees) {                                         // 1204\n                        if (o.objectTreeKeyHandler && typeof o.objectTreeKeyHandler == 'function') {                  // 1205\n                            value = o.objectTreeKeyHandler(key, value, l, ns, options);                               // 1206\n                        } else {                                                                                      // 1207\n                            value = 'key \\'' + ns + ':' + key + ' (' + l + ')\\' ' +                                   // 1208\n                                'returned an object instead of string.';                                              // 1209\n                            f.log(value);                                                                             // 1210\n                        }                                                                                             // 1211\n                    } else if (valueType !== '[object Number]' && valueType !== '[object Function]' && valueType !== '[object RegExp]') {\n                        var copy = (valueType === '[object Array]') ? [] : {}; // apply child translation on a copy   // 1213\n                        f.each(value, function(m) {                                                                   // 1214\n                            copy[m] = _translate(ns + o.nsseparator + key + o.keyseparator + m, options);             // 1215\n                        });                                                                                           // 1216\n                        value = copy;                                                                                 // 1217\n                    }                                                                                                 // 1218\n                }                                                                                                     // 1219\n                                                                                                                      // 1220\n                if (typeof value === 'string' && value.trim() === '' && o.fallbackOnEmpty === true)                   // 1221\n                    value = undefined;                                                                                // 1222\n                                                                                                                      // 1223\n                found = value;                                                                                        // 1224\n            }                                                                                                         // 1225\n        }                                                                                                             // 1226\n                                                                                                                      // 1227\n        if (found === undefined && !options.isFallbackLookup && (o.fallbackToDefaultNS === true || (o.fallbackNS && o.fallbackNS.length > 0))) {\n            // set flag for fallback lookup - avoid recursion                                                         // 1229\n            options.isFallbackLookup = true;                                                                          // 1230\n                                                                                                                      // 1231\n            if (o.fallbackNS.length) {                                                                                // 1232\n                                                                                                                      // 1233\n                for (var y = 0, lenY = o.fallbackNS.length; y < lenY; y++) {                                          // 1234\n                    found = _find(o.fallbackNS[y] + o.nsseparator + key, options);                                    // 1235\n                                                                                                                      // 1236\n                    if (found) {                                                                                      // 1237\n                        /* compare value without namespace */                                                         // 1238\n                        var foundValue = found.indexOf(o.nsseparator) > -1 ? found.split(o.nsseparator)[1] : found    // 1239\n                          , notFoundValue = notFound.indexOf(o.nsseparator) > -1 ? notFound.split(o.nsseparator)[1] : notFound;\n                                                                                                                      // 1241\n                        if (foundValue !== notFoundValue) break;                                                      // 1242\n                    }                                                                                                 // 1243\n                }                                                                                                     // 1244\n            } else {                                                                                                  // 1245\n                found = _find(key, options); // fallback to default NS                                                // 1246\n            }                                                                                                         // 1247\n        }                                                                                                             // 1248\n                                                                                                                      // 1249\n        return found;                                                                                                 // 1250\n    }                                                                                                                 // 1251\n    function detectLanguage() {                                                                                       // 1252\n        var detectedLng;                                                                                              // 1253\n                                                                                                                      // 1254\n        // get from qs                                                                                                // 1255\n        var qsParm = [];                                                                                              // 1256\n        if (typeof window !== 'undefined') {                                                                          // 1257\n            (function() {                                                                                             // 1258\n                var query = window.location.search.substring(1);                                                      // 1259\n                var parms = query.split('&');                                                                         // 1260\n                for (var i=0; i<parms.length; i++) {                                                                  // 1261\n                    var pos = parms[i].indexOf('=');                                                                  // 1262\n                    if (pos > 0) {                                                                                    // 1263\n                        var key = parms[i].substring(0,pos);                                                          // 1264\n                        var val = parms[i].substring(pos+1);                                                          // 1265\n                        qsParm[key] = val;                                                                            // 1266\n                    }                                                                                                 // 1267\n                }                                                                                                     // 1268\n            })();                                                                                                     // 1269\n            if (qsParm[o.detectLngQS]) {                                                                              // 1270\n                detectedLng = qsParm[o.detectLngQS];                                                                  // 1271\n            }                                                                                                         // 1272\n        }                                                                                                             // 1273\n                                                                                                                      // 1274\n        // get from cookie                                                                                            // 1275\n        if (!detectedLng && typeof document !== 'undefined' && o.useCookie ) {                                        // 1276\n            var c = f.cookie.read(o.cookieName);                                                                      // 1277\n            if (c) detectedLng = c;                                                                                   // 1278\n        }                                                                                                             // 1279\n                                                                                                                      // 1280\n        // get from navigator                                                                                         // 1281\n        if (!detectedLng && typeof navigator !== 'undefined') {                                                       // 1282\n            detectedLng =  (navigator.language) ? navigator.language : navigator.userLanguage;                        // 1283\n        }                                                                                                             // 1284\n                                                                                                                      // 1285\n        return detectedLng;                                                                                           // 1286\n    }                                                                                                                 // 1287\n    var sync = {                                                                                                      // 1288\n                                                                                                                      // 1289\n        load: function(lngs, options, cb) {                                                                           // 1290\n            if (options.useLocalStorage) {                                                                            // 1291\n                sync._loadLocal(lngs, options, function(err, store) {                                                 // 1292\n                    var missingLngs = [];                                                                             // 1293\n                    for (var i = 0, len = lngs.length; i < len; i++) {                                                // 1294\n                        if (!store[lngs[i]]) missingLngs.push(lngs[i]);                                               // 1295\n                    }                                                                                                 // 1296\n                                                                                                                      // 1297\n                    if (missingLngs.length > 0) {                                                                     // 1298\n                        sync._fetch(missingLngs, options, function(err, fetched) {                                    // 1299\n                            f.extend(store, fetched);                                                                 // 1300\n                            sync._storeLocal(fetched);                                                                // 1301\n                                                                                                                      // 1302\n                            cb(null, store);                                                                          // 1303\n                        });                                                                                           // 1304\n                    } else {                                                                                          // 1305\n                        cb(null, store);                                                                              // 1306\n                    }                                                                                                 // 1307\n                });                                                                                                   // 1308\n            } else {                                                                                                  // 1309\n                sync._fetch(lngs, options, function(err, store){                                                      // 1310\n                    cb(null, store);                                                                                  // 1311\n                });                                                                                                   // 1312\n            }                                                                                                         // 1313\n        },                                                                                                            // 1314\n                                                                                                                      // 1315\n        _loadLocal: function(lngs, options, cb) {                                                                     // 1316\n            var store = {}                                                                                            // 1317\n              , nowMS = new Date().getTime();                                                                         // 1318\n                                                                                                                      // 1319\n            if(window.localStorage) {                                                                                 // 1320\n                                                                                                                      // 1321\n                var todo = lngs.length;                                                                               // 1322\n                                                                                                                      // 1323\n                f.each(lngs, function(key, lng) {                                                                     // 1324\n                    var local = window.localStorage.getItem('res_' + lng);                                            // 1325\n                                                                                                                      // 1326\n                    if (local) {                                                                                      // 1327\n                        local = JSON.parse(local);                                                                    // 1328\n                                                                                                                      // 1329\n                        if (local.i18nStamp && local.i18nStamp + options.localStorageExpirationTime > nowMS) {        // 1330\n                            store[lng] = local;                                                                       // 1331\n                        }                                                                                             // 1332\n                    }                                                                                                 // 1333\n                                                                                                                      // 1334\n                    todo--; // wait for all done befor callback                                                       // 1335\n                    if (todo === 0) cb(null, store);                                                                  // 1336\n                });                                                                                                   // 1337\n            }                                                                                                         // 1338\n        },                                                                                                            // 1339\n                                                                                                                      // 1340\n        _storeLocal: function(store) {                                                                                // 1341\n            if(window.localStorage) {                                                                                 // 1342\n                for (var m in store) {                                                                                // 1343\n                    store[m].i18nStamp = new Date().getTime();                                                        // 1344\n                    window.localStorage.setItem('res_' + m, JSON.stringify(store[m]));                                // 1345\n                }                                                                                                     // 1346\n            }                                                                                                         // 1347\n            return;                                                                                                   // 1348\n        },                                                                                                            // 1349\n                                                                                                                      // 1350\n        _fetch: function(lngs, options, cb) {                                                                         // 1351\n            var ns = options.ns                                                                                       // 1352\n              , store = {};                                                                                           // 1353\n                                                                                                                      // 1354\n            if (!options.dynamicLoad) {                                                                               // 1355\n                var todo = ns.namespaces.length * lngs.length                                                         // 1356\n                  , errors;                                                                                           // 1357\n                                                                                                                      // 1358\n                // load each file individual                                                                          // 1359\n                f.each(ns.namespaces, function(nsIndex, nsValue) {                                                    // 1360\n                    f.each(lngs, function(lngIndex, lngValue) {                                                       // 1361\n                                                                                                                      // 1362\n                        // Call this once our translation has returned.                                               // 1363\n                        var loadComplete = function(err, data) {                                                      // 1364\n                            if (err) {                                                                                // 1365\n                                errors = errors || [];                                                                // 1366\n                                errors.push(err);                                                                     // 1367\n                            }                                                                                         // 1368\n                            store[lngValue] = store[lngValue] || {};                                                  // 1369\n                            store[lngValue][nsValue] = data;                                                          // 1370\n                                                                                                                      // 1371\n                            todo--; // wait for all done befor callback                                               // 1372\n                            if (todo === 0) cb(errors, store);                                                        // 1373\n                        };                                                                                            // 1374\n                                                                                                                      // 1375\n                        if(typeof options.customLoad == 'function'){                                                  // 1376\n                            // Use the specified custom callback.                                                     // 1377\n                            options.customLoad(lngValue, nsValue, options, loadComplete);                             // 1378\n                        } else {                                                                                      // 1379\n                            //~ // Use our inbuilt sync.                                                              // 1380\n                            sync._fetchOne(lngValue, nsValue, options, loadComplete);                                 // 1381\n                        }                                                                                             // 1382\n                    });                                                                                               // 1383\n                });                                                                                                   // 1384\n            } else {                                                                                                  // 1385\n                // Call this once our translation has returned.                                                       // 1386\n                var loadComplete = function(err, data) {                                                              // 1387\n                    cb(null, data);                                                                                   // 1388\n                };                                                                                                    // 1389\n                                                                                                                      // 1390\n                if(typeof options.customLoad == 'function'){                                                          // 1391\n                    // Use the specified custom callback.                                                             // 1392\n                    options.customLoad(lngs, ns.namespaces, options, loadComplete);                                   // 1393\n                } else {                                                                                              // 1394\n                    var url = applyReplacement(options.resGetPath, { lng: lngs.join('+'), ns: ns.namespaces.join('+') });\n                    // load all needed stuff once                                                                     // 1396\n                    f.ajax({                                                                                          // 1397\n                        url: url,                                                                                     // 1398\n                        success: function(data, status, xhr) {                                                        // 1399\n                            f.log('loaded: ' + url);                                                                  // 1400\n                            loadComplete(null, data);                                                                 // 1401\n                        },                                                                                            // 1402\n                        error : function(xhr, status, error) {                                                        // 1403\n                            f.log('failed loading: ' + url);                                                          // 1404\n                            loadComplete('failed loading resource.json error: ' + error);                             // 1405\n                        },                                                                                            // 1406\n                        dataType: \"json\",                                                                             // 1407\n                        async : options.getAsync                                                                      // 1408\n                    });                                                                                               // 1409\n                }                                                                                                     // 1410\n            }                                                                                                         // 1411\n        },                                                                                                            // 1412\n                                                                                                                      // 1413\n        _fetchOne: function(lng, ns, options, done) {                                                                 // 1414\n            var url = applyReplacement(options.resGetPath, { lng: lng, ns: ns });                                     // 1415\n            f.ajax({                                                                                                  // 1416\n                url: url,                                                                                             // 1417\n                success: function(data, status, xhr) {                                                                // 1418\n                    f.log('loaded: ' + url);                                                                          // 1419\n                    done(null, data);                                                                                 // 1420\n                },                                                                                                    // 1421\n                error : function(xhr, status, error) {                                                                // 1422\n                    if ((status && status == 200) || (xhr && xhr.status && xhr.status == 200)) {                      // 1423\n                        // file loaded but invalid json, stop waste time !                                            // 1424\n                        f.log('There is a typo in: ' + url);                                                          // 1425\n                    } else if ((status && status == 404) || (xhr && xhr.status && xhr.status == 404)) {               // 1426\n                        f.log('Does not exist: ' + url);                                                              // 1427\n                    } else {                                                                                          // 1428\n                        var theStatus = status ? status : ((xhr && xhr.status) ? xhr.status : null);                  // 1429\n                        f.log(theStatus + ' when loading ' + url);                                                    // 1430\n                    }                                                                                                 // 1431\n                                                                                                                      // 1432\n                    done(error, {});                                                                                  // 1433\n                },                                                                                                    // 1434\n                dataType: \"json\",                                                                                     // 1435\n                async : options.getAsync                                                                              // 1436\n            });                                                                                                       // 1437\n        },                                                                                                            // 1438\n                                                                                                                      // 1439\n        postMissing: function(lng, ns, key, defaultValue, lngs) {                                                     // 1440\n            var payload = {};                                                                                         // 1441\n            payload[key] = defaultValue;                                                                              // 1442\n                                                                                                                      // 1443\n            var urls = [];                                                                                            // 1444\n                                                                                                                      // 1445\n            if (o.sendMissingTo === 'fallback' && o.fallbackLng[0] !== false) {                                       // 1446\n                for (var i = 0; i < o.fallbackLng.length; i++) {                                                      // 1447\n                    urls.push({lng: o.fallbackLng[i], url: applyReplacement(o.resPostPath, { lng: o.fallbackLng[i], ns: ns })});\n                }                                                                                                     // 1449\n            } else if (o.sendMissingTo === 'current' || (o.sendMissingTo === 'fallback' && o.fallbackLng[0] === false) ) {\n                urls.push({lng: lng, url: applyReplacement(o.resPostPath, { lng: lng, ns: ns })});                    // 1451\n            } else if (o.sendMissingTo === 'all') {                                                                   // 1452\n                for (var i = 0, l = lngs.length; i < l; i++) {                                                        // 1453\n                    urls.push({lng: lngs[i], url: applyReplacement(o.resPostPath, { lng: lngs[i], ns: ns })});        // 1454\n                }                                                                                                     // 1455\n            }                                                                                                         // 1456\n                                                                                                                      // 1457\n            for (var y = 0, len = urls.length; y < len; y++) {                                                        // 1458\n                var item = urls[y];                                                                                   // 1459\n                f.ajax({                                                                                              // 1460\n                    url: item.url,                                                                                    // 1461\n                    type: o.sendType,                                                                                 // 1462\n                    data: payload,                                                                                    // 1463\n                    success: function(data, status, xhr) {                                                            // 1464\n                        f.log('posted missing key \\'' + key + '\\' to: ' + item.url);                                  // 1465\n                                                                                                                      // 1466\n                        // add key to resStore                                                                        // 1467\n                        var keys = key.split('.');                                                                    // 1468\n                        var x = 0;                                                                                    // 1469\n                        var value = resStore[item.lng][ns];                                                           // 1470\n                        while (keys[x]) {                                                                             // 1471\n                            if (x === keys.length - 1) {                                                              // 1472\n                                value = value[keys[x]] = defaultValue;                                                // 1473\n                            } else {                                                                                  // 1474\n                                value = value[keys[x]] = value[keys[x]] || {};                                        // 1475\n                            }                                                                                         // 1476\n                            x++;                                                                                      // 1477\n                        }                                                                                             // 1478\n                    },                                                                                                // 1479\n                    error : function(xhr, status, error) {                                                            // 1480\n                        f.log('failed posting missing key \\'' + key + '\\' to: ' + item.url);                          // 1481\n                    },                                                                                                // 1482\n                    dataType: \"json\",                                                                                 // 1483\n                    async : o.postAsync                                                                               // 1484\n                });                                                                                                   // 1485\n            }                                                                                                         // 1486\n        }                                                                                                             // 1487\n    };                                                                                                                // 1488\n    // definition http://translate.sourceforge.net/wiki/l10n/pluralforms                                              // 1489\n    var pluralExtensions = {                                                                                          // 1490\n                                                                                                                      // 1491\n        rules: {                                                                                                      // 1492\n            \"ach\": {                                                                                                  // 1493\n                \"name\": \"Acholi\",                                                                                     // 1494\n                \"numbers\": [                                                                                          // 1495\n                    1,                                                                                                // 1496\n                    2                                                                                                 // 1497\n                ],                                                                                                    // 1498\n                \"plurals\": function(n) { return Number(n > 1); }                                                      // 1499\n            },                                                                                                        // 1500\n            \"af\": {                                                                                                   // 1501\n                \"name\": \"Afrikaans\",                                                                                  // 1502\n                \"numbers\": [                                                                                          // 1503\n                    1,                                                                                                // 1504\n                    2                                                                                                 // 1505\n                ],                                                                                                    // 1506\n                \"plurals\": function(n) { return Number(n != 1); }                                                     // 1507\n            },                                                                                                        // 1508\n            \"ak\": {                                                                                                   // 1509\n                \"name\": \"Akan\",                                                                                       // 1510\n                \"numbers\": [                                                                                          // 1511\n                    1,                                                                                                // 1512\n                    2                                                                                                 // 1513\n                ],                                                                                                    // 1514\n                \"plurals\": function(n) { return Number(n > 1); }                                                      // 1515\n            },                                                                                                        // 1516\n            \"am\": {                                                                                                   // 1517\n                \"name\": \"Amharic\",                                                                                    // 1518\n                \"numbers\": [                                                                                          // 1519\n                    1,                                                                                                // 1520\n                    2                                                                                                 // 1521\n                ],                                                                                                    // 1522\n                \"plurals\": function(n) { return Number(n > 1); }                                                      // 1523\n            },                                                                                                        // 1524\n            \"an\": {                                                                                                   // 1525\n                \"name\": \"Aragonese\",                                                                                  // 1526\n                \"numbers\": [                                                                                          // 1527\n                    1,                                                                                                // 1528\n                    2                                                                                                 // 1529\n                ],                                                                                                    // 1530\n                \"plurals\": function(n) { return Number(n != 1); }                                                     // 1531\n            },                                                                                                        // 1532\n            \"ar\": {                                                                                                   // 1533\n                \"name\": \"Arabic\",                                                                                     // 1534\n                \"numbers\": [                                                                                          // 1535\n                    0,                                                                                                // 1536\n                    1,                                                                                                // 1537\n                    2,                                                                                                // 1538\n                    3,                                                                                                // 1539\n                    11,                                                                                               // 1540\n                    100                                                                                               // 1541\n                ],                                                                                                    // 1542\n                \"plurals\": function(n) { return Number(n===0 ? 0 : n==1 ? 1 : n==2 ? 2 : n%100>=3 && n%100<=10 ? 3 : n%100>=11 ? 4 : 5); }\n            },                                                                                                        // 1544\n            \"arn\": {                                                                                                  // 1545\n                \"name\": \"Mapudungun\",                                                                                 // 1546\n                \"numbers\": [                                                                                          // 1547\n                    1,                                                                                                // 1548\n                    2                                                                                                 // 1549\n                ],                                                                                                    // 1550\n                \"plurals\": function(n) { return Number(n > 1); }                                                      // 1551\n            },                                                                                                        // 1552\n            \"ast\": {                                                                                                  // 1553\n                \"name\": \"Asturian\",                                                                                   // 1554\n                \"numbers\": [                                                                                          // 1555\n                    1,                                                                                                // 1556\n                    2                                                                                                 // 1557\n                ],                                                                                                    // 1558\n                \"plurals\": function(n) { return Number(n != 1); }                                                     // 1559\n            },                                                                                                        // 1560\n            \"ay\": {                                                                                                   // 1561\n                \"name\": \"Aymar\\u00e1\",                                                                                // 1562\n                \"numbers\": [                                                                                          // 1563\n                    1                                                                                                 // 1564\n                ],                                                                                                    // 1565\n                \"plurals\": function(n) { return 0; }                                                                  // 1566\n            },                                                                                                        // 1567\n            \"az\": {                                                                                                   // 1568\n                \"name\": \"Azerbaijani\",                                                                                // 1569\n                \"numbers\": [                                                                                          // 1570\n                    1,                                                                                                // 1571\n                    2                                                                                                 // 1572\n                ],                                                                                                    // 1573\n                \"plurals\": function(n) { return Number(n != 1); }                                                     // 1574\n            },                                                                                                        // 1575\n            \"be\": {                                                                                                   // 1576\n                \"name\": \"Belarusian\",                                                                                 // 1577\n                \"numbers\": [                                                                                          // 1578\n                    1,                                                                                                // 1579\n                    2,                                                                                                // 1580\n                    5                                                                                                 // 1581\n                ],                                                                                                    // 1582\n                \"plurals\": function(n) { return Number(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2); }\n            },                                                                                                        // 1584\n            \"bg\": {                                                                                                   // 1585\n                \"name\": \"Bulgarian\",                                                                                  // 1586\n                \"numbers\": [                                                                                          // 1587\n                    1,                                                                                                // 1588\n                    2                                                                                                 // 1589\n                ],                                                                                                    // 1590\n                \"plurals\": function(n) { return Number(n != 1); }                                                     // 1591\n            },                                                                                                        // 1592\n            \"bn\": {                                                                                                   // 1593\n                \"name\": \"Bengali\",                                                                                    // 1594\n                \"numbers\": [                                                                                          // 1595\n                    1,                                                                                                // 1596\n                    2                                                                                                 // 1597\n                ],                                                                                                    // 1598\n                \"plurals\": function(n) { return Number(n != 1); }                                                     // 1599\n            },                                                                                                        // 1600\n            \"bo\": {                                                                                                   // 1601\n                \"name\": \"Tibetan\",                                                                                    // 1602\n                \"numbers\": [                                                                                          // 1603\n                    1                                                                                                 // 1604\n                ],                                                                                                    // 1605\n                \"plurals\": function(n) { return 0; }                                                                  // 1606\n            },                                                                                                        // 1607\n            \"br\": {                                                                                                   // 1608\n                \"name\": \"Breton\",                                                                                     // 1609\n                \"numbers\": [                                                                                          // 1610\n                    1,                                                                                                // 1611\n                    2                                                                                                 // 1612\n                ],                                                                                                    // 1613\n                \"plurals\": function(n) { return Number(n > 1); }                                                      // 1614\n            },                                                                                                        // 1615\n            \"bs\": {                                                                                                   // 1616\n                \"name\": \"Bosnian\",                                                                                    // 1617\n                \"numbers\": [                                                                                          // 1618\n                    1,                                                                                                // 1619\n                    2,                                                                                                // 1620\n                    5                                                                                                 // 1621\n                ],                                                                                                    // 1622\n                \"plurals\": function(n) { return Number(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2); }\n            },                                                                                                        // 1624\n            \"ca\": {                                                                                                   // 1625\n                \"name\": \"Catalan\",                                                                                    // 1626\n                \"numbers\": [                                                                                          // 1627\n                    1,                                                                                                // 1628\n                    2                                                                                                 // 1629\n                ],                                                                                                    // 1630\n                \"plurals\": function(n) { return Number(n != 1); }                                                     // 1631\n            },                                                                                                        // 1632\n            \"cgg\": {                                                                                                  // 1633\n                \"name\": \"Chiga\",                                                                                      // 1634\n                \"numbers\": [                                                                                          // 1635\n                    1                                                                                                 // 1636\n                ],                                                                                                    // 1637\n                \"plurals\": function(n) { return 0; }                                                                  // 1638\n            },                                                                                                        // 1639\n            \"cs\": {                                                                                                   // 1640\n                \"name\": \"Czech\",                                                                                      // 1641\n                \"numbers\": [                                                                                          // 1642\n                    1,                                                                                                // 1643\n                    2,                                                                                                // 1644\n                    5                                                                                                 // 1645\n                ],                                                                                                    // 1646\n                \"plurals\": function(n) { return Number((n==1) ? 0 : (n>=2 && n<=4) ? 1 : 2); }                        // 1647\n            },                                                                                                        // 1648\n            \"csb\": {                                                                                                  // 1649\n                \"name\": \"Kashubian\",                                                                                  // 1650\n                \"numbers\": [                                                                                          // 1651\n                    1,                                                                                                // 1652\n                    2,                                                                                                // 1653\n                    5                                                                                                 // 1654\n                ],                                                                                                    // 1655\n                \"plurals\": function(n) { return Number(n==1 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2); }\n            },                                                                                                        // 1657\n            \"cy\": {                                                                                                   // 1658\n                \"name\": \"Welsh\",                                                                                      // 1659\n                \"numbers\": [                                                                                          // 1660\n                    1,                                                                                                // 1661\n                    2,                                                                                                // 1662\n                    3,                                                                                                // 1663\n                    8                                                                                                 // 1664\n                ],                                                                                                    // 1665\n                \"plurals\": function(n) { return Number((n==1) ? 0 : (n==2) ? 1 : (n != 8 && n != 11) ? 2 : 3); }      // 1666\n            },                                                                                                        // 1667\n            \"da\": {                                                                                                   // 1668\n                \"name\": \"Danish\",                                                                                     // 1669\n                \"numbers\": [                                                                                          // 1670\n                    1,                                                                                                // 1671\n                    2                                                                                                 // 1672\n                ],                                                                                                    // 1673\n                \"plurals\": function(n) { return Number(n != 1); }                                                     // 1674\n            },                                                                                                        // 1675\n            \"de\": {                                                                                                   // 1676\n                \"name\": \"German\",                                                                                     // 1677\n                \"numbers\": [                                                                                          // 1678\n                    1,                                                                                                // 1679\n                    2                                                                                                 // 1680\n                ],                                                                                                    // 1681\n                \"plurals\": function(n) { return Number(n != 1); }                                                     // 1682\n            },                                                                                                        // 1683\n            \"dz\": {                                                                                                   // 1684\n                \"name\": \"Dzongkha\",                                                                                   // 1685\n                \"numbers\": [                                                                                          // 1686\n                    1                                                                                                 // 1687\n                ],                                                                                                    // 1688\n                \"plurals\": function(n) { return 0; }                                                                  // 1689\n            },                                                                                                        // 1690\n            \"el\": {                                                                                                   // 1691\n                \"name\": \"Greek\",                                                                                      // 1692\n                \"numbers\": [                                                                                          // 1693\n                    1,                                                                                                // 1694\n                    2                                                                                                 // 1695\n                ],                                                                                                    // 1696\n                \"plurals\": function(n) { return Number(n != 1); }                                                     // 1697\n            },                                                                                                        // 1698\n            \"en\": {                                                                                                   // 1699\n                \"name\": \"English\",                                                                                    // 1700\n                \"numbers\": [                                                                                          // 1701\n                    1,                                                                                                // 1702\n                    2                                                                                                 // 1703\n                ],                                                                                                    // 1704\n                \"plurals\": function(n) { return Number(n != 1); }                                                     // 1705\n            },                                                                                                        // 1706\n            \"eo\": {                                                                                                   // 1707\n                \"name\": \"Esperanto\",                                                                                  // 1708\n                \"numbers\": [                                                                                          // 1709\n                    1,                                                                                                // 1710\n                    2                                                                                                 // 1711\n                ],                                                                                                    // 1712\n                \"plurals\": function(n) { return Number(n != 1); }                                                     // 1713\n            },                                                                                                        // 1714\n            \"es\": {                                                                                                   // 1715\n                \"name\": \"Spanish\",                                                                                    // 1716\n                \"numbers\": [                                                                                          // 1717\n                    1,                                                                                                // 1718\n                    2                                                                                                 // 1719\n                ],                                                                                                    // 1720\n                \"plurals\": function(n) { return Number(n != 1); }                                                     // 1721\n            },                                                                                                        // 1722\n            \"es_ar\": {                                                                                                // 1723\n                \"name\": \"Argentinean Spanish\",                                                                        // 1724\n                \"numbers\": [                                                                                          // 1725\n                    1,                                                                                                // 1726\n                    2                                                                                                 // 1727\n                ],                                                                                                    // 1728\n                \"plurals\": function(n) { return Number(n != 1); }                                                     // 1729\n            },                                                                                                        // 1730\n            \"et\": {                                                                                                   // 1731\n                \"name\": \"Estonian\",                                                                                   // 1732\n                \"numbers\": [                                                                                          // 1733\n                    1,                                                                                                // 1734\n                    2                                                                                                 // 1735\n                ],                                                                                                    // 1736\n                \"plurals\": function(n) { return Number(n != 1); }                                                     // 1737\n            },                                                                                                        // 1738\n            \"eu\": {                                                                                                   // 1739\n                \"name\": \"Basque\",                                                                                     // 1740\n                \"numbers\": [                                                                                          // 1741\n                    1,                                                                                                // 1742\n                    2                                                                                                 // 1743\n                ],                                                                                                    // 1744\n                \"plurals\": function(n) { return Number(n != 1); }                                                     // 1745\n            },                                                                                                        // 1746\n            \"fa\": {                                                                                                   // 1747\n                \"name\": \"Persian\",                                                                                    // 1748\n                \"numbers\": [                                                                                          // 1749\n                    1                                                                                                 // 1750\n                ],                                                                                                    // 1751\n                \"plurals\": function(n) { return 0; }                                                                  // 1752\n            },                                                                                                        // 1753\n            \"fi\": {                                                                                                   // 1754\n                \"name\": \"Finnish\",                                                                                    // 1755\n                \"numbers\": [                                                                                          // 1756\n                    1,                                                                                                // 1757\n                    2                                                                                                 // 1758\n                ],                                                                                                    // 1759\n                \"plurals\": function(n) { return Number(n != 1); }                                                     // 1760\n            },                                                                                                        // 1761\n            \"fil\": {                                                                                                  // 1762\n                \"name\": \"Filipino\",                                                                                   // 1763\n                \"numbers\": [                                                                                          // 1764\n                    1,                                                                                                // 1765\n                    2                                                                                                 // 1766\n                ],                                                                                                    // 1767\n                \"plurals\": function(n) { return Number(n > 1); }                                                      // 1768\n            },                                                                                                        // 1769\n            \"fo\": {                                                                                                   // 1770\n                \"name\": \"Faroese\",                                                                                    // 1771\n                \"numbers\": [                                                                                          // 1772\n                    1,                                                                                                // 1773\n                    2                                                                                                 // 1774\n                ],                                                                                                    // 1775\n                \"plurals\": function(n) { return Number(n != 1); }                                                     // 1776\n            },                                                                                                        // 1777\n            \"fr\": {                                                                                                   // 1778\n                \"name\": \"French\",                                                                                     // 1779\n                \"numbers\": [                                                                                          // 1780\n                    1,                                                                                                // 1781\n                    2                                                                                                 // 1782\n                ],                                                                                                    // 1783\n                \"plurals\": function(n) { return Number(n > 1); }                                                      // 1784\n            },                                                                                                        // 1785\n            \"fur\": {                                                                                                  // 1786\n                \"name\": \"Friulian\",                                                                                   // 1787\n                \"numbers\": [                                                                                          // 1788\n                    1,                                                                                                // 1789\n                    2                                                                                                 // 1790\n                ],                                                                                                    // 1791\n                \"plurals\": function(n) { return Number(n != 1); }                                                     // 1792\n            },                                                                                                        // 1793\n            \"fy\": {                                                                                                   // 1794\n                \"name\": \"Frisian\",                                                                                    // 1795\n                \"numbers\": [                                                                                          // 1796\n                    1,                                                                                                // 1797\n                    2                                                                                                 // 1798\n                ],                                                                                                    // 1799\n                \"plurals\": function(n) { return Number(n != 1); }                                                     // 1800\n            },                                                                                                        // 1801\n            \"ga\": {                                                                                                   // 1802\n                \"name\": \"Irish\",                                                                                      // 1803\n                \"numbers\": [                                                                                          // 1804\n                    1,                                                                                                // 1805\n                    2,                                                                                                // 1806\n                    3,                                                                                                // 1807\n                    7,                                                                                                // 1808\n                    11                                                                                                // 1809\n                ],                                                                                                    // 1810\n                \"plurals\": function(n) { return Number(n==1 ? 0 : n==2 ? 1 : n<7 ? 2 : n<11 ? 3 : 4) ;}               // 1811\n            },                                                                                                        // 1812\n            \"gd\": {                                                                                                   // 1813\n                \"name\": \"Scottish Gaelic\",                                                                            // 1814\n                \"numbers\": [                                                                                          // 1815\n                    1,                                                                                                // 1816\n                    2,                                                                                                // 1817\n                    3,                                                                                                // 1818\n                    20                                                                                                // 1819\n                ],                                                                                                    // 1820\n                \"plurals\": function(n) { return Number((n==1 || n==11) ? 0 : (n==2 || n==12) ? 1 : (n > 2 && n < 20) ? 2 : 3); }\n            },                                                                                                        // 1822\n            \"gl\": {                                                                                                   // 1823\n                \"name\": \"Galician\",                                                                                   // 1824\n                \"numbers\": [                                                                                          // 1825\n                    1,                                                                                                // 1826\n                    2                                                                                                 // 1827\n                ],                                                                                                    // 1828\n                \"plurals\": function(n) { return Number(n != 1); }                                                     // 1829\n            },                                                                                                        // 1830\n            \"gu\": {                                                                                                   // 1831\n                \"name\": \"Gujarati\",                                                                                   // 1832\n                \"numbers\": [                                                                                          // 1833\n                    1,                                                                                                // 1834\n                    2                                                                                                 // 1835\n                ],                                                                                                    // 1836\n                \"plurals\": function(n) { return Number(n != 1); }                                                     // 1837\n            },                                                                                                        // 1838\n            \"gun\": {                                                                                                  // 1839\n                \"name\": \"Gun\",                                                                                        // 1840\n                \"numbers\": [                                                                                          // 1841\n                    1,                                                                                                // 1842\n                    2                                                                                                 // 1843\n                ],                                                                                                    // 1844\n                \"plurals\": function(n) { return Number(n > 1); }                                                      // 1845\n            },                                                                                                        // 1846\n            \"ha\": {                                                                                                   // 1847\n                \"name\": \"Hausa\",                                                                                      // 1848\n                \"numbers\": [                                                                                          // 1849\n                    1,                                                                                                // 1850\n                    2                                                                                                 // 1851\n                ],                                                                                                    // 1852\n                \"plurals\": function(n) { return Number(n != 1); }                                                     // 1853\n            },                                                                                                        // 1854\n            \"he\": {                                                                                                   // 1855\n                \"name\": \"Hebrew\",                                                                                     // 1856\n                \"numbers\": [                                                                                          // 1857\n                    1,                                                                                                // 1858\n                    2                                                                                                 // 1859\n                ],                                                                                                    // 1860\n                \"plurals\": function(n) { return Number(n != 1); }                                                     // 1861\n            },                                                                                                        // 1862\n            \"hi\": {                                                                                                   // 1863\n                \"name\": \"Hindi\",                                                                                      // 1864\n                \"numbers\": [                                                                                          // 1865\n                    1,                                                                                                // 1866\n                    2                                                                                                 // 1867\n                ],                                                                                                    // 1868\n                \"plurals\": function(n) { return Number(n != 1); }                                                     // 1869\n            },                                                                                                        // 1870\n            \"hr\": {                                                                                                   // 1871\n                \"name\": \"Croatian\",                                                                                   // 1872\n                \"numbers\": [                                                                                          // 1873\n                    1,                                                                                                // 1874\n                    2,                                                                                                // 1875\n                    5                                                                                                 // 1876\n                ],                                                                                                    // 1877\n                \"plurals\": function(n) { return Number(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2); }\n            },                                                                                                        // 1879\n            \"hu\": {                                                                                                   // 1880\n                \"name\": \"Hungarian\",                                                                                  // 1881\n                \"numbers\": [                                                                                          // 1882\n                    1,                                                                                                // 1883\n                    2                                                                                                 // 1884\n                ],                                                                                                    // 1885\n                \"plurals\": function(n) { return Number(n != 1); }                                                     // 1886\n            },                                                                                                        // 1887\n            \"hy\": {                                                                                                   // 1888\n                \"name\": \"Armenian\",                                                                                   // 1889\n                \"numbers\": [                                                                                          // 1890\n                    1,                                                                                                // 1891\n                    2                                                                                                 // 1892\n                ],                                                                                                    // 1893\n                \"plurals\": function(n) { return Number(n != 1); }                                                     // 1894\n            },                                                                                                        // 1895\n            \"ia\": {                                                                                                   // 1896\n                \"name\": \"Interlingua\",                                                                                // 1897\n                \"numbers\": [                                                                                          // 1898\n                    1,                                                                                                // 1899\n                    2                                                                                                 // 1900\n                ],                                                                                                    // 1901\n                \"plurals\": function(n) { return Number(n != 1); }                                                     // 1902\n            },                                                                                                        // 1903\n            \"id\": {                                                                                                   // 1904\n                \"name\": \"Indonesian\",                                                                                 // 1905\n                \"numbers\": [                                                                                          // 1906\n                    1                                                                                                 // 1907\n                ],                                                                                                    // 1908\n                \"plurals\": function(n) { return 0; }                                                                  // 1909\n            },                                                                                                        // 1910\n            \"is\": {                                                                                                   // 1911\n                \"name\": \"Icelandic\",                                                                                  // 1912\n                \"numbers\": [                                                                                          // 1913\n                    1,                                                                                                // 1914\n                    2                                                                                                 // 1915\n                ],                                                                                                    // 1916\n                \"plurals\": function(n) { return Number(n%10!=1 || n%100==11); }                                       // 1917\n            },                                                                                                        // 1918\n            \"it\": {                                                                                                   // 1919\n                \"name\": \"Italian\",                                                                                    // 1920\n                \"numbers\": [                                                                                          // 1921\n                    1,                                                                                                // 1922\n                    2                                                                                                 // 1923\n                ],                                                                                                    // 1924\n                \"plurals\": function(n) { return Number(n != 1); }                                                     // 1925\n            },                                                                                                        // 1926\n            \"ja\": {                                                                                                   // 1927\n                \"name\": \"Japanese\",                                                                                   // 1928\n                \"numbers\": [                                                                                          // 1929\n                    1                                                                                                 // 1930\n                ],                                                                                                    // 1931\n                \"plurals\": function(n) { return 0; }                                                                  // 1932\n            },                                                                                                        // 1933\n            \"jbo\": {                                                                                                  // 1934\n                \"name\": \"Lojban\",                                                                                     // 1935\n                \"numbers\": [                                                                                          // 1936\n                    1                                                                                                 // 1937\n                ],                                                                                                    // 1938\n                \"plurals\": function(n) { return 0; }                                                                  // 1939\n            },                                                                                                        // 1940\n            \"jv\": {                                                                                                   // 1941\n                \"name\": \"Javanese\",                                                                                   // 1942\n                \"numbers\": [                                                                                          // 1943\n                    0,                                                                                                // 1944\n                    1                                                                                                 // 1945\n                ],                                                                                                    // 1946\n                \"plurals\": function(n) { return Number(n !== 0); }                                                    // 1947\n            },                                                                                                        // 1948\n            \"ka\": {                                                                                                   // 1949\n                \"name\": \"Georgian\",                                                                                   // 1950\n                \"numbers\": [                                                                                          // 1951\n                    1                                                                                                 // 1952\n                ],                                                                                                    // 1953\n                \"plurals\": function(n) { return 0; }                                                                  // 1954\n            },                                                                                                        // 1955\n            \"kk\": {                                                                                                   // 1956\n                \"name\": \"Kazakh\",                                                                                     // 1957\n                \"numbers\": [                                                                                          // 1958\n                    1                                                                                                 // 1959\n                ],                                                                                                    // 1960\n                \"plurals\": function(n) { return 0; }                                                                  // 1961\n            },                                                                                                        // 1962\n            \"km\": {                                                                                                   // 1963\n                \"name\": \"Khmer\",                                                                                      // 1964\n                \"numbers\": [                                                                                          // 1965\n                    1                                                                                                 // 1966\n                ],                                                                                                    // 1967\n                \"plurals\": function(n) { return 0; }                                                                  // 1968\n            },                                                                                                        // 1969\n            \"kn\": {                                                                                                   // 1970\n                \"name\": \"Kannada\",                                                                                    // 1971\n                \"numbers\": [                                                                                          // 1972\n                    1,                                                                                                // 1973\n                    2                                                                                                 // 1974\n                ],                                                                                                    // 1975\n                \"plurals\": function(n) { return Number(n != 1); }                                                     // 1976\n            },                                                                                                        // 1977\n            \"ko\": {                                                                                                   // 1978\n                \"name\": \"Korean\",                                                                                     // 1979\n                \"numbers\": [                                                                                          // 1980\n                    1                                                                                                 // 1981\n                ],                                                                                                    // 1982\n                \"plurals\": function(n) { return 0; }                                                                  // 1983\n            },                                                                                                        // 1984\n            \"ku\": {                                                                                                   // 1985\n                \"name\": \"Kurdish\",                                                                                    // 1986\n                \"numbers\": [                                                                                          // 1987\n                    1,                                                                                                // 1988\n                    2                                                                                                 // 1989\n                ],                                                                                                    // 1990\n                \"plurals\": function(n) { return Number(n != 1); }                                                     // 1991\n            },                                                                                                        // 1992\n            \"kw\": {                                                                                                   // 1993\n                \"name\": \"Cornish\",                                                                                    // 1994\n                \"numbers\": [                                                                                          // 1995\n                    1,                                                                                                // 1996\n                    2,                                                                                                // 1997\n                    3,                                                                                                // 1998\n                    4                                                                                                 // 1999\n                ],                                                                                                    // 2000\n                \"plurals\": function(n) { return Number((n==1) ? 0 : (n==2) ? 1 : (n == 3) ? 2 : 3); }                 // 2001\n            },                                                                                                        // 2002\n            \"ky\": {                                                                                                   // 2003\n                \"name\": \"Kyrgyz\",                                                                                     // 2004\n                \"numbers\": [                                                                                          // 2005\n                    1                                                                                                 // 2006\n                ],                                                                                                    // 2007\n                \"plurals\": function(n) { return 0; }                                                                  // 2008\n            },                                                                                                        // 2009\n            \"lb\": {                                                                                                   // 2010\n                \"name\": \"Letzeburgesch\",                                                                              // 2011\n                \"numbers\": [                                                                                          // 2012\n                    1,                                                                                                // 2013\n                    2                                                                                                 // 2014\n                ],                                                                                                    // 2015\n                \"plurals\": function(n) { return Number(n != 1); }                                                     // 2016\n            },                                                                                                        // 2017\n            \"ln\": {                                                                                                   // 2018\n                \"name\": \"Lingala\",                                                                                    // 2019\n                \"numbers\": [                                                                                          // 2020\n                    1,                                                                                                // 2021\n                    2                                                                                                 // 2022\n                ],                                                                                                    // 2023\n                \"plurals\": function(n) { return Number(n > 1); }                                                      // 2024\n            },                                                                                                        // 2025\n            \"lo\": {                                                                                                   // 2026\n                \"name\": \"Lao\",                                                                                        // 2027\n                \"numbers\": [                                                                                          // 2028\n                    1                                                                                                 // 2029\n                ],                                                                                                    // 2030\n                \"plurals\": function(n) { return 0; }                                                                  // 2031\n            },                                                                                                        // 2032\n            \"lt\": {                                                                                                   // 2033\n                \"name\": \"Lithuanian\",                                                                                 // 2034\n                \"numbers\": [                                                                                          // 2035\n                    1,                                                                                                // 2036\n                    2,                                                                                                // 2037\n                    10                                                                                                // 2038\n                ],                                                                                                    // 2039\n                \"plurals\": function(n) { return Number(n%10==1 && n%100!=11 ? 0 : n%10>=2 && (n%100<10 || n%100>=20) ? 1 : 2); }\n            },                                                                                                        // 2041\n            \"lv\": {                                                                                                   // 2042\n                \"name\": \"Latvian\",                                                                                    // 2043\n                \"numbers\": [                                                                                          // 2044\n                    1,                                                                                                // 2045\n                    2,                                                                                                // 2046\n                    0                                                                                                 // 2047\n                ],                                                                                                    // 2048\n                \"plurals\": function(n) { return Number(n%10==1 && n%100!=11 ? 0 : n !== 0 ? 1 : 2); }                 // 2049\n            },                                                                                                        // 2050\n            \"mai\": {                                                                                                  // 2051\n                \"name\": \"Maithili\",                                                                                   // 2052\n                \"numbers\": [                                                                                          // 2053\n                    1,                                                                                                // 2054\n                    2                                                                                                 // 2055\n                ],                                                                                                    // 2056\n                \"plurals\": function(n) { return Number(n != 1); }                                                     // 2057\n            },                                                                                                        // 2058\n            \"mfe\": {                                                                                                  // 2059\n                \"name\": \"Mauritian Creole\",                                                                           // 2060\n                \"numbers\": [                                                                                          // 2061\n                    1,                                                                                                // 2062\n                    2                                                                                                 // 2063\n                ],                                                                                                    // 2064\n                \"plurals\": function(n) { return Number(n > 1); }                                                      // 2065\n            },                                                                                                        // 2066\n            \"mg\": {                                                                                                   // 2067\n                \"name\": \"Malagasy\",                                                                                   // 2068\n                \"numbers\": [                                                                                          // 2069\n                    1,                                                                                                // 2070\n                    2                                                                                                 // 2071\n                ],                                                                                                    // 2072\n                \"plurals\": function(n) { return Number(n > 1); }                                                      // 2073\n            },                                                                                                        // 2074\n            \"mi\": {                                                                                                   // 2075\n                \"name\": \"Maori\",                                                                                      // 2076\n                \"numbers\": [                                                                                          // 2077\n                    1,                                                                                                // 2078\n                    2                                                                                                 // 2079\n                ],                                                                                                    // 2080\n                \"plurals\": function(n) { return Number(n > 1); }                                                      // 2081\n            },                                                                                                        // 2082\n            \"mk\": {                                                                                                   // 2083\n                \"name\": \"Macedonian\",                                                                                 // 2084\n                \"numbers\": [                                                                                          // 2085\n                    1,                                                                                                // 2086\n                    2                                                                                                 // 2087\n                ],                                                                                                    // 2088\n                \"plurals\": function(n) { return Number(n==1 || n%10==1 ? 0 : 1); }                                    // 2089\n            },                                                                                                        // 2090\n            \"ml\": {                                                                                                   // 2091\n                \"name\": \"Malayalam\",                                                                                  // 2092\n                \"numbers\": [                                                                                          // 2093\n                    1,                                                                                                // 2094\n                    2                                                                                                 // 2095\n                ],                                                                                                    // 2096\n                \"plurals\": function(n) { return Number(n != 1); }                                                     // 2097\n            },                                                                                                        // 2098\n            \"mn\": {                                                                                                   // 2099\n                \"name\": \"Mongolian\",                                                                                  // 2100\n                \"numbers\": [                                                                                          // 2101\n                    1,                                                                                                // 2102\n                    2                                                                                                 // 2103\n                ],                                                                                                    // 2104\n                \"plurals\": function(n) { return Number(n != 1); }                                                     // 2105\n            },                                                                                                        // 2106\n            \"mnk\": {                                                                                                  // 2107\n                \"name\": \"Mandinka\",                                                                                   // 2108\n                \"numbers\": [                                                                                          // 2109\n                    0,                                                                                                // 2110\n                    1,                                                                                                // 2111\n                    2                                                                                                 // 2112\n                ],                                                                                                    // 2113\n                \"plurals\": function(n) { return Number(n == 0 ? 0 : n==1 ? 1 : 2); }                                  // 2114\n            },                                                                                                        // 2115\n            \"mr\": {                                                                                                   // 2116\n                \"name\": \"Marathi\",                                                                                    // 2117\n                \"numbers\": [                                                                                          // 2118\n                    1,                                                                                                // 2119\n                    2                                                                                                 // 2120\n                ],                                                                                                    // 2121\n                \"plurals\": function(n) { return Number(n != 1); }                                                     // 2122\n            },                                                                                                        // 2123\n            \"ms\": {                                                                                                   // 2124\n                \"name\": \"Malay\",                                                                                      // 2125\n                \"numbers\": [                                                                                          // 2126\n                    1                                                                                                 // 2127\n                ],                                                                                                    // 2128\n                \"plurals\": function(n) { return 0; }                                                                  // 2129\n            },                                                                                                        // 2130\n            \"mt\": {                                                                                                   // 2131\n                \"name\": \"Maltese\",                                                                                    // 2132\n                \"numbers\": [                                                                                          // 2133\n                    1,                                                                                                // 2134\n                    2,                                                                                                // 2135\n                    11,                                                                                               // 2136\n                    20                                                                                                // 2137\n                ],                                                                                                    // 2138\n                \"plurals\": function(n) { return Number(n==1 ? 0 : n===0 || ( n%100>1 && n%100<11) ? 1 : (n%100>10 && n%100<20 ) ? 2 : 3); }\n            },                                                                                                        // 2140\n            \"nah\": {                                                                                                  // 2141\n                \"name\": \"Nahuatl\",                                                                                    // 2142\n                \"numbers\": [                                                                                          // 2143\n                    1,                                                                                                // 2144\n                    2                                                                                                 // 2145\n                ],                                                                                                    // 2146\n                \"plurals\": function(n) { return Number(n != 1); }                                                     // 2147\n            },                                                                                                        // 2148\n            \"nap\": {                                                                                                  // 2149\n                \"name\": \"Neapolitan\",                                                                                 // 2150\n                \"numbers\": [                                                                                          // 2151\n                    1,                                                                                                // 2152\n                    2                                                                                                 // 2153\n                ],                                                                                                    // 2154\n                \"plurals\": function(n) { return Number(n != 1); }                                                     // 2155\n            },                                                                                                        // 2156\n            \"nb\": {                                                                                                   // 2157\n                \"name\": \"Norwegian Bokmal\",                                                                           // 2158\n                \"numbers\": [                                                                                          // 2159\n                    1,                                                                                                // 2160\n                    2                                                                                                 // 2161\n                ],                                                                                                    // 2162\n                \"plurals\": function(n) { return Number(n != 1); }                                                     // 2163\n            },                                                                                                        // 2164\n            \"ne\": {                                                                                                   // 2165\n                \"name\": \"Nepali\",                                                                                     // 2166\n                \"numbers\": [                                                                                          // 2167\n                    1,                                                                                                // 2168\n                    2                                                                                                 // 2169\n                ],                                                                                                    // 2170\n                \"plurals\": function(n) { return Number(n != 1); }                                                     // 2171\n            },                                                                                                        // 2172\n            \"nl\": {                                                                                                   // 2173\n                \"name\": \"Dutch\",                                                                                      // 2174\n                \"numbers\": [                                                                                          // 2175\n                    1,                                                                                                // 2176\n                    2                                                                                                 // 2177\n                ],                                                                                                    // 2178\n                \"plurals\": function(n) { return Number(n != 1); }                                                     // 2179\n            },                                                                                                        // 2180\n            \"nn\": {                                                                                                   // 2181\n                \"name\": \"Norwegian Nynorsk\",                                                                          // 2182\n                \"numbers\": [                                                                                          // 2183\n                    1,                                                                                                // 2184\n                    2                                                                                                 // 2185\n                ],                                                                                                    // 2186\n                \"plurals\": function(n) { return Number(n != 1); }                                                     // 2187\n            },                                                                                                        // 2188\n            \"no\": {                                                                                                   // 2189\n                \"name\": \"Norwegian\",                                                                                  // 2190\n                \"numbers\": [                                                                                          // 2191\n                    1,                                                                                                // 2192\n                    2                                                                                                 // 2193\n                ],                                                                                                    // 2194\n                \"plurals\": function(n) { return Number(n != 1); }                                                     // 2195\n            },                                                                                                        // 2196\n            \"nso\": {                                                                                                  // 2197\n                \"name\": \"Northern Sotho\",                                                                             // 2198\n                \"numbers\": [                                                                                          // 2199\n                    1,                                                                                                // 2200\n                    2                                                                                                 // 2201\n                ],                                                                                                    // 2202\n                \"plurals\": function(n) { return Number(n != 1); }                                                     // 2203\n            },                                                                                                        // 2204\n            \"oc\": {                                                                                                   // 2205\n                \"name\": \"Occitan\",                                                                                    // 2206\n                \"numbers\": [                                                                                          // 2207\n                    1,                                                                                                // 2208\n                    2                                                                                                 // 2209\n                ],                                                                                                    // 2210\n                \"plurals\": function(n) { return Number(n > 1); }                                                      // 2211\n            },                                                                                                        // 2212\n            \"or\": {                                                                                                   // 2213\n                \"name\": \"Oriya\",                                                                                      // 2214\n                \"numbers\": [                                                                                          // 2215\n                    2,                                                                                                // 2216\n                    1                                                                                                 // 2217\n                ],                                                                                                    // 2218\n                \"plurals\": function(n) { return Number(n != 1); }                                                     // 2219\n            },                                                                                                        // 2220\n            \"pa\": {                                                                                                   // 2221\n                \"name\": \"Punjabi\",                                                                                    // 2222\n                \"numbers\": [                                                                                          // 2223\n                    1,                                                                                                // 2224\n                    2                                                                                                 // 2225\n                ],                                                                                                    // 2226\n                \"plurals\": function(n) { return Number(n != 1); }                                                     // 2227\n            },                                                                                                        // 2228\n            \"pap\": {                                                                                                  // 2229\n                \"name\": \"Papiamento\",                                                                                 // 2230\n                \"numbers\": [                                                                                          // 2231\n                    1,                                                                                                // 2232\n                    2                                                                                                 // 2233\n                ],                                                                                                    // 2234\n                \"plurals\": function(n) { return Number(n != 1); }                                                     // 2235\n            },                                                                                                        // 2236\n            \"pl\": {                                                                                                   // 2237\n                \"name\": \"Polish\",                                                                                     // 2238\n                \"numbers\": [                                                                                          // 2239\n                    1,                                                                                                // 2240\n                    2,                                                                                                // 2241\n                    5                                                                                                 // 2242\n                ],                                                                                                    // 2243\n                \"plurals\": function(n) { return Number(n==1 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2); }\n            },                                                                                                        // 2245\n            \"pms\": {                                                                                                  // 2246\n                \"name\": \"Piemontese\",                                                                                 // 2247\n                \"numbers\": [                                                                                          // 2248\n                    1,                                                                                                // 2249\n                    2                                                                                                 // 2250\n                ],                                                                                                    // 2251\n                \"plurals\": function(n) { return Number(n != 1); }                                                     // 2252\n            },                                                                                                        // 2253\n            \"ps\": {                                                                                                   // 2254\n                \"name\": \"Pashto\",                                                                                     // 2255\n                \"numbers\": [                                                                                          // 2256\n                    1,                                                                                                // 2257\n                    2                                                                                                 // 2258\n                ],                                                                                                    // 2259\n                \"plurals\": function(n) { return Number(n != 1); }                                                     // 2260\n            },                                                                                                        // 2261\n            \"pt\": {                                                                                                   // 2262\n                \"name\": \"Portuguese\",                                                                                 // 2263\n                \"numbers\": [                                                                                          // 2264\n                    1,                                                                                                // 2265\n                    2                                                                                                 // 2266\n                ],                                                                                                    // 2267\n                \"plurals\": function(n) { return Number(n != 1); }                                                     // 2268\n            },                                                                                                        // 2269\n            \"pt_br\": {                                                                                                // 2270\n                \"name\": \"Brazilian Portuguese\",                                                                       // 2271\n                \"numbers\": [                                                                                          // 2272\n                    1,                                                                                                // 2273\n                    2                                                                                                 // 2274\n                ],                                                                                                    // 2275\n                \"plurals\": function(n) { return Number(n != 1); }                                                     // 2276\n            },                                                                                                        // 2277\n            \"rm\": {                                                                                                   // 2278\n                \"name\": \"Romansh\",                                                                                    // 2279\n                \"numbers\": [                                                                                          // 2280\n                    1,                                                                                                // 2281\n                    2                                                                                                 // 2282\n                ],                                                                                                    // 2283\n                \"plurals\": function(n) { return Number(n != 1); }                                                     // 2284\n            },                                                                                                        // 2285\n            \"ro\": {                                                                                                   // 2286\n                \"name\": \"Romanian\",                                                                                   // 2287\n                \"numbers\": [                                                                                          // 2288\n                    1,                                                                                                // 2289\n                    2,                                                                                                // 2290\n                    20                                                                                                // 2291\n                ],                                                                                                    // 2292\n                \"plurals\": function(n) { return Number(n==1 ? 0 : (n===0 || (n%100 > 0 && n%100 < 20)) ? 1 : 2); }    // 2293\n            },                                                                                                        // 2294\n            \"ru\": {                                                                                                   // 2295\n                \"name\": \"Russian\",                                                                                    // 2296\n                \"numbers\": [                                                                                          // 2297\n                    1,                                                                                                // 2298\n                    2,                                                                                                // 2299\n                    5                                                                                                 // 2300\n                ],                                                                                                    // 2301\n                \"plurals\": function(n) { return Number(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2); }\n            },                                                                                                        // 2303\n            \"sah\": {                                                                                                  // 2304\n                \"name\": \"Yakut\",                                                                                      // 2305\n                \"numbers\": [                                                                                          // 2306\n                    1                                                                                                 // 2307\n                ],                                                                                                    // 2308\n                \"plurals\": function(n) { return 0; }                                                                  // 2309\n            },                                                                                                        // 2310\n            \"sco\": {                                                                                                  // 2311\n                \"name\": \"Scots\",                                                                                      // 2312\n                \"numbers\": [                                                                                          // 2313\n                    1,                                                                                                // 2314\n                    2                                                                                                 // 2315\n                ],                                                                                                    // 2316\n                \"plurals\": function(n) { return Number(n != 1); }                                                     // 2317\n            },                                                                                                        // 2318\n            \"se\": {                                                                                                   // 2319\n                \"name\": \"Northern Sami\",                                                                              // 2320\n                \"numbers\": [                                                                                          // 2321\n                    1,                                                                                                // 2322\n                    2                                                                                                 // 2323\n                ],                                                                                                    // 2324\n                \"plurals\": function(n) { return Number(n != 1); }                                                     // 2325\n            },                                                                                                        // 2326\n            \"si\": {                                                                                                   // 2327\n                \"name\": \"Sinhala\",                                                                                    // 2328\n                \"numbers\": [                                                                                          // 2329\n                    1,                                                                                                // 2330\n                    2                                                                                                 // 2331\n                ],                                                                                                    // 2332\n                \"plurals\": function(n) { return Number(n != 1); }                                                     // 2333\n            },                                                                                                        // 2334\n            \"sk\": {                                                                                                   // 2335\n                \"name\": \"Slovak\",                                                                                     // 2336\n                \"numbers\": [                                                                                          // 2337\n                    1,                                                                                                // 2338\n                    2,                                                                                                // 2339\n                    5                                                                                                 // 2340\n                ],                                                                                                    // 2341\n                \"plurals\": function(n) { return Number((n==1) ? 0 : (n>=2 && n<=4) ? 1 : 2); }                        // 2342\n            },                                                                                                        // 2343\n            \"sl\": {                                                                                                   // 2344\n                \"name\": \"Slovenian\",                                                                                  // 2345\n                \"numbers\": [                                                                                          // 2346\n                    5,                                                                                                // 2347\n                    1,                                                                                                // 2348\n                    2,                                                                                                // 2349\n                    3                                                                                                 // 2350\n                ],                                                                                                    // 2351\n                \"plurals\": function(n) { return Number(n%100==1 ? 1 : n%100==2 ? 2 : n%100==3 || n%100==4 ? 3 : 0); }\n            },                                                                                                        // 2353\n            \"so\": {                                                                                                   // 2354\n                \"name\": \"Somali\",                                                                                     // 2355\n                \"numbers\": [                                                                                          // 2356\n                    1,                                                                                                // 2357\n                    2                                                                                                 // 2358\n                ],                                                                                                    // 2359\n                \"plurals\": function(n) { return Number(n != 1); }                                                     // 2360\n            },                                                                                                        // 2361\n            \"son\": {                                                                                                  // 2362\n                \"name\": \"Songhay\",                                                                                    // 2363\n                \"numbers\": [                                                                                          // 2364\n                    1,                                                                                                // 2365\n                    2                                                                                                 // 2366\n                ],                                                                                                    // 2367\n                \"plurals\": function(n) { return Number(n != 1); }                                                     // 2368\n            },                                                                                                        // 2369\n            \"sq\": {                                                                                                   // 2370\n                \"name\": \"Albanian\",                                                                                   // 2371\n                \"numbers\": [                                                                                          // 2372\n                    1,                                                                                                // 2373\n                    2                                                                                                 // 2374\n                ],                                                                                                    // 2375\n                \"plurals\": function(n) { return Number(n != 1); }                                                     // 2376\n            },                                                                                                        // 2377\n            \"sr\": {                                                                                                   // 2378\n                \"name\": \"Serbian\",                                                                                    // 2379\n                \"numbers\": [                                                                                          // 2380\n                    1,                                                                                                // 2381\n                    2,                                                                                                // 2382\n                    5                                                                                                 // 2383\n                ],                                                                                                    // 2384\n                \"plurals\": function(n) { return Number(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2); }\n            },                                                                                                        // 2386\n            \"su\": {                                                                                                   // 2387\n                \"name\": \"Sundanese\",                                                                                  // 2388\n                \"numbers\": [                                                                                          // 2389\n                    1                                                                                                 // 2390\n                ],                                                                                                    // 2391\n                \"plurals\": function(n) { return 0; }                                                                  // 2392\n            },                                                                                                        // 2393\n            \"sv\": {                                                                                                   // 2394\n                \"name\": \"Swedish\",                                                                                    // 2395\n                \"numbers\": [                                                                                          // 2396\n                    1,                                                                                                // 2397\n                    2                                                                                                 // 2398\n                ],                                                                                                    // 2399\n                \"plurals\": function(n) { return Number(n != 1); }                                                     // 2400\n            },                                                                                                        // 2401\n            \"sw\": {                                                                                                   // 2402\n                \"name\": \"Swahili\",                                                                                    // 2403\n                \"numbers\": [                                                                                          // 2404\n                    1,                                                                                                // 2405\n                    2                                                                                                 // 2406\n                ],                                                                                                    // 2407\n                \"plurals\": function(n) { return Number(n != 1); }                                                     // 2408\n            },                                                                                                        // 2409\n            \"ta\": {                                                                                                   // 2410\n                \"name\": \"Tamil\",                                                                                      // 2411\n                \"numbers\": [                                                                                          // 2412\n                    1,                                                                                                // 2413\n                    2                                                                                                 // 2414\n                ],                                                                                                    // 2415\n                \"plurals\": function(n) { return Number(n != 1); }                                                     // 2416\n            },                                                                                                        // 2417\n            \"te\": {                                                                                                   // 2418\n                \"name\": \"Telugu\",                                                                                     // 2419\n                \"numbers\": [                                                                                          // 2420\n                    1,                                                                                                // 2421\n                    2                                                                                                 // 2422\n                ],                                                                                                    // 2423\n                \"plurals\": function(n) { return Number(n != 1); }                                                     // 2424\n            },                                                                                                        // 2425\n            \"tg\": {                                                                                                   // 2426\n                \"name\": \"Tajik\",                                                                                      // 2427\n                \"numbers\": [                                                                                          // 2428\n                    1,                                                                                                // 2429\n                    2                                                                                                 // 2430\n                ],                                                                                                    // 2431\n                \"plurals\": function(n) { return Number(n > 1); }                                                      // 2432\n            },                                                                                                        // 2433\n            \"th\": {                                                                                                   // 2434\n                \"name\": \"Thai\",                                                                                       // 2435\n                \"numbers\": [                                                                                          // 2436\n                    1                                                                                                 // 2437\n                ],                                                                                                    // 2438\n                \"plurals\": function(n) { return 0; }                                                                  // 2439\n            },                                                                                                        // 2440\n            \"ti\": {                                                                                                   // 2441\n                \"name\": \"Tigrinya\",                                                                                   // 2442\n                \"numbers\": [                                                                                          // 2443\n                    1,                                                                                                // 2444\n                    2                                                                                                 // 2445\n                ],                                                                                                    // 2446\n                \"plurals\": function(n) { return Number(n > 1); }                                                      // 2447\n            },                                                                                                        // 2448\n            \"tk\": {                                                                                                   // 2449\n                \"name\": \"Turkmen\",                                                                                    // 2450\n                \"numbers\": [                                                                                          // 2451\n                    1,                                                                                                // 2452\n                    2                                                                                                 // 2453\n                ],                                                                                                    // 2454\n                \"plurals\": function(n) { return Number(n != 1); }                                                     // 2455\n            },                                                                                                        // 2456\n            \"tr\": {                                                                                                   // 2457\n                \"name\": \"Turkish\",                                                                                    // 2458\n                \"numbers\": [                                                                                          // 2459\n                    1,                                                                                                // 2460\n                    2                                                                                                 // 2461\n                ],                                                                                                    // 2462\n                \"plurals\": function(n) { return Number(n > 1); }                                                      // 2463\n            },                                                                                                        // 2464\n            \"tt\": {                                                                                                   // 2465\n                \"name\": \"Tatar\",                                                                                      // 2466\n                \"numbers\": [                                                                                          // 2467\n                    1                                                                                                 // 2468\n                ],                                                                                                    // 2469\n                \"plurals\": function(n) { return 0; }                                                                  // 2470\n            },                                                                                                        // 2471\n            \"ug\": {                                                                                                   // 2472\n                \"name\": \"Uyghur\",                                                                                     // 2473\n                \"numbers\": [                                                                                          // 2474\n                    1                                                                                                 // 2475\n                ],                                                                                                    // 2476\n                \"plurals\": function(n) { return 0; }                                                                  // 2477\n            },                                                                                                        // 2478\n            \"uk\": {                                                                                                   // 2479\n                \"name\": \"Ukrainian\",                                                                                  // 2480\n                \"numbers\": [                                                                                          // 2481\n                    1,                                                                                                // 2482\n                    2,                                                                                                // 2483\n                    5                                                                                                 // 2484\n                ],                                                                                                    // 2485\n                \"plurals\": function(n) { return Number(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2); }\n            },                                                                                                        // 2487\n            \"ur\": {                                                                                                   // 2488\n                \"name\": \"Urdu\",                                                                                       // 2489\n                \"numbers\": [                                                                                          // 2490\n                    1,                                                                                                // 2491\n                    2                                                                                                 // 2492\n                ],                                                                                                    // 2493\n                \"plurals\": function(n) { return Number(n != 1); }                                                     // 2494\n            },                                                                                                        // 2495\n            \"uz\": {                                                                                                   // 2496\n                \"name\": \"Uzbek\",                                                                                      // 2497\n                \"numbers\": [                                                                                          // 2498\n                    1,                                                                                                // 2499\n                    2                                                                                                 // 2500\n                ],                                                                                                    // 2501\n                \"plurals\": function(n) { return Number(n > 1); }                                                      // 2502\n            },                                                                                                        // 2503\n            \"vi\": {                                                                                                   // 2504\n                \"name\": \"Vietnamese\",                                                                                 // 2505\n                \"numbers\": [                                                                                          // 2506\n                    1                                                                                                 // 2507\n                ],                                                                                                    // 2508\n                \"plurals\": function(n) { return 0; }                                                                  // 2509\n            },                                                                                                        // 2510\n            \"wa\": {                                                                                                   // 2511\n                \"name\": \"Walloon\",                                                                                    // 2512\n                \"numbers\": [                                                                                          // 2513\n                    1,                                                                                                // 2514\n                    2                                                                                                 // 2515\n                ],                                                                                                    // 2516\n                \"plurals\": function(n) { return Number(n > 1); }                                                      // 2517\n            },                                                                                                        // 2518\n            \"wo\": {                                                                                                   // 2519\n                \"name\": \"Wolof\",                                                                                      // 2520\n                \"numbers\": [                                                                                          // 2521\n                    1                                                                                                 // 2522\n                ],                                                                                                    // 2523\n                \"plurals\": function(n) { return 0; }                                                                  // 2524\n            },                                                                                                        // 2525\n            \"yo\": {                                                                                                   // 2526\n                \"name\": \"Yoruba\",                                                                                     // 2527\n                \"numbers\": [                                                                                          // 2528\n                    1,                                                                                                // 2529\n                    2                                                                                                 // 2530\n                ],                                                                                                    // 2531\n                \"plurals\": function(n) { return Number(n != 1); }                                                     // 2532\n            },                                                                                                        // 2533\n            \"zh\": {                                                                                                   // 2534\n                \"name\": \"Chinese\",                                                                                    // 2535\n                \"numbers\": [                                                                                          // 2536\n                    1                                                                                                 // 2537\n                ],                                                                                                    // 2538\n                \"plurals\": function(n) { return 0; }                                                                  // 2539\n            }                                                                                                         // 2540\n        },                                                                                                            // 2541\n                                                                                                                      // 2542\n        // for demonstration only sl and ar is added but you can add your own pluralExtensions                        // 2543\n        addRule: function(lng, obj) {                                                                                 // 2544\n            pluralExtensions.rules[lng] = obj;                                                                        // 2545\n        },                                                                                                            // 2546\n                                                                                                                      // 2547\n        setCurrentLng: function(lng) {                                                                                // 2548\n            if (!pluralExtensions.currentRule || pluralExtensions.currentRule.lng !== lng) {                          // 2549\n                var parts = lng.split('-');                                                                           // 2550\n                                                                                                                      // 2551\n                pluralExtensions.currentRule = {                                                                      // 2552\n                    lng: lng,                                                                                         // 2553\n                    rule: pluralExtensions.rules[parts[0]]                                                            // 2554\n                };                                                                                                    // 2555\n            }                                                                                                         // 2556\n        },                                                                                                            // 2557\n                                                                                                                      // 2558\n        get: function(lng, count) {                                                                                   // 2559\n            var parts = lng.split('-');                                                                               // 2560\n                                                                                                                      // 2561\n            function getResult(l, c) {                                                                                // 2562\n                var ext;                                                                                              // 2563\n                if (pluralExtensions.currentRule && pluralExtensions.currentRule.lng === lng) {                       // 2564\n                    ext = pluralExtensions.currentRule.rule;                                                          // 2565\n                } else {                                                                                              // 2566\n                    ext = pluralExtensions.rules[l];                                                                  // 2567\n                }                                                                                                     // 2568\n                if (ext) {                                                                                            // 2569\n                    var i = ext.plurals(c);                                                                           // 2570\n                    var number = ext.numbers[i];                                                                      // 2571\n                    if (ext.numbers.length === 2 && ext.numbers[0] === 1) {                                           // 2572\n                        if (number === 2) {                                                                           // 2573\n                            number = -1; // regular plural                                                            // 2574\n                        } else if (number === 1) {                                                                    // 2575\n                            number = 1; // singular                                                                   // 2576\n                        }                                                                                             // 2577\n                    }//console.log(count + '-' + number);                                                             // 2578\n                    return number;                                                                                    // 2579\n                } else {                                                                                              // 2580\n                    return c === 1 ? '1' : '-1';                                                                      // 2581\n                }                                                                                                     // 2582\n            }                                                                                                         // 2583\n                                                                                                                      // 2584\n            return getResult(parts[0], count);                                                                        // 2585\n        }                                                                                                             // 2586\n                                                                                                                      // 2587\n    };                                                                                                                // 2588\n    var postProcessors = {};                                                                                          // 2589\n    var addPostProcessor = function(name, fc) {                                                                       // 2590\n        postProcessors[name] = fc;                                                                                    // 2591\n    };                                                                                                                // 2592\n    // sprintf support                                                                                                // 2593\n    var sprintf = (function() {                                                                                       // 2594\n        function get_type(variable) {                                                                                 // 2595\n            return Object.prototype.toString.call(variable).slice(8, -1).toLowerCase();                               // 2596\n        }                                                                                                             // 2597\n        function str_repeat(input, multiplier) {                                                                      // 2598\n            for (var output = []; multiplier > 0; output[--multiplier] = input) {/* do nothing */}                    // 2599\n            return output.join('');                                                                                   // 2600\n        }                                                                                                             // 2601\n                                                                                                                      // 2602\n        var str_format = function() {                                                                                 // 2603\n            if (!str_format.cache.hasOwnProperty(arguments[0])) {                                                     // 2604\n                str_format.cache[arguments[0]] = str_format.parse(arguments[0]);                                      // 2605\n            }                                                                                                         // 2606\n            return str_format.format.call(null, str_format.cache[arguments[0]], arguments);                           // 2607\n        };                                                                                                            // 2608\n                                                                                                                      // 2609\n        str_format.format = function(parse_tree, argv) {                                                              // 2610\n            var cursor = 1, tree_length = parse_tree.length, node_type = '', arg, output = [], i, k, match, pad, pad_character, pad_length;\n            for (i = 0; i < tree_length; i++) {                                                                       // 2612\n                node_type = get_type(parse_tree[i]);                                                                  // 2613\n                if (node_type === 'string') {                                                                         // 2614\n                    output.push(parse_tree[i]);                                                                       // 2615\n                }                                                                                                     // 2616\n                else if (node_type === 'array') {                                                                     // 2617\n                    match = parse_tree[i]; // convenience purposes only                                               // 2618\n                    if (match[2]) { // keyword argument                                                               // 2619\n                        arg = argv[cursor];                                                                           // 2620\n                        for (k = 0; k < match[2].length; k++) {                                                       // 2621\n                            if (!arg.hasOwnProperty(match[2][k])) {                                                   // 2622\n                                throw(sprintf('[sprintf] property \"%s\" does not exist', match[2][k]));                // 2623\n                            }                                                                                         // 2624\n                            arg = arg[match[2][k]];                                                                   // 2625\n                        }                                                                                             // 2626\n                    }                                                                                                 // 2627\n                    else if (match[1]) { // positional argument (explicit)                                            // 2628\n                        arg = argv[match[1]];                                                                         // 2629\n                    }                                                                                                 // 2630\n                    else { // positional argument (implicit)                                                          // 2631\n                        arg = argv[cursor++];                                                                         // 2632\n                    }                                                                                                 // 2633\n                                                                                                                      // 2634\n                    if (/[^s]/.test(match[8]) && (get_type(arg) != 'number')) {                                       // 2635\n                        throw(sprintf('[sprintf] expecting number but found %s', get_type(arg)));                     // 2636\n                    }                                                                                                 // 2637\n                    switch (match[8]) {                                                                               // 2638\n                        case 'b': arg = arg.toString(2); break;                                                       // 2639\n                        case 'c': arg = String.fromCharCode(arg); break;                                              // 2640\n                        case 'd': arg = parseInt(arg, 10); break;                                                     // 2641\n                        case 'e': arg = match[7] ? arg.toExponential(match[7]) : arg.toExponential(); break;          // 2642\n                        case 'f': arg = match[7] ? parseFloat(arg).toFixed(match[7]) : parseFloat(arg); break;        // 2643\n                        case 'o': arg = arg.toString(8); break;                                                       // 2644\n                        case 's': arg = ((arg = String(arg)) && match[7] ? arg.substring(0, match[7]) : arg); break;  // 2645\n                        case 'u': arg = Math.abs(arg); break;                                                         // 2646\n                        case 'x': arg = arg.toString(16); break;                                                      // 2647\n                        case 'X': arg = arg.toString(16).toUpperCase(); break;                                        // 2648\n                    }                                                                                                 // 2649\n                    arg = (/[def]/.test(match[8]) && match[3] && arg >= 0 ? '+'+ arg : arg);                          // 2650\n                    pad_character = match[4] ? match[4] == '0' ? '0' : match[4].charAt(1) : ' ';                      // 2651\n                    pad_length = match[6] - String(arg).length;                                                       // 2652\n                    pad = match[6] ? str_repeat(pad_character, pad_length) : '';                                      // 2653\n                    output.push(match[5] ? arg + pad : pad + arg);                                                    // 2654\n                }                                                                                                     // 2655\n            }                                                                                                         // 2656\n            return output.join('');                                                                                   // 2657\n        };                                                                                                            // 2658\n                                                                                                                      // 2659\n        str_format.cache = {};                                                                                        // 2660\n                                                                                                                      // 2661\n        str_format.parse = function(fmt) {                                                                            // 2662\n            var _fmt = fmt, match = [], parse_tree = [], arg_names = 0;                                               // 2663\n            while (_fmt) {                                                                                            // 2664\n                if ((match = /^[^\\x25]+/.exec(_fmt)) !== null) {                                                      // 2665\n                    parse_tree.push(match[0]);                                                                        // 2666\n                }                                                                                                     // 2667\n                else if ((match = /^\\x25{2}/.exec(_fmt)) !== null) {                                                  // 2668\n                    parse_tree.push('%');                                                                             // 2669\n                }                                                                                                     // 2670\n                else if ((match = /^\\x25(?:([1-9]\\d*)\\$|\\(([^\\)]+)\\))?(\\+)?(0|'[^$])?(-)?(\\d+)?(?:\\.(\\d+))?([b-fosuxX])/.exec(_fmt)) !== null) {\n                    if (match[2]) {                                                                                   // 2672\n                        arg_names |= 1;                                                                               // 2673\n                        var field_list = [], replacement_field = match[2], field_match = [];                          // 2674\n                        if ((field_match = /^([a-z_][a-z_\\d]*)/i.exec(replacement_field)) !== null) {                 // 2675\n                            field_list.push(field_match[1]);                                                          // 2676\n                            while ((replacement_field = replacement_field.substring(field_match[0].length)) !== '') {\n                                if ((field_match = /^\\.([a-z_][a-z_\\d]*)/i.exec(replacement_field)) !== null) {       // 2678\n                                    field_list.push(field_match[1]);                                                  // 2679\n                                }                                                                                     // 2680\n                                else if ((field_match = /^\\[(\\d+)\\]/.exec(replacement_field)) !== null) {             // 2681\n                                    field_list.push(field_match[1]);                                                  // 2682\n                                }                                                                                     // 2683\n                                else {                                                                                // 2684\n                                    throw('[sprintf] huh?');                                                          // 2685\n                                }                                                                                     // 2686\n                            }                                                                                         // 2687\n                        }                                                                                             // 2688\n                        else {                                                                                        // 2689\n                            throw('[sprintf] huh?');                                                                  // 2690\n                        }                                                                                             // 2691\n                        match[2] = field_list;                                                                        // 2692\n                    }                                                                                                 // 2693\n                    else {                                                                                            // 2694\n                        arg_names |= 2;                                                                               // 2695\n                    }                                                                                                 // 2696\n                    if (arg_names === 3) {                                                                            // 2697\n                        throw('[sprintf] mixing positional and named placeholders is not (yet) supported');           // 2698\n                    }                                                                                                 // 2699\n                    parse_tree.push(match);                                                                           // 2700\n                }                                                                                                     // 2701\n                else {                                                                                                // 2702\n                    throw('[sprintf] huh?');                                                                          // 2703\n                }                                                                                                     // 2704\n                _fmt = _fmt.substring(match[0].length);                                                               // 2705\n            }                                                                                                         // 2706\n            return parse_tree;                                                                                        // 2707\n        };                                                                                                            // 2708\n                                                                                                                      // 2709\n        return str_format;                                                                                            // 2710\n    })();                                                                                                             // 2711\n                                                                                                                      // 2712\n    var vsprintf = function(fmt, argv) {                                                                              // 2713\n        argv.unshift(fmt);                                                                                            // 2714\n        return sprintf.apply(null, argv);                                                                             // 2715\n    };                                                                                                                // 2716\n                                                                                                                      // 2717\n    addPostProcessor(\"sprintf\", function(val, key, opts) {                                                            // 2718\n        if (!opts.sprintf) return val;                                                                                // 2719\n                                                                                                                      // 2720\n        if (Object.prototype.toString.apply(opts.sprintf) === '[object Array]') {                                     // 2721\n            return vsprintf(val, opts.sprintf);                                                                       // 2722\n        } else if (typeof opts.sprintf === 'object') {                                                                // 2723\n            return sprintf(val, opts.sprintf);                                                                        // 2724\n        }                                                                                                             // 2725\n                                                                                                                      // 2726\n        return val;                                                                                                   // 2727\n    });                                                                                                               // 2728\n    // public api interface                                                                                           // 2729\n    TAPi18next.init = init;                                                                                           // 2730\n    TAPi18next.setLng = setLng;                                                                                       // 2731\n    TAPi18next.preload = preload;                                                                                     // 2732\n    TAPi18next.addResourceBundle = addResourceBundle;                                                                 // 2733\n    TAPi18next.removeResourceBundle = removeResourceBundle;                                                           // 2734\n    TAPi18next.loadNamespace = loadNamespace;                                                                         // 2735\n    TAPi18next.loadNamespaces = loadNamespaces;                                                                       // 2736\n    TAPi18next.setDefaultNamespace = setDefaultNamespace;                                                             // 2737\n    TAPi18next.t = translate;                                                                                         // 2738\n    TAPi18next.translate = translate;                                                                                 // 2739\n    TAPi18next.exists = exists;                                                                                       // 2740\n    TAPi18next.detectLanguage = f.detectLanguage;                                                                     // 2741\n    TAPi18next.pluralExtensions = pluralExtensions;                                                                   // 2742\n    TAPi18next.sync = sync;                                                                                           // 2743\n    TAPi18next.functions = f;                                                                                         // 2744\n    TAPi18next.lng = lng;                                                                                             // 2745\n    TAPi18next.addPostProcessor = addPostProcessor;                                                                   // 2746\n    TAPi18next.options = o;                                                                                           // 2747\n})();                                                                                                                 // 2748\n                                                                                                                      // 2749\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/tap_i18n/lib/tap_i18next/tap_i18next_init.js                                                              //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nTAPi18next.init({resStore: {}, fallbackLng: globals.fallback_language, useCookie: false});                            // 1\n                                                                                                                      // 2\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/tap_i18n/lib/tap_i18n/tap_i18n-helpers.coffee.js                                                          //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nshare.helpers = {};                                                                                                   // 1\n                                                                                                                      //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/tap_i18n/lib/tap_i18n/tap_i18n-common.coffee.js                                                           //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nvar fallback_language;                                                                                                // 1\n                                                                                                                      //\nfallback_language = globals.fallback_language;                                                                        // 1\n                                                                                                                      //\nTAPi18n = function() {                                                                                                // 1\n  EventEmitter.call(this);                                                                                            // 4\n  this._fallback_language = fallback_language;                                                                        // 4\n  this._language_changed_tracker = new Tracker.Dependency;                                                            // 4\n  this._loaded_languages = [fallback_language];                                                                       // 4\n  this.conf = null;                                                                                                   // 4\n  this.packages = {};                                                                                                 // 4\n  this.languages_names = {};                                                                                          // 4\n  this.translations = {};                                                                                             // 4\n  if (Meteor.isClient) {                                                                                              // 27\n    Session.set(this._loaded_lang_session_key, null);                                                                 // 28\n    this._languageSpecificTranslators = {};                                                                           // 28\n    this._languageSpecificTranslatorsTrackers = {};                                                                   // 28\n  }                                                                                                                   //\n  if (Meteor.isServer) {                                                                                              // 33\n    this.server_translators = {};                                                                                     // 34\n    Meteor.startup((function(_this) {                                                                                 // 34\n      return function() {                                                                                             //\n        if (_this._enabled()) {                                                                                       // 38\n          return _this._registerHTTPMethod();                                                                         //\n        }                                                                                                             //\n      };                                                                                                              //\n    })(this));                                                                                                        //\n  }                                                                                                                   //\n  this.__ = this._getPackageI18nextProxy(globals.project_translations_domain);                                        // 4\n  TAPi18next.setLng(fallback_language);                                                                               // 4\n  return this;                                                                                                        // 45\n};                                                                                                                    // 3\n                                                                                                                      //\nUtil.inherits(TAPi18n, EventEmitter);                                                                                 // 1\n                                                                                                                      //\n_.extend(TAPi18n.prototype, {                                                                                         // 1\n  _loaded_lang_session_key: \"TAPi18n::loaded_lang\",                                                                   // 50\n  _enable: function(conf) {                                                                                           // 50\n    this.conf = conf;                                                                                                 // 57\n    return this._onceEnabled();                                                                                       //\n  },                                                                                                                  //\n  _onceEnabled: function() {},                                                                                        // 50\n  _enabled: function() {                                                                                              // 50\n    return this.conf != null;                                                                                         //\n  },                                                                                                                  //\n  _getPackageDomain: function(package_name) {                                                                         // 50\n    return package_name.replace(/:/g, \"-\");                                                                           //\n  },                                                                                                                  //\n  addResourceBundle: function(lang_tag, package_name, translations) {                                                 // 50\n    return TAPi18next.addResourceBundle(lang_tag, this._getPackageDomain(package_name), translations);                //\n  },                                                                                                                  //\n  _getSpecificLangTranslator: function(lang) {                                                                        // 50\n    var current_lang, translator;                                                                                     // 77\n    current_lang = TAPi18next.lng();                                                                                  // 77\n    translator = null;                                                                                                // 77\n    TAPi18next.setLng(lang, {                                                                                         // 77\n      fixLng: true                                                                                                    // 80\n    }, (function(_this) {                                                                                             //\n      return function(lang_translator) {                                                                              //\n        return translator = lang_translator;                                                                          //\n      };                                                                                                              //\n    })(this));                                                                                                        //\n    TAPi18next.setLng(current_lang);                                                                                  // 77\n    return translator;                                                                                                // 87\n  },                                                                                                                  //\n  _getProjectLanguages: function() {                                                                                  // 50\n    if (this._enabled()) {                                                                                            // 91\n      if (_.isArray(this.conf.supported_languages)) {                                                                 // 92\n        return _.union([this._fallback_language], this.conf.supported_languages);                                     // 93\n      } else {                                                                                                        //\n        return _.keys(this.languages_names);                                                                          // 103\n      }                                                                                                               //\n    } else {                                                                                                          //\n      return [this._fallback_language];                                                                               // 105\n    }                                                                                                                 //\n  },                                                                                                                  //\n  getLanguages: function() {                                                                                          // 50\n    var i, lang_tag, languages, len, ref;                                                                             // 108\n    if (!this._enabled()) {                                                                                           // 108\n      return null;                                                                                                    // 109\n    }                                                                                                                 //\n    languages = {};                                                                                                   // 108\n    ref = this._getProjectLanguages();                                                                                // 112\n    for (i = 0, len = ref.length; i < len; i++) {                                                                     // 112\n      lang_tag = ref[i];                                                                                              //\n      languages[lang_tag] = {                                                                                         // 113\n        name: this.languages_names[lang_tag][1],                                                                      // 114\n        en: this.languages_names[lang_tag][0]                                                                         // 114\n      };                                                                                                              //\n    }                                                                                                                 // 112\n    return languages;                                                                                                 //\n  },                                                                                                                  //\n  _loadLangFileObject: function(language_tag, data) {                                                                 // 50\n    var package_keys, package_name, ref, results;                                                                     // 120\n    results = [];                                                                                                     // 120\n    for (package_name in data) {                                                                                      //\n      package_keys = data[package_name];                                                                              //\n      package_keys = _.extend({}, package_keys, ((ref = this._loadTranslations_cache[language_tag]) != null ? ref[package_name] : void 0) || {});\n      results.push(this.addResourceBundle(language_tag, package_name, package_keys));                                 // 122\n    }                                                                                                                 // 120\n    return results;                                                                                                   //\n  },                                                                                                                  //\n  _loadTranslations_cache: {},                                                                                        // 50\n  loadTranslations: function(translations, namespace) {                                                               // 50\n    var language_tag, project_languages, results, translation_keys;                                                   // 128\n    project_languages = this._getProjectLanguages();                                                                  // 128\n    results = [];                                                                                                     // 130\n    for (language_tag in translations) {                                                                              //\n      translation_keys = translations[language_tag];                                                                  //\n      if (this._loadTranslations_cache[language_tag] == null) {                                                       // 131\n        this._loadTranslations_cache[language_tag] = {};                                                              // 132\n      }                                                                                                               //\n      if (this._loadTranslations_cache[language_tag][namespace] == null) {                                            // 134\n        this._loadTranslations_cache[language_tag][namespace] = {};                                                   // 135\n      }                                                                                                               //\n      _.extend(this._loadTranslations_cache[language_tag][namespace], translation_keys);                              // 131\n      this.addResourceBundle(language_tag, namespace, translation_keys);                                              // 131\n      if (Meteor.isClient && this.getLanguage() === language_tag) {                                                   // 141\n        results.push(this._language_changed_tracker.changed());                                                       //\n      } else {                                                                                                        //\n        results.push(void 0);                                                                                         //\n      }                                                                                                               //\n    }                                                                                                                 // 130\n    return results;                                                                                                   //\n  }                                                                                                                   //\n});                                                                                                                   //\n                                                                                                                      //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/tap_i18n/lib/tap_i18n/tap_i18n-server.coffee.js                                                           //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nvar indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };\n                                                                                                                      //\n_.extend(TAPi18n.prototype, {                                                                                         // 1\n  server_translators: null,                                                                                           // 2\n  _registerServerTranslator: function(lang_tag, package_name) {                                                       // 2\n    if (this._enabled()) {                                                                                            // 5\n      if (!(lang_tag in this.server_translators)) {                                                                   // 6\n        this.server_translators[lang_tag] = this._getSpecificLangTranslator(lang_tag);                                // 7\n      }                                                                                                               //\n      if (lang_tag !== this._fallback_language) {                                                                     // 10\n        this.addResourceBundle(lang_tag, package_name, this.translations[lang_tag][package_name]);                    // 11\n      }                                                                                                               //\n    }                                                                                                                 //\n    if (!(this._fallback_language in this.server_translators)) {                                                      // 13\n      return this.server_translators[this._fallback_language] = this._getSpecificLangTranslator(this._fallback_language);\n    }                                                                                                                 //\n  },                                                                                                                  //\n  _registerAllServerTranslators: function() {                                                                         // 2\n    var i, lang_tag, len, package_name, ref, results;                                                                 // 17\n    ref = this._getProjectLanguages();                                                                                // 17\n    results = [];                                                                                                     // 17\n    for (i = 0, len = ref.length; i < len; i++) {                                                                     //\n      lang_tag = ref[i];                                                                                              //\n      results.push((function() {                                                                                      // 18\n        var results1;                                                                                                 //\n        results1 = [];                                                                                                // 18\n        for (package_name in this.translations[lang_tag]) {                                                           //\n          results1.push(this._registerServerTranslator(lang_tag, package_name));                                      // 19\n        }                                                                                                             // 18\n        return results1;                                                                                              //\n      }).call(this));                                                                                                 //\n    }                                                                                                                 // 17\n    return results;                                                                                                   //\n  },                                                                                                                  //\n  _getPackageI18nextProxy: function(package_name) {                                                                   // 2\n    return (function(_this) {                                                                                         //\n      return function(key, options, lang_tag) {                                                                       //\n        if (lang_tag == null) {                                                                                       //\n          lang_tag = null;                                                                                            //\n        }                                                                                                             //\n        if (lang_tag == null) {                                                                                       // 24\n          return _this.server_translators[_this._fallback_language]((_this._getPackageDomain(package_name)) + \":\" + key, options);\n        } else if (!(lang_tag in _this.server_translators)) {                                                         //\n          console.log(\"Warning: language \" + lang_tag + \" is not supported in this project, fallback language (\" + _this._fallback_language + \")\");\n          return _this.server_translators[_this._fallback_language]((_this._getPackageDomain(package_name)) + \":\" + key, options);\n        } else {                                                                                                      //\n          return _this.server_translators[lang_tag]((_this._getPackageDomain(package_name)) + \":\" + key, options);    // 31\n        }                                                                                                             //\n      };                                                                                                              //\n    })(this);                                                                                                         //\n  },                                                                                                                  //\n  _registerHTTPMethod: function() {                                                                                   // 2\n    var methods, self;                                                                                                // 34\n    self = this;                                                                                                      // 34\n    methods = {};                                                                                                     // 34\n    if (!self._enabled()) {                                                                                           // 38\n      throw new Meteor.Error(500, \"tap-i18n has to be enabled in order to register the HTTP method\");                 // 39\n    }                                                                                                                 //\n    methods[(self.conf.i18n_files_route.replace(/\\/$/, \"\")) + \"/multi/:langs\"] = {                                    // 34\n      get: function() {                                                                                               // 42\n        var i, lang_tag, langs, language_translations, len, output;                                                   // 43\n        if (!RegExp(\"^((\" + globals.langauges_tags_regex + \",)*\" + globals.langauges_tags_regex + \"|all).json$\").test(this.params.langs)) {\n          return this.setStatusCode(401);                                                                             // 44\n        }                                                                                                             //\n        langs = this.params.langs.replace(\".json\", \"\");                                                               // 43\n        if (langs === \"all\") {                                                                                        // 48\n          output = self.translations;                                                                                 // 49\n        } else {                                                                                                      //\n          output = {};                                                                                                // 51\n          langs = langs.split(\",\");                                                                                   // 51\n          for (i = 0, len = langs.length; i < len; i++) {                                                             // 54\n            lang_tag = langs[i];                                                                                      //\n            if (indexOf.call(self._getProjectLanguages(), lang_tag) >= 0 && lang_tag !== self._fallback_language) {   // 55\n              language_translations = self.translations[lang_tag];                                                    // 57\n              if (language_translations != null) {                                                                    // 59\n                output[lang_tag] = language_translations;                                                             // 60\n              }                                                                                                       //\n            }                                                                                                         //\n          }                                                                                                           // 54\n        }                                                                                                             //\n        return JSON.stringify(output);                                                                                // 62\n      }                                                                                                               //\n    };                                                                                                                //\n    methods[(self.conf.i18n_files_route.replace(/\\/$/, \"\")) + \"/:lang\"] = {                                           // 34\n      get: function() {                                                                                               // 65\n        var lang_tag, language_translations;                                                                          // 66\n        if (!RegExp(\"^\" + globals.langauges_tags_regex + \".json$\").test(this.params.lang)) {                          // 66\n          return this.setStatusCode(401);                                                                             // 67\n        }                                                                                                             //\n        lang_tag = this.params.lang.replace(\".json\", \"\");                                                             // 66\n        if (indexOf.call(self._getProjectLanguages(), lang_tag) < 0 || lang_tag === self._fallback_language) {        // 71\n          return this.setStatusCode(404);                                                                             // 73\n        }                                                                                                             //\n        language_translations = self.translations[lang_tag];                                                          // 66\n        return JSON.stringify(language_translations != null ? language_translations : {});                            // 80\n      }                                                                                                               //\n    };                                                                                                                //\n    return HTTP.methods(methods);                                                                                     //\n  },                                                                                                                  //\n  _onceEnabled: function() {                                                                                          // 2\n    return this._registerAllServerTranslators();                                                                      //\n  }                                                                                                                   //\n});                                                                                                                   //\n                                                                                                                      //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/tap_i18n/lib/tap_i18n/tap_i18n-init.coffee.js                                                             //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\n                                                                                                                      // 1\n                                                                                                                      //\nTAPi18n = new TAPi18n();                                                                                              // 1\n                                                                                                                      //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['tap:i18n'] = {}, {\n  TAPi18next: TAPi18next,\n  TAPi18n: TAPi18n\n});\n\n})();\n","servePath":"/packages/tap_i18n.js","sourceMap":{"version":3,"sources":["/packages/tap_i18n/lib/globals.js","/packages/tap_i18n/lib/tap_i18next/tap_i18next-1.7.3.js","/packages/tap_i18n/lib/tap_i18next/tap_i18next_init.js","/packages/tap_i18n/lib/tap_i18n/tap_i18n-helpers.coffee","/packages/tap_i18n/lib/tap_i18n/tap_i18n-common.coffee","/packages/tap_i18n/lib/tap_i18n/tap_i18n-server.coffee","/packages/tap_i18n/lib/tap_i18n/tap_i18n-init.coffee"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2H;;;;;;;;;;;;;;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6H;;;;;;;;;;;;;;;;;;AC5rFA;AACA,0H;;;;;;;;;;;;;;;;;;;ACDA,KAAK,CAAC,OAAN,GAAgB,EAAhB;;;;;;;;;;;;;;;;;;;;ACAA;;AAAA,oBAAoB,OAAO,CAAC,iBAA5B;;AAAA,OAEA,GAAU;AACR,cAAY,CAAC,IAAb,CAAkB,IAAlB;AAAA,EAEA,IAAC,mBAAD,GAAsB,iBAFtB;AAAA,EAIA,IAAC,0BAAD,GAA6B,WAAW,CAAC,UAJzC;AAAA,EAMA,IAAC,kBAAD,GAAqB,CAAC,iBAAD,CANrB;AAAA,EAQA,IAAC,KAAD,GAAQ,IARR;AAAA,EAWA,IAAC,SAAD,GAAY,EAXZ;AAAA,EAaA,IAAC,gBAAD,GAAmB,EAbnB;AAAA,EAmBA,IAAC,aAAD,GAAgB,EAnBhB;AAuBA,MAAG,MAAM,CAAC,QAAV;AACE,WAAO,CAAC,GAAR,CAAY,IAAC,yBAAb,EAAuC,IAAvC;AAAA,IAEA,IAAC,6BAAD,GAAgC,EAFhC;AAAA,IAGA,IAAC,qCAAD,GAAwC,EAHxC,CADF;GAvBA;AA6BA,MAAG,MAAM,CAAC,QAAV;AACE,QAAC,mBAAD,GAAsB,EAAtB;AAAA,IAEA,MAAM,CAAC,OAAP,CAAe;aAAA;AAEb,YAAG,KAAC,SAAD,EAAH;iBACE,KAAC,oBAAD,GADF;SAFa;MAAA;IAAA,QAAf,CAFA,CADF;GA7BA;AAAA,EAqCA,IAAC,GAAD,GAAM,IAAC,wBAAD,CAAyB,OAAO,CAAC,2BAAjC,CArCN;AAAA,EAuCA,UAAU,CAAC,MAAX,CAAkB,iBAAlB,CAvCA;AAyCA,SAAO,IAAP,CA1CQ;AAAA,CAFV;;AAAA,IA8CI,CAAC,QAAL,CAAc,OAAd,EAAuB,YAAvB,CA9CA;;AAAA,CAgDC,CAAC,MAAF,CAAS,OAAO,CAAC,SAAjB,EACE;AAAA,4BAA0B,sBAA1B;AAAA,EAEA,SAAS,SAAC,IAAD;AAKP,QAAC,KAAD,GAAQ,IAAR;WAEA,IAAC,CAAC,YAAF,GAPO;EAAA,CAFT;AAAA,EAWA,cAAc,aAXd;AAAA,EAgBA,UAAU;WAER,kBAFQ;EAAA,CAhBV;AAAA,EAoBA,mBAAmB,SAAC,YAAD;WACjB,YAAY,CAAC,OAAb,CAAqB,IAArB,EAA2B,GAA3B,EADiB;EAAA,CApBnB;AAAA,EAuBA,mBAAmB,SAAC,QAAD,EAAW,YAAX,EAAyB,YAAzB;WACjB,UAAU,CAAC,iBAAX,CAA6B,QAA7B,EAAuC,IAAC,kBAAD,CAAmB,YAAnB,CAAvC,EAAyE,YAAzE,EADiB;EAAA,CAvBnB;AAAA,EA0BA,4BAA4B,SAAC,IAAD;AAC1B;AAAA,mBAAe,UAAU,CAAC,GAAX,EAAf;AAAA,IAEA,aAAa,IAFb;AAAA,IAGA,UAAU,CAAC,MAAX,CAAkB,IAAlB,EAAwB;AAAA,MAAC,QAAQ,IAAT;KAAxB,EAAwC;aAAA,SAAC,eAAD;eACtC,aAAa,gBADyB;MAAA;IAAA,QAAxC,CAHA;AAAA,IAQA,UAAU,CAAC,MAAX,CAAkB,YAAlB,CARA;AAUA,WAAO,UAAP,CAX0B;EAAA,CA1B5B;AAAA,EAuCA,sBAAsB;AAEpB,QAAG,IAAC,CAAC,QAAF,EAAH;AACE,UAAG,CAAC,CAAC,OAAF,CAAU,IAAC,CAAC,IAAI,CAAC,mBAAjB,CAAH;AACE,eAAO,CAAC,CAAC,KAAF,CAAQ,CAAC,IAAC,CAAC,kBAAH,CAAR,EAAgC,IAAC,CAAC,IAAI,CAAC,mBAAvC,CAAP,CADF;OAAA;AAWE,eAAO,CAAC,CAAC,IAAF,CAAO,IAAC,CAAC,eAAT,CAAP,CAXF;OADF;KAAA;AAcE,aAAO,CAAC,IAAC,CAAC,kBAAH,CAAP,CAdF;KAFoB;EAAA,CAvCtB;AAAA,EAyDA,cAAc;AACZ;AAAA,QAAG,KAAK,CAAC,QAAF,EAAP;AACE,aAAO,IAAP,CADF;KAAA;AAAA,IAGA,YAAY,EAHZ;AAIA;AAAA;wBAAA;AACE,eAAU,UAAV,GACE;AAAA,cAAM,IAAC,CAAC,eAAgB,UAAU,GAAlC;AAAA,QACA,IAAI,IAAC,CAAC,eAAgB,UAAU,GADhC;OADF,CADF;AAAA,KAJA;WASA,UAVY;EAAA,CAzDd;AAAA,EAqEA,qBAAqB,SAAC,YAAD,EAAe,IAAf;AACnB;AAAA;SAAA;wCAAA;AAEE,qBAAe,CAAC,CAAC,MAAF,CAAS,EAAT,EAAa,YAAb,mEAAmE,wBAAxC,IAAyD,EAApF,CAAf;AAAA,mBAEA,IAAC,kBAAD,CAAmB,YAAnB,EAAiC,YAAjC,EAA+C,YAA/C,EAFA,CAFF;AAAA;mBADmB;EAAA,CArErB;AAAA,EA4EA,yBAAyB,EA5EzB;AAAA,EA6EA,kBAAkB,SAAC,YAAD,EAAe,SAAf;AAChB;AAAA,wBAAoB,IAAC,qBAAD,EAApB;AAEA;SAAA;oDAAA;AACE,UAAO,kDAAP;AACE,YAAC,wBAAwB,cAAzB,GAAyC,EAAzC,CADF;OAAA;AAGA,UAAO,6DAAP;AACE,YAAC,wBAAwB,cAAc,WAAvC,GAAoD,EAApD,CADF;OAHA;AAAA,MAMA,CAAC,CAAC,MAAF,CAAS,IAAC,wBAAwB,cAAc,WAAhD,EAA4D,gBAA5D,CANA;AAAA,MAQA,IAAC,kBAAD,CAAmB,YAAnB,EAAiC,SAAjC,EAA4C,gBAA5C,CARA;AAUA,UAAG,MAAM,CAAC,QAAP,IAAoB,IAAC,YAAD,OAAkB,YAAzC;qBAEE,IAAC,0BAAyB,CAAC,OAA3B,IAFF;OAAA;6BAAA;OAXF;AAAA;mBAHgB;EAAA,CA7ElB;CADF,CAhDA;;;;;;;;;;;;;;;;;;;;ACAA;;AAAA,CAAC,CAAC,MAAF,CAAS,OAAO,CAAC,SAAjB,EACE;AAAA,sBAAoB,IAApB;AAAA,EAEA,2BAA2B,SAAC,QAAD,EAAW,YAAX;AACzB,QAAG,IAAC,SAAD,EAAH;AACE,UAAG,EAAI,YAAY,IAAC,mBAAd,CAAN;AACE,YAAC,mBAAmB,UAApB,GAAgC,IAAC,2BAAD,CAA4B,QAA5B,CAAhC,CADF;OAAA;AAIA,UAAG,aAAY,IAAC,mBAAhB;AACE,YAAC,kBAAD,CAAmB,QAAnB,EAA6B,YAA7B,EAA2C,IAAC,aAAa,UAAU,cAAnE,EADF;OALF;KAAA;AAQA,QAAG,EAAI,IAAC,mBAAD,IAAuB,IAAC,mBAAzB,CAAN;aACE,IAAC,mBAAmB,KAAC,mBAAD,CAApB,GAA2C,IAAC,2BAAD,CAA4B,IAAC,mBAA7B,EAD7C;KATyB;EAAA,CAF3B;AAAA,EAcA,+BAA+B;AAC7B;AAAA;AAAA;SAAA;wBAAA;AACE;;AAAA;aAAA;AACE,4BAAC,0BAAD,CAA2B,QAA3B,EAAqC,YAArC,GADF;AAAA;;oBAAA,CADF;AAAA;mBAD6B;EAAA,CAd/B;AAAA,EAmBA,yBAAyB,SAAC,YAAD;WAEvB;aAAA,SAAC,GAAD,EAAM,OAAN,EAAe,QAAf;;UAAe,WAAS;SACtB;AAAA,YAAO,gBAAP;AAEE,iBAAO,KAAC,mBAAmB,MAAC,mBAAD,CAApB,CAA2C,CAAC,KAAC,kBAAD,CAAmB,YAAnB,CAAD,IAAkC,GAAlC,GAAqC,GAAhF,EAAuF,OAAvF,CAAP,CAFF;SAAA,MAGK,IAAG,EAAI,YAAY,KAAC,mBAAd,CAAN;AACH,iBAAO,CAAC,GAAR,CAAY,uBAAqB,QAArB,GAA8B,wDAA9B,GAAsF,KAAC,mBAAvF,GAA0G,GAAtH;AACA,iBAAO,KAAC,mBAAmB,MAAC,mBAAD,CAApB,CAA2C,CAAC,KAAC,kBAAD,CAAmB,YAAnB,CAAD,IAAkC,GAAlC,GAAqC,GAAhF,EAAuF,OAAvF,CAAP,CAFG;SAAA;AAIH,iBAAO,KAAC,mBAAmB,UAApB,CAAgC,CAAC,KAAC,kBAAD,CAAmB,YAAnB,CAAD,IAAkC,GAAlC,GAAqC,GAArE,EAA4E,OAA5E,CAAP,CAJG;SAJP;MAAA;IAAA,SAFuB;EAAA,CAnBzB;AAAA,EA+BA,qBAAqB;AACnB;AAAA,WAAO,IAAP;AAAA,IAEA,UAAU,EAFV;AAIA,QAAG,KAAQ,CAAC,QAAL,EAAP;AACE,YAAU,UAAM,CAAC,KAAP,CAAa,GAAb,EAAkB,iEAAlB,CAAV,CADF;KAJA;AAAA,IAOA,OAAQ,CAAE,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,OAA3B,CAAmC,KAAnC,EAA0C,EAA1C,CAAD,IAA+C,eAAjD,CAAR,GACE;AAAA,WAAK;AACH;AAAA,YAAG,OAAI,CAAO,QAAM,OAAO,CAAC,oBAAd,GAAmC,KAAnC,GAAwC,OAAO,CAAC,oBAAhD,GAAqE,aAA5E,CAAyF,CAAC,IAA1F,CAA+F,IAAC,OAAM,CAAC,KAAvG,CAAP;AACE,iBAAO,IAAC,cAAD,CAAe,GAAf,CAAP,CADF;SAAA;AAAA,QAGA,QAAQ,IAAC,OAAM,CAAC,KAAK,CAAC,OAAd,CAAsB,OAAtB,EAA+B,EAA/B,CAHR;AAKA,YAAG,UAAS,KAAZ;AACE,mBAAS,IAAI,CAAC,YAAd,CADF;SAAA;AAGE,mBAAS,EAAT;AAAA,UAEA,QAAQ,KAAK,CAAC,KAAN,CAAY,GAAZ,CAFR;AAGA;gCAAA;AACE,gBAAG,aAAY,IAAI,CAAC,oBAAL,EAAZ,oBACA,aAAY,IAAI,CAAC,kBADpB;AAEE,sCAAwB,IAAI,CAAC,YAAa,UAA1C;AAEA,kBAAG,6BAAH;AACE,sBAAO,UAAP,GAAmB,qBAAnB,CADF;eAJF;aADF;AAAA,WANF;SALA;AAmBA,eAAO,IAAI,CAAC,SAAL,CAAe,MAAf,CAAP,CApBG;MAAA,CAAL;KARF;AAAA,IA8BA,OAAQ,CAAE,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,OAA3B,CAAmC,KAAnC,EAA0C,EAA1C,CAAD,IAA+C,QAAjD,CAAR,GACE;AAAA,WAAK;AACH;AAAA,YAAG,OAAI,CAAO,MAAI,OAAO,CAAC,oBAAZ,GAAiC,QAAxC,CAAgD,CAAC,IAAjD,CAAsD,IAAC,OAAM,CAAC,IAA9D,CAAP;AACE,iBAAO,IAAC,cAAD,CAAe,GAAf,CAAP,CADF;SAAA;AAAA,QAGA,WAAW,IAAC,OAAM,CAAC,IAAI,CAAC,OAAb,CAAqB,OAArB,EAA8B,EAA9B,CAHX;AAKA,YAAG,aAAgB,IAAI,CAAC,oBAAL,EAAhB,mBACA,aAAY,IAAI,CAAC,kBADpB;AAEE,iBAAO,IAAC,cAAD,CAAe,GAAf,CAAP,CAFF;SALA;AAAA,QASA,wBAAwB,IAAI,CAAC,YAAa,UAT1C;AAcA,eAAO,IAAI,CAAC,SAAL,CAAkB,6BAAH,GAA+B,qBAA/B,GAA0D,EAAzE,CAAP,CAfG;MAAA,CAAL;KA/BF;WAgDA,IAAI,CAAC,OAAL,CAAa,OAAb,EAjDmB;EAAA,CA/BrB;AAAA,EAkFA,cAAc;WACZ,IAAC,8BAAD,GADY;EAAA,CAlFd;CADF;;;;;;;;;;;;;;;;;;;;ACAA;;AAAA,UAAc,aAAd","file":"/packages/tap_i18n.js","sourcesContent":["// The globals object will be accessible to the build plugin, the server and\n// the client\n\nglobals = {\n  fallback_language: \"en\",\n  langauges_tags_regex: \"([a-z]{2})(-[A-Z]{2})?\",\n  project_translations_domain: \"project\",\n  browser_path: \"/tap-i18n\",\n  debug: false\n};\n","// tap_i18next is a copy of i18next that expose i18next to the global namespace\n// under the name name TAPi18next instead of i18n to (1) avoid interfering with other\n// Meteor packages that might use i18n with different configurations than we do\n// or worse - (2) using a different version of i18next\n//\n// setJqueryExt is disabled by default in TAPi18next\n// sprintf is a default postProcess in TAPi18next\n//\n// TAPi18next is set outside of the singleton builder to make it available in the\n// package level\n\n// i18next, v1.7.3\n// Copyright (c)2014 Jan MÃ¼hlemann (jamuhl).\n// Distributed under MIT license\n// http://i18next.com\n\n// set TAPi18next outseid of the singleton builder to make it available in the package level\nTAPi18next = {};\n(function() {\n\n    // add indexOf to non ECMA-262 standard compliant browsers\n    if (!Array.prototype.indexOf) {\n        Array.prototype.indexOf = function (searchElement /*, fromIndex */ ) {\n            \"use strict\";\n            if (this == null) {\n                throw new TypeError();\n            }\n            var t = Object(this);\n            var len = t.length >>> 0;\n            if (len === 0) {\n                return -1;\n            }\n            var n = 0;\n            if (arguments.length > 0) {\n                n = Number(arguments[1]);\n                if (n != n) { // shortcut for verifying if it's NaN\n                    n = 0;\n                } else if (n != 0 && n != Infinity && n != -Infinity) {\n                    n = (n > 0 || -1) * Math.floor(Math.abs(n));\n                }\n            }\n            if (n >= len) {\n                return -1;\n            }\n            var k = n >= 0 ? n : Math.max(len - Math.abs(n), 0);\n            for (; k < len; k++) {\n                if (k in t && t[k] === searchElement) {\n                    return k;\n                }\n            }\n            return -1;\n        }\n    }\n    \n    // add lastIndexOf to non ECMA-262 standard compliant browsers\n    if (!Array.prototype.lastIndexOf) {\n        Array.prototype.lastIndexOf = function(searchElement /*, fromIndex*/) {\n            \"use strict\";\n            if (this == null) {\n                throw new TypeError();\n            }\n            var t = Object(this);\n            var len = t.length >>> 0;\n            if (len === 0) {\n                return -1;\n            }\n            var n = len;\n            if (arguments.length > 1) {\n                n = Number(arguments[1]);\n                if (n != n) {\n                    n = 0;\n                } else if (n != 0 && n != (1 / 0) && n != -(1 / 0)) {\n                    n = (n > 0 || -1) * Math.floor(Math.abs(n));\n                }\n            }\n            var k = n >= 0 ? Math.min(n, len - 1) : len - Math.abs(n);\n            for (; k >= 0; k--) {\n                if (k in t && t[k] === searchElement) {\n                    return k;\n                }\n            }\n            return -1;\n        };\n    }\n    \n    // Add string trim for IE8.\n    if (typeof String.prototype.trim !== 'function') {\n        String.prototype.trim = function() {\n            return this.replace(/^\\s+|\\s+$/g, ''); \n        }\n    }\n\n    var root = this\n      , $ = root.jQuery || root.Zepto\n      , resStore = {}\n      , currentLng\n      , replacementCounter = 0\n      , languages = []\n      , initialized = false;\n\n\n    // Export the i18next object for **CommonJS**. \n    // If we're not in CommonJS, add `i18n` to the\n    // global object or to jquery.\n    if (typeof module !== 'undefined' && module.exports) {\n        module.exports = TAPi18next;\n    } else {\n        if ($) {\n            $.TAPi18next = $.TAPi18next || TAPi18next;\n        }\n        \n        root.TAPi18next = root.TAPi18next || TAPi18next;\n    }\n    // defaults\n    var o = {\n        lng: undefined,\n        load: 'all',\n        preload: [],\n        lowerCaseLng: false,\n        returnObjectTrees: false,\n        fallbackLng: ['dev'],\n        fallbackNS: [],\n        detectLngQS: 'setLng',\n        ns: 'translation',\n        fallbackOnNull: true,\n        fallbackOnEmpty: false,\n        fallbackToDefaultNS: false,\n        nsseparator: ':',\n        keyseparator: '.',\n        selectorAttr: 'data-i18n',\n        debug: false,\n        \n        resGetPath: 'locales/__lng__/__ns__.json',\n        resPostPath: 'locales/add/__lng__/__ns__',\n    \n        getAsync: true,\n        postAsync: true,\n    \n        resStore: undefined,\n        useLocalStorage: false,\n        localStorageExpirationTime: 7*24*60*60*1000,\n    \n        dynamicLoad: false,\n        sendMissing: false,\n        sendMissingTo: 'fallback', // current | all\n        sendType: 'POST',\n    \n        interpolationPrefix: '__',\n        interpolationSuffix: '__',\n        reusePrefix: '$t(',\n        reuseSuffix: ')',\n        pluralSuffix: '_plural',\n        pluralNotFound: ['plural_not_found', Math.random()].join(''),\n        contextNotFound: ['context_not_found', Math.random()].join(''),\n        escapeInterpolation: false,\n    \n        setJqueryExt: false,\n        defaultValueFromContent: true,\n        useDataAttrOptions: false,\n        cookieExpirationTime: undefined,\n        useCookie: true,\n        cookieName: 'TAPi18next',\n        cookieDomain: undefined,\n    \n        objectTreeKeyHandler: undefined,\n        postProcess: [\"sprintf\"],\n        parseMissingKey: undefined,\n    \n        shortcutFunction: 'sprintf' // or: defaultValue\n    };\n    function _extend(target, source) {\n        if (!source || typeof source === 'function') {\n            return target;\n        }\n    \n        for (var attr in source) { target[attr] = source[attr]; }\n        return target;\n    }\n    \n    function _each(object, callback, args) {\n        var name, i = 0,\n            length = object.length,\n            isObj = length === undefined || Object.prototype.toString.apply(object) !== '[object Array]' || typeof object === \"function\";\n    \n        if (args) {\n            if (isObj) {\n                for (name in object) {\n                    if (callback.apply(object[name], args) === false) {\n                        break;\n                    }\n                }\n            } else {\n                for ( ; i < length; ) {\n                    if (callback.apply(object[i++], args) === false) {\n                        break;\n                    }\n                }\n            }\n    \n        // A special, fast, case for the most common use of each\n        } else {\n            if (isObj) {\n                for (name in object) {\n                    if (callback.call(object[name], name, object[name]) === false) {\n                        break;\n                    }\n                }\n            } else {\n                for ( ; i < length; ) {\n                    if (callback.call(object[i], i, object[i++]) === false) {\n                        break;\n                    }\n                }\n            }\n        }\n    \n        return object;\n    }\n    \n    var _entityMap = {\n        \"&\": \"&amp;\",\n        \"<\": \"&lt;\",\n        \">\": \"&gt;\",\n        '\"': '&quot;',\n        \"'\": '&#39;',\n        \"/\": '&#x2F;'\n    };\n    \n    function _escape(data) {\n        if (typeof data === 'string') {\n            return data.replace(/[&<>\"'\\/]/g, function (s) {\n                return _entityMap[s];\n            });\n        }else{\n            return data;\n        }\n    }\n    \n    function _ajax(options) {\n    \n        // v0.5.0 of https://github.com/goloroden/http.js\n        var getXhr = function (callback) {\n            // Use the native XHR object if the browser supports it.\n            if (window.XMLHttpRequest) {\n                return callback(null, new XMLHttpRequest());\n            } else if (window.ActiveXObject) {\n                // In Internet Explorer check for ActiveX versions of the XHR object.\n                try {\n                    return callback(null, new ActiveXObject(\"Msxml2.XMLHTTP\"));\n                } catch (e) {\n                    return callback(null, new ActiveXObject(\"Microsoft.XMLHTTP\"));\n                }\n            }\n    \n            // If no XHR support was found, throw an error.\n            return callback(new Error());\n        };\n    \n        var encodeUsingUrlEncoding = function (data) {\n            if(typeof data === 'string') {\n                return data;\n            }\n    \n            var result = [];\n            for(var dataItem in data) {\n                if(data.hasOwnProperty(dataItem)) {\n                    result.push(encodeURIComponent(dataItem) + '=' + encodeURIComponent(data[dataItem]));\n                }\n            }\n    \n            return result.join('&');\n        };\n    \n        var utf8 = function (text) {\n            text = text.replace(/\\r\\n/g, '\\n');\n            var result = '';\n    \n            for(var i = 0; i < text.length; i++) {\n                var c = text.charCodeAt(i);\n    \n                if(c < 128) {\n                        result += String.fromCharCode(c);\n                } else if((c > 127) && (c < 2048)) {\n                        result += String.fromCharCode((c >> 6) | 192);\n                        result += String.fromCharCode((c & 63) | 128);\n                } else {\n                        result += String.fromCharCode((c >> 12) | 224);\n                        result += String.fromCharCode(((c >> 6) & 63) | 128);\n                        result += String.fromCharCode((c & 63) | 128);\n                }\n            }\n    \n            return result;\n        };\n    \n        var base64 = function (text) {\n            var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n    \n            text = utf8(text);\n            var result = '',\n                    chr1, chr2, chr3,\n                    enc1, enc2, enc3, enc4,\n                    i = 0;\n    \n            do {\n                chr1 = text.charCodeAt(i++);\n                chr2 = text.charCodeAt(i++);\n                chr3 = text.charCodeAt(i++);\n    \n                enc1 = chr1 >> 2;\n                enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n                enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n                enc4 = chr3 & 63;\n    \n                if(isNaN(chr2)) {\n                    enc3 = enc4 = 64;\n                } else if(isNaN(chr3)) {\n                    enc4 = 64;\n                }\n    \n                result +=\n                    keyStr.charAt(enc1) +\n                    keyStr.charAt(enc2) +\n                    keyStr.charAt(enc3) +\n                    keyStr.charAt(enc4);\n                chr1 = chr2 = chr3 = '';\n                enc1 = enc2 = enc3 = enc4 = '';\n            } while(i < text.length);\n    \n            return result;\n        };\n    \n        var mergeHeaders = function () {\n            // Use the first header object as base.\n            var result = arguments[0];\n    \n            // Iterate through the remaining header objects and add them.\n            for(var i = 1; i < arguments.length; i++) {\n                var currentHeaders = arguments[i];\n                for(var header in currentHeaders) {\n                    if(currentHeaders.hasOwnProperty(header)) {\n                        result[header] = currentHeaders[header];\n                    }\n                }\n            }\n    \n            // Return the merged headers.\n            return result;\n        };\n    \n        var ajax = function (method, url, options, callback) {\n            // Adjust parameters.\n            if(typeof options === 'function') {\n                callback = options;\n                options = {};\n            }\n    \n            // Set default parameter values.\n            options.cache = options.cache || false;\n            options.data = options.data || {};\n            options.headers = options.headers || {};\n            options.jsonp = options.jsonp || false;\n            options.async = options.async === undefined ? true : options.async;\n    \n            // Merge the various header objects.\n            var headers = mergeHeaders({\n                'accept': '*/*',\n                'content-type': 'application/x-www-form-urlencoded;charset=UTF-8'\n            }, ajax.headers, options.headers);\n    \n            // Encode the data according to the content-type.\n            var payload;\n            if (headers['content-type'] === 'application/json') {\n                payload = JSON.stringify(options.data);\n            } else {\n                payload = encodeUsingUrlEncoding(options.data);\n            }\n    \n            // Specially prepare GET requests: Setup the query string, handle caching and make a JSONP call\n            // if neccessary.\n            if(method === 'GET') {\n                // Setup the query string.\n                var queryString = [];\n                if(payload) {\n                    queryString.push(payload);\n                    payload = null;\n                }\n    \n                // Handle caching.\n                if(!options.cache) {\n                    queryString.push('_=' + (new Date()).getTime());\n                }\n    \n                // If neccessary prepare the query string for a JSONP call.\n                if(options.jsonp) {\n                    queryString.push('callback=' + options.jsonp);\n                    queryString.push('jsonp=' + options.jsonp);\n                }\n    \n                // Merge the query string and attach it to the url.\n                queryString = queryString.join('&');\n                if (queryString.length > 1) {\n                    if (url.indexOf('?') > -1) {\n                        url += '&' + queryString;\n                    } else {\n                        url += '?' + queryString;\n                    }\n                }\n    \n                // Make a JSONP call if neccessary.\n                if(options.jsonp) {\n                    var head = document.getElementsByTagName('head')[0];\n                    var script = document.createElement('script');\n                    script.type = 'text/javascript';\n                    script.src = url;\n                    head.appendChild(script);\n                    return;\n                }\n            }\n    \n            // Since we got here, it is no JSONP request, so make a normal XHR request.\n            getXhr(function (err, xhr) {\n                if(err) return callback(err);\n    \n                // Open the request.\n                xhr.open(method, url, options.async);\n    \n                // Set the request headers.\n                for(var header in headers) {\n                    if(headers.hasOwnProperty(header)) {\n                        xhr.setRequestHeader(header, headers[header]);\n                    }\n                }\n    \n                // Handle the request events.\n                xhr.onreadystatechange = function () {\n                    if(xhr.readyState === 4) {\n                        var data = xhr.responseText || '';\n    \n                        // If no callback is given, return.\n                        if(!callback) {\n                            return;\n                        }\n    \n                        // Return an object that provides access to the data as text and JSON.\n                        callback(xhr.status, {\n                            text: function () {\n                                return data;\n                            },\n    \n                            json: function () {\n                                return JSON.parse(data);\n                            }\n                        });\n                    }\n                };\n    \n                // Actually send the XHR request.\n                xhr.send(payload);\n            });\n        };\n    \n        // Define the external interface.\n        var http = {\n            authBasic: function (username, password) {\n                ajax.headers['Authorization'] = 'Basic ' + base64(username + ':' + password);\n            },\n    \n            connect: function (url, options, callback) {\n                return ajax('CONNECT', url, options, callback);\n            },\n    \n            del: function (url, options, callback) {\n                return ajax('DELETE', url, options, callback);\n            },\n    \n            get: function (url, options, callback) {\n                return ajax('GET', url, options, callback);\n            },\n    \n            head: function (url, options, callback) {\n                return ajax('HEAD', url, options, callback);\n            },\n    \n            headers: function (headers) {\n                ajax.headers = headers || {};\n            },\n    \n            isAllowed: function (url, verb, callback) {\n                this.options(url, function (status, data) {\n                    callback(data.text().indexOf(verb) !== -1);\n                });\n            },\n    \n            options: function (url, options, callback) {\n                return ajax('OPTIONS', url, options, callback);\n            },\n    \n            patch: function (url, options, callback) {\n                return ajax('PATCH', url, options, callback);\n            },\n    \n            post: function (url, options, callback) {\n                return ajax('POST', url, options, callback);\n            },\n    \n            put: function (url, options, callback) {\n                return ajax('PUT', url, options, callback);\n            },\n    \n            trace: function (url, options, callback) {\n                return ajax('TRACE', url, options, callback);\n            }\n        };\n    \n    \n        var methode = options.type ? options.type.toLowerCase() : 'get';\n    \n        http[methode](options.url, options, function (status, data) {\n            if (status === 200) {\n                options.success(data.json(), status, null);\n            } else {\n                options.error(data.text(), status, null);\n            }\n        });\n    }\n    \n    var _cookie = {\n        create: function(name,value,minutes,domain) {\n            var expires;\n            if (minutes) {\n                var date = new Date();\n                date.setTime(date.getTime()+(minutes*60*1000));\n                expires = \"; expires=\"+date.toGMTString();\n            }\n            else expires = \"\";\n            domain = (domain)? \"domain=\"+domain+\";\" : \"\";\n            document.cookie = name+\"=\"+value+expires+\";\"+domain+\"path=/\";\n        },\n    \n        read: function(name) {\n            var nameEQ = name + \"=\";\n            var ca = document.cookie.split(';');\n            for(var i=0;i < ca.length;i++) {\n                var c = ca[i];\n                while (c.charAt(0)==' ') c = c.substring(1,c.length);\n                if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length,c.length);\n            }\n            return null;\n        },\n    \n        remove: function(name) {\n            this.create(name,\"\",-1);\n        }\n    };\n    \n    var cookie_noop = {\n        create: function(name,value,minutes,domain) {},\n        read: function(name) { return null; },\n        remove: function(name) {}\n    };\n    \n    \n    \n    // move dependent functions to a container so that\n    // they can be overriden easier in no jquery environment (node.js)\n    var f = {\n        extend: $ ? $.extend : _extend,\n        each: $ ? $.each : _each,\n        ajax: $ ? $.ajax : (typeof document !== 'undefined' ? _ajax : function() {}),\n        cookie: typeof document !== 'undefined' ? _cookie : cookie_noop,\n        detectLanguage: detectLanguage,\n        escape: _escape,\n        log: function(str) {\n            if (o.debug && typeof console !== \"undefined\") console.log(str);\n        },\n        toLanguages: function(lng) {\n            var languages = [];\n            if (typeof lng === 'string' && lng.indexOf('-') > -1) {\n                var parts = lng.split('-');\n    \n                lng = o.lowerCaseLng ?\n                    parts[0].toLowerCase() +  '-' + parts[1].toLowerCase() :\n                    parts[0].toLowerCase() +  '-' + parts[1].toUpperCase();\n    \n                if (o.load !== 'unspecific') languages.push(lng);\n                if (o.load !== 'current') languages.push(parts[0]);\n            } else {\n                languages.push(lng);\n            }\n    \n            for (var i = 0; i < o.fallbackLng.length; i++) {\n                if (languages.indexOf(o.fallbackLng[i]) === -1 && o.fallbackLng[i]) languages.push(o.fallbackLng[i]);\n            }\n    \n            return languages;\n        },\n        regexEscape: function(str) {\n            return str.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\");\n        }\n    };\n    function init(options, cb) {\n        \n        if (typeof options === 'function') {\n            cb = options;\n            options = {};\n        }\n        options = options || {};\n        \n        // override defaults with passed in options\n        f.extend(o, options);\n        delete o.fixLng; /* passed in each time */\n    \n        // create namespace object if namespace is passed in as string\n        if (typeof o.ns == 'string') {\n            o.ns = { namespaces: [o.ns], defaultNs: o.ns};\n        }\n    \n        // fallback namespaces\n        if (typeof o.fallbackNS == 'string') {\n            o.fallbackNS = [o.fallbackNS];\n        }\n    \n        // fallback languages\n        if (typeof o.fallbackLng == 'string' || typeof o.fallbackLng == 'boolean') {\n            o.fallbackLng = [o.fallbackLng];\n        }\n    \n        // escape prefix/suffix\n        o.interpolationPrefixEscaped = f.regexEscape(o.interpolationPrefix);\n        o.interpolationSuffixEscaped = f.regexEscape(o.interpolationSuffix);\n    \n        if (!o.lng) o.lng = f.detectLanguage(); \n        if (o.lng) {\n            // set cookie with lng set (as detectLanguage will set cookie on need)\n            if (o.useCookie) f.cookie.create(o.cookieName, o.lng, o.cookieExpirationTime, o.cookieDomain);\n        } else {\n            o.lng =  o.fallbackLng[0];\n            if (o.useCookie) f.cookie.remove(o.cookieName);\n        }\n    \n        languages = f.toLanguages(o.lng);\n        currentLng = languages[0];\n        f.log('currentLng set to: ' + currentLng);\n    \n        var lngTranslate = translate;\n        if (options.fixLng) {\n            lngTranslate = function(key, options) {\n                options = options || {};\n                options.lng = options.lng || lngTranslate.lng;\n                return translate(key, options);\n            };\n            lngTranslate.lng = currentLng;\n        }\n    \n        pluralExtensions.setCurrentLng(currentLng);\n    \n        // add JQuery extensions\n        if ($ && o.setJqueryExt) addJqueryFunct();\n    \n        // jQuery deferred\n        var deferred;\n        if ($ && $.Deferred) {\n            deferred = $.Deferred();\n        }\n    \n        // return immidiatly if res are passed in\n        if (o.resStore) {\n            resStore = o.resStore;\n            initialized = true;\n            if (cb) cb(lngTranslate);\n            if (deferred) deferred.resolve(lngTranslate);\n            if (deferred) return deferred.promise();\n            return;\n        }\n    \n        // languages to load\n        var lngsToLoad = f.toLanguages(o.lng);\n        if (typeof o.preload === 'string') o.preload = [o.preload];\n        for (var i = 0, l = o.preload.length; i < l; i++) {\n            var pres = f.toLanguages(o.preload[i]);\n            for (var y = 0, len = pres.length; y < len; y++) {\n                if (lngsToLoad.indexOf(pres[y]) < 0) {\n                    lngsToLoad.push(pres[y]);\n                }\n            }\n        }\n    \n        // else load them\n        TAPi18next.sync.load(lngsToLoad, o, function(err, store) {\n            resStore = store;\n            initialized = true;\n    \n            if (cb) cb(lngTranslate);\n            if (deferred) deferred.resolve(lngTranslate);\n        });\n    \n        if (deferred) return deferred.promise();\n    }\n    function preload(lngs, cb) {\n        if (typeof lngs === 'string') lngs = [lngs];\n        for (var i = 0, l = lngs.length; i < l; i++) {\n            if (o.preload.indexOf(lngs[i]) < 0) {\n                o.preload.push(lngs[i]);\n            }\n        }\n        return init(cb);\n    }\n    \n    function addResourceBundle(lng, ns, resources) {\n        if (typeof ns !== 'string') {\n            resources = ns;\n            ns = o.ns.defaultNs;\n        } else if (o.ns.namespaces.indexOf(ns) < 0) {\n            o.ns.namespaces.push(ns);\n        }\n    \n        resStore[lng] = resStore[lng] || {};\n        resStore[lng][ns] = resStore[lng][ns] || {};\n    \n        f.extend(resStore[lng][ns], resources);\n    }\n    \n    function removeResourceBundle(lng, ns) {\n        if (typeof ns !== 'string') {\n            ns = o.ns.defaultNs;\n        }\n    \n        resStore[lng] = resStore[lng] || {};\n        resStore[lng][ns] = {};\n    }\n    \n    function setDefaultNamespace(ns) {\n        o.ns.defaultNs = ns;\n    }\n    \n    function loadNamespace(namespace, cb) {\n        loadNamespaces([namespace], cb);\n    }\n    \n    function loadNamespaces(namespaces, cb) {\n        var opts = {\n            dynamicLoad: o.dynamicLoad,\n            resGetPath: o.resGetPath,\n            getAsync: o.getAsync,\n            customLoad: o.customLoad,\n            ns: { namespaces: namespaces, defaultNs: ''} /* new namespaces to load */\n        };\n    \n        // languages to load\n        var lngsToLoad = f.toLanguages(o.lng);\n        if (typeof o.preload === 'string') o.preload = [o.preload];\n        for (var i = 0, l = o.preload.length; i < l; i++) {\n            var pres = f.toLanguages(o.preload[i]);\n            for (var y = 0, len = pres.length; y < len; y++) {\n                if (lngsToLoad.indexOf(pres[y]) < 0) {\n                    lngsToLoad.push(pres[y]);\n                }\n            }\n        }\n    \n        // check if we have to load\n        var lngNeedLoad = [];\n        for (var a = 0, lenA = lngsToLoad.length; a < lenA; a++) {\n            var needLoad = false;\n            var resSet = resStore[lngsToLoad[a]];\n            if (resSet) {\n                for (var b = 0, lenB = namespaces.length; b < lenB; b++) {\n                    if (!resSet[namespaces[b]]) needLoad = true;\n                }\n            } else {\n                needLoad = true;\n            }\n    \n            if (needLoad) lngNeedLoad.push(lngsToLoad[a]);\n        }\n    \n        if (lngNeedLoad.length) {\n            TAPi18next.sync._fetch(lngNeedLoad, opts, function(err, store) {\n                var todo = namespaces.length * lngNeedLoad.length;\n    \n                // load each file individual\n                f.each(namespaces, function(nsIndex, nsValue) {\n    \n                    // append namespace to namespace array\n                    if (o.ns.namespaces.indexOf(nsValue) < 0) {\n                        o.ns.namespaces.push(nsValue);\n                    }\n    \n                    f.each(lngNeedLoad, function(lngIndex, lngValue) {\n                        resStore[lngValue] = resStore[lngValue] || {};\n                        resStore[lngValue][nsValue] = store[lngValue][nsValue];\n    \n                        todo--; // wait for all done befor callback\n                        if (todo === 0 && cb) {\n                            if (o.useLocalStorage) TAPi18next.sync._storeLocal(resStore);\n                            cb();\n                        }\n                    });\n                });\n            });\n        } else {\n            if (cb) cb();\n        }\n    }\n    \n    function setLng(lng, options, cb) {\n        if (typeof options === 'function') {\n            cb = options;\n            options = {};\n        } else if (!options) {\n            options = {};\n        }\n    \n        options.lng = lng;\n        return init(options, cb);\n    }\n    \n    function lng() {\n        return currentLng;\n    }\n    function addJqueryFunct() {\n        // $.t shortcut\n        $.t = $.t || translate;\n    \n        function parse(ele, key, options) {\n            if (key.length === 0) return;\n    \n            var attr = 'text';\n    \n            if (key.indexOf('[') === 0) {\n                var parts = key.split(']');\n                key = parts[1];\n                attr = parts[0].substr(1, parts[0].length-1);\n            }\n    \n            if (key.indexOf(';') === key.length-1) {\n                key = key.substr(0, key.length-2);\n            }\n    \n            var optionsToUse;\n            if (attr === 'html') {\n                optionsToUse = o.defaultValueFromContent ? $.extend({ defaultValue: ele.html() }, options) : options;\n                ele.html($.t(key, optionsToUse));\n            } else if (attr === 'text') {\n                optionsToUse = o.defaultValueFromContent ? $.extend({ defaultValue: ele.text() }, options) : options;\n                ele.text($.t(key, optionsToUse));\n            } else if (attr === 'prepend') {\n                optionsToUse = o.defaultValueFromContent ? $.extend({ defaultValue: ele.html() }, options) : options;\n                ele.prepend($.t(key, optionsToUse));\n            } else if (attr === 'append') {\n                optionsToUse = o.defaultValueFromContent ? $.extend({ defaultValue: ele.html() }, options) : options;\n                ele.append($.t(key, optionsToUse));\n            } else if (attr.indexOf(\"data-\") === 0) {\n                var dataAttr = attr.substr((\"data-\").length);\n                optionsToUse = o.defaultValueFromContent ? $.extend({ defaultValue: ele.data(dataAttr) }, options) : options;\n                var translated = $.t(key, optionsToUse);\n                //we change into the data cache\n                ele.data(dataAttr, translated);\n                //we change into the dom\n                ele.attr(attr, translated);\n            } else {\n                optionsToUse = o.defaultValueFromContent ? $.extend({ defaultValue: ele.attr(attr) }, options) : options;\n                ele.attr(attr, $.t(key, optionsToUse));\n            }\n        }\n    \n        function localize(ele, options) {\n            var key = ele.attr(o.selectorAttr);\n            if (!key && typeof key !== 'undefined' && key !== false) key = ele.text() || ele.val();\n            if (!key) return;\n    \n            var target = ele\n              , targetSelector = ele.data(\"i18n-target\");\n            if (targetSelector) {\n                target = ele.find(targetSelector) || ele;\n            }\n    \n            if (!options && o.useDataAttrOptions === true) {\n                options = ele.data(\"i18n-options\");\n            }\n            options = options || {};\n    \n            if (key.indexOf(';') >= 0) {\n                var keys = key.split(';');\n    \n                $.each(keys, function(m, k) {\n                    if (k !== '') parse(target, k, options);\n                });\n    \n            } else {\n                parse(target, key, options);\n            }\n    \n            if (o.useDataAttrOptions === true) ele.data(\"i18n-options\", options);\n        }\n    \n        // fn\n        $.fn.TAPi18next = function (options) {\n            return this.each(function() {\n                // localize element itself\n                localize($(this), options);\n    \n                // localize childs\n                var elements =  $(this).find('[' + o.selectorAttr + ']');\n                elements.each(function() { \n                    localize($(this), options);\n                });\n            });\n        };\n    }\n    function applyReplacement(str, replacementHash, nestedKey, options) {\n        if (!str) return str;\n    \n        options = options || replacementHash; // first call uses replacement hash combined with options\n        if (str.indexOf(options.interpolationPrefix || o.interpolationPrefix) < 0) return str;\n    \n        var prefix = options.interpolationPrefix ? f.regexEscape(options.interpolationPrefix) : o.interpolationPrefixEscaped\n          , suffix = options.interpolationSuffix ? f.regexEscape(options.interpolationSuffix) : o.interpolationSuffixEscaped\n          , unEscapingSuffix = 'HTML'+suffix;\n    \n        f.each(replacementHash, function(key, value) {\n            var nextKey = nestedKey ? nestedKey + o.keyseparator + key : key;\n            if (typeof value === 'object' && value !== null) {\n                str = applyReplacement(str, value, nextKey, options);\n            } else {\n                if (options.escapeInterpolation || o.escapeInterpolation) {\n                    str = str.replace(new RegExp([prefix, nextKey, unEscapingSuffix].join(''), 'g'), value);\n                    str = str.replace(new RegExp([prefix, nextKey, suffix].join(''), 'g'), f.escape(value));\n                } else {\n                    str = str.replace(new RegExp([prefix, nextKey, suffix].join(''), 'g'), value);\n                }\n                // str = options.escapeInterpolation;\n            }\n        });\n        return str;\n    }\n    \n    // append it to functions\n    f.applyReplacement = applyReplacement;\n    \n    function applyReuse(translated, options) {\n        var comma = ',';\n        var options_open = '{';\n        var options_close = '}';\n    \n        var opts = f.extend({}, options);\n        delete opts.postProcess;\n    \n        while (translated.indexOf(o.reusePrefix) != -1) {\n            replacementCounter++;\n            if (replacementCounter > o.maxRecursion) { break; } // safety net for too much recursion\n            var index_of_opening = translated.lastIndexOf(o.reusePrefix);\n            var index_of_end_of_closing = translated.indexOf(o.reuseSuffix, index_of_opening) + o.reuseSuffix.length;\n            var token = translated.substring(index_of_opening, index_of_end_of_closing);\n            var token_without_symbols = token.replace(o.reusePrefix, '').replace(o.reuseSuffix, '');\n    \n    \n            if (token_without_symbols.indexOf(comma) != -1) {\n                var index_of_token_end_of_closing = token_without_symbols.indexOf(comma);\n                if (token_without_symbols.indexOf(options_open, index_of_token_end_of_closing) != -1 && token_without_symbols.indexOf(options_close, index_of_token_end_of_closing) != -1) {\n                    var index_of_opts_opening = token_without_symbols.indexOf(options_open, index_of_token_end_of_closing);\n                    var index_of_opts_end_of_closing = token_without_symbols.indexOf(options_close, index_of_opts_opening) + options_close.length;\n                    try {\n                        opts = f.extend(opts, JSON.parse(token_without_symbols.substring(index_of_opts_opening, index_of_opts_end_of_closing)));\n                        token_without_symbols = token_without_symbols.substring(0, index_of_token_end_of_closing);\n                    } catch (e) {\n                    }\n                }\n            }\n    \n            var translated_token = _translate(token_without_symbols, opts);\n            translated = translated.replace(token, translated_token);\n        }\n        return translated;\n    }\n    \n    function hasContext(options) {\n        return (options.context && (typeof options.context == 'string' || typeof options.context == 'number'));\n    }\n    \n    function needsPlural(options) {\n        return (options.count !== undefined && typeof options.count != 'string' && options.count !== 1);\n    }\n    \n    function exists(key, options) {\n        options = options || {};\n    \n        var notFound = _getDefaultValue(key, options)\n            , found = _find(key, options);\n    \n        return found !== undefined || found === notFound;\n    }\n    \n    function translate(key, options) {\n        if (typeof options === 'undefined') {\n          options = {};\n        }\n    \n        if (!initialized) {\n            f.log('i18next not finished initialization. you might have called t function before loading resources finished.')\n            return options.defaultValue || '';\n        };\n        replacementCounter = 0;\n        return _translate.apply(null, arguments);\n    }\n    \n    function _getDefaultValue(key, options) {\n        return (options.defaultValue !== undefined) ? options.defaultValue : key;\n    }\n    \n    function _injectSprintfProcessor() {\n    \n        var values = [];\n    \n        // mh: build array from second argument onwards\n        for (var i = 1; i < arguments.length; i++) {\n            values.push(arguments[i]);\n        }\n    \n        return {\n            postProcess: 'sprintf',\n            sprintf:     values\n        };\n    }\n    \n    function _translate(potentialKeys, options) {\n        if (typeof options !== \"undefined\" && options !== null && typeof options !== 'object') {\n            if (o.shortcutFunction === 'sprintf') {\n                // mh: gettext like sprintf syntax found, automatically create sprintf processor\n                options = _injectSprintfProcessor.apply(null, arguments);\n            } else if (o.shortcutFunction === 'defaultValue') {\n                options = {\n                    defaultValue: options\n                }\n            }\n        } else {\n            options = options || {};\n        }\n    \n        if (potentialKeys === undefined || potentialKeys === null) return '';\n    \n        if (typeof potentialKeys == 'string') {\n            potentialKeys = [potentialKeys];\n        }\n    \n        var key = potentialKeys[0];\n    \n        if (potentialKeys.length > 1) {\n            for (var i = 0; i < potentialKeys.length; i++) {\n                key = potentialKeys[i];\n                if (exists(key, options)) {\n                    break;\n                }\n            }\n        }\n    \n        var notFound = _getDefaultValue(key, options)\n            , found = _find(key, options)\n            , lngs = options.lng ? f.toLanguages(options.lng) : languages\n            , ns = options.ns || o.ns.defaultNs\n            , parts;\n    \n        // split ns and key\n        if (key.indexOf(o.nsseparator) > -1) {\n            parts = key.split(o.nsseparator);\n            ns = parts[0];\n            key = parts[1];\n        }\n    \n        if (found === undefined && o.sendMissing) {\n            if (options.lng) {\n                sync.postMissing(lngs[0], ns, key, notFound, lngs);\n            } else {\n                sync.postMissing(o.lng, ns, key, notFound, lngs);\n            }\n        }\n    \n        var postProcessor = options.postProcess || o.postProcess;\n        if (found !== undefined && postProcessor) {\n            if (postProcessors[postProcessor]) {\n                found = postProcessors[postProcessor](found, key, options);\n            }\n        }\n    \n        // process notFound if function exists\n        var splitNotFound = notFound;\n        if (notFound.indexOf(o.nsseparator) > -1) {\n            parts = notFound.split(o.nsseparator);\n            splitNotFound = parts[1];\n        }\n        if (splitNotFound === key && o.parseMissingKey) {\n            notFound = o.parseMissingKey(notFound);\n        }\n    \n        if (found === undefined) {\n            notFound = applyReplacement(notFound, options);\n            notFound = applyReuse(notFound, options);\n    \n            if (postProcessor && postProcessors[postProcessor]) {\n                var val = _getDefaultValue(key, options);\n                found = postProcessors[postProcessor](val, key, options);\n            }\n        }\n    \n        return (found !== undefined) ? found : notFound;\n    }\n    \n    function _find(key, options) {\n        options = options || {};\n    \n        var optionWithoutCount, translated\n            , notFound = _getDefaultValue(key, options)\n            , lngs = languages;\n    \n        if (!resStore) { return notFound; } // no resStore to translate from\n    \n        // CI mode\n        if (lngs[0].toLowerCase() === 'cimode') return notFound;\n    \n        // passed in lng\n        if (options.lng) {\n            lngs = f.toLanguages(options.lng);\n    \n            if (!resStore[lngs[0]]) {\n                var oldAsync = o.getAsync;\n                o.getAsync = false;\n    \n                TAPi18next.sync.load(lngs, o, function(err, store) {\n                    f.extend(resStore, store);\n                    o.getAsync = oldAsync;\n                });\n            }\n        }\n    \n        var ns = options.ns || o.ns.defaultNs;\n        if (key.indexOf(o.nsseparator) > -1) {\n            var parts = key.split(o.nsseparator);\n            ns = parts[0];\n            key = parts[1];\n        }\n    \n        if (hasContext(options)) {\n            optionWithoutCount = f.extend({}, options);\n            delete optionWithoutCount.context;\n            optionWithoutCount.defaultValue = o.contextNotFound;\n    \n            var contextKey = ns + o.nsseparator + key + '_' + options.context;\n    \n            translated = translate(contextKey, optionWithoutCount);\n            if (translated != o.contextNotFound) {\n                return applyReplacement(translated, { context: options.context }); // apply replacement for context only\n            } // else continue translation with original/nonContext key\n        }\n    \n        if (needsPlural(options)) {\n            optionWithoutCount = f.extend({}, options);\n            delete optionWithoutCount.count;\n            optionWithoutCount.defaultValue = o.pluralNotFound;\n    \n            var pluralKey = ns + o.nsseparator + key + o.pluralSuffix;\n            var pluralExtension = pluralExtensions.get(lngs[0], options.count);\n            if (pluralExtension >= 0) {\n                pluralKey = pluralKey + '_' + pluralExtension;\n            } else if (pluralExtension === 1) {\n                pluralKey = ns + o.nsseparator + key; // singular\n            }\n    \n            translated = translate(pluralKey, optionWithoutCount);\n            if (translated != o.pluralNotFound) {\n                return applyReplacement(translated, {\n                    count: options.count,\n                    interpolationPrefix: options.interpolationPrefix,\n                    interpolationSuffix: options.interpolationSuffix\n                }); // apply replacement for count only\n            } // else continue translation with original/singular key\n        }\n    \n        var found;\n        var keys = key.split(o.keyseparator);\n        for (var i = 0, len = lngs.length; i < len; i++ ) {\n            if (found !== undefined) break;\n    \n            var l = lngs[i];\n    \n            var x = 0;\n            var value = resStore[l] && resStore[l][ns];\n            while (keys[x]) {\n                value = value && value[keys[x]];\n                x++;\n            }\n            if (value !== undefined) {\n                var valueType = Object.prototype.toString.apply(value);\n                if (typeof value === 'string') {\n                    value = applyReplacement(value, options);\n                    value = applyReuse(value, options);\n                } else if (valueType === '[object Array]' && !o.returnObjectTrees && !options.returnObjectTrees) {\n                    value = value.join('\\n');\n                    value = applyReplacement(value, options);\n                    value = applyReuse(value, options);\n                } else if (value === null && o.fallbackOnNull === true) {\n                    value = undefined;\n                } else if (value !== null) {\n                    if (!o.returnObjectTrees && !options.returnObjectTrees) {\n                        if (o.objectTreeKeyHandler && typeof o.objectTreeKeyHandler == 'function') {\n                            value = o.objectTreeKeyHandler(key, value, l, ns, options);\n                        } else {\n                            value = 'key \\'' + ns + ':' + key + ' (' + l + ')\\' ' +\n                                'returned an object instead of string.';\n                            f.log(value);\n                        }\n                    } else if (valueType !== '[object Number]' && valueType !== '[object Function]' && valueType !== '[object RegExp]') {\n                        var copy = (valueType === '[object Array]') ? [] : {}; // apply child translation on a copy\n                        f.each(value, function(m) {\n                            copy[m] = _translate(ns + o.nsseparator + key + o.keyseparator + m, options);\n                        });\n                        value = copy;\n                    }\n                }\n    \n                if (typeof value === 'string' && value.trim() === '' && o.fallbackOnEmpty === true)\n                    value = undefined;\n    \n                found = value;\n            }\n        }\n    \n        if (found === undefined && !options.isFallbackLookup && (o.fallbackToDefaultNS === true || (o.fallbackNS && o.fallbackNS.length > 0))) {\n            // set flag for fallback lookup - avoid recursion\n            options.isFallbackLookup = true;\n    \n            if (o.fallbackNS.length) {\n    \n                for (var y = 0, lenY = o.fallbackNS.length; y < lenY; y++) {\n                    found = _find(o.fallbackNS[y] + o.nsseparator + key, options);\n    \n                    if (found) {\n                        /* compare value without namespace */\n                        var foundValue = found.indexOf(o.nsseparator) > -1 ? found.split(o.nsseparator)[1] : found\n                          , notFoundValue = notFound.indexOf(o.nsseparator) > -1 ? notFound.split(o.nsseparator)[1] : notFound;\n    \n                        if (foundValue !== notFoundValue) break;\n                    }\n                }\n            } else {\n                found = _find(key, options); // fallback to default NS\n            }\n        }\n    \n        return found;\n    }\n    function detectLanguage() {\n        var detectedLng;\n    \n        // get from qs\n        var qsParm = [];\n        if (typeof window !== 'undefined') {\n            (function() {\n                var query = window.location.search.substring(1);\n                var parms = query.split('&');\n                for (var i=0; i<parms.length; i++) {\n                    var pos = parms[i].indexOf('=');\n                    if (pos > 0) {\n                        var key = parms[i].substring(0,pos);\n                        var val = parms[i].substring(pos+1);\n                        qsParm[key] = val;\n                    }\n                }\n            })();\n            if (qsParm[o.detectLngQS]) {\n                detectedLng = qsParm[o.detectLngQS];\n            }\n        }\n    \n        // get from cookie\n        if (!detectedLng && typeof document !== 'undefined' && o.useCookie ) {\n            var c = f.cookie.read(o.cookieName);\n            if (c) detectedLng = c;\n        }\n    \n        // get from navigator\n        if (!detectedLng && typeof navigator !== 'undefined') {\n            detectedLng =  (navigator.language) ? navigator.language : navigator.userLanguage;\n        }\n        \n        return detectedLng;\n    }\n    var sync = {\n    \n        load: function(lngs, options, cb) {\n            if (options.useLocalStorage) {\n                sync._loadLocal(lngs, options, function(err, store) {\n                    var missingLngs = [];\n                    for (var i = 0, len = lngs.length; i < len; i++) {\n                        if (!store[lngs[i]]) missingLngs.push(lngs[i]);\n                    }\n    \n                    if (missingLngs.length > 0) {\n                        sync._fetch(missingLngs, options, function(err, fetched) {\n                            f.extend(store, fetched);\n                            sync._storeLocal(fetched);\n    \n                            cb(null, store);\n                        });\n                    } else {\n                        cb(null, store);\n                    }\n                });\n            } else {\n                sync._fetch(lngs, options, function(err, store){\n                    cb(null, store);\n                });\n            }\n        },\n    \n        _loadLocal: function(lngs, options, cb) {\n            var store = {}\n              , nowMS = new Date().getTime();\n    \n            if(window.localStorage) {\n    \n                var todo = lngs.length;\n    \n                f.each(lngs, function(key, lng) {\n                    var local = window.localStorage.getItem('res_' + lng);\n    \n                    if (local) {\n                        local = JSON.parse(local);\n    \n                        if (local.i18nStamp && local.i18nStamp + options.localStorageExpirationTime > nowMS) {\n                            store[lng] = local;\n                        }\n                    }\n    \n                    todo--; // wait for all done befor callback\n                    if (todo === 0) cb(null, store);\n                });\n            }\n        },\n    \n        _storeLocal: function(store) {\n            if(window.localStorage) {\n                for (var m in store) {\n                    store[m].i18nStamp = new Date().getTime();\n                    window.localStorage.setItem('res_' + m, JSON.stringify(store[m]));\n                }\n            }\n            return;\n        },\n    \n        _fetch: function(lngs, options, cb) {\n            var ns = options.ns\n              , store = {};\n            \n            if (!options.dynamicLoad) {\n                var todo = ns.namespaces.length * lngs.length\n                  , errors;\n    \n                // load each file individual\n                f.each(ns.namespaces, function(nsIndex, nsValue) {\n                    f.each(lngs, function(lngIndex, lngValue) {\n                        \n                        // Call this once our translation has returned.\n                        var loadComplete = function(err, data) {\n                            if (err) {\n                                errors = errors || [];\n                                errors.push(err);\n                            }\n                            store[lngValue] = store[lngValue] || {};\n                            store[lngValue][nsValue] = data;\n    \n                            todo--; // wait for all done befor callback\n                            if (todo === 0) cb(errors, store);\n                        };\n                        \n                        if(typeof options.customLoad == 'function'){\n                            // Use the specified custom callback.\n                            options.customLoad(lngValue, nsValue, options, loadComplete);\n                        } else {\n                            //~ // Use our inbuilt sync.\n                            sync._fetchOne(lngValue, nsValue, options, loadComplete);\n                        }\n                    });\n                });\n            } else {\n                // Call this once our translation has returned.\n                var loadComplete = function(err, data) {\n                    cb(null, data);\n                };\n    \n                if(typeof options.customLoad == 'function'){\n                    // Use the specified custom callback.\n                    options.customLoad(lngs, ns.namespaces, options, loadComplete);\n                } else {\n                    var url = applyReplacement(options.resGetPath, { lng: lngs.join('+'), ns: ns.namespaces.join('+') });\n                    // load all needed stuff once\n                    f.ajax({\n                        url: url,\n                        success: function(data, status, xhr) {\n                            f.log('loaded: ' + url);\n                            loadComplete(null, data);\n                        },\n                        error : function(xhr, status, error) {\n                            f.log('failed loading: ' + url);\n                            loadComplete('failed loading resource.json error: ' + error);\n                        },\n                        dataType: \"json\",\n                        async : options.getAsync\n                    });\n                }    \n            }\n        },\n    \n        _fetchOne: function(lng, ns, options, done) {\n            var url = applyReplacement(options.resGetPath, { lng: lng, ns: ns });\n            f.ajax({\n                url: url,\n                success: function(data, status, xhr) {\n                    f.log('loaded: ' + url);\n                    done(null, data);\n                },\n                error : function(xhr, status, error) {\n                    if ((status && status == 200) || (xhr && xhr.status && xhr.status == 200)) {\n                        // file loaded but invalid json, stop waste time !\n                        f.log('There is a typo in: ' + url);\n                    } else if ((status && status == 404) || (xhr && xhr.status && xhr.status == 404)) {\n                        f.log('Does not exist: ' + url);\n                    } else {\n                        var theStatus = status ? status : ((xhr && xhr.status) ? xhr.status : null);\n                        f.log(theStatus + ' when loading ' + url);\n                    }\n                    \n                    done(error, {});\n                },\n                dataType: \"json\",\n                async : options.getAsync\n            });\n        },\n    \n        postMissing: function(lng, ns, key, defaultValue, lngs) {\n            var payload = {};\n            payload[key] = defaultValue;\n    \n            var urls = [];\n    \n            if (o.sendMissingTo === 'fallback' && o.fallbackLng[0] !== false) {\n                for (var i = 0; i < o.fallbackLng.length; i++) {\n                    urls.push({lng: o.fallbackLng[i], url: applyReplacement(o.resPostPath, { lng: o.fallbackLng[i], ns: ns })});\n                }\n            } else if (o.sendMissingTo === 'current' || (o.sendMissingTo === 'fallback' && o.fallbackLng[0] === false) ) {\n                urls.push({lng: lng, url: applyReplacement(o.resPostPath, { lng: lng, ns: ns })});\n            } else if (o.sendMissingTo === 'all') {\n                for (var i = 0, l = lngs.length; i < l; i++) {\n                    urls.push({lng: lngs[i], url: applyReplacement(o.resPostPath, { lng: lngs[i], ns: ns })});\n                }\n            }\n    \n            for (var y = 0, len = urls.length; y < len; y++) {\n                var item = urls[y];\n                f.ajax({\n                    url: item.url,\n                    type: o.sendType,\n                    data: payload,\n                    success: function(data, status, xhr) {\n                        f.log('posted missing key \\'' + key + '\\' to: ' + item.url);\n    \n                        // add key to resStore\n                        var keys = key.split('.');\n                        var x = 0;\n                        var value = resStore[item.lng][ns];\n                        while (keys[x]) {\n                            if (x === keys.length - 1) {\n                                value = value[keys[x]] = defaultValue;\n                            } else {\n                                value = value[keys[x]] = value[keys[x]] || {};\n                            }\n                            x++;\n                        }\n                    },\n                    error : function(xhr, status, error) {\n                        f.log('failed posting missing key \\'' + key + '\\' to: ' + item.url);\n                    },\n                    dataType: \"json\",\n                    async : o.postAsync\n                });\n            }\n        }\n    };\n    // definition http://translate.sourceforge.net/wiki/l10n/pluralforms\n    var pluralExtensions = {\n    \n        rules: {\n            \"ach\": {\n                \"name\": \"Acholi\", \n                \"numbers\": [\n                    1, \n                    2\n                ], \n                \"plurals\": function(n) { return Number(n > 1); }\n            }, \n            \"af\": {\n                \"name\": \"Afrikaans\", \n                \"numbers\": [\n                    1, \n                    2\n                ], \n                \"plurals\": function(n) { return Number(n != 1); }\n            }, \n            \"ak\": {\n                \"name\": \"Akan\", \n                \"numbers\": [\n                    1, \n                    2\n                ], \n                \"plurals\": function(n) { return Number(n > 1); }\n            }, \n            \"am\": {\n                \"name\": \"Amharic\", \n                \"numbers\": [\n                    1, \n                    2\n                ], \n                \"plurals\": function(n) { return Number(n > 1); }\n            }, \n            \"an\": {\n                \"name\": \"Aragonese\", \n                \"numbers\": [\n                    1, \n                    2\n                ], \n                \"plurals\": function(n) { return Number(n != 1); }\n            }, \n            \"ar\": {\n                \"name\": \"Arabic\", \n                \"numbers\": [\n                    0, \n                    1, \n                    2, \n                    3, \n                    11, \n                    100\n                ], \n                \"plurals\": function(n) { return Number(n===0 ? 0 : n==1 ? 1 : n==2 ? 2 : n%100>=3 && n%100<=10 ? 3 : n%100>=11 ? 4 : 5); }\n            }, \n            \"arn\": {\n                \"name\": \"Mapudungun\", \n                \"numbers\": [\n                    1, \n                    2\n                ], \n                \"plurals\": function(n) { return Number(n > 1); }\n            }, \n            \"ast\": {\n                \"name\": \"Asturian\", \n                \"numbers\": [\n                    1, \n                    2\n                ], \n                \"plurals\": function(n) { return Number(n != 1); }\n            }, \n            \"ay\": {\n                \"name\": \"Aymar\\u00e1\", \n                \"numbers\": [\n                    1\n                ], \n                \"plurals\": function(n) { return 0; }\n            }, \n            \"az\": {\n                \"name\": \"Azerbaijani\", \n                \"numbers\": [\n                    1, \n                    2\n                ], \n                \"plurals\": function(n) { return Number(n != 1); }\n            }, \n            \"be\": {\n                \"name\": \"Belarusian\", \n                \"numbers\": [\n                    1, \n                    2, \n                    5\n                ], \n                \"plurals\": function(n) { return Number(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2); }\n            }, \n            \"bg\": {\n                \"name\": \"Bulgarian\", \n                \"numbers\": [\n                    1, \n                    2\n                ], \n                \"plurals\": function(n) { return Number(n != 1); }\n            }, \n            \"bn\": {\n                \"name\": \"Bengali\", \n                \"numbers\": [\n                    1, \n                    2\n                ], \n                \"plurals\": function(n) { return Number(n != 1); }\n            }, \n            \"bo\": {\n                \"name\": \"Tibetan\", \n                \"numbers\": [\n                    1\n                ], \n                \"plurals\": function(n) { return 0; }\n            }, \n            \"br\": {\n                \"name\": \"Breton\", \n                \"numbers\": [\n                    1, \n                    2\n                ], \n                \"plurals\": function(n) { return Number(n > 1); }\n            }, \n            \"bs\": {\n                \"name\": \"Bosnian\", \n                \"numbers\": [\n                    1, \n                    2, \n                    5\n                ], \n                \"plurals\": function(n) { return Number(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2); }\n            }, \n            \"ca\": {\n                \"name\": \"Catalan\", \n                \"numbers\": [\n                    1, \n                    2\n                ], \n                \"plurals\": function(n) { return Number(n != 1); }\n            }, \n            \"cgg\": {\n                \"name\": \"Chiga\", \n                \"numbers\": [\n                    1\n                ], \n                \"plurals\": function(n) { return 0; }\n            }, \n            \"cs\": {\n                \"name\": \"Czech\", \n                \"numbers\": [\n                    1, \n                    2, \n                    5\n                ], \n                \"plurals\": function(n) { return Number((n==1) ? 0 : (n>=2 && n<=4) ? 1 : 2); }\n            }, \n            \"csb\": {\n                \"name\": \"Kashubian\", \n                \"numbers\": [\n                    1, \n                    2, \n                    5\n                ], \n                \"plurals\": function(n) { return Number(n==1 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2); }\n            }, \n            \"cy\": {\n                \"name\": \"Welsh\", \n                \"numbers\": [\n                    1, \n                    2, \n                    3, \n                    8\n                ], \n                \"plurals\": function(n) { return Number((n==1) ? 0 : (n==2) ? 1 : (n != 8 && n != 11) ? 2 : 3); }\n            }, \n            \"da\": {\n                \"name\": \"Danish\", \n                \"numbers\": [\n                    1, \n                    2\n                ], \n                \"plurals\": function(n) { return Number(n != 1); }\n            }, \n            \"de\": {\n                \"name\": \"German\", \n                \"numbers\": [\n                    1, \n                    2\n                ], \n                \"plurals\": function(n) { return Number(n != 1); }\n            }, \n            \"dz\": {\n                \"name\": \"Dzongkha\", \n                \"numbers\": [\n                    1\n                ], \n                \"plurals\": function(n) { return 0; }\n            }, \n            \"el\": {\n                \"name\": \"Greek\", \n                \"numbers\": [\n                    1, \n                    2\n                ], \n                \"plurals\": function(n) { return Number(n != 1); }\n            }, \n            \"en\": {\n                \"name\": \"English\", \n                \"numbers\": [\n                    1, \n                    2\n                ], \n                \"plurals\": function(n) { return Number(n != 1); }\n            }, \n            \"eo\": {\n                \"name\": \"Esperanto\", \n                \"numbers\": [\n                    1, \n                    2\n                ], \n                \"plurals\": function(n) { return Number(n != 1); }\n            }, \n            \"es\": {\n                \"name\": \"Spanish\", \n                \"numbers\": [\n                    1, \n                    2\n                ], \n                \"plurals\": function(n) { return Number(n != 1); }\n            }, \n            \"es_ar\": {\n                \"name\": \"Argentinean Spanish\", \n                \"numbers\": [\n                    1, \n                    2\n                ], \n                \"plurals\": function(n) { return Number(n != 1); }\n            }, \n            \"et\": {\n                \"name\": \"Estonian\", \n                \"numbers\": [\n                    1, \n                    2\n                ], \n                \"plurals\": function(n) { return Number(n != 1); }\n            }, \n            \"eu\": {\n                \"name\": \"Basque\", \n                \"numbers\": [\n                    1, \n                    2\n                ], \n                \"plurals\": function(n) { return Number(n != 1); }\n            }, \n            \"fa\": {\n                \"name\": \"Persian\", \n                \"numbers\": [\n                    1\n                ], \n                \"plurals\": function(n) { return 0; }\n            }, \n            \"fi\": {\n                \"name\": \"Finnish\", \n                \"numbers\": [\n                    1, \n                    2\n                ], \n                \"plurals\": function(n) { return Number(n != 1); }\n            }, \n            \"fil\": {\n                \"name\": \"Filipino\", \n                \"numbers\": [\n                    1, \n                    2\n                ], \n                \"plurals\": function(n) { return Number(n > 1); }\n            }, \n            \"fo\": {\n                \"name\": \"Faroese\", \n                \"numbers\": [\n                    1, \n                    2\n                ], \n                \"plurals\": function(n) { return Number(n != 1); }\n            }, \n            \"fr\": {\n                \"name\": \"French\", \n                \"numbers\": [\n                    1, \n                    2\n                ], \n                \"plurals\": function(n) { return Number(n > 1); }\n            }, \n            \"fur\": {\n                \"name\": \"Friulian\", \n                \"numbers\": [\n                    1, \n                    2\n                ], \n                \"plurals\": function(n) { return Number(n != 1); }\n            }, \n            \"fy\": {\n                \"name\": \"Frisian\", \n                \"numbers\": [\n                    1, \n                    2\n                ], \n                \"plurals\": function(n) { return Number(n != 1); }\n            }, \n            \"ga\": {\n                \"name\": \"Irish\", \n                \"numbers\": [\n                    1, \n                    2,\n                    3,\n                    7, \n                    11\n                ], \n                \"plurals\": function(n) { return Number(n==1 ? 0 : n==2 ? 1 : n<7 ? 2 : n<11 ? 3 : 4) ;}\n            }, \n            \"gd\": {\n                \"name\": \"Scottish Gaelic\", \n                \"numbers\": [\n                    1, \n                    2, \n                    3,\n                    20\n                ], \n                \"plurals\": function(n) { return Number((n==1 || n==11) ? 0 : (n==2 || n==12) ? 1 : (n > 2 && n < 20) ? 2 : 3); }\n            }, \n            \"gl\": {\n                \"name\": \"Galician\", \n                \"numbers\": [\n                    1, \n                    2\n                ], \n                \"plurals\": function(n) { return Number(n != 1); }\n            }, \n            \"gu\": {\n                \"name\": \"Gujarati\", \n                \"numbers\": [\n                    1, \n                    2\n                ], \n                \"plurals\": function(n) { return Number(n != 1); }\n            }, \n            \"gun\": {\n                \"name\": \"Gun\", \n                \"numbers\": [\n                    1, \n                    2\n                ], \n                \"plurals\": function(n) { return Number(n > 1); }\n            }, \n            \"ha\": {\n                \"name\": \"Hausa\", \n                \"numbers\": [\n                    1, \n                    2\n                ], \n                \"plurals\": function(n) { return Number(n != 1); }\n            }, \n            \"he\": {\n                \"name\": \"Hebrew\", \n                \"numbers\": [\n                    1, \n                    2\n                ], \n                \"plurals\": function(n) { return Number(n != 1); }\n            }, \n            \"hi\": {\n                \"name\": \"Hindi\", \n                \"numbers\": [\n                    1, \n                    2\n                ], \n                \"plurals\": function(n) { return Number(n != 1); }\n            }, \n            \"hr\": {\n                \"name\": \"Croatian\", \n                \"numbers\": [\n                    1, \n                    2,\n                    5\n                ], \n                \"plurals\": function(n) { return Number(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2); }\n            }, \n            \"hu\": {\n                \"name\": \"Hungarian\", \n                \"numbers\": [\n                    1, \n                    2\n                ], \n                \"plurals\": function(n) { return Number(n != 1); }\n            }, \n            \"hy\": {\n                \"name\": \"Armenian\", \n                \"numbers\": [\n                    1, \n                    2\n                ], \n                \"plurals\": function(n) { return Number(n != 1); }\n            }, \n            \"ia\": {\n                \"name\": \"Interlingua\", \n                \"numbers\": [\n                    1, \n                    2\n                ], \n                \"plurals\": function(n) { return Number(n != 1); }\n            }, \n            \"id\": {\n                \"name\": \"Indonesian\", \n                \"numbers\": [\n                    1\n                ], \n                \"plurals\": function(n) { return 0; }\n            }, \n            \"is\": {\n                \"name\": \"Icelandic\", \n                \"numbers\": [\n                    1, \n                    2\n                ], \n                \"plurals\": function(n) { return Number(n%10!=1 || n%100==11); }\n            }, \n            \"it\": {\n                \"name\": \"Italian\", \n                \"numbers\": [\n                    1, \n                    2\n                ], \n                \"plurals\": function(n) { return Number(n != 1); }\n            }, \n            \"ja\": {\n                \"name\": \"Japanese\", \n                \"numbers\": [\n                    1\n                ], \n                \"plurals\": function(n) { return 0; }\n            }, \n            \"jbo\": {\n                \"name\": \"Lojban\", \n                \"numbers\": [\n                    1\n                ], \n                \"plurals\": function(n) { return 0; }\n            }, \n            \"jv\": {\n                \"name\": \"Javanese\", \n                \"numbers\": [\n                    0, \n                    1\n                ], \n                \"plurals\": function(n) { return Number(n !== 0); }\n            }, \n            \"ka\": {\n                \"name\": \"Georgian\", \n                \"numbers\": [\n                    1\n                ], \n                \"plurals\": function(n) { return 0; }\n            }, \n            \"kk\": {\n                \"name\": \"Kazakh\", \n                \"numbers\": [\n                    1\n                ], \n                \"plurals\": function(n) { return 0; }\n            }, \n            \"km\": {\n                \"name\": \"Khmer\", \n                \"numbers\": [\n                    1\n                ], \n                \"plurals\": function(n) { return 0; }\n            }, \n            \"kn\": {\n                \"name\": \"Kannada\", \n                \"numbers\": [\n                    1, \n                    2\n                ], \n                \"plurals\": function(n) { return Number(n != 1); }\n            }, \n            \"ko\": {\n                \"name\": \"Korean\", \n                \"numbers\": [\n                    1\n                ], \n                \"plurals\": function(n) { return 0; }\n            }, \n            \"ku\": {\n                \"name\": \"Kurdish\", \n                \"numbers\": [\n                    1, \n                    2\n                ], \n                \"plurals\": function(n) { return Number(n != 1); }\n            }, \n            \"kw\": {\n                \"name\": \"Cornish\", \n                \"numbers\": [\n                    1, \n                    2, \n                    3,\n                    4\n                ], \n                \"plurals\": function(n) { return Number((n==1) ? 0 : (n==2) ? 1 : (n == 3) ? 2 : 3); }\n            }, \n            \"ky\": {\n                \"name\": \"Kyrgyz\", \n                \"numbers\": [\n                    1\n                ], \n                \"plurals\": function(n) { return 0; }\n            }, \n            \"lb\": {\n                \"name\": \"Letzeburgesch\", \n                \"numbers\": [\n                    1, \n                    2\n                ], \n                \"plurals\": function(n) { return Number(n != 1); }\n            }, \n            \"ln\": {\n                \"name\": \"Lingala\", \n                \"numbers\": [\n                    1, \n                    2\n                ], \n                \"plurals\": function(n) { return Number(n > 1); }\n            }, \n            \"lo\": {\n                \"name\": \"Lao\", \n                \"numbers\": [\n                    1\n                ], \n                \"plurals\": function(n) { return 0; }\n            }, \n            \"lt\": {\n                \"name\": \"Lithuanian\", \n                \"numbers\": [\n                    1, \n                    2,\n                    10\n                ], \n                \"plurals\": function(n) { return Number(n%10==1 && n%100!=11 ? 0 : n%10>=2 && (n%100<10 || n%100>=20) ? 1 : 2); }\n            }, \n            \"lv\": {\n                \"name\": \"Latvian\", \n                \"numbers\": [\n                    1, \n                    2, \n                    0\n                ], \n                \"plurals\": function(n) { return Number(n%10==1 && n%100!=11 ? 0 : n !== 0 ? 1 : 2); }\n            }, \n            \"mai\": {\n                \"name\": \"Maithili\", \n                \"numbers\": [\n                    1, \n                    2\n                ], \n                \"plurals\": function(n) { return Number(n != 1); }\n            }, \n            \"mfe\": {\n                \"name\": \"Mauritian Creole\", \n                \"numbers\": [\n                    1, \n                    2\n                ], \n                \"plurals\": function(n) { return Number(n > 1); }\n            }, \n            \"mg\": {\n                \"name\": \"Malagasy\", \n                \"numbers\": [\n                    1, \n                    2\n                ], \n                \"plurals\": function(n) { return Number(n > 1); }\n            }, \n            \"mi\": {\n                \"name\": \"Maori\", \n                \"numbers\": [\n                    1, \n                    2\n                ], \n                \"plurals\": function(n) { return Number(n > 1); }\n            }, \n            \"mk\": {\n                \"name\": \"Macedonian\", \n                \"numbers\": [\n                    1, \n                    2\n                ], \n                \"plurals\": function(n) { return Number(n==1 || n%10==1 ? 0 : 1); }\n            }, \n            \"ml\": {\n                \"name\": \"Malayalam\", \n                \"numbers\": [\n                    1, \n                    2\n                ], \n                \"plurals\": function(n) { return Number(n != 1); }\n            }, \n            \"mn\": {\n                \"name\": \"Mongolian\", \n                \"numbers\": [\n                    1, \n                    2\n                ], \n                \"plurals\": function(n) { return Number(n != 1); }\n            }, \n            \"mnk\": {\n                \"name\": \"Mandinka\", \n                \"numbers\": [\n                    0, \n                    1, \n                    2\n                ], \n                \"plurals\": function(n) { return Number(n == 0 ? 0 : n==1 ? 1 : 2); }\n            }, \n            \"mr\": {\n                \"name\": \"Marathi\", \n                \"numbers\": [\n                    1, \n                    2\n                ], \n                \"plurals\": function(n) { return Number(n != 1); }\n            }, \n            \"ms\": {\n                \"name\": \"Malay\", \n                \"numbers\": [\n                    1\n                ], \n                \"plurals\": function(n) { return 0; }\n            }, \n            \"mt\": {\n                \"name\": \"Maltese\", \n                \"numbers\": [\n                    1, \n                    2, \n                    11, \n                    20\n                ], \n                \"plurals\": function(n) { return Number(n==1 ? 0 : n===0 || ( n%100>1 && n%100<11) ? 1 : (n%100>10 && n%100<20 ) ? 2 : 3); }\n            }, \n            \"nah\": {\n                \"name\": \"Nahuatl\", \n                \"numbers\": [\n                    1, \n                    2\n                ], \n                \"plurals\": function(n) { return Number(n != 1); }\n            }, \n            \"nap\": {\n                \"name\": \"Neapolitan\", \n                \"numbers\": [\n                    1, \n                    2\n                ], \n                \"plurals\": function(n) { return Number(n != 1); }\n            }, \n            \"nb\": {\n                \"name\": \"Norwegian Bokmal\", \n                \"numbers\": [\n                    1, \n                    2\n                ], \n                \"plurals\": function(n) { return Number(n != 1); }\n            }, \n            \"ne\": {\n                \"name\": \"Nepali\", \n                \"numbers\": [\n                    1, \n                    2\n                ], \n                \"plurals\": function(n) { return Number(n != 1); }\n            }, \n            \"nl\": {\n                \"name\": \"Dutch\", \n                \"numbers\": [\n                    1, \n                    2\n                ], \n                \"plurals\": function(n) { return Number(n != 1); }\n            }, \n            \"nn\": {\n                \"name\": \"Norwegian Nynorsk\", \n                \"numbers\": [\n                    1, \n                    2\n                ], \n                \"plurals\": function(n) { return Number(n != 1); }\n            }, \n            \"no\": {\n                \"name\": \"Norwegian\", \n                \"numbers\": [\n                    1, \n                    2\n                ], \n                \"plurals\": function(n) { return Number(n != 1); }\n            }, \n            \"nso\": {\n                \"name\": \"Northern Sotho\", \n                \"numbers\": [\n                    1, \n                    2\n                ], \n                \"plurals\": function(n) { return Number(n != 1); }\n            }, \n            \"oc\": {\n                \"name\": \"Occitan\", \n                \"numbers\": [\n                    1, \n                    2\n                ], \n                \"plurals\": function(n) { return Number(n > 1); }\n            }, \n            \"or\": {\n                \"name\": \"Oriya\", \n                \"numbers\": [\n                    2, \n                    1\n                ], \n                \"plurals\": function(n) { return Number(n != 1); }\n            }, \n            \"pa\": {\n                \"name\": \"Punjabi\", \n                \"numbers\": [\n                    1, \n                    2\n                ], \n                \"plurals\": function(n) { return Number(n != 1); }\n            }, \n            \"pap\": {\n                \"name\": \"Papiamento\", \n                \"numbers\": [\n                    1, \n                    2\n                ], \n                \"plurals\": function(n) { return Number(n != 1); }\n            }, \n            \"pl\": {\n                \"name\": \"Polish\", \n                \"numbers\": [\n                    1, \n                    2,\n                    5\n                ], \n                \"plurals\": function(n) { return Number(n==1 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2); }\n            }, \n            \"pms\": {\n                \"name\": \"Piemontese\", \n                \"numbers\": [\n                    1, \n                    2\n                ], \n                \"plurals\": function(n) { return Number(n != 1); }\n            }, \n            \"ps\": {\n                \"name\": \"Pashto\", \n                \"numbers\": [\n                    1, \n                    2\n                ], \n                \"plurals\": function(n) { return Number(n != 1); }\n            }, \n            \"pt\": {\n                \"name\": \"Portuguese\", \n                \"numbers\": [\n                    1, \n                    2\n                ], \n                \"plurals\": function(n) { return Number(n != 1); }\n            }, \n            \"pt_br\": {\n                \"name\": \"Brazilian Portuguese\", \n                \"numbers\": [\n                    1, \n                    2\n                ], \n                \"plurals\": function(n) { return Number(n != 1); }\n            }, \n            \"rm\": {\n                \"name\": \"Romansh\", \n                \"numbers\": [\n                    1, \n                    2\n                ], \n                \"plurals\": function(n) { return Number(n != 1); }\n            }, \n            \"ro\": {\n                \"name\": \"Romanian\", \n                \"numbers\": [\n                    1, \n                    2,\n                    20\n                ], \n                \"plurals\": function(n) { return Number(n==1 ? 0 : (n===0 || (n%100 > 0 && n%100 < 20)) ? 1 : 2); }\n            }, \n            \"ru\": {\n                \"name\": \"Russian\", \n                \"numbers\": [\n                    1, \n                    2, \n                    5\n                ], \n                \"plurals\": function(n) { return Number(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2); }\n            }, \n            \"sah\": {\n                \"name\": \"Yakut\", \n                \"numbers\": [\n                    1\n                ], \n                \"plurals\": function(n) { return 0; }\n            }, \n            \"sco\": {\n                \"name\": \"Scots\", \n                \"numbers\": [\n                    1, \n                    2\n                ], \n                \"plurals\": function(n) { return Number(n != 1); }\n            }, \n            \"se\": {\n                \"name\": \"Northern Sami\", \n                \"numbers\": [\n                    1, \n                    2\n                ], \n                \"plurals\": function(n) { return Number(n != 1); }\n            }, \n            \"si\": {\n                \"name\": \"Sinhala\", \n                \"numbers\": [\n                    1, \n                    2\n                ], \n                \"plurals\": function(n) { return Number(n != 1); }\n            }, \n            \"sk\": {\n                \"name\": \"Slovak\", \n                \"numbers\": [\n                    1, \n                    2, \n                    5\n                ], \n                \"plurals\": function(n) { return Number((n==1) ? 0 : (n>=2 && n<=4) ? 1 : 2); }\n            }, \n            \"sl\": {\n                \"name\": \"Slovenian\", \n                \"numbers\": [\n                    5, \n                    1, \n                    2, \n                    3\n                ], \n                \"plurals\": function(n) { return Number(n%100==1 ? 1 : n%100==2 ? 2 : n%100==3 || n%100==4 ? 3 : 0); }\n            }, \n            \"so\": {\n                \"name\": \"Somali\", \n                \"numbers\": [\n                    1, \n                    2\n                ], \n                \"plurals\": function(n) { return Number(n != 1); }\n            }, \n            \"son\": {\n                \"name\": \"Songhay\", \n                \"numbers\": [\n                    1, \n                    2\n                ], \n                \"plurals\": function(n) { return Number(n != 1); }\n            }, \n            \"sq\": {\n                \"name\": \"Albanian\", \n                \"numbers\": [\n                    1, \n                    2\n                ], \n                \"plurals\": function(n) { return Number(n != 1); }\n            }, \n            \"sr\": {\n                \"name\": \"Serbian\", \n                \"numbers\": [\n                    1, \n                    2,\n                    5\n                ], \n                \"plurals\": function(n) { return Number(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2); }\n            }, \n            \"su\": {\n                \"name\": \"Sundanese\", \n                \"numbers\": [\n                    1\n                ], \n                \"plurals\": function(n) { return 0; }\n            }, \n            \"sv\": {\n                \"name\": \"Swedish\", \n                \"numbers\": [\n                    1, \n                    2\n                ], \n                \"plurals\": function(n) { return Number(n != 1); }\n            }, \n            \"sw\": {\n                \"name\": \"Swahili\", \n                \"numbers\": [\n                    1, \n                    2\n                ], \n                \"plurals\": function(n) { return Number(n != 1); }\n            }, \n            \"ta\": {\n                \"name\": \"Tamil\", \n                \"numbers\": [\n                    1, \n                    2\n                ], \n                \"plurals\": function(n) { return Number(n != 1); }\n            }, \n            \"te\": {\n                \"name\": \"Telugu\", \n                \"numbers\": [\n                    1, \n                    2\n                ], \n                \"plurals\": function(n) { return Number(n != 1); }\n            }, \n            \"tg\": {\n                \"name\": \"Tajik\", \n                \"numbers\": [\n                    1, \n                    2\n                ], \n                \"plurals\": function(n) { return Number(n > 1); }\n            }, \n            \"th\": {\n                \"name\": \"Thai\", \n                \"numbers\": [\n                    1\n                ], \n                \"plurals\": function(n) { return 0; }\n            }, \n            \"ti\": {\n                \"name\": \"Tigrinya\", \n                \"numbers\": [\n                    1, \n                    2\n                ], \n                \"plurals\": function(n) { return Number(n > 1); }\n            }, \n            \"tk\": {\n                \"name\": \"Turkmen\", \n                \"numbers\": [\n                    1, \n                    2\n                ], \n                \"plurals\": function(n) { return Number(n != 1); }\n            }, \n            \"tr\": {\n                \"name\": \"Turkish\", \n                \"numbers\": [\n                    1, \n                    2\n                ], \n                \"plurals\": function(n) { return Number(n > 1); }\n            }, \n            \"tt\": {\n                \"name\": \"Tatar\", \n                \"numbers\": [\n                    1\n                ], \n                \"plurals\": function(n) { return 0; }\n            }, \n            \"ug\": {\n                \"name\": \"Uyghur\", \n                \"numbers\": [\n                    1\n                ], \n                \"plurals\": function(n) { return 0; }\n            }, \n            \"uk\": {\n                \"name\": \"Ukrainian\", \n                \"numbers\": [\n                    1, \n                    2,\n                    5\n                ], \n                \"plurals\": function(n) { return Number(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2); }\n            }, \n            \"ur\": {\n                \"name\": \"Urdu\", \n                \"numbers\": [\n                    1, \n                    2\n                ], \n                \"plurals\": function(n) { return Number(n != 1); }\n            }, \n            \"uz\": {\n                \"name\": \"Uzbek\", \n                \"numbers\": [\n                    1, \n                    2\n                ], \n                \"plurals\": function(n) { return Number(n > 1); }\n            }, \n            \"vi\": {\n                \"name\": \"Vietnamese\", \n                \"numbers\": [\n                    1\n                ], \n                \"plurals\": function(n) { return 0; }\n            }, \n            \"wa\": {\n                \"name\": \"Walloon\", \n                \"numbers\": [\n                    1, \n                    2\n                ], \n                \"plurals\": function(n) { return Number(n > 1); }\n            }, \n            \"wo\": {\n                \"name\": \"Wolof\", \n                \"numbers\": [\n                    1\n                ], \n                \"plurals\": function(n) { return 0; }\n            }, \n            \"yo\": {\n                \"name\": \"Yoruba\", \n                \"numbers\": [\n                    1, \n                    2\n                ], \n                \"plurals\": function(n) { return Number(n != 1); }\n            }, \n            \"zh\": {\n                \"name\": \"Chinese\", \n                \"numbers\": [\n                    1\n                ], \n                \"plurals\": function(n) { return 0; }\n            }\n        },\n    \n        // for demonstration only sl and ar is added but you can add your own pluralExtensions\n        addRule: function(lng, obj) {\n            pluralExtensions.rules[lng] = obj;    \n        },\n    \n        setCurrentLng: function(lng) {\n            if (!pluralExtensions.currentRule || pluralExtensions.currentRule.lng !== lng) {\n                var parts = lng.split('-');\n    \n                pluralExtensions.currentRule = {\n                    lng: lng,\n                    rule: pluralExtensions.rules[parts[0]]\n                };\n            }\n        },\n    \n        get: function(lng, count) {\n            var parts = lng.split('-');\n    \n            function getResult(l, c) {\n                var ext;\n                if (pluralExtensions.currentRule && pluralExtensions.currentRule.lng === lng) {\n                    ext = pluralExtensions.currentRule.rule; \n                } else {\n                    ext = pluralExtensions.rules[l];\n                }\n                if (ext) {\n                    var i = ext.plurals(c);\n                    var number = ext.numbers[i];\n                    if (ext.numbers.length === 2 && ext.numbers[0] === 1) {\n                        if (number === 2) { \n                            number = -1; // regular plural\n                        } else if (number === 1) {\n                            number = 1; // singular\n                        }\n                    }//console.log(count + '-' + number);\n                    return number;\n                } else {\n                    return c === 1 ? '1' : '-1';\n                }\n            }\n                        \n            return getResult(parts[0], count);\n        }\n    \n    };\n    var postProcessors = {};\n    var addPostProcessor = function(name, fc) {\n        postProcessors[name] = fc;\n    };\n    // sprintf support\n    var sprintf = (function() {\n        function get_type(variable) {\n            return Object.prototype.toString.call(variable).slice(8, -1).toLowerCase();\n        }\n        function str_repeat(input, multiplier) {\n            for (var output = []; multiplier > 0; output[--multiplier] = input) {/* do nothing */}\n            return output.join('');\n        }\n    \n        var str_format = function() {\n            if (!str_format.cache.hasOwnProperty(arguments[0])) {\n                str_format.cache[arguments[0]] = str_format.parse(arguments[0]);\n            }\n            return str_format.format.call(null, str_format.cache[arguments[0]], arguments);\n        };\n    \n        str_format.format = function(parse_tree, argv) {\n            var cursor = 1, tree_length = parse_tree.length, node_type = '', arg, output = [], i, k, match, pad, pad_character, pad_length;\n            for (i = 0; i < tree_length; i++) {\n                node_type = get_type(parse_tree[i]);\n                if (node_type === 'string') {\n                    output.push(parse_tree[i]);\n                }\n                else if (node_type === 'array') {\n                    match = parse_tree[i]; // convenience purposes only\n                    if (match[2]) { // keyword argument\n                        arg = argv[cursor];\n                        for (k = 0; k < match[2].length; k++) {\n                            if (!arg.hasOwnProperty(match[2][k])) {\n                                throw(sprintf('[sprintf] property \"%s\" does not exist', match[2][k]));\n                            }\n                            arg = arg[match[2][k]];\n                        }\n                    }\n                    else if (match[1]) { // positional argument (explicit)\n                        arg = argv[match[1]];\n                    }\n                    else { // positional argument (implicit)\n                        arg = argv[cursor++];\n                    }\n    \n                    if (/[^s]/.test(match[8]) && (get_type(arg) != 'number')) {\n                        throw(sprintf('[sprintf] expecting number but found %s', get_type(arg)));\n                    }\n                    switch (match[8]) {\n                        case 'b': arg = arg.toString(2); break;\n                        case 'c': arg = String.fromCharCode(arg); break;\n                        case 'd': arg = parseInt(arg, 10); break;\n                        case 'e': arg = match[7] ? arg.toExponential(match[7]) : arg.toExponential(); break;\n                        case 'f': arg = match[7] ? parseFloat(arg).toFixed(match[7]) : parseFloat(arg); break;\n                        case 'o': arg = arg.toString(8); break;\n                        case 's': arg = ((arg = String(arg)) && match[7] ? arg.substring(0, match[7]) : arg); break;\n                        case 'u': arg = Math.abs(arg); break;\n                        case 'x': arg = arg.toString(16); break;\n                        case 'X': arg = arg.toString(16).toUpperCase(); break;\n                    }\n                    arg = (/[def]/.test(match[8]) && match[3] && arg >= 0 ? '+'+ arg : arg);\n                    pad_character = match[4] ? match[4] == '0' ? '0' : match[4].charAt(1) : ' ';\n                    pad_length = match[6] - String(arg).length;\n                    pad = match[6] ? str_repeat(pad_character, pad_length) : '';\n                    output.push(match[5] ? arg + pad : pad + arg);\n                }\n            }\n            return output.join('');\n        };\n    \n        str_format.cache = {};\n    \n        str_format.parse = function(fmt) {\n            var _fmt = fmt, match = [], parse_tree = [], arg_names = 0;\n            while (_fmt) {\n                if ((match = /^[^\\x25]+/.exec(_fmt)) !== null) {\n                    parse_tree.push(match[0]);\n                }\n                else if ((match = /^\\x25{2}/.exec(_fmt)) !== null) {\n                    parse_tree.push('%');\n                }\n                else if ((match = /^\\x25(?:([1-9]\\d*)\\$|\\(([^\\)]+)\\))?(\\+)?(0|'[^$])?(-)?(\\d+)?(?:\\.(\\d+))?([b-fosuxX])/.exec(_fmt)) !== null) {\n                    if (match[2]) {\n                        arg_names |= 1;\n                        var field_list = [], replacement_field = match[2], field_match = [];\n                        if ((field_match = /^([a-z_][a-z_\\d]*)/i.exec(replacement_field)) !== null) {\n                            field_list.push(field_match[1]);\n                            while ((replacement_field = replacement_field.substring(field_match[0].length)) !== '') {\n                                if ((field_match = /^\\.([a-z_][a-z_\\d]*)/i.exec(replacement_field)) !== null) {\n                                    field_list.push(field_match[1]);\n                                }\n                                else if ((field_match = /^\\[(\\d+)\\]/.exec(replacement_field)) !== null) {\n                                    field_list.push(field_match[1]);\n                                }\n                                else {\n                                    throw('[sprintf] huh?');\n                                }\n                            }\n                        }\n                        else {\n                            throw('[sprintf] huh?');\n                        }\n                        match[2] = field_list;\n                    }\n                    else {\n                        arg_names |= 2;\n                    }\n                    if (arg_names === 3) {\n                        throw('[sprintf] mixing positional and named placeholders is not (yet) supported');\n                    }\n                    parse_tree.push(match);\n                }\n                else {\n                    throw('[sprintf] huh?');\n                }\n                _fmt = _fmt.substring(match[0].length);\n            }\n            return parse_tree;\n        };\n    \n        return str_format;\n    })();\n    \n    var vsprintf = function(fmt, argv) {\n        argv.unshift(fmt);\n        return sprintf.apply(null, argv);\n    };\n    \n    addPostProcessor(\"sprintf\", function(val, key, opts) {\n        if (!opts.sprintf) return val;\n    \n        if (Object.prototype.toString.apply(opts.sprintf) === '[object Array]') {\n            return vsprintf(val, opts.sprintf);\n        } else if (typeof opts.sprintf === 'object') {\n            return sprintf(val, opts.sprintf);\n        }\n    \n        return val;\n    });\n    // public api interface\n    TAPi18next.init = init;\n    TAPi18next.setLng = setLng;\n    TAPi18next.preload = preload;\n    TAPi18next.addResourceBundle = addResourceBundle;\n    TAPi18next.removeResourceBundle = removeResourceBundle;\n    TAPi18next.loadNamespace = loadNamespace;\n    TAPi18next.loadNamespaces = loadNamespaces;\n    TAPi18next.setDefaultNamespace = setDefaultNamespace;\n    TAPi18next.t = translate;\n    TAPi18next.translate = translate;\n    TAPi18next.exists = exists;\n    TAPi18next.detectLanguage = f.detectLanguage;\n    TAPi18next.pluralExtensions = pluralExtensions;\n    TAPi18next.sync = sync;\n    TAPi18next.functions = f;\n    TAPi18next.lng = lng;\n    TAPi18next.addPostProcessor = addPostProcessor;\n    TAPi18next.options = o;\n})();\n","TAPi18next.init({resStore: {}, fallbackLng: globals.fallback_language, useCookie: false});\n","share.helpers = {}","fallback_language = globals.fallback_language\n\nTAPi18n = ->\n  EventEmitter.call @\n\n  @_fallback_language = fallback_language\n\n  @_language_changed_tracker = new Tracker.Dependency\n\n  @_loaded_languages = [fallback_language] # stores the loaded languages, the fallback language is loaded automatically\n\n  @conf = null # If conf isn't null we assume that tap:i18n is enabled for the project.\n             # We assume conf is valid, we sterilize and validate it during the build process.\n\n  @packages = {} # Stores the packages' package-tap.i18n jsons\n\n  @languages_names = {} # Stores languages that we've found languages files for in the project dir.\n                                      # format:\n                                      # {\n                                      #    lang_tag: [lang_name_in_english, lang_name_in_local_language]\n                                      # }\n\n  @translations = {} # Stores the packages/project translations - Server side only\n                   # fallback_language translations are not stored here\n\n\n  if Meteor.isClient\n    Session.set @_loaded_lang_session_key, null\n\n    @_languageSpecificTranslators = {}\n    @_languageSpecificTranslatorsTrackers = {}\n\n  if Meteor.isServer\n    @server_translators = {}\n\n    Meteor.startup =>\n      # If tap-i18n is enabled for that project\n      if @_enabled()\n        @_registerHTTPMethod()\n\n  @__ = @_getPackageI18nextProxy(globals.project_translations_domain)\n\n  TAPi18next.setLng fallback_language\n\n  return @\n\nUtil.inherits TAPi18n, EventEmitter\n\n_.extend TAPi18n.prototype,\n  _loaded_lang_session_key: \"TAPi18n::loaded_lang\"\n\n  _enable: (conf) ->\n    # tap:i18n gets enabled for a project once a conf file is set for it.\n    # It can be either a conf object that was set by project-tap.i18n file or\n    # a default conf, which is being added if the project has lang files\n    # (*.i18n.json) but not project-tap.i18n\n    @conf = conf\n\n    @._onceEnabled()\n\n  _onceEnabled: () ->\n    # The arch specific code can use this for procedures that should be performed once\n    # tap:i18n gets enabled (project conf file is being set)\n    return\n\n  _enabled: ->\n    # read the comment of @conf\n    @conf?\n\n  _getPackageDomain: (package_name) ->\n    package_name.replace(/:/g, \"-\")\n\n  addResourceBundle: (lang_tag, package_name, translations) ->\n    TAPi18next.addResourceBundle(lang_tag, @_getPackageDomain(package_name), translations)\n\n  _getSpecificLangTranslator: (lang) ->\n    current_lang = TAPi18next.lng()\n\n    translator = null\n    TAPi18next.setLng lang, {fixLng: true}, (lang_translator) =>\n      translator = lang_translator\n\n    # Restore i18next lang that had been changed in the process of generating\n    # lang specific translator\n    TAPi18next.setLng current_lang\n\n    return translator\n\n  _getProjectLanguages: () ->\n    # Return an array of languages available for the current project\n    if @._enabled()\n      if _.isArray @.conf.supported_languages\n        return _.union([@._fallback_language], @.conf.supported_languages)\n      else\n        # If supported_languages is null, all the languages we found\n        # translations files to in the project level are considered supported.\n        # We use the @.languages_names array to tell which languages we found\n        # since for every i18n.json file we found in the project level we add\n        # an entry for its language to @.languages_names in the build process.\n        #\n        # We also know for certain that when tap-i18n is enabled the fallback\n        # lang is in @.languages_names\n        return _.keys @.languages_names\n    else\n      return [@._fallback_language]\n\n  getLanguages: ->\n    if not @._enabled()\n      return null\n\n    languages = {}\n    for lang_tag in @._getProjectLanguages()\n      languages[lang_tag] =\n        name: @.languages_names[lang_tag][1]\n        en: @.languages_names[lang_tag][0]\n\n    languages\n\n  _loadLangFileObject: (language_tag, data) ->\n    for package_name, package_keys of data\n      # Translations that are added by loadTranslations() have higher priority\n      package_keys = _.extend({}, package_keys, @_loadTranslations_cache[language_tag]?[package_name] or {})\n\n      @addResourceBundle(language_tag, package_name, package_keys)\n\n  _loadTranslations_cache: {}\n  loadTranslations: (translations, namespace) ->\n    project_languages = @_getProjectLanguages()\n\n    for language_tag, translation_keys of translations\n      if not @_loadTranslations_cache[language_tag]?\n        @_loadTranslations_cache[language_tag] = {}\n\n      if not @_loadTranslations_cache[language_tag][namespace]?\n        @_loadTranslations_cache[language_tag][namespace] = {}\n\n      _.extend(@_loadTranslations_cache[language_tag][namespace], translation_keys)\n\n      @addResourceBundle(language_tag, namespace, translation_keys)\n\n      if Meteor.isClient and @getLanguage() == language_tag\n        # Retranslate if session language updated\n        @_language_changed_tracker.changed()","_.extend TAPi18n.prototype,\n  server_translators: null\n\n  _registerServerTranslator: (lang_tag, package_name) ->\n    if @_enabled()\n      if not(lang_tag of @server_translators)\n        @server_translators[lang_tag] = @_getSpecificLangTranslator(lang_tag)\n\n      # fallback language is integrated, and isn't part of @translations \n      if lang_tag != @_fallback_language\n        @addResourceBundle(lang_tag, package_name, @translations[lang_tag][package_name])\n\n    if not(@_fallback_language of @server_translators)\n      @server_translators[@_fallback_language] = @_getSpecificLangTranslator(@_fallback_language)\n\n  _registerAllServerTranslators: () ->\n    for lang_tag in @_getProjectLanguages()\n      for package_name of @translations[lang_tag]\n        @_registerServerTranslator(lang_tag, package_name)\n\n  _getPackageI18nextProxy: (package_name) ->\n    # A proxy to TAPi18next.t where the namespace is preset to the package's\n    (key, options, lang_tag=null) =>\n      if not lang_tag?\n        # translate to fallback_language\n        return @server_translators[@_fallback_language] \"#{@_getPackageDomain(package_name)}:#{key}\", options\n      else if not(lang_tag of @server_translators)\n        console.log \"Warning: language #{lang_tag} is not supported in this project, fallback language (#{@_fallback_language})\"\n        return @server_translators[@_fallback_language] \"#{@_getPackageDomain(package_name)}:#{key}\", options\n      else\n        return @server_translators[lang_tag] \"#{@_getPackageDomain(package_name)}:#{key}\", options\n\n  _registerHTTPMethod: ->\n    self = @\n\n    methods = {}\n\n    if not self._enabled()\n      throw new Meteor.Error 500, \"tap-i18n has to be enabled in order to register the HTTP method\"\n\n    methods[\"#{self.conf.i18n_files_route.replace(/\\/$/, \"\")}/multi/:langs\"] =\n      get: () ->\n        if not RegExp(\"^((#{globals.langauges_tags_regex},)*#{globals.langauges_tags_regex}|all).json$\").test(@params.langs)\n          return @setStatusCode(401)\n\n        langs = @params.langs.replace \".json\", \"\"\n\n        if langs == \"all\"\n          output = self.translations\n        else\n          output = {}\n\n          langs = langs.split(\",\")\n          for lang_tag in langs\n            if lang_tag in self._getProjectLanguages() and \\\n               lang_tag != self._fallback_language # fallback language is integrated to the bundle\n              language_translations = self.translations[lang_tag]\n\n              if language_translations?\n                output[lang_tag] = language_translations\n\n        return JSON.stringify(output)\n\n    methods[\"#{self.conf.i18n_files_route.replace(/\\/$/, \"\")}/:lang\"] =\n      get: () ->\n        if not RegExp(\"^#{globals.langauges_tags_regex}.json$\").test(@params.lang)\n          return @setStatusCode(401)\n\n        lang_tag = @params.lang.replace \".json\", \"\"\n\n        if lang_tag not in self._getProjectLanguages() or \\\n           lang_tag == self._fallback_language # fallback language is integrated to the bundle\n          return @setStatusCode(404) # not found\n\n        language_translations = self.translations[lang_tag]\n        # returning {} if lang_tag is not in translations allows the project\n        # developer to force a language supporte with project-tap.i18n's\n        # supported_languages property, even if that language has no lang\n        # files.\n        return JSON.stringify(if language_translations? then language_translations else {})\n\n    HTTP.methods methods\n\n  _onceEnabled: ->\n    @_registerAllServerTranslators()","TAPi18n = new TAPi18n()"]}}]