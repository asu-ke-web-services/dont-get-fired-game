[{"type":"js","data":"(function () {\n\n/* Imports */\nvar process = Package.meteor.process;\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar NpmModuleMongodb = Package['npm-mongo'].NpmModuleMongodb;\nvar NpmModuleMongodbVersion = Package['npm-mongo'].NpmModuleMongodbVersion;\nvar AllowDeny = Package['allow-deny'].AllowDeny;\nvar Random = Package.random.Random;\nvar EJSON = Package.ejson.EJSON;\nvar _ = Package.underscore._;\nvar LocalCollection = Package.minimongo.LocalCollection;\nvar Minimongo = Package.minimongo.Minimongo;\nvar DDP = Package['ddp-client'].DDP;\nvar DDPServer = Package['ddp-server'].DDPServer;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar DiffSequence = Package['diff-sequence'].DiffSequence;\nvar MongoID = Package['mongo-id'].MongoID;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar ECMAScript = Package.ecmascript.ECMAScript;\nvar MaxHeap = Package['binary-heap'].MaxHeap;\nvar MinHeap = Package['binary-heap'].MinHeap;\nvar MinMaxHeap = Package['binary-heap'].MinMaxHeap;\nvar Hook = Package['callback-hook'].Hook;\nvar meteorInstall = Package.modules.meteorInstall;\nvar Symbol = Package['ecmascript-runtime'].Symbol;\nvar Map = Package['ecmascript-runtime'].Map;\nvar Set = Package['ecmascript-runtime'].Set;\nvar regeneratorRuntime = Package['ecmascript-runtime'].regeneratorRuntime;\nvar babelHelpers = Package['babel-runtime'].babelHelpers;\nvar Promise = Package.promise.Promise;\n\n/* Package-scope variables */\nvar MongoInternals, MongoTest, MongoConnection, CursorDescription, Cursor, listenAll, forEachTrigger, OPLOG_COLLECTION, idForOp, OplogHandle, ObserveMultiplexer, ObserveHandle, DocFetcher, PollingObserveDriver, OplogObserveDriver, LocalCollectionDriver, Mongo;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"mongo\":{\"mongo_driver.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/mongo/mongo_driver.js                                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    //\n * Provide a synchronous Collection API using fibers, backed by                                                        //\n * MongoDB.  This is only for use on the server, and mostly identical                                                  //\n * to the client API.                                                                                                  //\n *                                                                                                                     //\n * NOTE: the public API methods must be run within a fiber. If you call                                                //\n * these outside of a fiber they will explode!                                                                         //\n */                                                                                                                    //\n                                                                                                                       //\nvar path = Npm.require('path');                                                                                        // 10\nvar MongoDB = NpmModuleMongodb;                                                                                        // 11\nvar Fiber = Npm.require('fibers');                                                                                     // 12\nvar Future = Npm.require(path.join('fibers', 'future'));                                                               // 13\n                                                                                                                       //\nMongoInternals = {};                                                                                                   // 15\nMongoTest = {};                                                                                                        // 16\n                                                                                                                       //\nMongoInternals.NpmModules = {                                                                                          // 18\n  mongodb: {                                                                                                           // 19\n    version: NpmModuleMongodbVersion,                                                                                  // 20\n    module: MongoDB                                                                                                    // 21\n  }                                                                                                                    //\n};                                                                                                                     //\n                                                                                                                       //\n// Older version of what is now available via                                                                          //\n// MongoInternals.NpmModules.mongodb.module.  It was never documented, but                                             //\n// people do use it.                                                                                                   //\n// XXX COMPAT WITH 1.0.3.2                                                                                             //\nMongoInternals.NpmModule = MongoDB;                                                                                    // 29\n                                                                                                                       //\n// This is used to add or remove EJSON from the beginning of everything nested                                         //\n// inside an EJSON custom type. It should only be called on pure JSON!                                                 //\nvar replaceNames = function (filter, thing) {                                                                          // 33\n  if (typeof thing === \"object\") {                                                                                     // 34\n    if (_.isArray(thing)) {                                                                                            // 35\n      return _.map(thing, _.bind(replaceNames, null, filter));                                                         // 36\n    }                                                                                                                  //\n    var ret = {};                                                                                                      // 38\n    _.each(thing, function (value, key) {                                                                              // 39\n      ret[filter(key)] = replaceNames(filter, value);                                                                  // 40\n    });                                                                                                                //\n    return ret;                                                                                                        // 42\n  }                                                                                                                    //\n  return thing;                                                                                                        // 44\n};                                                                                                                     //\n                                                                                                                       //\n// Ensure that EJSON.clone keeps a Timestamp as a Timestamp (instead of just                                           //\n// doing a structural clone).                                                                                          //\n// XXX how ok is this? what if there are multiple copies of MongoDB loaded?                                            //\nMongoDB.Timestamp.prototype.clone = function () {                                                                      // 50\n  // Timestamps should be immutable.                                                                                   //\n  return this;                                                                                                         // 52\n};                                                                                                                     //\n                                                                                                                       //\nvar makeMongoLegal = function (name) {                                                                                 // 55\n  return \"EJSON\" + name;                                                                                               // 55\n};                                                                                                                     //\nvar unmakeMongoLegal = function (name) {                                                                               // 56\n  return name.substr(5);                                                                                               // 56\n};                                                                                                                     //\n                                                                                                                       //\nvar replaceMongoAtomWithMeteor = function (document) {                                                                 // 58\n  if (document instanceof MongoDB.Binary) {                                                                            // 59\n    var buffer = document.value(true);                                                                                 // 60\n    return new Uint8Array(buffer);                                                                                     // 61\n  }                                                                                                                    //\n  if (document instanceof MongoDB.ObjectID) {                                                                          // 63\n    return new Mongo.ObjectID(document.toHexString());                                                                 // 64\n  }                                                                                                                    //\n  if (document[\"EJSON$type\"] && document[\"EJSON$value\"] && _.size(document) === 2) {                                   // 66\n    return EJSON.fromJSONValue(replaceNames(unmakeMongoLegal, document));                                              // 68\n  }                                                                                                                    //\n  if (document instanceof MongoDB.Timestamp) {                                                                         // 70\n    // For now, the Meteor representation of a Mongo timestamp type (not a date!                                       //\n    // this is a weird internal thing used in the oplog!) is the same as the                                           //\n    // Mongo representation. We need to do this explicitly or else we would do a                                       //\n    // structural clone and lose the prototype.                                                                        //\n    return document;                                                                                                   // 75\n  }                                                                                                                    //\n  return undefined;                                                                                                    // 77\n};                                                                                                                     //\n                                                                                                                       //\nvar replaceMeteorAtomWithMongo = function (document) {                                                                 // 80\n  if (EJSON.isBinary(document)) {                                                                                      // 81\n    // This does more copies than we'd like, but is necessary because                                                  //\n    // MongoDB.BSON only looks like it takes a Uint8Array (and doesn't actually                                        //\n    // serialize it correctly).                                                                                        //\n    return new MongoDB.Binary(new Buffer(document));                                                                   // 85\n  }                                                                                                                    //\n  if (document instanceof Mongo.ObjectID) {                                                                            // 87\n    return new MongoDB.ObjectID(document.toHexString());                                                               // 88\n  }                                                                                                                    //\n  if (document instanceof MongoDB.Timestamp) {                                                                         // 90\n    // For now, the Meteor representation of a Mongo timestamp type (not a date!                                       //\n    // this is a weird internal thing used in the oplog!) is the same as the                                           //\n    // Mongo representation. We need to do this explicitly or else we would do a                                       //\n    // structural clone and lose the prototype.                                                                        //\n    return document;                                                                                                   // 95\n  }                                                                                                                    //\n  if (EJSON._isCustomType(document)) {                                                                                 // 97\n    return replaceNames(makeMongoLegal, EJSON.toJSONValue(document));                                                  // 98\n  }                                                                                                                    //\n  // It is not ordinarily possible to stick dollar-sign keys into mongo                                                //\n  // so we don't bother checking for things that need escaping at this time.                                           //\n  return undefined;                                                                                                    // 102\n};                                                                                                                     //\n                                                                                                                       //\nvar replaceTypes = function (document, atomTransformer) {                                                              // 105\n  if (typeof document !== 'object' || document === null) return document;                                              // 106\n                                                                                                                       //\n  var replacedTopLevelAtom = atomTransformer(document);                                                                // 109\n  if (replacedTopLevelAtom !== undefined) return replacedTopLevelAtom;                                                 // 110\n                                                                                                                       //\n  var ret = document;                                                                                                  // 113\n  _.each(document, function (val, key) {                                                                               // 114\n    var valReplaced = replaceTypes(val, atomTransformer);                                                              // 115\n    if (val !== valReplaced) {                                                                                         // 116\n      // Lazy clone. Shallow copy.                                                                                     //\n      if (ret === document) ret = _.clone(document);                                                                   // 118\n      ret[key] = valReplaced;                                                                                          // 120\n    }                                                                                                                  //\n  });                                                                                                                  //\n  return ret;                                                                                                          // 123\n};                                                                                                                     //\n                                                                                                                       //\nMongoConnection = function (url, options) {                                                                            // 127\n  var self = this;                                                                                                     // 128\n  options = options || {};                                                                                             // 129\n  self._observeMultiplexers = {};                                                                                      // 130\n  self._onFailoverHook = new Hook();                                                                                   // 131\n                                                                                                                       //\n  var mongoOptions = { db: { safe: true }, server: {}, replSet: {} };                                                  // 133\n                                                                                                                       //\n  // Set autoReconnect to true, unless passed on the URL. Why someone                                                  //\n  // would want to set autoReconnect to false, I'm not really sure, but                                                //\n  // keeping this for backwards compatibility for now.                                                                 //\n  if (!/[\\?&]auto_?[rR]econnect=/.test(url)) {                                                                         // 138\n    mongoOptions.server.auto_reconnect = true;                                                                         // 139\n  }                                                                                                                    //\n                                                                                                                       //\n  // Disable the native parser by default, unless specifically enabled                                                 //\n  // in the mongo URL.                                                                                                 //\n  // - The native driver can cause errors which normally would be                                                      //\n  //   thrown, caught, and handled into segfaults that take down the                                                   //\n  //   whole app.                                                                                                      //\n  // - Binary modules don't yet work when you bundle and move the bundle                                               //\n  //   to a different platform (aka deploy)                                                                            //\n  // We should revisit this after binary npm module support lands.                                                     //\n  if (!/[\\?&]native_?[pP]arser=/.test(url)) {                                                                          // 150\n    mongoOptions.db.native_parser = false;                                                                             // 151\n  }                                                                                                                    //\n                                                                                                                       //\n  // XXX maybe we should have a better way of allowing users to configure the                                          //\n  // underlying Mongo driver                                                                                           //\n  if (_.has(options, 'poolSize')) {                                                                                    // 156\n    // If we just set this for \"server\", replSet will override it. If we just                                          //\n    // set it for replSet, it will be ignored if we're not using a replSet.                                            //\n    mongoOptions.server.poolSize = options.poolSize;                                                                   // 159\n    mongoOptions.replSet.poolSize = options.poolSize;                                                                  // 160\n  }                                                                                                                    //\n                                                                                                                       //\n  self.db = null;                                                                                                      // 163\n  // We keep track of the ReplSet's primary, so that we can trigger hooks when                                         //\n  // it changes.  The Node driver's joined callback seems to fire way too                                              //\n  // often, which is why we need to track it ourselves.                                                                //\n  self._primary = null;                                                                                                // 167\n  self._oplogHandle = null;                                                                                            // 168\n  self._docFetcher = null;                                                                                             // 169\n                                                                                                                       //\n  var connectFuture = new Future();                                                                                    // 172\n  MongoDB.connect(url, mongoOptions, Meteor.bindEnvironment(function (err, db) {                                       // 173\n    if (err) {                                                                                                         // 178\n      throw err;                                                                                                       // 179\n    }                                                                                                                  //\n                                                                                                                       //\n    // First, figure out what the current primary is, if any.                                                          //\n    if (db.serverConfig._state.master) self._primary = db.serverConfig._state.master.name;                             // 183\n    db.serverConfig.on('joined', Meteor.bindEnvironment(function (kind, doc) {                                         // 185\n      if (kind === 'primary') {                                                                                        // 187\n        if (doc.primary !== self._primary) {                                                                           // 188\n          self._primary = doc.primary;                                                                                 // 189\n          self._onFailoverHook.each(function (callback) {                                                              // 190\n            callback();                                                                                                // 191\n            return true;                                                                                               // 192\n          });                                                                                                          //\n        }                                                                                                              //\n      } else if (doc.me === self._primary) {                                                                           //\n        // The thing we thought was primary is now something other than                                                //\n        // primary.  Forget that we thought it was primary.  (This means                                               //\n        // that if a server stops being primary and then starts being                                                  //\n        // primary again without another server becoming primary in the                                                //\n        // middle, we'll correctly count it as a failover.)                                                            //\n        self._primary = null;                                                                                          // 201\n      }                                                                                                                //\n    }));                                                                                                               //\n                                                                                                                       //\n    // Allow the constructor to return.                                                                                //\n    connectFuture['return'](db);                                                                                       // 206\n  }, connectFuture.resolver() // onException                                                                           //\n  ));                                                                                                                  //\n                                                                                                                       //\n  // Wait for the connection to be successful; throws on failure.                                                      //\n  self.db = connectFuture.wait();                                                                                      // 213\n                                                                                                                       //\n  if (options.oplogUrl && !Package['disable-oplog']) {                                                                 // 215\n    self._oplogHandle = new OplogHandle(options.oplogUrl, self.db.databaseName);                                       // 216\n    self._docFetcher = new DocFetcher(self);                                                                           // 217\n  }                                                                                                                    //\n};                                                                                                                     //\n                                                                                                                       //\nMongoConnection.prototype.close = function () {                                                                        // 221\n  var self = this;                                                                                                     // 222\n                                                                                                                       //\n  if (!self.db) throw Error(\"close called before Connection created?\");                                                // 224\n                                                                                                                       //\n  // XXX probably untested                                                                                             //\n  var oplogHandle = self._oplogHandle;                                                                                 // 228\n  self._oplogHandle = null;                                                                                            // 229\n  if (oplogHandle) oplogHandle.stop();                                                                                 // 230\n                                                                                                                       //\n  // Use Future.wrap so that errors get thrown. This happens to                                                        //\n  // work even outside a fiber since the 'close' method is not                                                         //\n  // actually asynchronous.                                                                                            //\n  Future.wrap(_.bind(self.db.close, self.db))(true).wait();                                                            // 236\n};                                                                                                                     //\n                                                                                                                       //\n// Returns the Mongo Collection object; may yield.                                                                     //\nMongoConnection.prototype.rawCollection = function (collectionName) {                                                  // 240\n  var self = this;                                                                                                     // 241\n                                                                                                                       //\n  if (!self.db) throw Error(\"rawCollection called before Connection created?\");                                        // 243\n                                                                                                                       //\n  var future = new Future();                                                                                           // 246\n  self.db.collection(collectionName, future.resolver());                                                               // 247\n  return future.wait();                                                                                                // 248\n};                                                                                                                     //\n                                                                                                                       //\nMongoConnection.prototype._createCappedCollection = function (collectionName, byteSize, maxDocuments) {                // 251\n  var self = this;                                                                                                     // 253\n                                                                                                                       //\n  if (!self.db) throw Error(\"_createCappedCollection called before Connection created?\");                              // 255\n                                                                                                                       //\n  var future = new Future();                                                                                           // 258\n  self.db.createCollection(collectionName, { capped: true, size: byteSize, max: maxDocuments }, future.resolver());    // 259\n  future.wait();                                                                                                       // 263\n};                                                                                                                     //\n                                                                                                                       //\n// This should be called synchronously with a write, to create a                                                       //\n// transaction on the current write fence, if any. After we can read                                                   //\n// the write, and after observers have been notified (or at least,                                                     //\n// after the observer notifiers have added themselves to the write                                                     //\n// fence), you should call 'committed()' on the object returned.                                                       //\nMongoConnection.prototype._maybeBeginWrite = function () {                                                             // 271\n  var self = this;                                                                                                     // 272\n  var fence = DDPServer._CurrentWriteFence.get();                                                                      // 273\n  if (fence) return fence.beginWrite();else return { committed: function () {} };                                      // 274\n};                                                                                                                     //\n                                                                                                                       //\n// Internal interface: adds a callback which is called when the Mongo primary                                          //\n// changes. Returns a stop handle.                                                                                     //\nMongoConnection.prototype._onFailover = function (callback) {                                                          // 282\n  return this._onFailoverHook.register(callback);                                                                      // 283\n};                                                                                                                     //\n                                                                                                                       //\n//////////// Public API //////////                                                                                     //\n                                                                                                                       //\n// The write methods block until the database has confirmed the write (it may                                          //\n// not be replicated or stable on disk, but one server has confirmed it) if no                                         //\n// callback is provided. If a callback is provided, then they call the callback                                        //\n// when the write is confirmed. They return nothing on success, and raise an                                           //\n// exception on failure.                                                                                               //\n//                                                                                                                     //\n// After making a write (with insert, update, remove), observers are                                                   //\n// notified asynchronously. If you want to receive a callback once all                                                 //\n// of the observer notifications have landed for your write, do the                                                    //\n// writes inside a write fence (set DDPServer._CurrentWriteFence to a new                                              //\n// _WriteFence, and then set a callback on the write fence.)                                                           //\n//                                                                                                                     //\n// Since our execution environment is single-threaded, this is                                                         //\n// well-defined -- a write \"has been made\" if it's returned, and an                                                    //\n// observer \"has been notified\" if its callback has returned.                                                          //\n                                                                                                                       //\nvar writeCallback = function (write, refresh, callback) {                                                              // 305\n  return function (err, result) {                                                                                      // 306\n    if (!err) {                                                                                                        // 307\n      // XXX We don't have to run this on error, right?                                                                //\n      try {                                                                                                            // 309\n        refresh();                                                                                                     // 310\n      } catch (refreshErr) {                                                                                           //\n        if (callback) {                                                                                                // 312\n          callback(refreshErr);                                                                                        // 313\n          return;                                                                                                      // 314\n        } else {                                                                                                       //\n          throw refreshErr;                                                                                            // 316\n        }                                                                                                              //\n      }                                                                                                                //\n    }                                                                                                                  //\n    write.committed();                                                                                                 // 320\n    if (callback) callback(err, result);else if (err) throw err;                                                       // 321\n  };                                                                                                                   //\n};                                                                                                                     //\n                                                                                                                       //\nvar bindEnvironmentForWrite = function (callback) {                                                                    // 328\n  return Meteor.bindEnvironment(callback, \"Mongo write\");                                                              // 329\n};                                                                                                                     //\n                                                                                                                       //\nMongoConnection.prototype._insert = function (collection_name, document, callback) {                                   // 332\n  var self = this;                                                                                                     // 334\n                                                                                                                       //\n  var sendError = function (e) {                                                                                       // 336\n    if (callback) return callback(e);                                                                                  // 337\n    throw e;                                                                                                           // 339\n  };                                                                                                                   //\n                                                                                                                       //\n  if (collection_name === \"___meteor_failure_test_collection\") {                                                       // 342\n    var e = new Error(\"Failure test\");                                                                                 // 343\n    e.expected = true;                                                                                                 // 344\n    sendError(e);                                                                                                      // 345\n    return;                                                                                                            // 346\n  }                                                                                                                    //\n                                                                                                                       //\n  if (!(LocalCollection._isPlainObject(document) && !EJSON._isCustomType(document))) {                                 // 349\n    sendError(new Error(\"Only plain objects may be inserted into MongoDB\"));                                           // 351\n    return;                                                                                                            // 353\n  }                                                                                                                    //\n                                                                                                                       //\n  var write = self._maybeBeginWrite();                                                                                 // 356\n  var refresh = function () {                                                                                          // 357\n    Meteor.refresh({ collection: collection_name, id: document._id });                                                 // 358\n  };                                                                                                                   //\n  callback = bindEnvironmentForWrite(writeCallback(write, refresh, callback));                                         // 360\n  try {                                                                                                                // 361\n    var collection = self.rawCollection(collection_name);                                                              // 362\n    collection.insert(replaceTypes(document, replaceMeteorAtomWithMongo), { safe: true }, callback);                   // 363\n  } catch (e) {                                                                                                        //\n    write.committed();                                                                                                 // 366\n    throw e;                                                                                                           // 367\n  }                                                                                                                    //\n};                                                                                                                     //\n                                                                                                                       //\n// Cause queries that may be affected by the selector to poll in this write                                            //\n// fence.                                                                                                              //\nMongoConnection.prototype._refresh = function (collectionName, selector) {                                             // 373\n  var self = this;                                                                                                     // 374\n  var refreshKey = { collection: collectionName };                                                                     // 375\n  // If we know which documents we're removing, don't poll queries that are                                            //\n  // specific to other documents. (Note that multiple notifications here should                                        //\n  // not cause multiple polls, since all our listener is doing is enqueueing a                                         //\n  // poll.)                                                                                                            //\n  var specificIds = LocalCollection._idsMatchedBySelector(selector);                                                   // 380\n  if (specificIds) {                                                                                                   // 381\n    _.each(specificIds, function (id) {                                                                                // 382\n      Meteor.refresh(_.extend({ id: id }, refreshKey));                                                                // 383\n    });                                                                                                                //\n  } else {                                                                                                             //\n    Meteor.refresh(refreshKey);                                                                                        // 386\n  }                                                                                                                    //\n};                                                                                                                     //\n                                                                                                                       //\nMongoConnection.prototype._remove = function (collection_name, selector, callback) {                                   // 390\n  var self = this;                                                                                                     // 392\n                                                                                                                       //\n  if (collection_name === \"___meteor_failure_test_collection\") {                                                       // 394\n    var e = new Error(\"Failure test\");                                                                                 // 395\n    e.expected = true;                                                                                                 // 396\n    if (callback) return callback(e);else throw e;                                                                     // 397\n  }                                                                                                                    //\n                                                                                                                       //\n  var write = self._maybeBeginWrite();                                                                                 // 403\n  var refresh = function () {                                                                                          // 404\n    self._refresh(collection_name, selector);                                                                          // 405\n  };                                                                                                                   //\n  callback = bindEnvironmentForWrite(writeCallback(write, refresh, callback));                                         // 407\n                                                                                                                       //\n  try {                                                                                                                // 409\n    var collection = self.rawCollection(collection_name);                                                              // 410\n    collection.remove(replaceTypes(selector, replaceMeteorAtomWithMongo), { safe: true }, callback);                   // 411\n  } catch (e) {                                                                                                        //\n    write.committed();                                                                                                 // 414\n    throw e;                                                                                                           // 415\n  }                                                                                                                    //\n};                                                                                                                     //\n                                                                                                                       //\nMongoConnection.prototype._dropCollection = function (collectionName, cb) {                                            // 419\n  var self = this;                                                                                                     // 420\n                                                                                                                       //\n  var write = self._maybeBeginWrite();                                                                                 // 422\n  var refresh = function () {                                                                                          // 423\n    Meteor.refresh({ collection: collectionName, id: null,                                                             // 424\n      dropCollection: true });                                                                                         // 425\n  };                                                                                                                   //\n  cb = bindEnvironmentForWrite(writeCallback(write, refresh, cb));                                                     // 427\n                                                                                                                       //\n  try {                                                                                                                // 429\n    var collection = self.rawCollection(collectionName);                                                               // 430\n    collection.drop(cb);                                                                                               // 431\n  } catch (e) {                                                                                                        //\n    write.committed();                                                                                                 // 433\n    throw e;                                                                                                           // 434\n  }                                                                                                                    //\n};                                                                                                                     //\n                                                                                                                       //\n// For testing only.  Slightly better than `c.rawDatabase().dropDatabase()`                                            //\n// because it lets the test's fence wait for it to be complete.                                                        //\nMongoConnection.prototype._dropDatabase = function (cb) {                                                              // 440\n  var self = this;                                                                                                     // 441\n                                                                                                                       //\n  var write = self._maybeBeginWrite();                                                                                 // 443\n  var refresh = function () {                                                                                          // 444\n    Meteor.refresh({ dropDatabase: true });                                                                            // 445\n  };                                                                                                                   //\n  cb = bindEnvironmentForWrite(writeCallback(write, refresh, cb));                                                     // 447\n                                                                                                                       //\n  try {                                                                                                                // 449\n    self.db.dropDatabase(cb);                                                                                          // 450\n  } catch (e) {                                                                                                        //\n    write.committed();                                                                                                 // 452\n    throw e;                                                                                                           // 453\n  }                                                                                                                    //\n};                                                                                                                     //\n                                                                                                                       //\nMongoConnection.prototype._update = function (collection_name, selector, mod, options, callback) {                     // 457\n  var self = this;                                                                                                     // 459\n                                                                                                                       //\n  if (!callback && options instanceof Function) {                                                                      // 461\n    callback = options;                                                                                                // 462\n    options = null;                                                                                                    // 463\n  }                                                                                                                    //\n                                                                                                                       //\n  if (collection_name === \"___meteor_failure_test_collection\") {                                                       // 466\n    var e = new Error(\"Failure test\");                                                                                 // 467\n    e.expected = true;                                                                                                 // 468\n    if (callback) return callback(e);else throw e;                                                                     // 469\n  }                                                                                                                    //\n                                                                                                                       //\n  // explicit safety check. null and undefined can crash the mongo                                                     //\n  // driver. Although the node driver and minimongo do 'support'                                                       //\n  // non-object modifier in that they don't crash, they are not                                                        //\n  // meaningful operations and do not do anything. Defensively throw an                                                //\n  // error here.                                                                                                       //\n  if (!mod || typeof mod !== 'object') throw new Error(\"Invalid modifier. Modifier must be an object.\");               // 480\n                                                                                                                       //\n  if (!(LocalCollection._isPlainObject(mod) && !EJSON._isCustomType(mod))) {                                           // 483\n    throw new Error(\"Only plain objects may be used as replacement\" + \" documents in MongoDB\");                        // 485\n    return;                                                                                                            // 488\n  }                                                                                                                    //\n                                                                                                                       //\n  if (!options) options = {};                                                                                          // 491\n                                                                                                                       //\n  var write = self._maybeBeginWrite();                                                                                 // 493\n  var refresh = function () {                                                                                          // 494\n    self._refresh(collection_name, selector);                                                                          // 495\n  };                                                                                                                   //\n  callback = writeCallback(write, refresh, callback);                                                                  // 497\n  try {                                                                                                                // 498\n    var collection = self.rawCollection(collection_name);                                                              // 499\n    var mongoOpts = { safe: true };                                                                                    // 500\n    // explictly enumerate options that minimongo supports                                                             //\n    if (options.upsert) mongoOpts.upsert = true;                                                                       // 502\n    if (options.multi) mongoOpts.multi = true;                                                                         // 503\n    // Lets you get a more more full result from MongoDB. Use with caution:                                            //\n    // might not work with C.upsert (as opposed to C.update({upsert:true}) or                                          //\n    // with simulated upsert.                                                                                          //\n    if (options.fullResult) mongoOpts.fullResult = true;                                                               // 507\n                                                                                                                       //\n    var mongoSelector = replaceTypes(selector, replaceMeteorAtomWithMongo);                                            // 509\n    var mongoMod = replaceTypes(mod, replaceMeteorAtomWithMongo);                                                      // 510\n                                                                                                                       //\n    var isModify = isModificationMod(mongoMod);                                                                        // 512\n    var knownId = selector._id || mod._id;                                                                             // 513\n                                                                                                                       //\n    if (options._forbidReplace && !isModify) {                                                                         // 515\n      var e = new Error(\"Invalid modifier. Replacements are forbidden.\");                                              // 516\n      if (callback) {                                                                                                  // 517\n        return callback(e);                                                                                            // 518\n      } else {                                                                                                         //\n        throw e;                                                                                                       // 520\n      }                                                                                                                //\n    }                                                                                                                  //\n                                                                                                                       //\n    if (options.upsert && !knownId && options.insertedId) {                                                            // 524\n      // XXX If we know we're using Mongo 2.6 (and this isn't a replacement)                                           //\n      //     we should be able to just use $setOnInsert instead of this                                                //\n      //     simulated upsert thing. (We can't use $setOnInsert with                                                   //\n      //     replacements because there's nowhere to write it, and $setOnInsert                                        //\n      //     can't set _id on Mongo 2.4.)                                                                              //\n      //                                                                                                               //\n      //     Also, in the future we could do a real upsert for the mongo id                                            //\n      //     generation case, if the the node mongo driver gives us back the id                                        //\n      //     of the upserted doc (which our current version does not).                                                 //\n      //                                                                                                               //\n      //     For more context, see                                                                                     //\n      //     https://github.com/meteor/meteor/issues/2278#issuecomment-64252706                                        //\n      simulateUpsertWithInsertedId(collection, mongoSelector, mongoMod, isModify, options,                             // 537\n      // This callback does not need to be bindEnvironment'ed because                                                  //\n      // simulateUpsertWithInsertedId() wraps it and then passes it through                                            //\n      function (err, result) {                                                                                         // 543\n        // If we got here via a upsert() call, then options._returnObject will                                         //\n        // be set and we should return the whole object. Otherwise, we should                                          //\n        // just return the number of affected docs to match the mongo API.                                             //\n        if (result && !options._returnObject) callback(err, result.numberAffected);else callback(err, result);         // 547\n      });                                                                                                              //\n    } else {                                                                                                           //\n      collection.update(mongoSelector, mongoMod, mongoOpts, bindEnvironmentForWrite(function (err, result, extra) {    // 554\n        if (!err) {                                                                                                    // 557\n          if (result && options._returnObject) {                                                                       // 558\n            result = { numberAffected: result };                                                                       // 559\n            // If this was an upsert() call, and we ended up                                                           //\n            // inserting a new doc and we know its id, then                                                            //\n            // return that id as well.                                                                                 //\n            if (options.upsert && knownId && !extra.updatedExisting) result.insertedId = knownId;                      // 563\n          }                                                                                                            //\n        }                                                                                                              //\n        callback(err, result);                                                                                         // 568\n      }));                                                                                                             //\n    }                                                                                                                  //\n  } catch (e) {                                                                                                        //\n    write.committed();                                                                                                 // 572\n    throw e;                                                                                                           // 573\n  }                                                                                                                    //\n};                                                                                                                     //\n                                                                                                                       //\nvar isModificationMod = function (mod) {                                                                               // 577\n  var isReplace = false;                                                                                               // 578\n  var isModify = false;                                                                                                // 579\n  for (var k in babelHelpers.sanitizeForInObject(mod)) {                                                               // 580\n    if (k.substr(0, 1) === '$') {                                                                                      // 581\n      isModify = true;                                                                                                 // 582\n    } else {                                                                                                           //\n      isReplace = true;                                                                                                // 584\n    }                                                                                                                  //\n  }                                                                                                                    //\n  if (isModify && isReplace) {                                                                                         // 587\n    throw new Error(\"Update parameter cannot have both modifier and non-modifier fields.\");                            // 588\n  }                                                                                                                    //\n  return isModify;                                                                                                     // 591\n};                                                                                                                     //\n                                                                                                                       //\nvar NUM_OPTIMISTIC_TRIES = 3;                                                                                          // 594\n                                                                                                                       //\n// exposed for testing                                                                                                 //\nMongoConnection._isCannotChangeIdError = function (err) {                                                              // 597\n  // First check for what this error looked like in Mongo 2.4.  Either of these                                        //\n  // checks should work, but just to be safe...                                                                        //\n  if (err.code === 13596) return true;                                                                                 // 600\n  if (err.err.indexOf(\"cannot change _id of a document\") === 0) return true;                                           // 602\n                                                                                                                       //\n  // Now look for what it looks like in Mongo 2.6.  We don't use the error code                                        //\n  // here, because the error code we observed it producing (16837) appears to be                                       //\n  // a far more generic error code based on examining the source.                                                      //\n  if (err.err.indexOf(\"The _id field cannot be changed\") === 0) return true;                                           // 608\n                                                                                                                       //\n  return false;                                                                                                        // 611\n};                                                                                                                     //\n                                                                                                                       //\nvar simulateUpsertWithInsertedId = function (collection, selector, mod, isModify, options, callback) {                 // 614\n  // STRATEGY:  First try doing a plain update.  If it affected 0 documents,                                           //\n  // then without affecting the database, we know we should probably do an                                             //\n  // insert.  We then do a *conditional* insert that will fail in the case                                             //\n  // of a race condition.  This conditional insert is actually an                                                      //\n  // upsert-replace with an _id, which will never successfully update an                                               //\n  // existing document.  If this upsert fails with an error saying it                                                  //\n  // couldn't change an existing _id, then we know an intervening write has                                            //\n  // caused the query to match something.  We go back to step one and repeat.                                          //\n  // Like all \"optimistic write\" schemes, we rely on the fact that it's                                                //\n  // unlikely our writes will continue to be interfered with under normal                                              //\n  // circumstances (though sufficiently heavy contention with writers                                                  //\n  // disagreeing on the existence of an object will cause writes to fail                                               //\n  // in theory).                                                                                                       //\n                                                                                                                       //\n  var newDoc;                                                                                                          // 630\n  // Run this code up front so that it fails fast if someone uses                                                      //\n  // a Mongo update operator we don't support.                                                                         //\n  if (isModify) {                                                                                                      // 633\n    // We've already run replaceTypes/replaceMeteorAtomWithMongo on                                                    //\n    // selector and mod.  We assume it doesn't matter, as far as                                                       //\n    // the behavior of modifiers is concerned, whether `_modify`                                                       //\n    // is run on EJSON or on mongo-converted EJSON.                                                                    //\n    var selectorDoc = LocalCollection._removeDollarOperators(selector);                                                // 638\n                                                                                                                       //\n    newDoc = selectorDoc;                                                                                              // 640\n                                                                                                                       //\n    // Convert dotted keys into objects. (Resolves issue #4522).                                                       //\n    _.each(newDoc, function (value, key) {                                                                             // 643\n      var trail = key.split(\".\");                                                                                      // 644\n                                                                                                                       //\n      if (trail.length > 1) {                                                                                          // 646\n        //Key is dotted. Convert it into an object.                                                                    //\n        delete newDoc[key];                                                                                            // 648\n                                                                                                                       //\n        var obj = newDoc,                                                                                              // 650\n            leaf = trail.pop();                                                                                        //\n                                                                                                                       //\n        // XXX It is not quite certain what should be done if there are clashing                                       //\n        // keys on the trail of the dotted key. For now we will just override it                                       //\n        // It wouldn't be a very sane query in the first place, but should look                                        //\n        // up what mongo does in this case.                                                                            //\n                                                                                                                       //\n        while (key = trail.shift()) {                                                                                  // 658\n          if (typeof obj[key] !== \"object\") {                                                                          // 659\n            obj[key] = {};                                                                                             // 660\n          }                                                                                                            //\n                                                                                                                       //\n          obj = obj[key];                                                                                              // 663\n        }                                                                                                              //\n                                                                                                                       //\n        obj[leaf] = value;                                                                                             // 666\n      }                                                                                                                //\n    });                                                                                                                //\n                                                                                                                       //\n    LocalCollection._modify(newDoc, mod, { isInsert: true });                                                          // 670\n  } else {                                                                                                             //\n    newDoc = mod;                                                                                                      // 672\n  }                                                                                                                    //\n                                                                                                                       //\n  var insertedId = options.insertedId; // must exist                                                                   // 675\n  var mongoOptsForUpdate = {                                                                                           // 676\n    safe: true,                                                                                                        // 677\n    multi: options.multi                                                                                               // 678\n  };                                                                                                                   //\n  var mongoOptsForInsert = {                                                                                           // 680\n    safe: true,                                                                                                        // 681\n    upsert: true                                                                                                       // 682\n  };                                                                                                                   //\n                                                                                                                       //\n  var tries = NUM_OPTIMISTIC_TRIES;                                                                                    // 685\n                                                                                                                       //\n  var doUpdate = function () {                                                                                         // 687\n    tries--;                                                                                                           // 688\n    if (!tries) {                                                                                                      // 689\n      callback(new Error(\"Upsert failed after \" + NUM_OPTIMISTIC_TRIES + \" tries.\"));                                  // 690\n    } else {                                                                                                           //\n      collection.update(selector, mod, mongoOptsForUpdate, bindEnvironmentForWrite(function (err, result) {            // 692\n        if (err) callback(err);else if (result) callback(null, {                                                       // 694\n          numberAffected: result                                                                                       // 698\n        });else doConditionalInsert();                                                                                 //\n      }));                                                                                                             //\n    }                                                                                                                  //\n  };                                                                                                                   //\n                                                                                                                       //\n  var doConditionalInsert = function () {                                                                              // 706\n    var replacementWithId = _.extend(replaceTypes({ _id: insertedId }, replaceMeteorAtomWithMongo), newDoc);           // 707\n    collection.update(selector, replacementWithId, mongoOptsForInsert, bindEnvironmentForWrite(function (err, result) {\n      if (err) {                                                                                                       // 712\n        // figure out if this is a                                                                                     //\n        // \"cannot change _id of document\" error, and                                                                  //\n        // if so, try doUpdate() again, up to 3 times.                                                                 //\n        if (MongoConnection._isCannotChangeIdError(err)) {                                                             // 716\n          doUpdate();                                                                                                  // 717\n        } else {                                                                                                       //\n          callback(err);                                                                                               // 719\n        }                                                                                                              //\n      } else {                                                                                                         //\n        callback(null, {                                                                                               // 722\n          numberAffected: result,                                                                                      // 723\n          insertedId: insertedId                                                                                       // 724\n        });                                                                                                            //\n      }                                                                                                                //\n    }));                                                                                                               //\n  };                                                                                                                   //\n                                                                                                                       //\n  doUpdate();                                                                                                          // 730\n};                                                                                                                     //\n                                                                                                                       //\n_.each([\"insert\", \"update\", \"remove\", \"dropCollection\", \"dropDatabase\"], function (method) {                           // 733\n  MongoConnection.prototype[method] = function () /* arguments */{                                                     // 734\n    var self = this;                                                                                                   // 735\n    return Meteor.wrapAsync(self[\"_\" + method]).apply(self, arguments);                                                // 736\n  };                                                                                                                   //\n});                                                                                                                    //\n                                                                                                                       //\n// XXX MongoConnection.upsert() does not return the id of the inserted document                                        //\n// unless you set it explicitly in the selector or modifier (as a replacement                                          //\n// doc).                                                                                                               //\nMongoConnection.prototype.upsert = function (collectionName, selector, mod, options, callback) {                       // 743\n  var self = this;                                                                                                     // 745\n  if (typeof options === \"function\" && !callback) {                                                                    // 746\n    callback = options;                                                                                                // 747\n    options = {};                                                                                                      // 748\n  }                                                                                                                    //\n                                                                                                                       //\n  return self.update(collectionName, selector, mod, _.extend({}, options, {                                            // 751\n    upsert: true,                                                                                                      // 753\n    _returnObject: true                                                                                                // 754\n  }), callback);                                                                                                       //\n};                                                                                                                     //\n                                                                                                                       //\nMongoConnection.prototype.find = function (collectionName, selector, options) {                                        // 758\n  var self = this;                                                                                                     // 759\n                                                                                                                       //\n  if (arguments.length === 1) selector = {};                                                                           // 761\n                                                                                                                       //\n  return new Cursor(self, new CursorDescription(collectionName, selector, options));                                   // 764\n};                                                                                                                     //\n                                                                                                                       //\nMongoConnection.prototype.findOne = function (collection_name, selector, options) {                                    // 768\n  var self = this;                                                                                                     // 770\n  if (arguments.length === 1) selector = {};                                                                           // 771\n                                                                                                                       //\n  options = options || {};                                                                                             // 774\n  options.limit = 1;                                                                                                   // 775\n  return self.find(collection_name, selector, options).fetch()[0];                                                     // 776\n};                                                                                                                     //\n                                                                                                                       //\n// We'll actually design an index API later. For now, we just pass through to                                          //\n// Mongo's, but make it synchronous.                                                                                   //\nMongoConnection.prototype._ensureIndex = function (collectionName, index, options) {                                   // 781\n  var self = this;                                                                                                     // 783\n                                                                                                                       //\n  // We expect this function to be called at startup, not from within a method,                                        //\n  // so we don't interact with the write fence.                                                                        //\n  var collection = self.rawCollection(collectionName);                                                                 // 787\n  var future = new Future();                                                                                           // 788\n  var indexName = collection.ensureIndex(index, options, future.resolver());                                           // 789\n  future.wait();                                                                                                       // 790\n};                                                                                                                     //\nMongoConnection.prototype._dropIndex = function (collectionName, index) {                                              // 792\n  var self = this;                                                                                                     // 793\n                                                                                                                       //\n  // This function is only used by test code, not within a method, so we don't                                         //\n  // interact with the write fence.                                                                                    //\n  var collection = self.rawCollection(collectionName);                                                                 // 797\n  var future = new Future();                                                                                           // 798\n  var indexName = collection.dropIndex(index, future.resolver());                                                      // 799\n  future.wait();                                                                                                       // 800\n};                                                                                                                     //\n                                                                                                                       //\n// CURSORS                                                                                                             //\n                                                                                                                       //\n// There are several classes which relate to cursors:                                                                  //\n//                                                                                                                     //\n// CursorDescription represents the arguments used to construct a cursor:                                              //\n// collectionName, selector, and (find) options.  Because it is used as a key                                          //\n// for cursor de-dup, everything in it should either be JSON-stringifiable or                                          //\n// not affect observeChanges output (eg, options.transform functions are not                                           //\n// stringifiable but do not affect observeChanges).                                                                    //\n//                                                                                                                     //\n// SynchronousCursor is a wrapper around a MongoDB cursor                                                              //\n// which includes fully-synchronous versions of forEach, etc.                                                          //\n//                                                                                                                     //\n// Cursor is the cursor object returned from find(), which implements the                                              //\n// documented Mongo.Collection cursor API.  It wraps a CursorDescription and a                                         //\n// SynchronousCursor (lazily: it doesn't contact Mongo until you call a method                                         //\n// like fetch or forEach on it).                                                                                       //\n//                                                                                                                     //\n// ObserveHandle is the \"observe handle\" returned from observeChanges. It has a                                        //\n// reference to an ObserveMultiplexer.                                                                                 //\n//                                                                                                                     //\n// ObserveMultiplexer allows multiple identical ObserveHandles to be driven by a                                       //\n// single observe driver.                                                                                              //\n//                                                                                                                     //\n// There are two \"observe drivers\" which drive ObserveMultiplexers:                                                    //\n//   - PollingObserveDriver caches the results of a query and reruns it when                                           //\n//     necessary.                                                                                                      //\n//   - OplogObserveDriver follows the Mongo operation log to directly observe                                          //\n//     database changes.                                                                                               //\n// Both implementations follow the same simple interface: when you create them,                                        //\n// they start sending observeChanges callbacks (and a ready() invocation) to                                           //\n// their ObserveMultiplexer, and you stop them by calling their stop() method.                                         //\n                                                                                                                       //\nCursorDescription = function (collectionName, selector, options) {                                                     // 836\n  var self = this;                                                                                                     // 837\n  self.collectionName = collectionName;                                                                                // 838\n  self.selector = Mongo.Collection._rewriteSelector(selector);                                                         // 839\n  self.options = options || {};                                                                                        // 840\n};                                                                                                                     //\n                                                                                                                       //\nCursor = function (mongo, cursorDescription) {                                                                         // 843\n  var self = this;                                                                                                     // 844\n                                                                                                                       //\n  self._mongo = mongo;                                                                                                 // 846\n  self._cursorDescription = cursorDescription;                                                                         // 847\n  self._synchronousCursor = null;                                                                                      // 848\n};                                                                                                                     //\n                                                                                                                       //\n_.each(['forEach', 'map', 'fetch', 'count'], function (method) {                                                       // 851\n  Cursor.prototype[method] = function () {                                                                             // 852\n    var self = this;                                                                                                   // 853\n                                                                                                                       //\n    // You can only observe a tailable cursor.                                                                         //\n    if (self._cursorDescription.options.tailable) throw new Error(\"Cannot call \" + method + \" on a tailable cursor\");  // 856\n                                                                                                                       //\n    if (!self._synchronousCursor) {                                                                                    // 859\n      self._synchronousCursor = self._mongo._createSynchronousCursor(self._cursorDescription, {                        // 860\n        // Make sure that the \"self\" argument to forEach/map callbacks is the                                          //\n        // Cursor, not the SynchronousCursor.                                                                          //\n        selfForIteration: self,                                                                                        // 864\n        useTransform: true                                                                                             // 865\n      });                                                                                                              //\n    }                                                                                                                  //\n                                                                                                                       //\n    return self._synchronousCursor[method].apply(self._synchronousCursor, arguments);                                  // 869\n  };                                                                                                                   //\n});                                                                                                                    //\n                                                                                                                       //\n// Since we don't actually have a \"nextObject\" interface, there's really no                                            //\n// reason to have a \"rewind\" interface.  All it did was make multiple calls                                            //\n// to fetch/map/forEach return nothing the second time.                                                                //\n// XXX COMPAT WITH 0.8.1                                                                                               //\nCursor.prototype.rewind = function () {};                                                                              // 878\n                                                                                                                       //\nCursor.prototype.getTransform = function () {                                                                          // 881\n  return this._cursorDescription.options.transform;                                                                    // 882\n};                                                                                                                     //\n                                                                                                                       //\n// When you call Meteor.publish() with a function that returns a Cursor, we need                                       //\n// to transmute it into the equivalent subscription.  This is the function that                                        //\n// does that.                                                                                                          //\n                                                                                                                       //\nCursor.prototype._publishCursor = function (sub) {                                                                     // 889\n  var self = this;                                                                                                     // 890\n  var collection = self._cursorDescription.collectionName;                                                             // 891\n  return Mongo.Collection._publishCursor(self, sub, collection);                                                       // 892\n};                                                                                                                     //\n                                                                                                                       //\n// Used to guarantee that publish functions return at most one cursor per                                              //\n// collection. Private, because we might later have cursors that include                                               //\n// documents from multiple collections somehow.                                                                        //\nCursor.prototype._getCollectionName = function () {                                                                    // 898\n  var self = this;                                                                                                     // 899\n  return self._cursorDescription.collectionName;                                                                       // 900\n};                                                                                                                     //\n                                                                                                                       //\nCursor.prototype.observe = function (callbacks) {                                                                      // 903\n  var self = this;                                                                                                     // 904\n  return LocalCollection._observeFromObserveChanges(self, callbacks);                                                  // 905\n};                                                                                                                     //\n                                                                                                                       //\nCursor.prototype.observeChanges = function (callbacks) {                                                               // 908\n  var self = this;                                                                                                     // 909\n  var ordered = LocalCollection._observeChangesCallbacksAreOrdered(callbacks);                                         // 910\n  return self._mongo._observeChanges(self._cursorDescription, ordered, callbacks);                                     // 911\n};                                                                                                                     //\n                                                                                                                       //\nMongoConnection.prototype._createSynchronousCursor = function (cursorDescription, options) {                           // 915\n  var self = this;                                                                                                     // 917\n  options = _.pick(options || {}, 'selfForIteration', 'useTransform');                                                 // 918\n                                                                                                                       //\n  var collection = self.rawCollection(cursorDescription.collectionName);                                               // 920\n  var cursorOptions = cursorDescription.options;                                                                       // 921\n  var mongoOptions = {                                                                                                 // 922\n    sort: cursorOptions.sort,                                                                                          // 923\n    limit: cursorOptions.limit,                                                                                        // 924\n    skip: cursorOptions.skip                                                                                           // 925\n  };                                                                                                                   //\n                                                                                                                       //\n  // Do we want a tailable cursor (which only works on capped collections)?                                            //\n  if (cursorOptions.tailable) {                                                                                        // 929\n    // We want a tailable cursor...                                                                                    //\n    mongoOptions.tailable = true;                                                                                      // 931\n    // ... and for the server to wait a bit if any getMore has no data (rather                                         //\n    // than making us put the relevant sleeps in the client)...                                                        //\n    mongoOptions.awaitdata = true;                                                                                     // 934\n    // ... and to keep querying the server indefinitely rather than just 5 times                                       //\n    // if there's no more data.                                                                                        //\n    mongoOptions.numberOfRetries = -1;                                                                                 // 937\n    // And if this is on the oplog collection and the cursor specifies a 'ts',                                         //\n    // then set the undocumented oplog replay flag, which does a special scan to                                       //\n    // find the first document (instead of creating an index on ts). This is a                                         //\n    // very hard-coded Mongo flag which only works on the oplog collection and                                         //\n    // only works with the ts field.                                                                                   //\n    if (cursorDescription.collectionName === OPLOG_COLLECTION && cursorDescription.selector.ts) {                      // 943\n      mongoOptions.oplogReplay = true;                                                                                 // 945\n    }                                                                                                                  //\n  }                                                                                                                    //\n                                                                                                                       //\n  var dbCursor = collection.find(replaceTypes(cursorDescription.selector, replaceMeteorAtomWithMongo), cursorOptions.fields, mongoOptions);\n                                                                                                                       //\n  return new SynchronousCursor(dbCursor, cursorDescription, options);                                                  // 953\n};                                                                                                                     //\n                                                                                                                       //\nvar SynchronousCursor = function (dbCursor, cursorDescription, options) {                                              // 956\n  var self = this;                                                                                                     // 957\n  options = _.pick(options || {}, 'selfForIteration', 'useTransform');                                                 // 958\n                                                                                                                       //\n  self._dbCursor = dbCursor;                                                                                           // 960\n  self._cursorDescription = cursorDescription;                                                                         // 961\n  // The \"self\" argument passed to forEach/map callbacks. If we're wrapped                                             //\n  // inside a user-visible Cursor, we want to provide the outer cursor!                                                //\n  self._selfForIteration = options.selfForIteration || self;                                                           // 964\n  if (options.useTransform && cursorDescription.options.transform) {                                                   // 965\n    self._transform = LocalCollection.wrapTransform(cursorDescription.options.transform);                              // 966\n  } else {                                                                                                             //\n    self._transform = null;                                                                                            // 969\n  }                                                                                                                    //\n                                                                                                                       //\n  // Need to specify that the callback is the first argument to nextObject,                                            //\n  // since otherwise when we try to call it with no args the driver will                                               //\n  // interpret \"undefined\" first arg as an options hash and crash.                                                     //\n  self._synchronousNextObject = Future.wrap(dbCursor.nextObject.bind(dbCursor), 0);                                    // 975\n  self._synchronousCount = Future.wrap(dbCursor.count.bind(dbCursor));                                                 // 977\n  self._visitedIds = new LocalCollection._IdMap();                                                                     // 978\n};                                                                                                                     //\n                                                                                                                       //\n_.extend(SynchronousCursor.prototype, {                                                                                // 981\n  _nextObject: function () {                                                                                           // 982\n    var self = this;                                                                                                   // 983\n                                                                                                                       //\n    while (true) {                                                                                                     // 985\n      var doc = self._synchronousNextObject().wait();                                                                  // 986\n                                                                                                                       //\n      if (!doc) return null;                                                                                           // 988\n      doc = replaceTypes(doc, replaceMongoAtomWithMeteor);                                                             // 989\n                                                                                                                       //\n      if (!self._cursorDescription.options.tailable && _.has(doc, '_id')) {                                            // 991\n        // Did Mongo give us duplicate documents in the same cursor? If so,                                            //\n        // ignore this one. (Do this before the transform, since transform might                                       //\n        // return some unrelated value.) We don't do this for tailable cursors,                                        //\n        // because we want to maintain O(1) memory usage. And if there isn't _id                                       //\n        // for some reason (maybe it's the oplog), then we don't do this either.                                       //\n        // (Be careful to do this for falsey but existing _id, though.)                                                //\n        if (self._visitedIds.has(doc._id)) continue;                                                                   // 998\n        self._visitedIds.set(doc._id, true);                                                                           // 999\n      }                                                                                                                //\n                                                                                                                       //\n      if (self._transform) doc = self._transform(doc);                                                                 // 1002\n                                                                                                                       //\n      return doc;                                                                                                      // 1005\n    }                                                                                                                  //\n  },                                                                                                                   //\n                                                                                                                       //\n  forEach: function (callback, thisArg) {                                                                              // 1009\n    var self = this;                                                                                                   // 1010\n                                                                                                                       //\n    // Get back to the beginning.                                                                                      //\n    self._rewind();                                                                                                    // 1013\n                                                                                                                       //\n    // We implement the loop ourself instead of using self._dbCursor.each,                                             //\n    // because \"each\" will call its callback outside of a fiber which makes it                                         //\n    // much more complex to make this function synchronous.                                                            //\n    var index = 0;                                                                                                     // 1018\n    while (true) {                                                                                                     // 1019\n      var doc = self._nextObject();                                                                                    // 1020\n      if (!doc) return;                                                                                                // 1021\n      callback.call(thisArg, doc, index++, self._selfForIteration);                                                    // 1022\n    }                                                                                                                  //\n  },                                                                                                                   //\n                                                                                                                       //\n  // XXX Allow overlapping callback executions if callback yields.                                                     //\n  map: function (callback, thisArg) {                                                                                  // 1027\n    var self = this;                                                                                                   // 1028\n    var res = [];                                                                                                      // 1029\n    self.forEach(function (doc, index) {                                                                               // 1030\n      res.push(callback.call(thisArg, doc, index, self._selfForIteration));                                            // 1031\n    });                                                                                                                //\n    return res;                                                                                                        // 1033\n  },                                                                                                                   //\n                                                                                                                       //\n  _rewind: function () {                                                                                               // 1036\n    var self = this;                                                                                                   // 1037\n                                                                                                                       //\n    // known to be synchronous                                                                                         //\n    self._dbCursor.rewind();                                                                                           // 1040\n                                                                                                                       //\n    self._visitedIds = new LocalCollection._IdMap();                                                                   // 1042\n  },                                                                                                                   //\n                                                                                                                       //\n  // Mostly usable for tailable cursors.                                                                               //\n  close: function () {                                                                                                 // 1046\n    var self = this;                                                                                                   // 1047\n                                                                                                                       //\n    self._dbCursor.close();                                                                                            // 1049\n  },                                                                                                                   //\n                                                                                                                       //\n  fetch: function () {                                                                                                 // 1052\n    var self = this;                                                                                                   // 1053\n    return self.map(_.identity);                                                                                       // 1054\n  },                                                                                                                   //\n                                                                                                                       //\n  count: function () {                                                                                                 // 1057\n    var self = this;                                                                                                   // 1058\n    return self._synchronousCount().wait();                                                                            // 1059\n  },                                                                                                                   //\n                                                                                                                       //\n  // This method is NOT wrapped in Cursor.                                                                             //\n  getRawObjects: function (ordered) {                                                                                  // 1063\n    var self = this;                                                                                                   // 1064\n    if (ordered) {                                                                                                     // 1065\n      return self.fetch();                                                                                             // 1066\n    } else {                                                                                                           //\n      var results = new LocalCollection._IdMap();                                                                      // 1068\n      self.forEach(function (doc) {                                                                                    // 1069\n        results.set(doc._id, doc);                                                                                     // 1070\n      });                                                                                                              //\n      return results;                                                                                                  // 1072\n    }                                                                                                                  //\n  }                                                                                                                    //\n});                                                                                                                    //\n                                                                                                                       //\nMongoConnection.prototype.tail = function (cursorDescription, docCallback) {                                           // 1077\n  var self = this;                                                                                                     // 1078\n  if (!cursorDescription.options.tailable) throw new Error(\"Can only tail a tailable cursor\");                         // 1079\n                                                                                                                       //\n  var cursor = self._createSynchronousCursor(cursorDescription);                                                       // 1082\n                                                                                                                       //\n  var stopped = false;                                                                                                 // 1084\n  var lastTS = undefined;                                                                                              // 1085\n  var loop = function () {                                                                                             // 1086\n    while (true) {                                                                                                     // 1087\n      if (stopped) return;                                                                                             // 1088\n      try {                                                                                                            // 1090\n        var doc = cursor._nextObject();                                                                                // 1091\n      } catch (err) {                                                                                                  //\n        // There's no good way to figure out if this was actually an error                                             //\n        // from Mongo. Ah well. But either way, we need to retry the cursor                                            //\n        // (unless the failure was because the observe got stopped).                                                   //\n        doc = null;                                                                                                    // 1096\n      }                                                                                                                //\n      // Since cursor._nextObject can yield, we need to check again to see if                                          //\n      // we've been stopped before calling the callback.                                                               //\n      if (stopped) return;                                                                                             // 1100\n      if (doc) {                                                                                                       // 1102\n        // If a tailable cursor contains a \"ts\" field, use it to recreate the                                          //\n        // cursor on error. (\"ts\" is a standard that Mongo uses internally for                                         //\n        // the oplog, and there's a special flag that lets you do binary search                                        //\n        // on it instead of needing to use an index.)                                                                  //\n        lastTS = doc.ts;                                                                                               // 1107\n        docCallback(doc);                                                                                              // 1108\n      } else {                                                                                                         //\n        var newSelector = _.clone(cursorDescription.selector);                                                         // 1110\n        if (lastTS) {                                                                                                  // 1111\n          newSelector.ts = { $gt: lastTS };                                                                            // 1112\n        }                                                                                                              //\n        cursor = self._createSynchronousCursor(new CursorDescription(cursorDescription.collectionName, newSelector, cursorDescription.options));\n        // Mongo failover takes many seconds.  Retry in a bit.  (Without this                                          //\n        // setTimeout, we peg the CPU at 100% and never notice the actual                                              //\n        // failover.                                                                                                   //\n        Meteor.setTimeout(loop, 100);                                                                                  // 1121\n        break;                                                                                                         // 1122\n      }                                                                                                                //\n    }                                                                                                                  //\n  };                                                                                                                   //\n                                                                                                                       //\n  Meteor.defer(loop);                                                                                                  // 1127\n                                                                                                                       //\n  return {                                                                                                             // 1129\n    stop: function () {                                                                                                // 1130\n      stopped = true;                                                                                                  // 1131\n      cursor.close();                                                                                                  // 1132\n    }                                                                                                                  //\n  };                                                                                                                   //\n};                                                                                                                     //\n                                                                                                                       //\nMongoConnection.prototype._observeChanges = function (cursorDescription, ordered, callbacks) {                         // 1137\n  var self = this;                                                                                                     // 1139\n                                                                                                                       //\n  if (cursorDescription.options.tailable) {                                                                            // 1141\n    return self._observeChangesTailable(cursorDescription, ordered, callbacks);                                        // 1142\n  }                                                                                                                    //\n                                                                                                                       //\n  // You may not filter out _id when observing changes, because the id is a core                                       //\n  // part of the observeChanges API.                                                                                   //\n  if (cursorDescription.options.fields && (cursorDescription.options.fields._id === 0 || cursorDescription.options.fields._id === false)) {\n    throw Error(\"You may not observe a cursor with {fields: {_id: 0}}\");                                               // 1150\n  }                                                                                                                    //\n                                                                                                                       //\n  var observeKey = JSON.stringify(_.extend({ ordered: ordered }, cursorDescription));                                  // 1153\n                                                                                                                       //\n  var multiplexer, observeDriver;                                                                                      // 1156\n  var firstHandle = false;                                                                                             // 1157\n                                                                                                                       //\n  // Find a matching ObserveMultiplexer, or create a new one. This next block is                                       //\n  // guaranteed to not yield (and it doesn't call anything that can observe a                                          //\n  // new query), so no other calls to this function can interleave with it.                                            //\n  Meteor._noYieldsAllowed(function () {                                                                                // 1162\n    if (_.has(self._observeMultiplexers, observeKey)) {                                                                // 1163\n      multiplexer = self._observeMultiplexers[observeKey];                                                             // 1164\n    } else {                                                                                                           //\n      firstHandle = true;                                                                                              // 1166\n      // Create a new ObserveMultiplexer.                                                                              //\n      multiplexer = new ObserveMultiplexer({                                                                           // 1168\n        ordered: ordered,                                                                                              // 1169\n        onStop: function () {                                                                                          // 1170\n          delete self._observeMultiplexers[observeKey];                                                                // 1171\n          observeDriver.stop();                                                                                        // 1172\n        }                                                                                                              //\n      });                                                                                                              //\n      self._observeMultiplexers[observeKey] = multiplexer;                                                             // 1175\n    }                                                                                                                  //\n  });                                                                                                                  //\n                                                                                                                       //\n  var observeHandle = new ObserveHandle(multiplexer, callbacks);                                                       // 1179\n                                                                                                                       //\n  if (firstHandle) {                                                                                                   // 1181\n    var matcher, sorter;                                                                                               // 1182\n    var canUseOplog = _.all([function () {                                                                             // 1183\n      // At a bare minimum, using the oplog requires us to have an oplog, to                                           //\n      // want unordered callbacks, and to not want a callback on the polls                                             //\n      // that won't happen.                                                                                            //\n      return self._oplogHandle && !ordered && !callbacks._testOnlyPollCallback;                                        // 1188\n    }, function () {                                                                                                   //\n      // We need to be able to compile the selector. Fall back to polling for                                          //\n      // some newfangled $selector that minimongo doesn't support yet.                                                 //\n      try {                                                                                                            // 1193\n        matcher = new Minimongo.Matcher(cursorDescription.selector);                                                   // 1194\n        return true;                                                                                                   // 1195\n      } catch (e) {                                                                                                    //\n        // XXX make all compilation errors MinimongoError or something                                                 //\n        //     so that this doesn't ignore unrelated exceptions                                                        //\n        return false;                                                                                                  // 1199\n      }                                                                                                                //\n    }, function () {                                                                                                   //\n      // ... and the selector itself needs to support oplog.                                                           //\n      return OplogObserveDriver.cursorSupported(cursorDescription, matcher);                                           // 1203\n    }, function () {                                                                                                   //\n      // And we need to be able to compile the sort, if any.  eg, can't be                                             //\n      // {$natural: 1}.                                                                                                //\n      if (!cursorDescription.options.sort) return true;                                                                // 1207\n      try {                                                                                                            // 1209\n        sorter = new Minimongo.Sorter(cursorDescription.options.sort, { matcher: matcher });                           // 1210\n        return true;                                                                                                   // 1212\n      } catch (e) {                                                                                                    //\n        // XXX make all compilation errors MinimongoError or something                                                 //\n        //     so that this doesn't ignore unrelated exceptions                                                        //\n        return false;                                                                                                  // 1216\n      }                                                                                                                //\n    }], function (f) {                                                                                                 //\n      return f();                                                                                                      // 1218\n    }); // invoke each function                                                                                        //\n                                                                                                                       //\n    var driverClass = canUseOplog ? OplogObserveDriver : PollingObserveDriver;                                         // 1220\n    observeDriver = new driverClass({                                                                                  // 1221\n      cursorDescription: cursorDescription,                                                                            // 1222\n      mongoHandle: self,                                                                                               // 1223\n      multiplexer: multiplexer,                                                                                        // 1224\n      ordered: ordered,                                                                                                // 1225\n      matcher: matcher, // ignored by polling                                                                          // 1226\n      sorter: sorter, // ignored by polling                                                                            // 1227\n      _testOnlyPollCallback: callbacks._testOnlyPollCallback                                                           // 1228\n    });                                                                                                                //\n                                                                                                                       //\n    // This field is only set for use in tests.                                                                        //\n    multiplexer._observeDriver = observeDriver;                                                                        // 1232\n  }                                                                                                                    //\n                                                                                                                       //\n  // Blocks until the initial adds have been sent.                                                                     //\n  multiplexer.addHandleAndSendInitialAdds(observeHandle);                                                              // 1236\n                                                                                                                       //\n  return observeHandle;                                                                                                // 1238\n};                                                                                                                     //\n                                                                                                                       //\n// Listen for the invalidation messages that will trigger us to poll the                                               //\n// database for changes. If this selector specifies specific IDs, specify them                                         //\n// here, so that updates to different specific IDs don't cause us to poll.                                             //\n// listenCallback is the same kind of (notification, complete) callback passed                                         //\n// to InvalidationCrossbar.listen.                                                                                     //\n                                                                                                                       //\nlistenAll = function (cursorDescription, listenCallback) {                                                             // 1247\n  var listeners = [];                                                                                                  // 1248\n  forEachTrigger(cursorDescription, function (trigger) {                                                               // 1249\n    listeners.push(DDPServer._InvalidationCrossbar.listen(trigger, listenCallback));                                   // 1250\n  });                                                                                                                  //\n                                                                                                                       //\n  return {                                                                                                             // 1254\n    stop: function () {                                                                                                // 1255\n      _.each(listeners, function (listener) {                                                                          // 1256\n        listener.stop();                                                                                               // 1257\n      });                                                                                                              //\n    }                                                                                                                  //\n  };                                                                                                                   //\n};                                                                                                                     //\n                                                                                                                       //\nforEachTrigger = function (cursorDescription, triggerCallback) {                                                       // 1263\n  var key = { collection: cursorDescription.collectionName };                                                          // 1264\n  var specificIds = LocalCollection._idsMatchedBySelector(cursorDescription.selector);                                 // 1265\n  if (specificIds) {                                                                                                   // 1267\n    _.each(specificIds, function (id) {                                                                                // 1268\n      triggerCallback(_.extend({ id: id }, key));                                                                      // 1269\n    });                                                                                                                //\n    triggerCallback(_.extend({ dropCollection: true, id: null }, key));                                                // 1271\n  } else {                                                                                                             //\n    triggerCallback(key);                                                                                              // 1273\n  }                                                                                                                    //\n  // Everyone cares about the database being dropped.                                                                  //\n  triggerCallback({ dropDatabase: true });                                                                             // 1276\n};                                                                                                                     //\n                                                                                                                       //\n// observeChanges for tailable cursors on capped collections.                                                          //\n//                                                                                                                     //\n// Some differences from normal cursors:                                                                               //\n//   - Will never produce anything other than 'added' or 'addedBefore'. If you                                         //\n//     do update a document that has already been produced, this will not notice                                       //\n//     it.                                                                                                             //\n//   - If you disconnect and reconnect from Mongo, it will essentially restart                                         //\n//     the query, which will lead to duplicate results. This is pretty bad,                                            //\n//     but if you include a field called 'ts' which is inserted as                                                     //\n//     new MongoInternals.MongoTimestamp(0, 0) (which is initialized to the                                            //\n//     current Mongo-style timestamp), we'll be able to find the place to                                              //\n//     restart properly. (This field is specifically understood by Mongo with an                                       //\n//     optimization which allows it to find the right place to start without                                           //\n//     an index on ts. It's how the oplog works.)                                                                      //\n//   - No callbacks are triggered synchronously with the call (there's no                                              //\n//     differentiation between \"initial data\" and \"later changes\"; everything                                          //\n//     that matches the query gets sent asynchronously).                                                               //\n//   - De-duplication is not implemented.                                                                              //\n//   - Does not yet interact with the write fence. Probably, this should work by                                       //\n//     ignoring removes (which don't work on capped collections) and updates                                           //\n//     (which don't affect tailable cursors), and just keeping track of the ID                                         //\n//     of the inserted object, and closing the write fence once you get to that                                        //\n//     ID (or timestamp?).  This doesn't work well if the document doesn't match                                       //\n//     the query, though.  On the other hand, the write fence can close                                                //\n//     immediately if it does not match the query. So if we trust minimongo                                            //\n//     enough to accurately evaluate the query against the write fence, we                                             //\n//     should be able to do this...  Of course, minimongo doesn't even support                                         //\n//     Mongo Timestamps yet.                                                                                           //\nMongoConnection.prototype._observeChangesTailable = function (cursorDescription, ordered, callbacks) {                 // 1307\n  var self = this;                                                                                                     // 1309\n                                                                                                                       //\n  // Tailable cursors only ever call added/addedBefore callbacks, so it's an                                           //\n  // error if you didn't provide them.                                                                                 //\n  if (ordered && !callbacks.addedBefore || !ordered && !callbacks.added) {                                             // 1313\n    throw new Error(\"Can't observe an \" + (ordered ? \"ordered\" : \"unordered\") + \" tailable cursor without a \" + (ordered ? \"addedBefore\" : \"added\") + \" callback\");\n  }                                                                                                                    //\n                                                                                                                       //\n  return self.tail(cursorDescription, function (doc) {                                                                 // 1320\n    var id = doc._id;                                                                                                  // 1321\n    delete doc._id;                                                                                                    // 1322\n    // The ts is an implementation detail. Hide it.                                                                    //\n    delete doc.ts;                                                                                                     // 1324\n    if (ordered) {                                                                                                     // 1325\n      callbacks.addedBefore(id, doc, null);                                                                            // 1326\n    } else {                                                                                                           //\n      callbacks.added(id, doc);                                                                                        // 1328\n    }                                                                                                                  //\n  });                                                                                                                  //\n};                                                                                                                     //\n                                                                                                                       //\n// XXX We probably need to find a better way to expose this. Right now                                                 //\n// it's only used by tests, but in fact you need it in normal                                                          //\n// operation to interact with capped collections.                                                                      //\nMongoInternals.MongoTimestamp = MongoDB.Timestamp;                                                                     // 1336\n                                                                                                                       //\nMongoInternals.Connection = MongoConnection;                                                                           // 1338\n// bindEnvironmentForWrite.                                                                                            //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"oplog_tailing.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/mongo/oplog_tailing.js                                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar Future = Npm.require('fibers/future');                                                                             // 1\n                                                                                                                       //\nOPLOG_COLLECTION = 'oplog.rs';                                                                                         // 3\n                                                                                                                       //\nvar TOO_FAR_BEHIND = process.env.METEOR_OPLOG_TOO_FAR_BEHIND || 2000;                                                  // 5\n                                                                                                                       //\nvar showTS = function (ts) {                                                                                           // 7\n  return \"Timestamp(\" + ts.getHighBits() + \", \" + ts.getLowBits() + \")\";                                               // 8\n};                                                                                                                     //\n                                                                                                                       //\nidForOp = function (op) {                                                                                              // 11\n  if (op.op === 'd') return op.o._id;else if (op.op === 'i') return op.o._id;else if (op.op === 'u') return op.o2._id;else if (op.op === 'c') throw Error(\"Operator 'c' doesn't supply an object with id: \" + EJSON.stringify(op));else throw Error(\"Unknown op: \" + EJSON.stringify(op));\n};                                                                                                                     //\n                                                                                                                       //\nOplogHandle = function (oplogUrl, dbName) {                                                                            // 25\n  var self = this;                                                                                                     // 26\n  self._oplogUrl = oplogUrl;                                                                                           // 27\n  self._dbName = dbName;                                                                                               // 28\n                                                                                                                       //\n  self._oplogLastEntryConnection = null;                                                                               // 30\n  self._oplogTailConnection = null;                                                                                    // 31\n  self._stopped = false;                                                                                               // 32\n  self._tailHandle = null;                                                                                             // 33\n  self._readyFuture = new Future();                                                                                    // 34\n  self._crossbar = new DDPServer._Crossbar({                                                                           // 35\n    factPackage: \"mongo-livedata\", factName: \"oplog-watchers\"                                                          // 36\n  });                                                                                                                  //\n  self._baseOplogSelector = {                                                                                          // 38\n    ns: new RegExp('^' + Meteor._escapeRegExp(self._dbName) + '\\\\.'),                                                  // 39\n    $or: [{ op: { $in: ['i', 'u', 'd'] } },                                                                            // 40\n    // drop collection                                                                                                 //\n    { op: 'c', 'o.drop': { $exists: true } }, { op: 'c', 'o.dropDatabase': 1 }]                                        // 43\n  };                                                                                                                   //\n                                                                                                                       //\n  // Data structures to support waitUntilCaughtUp(). Each oplog entry has a                                            //\n  // MongoTimestamp object on it (which is not the same as a Date --- it's a                                           //\n  // combination of time and an incrementing counter; see                                                              //\n  // http://docs.mongodb.org/manual/reference/bson-types/#timestamps).                                                 //\n  //                                                                                                                   //\n  // _catchingUpFutures is an array of {ts: MongoTimestamp, future: Future}                                            //\n  // objects, sorted by ascending timestamp. _lastProcessedTS is the                                                   //\n  // MongoTimestamp of the last oplog entry we've processed.                                                           //\n  //                                                                                                                   //\n  // Each time we call waitUntilCaughtUp, we take a peek at the final oplog                                            //\n  // entry in the db.  If we've already processed it (ie, it is not greater than                                       //\n  // _lastProcessedTS), waitUntilCaughtUp immediately returns. Otherwise,                                              //\n  // waitUntilCaughtUp makes a new Future and inserts it along with the final                                          //\n  // timestamp entry that it read, into _catchingUpFutures. waitUntilCaughtUp                                          //\n  // then waits on that future, which is resolved once _lastProcessedTS is                                             //\n  // incremented to be past its timestamp by the worker fiber.                                                         //\n  //                                                                                                                   //\n  // XXX use a priority queue or something else that's faster than an array                                            //\n  self._catchingUpFutures = [];                                                                                        // 66\n  self._lastProcessedTS = null;                                                                                        // 67\n                                                                                                                       //\n  self._onSkippedEntriesHook = new Hook({                                                                              // 69\n    debugPrintExceptions: \"onSkippedEntries callback\"                                                                  // 70\n  });                                                                                                                  //\n                                                                                                                       //\n  self._entryQueue = new Meteor._DoubleEndedQueue();                                                                   // 73\n  self._workerActive = false;                                                                                          // 74\n                                                                                                                       //\n  self._startTailing();                                                                                                // 76\n};                                                                                                                     //\n                                                                                                                       //\n_.extend(OplogHandle.prototype, {                                                                                      // 79\n  stop: function () {                                                                                                  // 80\n    var self = this;                                                                                                   // 81\n    if (self._stopped) return;                                                                                         // 82\n    self._stopped = true;                                                                                              // 84\n    if (self._tailHandle) self._tailHandle.stop();                                                                     // 85\n    // XXX should close connections too                                                                                //\n  },                                                                                                                   //\n  onOplogEntry: function (trigger, callback) {                                                                         // 89\n    var self = this;                                                                                                   // 90\n    if (self._stopped) throw new Error(\"Called onOplogEntry on stopped handle!\");                                      // 91\n                                                                                                                       //\n    // Calling onOplogEntry requires us to wait for the tailing to be ready.                                           //\n    self._readyFuture.wait();                                                                                          // 95\n                                                                                                                       //\n    var originalCallback = callback;                                                                                   // 97\n    callback = Meteor.bindEnvironment(function (notification) {                                                        // 98\n      // XXX can we avoid this clone by making oplog.js careful?                                                       //\n      originalCallback(EJSON.clone(notification));                                                                     // 100\n    }, function (err) {                                                                                                //\n      Meteor._debug(\"Error in oplog callback\", err.stack);                                                             // 102\n    });                                                                                                                //\n    var listenHandle = self._crossbar.listen(trigger, callback);                                                       // 104\n    return {                                                                                                           // 105\n      stop: function () {                                                                                              // 106\n        listenHandle.stop();                                                                                           // 107\n      }                                                                                                                //\n    };                                                                                                                 //\n  },                                                                                                                   //\n  // Register a callback to be invoked any time we skip oplog entries (eg,                                             //\n  // because we are too far behind).                                                                                   //\n  onSkippedEntries: function (callback) {                                                                              // 113\n    var self = this;                                                                                                   // 114\n    if (self._stopped) throw new Error(\"Called onSkippedEntries on stopped handle!\");                                  // 115\n    return self._onSkippedEntriesHook.register(callback);                                                              // 117\n  },                                                                                                                   //\n  // Calls `callback` once the oplog has been processed up to a point that is                                          //\n  // roughly \"now\": specifically, once we've processed all ops that are                                                //\n  // currently visible.                                                                                                //\n  // XXX become convinced that this is actually safe even if oplogConnection                                           //\n  // is some kind of pool                                                                                              //\n  waitUntilCaughtUp: function () {                                                                                     // 124\n    var self = this;                                                                                                   // 125\n    if (self._stopped) throw new Error(\"Called waitUntilCaughtUp on stopped handle!\");                                 // 126\n                                                                                                                       //\n    // Calling waitUntilCaughtUp requries us to wait for the oplog connection to                                       //\n    // be ready.                                                                                                       //\n    self._readyFuture.wait();                                                                                          // 131\n                                                                                                                       //\n    while (!self._stopped) {                                                                                           // 133\n      // We need to make the selector at least as restrictive as the actual                                            //\n      // tailing selector (ie, we need to specify the DB name) or else we might                                        //\n      // find a TS that won't show up in the actual tail stream.                                                       //\n      try {                                                                                                            // 137\n        var lastEntry = self._oplogLastEntryConnection.findOne(OPLOG_COLLECTION, self._baseOplogSelector, { fields: { ts: 1 }, sort: { $natural: -1 } });\n        break;                                                                                                         // 141\n      } catch (e) {                                                                                                    //\n        // During failover (eg) if we get an exception we should log and retry                                         //\n        // instead of crashing.                                                                                        //\n        Meteor._debug(\"Got exception while reading last entry: \" + e);                                                 // 145\n        Meteor._sleepForMs(100);                                                                                       // 146\n      }                                                                                                                //\n    }                                                                                                                  //\n                                                                                                                       //\n    if (self._stopped) return;                                                                                         // 150\n                                                                                                                       //\n    if (!lastEntry) {                                                                                                  // 153\n      // Really, nothing in the oplog? Well, we've processed everything.                                               //\n      return;                                                                                                          // 155\n    }                                                                                                                  //\n                                                                                                                       //\n    var ts = lastEntry.ts;                                                                                             // 158\n    if (!ts) throw Error(\"oplog entry without ts: \" + EJSON.stringify(lastEntry));                                     // 159\n                                                                                                                       //\n    if (self._lastProcessedTS && ts.lessThanOrEqual(self._lastProcessedTS)) {                                          // 162\n      // We've already caught up to here.                                                                              //\n      return;                                                                                                          // 164\n    }                                                                                                                  //\n                                                                                                                       //\n    // Insert the future into our list. Almost always, this will be at the end,                                        //\n    // but it's conceivable that if we fail over from one primary to another,                                          //\n    // the oplog entries we see will go backwards.                                                                     //\n    var insertAfter = self._catchingUpFutures.length;                                                                  // 171\n    while (insertAfter - 1 > 0 && self._catchingUpFutures[insertAfter - 1].ts.greaterThan(ts)) {                       // 172\n      insertAfter--;                                                                                                   // 174\n    }                                                                                                                  //\n    var f = new Future();                                                                                              // 176\n    self._catchingUpFutures.splice(insertAfter, 0, { ts: ts, future: f });                                             // 177\n    f.wait();                                                                                                          // 178\n  },                                                                                                                   //\n  _startTailing: function () {                                                                                         // 180\n    var self = this;                                                                                                   // 181\n    // First, make sure that we're talking to the local database.                                                      //\n    var mongodbUri = Npm.require('mongodb-uri');                                                                       // 183\n    if (mongodbUri.parse(self._oplogUrl).database !== 'local') {                                                       // 184\n      throw Error(\"$MONGO_OPLOG_URL must be set to the 'local' database of \" + \"a Mongo replica set\");                 // 185\n    }                                                                                                                  //\n                                                                                                                       //\n    // We make two separate connections to Mongo. The Node Mongo driver                                                //\n    // implements a naive round-robin connection pool: each \"connection\" is a                                          //\n    // pool of several (5 by default) TCP connections, and each request is                                             //\n    // rotated through the pools. Tailable cursor queries block on the server                                          //\n    // until there is some data to return (or until a few seconds have                                                 //\n    // passed). So if the connection pool used for tailing cursors is the same                                         //\n    // pool used for other queries, the other queries will be delayed by seconds                                       //\n    // 1/5 of the time.                                                                                                //\n    //                                                                                                                 //\n    // The tail connection will only ever be running a single tail command, so                                         //\n    // it only needs to make one underlying TCP connection.                                                            //\n    self._oplogTailConnection = new MongoConnection(self._oplogUrl, { poolSize: 1 });                                  // 200\n    // XXX better docs, but: it's to get monotonic results                                                             //\n    // XXX is it safe to say \"if there's an in flight query, just use its                                              //\n    //     results\"? I don't think so but should consider that                                                         //\n    self._oplogLastEntryConnection = new MongoConnection(self._oplogUrl, { poolSize: 1 });                             // 205\n                                                                                                                       //\n    // Now, make sure that there actually is a repl set here. If not, oplog                                            //\n    // tailing won't ever find anything!                                                                               //\n    var f = new Future();                                                                                              // 210\n    self._oplogLastEntryConnection.db.admin().command({ ismaster: 1 }, f.resolver());                                  // 211\n    var isMasterDoc = f.wait();                                                                                        // 213\n    if (!(isMasterDoc && isMasterDoc.documents && isMasterDoc.documents[0] && isMasterDoc.documents[0].setName)) {     // 214\n      throw Error(\"$MONGO_OPLOG_URL must be set to the 'local' database of \" + \"a Mongo replica set\");                 // 216\n    }                                                                                                                  //\n                                                                                                                       //\n    // Find the last oplog entry.                                                                                      //\n    var lastOplogEntry = self._oplogLastEntryConnection.findOne(OPLOG_COLLECTION, {}, { sort: { $natural: -1 }, fields: { ts: 1 } });\n                                                                                                                       //\n    var oplogSelector = _.clone(self._baseOplogSelector);                                                              // 224\n    if (lastOplogEntry) {                                                                                              // 225\n      // Start after the last entry that currently exists.                                                             //\n      oplogSelector.ts = { $gt: lastOplogEntry.ts };                                                                   // 227\n      // If there are any calls to callWhenProcessedLatest before any other                                            //\n      // oplog entries show up, allow callWhenProcessedLatest to call its                                              //\n      // callback immediately.                                                                                         //\n      self._lastProcessedTS = lastOplogEntry.ts;                                                                       // 231\n    }                                                                                                                  //\n                                                                                                                       //\n    var cursorDescription = new CursorDescription(OPLOG_COLLECTION, oplogSelector, { tailable: true });                // 234\n                                                                                                                       //\n    self._tailHandle = self._oplogTailConnection.tail(cursorDescription, function (doc) {                              // 237\n      self._entryQueue.push(doc);                                                                                      // 239\n      self._maybeStartWorker();                                                                                        // 240\n    });                                                                                                                //\n    self._readyFuture['return']();                                                                                     // 243\n  },                                                                                                                   //\n                                                                                                                       //\n  _maybeStartWorker: function () {                                                                                     // 246\n    var self = this;                                                                                                   // 247\n    if (self._workerActive) return;                                                                                    // 248\n    self._workerActive = true;                                                                                         // 250\n    Meteor.defer(function () {                                                                                         // 251\n      try {                                                                                                            // 252\n        while (!self._stopped && !self._entryQueue.isEmpty()) {                                                        // 253\n          // Are we too far behind? Just tell our observers that they need to                                          //\n          // repoll, and drop our queue.                                                                               //\n          if (self._entryQueue.length > TOO_FAR_BEHIND) {                                                              // 256\n            var lastEntry = self._entryQueue.pop();                                                                    // 257\n            self._entryQueue.clear();                                                                                  // 258\n                                                                                                                       //\n            self._onSkippedEntriesHook.each(function (callback) {                                                      // 260\n              callback();                                                                                              // 261\n              return true;                                                                                             // 262\n            });                                                                                                        //\n                                                                                                                       //\n            // Free any waitUntilCaughtUp() calls that were waiting for us to                                          //\n            // pass something that we just skipped.                                                                    //\n            self._setLastProcessedTS(lastEntry.ts);                                                                    // 267\n            continue;                                                                                                  // 268\n          }                                                                                                            //\n                                                                                                                       //\n          var doc = self._entryQueue.shift();                                                                          // 271\n                                                                                                                       //\n          if (!(doc.ns && doc.ns.length > self._dbName.length + 1 && doc.ns.substr(0, self._dbName.length + 1) === self._dbName + '.')) {\n            throw new Error(\"Unexpected ns\");                                                                          // 276\n          }                                                                                                            //\n                                                                                                                       //\n          var trigger = { collection: doc.ns.substr(self._dbName.length + 1),                                          // 279\n            dropCollection: false,                                                                                     // 280\n            dropDatabase: false,                                                                                       // 281\n            op: doc };                                                                                                 // 282\n                                                                                                                       //\n          // Is it a special command and the collection name is hidden somewhere                                       //\n          // in operator?                                                                                              //\n          if (trigger.collection === \"$cmd\") {                                                                         // 286\n            if (doc.o.dropDatabase) {                                                                                  // 287\n              delete trigger.collection;                                                                               // 288\n              trigger.dropDatabase = true;                                                                             // 289\n            } else if (_.has(doc.o, 'drop')) {                                                                         //\n              trigger.collection = doc.o.drop;                                                                         // 291\n              trigger.dropCollection = true;                                                                           // 292\n              trigger.id = null;                                                                                       // 293\n            } else {                                                                                                   //\n              throw Error(\"Unknown command \" + JSON.stringify(doc));                                                   // 295\n            }                                                                                                          //\n          } else {                                                                                                     //\n            // All other ops have an id.                                                                               //\n            trigger.id = idForOp(doc);                                                                                 // 299\n          }                                                                                                            //\n                                                                                                                       //\n          self._crossbar.fire(trigger);                                                                                // 302\n                                                                                                                       //\n          // Now that we've processed this operation, process pending                                                  //\n          // sequencers.                                                                                               //\n          if (!doc.ts) throw Error(\"oplog entry without ts: \" + EJSON.stringify(doc));                                 // 306\n          self._setLastProcessedTS(doc.ts);                                                                            // 308\n        }                                                                                                              //\n      } finally {                                                                                                      //\n        self._workerActive = false;                                                                                    // 311\n      }                                                                                                                //\n    });                                                                                                                //\n  },                                                                                                                   //\n  _setLastProcessedTS: function (ts) {                                                                                 // 315\n    var self = this;                                                                                                   // 316\n    self._lastProcessedTS = ts;                                                                                        // 317\n    while (!_.isEmpty(self._catchingUpFutures) && self._catchingUpFutures[0].ts.lessThanOrEqual(self._lastProcessedTS)) {\n      var sequencer = self._catchingUpFutures.shift();                                                                 // 321\n      sequencer.future['return']();                                                                                    // 322\n    }                                                                                                                  //\n  }                                                                                                                    //\n});                                                                                                                    //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"observe_multiplex.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/mongo/observe_multiplex.js                                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar Future = Npm.require('fibers/future');                                                                             // 1\n                                                                                                                       //\nObserveMultiplexer = function (options) {                                                                              // 3\n  var self = this;                                                                                                     // 4\n                                                                                                                       //\n  if (!options || !_.has(options, 'ordered')) throw Error(\"must specified ordered\");                                   // 6\n                                                                                                                       //\n  Package.facts && Package.facts.Facts.incrementServerFact(\"mongo-livedata\", \"observe-multiplexers\", 1);               // 9\n                                                                                                                       //\n  self._ordered = options.ordered;                                                                                     // 12\n  self._onStop = options.onStop || function () {};                                                                     // 13\n  self._queue = new Meteor._SynchronousQueue();                                                                        // 14\n  self._handles = {};                                                                                                  // 15\n  self._readyFuture = new Future();                                                                                    // 16\n  self._cache = new LocalCollection._CachingChangeObserver({                                                           // 17\n    ordered: options.ordered });                                                                                       // 18\n  // Number of addHandleAndSendInitialAdds tasks scheduled but not yet                                                 //\n  // running. removeHandle uses this to know if it's time to call the onStop                                           //\n  // callback.                                                                                                         //\n  self._addHandleTasksScheduledButNotPerformed = 0;                                                                    // 22\n                                                                                                                       //\n  _.each(self.callbackNames(), function (callbackName) {                                                               // 24\n    self[callbackName] = function () /* ... */{                                                                        // 25\n      self._applyCallback(callbackName, _.toArray(arguments));                                                         // 26\n    };                                                                                                                 //\n  });                                                                                                                  //\n};                                                                                                                     //\n                                                                                                                       //\n_.extend(ObserveMultiplexer.prototype, {                                                                               // 31\n  addHandleAndSendInitialAdds: function (handle) {                                                                     // 32\n    var self = this;                                                                                                   // 33\n                                                                                                                       //\n    // Check this before calling runTask (even though runTask does the same                                            //\n    // check) so that we don't leak an ObserveMultiplexer on error by                                                  //\n    // incrementing _addHandleTasksScheduledButNotPerformed and never                                                  //\n    // decrementing it.                                                                                                //\n    if (!self._queue.safeToRunTask()) throw new Error(\"Can't call observeChanges from an observe callback on the same query\");\n    ++self._addHandleTasksScheduledButNotPerformed;                                                                    // 42\n                                                                                                                       //\n    Package.facts && Package.facts.Facts.incrementServerFact(\"mongo-livedata\", \"observe-handles\", 1);                  // 44\n                                                                                                                       //\n    self._queue.runTask(function () {                                                                                  // 47\n      self._handles[handle._id] = handle;                                                                              // 48\n      // Send out whatever adds we have so far (whether or not we the                                                  //\n      // multiplexer is ready).                                                                                        //\n      self._sendAdds(handle);                                                                                          // 51\n      --self._addHandleTasksScheduledButNotPerformed;                                                                  // 52\n    });                                                                                                                //\n    // *outside* the task, since otherwise we'd deadlock                                                               //\n    self._readyFuture.wait();                                                                                          // 55\n  },                                                                                                                   //\n                                                                                                                       //\n  // Remove an observe handle. If it was the last observe handle, call the                                             //\n  // onStop callback; you cannot add any more observe handles after this.                                              //\n  //                                                                                                                   //\n  // This is not synchronized with polls and handle additions: this means that                                         //\n  // you can safely call it from within an observe callback, but it also means                                         //\n  // that we have to be careful when we iterate over _handles.                                                         //\n  removeHandle: function (id) {                                                                                        // 64\n    var self = this;                                                                                                   // 65\n                                                                                                                       //\n    // This should not be possible: you can only call removeHandle by having                                           //\n    // access to the ObserveHandle, which isn't returned to user code until the                                        //\n    // multiplex is ready.                                                                                             //\n    if (!self._ready()) throw new Error(\"Can't remove handles until the multiplex is ready\");                          // 70\n                                                                                                                       //\n    delete self._handles[id];                                                                                          // 73\n                                                                                                                       //\n    Package.facts && Package.facts.Facts.incrementServerFact(\"mongo-livedata\", \"observe-handles\", -1);                 // 75\n                                                                                                                       //\n    if (_.isEmpty(self._handles) && self._addHandleTasksScheduledButNotPerformed === 0) {                              // 78\n      self._stop();                                                                                                    // 80\n    }                                                                                                                  //\n  },                                                                                                                   //\n  _stop: function (options) {                                                                                          // 83\n    var self = this;                                                                                                   // 84\n    options = options || {};                                                                                           // 85\n                                                                                                                       //\n    // It shouldn't be possible for us to stop when all our handles still                                              //\n    // haven't been returned from observeChanges!                                                                      //\n    if (!self._ready() && !options.fromQueryError) throw Error(\"surprising _stop: not ready\");                         // 89\n                                                                                                                       //\n    // Call stop callback (which kills the underlying process which sends us                                           //\n    // callbacks and removes us from the connection's dictionary).                                                     //\n    self._onStop();                                                                                                    // 94\n    Package.facts && Package.facts.Facts.incrementServerFact(\"mongo-livedata\", \"observe-multiplexers\", -1);            // 95\n                                                                                                                       //\n    // Cause future addHandleAndSendInitialAdds calls to throw (but the onStop                                         //\n    // callback should make our connection forget about us).                                                           //\n    self._handles = null;                                                                                              // 100\n  },                                                                                                                   //\n                                                                                                                       //\n  // Allows all addHandleAndSendInitialAdds calls to return, once all preceding                                        //\n  // adds have been processed. Does not block.                                                                         //\n  ready: function () {                                                                                                 // 105\n    var self = this;                                                                                                   // 106\n    self._queue.queueTask(function () {                                                                                // 107\n      if (self._ready()) throw Error(\"can't make ObserveMultiplex ready twice!\");                                      // 108\n      self._readyFuture['return']();                                                                                   // 110\n    });                                                                                                                //\n  },                                                                                                                   //\n                                                                                                                       //\n  // If trying to execute the query results in an error, call this. This is                                            //\n  // intended for permanent errors, not transient network errors that could be                                         //\n  // fixed. It should only be called before ready(), because if you called ready                                       //\n  // that meant that you managed to run the query once. It will stop this                                              //\n  // ObserveMultiplex and cause addHandleAndSendInitialAdds calls (and thus                                            //\n  // observeChanges calls) to throw the error.                                                                         //\n  queryError: function (err) {                                                                                         // 120\n    var self = this;                                                                                                   // 121\n    self._queue.runTask(function () {                                                                                  // 122\n      if (self._ready()) throw Error(\"can't claim query has an error after it worked!\");                               // 123\n      self._stop({ fromQueryError: true });                                                                            // 125\n      self._readyFuture['throw'](err);                                                                                 // 126\n    });                                                                                                                //\n  },                                                                                                                   //\n                                                                                                                       //\n  // Calls \"cb\" once the effects of all \"ready\", \"addHandleAndSendInitialAdds\"                                         //\n  // and observe callbacks which came before this call have been propagated to                                         //\n  // all handles. \"ready\" must have already been called on this multiplexer.                                           //\n  onFlush: function (cb) {                                                                                             // 133\n    var self = this;                                                                                                   // 134\n    self._queue.queueTask(function () {                                                                                // 135\n      if (!self._ready()) throw Error(\"only call onFlush on a multiplexer that will be ready\");                        // 136\n      cb();                                                                                                            // 138\n    });                                                                                                                //\n  },                                                                                                                   //\n  callbackNames: function () {                                                                                         // 141\n    var self = this;                                                                                                   // 142\n    if (self._ordered) return [\"addedBefore\", \"changed\", \"movedBefore\", \"removed\"];else return [\"added\", \"changed\", \"removed\"];\n  },                                                                                                                   //\n  _ready: function () {                                                                                                // 148\n    return this._readyFuture.isResolved();                                                                             // 149\n  },                                                                                                                   //\n  _applyCallback: function (callbackName, args) {                                                                      // 151\n    var self = this;                                                                                                   // 152\n    self._queue.queueTask(function () {                                                                                // 153\n      // If we stopped in the meantime, do nothing.                                                                    //\n      if (!self._handles) return;                                                                                      // 155\n                                                                                                                       //\n      // First, apply the change to the cache.                                                                         //\n      // XXX We could make applyChange callbacks promise not to hang on to any                                         //\n      // state from their arguments (assuming that their supplied callbacks                                            //\n      // don't) and skip this clone. Currently 'changed' hangs on to state                                             //\n      // though.                                                                                                       //\n      self._cache.applyChange[callbackName].apply(null, EJSON.clone(args));                                            // 163\n                                                                                                                       //\n      // If we haven't finished the initial adds, then we should only be getting                                       //\n      // adds.                                                                                                         //\n      if (!self._ready() && (callbackName !== 'added' && callbackName !== 'addedBefore')) {                            // 167\n        throw new Error(\"Got \" + callbackName + \" during initial adds\");                                               // 169\n      }                                                                                                                //\n                                                                                                                       //\n      // Now multiplex the callbacks out to all observe handles. It's OK if                                            //\n      // these calls yield; since we're inside a task, no other use of our queue                                       //\n      // can continue until these are done. (But we do have to be careful to not                                       //\n      // use a handle that got removed, because removeHandle does not use the                                          //\n      // queue; thus, we iterate over an array of keys that we control.)                                               //\n      _.each(_.keys(self._handles), function (handleId) {                                                              // 177\n        var handle = self._handles && self._handles[handleId];                                                         // 178\n        if (!handle) return;                                                                                           // 179\n        var callback = handle['_' + callbackName];                                                                     // 181\n        // clone arguments so that callbacks can mutate their arguments                                                //\n        callback && callback.apply(null, EJSON.clone(args));                                                           // 183\n      });                                                                                                              //\n    });                                                                                                                //\n  },                                                                                                                   //\n                                                                                                                       //\n  // Sends initial adds to a handle. It should only be called from within a task                                       //\n  // (the task that is processing the addHandleAndSendInitialAdds call). It                                            //\n  // synchronously invokes the handle's added or addedBefore; there's no need to                                       //\n  // flush the queue afterwards to ensure that the callbacks get out.                                                  //\n  _sendAdds: function (handle) {                                                                                       // 192\n    var self = this;                                                                                                   // 193\n    if (self._queue.safeToRunTask()) throw Error(\"_sendAdds may only be called from within a task!\");                  // 194\n    var add = self._ordered ? handle._addedBefore : handle._added;                                                     // 196\n    if (!add) return;                                                                                                  // 197\n    // note: docs may be an _IdMap or an OrderedDict                                                                   //\n    self._cache.docs.forEach(function (doc, id) {                                                                      // 200\n      if (!_.has(self._handles, handle._id)) throw Error(\"handle got removed before sending initial adds!\");           // 201\n      var fields = EJSON.clone(doc);                                                                                   // 203\n      delete fields._id;                                                                                               // 204\n      if (self._ordered) add(id, fields, null); // we're going in order, so add at end                                 // 205\n      else add(id, fields);                                                                                            //\n    });                                                                                                                //\n  }                                                                                                                    //\n});                                                                                                                    //\n                                                                                                                       //\nvar nextObserveHandleId = 1;                                                                                           // 214\nObserveHandle = function (multiplexer, callbacks) {                                                                    // 215\n  var self = this;                                                                                                     // 216\n  // The end user is only supposed to call stop().  The other fields are                                               //\n  // accessible to the multiplexer, though.                                                                            //\n  self._multiplexer = multiplexer;                                                                                     // 219\n  _.each(multiplexer.callbackNames(), function (name) {                                                                // 220\n    if (callbacks[name]) {                                                                                             // 221\n      self['_' + name] = callbacks[name];                                                                              // 222\n    } else if (name === \"addedBefore\" && callbacks.added) {                                                            //\n      // Special case: if you specify \"added\" and \"movedBefore\", you get an                                            //\n      // ordered observe where for some reason you don't get ordering data on                                          //\n      // the adds.  I dunno, we wrote tests for it, there must have been a                                             //\n      // reason.                                                                                                       //\n      self._addedBefore = function (id, fields, before) {                                                              // 228\n        callbacks.added(id, fields);                                                                                   // 229\n      };                                                                                                               //\n    }                                                                                                                  //\n  });                                                                                                                  //\n  self._stopped = false;                                                                                               // 233\n  self._id = nextObserveHandleId++;                                                                                    // 234\n};                                                                                                                     //\nObserveHandle.prototype.stop = function () {                                                                           // 236\n  var self = this;                                                                                                     // 237\n  if (self._stopped) return;                                                                                           // 238\n  self._stopped = true;                                                                                                // 240\n  self._multiplexer.removeHandle(self._id);                                                                            // 241\n};                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"doc_fetcher.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/mongo/doc_fetcher.js                                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar Fiber = Npm.require('fibers');                                                                                     // 1\nvar Future = Npm.require('fibers/future');                                                                             // 2\n                                                                                                                       //\nDocFetcher = function (mongoConnection) {                                                                              // 4\n  var self = this;                                                                                                     // 5\n  self._mongoConnection = mongoConnection;                                                                             // 6\n  // Map from cache key -> [callback]                                                                                  //\n  self._callbacksForCacheKey = {};                                                                                     // 8\n};                                                                                                                     //\n                                                                                                                       //\n_.extend(DocFetcher.prototype, {                                                                                       // 11\n  // Fetches document \"id\" from collectionName, returning it or null if not                                            //\n  // found.                                                                                                            //\n  //                                                                                                                   //\n  // If you make multiple calls to fetch() with the same cacheKey (a string),                                          //\n  // DocFetcher may assume that they all return the same document. (It does                                            //\n  // not check to see if collectionName/id match.)                                                                     //\n  //                                                                                                                   //\n  // You may assume that callback is never called synchronously (and in fact                                           //\n  // OplogObserveDriver does so).                                                                                      //\n  fetch: function (collectionName, id, cacheKey, callback) {                                                           // 21\n    var self = this;                                                                                                   // 22\n                                                                                                                       //\n    check(collectionName, String);                                                                                     // 24\n    // id is some sort of scalar                                                                                       //\n    check(cacheKey, String);                                                                                           // 26\n                                                                                                                       //\n    // If there's already an in-progress fetch for this cache key, yield until                                         //\n    // it's done and return whatever it returns.                                                                       //\n    if (_.has(self._callbacksForCacheKey, cacheKey)) {                                                                 // 30\n      self._callbacksForCacheKey[cacheKey].push(callback);                                                             // 31\n      return;                                                                                                          // 32\n    }                                                                                                                  //\n                                                                                                                       //\n    var callbacks = self._callbacksForCacheKey[cacheKey] = [callback];                                                 // 35\n                                                                                                                       //\n    Fiber(function () {                                                                                                // 37\n      try {                                                                                                            // 38\n        var doc = self._mongoConnection.findOne(collectionName, { _id: id }) || null;                                  // 39\n        // Return doc to all relevant callbacks. Note that this array can                                              //\n        // continue to grow during callback excecution.                                                                //\n        while (!_.isEmpty(callbacks)) {                                                                                // 43\n          // Clone the document so that the various calls to fetch don't return                                        //\n          // objects that are intertwingled with each other. Clone before                                              //\n          // popping the future, so that if clone throws, the error gets passed                                        //\n          // to the next callback.                                                                                     //\n          var clonedDoc = EJSON.clone(doc);                                                                            // 48\n          callbacks.pop()(null, clonedDoc);                                                                            // 49\n        }                                                                                                              //\n      } catch (e) {                                                                                                    //\n        while (!_.isEmpty(callbacks)) {                                                                                // 52\n          callbacks.pop()(e);                                                                                          // 53\n        }                                                                                                              //\n      } finally {                                                                                                      //\n        // XXX consider keeping the doc around for a period of time before                                             //\n        // removing from the cache                                                                                     //\n        delete self._callbacksForCacheKey[cacheKey];                                                                   // 58\n      }                                                                                                                //\n    }).run();                                                                                                          //\n  }                                                                                                                    //\n});                                                                                                                    //\n                                                                                                                       //\nMongoTest.DocFetcher = DocFetcher;                                                                                     // 64\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"polling_observe_driver.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/mongo/polling_observe_driver.js                                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nPollingObserveDriver = function (options) {                                                                            // 1\n  var self = this;                                                                                                     // 2\n                                                                                                                       //\n  self._cursorDescription = options.cursorDescription;                                                                 // 4\n  self._mongoHandle = options.mongoHandle;                                                                             // 5\n  self._ordered = options.ordered;                                                                                     // 6\n  self._multiplexer = options.multiplexer;                                                                             // 7\n  self._stopCallbacks = [];                                                                                            // 8\n  self._stopped = false;                                                                                               // 9\n                                                                                                                       //\n  self._synchronousCursor = self._mongoHandle._createSynchronousCursor(self._cursorDescription);                       // 11\n                                                                                                                       //\n  // previous results snapshot.  on each poll cycle, diffs against                                                     //\n  // results drives the callbacks.                                                                                     //\n  self._results = null;                                                                                                // 16\n                                                                                                                       //\n  // The number of _pollMongo calls that have been added to self._taskQueue but                                        //\n  // have not started running. Used to make sure we never schedule more than one                                       //\n  // _pollMongo (other than possibly the one that is currently running). It's                                          //\n  // also used by _suspendPolling to pretend there's a poll scheduled. Usually,                                        //\n  // it's either 0 (for \"no polls scheduled other than maybe one currently                                             //\n  // running\") or 1 (for \"a poll scheduled that isn't running yet\"), but it can                                        //\n  // also be 2 if incremented by _suspendPolling.                                                                      //\n  self._pollsScheduledButNotStarted = 0;                                                                               // 25\n  self._pendingWrites = []; // people to notify when polling completes                                                 // 26\n                                                                                                                       //\n  // Make sure to create a separately throttled function for each                                                      //\n  // PollingObserveDriver object.                                                                                      //\n  self._ensurePollIsScheduled = _.throttle(self._unthrottledEnsurePollIsScheduled, 50 /* ms */);                       // 30\n                                                                                                                       //\n  // XXX figure out if we still need a queue                                                                           //\n  self._taskQueue = new Meteor._SynchronousQueue();                                                                    // 34\n                                                                                                                       //\n  var listenersHandle = listenAll(self._cursorDescription, function (notification) {                                   // 36\n    // When someone does a transaction that might affect us, schedule a poll                                           //\n    // of the database. If that transaction happens inside of a write fence,                                           //\n    // block the fence until we've polled and notified observers.                                                      //\n    var fence = DDPServer._CurrentWriteFence.get();                                                                    // 41\n    if (fence) self._pendingWrites.push(fence.beginWrite());                                                           // 42\n    // Ensure a poll is scheduled... but if we already know that one is,                                               //\n    // don't hit the throttled _ensurePollIsScheduled function (which might                                            //\n    // lead to us calling it unnecessarily in 50ms).                                                                   //\n    if (self._pollsScheduledButNotStarted === 0) self._ensurePollIsScheduled();                                        // 47\n  });                                                                                                                  //\n  self._stopCallbacks.push(function () {                                                                               // 51\n    listenersHandle.stop();                                                                                            // 51\n  });                                                                                                                  //\n                                                                                                                       //\n  // every once and a while, poll even if we don't think we're dirty, for                                              //\n  // eventual consistency with database writes from outside the Meteor                                                 //\n  // universe.                                                                                                         //\n  //                                                                                                                   //\n  // For testing, there's an undocumented callback argument to observeChanges                                          //\n  // which disables time-based polling and gets called at the beginning of each                                        //\n  // poll.                                                                                                             //\n  if (options._testOnlyPollCallback) {                                                                                 // 60\n    self._testOnlyPollCallback = options._testOnlyPollCallback;                                                        // 61\n  } else {                                                                                                             //\n    var pollingInterval = self._cursorDescription.options._pollingInterval || 10 * 1000;                               // 63\n    var intervalHandle = Meteor.setInterval(_.bind(self._ensurePollIsScheduled, self), pollingInterval);               // 64\n    self._stopCallbacks.push(function () {                                                                             // 66\n      Meteor.clearInterval(intervalHandle);                                                                            // 67\n    });                                                                                                                //\n  }                                                                                                                    //\n                                                                                                                       //\n  // Make sure we actually poll soon!                                                                                  //\n  self._unthrottledEnsurePollIsScheduled();                                                                            // 72\n                                                                                                                       //\n  Package.facts && Package.facts.Facts.incrementServerFact(\"mongo-livedata\", \"observe-drivers-polling\", 1);            // 74\n};                                                                                                                     //\n                                                                                                                       //\n_.extend(PollingObserveDriver.prototype, {                                                                             // 78\n  // This is always called through _.throttle (except once at startup).                                                //\n  _unthrottledEnsurePollIsScheduled: function () {                                                                     // 80\n    var self = this;                                                                                                   // 81\n    if (self._pollsScheduledButNotStarted > 0) return;                                                                 // 82\n    ++self._pollsScheduledButNotStarted;                                                                               // 84\n    self._taskQueue.queueTask(function () {                                                                            // 85\n      self._pollMongo();                                                                                               // 86\n    });                                                                                                                //\n  },                                                                                                                   //\n                                                                                                                       //\n  // test-only interface for controlling polling.                                                                      //\n  //                                                                                                                   //\n  // _suspendPolling blocks until any currently running and scheduled polls are                                        //\n  // done, and prevents any further polls from being scheduled. (new                                                   //\n  // ObserveHandles can be added and receive their initial added callbacks,                                            //\n  // though.)                                                                                                          //\n  //                                                                                                                   //\n  // _resumePolling immediately polls, and allows further polls to occur.                                              //\n  _suspendPolling: function () {                                                                                       // 98\n    var self = this;                                                                                                   // 99\n    // Pretend that there's another poll scheduled (which will prevent                                                 //\n    // _ensurePollIsScheduled from queueing any more polls).                                                           //\n    ++self._pollsScheduledButNotStarted;                                                                               // 102\n    // Now block until all currently running or scheduled polls are done.                                              //\n    self._taskQueue.runTask(function () {});                                                                           // 104\n                                                                                                                       //\n    // Confirm that there is only one \"poll\" (the fake one we're pretending to                                         //\n    // have) scheduled.                                                                                                //\n    if (self._pollsScheduledButNotStarted !== 1) throw new Error(\"_pollsScheduledButNotStarted is \" + self._pollsScheduledButNotStarted);\n  },                                                                                                                   //\n  _resumePolling: function () {                                                                                        // 112\n    var self = this;                                                                                                   // 113\n    // We should be in the same state as in the end of _suspendPolling.                                                //\n    if (self._pollsScheduledButNotStarted !== 1) throw new Error(\"_pollsScheduledButNotStarted is \" + self._pollsScheduledButNotStarted);\n    // Run a poll synchronously (which will counteract the                                                             //\n    // ++_pollsScheduledButNotStarted from _suspendPolling).                                                           //\n    self._taskQueue.runTask(function () {                                                                              // 120\n      self._pollMongo();                                                                                               // 121\n    });                                                                                                                //\n  },                                                                                                                   //\n                                                                                                                       //\n  _pollMongo: function () {                                                                                            // 125\n    var self = this;                                                                                                   // 126\n    --self._pollsScheduledButNotStarted;                                                                               // 127\n                                                                                                                       //\n    if (self._stopped) return;                                                                                         // 129\n                                                                                                                       //\n    var first = false;                                                                                                 // 132\n    var oldResults = self._results;                                                                                    // 133\n    if (!oldResults) {                                                                                                 // 134\n      first = true;                                                                                                    // 135\n      // XXX maybe use OrderedDict instead?                                                                            //\n      oldResults = self._ordered ? [] : new LocalCollection._IdMap();                                                  // 137\n    }                                                                                                                  //\n                                                                                                                       //\n    self._testOnlyPollCallback && self._testOnlyPollCallback();                                                        // 140\n                                                                                                                       //\n    // Save the list of pending writes which this round will commit.                                                   //\n    var writesForCycle = self._pendingWrites;                                                                          // 143\n    self._pendingWrites = [];                                                                                          // 144\n                                                                                                                       //\n    // Get the new query results. (This yields.)                                                                       //\n    try {                                                                                                              // 147\n      var newResults = self._synchronousCursor.getRawObjects(self._ordered);                                           // 148\n    } catch (e) {                                                                                                      //\n      if (first && typeof e.code === 'number') {                                                                       // 150\n        // This is an error document sent to us by mongod, not a connection                                            //\n        // error generated by the client. And we've never seen this query work                                         //\n        // successfully. Probably it's a bad selector or something, so we should                                       //\n        // NOT retry. Instead, we should halt the observe (which ends up calling                                       //\n        // `stop` on us).                                                                                              //\n        self._multiplexer.queryError(new Error(\"Exception while polling query \" + JSON.stringify(self._cursorDescription) + \": \" + e.message));\n        return;                                                                                                        // 160\n      }                                                                                                                //\n                                                                                                                       //\n      // getRawObjects can throw if we're having trouble talking to the                                                //\n      // database.  That's fine --- we will repoll later anyway. But we should                                         //\n      // make sure not to lose track of this cycle's writes.                                                           //\n      // (It also can throw if there's just something invalid about this query;                                        //\n      // unfortunately the ObserveDriver API doesn't provide a good way to                                             //\n      // \"cancel\" the observe from the inside in this case.                                                            //\n      Array.prototype.push.apply(self._pendingWrites, writesForCycle);                                                 // 169\n      Meteor._debug(\"Exception while polling query \" + JSON.stringify(self._cursorDescription) + \": \" + e.stack);      // 170\n      return;                                                                                                          // 172\n    }                                                                                                                  //\n                                                                                                                       //\n    // Run diffs.                                                                                                      //\n    if (!self._stopped) {                                                                                              // 176\n      LocalCollection._diffQueryChanges(self._ordered, oldResults, newResults, self._multiplexer);                     // 177\n    }                                                                                                                  //\n                                                                                                                       //\n    // Signals the multiplexer to allow all observeChanges calls that share this                                       //\n    // multiplexer to return. (This happens asynchronously, via the                                                    //\n    // multiplexer's queue.)                                                                                           //\n    if (first) self._multiplexer.ready();                                                                              // 184\n                                                                                                                       //\n    // Replace self._results atomically.  (This assignment is what makes `first`                                       //\n    // stay through on the next cycle, so we've waited until after we've                                               //\n    // committed to ready-ing the multiplexer.)                                                                        //\n    self._results = newResults;                                                                                        // 190\n                                                                                                                       //\n    // Once the ObserveMultiplexer has processed everything we've done in this                                         //\n    // round, mark all the writes which existed before this call as                                                    //\n    // commmitted. (If new writes have shown up in the meantime, there'll                                              //\n    // already be another _pollMongo task scheduled.)                                                                  //\n    self._multiplexer.onFlush(function () {                                                                            // 196\n      _.each(writesForCycle, function (w) {                                                                            // 197\n        w.committed();                                                                                                 // 198\n      });                                                                                                              //\n    });                                                                                                                //\n  },                                                                                                                   //\n                                                                                                                       //\n  stop: function () {                                                                                                  // 203\n    var self = this;                                                                                                   // 204\n    self._stopped = true;                                                                                              // 205\n    _.each(self._stopCallbacks, function (c) {                                                                         // 206\n      c();                                                                                                             // 206\n    });                                                                                                                //\n    // Release any write fences that are waiting on us.                                                                //\n    _.each(self._pendingWrites, function (w) {                                                                         // 208\n      w.committed();                                                                                                   // 209\n    });                                                                                                                //\n    Package.facts && Package.facts.Facts.incrementServerFact(\"mongo-livedata\", \"observe-drivers-polling\", -1);         // 211\n  }                                                                                                                    //\n});                                                                                                                    //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"oplog_observe_driver.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/mongo/oplog_observe_driver.js                                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar Fiber = Npm.require('fibers');                                                                                     // 1\nvar Future = Npm.require('fibers/future');                                                                             // 2\n                                                                                                                       //\nvar PHASE = {                                                                                                          // 4\n  QUERYING: \"QUERYING\",                                                                                                // 5\n  FETCHING: \"FETCHING\",                                                                                                // 6\n  STEADY: \"STEADY\"                                                                                                     // 7\n};                                                                                                                     //\n                                                                                                                       //\n// Exception thrown by _needToPollQuery which unrolls the stack up to the                                              //\n// enclosing call to finishIfNeedToPollQuery.                                                                          //\nvar SwitchedToQuery = function () {};                                                                                  // 12\nvar finishIfNeedToPollQuery = function (f) {                                                                           // 13\n  return function () {                                                                                                 // 14\n    try {                                                                                                              // 15\n      f.apply(this, arguments);                                                                                        // 16\n    } catch (e) {                                                                                                      //\n      if (!(e instanceof SwitchedToQuery)) throw e;                                                                    // 18\n    }                                                                                                                  //\n  };                                                                                                                   //\n};                                                                                                                     //\n                                                                                                                       //\nvar currentId = 0;                                                                                                     // 24\n                                                                                                                       //\n// OplogObserveDriver is an alternative to PollingObserveDriver which follows                                          //\n// the Mongo operation log instead of just re-polling the query. It obeys the                                          //\n// same simple interface: constructing it starts sending observeChanges                                                //\n// callbacks (and a ready() invocation) to the ObserveMultiplexer, and you stop                                        //\n// it by calling the stop() method.                                                                                    //\nOplogObserveDriver = function (options) {                                                                              // 31\n  var self = this;                                                                                                     // 32\n  self._usesOplog = true; // tests look at this                                                                        // 33\n                                                                                                                       //\n  self._id = currentId;                                                                                                // 35\n  currentId++;                                                                                                         // 36\n                                                                                                                       //\n  self._cursorDescription = options.cursorDescription;                                                                 // 38\n  self._mongoHandle = options.mongoHandle;                                                                             // 39\n  self._multiplexer = options.multiplexer;                                                                             // 40\n                                                                                                                       //\n  if (options.ordered) {                                                                                               // 42\n    throw Error(\"OplogObserveDriver only supports unordered observeChanges\");                                          // 43\n  }                                                                                                                    //\n                                                                                                                       //\n  var sorter = options.sorter;                                                                                         // 46\n  // We don't support $near and other geo-queries so it's OK to initialize the                                         //\n  // comparator only once in the constructor.                                                                          //\n  var comparator = sorter && sorter.getComparator();                                                                   // 49\n                                                                                                                       //\n  if (options.cursorDescription.options.limit) {                                                                       // 51\n    // There are several properties ordered driver implements:                                                         //\n    // - _limit is a positive number                                                                                   //\n    // - _comparator is a function-comparator by which the query is ordered                                            //\n    // - _unpublishedBuffer is non-null Min/Max Heap,                                                                  //\n    //                      the empty buffer in STEADY phase implies that the                                          //\n    //                      everything that matches the queries selector fits                                          //\n    //                      into published set.                                                                        //\n    // - _published - Min Heap (also implements IdMap methods)                                                         //\n                                                                                                                       //\n    var heapOptions = { IdMap: LocalCollection._IdMap };                                                               // 61\n    self._limit = self._cursorDescription.options.limit;                                                               // 62\n    self._comparator = comparator;                                                                                     // 63\n    self._sorter = sorter;                                                                                             // 64\n    self._unpublishedBuffer = new MinMaxHeap(comparator, heapOptions);                                                 // 65\n    // We need something that can find Max value in addition to IdMap interface                                        //\n    self._published = new MaxHeap(comparator, heapOptions);                                                            // 67\n  } else {                                                                                                             //\n    self._limit = 0;                                                                                                   // 69\n    self._comparator = null;                                                                                           // 70\n    self._sorter = null;                                                                                               // 71\n    self._unpublishedBuffer = null;                                                                                    // 72\n    self._published = new LocalCollection._IdMap();                                                                    // 73\n  }                                                                                                                    //\n                                                                                                                       //\n  // Indicates if it is safe to insert a new document at the end of the buffer                                         //\n  // for this query. i.e. it is known that there are no documents matching the                                         //\n  // selector those are not in published or buffer.                                                                    //\n  self._safeAppendToBuffer = false;                                                                                    // 79\n                                                                                                                       //\n  self._stopped = false;                                                                                               // 81\n  self._stopHandles = [];                                                                                              // 82\n                                                                                                                       //\n  Package.facts && Package.facts.Facts.incrementServerFact(\"mongo-livedata\", \"observe-drivers-oplog\", 1);              // 84\n                                                                                                                       //\n  self._registerPhaseChange(PHASE.QUERYING);                                                                           // 87\n                                                                                                                       //\n  var selector = self._cursorDescription.selector;                                                                     // 89\n  self._matcher = options.matcher;                                                                                     // 90\n  var projection = self._cursorDescription.options.fields || {};                                                       // 91\n  self._projectionFn = LocalCollection._compileProjection(projection);                                                 // 92\n  // Projection function, result of combining important fields for selector and                                        //\n  // existing fields projection                                                                                        //\n  self._sharedProjection = self._matcher.combineIntoProjection(projection);                                            // 95\n  if (sorter) self._sharedProjection = sorter.combineIntoProjection(self._sharedProjection);                           // 96\n  self._sharedProjectionFn = LocalCollection._compileProjection(self._sharedProjection);                               // 98\n                                                                                                                       //\n  self._needToFetch = new LocalCollection._IdMap();                                                                    // 101\n  self._currentlyFetching = null;                                                                                      // 102\n  self._fetchGeneration = 0;                                                                                           // 103\n                                                                                                                       //\n  self._requeryWhenDoneThisQuery = false;                                                                              // 105\n  self._writesToCommitWhenWeReachSteady = [];                                                                          // 106\n                                                                                                                       //\n  // If the oplog handle tells us that it skipped some entries (because it got                                         //\n  // behind, say), re-poll.                                                                                            //\n  self._stopHandles.push(self._mongoHandle._oplogHandle.onSkippedEntries(finishIfNeedToPollQuery(function () {         // 110\n    self._needToPollQuery();                                                                                           // 112\n  })));                                                                                                                //\n                                                                                                                       //\n  forEachTrigger(self._cursorDescription, function (trigger) {                                                         // 116\n    self._stopHandles.push(self._mongoHandle._oplogHandle.onOplogEntry(trigger, function (notification) {              // 117\n      Meteor._noYieldsAllowed(finishIfNeedToPollQuery(function () {                                                    // 119\n        var op = notification.op;                                                                                      // 120\n        if (notification.dropCollection || notification.dropDatabase) {                                                // 121\n          // Note: this call is not allowed to block on anything (especially                                           //\n          // on waiting for oplog entries to catch up) because that will block                                         //\n          // onOplogEntry!                                                                                             //\n          self._needToPollQuery();                                                                                     // 125\n        } else {                                                                                                       //\n          // All other operators should be handled depending on phase                                                  //\n          if (self._phase === PHASE.QUERYING) self._handleOplogEntryQuerying(op);else self._handleOplogEntrySteadyOrFetching(op);\n        }                                                                                                              //\n      }));                                                                                                             //\n    }));                                                                                                               //\n  });                                                                                                                  //\n                                                                                                                       //\n  // XXX ordering w.r.t. everything else?                                                                              //\n  self._stopHandles.push(listenAll(self._cursorDescription, function (notification) {                                  // 139\n    // If we're not in a pre-fire write fence, we don't have to do anything.                                           //\n    var fence = DDPServer._CurrentWriteFence.get();                                                                    // 142\n    if (!fence || fence.fired) return;                                                                                 // 143\n                                                                                                                       //\n    if (fence._oplogObserveDrivers) {                                                                                  // 146\n      fence._oplogObserveDrivers[self._id] = self;                                                                     // 147\n      return;                                                                                                          // 148\n    }                                                                                                                  //\n                                                                                                                       //\n    fence._oplogObserveDrivers = {};                                                                                   // 151\n    fence._oplogObserveDrivers[self._id] = self;                                                                       // 152\n                                                                                                                       //\n    fence.onBeforeFire(function () {                                                                                   // 154\n      var drivers = fence._oplogObserveDrivers;                                                                        // 155\n      delete fence._oplogObserveDrivers;                                                                               // 156\n                                                                                                                       //\n      // This fence cannot fire until we've caught up to \"this point\" in the                                           //\n      // oplog, and all observers made it back to the steady state.                                                    //\n      self._mongoHandle._oplogHandle.waitUntilCaughtUp();                                                              // 160\n                                                                                                                       //\n      _.each(drivers, function (driver) {                                                                              // 162\n        if (driver._stopped) return;                                                                                   // 163\n                                                                                                                       //\n        var write = fence.beginWrite();                                                                                // 166\n        if (driver._phase === PHASE.STEADY) {                                                                          // 167\n          // Make sure that all of the callbacks have made it through the                                              //\n          // multiplexer and been delivered to ObserveHandles before committing                                        //\n          // writes.                                                                                                   //\n          driver._multiplexer.onFlush(function () {                                                                    // 171\n            write.committed();                                                                                         // 172\n          });                                                                                                          //\n        } else {                                                                                                       //\n          driver._writesToCommitWhenWeReachSteady.push(write);                                                         // 175\n        }                                                                                                              //\n      });                                                                                                              //\n    });                                                                                                                //\n  }));                                                                                                                 //\n                                                                                                                       //\n  // When Mongo fails over, we need to repoll the query, in case we processed an                                       //\n  // oplog entry that got rolled back.                                                                                 //\n  self._stopHandles.push(self._mongoHandle._onFailover(finishIfNeedToPollQuery(function () {                           // 184\n    self._needToPollQuery();                                                                                           // 186\n  })));                                                                                                                //\n                                                                                                                       //\n  // Give _observeChanges a chance to add the new ObserveHandle to our                                                 //\n  // multiplexer, so that the added calls get streamed.                                                                //\n  Meteor.defer(finishIfNeedToPollQuery(function () {                                                                   // 191\n    self._runInitialQuery();                                                                                           // 192\n  }));                                                                                                                 //\n};                                                                                                                     //\n                                                                                                                       //\n_.extend(OplogObserveDriver.prototype, {                                                                               // 196\n  _addPublished: function (id, doc) {                                                                                  // 197\n    var self = this;                                                                                                   // 198\n    Meteor._noYieldsAllowed(function () {                                                                              // 199\n      var fields = _.clone(doc);                                                                                       // 200\n      delete fields._id;                                                                                               // 201\n      self._published.set(id, self._sharedProjectionFn(doc));                                                          // 202\n      self._multiplexer.added(id, self._projectionFn(fields));                                                         // 203\n                                                                                                                       //\n      // After adding this document, the published set might be overflowed                                             //\n      // (exceeding capacity specified by limit). If so, push the maximum                                              //\n      // element to the buffer, we might want to save it in memory to reduce the                                       //\n      // amount of Mongo lookups in the future.                                                                        //\n      if (self._limit && self._published.size() > self._limit) {                                                       // 209\n        // XXX in theory the size of published is no more than limit+1                                                 //\n        if (self._published.size() !== self._limit + 1) {                                                              // 211\n          throw new Error(\"After adding to published, \" + (self._published.size() - self._limit) + \" documents are overflowing the set\");\n        }                                                                                                              //\n                                                                                                                       //\n        var overflowingDocId = self._published.maxElementId();                                                         // 217\n        var overflowingDoc = self._published.get(overflowingDocId);                                                    // 218\n                                                                                                                       //\n        if (EJSON.equals(overflowingDocId, id)) {                                                                      // 220\n          throw new Error(\"The document just added is overflowing the published set\");                                 // 221\n        }                                                                                                              //\n                                                                                                                       //\n        self._published.remove(overflowingDocId);                                                                      // 224\n        self._multiplexer.removed(overflowingDocId);                                                                   // 225\n        self._addBuffered(overflowingDocId, overflowingDoc);                                                           // 226\n      }                                                                                                                //\n    });                                                                                                                //\n  },                                                                                                                   //\n  _removePublished: function (id) {                                                                                    // 230\n    var self = this;                                                                                                   // 231\n    Meteor._noYieldsAllowed(function () {                                                                              // 232\n      self._published.remove(id);                                                                                      // 233\n      self._multiplexer.removed(id);                                                                                   // 234\n      if (!self._limit || self._published.size() === self._limit) return;                                              // 235\n                                                                                                                       //\n      if (self._published.size() > self._limit) throw Error(\"self._published got too big\");                            // 238\n                                                                                                                       //\n      // OK, we are publishing less than the limit. Maybe we should look in the                                        //\n      // buffer to find the next element past what we were publishing before.                                          //\n                                                                                                                       //\n      if (!self._unpublishedBuffer.empty()) {                                                                          // 244\n        // There's something in the buffer; move the first thing in it to                                              //\n        // _published.                                                                                                 //\n        var newDocId = self._unpublishedBuffer.minElementId();                                                         // 247\n        var newDoc = self._unpublishedBuffer.get(newDocId);                                                            // 248\n        self._removeBuffered(newDocId);                                                                                // 249\n        self._addPublished(newDocId, newDoc);                                                                          // 250\n        return;                                                                                                        // 251\n      }                                                                                                                //\n                                                                                                                       //\n      // There's nothing in the buffer.  This could mean one of a few things.                                          //\n                                                                                                                       //\n      // (a) We could be in the middle of re-running the query (specifically, we                                       //\n      // could be in _publishNewResults). In that case, _unpublishedBuffer is                                          //\n      // empty because we clear it at the beginning of _publishNewResults. In                                          //\n      // this case, our caller already knows the entire answer to the query and                                        //\n      // we don't need to do anything fancy here.  Just return.                                                        //\n      if (self._phase === PHASE.QUERYING) return;                                                                      // 261\n                                                                                                                       //\n      // (b) We're pretty confident that the union of _published and                                                   //\n      // _unpublishedBuffer contain all documents that match selector. Because                                         //\n      // _unpublishedBuffer is empty, that means we're confident that _published                                       //\n      // contains all documents that match selector. So we have nothing to do.                                         //\n      if (self._safeAppendToBuffer) return;                                                                            // 268\n                                                                                                                       //\n      // (c) Maybe there are other documents out there that should be in our                                           //\n      // buffer. But in that case, when we emptied _unpublishedBuffer in                                               //\n      // _removeBuffered, we should have called _needToPollQuery, which will                                           //\n      // either put something in _unpublishedBuffer or set _safeAppendToBuffer                                         //\n      // (or both), and it will put us in QUERYING for that whole time. So in                                          //\n      // fact, we shouldn't be able to get here.                                                                       //\n                                                                                                                       //\n      throw new Error(\"Buffer inexplicably empty\");                                                                    // 278\n    });                                                                                                                //\n  },                                                                                                                   //\n  _changePublished: function (id, oldDoc, newDoc) {                                                                    // 281\n    var self = this;                                                                                                   // 282\n    Meteor._noYieldsAllowed(function () {                                                                              // 283\n      self._published.set(id, self._sharedProjectionFn(newDoc));                                                       // 284\n      var projectedNew = self._projectionFn(newDoc);                                                                   // 285\n      var projectedOld = self._projectionFn(oldDoc);                                                                   // 286\n      var changed = DiffSequence.makeChangedFields(projectedNew, projectedOld);                                        // 287\n      if (!_.isEmpty(changed)) self._multiplexer.changed(id, changed);                                                 // 289\n    });                                                                                                                //\n  },                                                                                                                   //\n  _addBuffered: function (id, doc) {                                                                                   // 293\n    var self = this;                                                                                                   // 294\n    Meteor._noYieldsAllowed(function () {                                                                              // 295\n      self._unpublishedBuffer.set(id, self._sharedProjectionFn(doc));                                                  // 296\n                                                                                                                       //\n      // If something is overflowing the buffer, we just remove it from cache                                          //\n      if (self._unpublishedBuffer.size() > self._limit) {                                                              // 299\n        var maxBufferedId = self._unpublishedBuffer.maxElementId();                                                    // 300\n                                                                                                                       //\n        self._unpublishedBuffer.remove(maxBufferedId);                                                                 // 302\n                                                                                                                       //\n        // Since something matching is removed from cache (both published set and                                      //\n        // buffer), set flag to false                                                                                  //\n        self._safeAppendToBuffer = false;                                                                              // 306\n      }                                                                                                                //\n    });                                                                                                                //\n  },                                                                                                                   //\n  // Is called either to remove the doc completely from matching set or to move                                        //\n  // it to the published set later.                                                                                    //\n  _removeBuffered: function (id) {                                                                                     // 312\n    var self = this;                                                                                                   // 313\n    Meteor._noYieldsAllowed(function () {                                                                              // 314\n      self._unpublishedBuffer.remove(id);                                                                              // 315\n      // To keep the contract \"buffer is never empty in STEADY phase unless the                                        //\n      // everything matching fits into published\" true, we poll everything as                                          //\n      // soon as we see the buffer becoming empty.                                                                     //\n      if (!self._unpublishedBuffer.size() && !self._safeAppendToBuffer) self._needToPollQuery();                       // 319\n    });                                                                                                                //\n  },                                                                                                                   //\n  // Called when a document has joined the \"Matching\" results set.                                                     //\n  // Takes responsibility of keeping _unpublishedBuffer in sync with _published                                        //\n  // and the effect of limit enforced.                                                                                 //\n  _addMatching: function (doc) {                                                                                       // 326\n    var self = this;                                                                                                   // 327\n    Meteor._noYieldsAllowed(function () {                                                                              // 328\n      var id = doc._id;                                                                                                // 329\n      if (self._published.has(id)) throw Error(\"tried to add something already published \" + id);                      // 330\n      if (self._limit && self._unpublishedBuffer.has(id)) throw Error(\"tried to add something already existed in buffer \" + id);\n                                                                                                                       //\n      var limit = self._limit;                                                                                         // 335\n      var comparator = self._comparator;                                                                               // 336\n      var maxPublished = limit && self._published.size() > 0 ? self._published.get(self._published.maxElementId()) : null;\n      var maxBuffered = limit && self._unpublishedBuffer.size() > 0 ? self._unpublishedBuffer.get(self._unpublishedBuffer.maxElementId()) : null;\n      // The query is unlimited or didn't publish enough documents yet or the                                          //\n      // new document would fit into published set pushing the maximum element                                         //\n      // out, then we need to publish the doc.                                                                         //\n      var toPublish = !limit || self._published.size() < limit || comparator(doc, maxPublished) < 0;                   // 345\n                                                                                                                       //\n      // Otherwise we might need to buffer it (only in case of limited query).                                         //\n      // Buffering is allowed if the buffer is not filled up yet and all                                               //\n      // matching docs are either in the published set or in the buffer.                                               //\n      var canAppendToBuffer = !toPublish && self._safeAppendToBuffer && self._unpublishedBuffer.size() < limit;        // 351\n                                                                                                                       //\n      // Or if it is small enough to be safely inserted to the middle or the                                           //\n      // beginning of the buffer.                                                                                      //\n      var canInsertIntoBuffer = !toPublish && maxBuffered && comparator(doc, maxBuffered) <= 0;                        // 356\n                                                                                                                       //\n      var toBuffer = canAppendToBuffer || canInsertIntoBuffer;                                                         // 359\n                                                                                                                       //\n      if (toPublish) {                                                                                                 // 361\n        self._addPublished(id, doc);                                                                                   // 362\n      } else if (toBuffer) {                                                                                           //\n        self._addBuffered(id, doc);                                                                                    // 364\n      } else {                                                                                                         //\n        // dropping it and not saving to the cache                                                                     //\n        self._safeAppendToBuffer = false;                                                                              // 367\n      }                                                                                                                //\n    });                                                                                                                //\n  },                                                                                                                   //\n  // Called when a document leaves the \"Matching\" results set.                                                         //\n  // Takes responsibility of keeping _unpublishedBuffer in sync with _published                                        //\n  // and the effect of limit enforced.                                                                                 //\n  _removeMatching: function (id) {                                                                                     // 374\n    var self = this;                                                                                                   // 375\n    Meteor._noYieldsAllowed(function () {                                                                              // 376\n      if (!self._published.has(id) && !self._limit) throw Error(\"tried to remove something matching but not cached \" + id);\n                                                                                                                       //\n      if (self._published.has(id)) {                                                                                   // 380\n        self._removePublished(id);                                                                                     // 381\n      } else if (self._unpublishedBuffer.has(id)) {                                                                    //\n        self._removeBuffered(id);                                                                                      // 383\n      }                                                                                                                //\n    });                                                                                                                //\n  },                                                                                                                   //\n  _handleDoc: function (id, newDoc) {                                                                                  // 387\n    var self = this;                                                                                                   // 388\n    Meteor._noYieldsAllowed(function () {                                                                              // 389\n      var matchesNow = newDoc && self._matcher.documentMatches(newDoc).result;                                         // 390\n                                                                                                                       //\n      var publishedBefore = self._published.has(id);                                                                   // 392\n      var bufferedBefore = self._limit && self._unpublishedBuffer.has(id);                                             // 393\n      var cachedBefore = publishedBefore || bufferedBefore;                                                            // 394\n                                                                                                                       //\n      if (matchesNow && !cachedBefore) {                                                                               // 396\n        self._addMatching(newDoc);                                                                                     // 397\n      } else if (cachedBefore && !matchesNow) {                                                                        //\n        self._removeMatching(id);                                                                                      // 399\n      } else if (cachedBefore && matchesNow) {                                                                         //\n        var oldDoc = self._published.get(id);                                                                          // 401\n        var comparator = self._comparator;                                                                             // 402\n        var minBuffered = self._limit && self._unpublishedBuffer.size() && self._unpublishedBuffer.get(self._unpublishedBuffer.minElementId());\n                                                                                                                       //\n        if (publishedBefore) {                                                                                         // 406\n          // Unlimited case where the document stays in published once it                                              //\n          // matches or the case when we don't have enough matching docs to                                            //\n          // publish or the changed but matching doc will stay in published                                            //\n          // anyways.                                                                                                  //\n          //                                                                                                           //\n          // XXX: We rely on the emptiness of buffer. Be sure to maintain the                                          //\n          // fact that buffer can't be empty if there are matching documents not                                       //\n          // published. Notably, we don't want to schedule repoll and continue                                         //\n          // relying on this property.                                                                                 //\n          var staysInPublished = !self._limit || self._unpublishedBuffer.size() === 0 || comparator(newDoc, minBuffered) <= 0;\n                                                                                                                       //\n          if (staysInPublished) {                                                                                      // 420\n            self._changePublished(id, oldDoc, newDoc);                                                                 // 421\n          } else {                                                                                                     //\n            // after the change doc doesn't stay in the published, remove it                                           //\n            self._removePublished(id);                                                                                 // 424\n            // but it can move into buffered now, check it                                                             //\n            var maxBuffered = self._unpublishedBuffer.get(self._unpublishedBuffer.maxElementId());                     // 426\n                                                                                                                       //\n            var toBuffer = self._safeAppendToBuffer || maxBuffered && comparator(newDoc, maxBuffered) <= 0;            // 429\n                                                                                                                       //\n            if (toBuffer) {                                                                                            // 432\n              self._addBuffered(id, newDoc);                                                                           // 433\n            } else {                                                                                                   //\n              // Throw away from both published set and buffer                                                         //\n              self._safeAppendToBuffer = false;                                                                        // 436\n            }                                                                                                          //\n          }                                                                                                            //\n        } else if (bufferedBefore) {                                                                                   //\n          oldDoc = self._unpublishedBuffer.get(id);                                                                    // 440\n          // remove the old version manually instead of using _removeBuffered so                                       //\n          // we don't trigger the querying immediately.  if we end this block                                          //\n          // with the buffer empty, we will need to trigger the query poll                                             //\n          // manually too.                                                                                             //\n          self._unpublishedBuffer.remove(id);                                                                          // 445\n                                                                                                                       //\n          var maxPublished = self._published.get(self._published.maxElementId());                                      // 447\n          var maxBuffered = self._unpublishedBuffer.size() && self._unpublishedBuffer.get(self._unpublishedBuffer.maxElementId());\n                                                                                                                       //\n          // the buffered doc was updated, it could move to published                                                  //\n          var toPublish = comparator(newDoc, maxPublished) < 0;                                                        // 454\n                                                                                                                       //\n          // or stays in buffer even after the change                                                                  //\n          var staysInBuffer = !toPublish && self._safeAppendToBuffer || !toPublish && maxBuffered && comparator(newDoc, maxBuffered) <= 0;\n                                                                                                                       //\n          if (toPublish) {                                                                                             // 461\n            self._addPublished(id, newDoc);                                                                            // 462\n          } else if (staysInBuffer) {                                                                                  //\n            // stays in buffer but changes                                                                             //\n            self._unpublishedBuffer.set(id, newDoc);                                                                   // 465\n          } else {                                                                                                     //\n            // Throw away from both published set and buffer                                                           //\n            self._safeAppendToBuffer = false;                                                                          // 468\n            // Normally this check would have been done in _removeBuffered but                                         //\n            // we didn't use it, so we need to do it ourself now.                                                      //\n            if (!self._unpublishedBuffer.size()) {                                                                     // 471\n              self._needToPollQuery();                                                                                 // 472\n            }                                                                                                          //\n          }                                                                                                            //\n        } else {                                                                                                       //\n          throw new Error(\"cachedBefore implies either of publishedBefore or bufferedBefore is true.\");                // 476\n        }                                                                                                              //\n      }                                                                                                                //\n    });                                                                                                                //\n  },                                                                                                                   //\n  _fetchModifiedDocuments: function () {                                                                               // 481\n    var self = this;                                                                                                   // 482\n    Meteor._noYieldsAllowed(function () {                                                                              // 483\n      self._registerPhaseChange(PHASE.FETCHING);                                                                       // 484\n      // Defer, because nothing called from the oplog entry handler may yield,                                         //\n      // but fetch() yields.                                                                                           //\n      Meteor.defer(finishIfNeedToPollQuery(function () {                                                               // 487\n        while (!self._stopped && !self._needToFetch.empty()) {                                                         // 488\n          if (self._phase === PHASE.QUERYING) {                                                                        // 489\n            // While fetching, we decided to go into QUERYING mode, and then we                                        //\n            // saw another oplog entry, so _needToFetch is not empty. But we                                           //\n            // shouldn't fetch these documents until AFTER the query is done.                                          //\n            break;                                                                                                     // 493\n          }                                                                                                            //\n                                                                                                                       //\n          // Being in steady phase here would be surprising.                                                           //\n          if (self._phase !== PHASE.FETCHING) throw new Error(\"phase in fetchModifiedDocuments: \" + self._phase);      // 497\n                                                                                                                       //\n          self._currentlyFetching = self._needToFetch;                                                                 // 500\n          var thisGeneration = ++self._fetchGeneration;                                                                // 501\n          self._needToFetch = new LocalCollection._IdMap();                                                            // 502\n          var waiting = 0;                                                                                             // 503\n          var fut = new Future();                                                                                      // 504\n          // This loop is safe, because _currentlyFetching will not be updated                                         //\n          // during this loop (in fact, it is never mutated).                                                          //\n          self._currentlyFetching.forEach(function (cacheKey, id) {                                                    // 507\n            waiting++;                                                                                                 // 508\n            self._mongoHandle._docFetcher.fetch(self._cursorDescription.collectionName, id, cacheKey, finishIfNeedToPollQuery(function (err, doc) {\n              try {                                                                                                    // 512\n                if (err) {                                                                                             // 513\n                  Meteor._debug(\"Got exception while fetching documents: \" + err);                                     // 514\n                  // If we get an error from the fetcher (eg, trouble                                                  //\n                  // connecting to Mongo), let's just abandon the fetch phase                                          //\n                  // altogether and fall back to polling. It's not like we're                                          //\n                  // getting live updates anyway.                                                                      //\n                  if (self._phase !== PHASE.QUERYING) {                                                                // 520\n                    self._needToPollQuery();                                                                           // 521\n                  }                                                                                                    //\n                } else if (!self._stopped && self._phase === PHASE.FETCHING && self._fetchGeneration === thisGeneration) {\n                  // We re-check the generation in case we've had an explicit                                          //\n                  // _pollQuery call (eg, in another fiber) which should                                               //\n                  // effectively cancel this round of fetches.  (_pollQuery                                            //\n                  // increments the generation.)                                                                       //\n                  self._handleDoc(id, doc);                                                                            // 529\n                }                                                                                                      //\n              } finally {                                                                                              //\n                waiting--;                                                                                             // 532\n                // Because fetch() never calls its callback synchronously,                                             //\n                // this is safe (ie, we won't call fut.return() before the                                             //\n                // forEach is done).                                                                                   //\n                if (waiting === 0) fut['return']();                                                                    // 536\n              }                                                                                                        //\n            }));                                                                                                       //\n          });                                                                                                          //\n          fut.wait();                                                                                                  // 541\n          // Exit now if we've had a _pollQuery call (here or in another fiber).                                       //\n          if (self._phase === PHASE.QUERYING) return;                                                                  // 543\n          self._currentlyFetching = null;                                                                              // 545\n        }                                                                                                              //\n        // We're done fetching, so we can be steady, unless we've had a                                                //\n        // _pollQuery call (here or in another fiber).                                                                 //\n        if (self._phase !== PHASE.QUERYING) self._beSteady();                                                          // 549\n      }));                                                                                                             //\n    });                                                                                                                //\n  },                                                                                                                   //\n  _beSteady: function () {                                                                                             // 554\n    var self = this;                                                                                                   // 555\n    Meteor._noYieldsAllowed(function () {                                                                              // 556\n      self._registerPhaseChange(PHASE.STEADY);                                                                         // 557\n      var writes = self._writesToCommitWhenWeReachSteady;                                                              // 558\n      self._writesToCommitWhenWeReachSteady = [];                                                                      // 559\n      self._multiplexer.onFlush(function () {                                                                          // 560\n        _.each(writes, function (w) {                                                                                  // 561\n          w.committed();                                                                                               // 562\n        });                                                                                                            //\n      });                                                                                                              //\n    });                                                                                                                //\n  },                                                                                                                   //\n  _handleOplogEntryQuerying: function (op) {                                                                           // 567\n    var self = this;                                                                                                   // 568\n    Meteor._noYieldsAllowed(function () {                                                                              // 569\n      self._needToFetch.set(idForOp(op), op.ts.toString());                                                            // 570\n    });                                                                                                                //\n  },                                                                                                                   //\n  _handleOplogEntrySteadyOrFetching: function (op) {                                                                   // 573\n    var self = this;                                                                                                   // 574\n    Meteor._noYieldsAllowed(function () {                                                                              // 575\n      var id = idForOp(op);                                                                                            // 576\n      // If we're already fetching this one, or about to, we can't optimize;                                           //\n      // make sure that we fetch it again if necessary.                                                                //\n      if (self._phase === PHASE.FETCHING && (self._currentlyFetching && self._currentlyFetching.has(id) || self._needToFetch.has(id))) {\n        self._needToFetch.set(id, op.ts.toString());                                                                   // 582\n        return;                                                                                                        // 583\n      }                                                                                                                //\n                                                                                                                       //\n      if (op.op === 'd') {                                                                                             // 586\n        if (self._published.has(id) || self._limit && self._unpublishedBuffer.has(id)) self._removeMatching(id);       // 587\n      } else if (op.op === 'i') {                                                                                      //\n        if (self._published.has(id)) throw new Error(\"insert found for already-existing ID in published\");             // 591\n        if (self._unpublishedBuffer && self._unpublishedBuffer.has(id)) throw new Error(\"insert found for already-existing ID in buffer\");\n                                                                                                                       //\n        // XXX what if selector yields?  for now it can't but later it could                                           //\n        // have $where                                                                                                 //\n        if (self._matcher.documentMatches(op.o).result) self._addMatching(op.o);                                       // 598\n      } else if (op.op === 'u') {                                                                                      //\n        // Is this a modifier ($set/$unset, which may require us to poll the                                           //\n        // database to figure out if the whole document matches the selector) or                                       //\n        // a replacement (in which case we can just directly re-evaluate the                                           //\n        // selector)?                                                                                                  //\n        var isReplace = !_.has(op.o, '$set') && !_.has(op.o, '$unset');                                                // 605\n        // If this modifier modifies something inside an EJSON custom type (ie,                                        //\n        // anything with EJSON$), then we can't try to use                                                             //\n        // LocalCollection._modify, since that just mutates the EJSON encoding,                                        //\n        // not the actual object.                                                                                      //\n        var canDirectlyModifyDoc = !isReplace && modifierCanBeDirectlyApplied(op.o);                                   // 610\n                                                                                                                       //\n        var publishedBefore = self._published.has(id);                                                                 // 613\n        var bufferedBefore = self._limit && self._unpublishedBuffer.has(id);                                           // 614\n                                                                                                                       //\n        if (isReplace) {                                                                                               // 616\n          self._handleDoc(id, _.extend({ _id: id }, op.o));                                                            // 617\n        } else if ((publishedBefore || bufferedBefore) && canDirectlyModifyDoc) {                                      //\n          // Oh great, we actually know what the document is, so we can apply                                          //\n          // this directly.                                                                                            //\n          var newDoc = self._published.has(id) ? self._published.get(id) : self._unpublishedBuffer.get(id);            // 622\n          newDoc = EJSON.clone(newDoc);                                                                                // 624\n                                                                                                                       //\n          newDoc._id = id;                                                                                             // 626\n          try {                                                                                                        // 627\n            LocalCollection._modify(newDoc, op.o);                                                                     // 628\n          } catch (e) {                                                                                                //\n            if (e.name !== \"MinimongoError\") throw e;                                                                  // 630\n            // We didn't understand the modifier.  Re-fetch.                                                           //\n            self._needToFetch.set(id, op.ts.toString());                                                               // 633\n            if (self._phase === PHASE.STEADY) {                                                                        // 634\n              self._fetchModifiedDocuments();                                                                          // 635\n            }                                                                                                          //\n            return;                                                                                                    // 637\n          }                                                                                                            //\n          self._handleDoc(id, self._sharedProjectionFn(newDoc));                                                       // 639\n        } else if (!canDirectlyModifyDoc || self._matcher.canBecomeTrueByModifier(op.o) || self._sorter && self._sorter.affectedByModifier(op.o)) {\n          self._needToFetch.set(id, op.ts.toString());                                                                 // 643\n          if (self._phase === PHASE.STEADY) self._fetchModifiedDocuments();                                            // 644\n        }                                                                                                              //\n      } else {                                                                                                         //\n        throw Error(\"XXX SURPRISING OPERATION: \" + op);                                                                // 648\n      }                                                                                                                //\n    });                                                                                                                //\n  },                                                                                                                   //\n  // Yields!                                                                                                           //\n  _runInitialQuery: function () {                                                                                      // 653\n    var self = this;                                                                                                   // 654\n    if (self._stopped) throw new Error(\"oplog stopped surprisingly early\");                                            // 655\n                                                                                                                       //\n    self._runQuery({ initial: true }); // yields                                                                       // 658\n                                                                                                                       //\n    if (self._stopped) return; // can happen on queryError                                                             // 660\n                                                                                                                       //\n    // Allow observeChanges calls to return. (After this, it's possible for                                            //\n    // stop() to be called.)                                                                                           //\n    self._multiplexer.ready();                                                                                         // 665\n                                                                                                                       //\n    self._doneQuerying(); // yields                                                                                    // 667\n  },                                                                                                                   //\n                                                                                                                       //\n  // In various circumstances, we may just want to stop processing the oplog and                                       //\n  // re-run the initial query, just as if we were a PollingObserveDriver.                                              //\n  //                                                                                                                   //\n  // This function may not block, because it is called from an oplog entry                                             //\n  // handler.                                                                                                          //\n  //                                                                                                                   //\n  // XXX We should call this when we detect that we've been in FETCHING for \"too                                       //\n  // long\".                                                                                                            //\n  //                                                                                                                   //\n  // XXX We should call this when we detect Mongo failover (since that might                                           //\n  // mean that some of the oplog entries we have processed have been rolled                                            //\n  // back). The Node Mongo driver is in the middle of a bunch of huge                                                  //\n  // refactorings, including the way that it notifies you when primary                                                 //\n  // changes. Will put off implementing this until driver 1.4 is out.                                                  //\n  _pollQuery: function () {                                                                                            // 684\n    var self = this;                                                                                                   // 685\n    Meteor._noYieldsAllowed(function () {                                                                              // 686\n      if (self._stopped) return;                                                                                       // 687\n                                                                                                                       //\n      // Yay, we get to forget about all the things we thought we had to fetch.                                        //\n      self._needToFetch = new LocalCollection._IdMap();                                                                // 691\n      self._currentlyFetching = null;                                                                                  // 692\n      ++self._fetchGeneration; // ignore any in-flight fetches                                                         // 693\n      self._registerPhaseChange(PHASE.QUERYING);                                                                       // 694\n                                                                                                                       //\n      // Defer so that we don't yield.  We don't need finishIfNeedToPollQuery                                          //\n      // here because SwitchedToQuery is not thrown in QUERYING mode.                                                  //\n      Meteor.defer(function () {                                                                                       // 698\n        self._runQuery();                                                                                              // 699\n        self._doneQuerying();                                                                                          // 700\n      });                                                                                                              //\n    });                                                                                                                //\n  },                                                                                                                   //\n                                                                                                                       //\n  // Yields!                                                                                                           //\n  _runQuery: function (options) {                                                                                      // 706\n    var self = this;                                                                                                   // 707\n    options = options || {};                                                                                           // 708\n    var newResults, newBuffer;                                                                                         // 709\n                                                                                                                       //\n    // This while loop is just to retry failures.                                                                      //\n    while (true) {                                                                                                     // 712\n      // If we've been stopped, we don't have to run anything any more.                                                //\n      if (self._stopped) return;                                                                                       // 714\n                                                                                                                       //\n      newResults = new LocalCollection._IdMap();                                                                       // 717\n      newBuffer = new LocalCollection._IdMap();                                                                        // 718\n                                                                                                                       //\n      // Query 2x documents as the half excluded from the original query will go                                       //\n      // into unpublished buffer to reduce additional Mongo lookups in cases                                           //\n      // when documents are removed from the published set and need a                                                  //\n      // replacement.                                                                                                  //\n      // XXX needs more thought on non-zero skip                                                                       //\n      // XXX 2 is a \"magic number\" meaning there is an extra chunk of docs for                                         //\n      // buffer if such is needed.                                                                                     //\n      var cursor = self._cursorForQuery({ limit: self._limit * 2 });                                                   // 727\n      try {                                                                                                            // 728\n        cursor.forEach(function (doc, i) {                                                                             // 729\n          // yields                                                                                                    //\n          if (!self._limit || i < self._limit) newResults.set(doc._id, doc);else newBuffer.set(doc._id, doc);          // 730\n        });                                                                                                            //\n        break;                                                                                                         // 735\n      } catch (e) {                                                                                                    //\n        if (options.initial && typeof e.code === 'number') {                                                           // 737\n          // This is an error document sent to us by mongod, not a connection                                          //\n          // error generated by the client. And we've never seen this query work                                       //\n          // successfully. Probably it's a bad selector or something, so we                                            //\n          // should NOT retry. Instead, we should halt the observe (which ends                                         //\n          // up calling `stop` on us).                                                                                 //\n          self._multiplexer.queryError(e);                                                                             // 743\n          return;                                                                                                      // 744\n        }                                                                                                              //\n                                                                                                                       //\n        // During failover (eg) if we get an exception we should log and retry                                         //\n        // instead of crashing.                                                                                        //\n        Meteor._debug(\"Got exception while polling query: \" + e);                                                      // 749\n        Meteor._sleepForMs(100);                                                                                       // 750\n      }                                                                                                                //\n    }                                                                                                                  //\n                                                                                                                       //\n    if (self._stopped) return;                                                                                         // 754\n                                                                                                                       //\n    self._publishNewResults(newResults, newBuffer);                                                                    // 757\n  },                                                                                                                   //\n                                                                                                                       //\n  // Transitions to QUERYING and runs another query, or (if already in QUERYING)                                       //\n  // ensures that we will query again later.                                                                           //\n  //                                                                                                                   //\n  // This function may not block, because it is called from an oplog entry                                             //\n  // handler. However, if we were not already in the QUERYING phase, it throws                                         //\n  // an exception that is caught by the closest surrounding                                                            //\n  // finishIfNeedToPollQuery call; this ensures that we don't continue running                                         //\n  // close that was designed for another phase inside PHASE.QUERYING.                                                  //\n  //                                                                                                                   //\n  // (It's also necessary whenever logic in this file yields to check that other                                       //\n  // phases haven't put us into QUERYING mode, though; eg,                                                             //\n  // _fetchModifiedDocuments does this.)                                                                               //\n  _needToPollQuery: function () {                                                                                      // 772\n    var self = this;                                                                                                   // 773\n    Meteor._noYieldsAllowed(function () {                                                                              // 774\n      if (self._stopped) return;                                                                                       // 775\n                                                                                                                       //\n      // If we're not already in the middle of a query, we can query now                                               //\n      // (possibly pausing FETCHING).                                                                                  //\n      if (self._phase !== PHASE.QUERYING) {                                                                            // 780\n        self._pollQuery();                                                                                             // 781\n        throw new SwitchedToQuery();                                                                                   // 782\n      }                                                                                                                //\n                                                                                                                       //\n      // We're currently in QUERYING. Set a flag to ensure that we run another                                         //\n      // query when we're done.                                                                                        //\n      self._requeryWhenDoneThisQuery = true;                                                                           // 787\n    });                                                                                                                //\n  },                                                                                                                   //\n                                                                                                                       //\n  // Yields!                                                                                                           //\n  _doneQuerying: function () {                                                                                         // 792\n    var self = this;                                                                                                   // 793\n                                                                                                                       //\n    if (self._stopped) return;                                                                                         // 795\n    self._mongoHandle._oplogHandle.waitUntilCaughtUp(); // yields                                                      // 797\n    if (self._stopped) return;                                                                                         // 798\n    if (self._phase !== PHASE.QUERYING) throw Error(\"Phase unexpectedly \" + self._phase);                              // 800\n                                                                                                                       //\n    Meteor._noYieldsAllowed(function () {                                                                              // 803\n      if (self._requeryWhenDoneThisQuery) {                                                                            // 804\n        self._requeryWhenDoneThisQuery = false;                                                                        // 805\n        self._pollQuery();                                                                                             // 806\n      } else if (self._needToFetch.empty()) {                                                                          //\n        self._beSteady();                                                                                              // 808\n      } else {                                                                                                         //\n        self._fetchModifiedDocuments();                                                                                // 810\n      }                                                                                                                //\n    });                                                                                                                //\n  },                                                                                                                   //\n                                                                                                                       //\n  _cursorForQuery: function (optionsOverwrite) {                                                                       // 815\n    var self = this;                                                                                                   // 816\n    return Meteor._noYieldsAllowed(function () {                                                                       // 817\n      // The query we run is almost the same as the cursor we are observing,                                           //\n      // with a few changes. We need to read all the fields that are relevant to                                       //\n      // the selector, not just the fields we are going to publish (that's the                                         //\n      // \"shared\" projection). And we don't want to apply any transform in the                                         //\n      // cursor, because observeChanges shouldn't use the transform.                                                   //\n      var options = _.clone(self._cursorDescription.options);                                                          // 823\n                                                                                                                       //\n      // Allow the caller to modify the options. Useful to specify different                                           //\n      // skip and limit values.                                                                                        //\n      _.extend(options, optionsOverwrite);                                                                             // 827\n                                                                                                                       //\n      options.fields = self._sharedProjection;                                                                         // 829\n      delete options.transform;                                                                                        // 830\n      // We are NOT deep cloning fields or selector here, which should be OK.                                          //\n      var description = new CursorDescription(self._cursorDescription.collectionName, self._cursorDescription.selector, options);\n      return new Cursor(self._mongoHandle, description);                                                               // 836\n    });                                                                                                                //\n  },                                                                                                                   //\n                                                                                                                       //\n  // Replace self._published with newResults (both are IdMaps), invoking observe                                       //\n  // callbacks on the multiplexer.                                                                                     //\n  // Replace self._unpublishedBuffer with newBuffer.                                                                   //\n  //                                                                                                                   //\n  // XXX This is very similar to LocalCollection._diffQueryUnorderedChanges. We                                        //\n  // should really: (a) Unify IdMap and OrderedDict into Unordered/OrderedDict                                         //\n  // (b) Rewrite diff.js to use these classes instead of arrays and objects.                                           //\n  _publishNewResults: function (newResults, newBuffer) {                                                               // 848\n    var self = this;                                                                                                   // 849\n    Meteor._noYieldsAllowed(function () {                                                                              // 850\n                                                                                                                       //\n      // If the query is limited and there is a buffer, shut down so it doesn't                                        //\n      // stay in a way.                                                                                                //\n      if (self._limit) {                                                                                               // 854\n        self._unpublishedBuffer.clear();                                                                               // 855\n      }                                                                                                                //\n                                                                                                                       //\n      // First remove anything that's gone. Be careful not to modify                                                   //\n      // self._published while iterating over it.                                                                      //\n      var idsToRemove = [];                                                                                            // 860\n      self._published.forEach(function (doc, id) {                                                                     // 861\n        if (!newResults.has(id)) idsToRemove.push(id);                                                                 // 862\n      });                                                                                                              //\n      _.each(idsToRemove, function (id) {                                                                              // 865\n        self._removePublished(id);                                                                                     // 866\n      });                                                                                                              //\n                                                                                                                       //\n      // Now do adds and changes.                                                                                      //\n      // If self has a buffer and limit, the new fetched result will be                                                //\n      // limited correctly as the query has sort specifier.                                                            //\n      newResults.forEach(function (doc, id) {                                                                          // 872\n        self._handleDoc(id, doc);                                                                                      // 873\n      });                                                                                                              //\n                                                                                                                       //\n      // Sanity-check that everything we tried to put into _published ended up                                         //\n      // there.                                                                                                        //\n      // XXX if this is slow, remove it later                                                                          //\n      if (self._published.size() !== newResults.size()) {                                                              // 879\n        throw Error(\"The Mongo server and the Meteor query disagree on how \" + \"many documents match your query. Maybe it is hitting a Mongo \" + \"edge case? The query is: \" + EJSON.stringify(self._cursorDescription.selector));\n      }                                                                                                                //\n      self._published.forEach(function (doc, id) {                                                                     // 886\n        if (!newResults.has(id)) throw Error(\"_published has a doc that newResults doesn't; \" + id);                   // 887\n      });                                                                                                              //\n                                                                                                                       //\n      // Finally, replace the buffer                                                                                   //\n      newBuffer.forEach(function (doc, id) {                                                                           // 892\n        self._addBuffered(id, doc);                                                                                    // 893\n      });                                                                                                              //\n                                                                                                                       //\n      self._safeAppendToBuffer = newBuffer.size() < self._limit;                                                       // 896\n    });                                                                                                                //\n  },                                                                                                                   //\n                                                                                                                       //\n  // This stop function is invoked from the onStop of the ObserveMultiplexer, so                                       //\n  // it shouldn't actually be possible to call it until the multiplexer is                                             //\n  // ready.                                                                                                            //\n  //                                                                                                                   //\n  // It's important to check self._stopped after every call in this file that                                          //\n  // can yield!                                                                                                        //\n  stop: function () {                                                                                                  // 906\n    var self = this;                                                                                                   // 907\n    if (self._stopped) return;                                                                                         // 908\n    self._stopped = true;                                                                                              // 910\n    _.each(self._stopHandles, function (handle) {                                                                      // 911\n      handle.stop();                                                                                                   // 912\n    });                                                                                                                //\n                                                                                                                       //\n    // Note: we *don't* use multiplexer.onFlush here because this stop                                                 //\n    // callback is actually invoked by the multiplexer itself when it has                                              //\n    // determined that there are no handles left. So nothing is actually going                                         //\n    // to get flushed (and it's probably not valid to call methods on the                                              //\n    // dying multiplexer).                                                                                             //\n    _.each(self._writesToCommitWhenWeReachSteady, function (w) {                                                       // 920\n      w.committed(); // maybe yields?                                                                                  // 921\n    });                                                                                                                //\n    self._writesToCommitWhenWeReachSteady = null;                                                                      // 923\n                                                                                                                       //\n    // Proactively drop references to potentially big things.                                                          //\n    self._published = null;                                                                                            // 926\n    self._unpublishedBuffer = null;                                                                                    // 927\n    self._needToFetch = null;                                                                                          // 928\n    self._currentlyFetching = null;                                                                                    // 929\n    self._oplogEntryHandle = null;                                                                                     // 930\n    self._listenersHandle = null;                                                                                      // 931\n                                                                                                                       //\n    Package.facts && Package.facts.Facts.incrementServerFact(\"mongo-livedata\", \"observe-drivers-oplog\", -1);           // 933\n  },                                                                                                                   //\n                                                                                                                       //\n  _registerPhaseChange: function (phase) {                                                                             // 937\n    var self = this;                                                                                                   // 938\n    Meteor._noYieldsAllowed(function () {                                                                              // 939\n      var now = new Date();                                                                                            // 940\n                                                                                                                       //\n      if (self._phase) {                                                                                               // 942\n        var timeDiff = now - self._phaseStartTime;                                                                     // 943\n        Package.facts && Package.facts.Facts.incrementServerFact(\"mongo-livedata\", \"time-spent-in-\" + self._phase + \"-phase\", timeDiff);\n      }                                                                                                                //\n                                                                                                                       //\n      self._phase = phase;                                                                                             // 948\n      self._phaseStartTime = now;                                                                                      // 949\n    });                                                                                                                //\n  }                                                                                                                    //\n});                                                                                                                    //\n                                                                                                                       //\n// Does our oplog tailing code support this cursor? For now, we are being very                                         //\n// conservative and allowing only simple queries with simple options.                                                  //\n// (This is a \"static method\".)                                                                                        //\nOplogObserveDriver.cursorSupported = function (cursorDescription, matcher) {                                           // 957\n  // First, check the options.                                                                                         //\n  var options = cursorDescription.options;                                                                             // 959\n                                                                                                                       //\n  // Did the user say no explicitly?                                                                                   //\n  if (options._disableOplog) return false;                                                                             // 962\n                                                                                                                       //\n  // skip is not supported: to support it we would need to keep track of all                                           //\n  // \"skipped\" documents or at least their ids.                                                                        //\n  // limit w/o a sort specifier is not supported: current implementation needs a                                       //\n  // deterministic way to order documents.                                                                             //\n  if (options.skip || options.limit && !options.sort) return false;                                                    // 969\n                                                                                                                       //\n  // If a fields projection option is given check if it is supported by                                                //\n  // minimongo (some operators are not supported).                                                                     //\n  if (options.fields) {                                                                                                // 973\n    try {                                                                                                              // 974\n      LocalCollection._checkSupportedProjection(options.fields);                                                       // 975\n    } catch (e) {                                                                                                      //\n      if (e.name === \"MinimongoError\") return false;else throw e;                                                      // 977\n    }                                                                                                                  //\n  }                                                                                                                    //\n                                                                                                                       //\n  // We don't allow the following selectors:                                                                           //\n  //   - $where (not confident that we provide the same JS environment                                                 //\n  //             as Mongo, and can yield!)                                                                             //\n  //   - $near (has \"interesting\" properties in MongoDB, like the possibility                                          //\n  //            of returning an ID multiple times, though even polling maybe                                           //\n  //            have a bug there)                                                                                      //\n  //           XXX: once we support it, we would need to think more on how we                                          //\n  //           initialize the comparators when we create the driver.                                                   //\n  return !matcher.hasWhere() && !matcher.hasGeoQuery();                                                                // 992\n};                                                                                                                     //\n                                                                                                                       //\nvar modifierCanBeDirectlyApplied = function (modifier) {                                                               // 995\n  return _.all(modifier, function (fields, operation) {                                                                // 996\n    return _.all(fields, function (value, field) {                                                                     // 997\n      return !/EJSON\\$/.test(field);                                                                                   // 998\n    });                                                                                                                //\n  });                                                                                                                  //\n};                                                                                                                     //\n                                                                                                                       //\nMongoInternals.OplogObserveDriver = OplogObserveDriver;                                                                // 1003\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"local_collection_driver.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/mongo/local_collection_driver.js                                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nLocalCollectionDriver = function () {                                                                                  // 1\n  var self = this;                                                                                                     // 2\n  self.noConnCollections = {};                                                                                         // 3\n};                                                                                                                     //\n                                                                                                                       //\nvar ensureCollection = function (name, collections) {                                                                  // 6\n  if (!(name in collections)) collections[name] = new LocalCollection(name);                                           // 7\n  return collections[name];                                                                                            // 9\n};                                                                                                                     //\n                                                                                                                       //\n_.extend(LocalCollectionDriver.prototype, {                                                                            // 12\n  open: function (name, conn) {                                                                                        // 13\n    var self = this;                                                                                                   // 14\n    if (!name) return new LocalCollection();                                                                           // 15\n    if (!conn) {                                                                                                       // 17\n      return ensureCollection(name, self.noConnCollections);                                                           // 18\n    }                                                                                                                  //\n    if (!conn._mongo_livedata_collections) conn._mongo_livedata_collections = {};                                      // 20\n    // XXX is there a way to keep track of a connection's collections without                                          //\n    // dangling it off the connection object?                                                                          //\n    return ensureCollection(name, conn._mongo_livedata_collections);                                                   // 24\n  }                                                                                                                    //\n});                                                                                                                    //\n                                                                                                                       //\n// singleton                                                                                                           //\nLocalCollectionDriver = new LocalCollectionDriver();                                                                   // 29\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"remote_collection_driver.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/mongo/remote_collection_driver.js                                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nMongoInternals.RemoteCollectionDriver = function (mongo_url, options) {                                                // 1\n  var self = this;                                                                                                     // 3\n  self.mongo = new MongoConnection(mongo_url, options);                                                                // 4\n};                                                                                                                     //\n                                                                                                                       //\n_.extend(MongoInternals.RemoteCollectionDriver.prototype, {                                                            // 7\n  open: function (name) {                                                                                              // 8\n    var self = this;                                                                                                   // 9\n    var ret = {};                                                                                                      // 10\n    _.each(['find', 'findOne', 'insert', 'update', 'upsert', 'remove', '_ensureIndex', '_dropIndex', '_createCappedCollection', 'dropCollection', 'rawCollection'], function (m) {\n      ret[m] = _.bind(self.mongo[m], self.mongo, name);                                                                // 16\n    });                                                                                                                //\n    return ret;                                                                                                        // 18\n  }                                                                                                                    //\n});                                                                                                                    //\n                                                                                                                       //\n// Create the singleton RemoteCollectionDriver only on demand, so we                                                   //\n// only require Mongo configuration if it's actually used (eg, not if                                                  //\n// you're only trying to receive data from a remote DDP server.)                                                       //\nMongoInternals.defaultRemoteCollectionDriver = _.once(function () {                                                    // 26\n  var connectionOptions = {};                                                                                          // 27\n                                                                                                                       //\n  var mongoUrl = process.env.MONGO_URL;                                                                                // 29\n                                                                                                                       //\n  if (process.env.MONGO_OPLOG_URL) {                                                                                   // 31\n    connectionOptions.oplogUrl = process.env.MONGO_OPLOG_URL;                                                          // 32\n  }                                                                                                                    //\n                                                                                                                       //\n  if (!mongoUrl) throw new Error(\"MONGO_URL must be set in environment\");                                              // 35\n                                                                                                                       //\n  return new MongoInternals.RemoteCollectionDriver(mongoUrl, connectionOptions);                                       // 38\n});                                                                                                                    //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"collection.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/mongo/collection.js                                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// options.connection, if given, is a LivedataClient or LivedataServer                                                 //\n// XXX presently there is no way to destroy/clean up a Collection                                                      //\n                                                                                                                       //\n/**                                                                                                                    //\n * @summary Namespace for MongoDB-related items                                                                        //\n * @namespace                                                                                                          //\n */                                                                                                                    //\nMongo = {};                                                                                                            // 8\n                                                                                                                       //\n/**                                                                                                                    //\n * @summary Constructor for a Collection                                                                               //\n * @locus Anywhere                                                                                                     //\n * @instancename collection                                                                                            //\n * @class                                                                                                              //\n * @param {String} name The name of the collection.  If null, creates an unmanaged (unsynchronized) local collection.  //\n * @param {Object} [options]                                                                                           //\n * @param {Object} options.connection The server connection that will manage this collection. Uses the default connection if not specified.  Pass the return value of calling [`DDP.connect`](#ddp_connect) to specify a different server. Pass `null` to specify no connection. Unmanaged (`name` is null) collections cannot specify a connection.\n * @param {String} options.idGeneration The method of generating the `_id` fields of new documents in this collection.  Possible values:\n                                                                                                                       //\n - **`'STRING'`**: random strings                                                                                      //\n - **`'MONGO'`**:  random [`Mongo.ObjectID`](#mongo_object_id) values                                                  //\n                                                                                                                       //\nThe default id generation technique is `'STRING'`.                                                                     //\n * @param {Function} options.transform An optional transformation function. Documents will be passed through this function before being returned from `fetch` or `findOne`, and before being passed to callbacks of `observe`, `map`, `forEach`, `allow`, and `deny`. Transforms are *not* applied for the callbacks of `observeChanges` or to cursors returned from publish functions.\n */                                                                                                                    //\nMongo.Collection = function (name, options) {                                                                          // 26\n  var self = this;                                                                                                     // 27\n  if (!(self instanceof Mongo.Collection)) throw new Error('use \"new\" to construct a Mongo.Collection');               // 28\n                                                                                                                       //\n  if (!name && name !== null) {                                                                                        // 31\n    Meteor._debug(\"Warning: creating anonymous collection. It will not be \" + \"saved or synchronized over the network. (Pass null for \" + \"the collection name to turn off this warning.)\");\n    name = null;                                                                                                       // 35\n  }                                                                                                                    //\n                                                                                                                       //\n  if (name !== null && typeof name !== \"string\") {                                                                     // 38\n    throw new Error(\"First argument to new Mongo.Collection must be a string or null\");                                // 39\n  }                                                                                                                    //\n                                                                                                                       //\n  if (options && options.methods) {                                                                                    // 43\n    // Backwards compatibility hack with original signature (which passed                                              //\n    // \"connection\" directly instead of in options. (Connections must have a \"methods\"                                 //\n    // method.)                                                                                                        //\n    // XXX remove before 1.0                                                                                           //\n    options = { connection: options };                                                                                 // 48\n  }                                                                                                                    //\n  // Backwards compatibility: \"connection\" used to be called \"manager\".                                                //\n  if (options && options.manager && !options.connection) {                                                             // 51\n    options.connection = options.manager;                                                                              // 52\n  }                                                                                                                    //\n  options = _.extend({                                                                                                 // 54\n    connection: undefined,                                                                                             // 55\n    idGeneration: 'STRING',                                                                                            // 56\n    transform: null,                                                                                                   // 57\n    _driver: undefined,                                                                                                // 58\n    _preventAutopublish: false                                                                                         // 59\n  }, options);                                                                                                         //\n                                                                                                                       //\n  switch (options.idGeneration) {                                                                                      // 62\n    case 'MONGO':                                                                                                      // 63\n      self._makeNewID = function () {                                                                                  // 64\n        var src = name ? DDP.randomStream('/collection/' + name) : Random.insecure;                                    // 65\n        return new Mongo.ObjectID(src.hexString(24));                                                                  // 68\n      };                                                                                                               //\n      break;                                                                                                           // 70\n    case 'STRING':                                                                                                     // 70\n    default:                                                                                                           // 72\n      self._makeNewID = function () {                                                                                  // 73\n        var src = name ? DDP.randomStream('/collection/' + name) : Random.insecure;                                    // 74\n        return src.id();                                                                                               // 77\n      };                                                                                                               //\n      break;                                                                                                           // 79\n  }                                                                                                                    // 79\n                                                                                                                       //\n  self._transform = LocalCollection.wrapTransform(options.transform);                                                  // 82\n                                                                                                                       //\n  if (!name || options.connection === null)                                                                            // 84\n    // note: nameless collections never have a connection                                                              //\n    self._connection = null;else if (options.connection) self._connection = options.connection;else if (Meteor.isClient) self._connection = Meteor.connection;else self._connection = Meteor.server;\n                                                                                                                       //\n  if (!options._driver) {                                                                                              // 94\n    // XXX This check assumes that webapp is loaded so that Meteor.server !==                                          //\n    // null. We should fully support the case of \"want to use a Mongo-backed                                           //\n    // collection from Node code without webapp\", but we don't yet.                                                    //\n    // #MeteorServerNull                                                                                               //\n    if (name && self._connection === Meteor.server && typeof MongoInternals !== \"undefined\" && MongoInternals.defaultRemoteCollectionDriver) {\n      options._driver = MongoInternals.defaultRemoteCollectionDriver();                                                // 102\n    } else {                                                                                                           //\n      options._driver = LocalCollectionDriver;                                                                         // 104\n    }                                                                                                                  //\n  }                                                                                                                    //\n                                                                                                                       //\n  self._collection = options._driver.open(name, self._connection);                                                     // 108\n  self._name = name;                                                                                                   // 109\n  self._driver = options._driver;                                                                                      // 110\n                                                                                                                       //\n  if (self._connection && self._connection.registerStore) {                                                            // 112\n    // OK, we're going to be a slave, replicating some remote                                                          //\n    // database, except possibly with some temporary divergence while                                                  //\n    // we have unacknowledged RPC's.                                                                                   //\n    var ok = self._connection.registerStore(name, {                                                                    // 116\n      // Called at the beginning of a batch of updates. batchSize is the number                                        //\n      // of update calls to expect.                                                                                    //\n      //                                                                                                               //\n      // XXX This interface is pretty janky. reset probably ought to go back to                                        //\n      // being its own function, and callers shouldn't have to calculate                                               //\n      // batchSize. The optimization of not calling pause/remove should be                                             //\n      // delayed until later: the first call to update() should buffer its                                             //\n      // message, and then we can either directly apply it at endUpdate time if                                        //\n      // it was the only update, or do pauseObservers/apply/apply at the next                                          //\n      // update() if there's another one.                                                                              //\n      beginUpdate: function (batchSize, reset) {                                                                       // 127\n        // pause observers so users don't see flicker when updating several                                            //\n        // objects at once (including the post-reconnect reset-and-reapply                                             //\n        // stage), and so that a re-sorting of a query can take advantage of the                                       //\n        // full _diffQuery moved calculation instead of applying change one at a                                       //\n        // time.                                                                                                       //\n        if (batchSize > 1 || reset) self._collection.pauseObservers();                                                 // 133\n                                                                                                                       //\n        if (reset) self._collection.remove({});                                                                        // 136\n      },                                                                                                               //\n                                                                                                                       //\n      // Apply an update.                                                                                              //\n      // XXX better specify this interface (not in terms of a wire message)?                                           //\n      update: function (msg) {                                                                                         // 142\n        var mongoId = MongoID.idParse(msg.id);                                                                         // 143\n        var doc = self._collection.findOne(mongoId);                                                                   // 144\n                                                                                                                       //\n        // Is this a \"replace the whole doc\" message coming from the quiescence                                        //\n        // of method writes to an object? (Note that 'undefined' is a valid                                            //\n        // value meaning \"remove it\".)                                                                                 //\n        if (msg.msg === 'replace') {                                                                                   // 149\n          var replace = msg.replace;                                                                                   // 150\n          if (!replace) {                                                                                              // 151\n            if (doc) self._collection.remove(mongoId);                                                                 // 152\n          } else if (!doc) {                                                                                           //\n            self._collection.insert(replace);                                                                          // 155\n          } else {                                                                                                     //\n            // XXX check that replace has no $ ops                                                                     //\n            self._collection.update(mongoId, replace);                                                                 // 158\n          }                                                                                                            //\n          return;                                                                                                      // 160\n        } else if (msg.msg === 'added') {                                                                              //\n          if (doc) {                                                                                                   // 162\n            throw new Error(\"Expected not to find a document already present for an add\");                             // 163\n          }                                                                                                            //\n          self._collection.insert(_.extend({ _id: mongoId }, msg.fields));                                             // 165\n        } else if (msg.msg === 'removed') {                                                                            //\n          if (!doc) throw new Error(\"Expected to find a document already present for removed\");                        // 167\n          self._collection.remove(mongoId);                                                                            // 169\n        } else if (msg.msg === 'changed') {                                                                            //\n          if (!doc) throw new Error(\"Expected to find a document to change\");                                          // 171\n          if (!_.isEmpty(msg.fields)) {                                                                                // 173\n            var modifier = {};                                                                                         // 174\n            _.each(msg.fields, function (value, key) {                                                                 // 175\n              if (value === undefined) {                                                                               // 176\n                if (!modifier.$unset) modifier.$unset = {};                                                            // 177\n                modifier.$unset[key] = 1;                                                                              // 179\n              } else {                                                                                                 //\n                if (!modifier.$set) modifier.$set = {};                                                                // 181\n                modifier.$set[key] = value;                                                                            // 183\n              }                                                                                                        //\n            });                                                                                                        //\n            self._collection.update(mongoId, modifier);                                                                // 186\n          }                                                                                                            //\n        } else {                                                                                                       //\n          throw new Error(\"I don't know how to deal with this message\");                                               // 189\n        }                                                                                                              //\n      },                                                                                                               //\n                                                                                                                       //\n      // Called at the end of a batch of updates.                                                                      //\n      endUpdate: function () {                                                                                         // 195\n        self._collection.resumeObservers();                                                                            // 196\n      },                                                                                                               //\n                                                                                                                       //\n      // Called around method stub invocations to capture the original versions                                        //\n      // of modified documents.                                                                                        //\n      saveOriginals: function () {                                                                                     // 201\n        self._collection.saveOriginals();                                                                              // 202\n      },                                                                                                               //\n      retrieveOriginals: function () {                                                                                 // 204\n        return self._collection.retrieveOriginals();                                                                   // 205\n      },                                                                                                               //\n                                                                                                                       //\n      // Used to preserve current versions of documents across a store reset.                                          //\n      getDoc: function (id) {                                                                                          // 209\n        return self.findOne(id);                                                                                       // 210\n      }                                                                                                                //\n    });                                                                                                                //\n                                                                                                                       //\n    if (!ok) throw new Error(\"There is already a collection named '\" + name + \"'\");                                    // 214\n  }                                                                                                                    //\n                                                                                                                       //\n  // XXX don't define these until allow or deny is actually used for this                                              //\n  // collection. Could be hard if the security rules are only defined on the                                           //\n  // server.                                                                                                           //\n  self._defineMutationMethods();                                                                                       // 221\n                                                                                                                       //\n  // autopublish                                                                                                       //\n  if (Package.autopublish && !options._preventAutopublish && self._connection && self._connection.publish) {           // 224\n    self._connection.publish(null, function () {                                                                       // 226\n      return self.find();                                                                                              // 227\n    }, { is_auto: true });                                                                                             //\n  }                                                                                                                    //\n};                                                                                                                     //\n                                                                                                                       //\n///                                                                                                                    //\n/// Main collection API                                                                                                //\n///                                                                                                                    //\n                                                                                                                       //\n_.extend(Mongo.Collection.prototype, {                                                                                 // 237\n                                                                                                                       //\n  _getFindSelector: function (args) {                                                                                  // 239\n    if (args.length == 0) return {};else return args[0];                                                               // 240\n  },                                                                                                                   //\n                                                                                                                       //\n  _getFindOptions: function (args) {                                                                                   // 246\n    var self = this;                                                                                                   // 247\n    if (args.length < 2) {                                                                                             // 248\n      return { transform: self._transform };                                                                           // 249\n    } else {                                                                                                           //\n      check(args[1], Match.Optional(Match.ObjectIncluding({                                                            // 251\n        fields: Match.Optional(Match.OneOf(Object, undefined)),                                                        // 252\n        sort: Match.Optional(Match.OneOf(Object, Array, undefined)),                                                   // 253\n        limit: Match.Optional(Match.OneOf(Number, undefined)),                                                         // 254\n        skip: Match.Optional(Match.OneOf(Number, undefined))                                                           // 255\n      })));                                                                                                            //\n                                                                                                                       //\n      return _.extend({                                                                                                // 258\n        transform: self._transform                                                                                     // 259\n      }, args[1]);                                                                                                     //\n    }                                                                                                                  //\n  },                                                                                                                   //\n                                                                                                                       //\n  /**                                                                                                                  //\n   * @summary Find the documents in a collection that match the selector.                                              //\n   * @locus Anywhere                                                                                                   //\n   * @method find                                                                                                      //\n   * @memberOf Mongo.Collection                                                                                        //\n   * @instance                                                                                                         //\n   * @param {MongoSelector} [selector] A query describing the documents to find                                        //\n   * @param {Object} [options]                                                                                         //\n   * @param {MongoSortSpecifier} options.sort Sort order (default: natural order)                                      //\n   * @param {Number} options.skip Number of results to skip at the beginning                                           //\n   * @param {Number} options.limit Maximum number of results to return                                                 //\n   * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.                            //\n   * @param {Boolean} options.reactive (Client only) Default `true`; pass `false` to disable reactivity                //\n   * @param {Function} options.transform Overrides `transform` on the  [`Collection`](#collections) for this cursor.  Pass `null` to disable transformation.\n   * @returns {Mongo.Cursor}                                                                                           //\n   */                                                                                                                  //\n  find: function () /* selector, options */{                                                                           // 280\n    // Collection.find() (return all docs) behaves differently                                                         //\n    // from Collection.find(undefined) (return 0 docs).  so be                                                         //\n    // careful about the length of arguments.                                                                          //\n    var self = this;                                                                                                   // 284\n    var argArray = _.toArray(arguments);                                                                               // 285\n    return self._collection.find(self._getFindSelector(argArray), self._getFindOptions(argArray));                     // 286\n  },                                                                                                                   //\n                                                                                                                       //\n  /**                                                                                                                  //\n   * @summary Finds the first document that matches the selector, as ordered by sort and skip options.                 //\n   * @locus Anywhere                                                                                                   //\n   * @method findOne                                                                                                   //\n   * @memberOf Mongo.Collection                                                                                        //\n   * @instance                                                                                                         //\n   * @param {MongoSelector} [selector] A query describing the documents to find                                        //\n   * @param {Object} [options]                                                                                         //\n   * @param {MongoSortSpecifier} options.sort Sort order (default: natural order)                                      //\n   * @param {Number} options.skip Number of results to skip at the beginning                                           //\n   * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.                            //\n   * @param {Boolean} options.reactive (Client only) Default true; pass false to disable reactivity                    //\n   * @param {Function} options.transform Overrides `transform` on the [`Collection`](#collections) for this cursor.  Pass `null` to disable transformation.\n   * @returns {Object}                                                                                                 //\n   */                                                                                                                  //\n  findOne: function () /* selector, options */{                                                                        // 305\n    var self = this;                                                                                                   // 306\n    var argArray = _.toArray(arguments);                                                                               // 307\n    return self._collection.findOne(self._getFindSelector(argArray), self._getFindOptions(argArray));                  // 308\n  }                                                                                                                    //\n                                                                                                                       //\n});                                                                                                                    //\n                                                                                                                       //\nMongo.Collection._publishCursor = function (cursor, sub, collection) {                                                 // 314\n  var observeHandle = cursor.observeChanges({                                                                          // 315\n    added: function (id, fields) {                                                                                     // 316\n      sub.added(collection, id, fields);                                                                               // 317\n    },                                                                                                                 //\n    changed: function (id, fields) {                                                                                   // 319\n      sub.changed(collection, id, fields);                                                                             // 320\n    },                                                                                                                 //\n    removed: function (id) {                                                                                           // 322\n      sub.removed(collection, id);                                                                                     // 323\n    }                                                                                                                  //\n  });                                                                                                                  //\n                                                                                                                       //\n  // We don't call sub.ready() here: it gets called in livedata_server, after                                          //\n  // possibly calling _publishCursor on multiple returned cursors.                                                     //\n                                                                                                                       //\n  // register stop callback (expects lambda w/ no args).                                                               //\n  sub.onStop(function () {                                                                                             // 331\n    observeHandle.stop();                                                                                              // 331\n  });                                                                                                                  //\n                                                                                                                       //\n  // return the observeHandle in case it needs to be stopped early                                                     //\n  return observeHandle;                                                                                                // 334\n};                                                                                                                     //\n                                                                                                                       //\n// protect against dangerous selectors.  falsey and {_id: falsey} are both                                             //\n// likely programmer error, and not what you want, particularly for destructive                                        //\n// operations.  JS regexps don't serialize over DDP but can be trivially                                               //\n// replaced by $regex.                                                                                                 //\nMongo.Collection._rewriteSelector = function (selector) {                                                              // 341\n  // shorthand -- scalars match _id                                                                                    //\n  if (LocalCollection._selectorIsId(selector)) selector = { _id: selector };                                           // 343\n                                                                                                                       //\n  if (_.isArray(selector)) {                                                                                           // 346\n    // This is consistent with the Mongo console itself; if we don't do this                                           //\n    // check passing an empty array ends up selecting all items                                                        //\n    throw new Error(\"Mongo selector can't be an array.\");                                                              // 349\n  }                                                                                                                    //\n                                                                                                                       //\n  if (!selector || '_id' in selector && !selector._id)                                                                 // 352\n    // can't match anything                                                                                            //\n    return { _id: Random.id() };                                                                                       // 354\n                                                                                                                       //\n  var ret = {};                                                                                                        // 356\n  _.each(selector, function (value, key) {                                                                             // 357\n    // Mongo supports both {field: /foo/} and {field: {$regex: /foo/}}                                                 //\n    if (value instanceof RegExp) {                                                                                     // 359\n      ret[key] = convertRegexpToMongoSelector(value);                                                                  // 360\n    } else if (value && value.$regex instanceof RegExp) {                                                              //\n      ret[key] = convertRegexpToMongoSelector(value.$regex);                                                           // 362\n      // if value is {$regex: /foo/, $options: ...} then $options                                                      //\n      // override the ones set on $regex.                                                                              //\n      if (value.$options !== undefined) ret[key].$options = value.$options;                                            // 365\n    } else if (_.contains(['$or', '$and', '$nor'], key)) {                                                             //\n      // Translate lower levels of $and/$or/$nor                                                                       //\n      ret[key] = _.map(value, function (v) {                                                                           // 370\n        return Mongo.Collection._rewriteSelector(v);                                                                   // 371\n      });                                                                                                              //\n    } else {                                                                                                           //\n      ret[key] = value;                                                                                                // 374\n    }                                                                                                                  //\n  });                                                                                                                  //\n  return ret;                                                                                                          // 377\n};                                                                                                                     //\n                                                                                                                       //\n// convert a JS RegExp object to a Mongo {$regex: ..., $options: ...}                                                  //\n// selector                                                                                                            //\nfunction convertRegexpToMongoSelector(regexp) {                                                                        // 382\n  check(regexp, RegExp); // safety belt                                                                                // 383\n                                                                                                                       //\n  var selector = { $regex: regexp.source };                                                                            // 385\n  var regexOptions = '';                                                                                               // 386\n  // JS RegExp objects support 'i', 'm', and 'g'. Mongo regex $options                                                 //\n  // support 'i', 'm', 'x', and 's'. So we support 'i' and 'm' here.                                                   //\n  if (regexp.ignoreCase) regexOptions += 'i';                                                                          // 389\n  if (regexp.multiline) regexOptions += 'm';                                                                           // 391\n  if (regexOptions) selector.$options = regexOptions;                                                                  // 393\n                                                                                                                       //\n  return selector;                                                                                                     // 396\n};                                                                                                                     //\n                                                                                                                       //\n// 'insert' immediately returns the inserted document's new _id.                                                       //\n// The others return values immediately if you are in a stub, an in-memory                                             //\n// unmanaged collection, or a mongo-backed collection and you don't pass a                                             //\n// callback. 'update' and 'remove' return the number of affected                                                       //\n// documents. 'upsert' returns an object with keys 'numberAffected' and, if an                                         //\n// insert happened, 'insertedId'.                                                                                      //\n//                                                                                                                     //\n// Otherwise, the semantics are exactly like other methods: they take                                                  //\n// a callback as an optional last argument; if no callback is                                                          //\n// provided, they block until the operation is complete, and throw an                                                  //\n// exception if it fails; if a callback is provided, then they don't                                                   //\n// necessarily block, and they call the callback when they finish with error and                                       //\n// result arguments.  (The insert method provides the document ID as its result;                                       //\n// update and remove provide the number of affected docs as the result; upsert                                         //\n// provides an object with numberAffected and maybe insertedId.)                                                       //\n//                                                                                                                     //\n// On the client, blocking is impossible, so if a callback                                                             //\n// isn't provided, they just return immediately and any error                                                          //\n// information is lost.                                                                                                //\n//                                                                                                                     //\n// There's one more tweak. On the client, if you don't provide a                                                       //\n// callback, then if there is an error, a message will be logged with                                                  //\n// Meteor._debug.                                                                                                      //\n//                                                                                                                     //\n// The intent (though this is actually determined by the underlying                                                    //\n// drivers) is that the operations should be done synchronously, not                                                   //\n// generating their result until the database has acknowledged                                                         //\n// them. In the future maybe we should provide a flag to turn this                                                     //\n// off.                                                                                                                //\n                                                                                                                       //\n/**                                                                                                                    //\n * @summary Insert a document in the collection.  Returns its unique _id.                                              //\n * @locus Anywhere                                                                                                     //\n * @method  insert                                                                                                     //\n * @memberOf Mongo.Collection                                                                                          //\n * @instance                                                                                                           //\n * @param {Object} doc The document to insert. May not yet have an _id attribute, in which case Meteor will generate one for you.\n * @param {Function} [callback] Optional.  If present, called with an error object as the first argument and, if no error, the _id as the second.\n */                                                                                                                    //\nMongo.Collection.prototype.insert = (function () {                                                                     // 438\n  function insert(doc, callback) {                                                                                     // 438\n    // Make sure we were passed a document to insert                                                                   //\n    if (!doc) {                                                                                                        // 440\n      throw new Error(\"insert requires an argument\");                                                                  // 441\n    }                                                                                                                  //\n                                                                                                                       //\n    // Shallow-copy the document and possibly generate an ID                                                           //\n    doc = _.extend({}, doc);                                                                                           // 445\n                                                                                                                       //\n    if ('_id' in doc) {                                                                                                // 447\n      if (!doc._id || !(typeof doc._id === 'string' || doc._id instanceof Mongo.ObjectID)) {                           // 448\n        throw new Error(\"Meteor requires document _id fields to be non-empty strings or ObjectIDs\");                   // 450\n      }                                                                                                                //\n    } else {                                                                                                           //\n      var generateId = true;                                                                                           // 453\n                                                                                                                       //\n      // Don't generate the id if we're the client and the 'outermost' call                                            //\n      // This optimization saves us passing both the randomSeed and the id                                             //\n      // Passing both is redundant.                                                                                    //\n      if (this._isRemoteCollection()) {                                                                                // 458\n        var enclosing = DDP._CurrentInvocation.get();                                                                  // 459\n        if (!enclosing) {                                                                                              // 460\n          generateId = false;                                                                                          // 461\n        }                                                                                                              //\n      }                                                                                                                //\n                                                                                                                       //\n      if (generateId) {                                                                                                // 465\n        doc._id = this._makeNewID();                                                                                   // 466\n      }                                                                                                                //\n    }                                                                                                                  //\n                                                                                                                       //\n    // On inserts, always return the id that we generated; on all other                                                //\n    // operations, just return the result from the collection.                                                         //\n    var chooseReturnValueFromCollectionResult = function (result) {                                                    // 472\n      if (doc._id) {                                                                                                   // 473\n        return doc._id;                                                                                                // 474\n      }                                                                                                                //\n                                                                                                                       //\n      // XXX what is this for??                                                                                        //\n      // It's some iteraction between the callback to _callMutatorMethod and                                           //\n      // the return value conversion                                                                                   //\n      doc._id = result;                                                                                                // 480\n                                                                                                                       //\n      return result;                                                                                                   // 482\n    };                                                                                                                 //\n                                                                                                                       //\n    var wrappedCallback = wrapCallback(callback, chooseReturnValueFromCollectionResult);                               // 485\n                                                                                                                       //\n    if (this._isRemoteCollection()) {                                                                                  // 488\n      var result = this._callMutatorMethod(\"insert\", [doc], wrappedCallback);                                          // 489\n      return chooseReturnValueFromCollectionResult(result);                                                            // 490\n    }                                                                                                                  //\n                                                                                                                       //\n    // it's my collection.  descend into the collection object                                                         //\n    // and propagate any exception.                                                                                    //\n    try {                                                                                                              // 495\n      // If the user provided a callback and the collection implements this                                            //\n      // operation asynchronously, then queryRet will be undefined, and the                                            //\n      // result will be returned through the callback instead.                                                         //\n      var result = this._collection.insert(doc, wrappedCallback);                                                      // 499\n      return chooseReturnValueFromCollectionResult(result);                                                            // 500\n    } catch (e) {                                                                                                      //\n      if (callback) {                                                                                                  // 502\n        callback(e);                                                                                                   // 503\n        return null;                                                                                                   // 504\n      }                                                                                                                //\n      throw e;                                                                                                         // 506\n    }                                                                                                                  //\n  }                                                                                                                    //\n                                                                                                                       //\n  return insert;                                                                                                       //\n})();                                                                                                                  //\n                                                                                                                       //\n/**                                                                                                                    //\n * @summary Modify one or more documents in the collection. Returns the number of affected documents.                  //\n * @locus Anywhere                                                                                                     //\n * @method update                                                                                                      //\n * @memberOf Mongo.Collection                                                                                          //\n * @instance                                                                                                           //\n * @param {MongoSelector} selector Specifies which documents to modify                                                 //\n * @param {MongoModifier} modifier Specifies how to modify the documents                                               //\n * @param {Object} [options]                                                                                           //\n * @param {Boolean} options.multi True to modify all matching documents; false to only modify one of the matching documents (the default).\n * @param {Boolean} options.upsert True to insert a document if no matching documents are found.                       //\n * @param {Function} [callback] Optional.  If present, called with an error object as the first argument and, if no error, the number of affected documents as the second.\n */                                                                                                                    //\nMongo.Collection.prototype.update = (function () {                                                                     // 523\n  function update(selector, modifier) {                                                                                // 523\n    for (var _len = arguments.length, optionsAndCallback = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      optionsAndCallback[_key - 2] = arguments[_key];                                                                  // 523\n    }                                                                                                                  //\n                                                                                                                       //\n    var callback = popCallbackFromArgs(optionsAndCallback);                                                            // 524\n                                                                                                                       //\n    selector = Mongo.Collection._rewriteSelector(selector);                                                            // 526\n                                                                                                                       //\n    // We've already popped off the callback, so we are left with an array                                             //\n    // of one or zero items                                                                                            //\n    var options = _.clone(optionsAndCallback[0]) || {};                                                                // 530\n    if (options && options.upsert) {                                                                                   // 531\n      // set `insertedId` if absent.  `insertedId` is a Meteor extension.                                              //\n      if (options.insertedId) {                                                                                        // 533\n        if (!(typeof options.insertedId === 'string' || options.insertedId instanceof Mongo.ObjectID)) throw new Error(\"insertedId must be string or ObjectID\");\n      } else if (!selector._id) {                                                                                      //\n        options.insertedId = this._makeNewID();                                                                        // 538\n      }                                                                                                                //\n    }                                                                                                                  //\n                                                                                                                       //\n    var wrappedCallback = wrapCallback(callback);                                                                      // 542\n                                                                                                                       //\n    if (this._isRemoteCollection()) {                                                                                  // 544\n      var args = [selector, modifier, options];                                                                        // 545\n                                                                                                                       //\n      return this._callMutatorMethod(\"update\", args, wrappedCallback);                                                 // 551\n    }                                                                                                                  //\n                                                                                                                       //\n    // it's my collection.  descend into the collection object                                                         //\n    // and propagate any exception.                                                                                    //\n    try {                                                                                                              // 556\n      // If the user provided a callback and the collection implements this                                            //\n      // operation asynchronously, then queryRet will be undefined, and the                                            //\n      // result will be returned through the callback instead.                                                         //\n      return this._collection.update(selector, modifier, options, wrappedCallback);                                    // 560\n    } catch (e) {                                                                                                      //\n      if (callback) {                                                                                                  // 563\n        callback(e);                                                                                                   // 564\n        return null;                                                                                                   // 565\n      }                                                                                                                //\n      throw e;                                                                                                         // 567\n    }                                                                                                                  //\n  }                                                                                                                    //\n                                                                                                                       //\n  return update;                                                                                                       //\n})();                                                                                                                  //\n                                                                                                                       //\n/**                                                                                                                    //\n * @summary Remove documents from the collection                                                                       //\n * @locus Anywhere                                                                                                     //\n * @method remove                                                                                                      //\n * @memberOf Mongo.Collection                                                                                          //\n * @instance                                                                                                           //\n * @param {MongoSelector} selector Specifies which documents to remove                                                 //\n * @param {Function} [callback] Optional.  If present, called with an error object as its argument.                    //\n */                                                                                                                    //\nMongo.Collection.prototype.remove = (function () {                                                                     // 580\n  function remove(selector, callback) {                                                                                // 580\n    selector = Mongo.Collection._rewriteSelector(selector);                                                            // 581\n                                                                                                                       //\n    var wrappedCallback = wrapCallback(callback);                                                                      // 583\n                                                                                                                       //\n    if (this._isRemoteCollection()) {                                                                                  // 585\n      return this._callMutatorMethod(\"remove\", [selector], wrappedCallback);                                           // 586\n    }                                                                                                                  //\n                                                                                                                       //\n    // it's my collection.  descend into the collection object                                                         //\n    // and propagate any exception.                                                                                    //\n    try {                                                                                                              // 591\n      // If the user provided a callback and the collection implements this                                            //\n      // operation asynchronously, then queryRet will be undefined, and the                                            //\n      // result will be returned through the callback instead.                                                         //\n      return this._collection.remove(selector, wrappedCallback);                                                       // 595\n    } catch (e) {                                                                                                      //\n      if (callback) {                                                                                                  // 597\n        callback(e);                                                                                                   // 598\n        return null;                                                                                                   // 599\n      }                                                                                                                //\n      throw e;                                                                                                         // 601\n    }                                                                                                                  //\n  }                                                                                                                    //\n                                                                                                                       //\n  return remove;                                                                                                       //\n})();                                                                                                                  //\n                                                                                                                       //\n// Determine if this collection is simply a minimongo representation of a real                                         //\n// database on another server                                                                                          //\nMongo.Collection.prototype._isRemoteCollection = (function () {                                                        // 607\n  function _isRemoteCollection() {                                                                                     // 607\n    // XXX see #MeteorServerNull                                                                                       //\n    return this._connection && this._connection !== Meteor.server;                                                     // 609\n  }                                                                                                                    //\n                                                                                                                       //\n  return _isRemoteCollection;                                                                                          //\n})();                                                                                                                  //\n                                                                                                                       //\n// Convert the callback to not return a result if there is an error                                                    //\nfunction wrapCallback(callback, convertResult) {                                                                       // 613\n  if (!callback) {                                                                                                     // 614\n    return;                                                                                                            // 615\n  }                                                                                                                    //\n                                                                                                                       //\n  // If no convert function was passed in, just use a \"blank function\"                                                 //\n  convertResult = convertResult || _.identity;                                                                         // 619\n                                                                                                                       //\n  return function (error, result) {                                                                                    // 621\n    callback(error, !error && convertResult(result));                                                                  // 622\n  };                                                                                                                   //\n}                                                                                                                      //\n                                                                                                                       //\n/**                                                                                                                    //\n * @summary Modify one or more documents in the collection, or insert one if no matching documents were found. Returns an object with keys `numberAffected` (the number of documents modified)  and `insertedId` (the unique _id of the document that was inserted, if any).\n * @locus Anywhere                                                                                                     //\n * @param {MongoSelector} selector Specifies which documents to modify                                                 //\n * @param {MongoModifier} modifier Specifies how to modify the documents                                               //\n * @param {Object} [options]                                                                                           //\n * @param {Boolean} options.multi True to modify all matching documents; false to only modify one of the matching documents (the default).\n * @param {Function} [callback] Optional.  If present, called with an error object as the first argument and, if no error, the number of affected documents as the second.\n */                                                                                                                    //\nMongo.Collection.prototype.upsert = (function () {                                                                     // 635\n  function upsert(selector, modifier, options, callback) {                                                             // 635\n    if (!callback && typeof options === \"function\") {                                                                  // 637\n      callback = options;                                                                                              // 638\n      options = {};                                                                                                    // 639\n    }                                                                                                                  //\n                                                                                                                       //\n    var updateOptions = _.extend({}, options, {                                                                        // 642\n      _returnObject: true,                                                                                             // 643\n      upsert: true                                                                                                     // 644\n    });                                                                                                                //\n                                                                                                                       //\n    return this.update(selector, modifier, updateOptions, callback);                                                   // 647\n  }                                                                                                                    //\n                                                                                                                       //\n  return upsert;                                                                                                       //\n})();                                                                                                                  //\n                                                                                                                       //\n// We'll actually design an index API later. For now, we just pass through to                                          //\n// Mongo's, but make it synchronous.                                                                                   //\nMongo.Collection.prototype._ensureIndex = function (index, options) {                                                  // 652\n  var self = this;                                                                                                     // 653\n  if (!self._collection._ensureIndex) throw new Error(\"Can only call _ensureIndex on server collections\");             // 654\n  self._collection._ensureIndex(index, options);                                                                       // 656\n};                                                                                                                     //\nMongo.Collection.prototype._dropIndex = function (index) {                                                             // 658\n  var self = this;                                                                                                     // 659\n  if (!self._collection._dropIndex) throw new Error(\"Can only call _dropIndex on server collections\");                 // 660\n  self._collection._dropIndex(index);                                                                                  // 662\n};                                                                                                                     //\nMongo.Collection.prototype._dropCollection = function () {                                                             // 664\n  var self = this;                                                                                                     // 665\n  if (!self._collection.dropCollection) throw new Error(\"Can only call _dropCollection on server collections\");        // 666\n  self._collection.dropCollection();                                                                                   // 668\n};                                                                                                                     //\nMongo.Collection.prototype._createCappedCollection = function (byteSize, maxDocuments) {                               // 670\n  var self = this;                                                                                                     // 671\n  if (!self._collection._createCappedCollection) throw new Error(\"Can only call _createCappedCollection on server collections\");\n  self._collection._createCappedCollection(byteSize, maxDocuments);                                                    // 674\n};                                                                                                                     //\n                                                                                                                       //\n/**                                                                                                                    //\n * @summary Returns the [`Collection`](http://mongodb.github.io/node-mongodb-native/1.4/api-generated/collection.html) object corresponding to this collection from the [npm `mongodb` driver module](https://www.npmjs.com/package/mongodb) which is wrapped by `Mongo.Collection`.\n * @locus Server                                                                                                       //\n */                                                                                                                    //\nMongo.Collection.prototype.rawCollection = function () {                                                               // 681\n  var self = this;                                                                                                     // 682\n  if (!self._collection.rawCollection) {                                                                               // 683\n    throw new Error(\"Can only call rawCollection on server collections\");                                              // 684\n  }                                                                                                                    //\n  return self._collection.rawCollection();                                                                             // 686\n};                                                                                                                     //\n                                                                                                                       //\n/**                                                                                                                    //\n * @summary Returns the [`Db`](http://mongodb.github.io/node-mongodb-native/1.4/api-generated/db.html) object corresponding to this collection's database connection from the [npm `mongodb` driver module](https://www.npmjs.com/package/mongodb) which is wrapped by `Mongo.Collection`.\n * @locus Server                                                                                                       //\n */                                                                                                                    //\nMongo.Collection.prototype.rawDatabase = function () {                                                                 // 693\n  var self = this;                                                                                                     // 694\n  if (!(self._driver.mongo && self._driver.mongo.db)) {                                                                // 695\n    throw new Error(\"Can only call rawDatabase on server collections\");                                                // 696\n  }                                                                                                                    //\n  return self._driver.mongo.db;                                                                                        // 698\n};                                                                                                                     //\n                                                                                                                       //\n/**                                                                                                                    //\n * @summary Create a Mongo-style `ObjectID`.  If you don't specify a `hexString`, the `ObjectID` will generated randomly (not using MongoDB's ID construction rules).\n * @locus Anywhere                                                                                                     //\n * @class                                                                                                              //\n * @param {String} [hexString] Optional.  The 24-character hexadecimal contents of the ObjectID to create              //\n */                                                                                                                    //\nMongo.ObjectID = MongoID.ObjectID;                                                                                     // 708\n                                                                                                                       //\n/**                                                                                                                    //\n * @summary To create a cursor, use find. To access the documents in a cursor, use forEach, map, or fetch.             //\n * @class                                                                                                              //\n * @instanceName cursor                                                                                                //\n */                                                                                                                    //\nMongo.Cursor = LocalCollection.Cursor;                                                                                 // 715\n                                                                                                                       //\n/**                                                                                                                    //\n * @deprecated in 0.9.1                                                                                                //\n */                                                                                                                    //\nMongo.Collection.Cursor = Mongo.Cursor;                                                                                // 720\n                                                                                                                       //\n/**                                                                                                                    //\n * @deprecated in 0.9.1                                                                                                //\n */                                                                                                                    //\nMongo.Collection.ObjectID = Mongo.ObjectID;                                                                            // 725\n                                                                                                                       //\n/**                                                                                                                    //\n * @deprecated in 0.9.1                                                                                                //\n */                                                                                                                    //\nMeteor.Collection = Mongo.Collection;                                                                                  // 730\n                                                                                                                       //\n// Allow deny stuff is now in the allow-deny package                                                                   //\n_.extend(Meteor.Collection.prototype, AllowDeny.CollectionPrototype);                                                  // 733\n                                                                                                                       //\nfunction popCallbackFromArgs(args) {                                                                                   // 735\n  // Pull off any callback (or perhaps a 'callback' variable that was passed                                           //\n  // in undefined, like how 'upsert' does it).                                                                         //\n  if (args.length && (args[args.length - 1] === undefined || args[args.length - 1] instanceof Function)) {             // 738\n    return args.pop();                                                                                                 // 741\n  }                                                                                                                    //\n}                                                                                                                      //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}});\nrequire(\"./node_modules/meteor/mongo/mongo_driver.js\");\nrequire(\"./node_modules/meteor/mongo/oplog_tailing.js\");\nrequire(\"./node_modules/meteor/mongo/observe_multiplex.js\");\nrequire(\"./node_modules/meteor/mongo/doc_fetcher.js\");\nrequire(\"./node_modules/meteor/mongo/polling_observe_driver.js\");\nrequire(\"./node_modules/meteor/mongo/oplog_observe_driver.js\");\nrequire(\"./node_modules/meteor/mongo/local_collection_driver.js\");\nrequire(\"./node_modules/meteor/mongo/remote_collection_driver.js\");\nrequire(\"./node_modules/meteor/mongo/collection.js\");\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package.mongo = {}, {\n  MongoInternals: MongoInternals,\n  MongoTest: MongoTest,\n  Mongo: Mongo\n});\n\n})();\n","servePath":"/packages/mongo.js","sourceMap":{"version":3,"sources":["/packages/mongo/mongo_driver.js","/packages/mongo/oplog_tailing.js","/packages/mongo/observe_multiplex.js","/packages/mongo/doc_fetcher.js","/packages/mongo/polling_observe_driver.js","/packages/mongo/oplog_observe_driver.js","/packages/mongo/local_collection_driver.js","/packages/mongo/remote_collection_driver.js","/packages/mongo/collection.js"],"names":[],"mappings":"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","file":"/packages/mongo.js","sourcesContent":["/**\n * Provide a synchronous Collection API using fibers, backed by\n * MongoDB.  This is only for use on the server, and mostly identical\n * to the client API.\n *\n * NOTE: the public API methods must be run within a fiber. If you call\n * these outside of a fiber they will explode!\n */\n\nvar path = Npm.require('path');\nvar MongoDB = NpmModuleMongodb;\nvar Fiber = Npm.require('fibers');\nvar Future = Npm.require(path.join('fibers', 'future'));\n\nMongoInternals = {};\nMongoTest = {};\n\nMongoInternals.NpmModules = {\n  mongodb: {\n    version: NpmModuleMongodbVersion,\n    module: MongoDB\n  }\n};\n\n// Older version of what is now available via\n// MongoInternals.NpmModules.mongodb.module.  It was never documented, but\n// people do use it.\n// XXX COMPAT WITH 1.0.3.2\nMongoInternals.NpmModule = MongoDB;\n\n// This is used to add or remove EJSON from the beginning of everything nested\n// inside an EJSON custom type. It should only be called on pure JSON!\nvar replaceNames = function (filter, thing) {\n  if (typeof thing === \"object\") {\n    if (_.isArray(thing)) {\n      return _.map(thing, _.bind(replaceNames, null, filter));\n    }\n    var ret = {};\n    _.each(thing, function (value, key) {\n      ret[filter(key)] = replaceNames(filter, value);\n    });\n    return ret;\n  }\n  return thing;\n};\n\n// Ensure that EJSON.clone keeps a Timestamp as a Timestamp (instead of just\n// doing a structural clone).\n// XXX how ok is this? what if there are multiple copies of MongoDB loaded?\nMongoDB.Timestamp.prototype.clone = function () {\n  // Timestamps should be immutable.\n  return this;\n};\n\nvar makeMongoLegal = function (name) { return \"EJSON\" + name; };\nvar unmakeMongoLegal = function (name) { return name.substr(5); };\n\nvar replaceMongoAtomWithMeteor = function (document) {\n  if (document instanceof MongoDB.Binary) {\n    var buffer = document.value(true);\n    return new Uint8Array(buffer);\n  }\n  if (document instanceof MongoDB.ObjectID) {\n    return new Mongo.ObjectID(document.toHexString());\n  }\n  if (document[\"EJSON$type\"] && document[\"EJSON$value\"]\n      && _.size(document) === 2) {\n    return EJSON.fromJSONValue(replaceNames(unmakeMongoLegal, document));\n  }\n  if (document instanceof MongoDB.Timestamp) {\n    // For now, the Meteor representation of a Mongo timestamp type (not a date!\n    // this is a weird internal thing used in the oplog!) is the same as the\n    // Mongo representation. We need to do this explicitly or else we would do a\n    // structural clone and lose the prototype.\n    return document;\n  }\n  return undefined;\n};\n\nvar replaceMeteorAtomWithMongo = function (document) {\n  if (EJSON.isBinary(document)) {\n    // This does more copies than we'd like, but is necessary because\n    // MongoDB.BSON only looks like it takes a Uint8Array (and doesn't actually\n    // serialize it correctly).\n    return new MongoDB.Binary(new Buffer(document));\n  }\n  if (document instanceof Mongo.ObjectID) {\n    return new MongoDB.ObjectID(document.toHexString());\n  }\n  if (document instanceof MongoDB.Timestamp) {\n    // For now, the Meteor representation of a Mongo timestamp type (not a date!\n    // this is a weird internal thing used in the oplog!) is the same as the\n    // Mongo representation. We need to do this explicitly or else we would do a\n    // structural clone and lose the prototype.\n    return document;\n  }\n  if (EJSON._isCustomType(document)) {\n    return replaceNames(makeMongoLegal, EJSON.toJSONValue(document));\n  }\n  // It is not ordinarily possible to stick dollar-sign keys into mongo\n  // so we don't bother checking for things that need escaping at this time.\n  return undefined;\n};\n\nvar replaceTypes = function (document, atomTransformer) {\n  if (typeof document !== 'object' || document === null)\n    return document;\n\n  var replacedTopLevelAtom = atomTransformer(document);\n  if (replacedTopLevelAtom !== undefined)\n    return replacedTopLevelAtom;\n\n  var ret = document;\n  _.each(document, function (val, key) {\n    var valReplaced = replaceTypes(val, atomTransformer);\n    if (val !== valReplaced) {\n      // Lazy clone. Shallow copy.\n      if (ret === document)\n        ret = _.clone(document);\n      ret[key] = valReplaced;\n    }\n  });\n  return ret;\n};\n\n\nMongoConnection = function (url, options) {\n  var self = this;\n  options = options || {};\n  self._observeMultiplexers = {};\n  self._onFailoverHook = new Hook;\n\n  var mongoOptions = {db: {safe: true}, server: {}, replSet: {}};\n\n  // Set autoReconnect to true, unless passed on the URL. Why someone\n  // would want to set autoReconnect to false, I'm not really sure, but\n  // keeping this for backwards compatibility for now.\n  if (!(/[\\?&]auto_?[rR]econnect=/.test(url))) {\n    mongoOptions.server.auto_reconnect = true;\n  }\n\n  // Disable the native parser by default, unless specifically enabled\n  // in the mongo URL.\n  // - The native driver can cause errors which normally would be\n  //   thrown, caught, and handled into segfaults that take down the\n  //   whole app.\n  // - Binary modules don't yet work when you bundle and move the bundle\n  //   to a different platform (aka deploy)\n  // We should revisit this after binary npm module support lands.\n  if (!(/[\\?&]native_?[pP]arser=/.test(url))) {\n    mongoOptions.db.native_parser = false;\n  }\n\n  // XXX maybe we should have a better way of allowing users to configure the\n  // underlying Mongo driver\n  if (_.has(options, 'poolSize')) {\n    // If we just set this for \"server\", replSet will override it. If we just\n    // set it for replSet, it will be ignored if we're not using a replSet.\n    mongoOptions.server.poolSize = options.poolSize;\n    mongoOptions.replSet.poolSize = options.poolSize;\n  }\n\n  self.db = null;\n  // We keep track of the ReplSet's primary, so that we can trigger hooks when\n  // it changes.  The Node driver's joined callback seems to fire way too\n  // often, which is why we need to track it ourselves.\n  self._primary = null;\n  self._oplogHandle = null;\n  self._docFetcher = null;\n\n\n  var connectFuture = new Future;\n  MongoDB.connect(\n    url,\n    mongoOptions,\n    Meteor.bindEnvironment(\n      function (err, db) {\n        if (err) {\n          throw err;\n        }\n\n        // First, figure out what the current primary is, if any.\n        if (db.serverConfig._state.master)\n          self._primary = db.serverConfig._state.master.name;\n        db.serverConfig.on(\n          'joined', Meteor.bindEnvironment(function (kind, doc) {\n            if (kind === 'primary') {\n              if (doc.primary !== self._primary) {\n                self._primary = doc.primary;\n                self._onFailoverHook.each(function (callback) {\n                  callback();\n                  return true;\n                });\n              }\n            } else if (doc.me === self._primary) {\n              // The thing we thought was primary is now something other than\n              // primary.  Forget that we thought it was primary.  (This means\n              // that if a server stops being primary and then starts being\n              // primary again without another server becoming primary in the\n              // middle, we'll correctly count it as a failover.)\n              self._primary = null;\n            }\n          }));\n\n        // Allow the constructor to return.\n        connectFuture['return'](db);\n      },\n      connectFuture.resolver()  // onException\n    )\n  );\n\n  // Wait for the connection to be successful; throws on failure.\n  self.db = connectFuture.wait();\n\n  if (options.oplogUrl && ! Package['disable-oplog']) {\n    self._oplogHandle = new OplogHandle(options.oplogUrl, self.db.databaseName);\n    self._docFetcher = new DocFetcher(self);\n  }\n};\n\nMongoConnection.prototype.close = function() {\n  var self = this;\n\n  if (! self.db)\n    throw Error(\"close called before Connection created?\");\n\n  // XXX probably untested\n  var oplogHandle = self._oplogHandle;\n  self._oplogHandle = null;\n  if (oplogHandle)\n    oplogHandle.stop();\n\n  // Use Future.wrap so that errors get thrown. This happens to\n  // work even outside a fiber since the 'close' method is not\n  // actually asynchronous.\n  Future.wrap(_.bind(self.db.close, self.db))(true).wait();\n};\n\n// Returns the Mongo Collection object; may yield.\nMongoConnection.prototype.rawCollection = function (collectionName) {\n  var self = this;\n\n  if (! self.db)\n    throw Error(\"rawCollection called before Connection created?\");\n\n  var future = new Future;\n  self.db.collection(collectionName, future.resolver());\n  return future.wait();\n};\n\nMongoConnection.prototype._createCappedCollection = function (\n    collectionName, byteSize, maxDocuments) {\n  var self = this;\n\n  if (! self.db)\n    throw Error(\"_createCappedCollection called before Connection created?\");\n\n  var future = new Future();\n  self.db.createCollection(\n    collectionName,\n    { capped: true, size: byteSize, max: maxDocuments },\n    future.resolver());\n  future.wait();\n};\n\n// This should be called synchronously with a write, to create a\n// transaction on the current write fence, if any. After we can read\n// the write, and after observers have been notified (or at least,\n// after the observer notifiers have added themselves to the write\n// fence), you should call 'committed()' on the object returned.\nMongoConnection.prototype._maybeBeginWrite = function () {\n  var self = this;\n  var fence = DDPServer._CurrentWriteFence.get();\n  if (fence)\n    return fence.beginWrite();\n  else\n    return {committed: function () {}};\n};\n\n// Internal interface: adds a callback which is called when the Mongo primary\n// changes. Returns a stop handle.\nMongoConnection.prototype._onFailover = function (callback) {\n  return this._onFailoverHook.register(callback);\n};\n\n\n//////////// Public API //////////\n\n// The write methods block until the database has confirmed the write (it may\n// not be replicated or stable on disk, but one server has confirmed it) if no\n// callback is provided. If a callback is provided, then they call the callback\n// when the write is confirmed. They return nothing on success, and raise an\n// exception on failure.\n//\n// After making a write (with insert, update, remove), observers are\n// notified asynchronously. If you want to receive a callback once all\n// of the observer notifications have landed for your write, do the\n// writes inside a write fence (set DDPServer._CurrentWriteFence to a new\n// _WriteFence, and then set a callback on the write fence.)\n//\n// Since our execution environment is single-threaded, this is\n// well-defined -- a write \"has been made\" if it's returned, and an\n// observer \"has been notified\" if its callback has returned.\n\nvar writeCallback = function (write, refresh, callback) {\n  return function (err, result) {\n    if (! err) {\n      // XXX We don't have to run this on error, right?\n      try {\n        refresh();\n      } catch (refreshErr) {\n        if (callback) {\n          callback(refreshErr);\n          return;\n        } else {\n          throw refreshErr;\n        }\n      }\n    }\n    write.committed();\n    if (callback)\n      callback(err, result);\n    else if (err)\n      throw err;\n  };\n};\n\nvar bindEnvironmentForWrite = function (callback) {\n  return Meteor.bindEnvironment(callback, \"Mongo write\");\n};\n\nMongoConnection.prototype._insert = function (collection_name, document,\n                                              callback) {\n  var self = this;\n\n  var sendError = function (e) {\n    if (callback)\n      return callback(e);\n    throw e;\n  };\n\n  if (collection_name === \"___meteor_failure_test_collection\") {\n    var e = new Error(\"Failure test\");\n    e.expected = true;\n    sendError(e);\n    return;\n  }\n\n  if (!(LocalCollection._isPlainObject(document) &&\n        !EJSON._isCustomType(document))) {\n    sendError(new Error(\n      \"Only plain objects may be inserted into MongoDB\"));\n    return;\n  }\n\n  var write = self._maybeBeginWrite();\n  var refresh = function () {\n    Meteor.refresh({collection: collection_name, id: document._id });\n  };\n  callback = bindEnvironmentForWrite(writeCallback(write, refresh, callback));\n  try {\n    var collection = self.rawCollection(collection_name);\n    collection.insert(replaceTypes(document, replaceMeteorAtomWithMongo),\n                      {safe: true}, callback);\n  } catch (e) {\n    write.committed();\n    throw e;\n  }\n};\n\n// Cause queries that may be affected by the selector to poll in this write\n// fence.\nMongoConnection.prototype._refresh = function (collectionName, selector) {\n  var self = this;\n  var refreshKey = {collection: collectionName};\n  // If we know which documents we're removing, don't poll queries that are\n  // specific to other documents. (Note that multiple notifications here should\n  // not cause multiple polls, since all our listener is doing is enqueueing a\n  // poll.)\n  var specificIds = LocalCollection._idsMatchedBySelector(selector);\n  if (specificIds) {\n    _.each(specificIds, function (id) {\n      Meteor.refresh(_.extend({id: id}, refreshKey));\n    });\n  } else {\n    Meteor.refresh(refreshKey);\n  }\n};\n\nMongoConnection.prototype._remove = function (collection_name, selector,\n                                              callback) {\n  var self = this;\n\n  if (collection_name === \"___meteor_failure_test_collection\") {\n    var e = new Error(\"Failure test\");\n    e.expected = true;\n    if (callback)\n      return callback(e);\n    else\n      throw e;\n  }\n\n  var write = self._maybeBeginWrite();\n  var refresh = function () {\n    self._refresh(collection_name, selector);\n  };\n  callback = bindEnvironmentForWrite(writeCallback(write, refresh, callback));\n\n  try {\n    var collection = self.rawCollection(collection_name);\n    collection.remove(replaceTypes(selector, replaceMeteorAtomWithMongo),\n                      {safe: true}, callback);\n  } catch (e) {\n    write.committed();\n    throw e;\n  }\n};\n\nMongoConnection.prototype._dropCollection = function (collectionName, cb) {\n  var self = this;\n\n  var write = self._maybeBeginWrite();\n  var refresh = function () {\n    Meteor.refresh({collection: collectionName, id: null,\n                    dropCollection: true});\n  };\n  cb = bindEnvironmentForWrite(writeCallback(write, refresh, cb));\n\n  try {\n    var collection = self.rawCollection(collectionName);\n    collection.drop(cb);\n  } catch (e) {\n    write.committed();\n    throw e;\n  }\n};\n\n// For testing only.  Slightly better than `c.rawDatabase().dropDatabase()`\n// because it lets the test's fence wait for it to be complete.\nMongoConnection.prototype._dropDatabase = function (cb) {\n  var self = this;\n\n  var write = self._maybeBeginWrite();\n  var refresh = function () {\n    Meteor.refresh({ dropDatabase: true });\n  };\n  cb = bindEnvironmentForWrite(writeCallback(write, refresh, cb));\n\n  try {\n    self.db.dropDatabase(cb);\n  } catch (e) {\n    write.committed();\n    throw e;\n  }\n};\n\nMongoConnection.prototype._update = function (collection_name, selector, mod,\n                                              options, callback) {\n  var self = this;\n\n  if (! callback && options instanceof Function) {\n    callback = options;\n    options = null;\n  }\n\n  if (collection_name === \"___meteor_failure_test_collection\") {\n    var e = new Error(\"Failure test\");\n    e.expected = true;\n    if (callback)\n      return callback(e);\n    else\n      throw e;\n  }\n\n  // explicit safety check. null and undefined can crash the mongo\n  // driver. Although the node driver and minimongo do 'support'\n  // non-object modifier in that they don't crash, they are not\n  // meaningful operations and do not do anything. Defensively throw an\n  // error here.\n  if (!mod || typeof mod !== 'object')\n    throw new Error(\"Invalid modifier. Modifier must be an object.\");\n\n  if (!(LocalCollection._isPlainObject(mod) &&\n        !EJSON._isCustomType(mod))) {\n    throw new Error(\n      \"Only plain objects may be used as replacement\" +\n        \" documents in MongoDB\");\n    return;\n  }\n\n  if (!options) options = {};\n\n  var write = self._maybeBeginWrite();\n  var refresh = function () {\n    self._refresh(collection_name, selector);\n  };\n  callback = writeCallback(write, refresh, callback);\n  try {\n    var collection = self.rawCollection(collection_name);\n    var mongoOpts = {safe: true};\n    // explictly enumerate options that minimongo supports\n    if (options.upsert) mongoOpts.upsert = true;\n    if (options.multi) mongoOpts.multi = true;\n    // Lets you get a more more full result from MongoDB. Use with caution:\n    // might not work with C.upsert (as opposed to C.update({upsert:true}) or\n    // with simulated upsert.\n    if (options.fullResult) mongoOpts.fullResult = true;\n\n    var mongoSelector = replaceTypes(selector, replaceMeteorAtomWithMongo);\n    var mongoMod = replaceTypes(mod, replaceMeteorAtomWithMongo);\n\n    var isModify = isModificationMod(mongoMod);\n    var knownId = selector._id || mod._id;\n\n    if (options._forbidReplace && ! isModify) {\n      var e = new Error(\"Invalid modifier. Replacements are forbidden.\");\n      if (callback) {\n        return callback(e);\n      } else {\n        throw e;\n      }\n    }\n\n    if (options.upsert && (! knownId) && options.insertedId) {\n      // XXX If we know we're using Mongo 2.6 (and this isn't a replacement)\n      //     we should be able to just use $setOnInsert instead of this\n      //     simulated upsert thing. (We can't use $setOnInsert with\n      //     replacements because there's nowhere to write it, and $setOnInsert\n      //     can't set _id on Mongo 2.4.)\n      //\n      //     Also, in the future we could do a real upsert for the mongo id\n      //     generation case, if the the node mongo driver gives us back the id\n      //     of the upserted doc (which our current version does not).\n      //\n      //     For more context, see\n      //     https://github.com/meteor/meteor/issues/2278#issuecomment-64252706\n      simulateUpsertWithInsertedId(\n        collection, mongoSelector, mongoMod,\n        isModify, options,\n        // This callback does not need to be bindEnvironment'ed because\n        // simulateUpsertWithInsertedId() wraps it and then passes it through\n        // bindEnvironmentForWrite.\n        function (err, result) {\n          // If we got here via a upsert() call, then options._returnObject will\n          // be set and we should return the whole object. Otherwise, we should\n          // just return the number of affected docs to match the mongo API.\n          if (result && ! options._returnObject)\n            callback(err, result.numberAffected);\n          else\n            callback(err, result);\n        }\n      );\n    } else {\n      collection.update(\n        mongoSelector, mongoMod, mongoOpts,\n        bindEnvironmentForWrite(function (err, result, extra) {\n          if (! err) {\n            if (result && options._returnObject) {\n              result = { numberAffected: result };\n              // If this was an upsert() call, and we ended up\n              // inserting a new doc and we know its id, then\n              // return that id as well.\n              if (options.upsert && knownId &&\n                  ! extra.updatedExisting)\n                result.insertedId = knownId;\n            }\n          }\n          callback(err, result);\n        }));\n    }\n  } catch (e) {\n    write.committed();\n    throw e;\n  }\n};\n\nvar isModificationMod = function (mod) {\n  var isReplace = false;\n  var isModify = false;\n  for (var k in mod) {\n    if (k.substr(0, 1) === '$') {\n      isModify = true;\n    } else {\n      isReplace = true;\n    }\n  }\n  if (isModify && isReplace) {\n    throw new Error(\n      \"Update parameter cannot have both modifier and non-modifier fields.\");\n  }\n  return isModify;\n};\n\nvar NUM_OPTIMISTIC_TRIES = 3;\n\n// exposed for testing\nMongoConnection._isCannotChangeIdError = function (err) {\n  // First check for what this error looked like in Mongo 2.4.  Either of these\n  // checks should work, but just to be safe...\n  if (err.code === 13596)\n    return true;\n  if (err.err.indexOf(\"cannot change _id of a document\") === 0)\n    return true;\n\n  // Now look for what it looks like in Mongo 2.6.  We don't use the error code\n  // here, because the error code we observed it producing (16837) appears to be\n  // a far more generic error code based on examining the source.\n  if (err.err.indexOf(\"The _id field cannot be changed\") === 0)\n    return true;\n\n  return false;\n};\n\nvar simulateUpsertWithInsertedId = function (collection, selector, mod,\n                                             isModify, options, callback) {\n  // STRATEGY:  First try doing a plain update.  If it affected 0 documents,\n  // then without affecting the database, we know we should probably do an\n  // insert.  We then do a *conditional* insert that will fail in the case\n  // of a race condition.  This conditional insert is actually an\n  // upsert-replace with an _id, which will never successfully update an\n  // existing document.  If this upsert fails with an error saying it\n  // couldn't change an existing _id, then we know an intervening write has\n  // caused the query to match something.  We go back to step one and repeat.\n  // Like all \"optimistic write\" schemes, we rely on the fact that it's\n  // unlikely our writes will continue to be interfered with under normal\n  // circumstances (though sufficiently heavy contention with writers\n  // disagreeing on the existence of an object will cause writes to fail\n  // in theory).\n\n  var newDoc;\n  // Run this code up front so that it fails fast if someone uses\n  // a Mongo update operator we don't support.\n  if (isModify) {\n    // We've already run replaceTypes/replaceMeteorAtomWithMongo on\n    // selector and mod.  We assume it doesn't matter, as far as\n    // the behavior of modifiers is concerned, whether `_modify`\n    // is run on EJSON or on mongo-converted EJSON.\n    var selectorDoc = LocalCollection._removeDollarOperators(selector);\n\n    newDoc = selectorDoc;\n\n    // Convert dotted keys into objects. (Resolves issue #4522).\n    _.each(newDoc, function (value, key) {\n      var trail = key.split(\".\");\n\n      if (trail.length > 1) {\n        //Key is dotted. Convert it into an object.\n        delete newDoc[key];\n\n        var obj = newDoc,\n            leaf = trail.pop();\n\n        // XXX It is not quite certain what should be done if there are clashing\n        // keys on the trail of the dotted key. For now we will just override it\n        // It wouldn't be a very sane query in the first place, but should look\n        // up what mongo does in this case.\n\n        while ((key = trail.shift())) {\n          if (typeof obj[key] !== \"object\") {\n            obj[key] = {};\n          }\n\n          obj = obj[key];\n        }\n\n        obj[leaf] = value;\n      }\n    });\n\n    LocalCollection._modify(newDoc, mod, {isInsert: true});\n  } else {\n    newDoc = mod;\n  }\n\n  var insertedId = options.insertedId; // must exist\n  var mongoOptsForUpdate = {\n    safe: true,\n    multi: options.multi\n  };\n  var mongoOptsForInsert = {\n    safe: true,\n    upsert: true\n  };\n\n  var tries = NUM_OPTIMISTIC_TRIES;\n\n  var doUpdate = function () {\n    tries--;\n    if (! tries) {\n      callback(new Error(\"Upsert failed after \" + NUM_OPTIMISTIC_TRIES + \" tries.\"));\n    } else {\n      collection.update(selector, mod, mongoOptsForUpdate,\n                        bindEnvironmentForWrite(function (err, result) {\n                          if (err)\n                            callback(err);\n                          else if (result)\n                            callback(null, {\n                              numberAffected: result\n                            });\n                          else\n                            doConditionalInsert();\n                        }));\n    }\n  };\n\n  var doConditionalInsert = function () {\n    var replacementWithId = _.extend(\n      replaceTypes({_id: insertedId}, replaceMeteorAtomWithMongo),\n      newDoc);\n    collection.update(selector, replacementWithId, mongoOptsForInsert,\n                      bindEnvironmentForWrite(function (err, result) {\n                        if (err) {\n                          // figure out if this is a\n                          // \"cannot change _id of document\" error, and\n                          // if so, try doUpdate() again, up to 3 times.\n                          if (MongoConnection._isCannotChangeIdError(err)) {\n                            doUpdate();\n                          } else {\n                            callback(err);\n                          }\n                        } else {\n                          callback(null, {\n                            numberAffected: result,\n                            insertedId: insertedId\n                          });\n                        }\n                      }));\n  };\n\n  doUpdate();\n};\n\n_.each([\"insert\", \"update\", \"remove\", \"dropCollection\", \"dropDatabase\"], function (method) {\n  MongoConnection.prototype[method] = function (/* arguments */) {\n    var self = this;\n    return Meteor.wrapAsync(self[\"_\" + method]).apply(self, arguments);\n  };\n});\n\n// XXX MongoConnection.upsert() does not return the id of the inserted document\n// unless you set it explicitly in the selector or modifier (as a replacement\n// doc).\nMongoConnection.prototype.upsert = function (collectionName, selector, mod,\n                                             options, callback) {\n  var self = this;\n  if (typeof options === \"function\" && ! callback) {\n    callback = options;\n    options = {};\n  }\n\n  return self.update(collectionName, selector, mod,\n                     _.extend({}, options, {\n                       upsert: true,\n                       _returnObject: true\n                     }), callback);\n};\n\nMongoConnection.prototype.find = function (collectionName, selector, options) {\n  var self = this;\n\n  if (arguments.length === 1)\n    selector = {};\n\n  return new Cursor(\n    self, new CursorDescription(collectionName, selector, options));\n};\n\nMongoConnection.prototype.findOne = function (collection_name, selector,\n                                              options) {\n  var self = this;\n  if (arguments.length === 1)\n    selector = {};\n\n  options = options || {};\n  options.limit = 1;\n  return self.find(collection_name, selector, options).fetch()[0];\n};\n\n// We'll actually design an index API later. For now, we just pass through to\n// Mongo's, but make it synchronous.\nMongoConnection.prototype._ensureIndex = function (collectionName, index,\n                                                   options) {\n  var self = this;\n\n  // We expect this function to be called at startup, not from within a method,\n  // so we don't interact with the write fence.\n  var collection = self.rawCollection(collectionName);\n  var future = new Future;\n  var indexName = collection.ensureIndex(index, options, future.resolver());\n  future.wait();\n};\nMongoConnection.prototype._dropIndex = function (collectionName, index) {\n  var self = this;\n\n  // This function is only used by test code, not within a method, so we don't\n  // interact with the write fence.\n  var collection = self.rawCollection(collectionName);\n  var future = new Future;\n  var indexName = collection.dropIndex(index, future.resolver());\n  future.wait();\n};\n\n// CURSORS\n\n// There are several classes which relate to cursors:\n//\n// CursorDescription represents the arguments used to construct a cursor:\n// collectionName, selector, and (find) options.  Because it is used as a key\n// for cursor de-dup, everything in it should either be JSON-stringifiable or\n// not affect observeChanges output (eg, options.transform functions are not\n// stringifiable but do not affect observeChanges).\n//\n// SynchronousCursor is a wrapper around a MongoDB cursor\n// which includes fully-synchronous versions of forEach, etc.\n//\n// Cursor is the cursor object returned from find(), which implements the\n// documented Mongo.Collection cursor API.  It wraps a CursorDescription and a\n// SynchronousCursor (lazily: it doesn't contact Mongo until you call a method\n// like fetch or forEach on it).\n//\n// ObserveHandle is the \"observe handle\" returned from observeChanges. It has a\n// reference to an ObserveMultiplexer.\n//\n// ObserveMultiplexer allows multiple identical ObserveHandles to be driven by a\n// single observe driver.\n//\n// There are two \"observe drivers\" which drive ObserveMultiplexers:\n//   - PollingObserveDriver caches the results of a query and reruns it when\n//     necessary.\n//   - OplogObserveDriver follows the Mongo operation log to directly observe\n//     database changes.\n// Both implementations follow the same simple interface: when you create them,\n// they start sending observeChanges callbacks (and a ready() invocation) to\n// their ObserveMultiplexer, and you stop them by calling their stop() method.\n\nCursorDescription = function (collectionName, selector, options) {\n  var self = this;\n  self.collectionName = collectionName;\n  self.selector = Mongo.Collection._rewriteSelector(selector);\n  self.options = options || {};\n};\n\nCursor = function (mongo, cursorDescription) {\n  var self = this;\n\n  self._mongo = mongo;\n  self._cursorDescription = cursorDescription;\n  self._synchronousCursor = null;\n};\n\n_.each(['forEach', 'map', 'fetch', 'count'], function (method) {\n  Cursor.prototype[method] = function () {\n    var self = this;\n\n    // You can only observe a tailable cursor.\n    if (self._cursorDescription.options.tailable)\n      throw new Error(\"Cannot call \" + method + \" on a tailable cursor\");\n\n    if (!self._synchronousCursor) {\n      self._synchronousCursor = self._mongo._createSynchronousCursor(\n        self._cursorDescription, {\n          // Make sure that the \"self\" argument to forEach/map callbacks is the\n          // Cursor, not the SynchronousCursor.\n          selfForIteration: self,\n          useTransform: true\n        });\n    }\n\n    return self._synchronousCursor[method].apply(\n      self._synchronousCursor, arguments);\n  };\n});\n\n// Since we don't actually have a \"nextObject\" interface, there's really no\n// reason to have a \"rewind\" interface.  All it did was make multiple calls\n// to fetch/map/forEach return nothing the second time.\n// XXX COMPAT WITH 0.8.1\nCursor.prototype.rewind = function () {\n};\n\nCursor.prototype.getTransform = function () {\n  return this._cursorDescription.options.transform;\n};\n\n// When you call Meteor.publish() with a function that returns a Cursor, we need\n// to transmute it into the equivalent subscription.  This is the function that\n// does that.\n\nCursor.prototype._publishCursor = function (sub) {\n  var self = this;\n  var collection = self._cursorDescription.collectionName;\n  return Mongo.Collection._publishCursor(self, sub, collection);\n};\n\n// Used to guarantee that publish functions return at most one cursor per\n// collection. Private, because we might later have cursors that include\n// documents from multiple collections somehow.\nCursor.prototype._getCollectionName = function () {\n  var self = this;\n  return self._cursorDescription.collectionName;\n}\n\nCursor.prototype.observe = function (callbacks) {\n  var self = this;\n  return LocalCollection._observeFromObserveChanges(self, callbacks);\n};\n\nCursor.prototype.observeChanges = function (callbacks) {\n  var self = this;\n  var ordered = LocalCollection._observeChangesCallbacksAreOrdered(callbacks);\n  return self._mongo._observeChanges(\n    self._cursorDescription, ordered, callbacks);\n};\n\nMongoConnection.prototype._createSynchronousCursor = function(\n    cursorDescription, options) {\n  var self = this;\n  options = _.pick(options || {}, 'selfForIteration', 'useTransform');\n\n  var collection = self.rawCollection(cursorDescription.collectionName);\n  var cursorOptions = cursorDescription.options;\n  var mongoOptions = {\n    sort: cursorOptions.sort,\n    limit: cursorOptions.limit,\n    skip: cursorOptions.skip\n  };\n\n  // Do we want a tailable cursor (which only works on capped collections)?\n  if (cursorOptions.tailable) {\n    // We want a tailable cursor...\n    mongoOptions.tailable = true;\n    // ... and for the server to wait a bit if any getMore has no data (rather\n    // than making us put the relevant sleeps in the client)...\n    mongoOptions.awaitdata = true;\n    // ... and to keep querying the server indefinitely rather than just 5 times\n    // if there's no more data.\n    mongoOptions.numberOfRetries = -1;\n    // And if this is on the oplog collection and the cursor specifies a 'ts',\n    // then set the undocumented oplog replay flag, which does a special scan to\n    // find the first document (instead of creating an index on ts). This is a\n    // very hard-coded Mongo flag which only works on the oplog collection and\n    // only works with the ts field.\n    if (cursorDescription.collectionName === OPLOG_COLLECTION &&\n        cursorDescription.selector.ts) {\n      mongoOptions.oplogReplay = true;\n    }\n  }\n\n  var dbCursor = collection.find(\n    replaceTypes(cursorDescription.selector, replaceMeteorAtomWithMongo),\n    cursorOptions.fields, mongoOptions);\n\n  return new SynchronousCursor(dbCursor, cursorDescription, options);\n};\n\nvar SynchronousCursor = function (dbCursor, cursorDescription, options) {\n  var self = this;\n  options = _.pick(options || {}, 'selfForIteration', 'useTransform');\n\n  self._dbCursor = dbCursor;\n  self._cursorDescription = cursorDescription;\n  // The \"self\" argument passed to forEach/map callbacks. If we're wrapped\n  // inside a user-visible Cursor, we want to provide the outer cursor!\n  self._selfForIteration = options.selfForIteration || self;\n  if (options.useTransform && cursorDescription.options.transform) {\n    self._transform = LocalCollection.wrapTransform(\n      cursorDescription.options.transform);\n  } else {\n    self._transform = null;\n  }\n\n  // Need to specify that the callback is the first argument to nextObject,\n  // since otherwise when we try to call it with no args the driver will\n  // interpret \"undefined\" first arg as an options hash and crash.\n  self._synchronousNextObject = Future.wrap(\n    dbCursor.nextObject.bind(dbCursor), 0);\n  self._synchronousCount = Future.wrap(dbCursor.count.bind(dbCursor));\n  self._visitedIds = new LocalCollection._IdMap;\n};\n\n_.extend(SynchronousCursor.prototype, {\n  _nextObject: function () {\n    var self = this;\n\n    while (true) {\n      var doc = self._synchronousNextObject().wait();\n\n      if (!doc) return null;\n      doc = replaceTypes(doc, replaceMongoAtomWithMeteor);\n\n      if (!self._cursorDescription.options.tailable && _.has(doc, '_id')) {\n        // Did Mongo give us duplicate documents in the same cursor? If so,\n        // ignore this one. (Do this before the transform, since transform might\n        // return some unrelated value.) We don't do this for tailable cursors,\n        // because we want to maintain O(1) memory usage. And if there isn't _id\n        // for some reason (maybe it's the oplog), then we don't do this either.\n        // (Be careful to do this for falsey but existing _id, though.)\n        if (self._visitedIds.has(doc._id)) continue;\n        self._visitedIds.set(doc._id, true);\n      }\n\n      if (self._transform)\n        doc = self._transform(doc);\n\n      return doc;\n    }\n  },\n\n  forEach: function (callback, thisArg) {\n    var self = this;\n\n    // Get back to the beginning.\n    self._rewind();\n\n    // We implement the loop ourself instead of using self._dbCursor.each,\n    // because \"each\" will call its callback outside of a fiber which makes it\n    // much more complex to make this function synchronous.\n    var index = 0;\n    while (true) {\n      var doc = self._nextObject();\n      if (!doc) return;\n      callback.call(thisArg, doc, index++, self._selfForIteration);\n    }\n  },\n\n  // XXX Allow overlapping callback executions if callback yields.\n  map: function (callback, thisArg) {\n    var self = this;\n    var res = [];\n    self.forEach(function (doc, index) {\n      res.push(callback.call(thisArg, doc, index, self._selfForIteration));\n    });\n    return res;\n  },\n\n  _rewind: function () {\n    var self = this;\n\n    // known to be synchronous\n    self._dbCursor.rewind();\n\n    self._visitedIds = new LocalCollection._IdMap;\n  },\n\n  // Mostly usable for tailable cursors.\n  close: function () {\n    var self = this;\n\n    self._dbCursor.close();\n  },\n\n  fetch: function () {\n    var self = this;\n    return self.map(_.identity);\n  },\n\n  count: function () {\n    var self = this;\n    return self._synchronousCount().wait();\n  },\n\n  // This method is NOT wrapped in Cursor.\n  getRawObjects: function (ordered) {\n    var self = this;\n    if (ordered) {\n      return self.fetch();\n    } else {\n      var results = new LocalCollection._IdMap;\n      self.forEach(function (doc) {\n        results.set(doc._id, doc);\n      });\n      return results;\n    }\n  }\n});\n\nMongoConnection.prototype.tail = function (cursorDescription, docCallback) {\n  var self = this;\n  if (!cursorDescription.options.tailable)\n    throw new Error(\"Can only tail a tailable cursor\");\n\n  var cursor = self._createSynchronousCursor(cursorDescription);\n\n  var stopped = false;\n  var lastTS = undefined;\n  var loop = function () {\n    while (true) {\n      if (stopped)\n        return;\n      try {\n        var doc = cursor._nextObject();\n      } catch (err) {\n        // There's no good way to figure out if this was actually an error\n        // from Mongo. Ah well. But either way, we need to retry the cursor\n        // (unless the failure was because the observe got stopped).\n        doc = null;\n      }\n      // Since cursor._nextObject can yield, we need to check again to see if\n      // we've been stopped before calling the callback.\n      if (stopped)\n        return;\n      if (doc) {\n        // If a tailable cursor contains a \"ts\" field, use it to recreate the\n        // cursor on error. (\"ts\" is a standard that Mongo uses internally for\n        // the oplog, and there's a special flag that lets you do binary search\n        // on it instead of needing to use an index.)\n        lastTS = doc.ts;\n        docCallback(doc);\n      } else {\n        var newSelector = _.clone(cursorDescription.selector);\n        if (lastTS) {\n          newSelector.ts = {$gt: lastTS};\n        }\n        cursor = self._createSynchronousCursor(new CursorDescription(\n          cursorDescription.collectionName,\n          newSelector,\n          cursorDescription.options));\n        // Mongo failover takes many seconds.  Retry in a bit.  (Without this\n        // setTimeout, we peg the CPU at 100% and never notice the actual\n        // failover.\n        Meteor.setTimeout(loop, 100);\n        break;\n      }\n    }\n  };\n\n  Meteor.defer(loop);\n\n  return {\n    stop: function () {\n      stopped = true;\n      cursor.close();\n    }\n  };\n};\n\nMongoConnection.prototype._observeChanges = function (\n    cursorDescription, ordered, callbacks) {\n  var self = this;\n\n  if (cursorDescription.options.tailable) {\n    return self._observeChangesTailable(cursorDescription, ordered, callbacks);\n  }\n\n  // You may not filter out _id when observing changes, because the id is a core\n  // part of the observeChanges API.\n  if (cursorDescription.options.fields &&\n      (cursorDescription.options.fields._id === 0 ||\n       cursorDescription.options.fields._id === false)) {\n    throw Error(\"You may not observe a cursor with {fields: {_id: 0}}\");\n  }\n\n  var observeKey = JSON.stringify(\n    _.extend({ordered: ordered}, cursorDescription));\n\n  var multiplexer, observeDriver;\n  var firstHandle = false;\n\n  // Find a matching ObserveMultiplexer, or create a new one. This next block is\n  // guaranteed to not yield (and it doesn't call anything that can observe a\n  // new query), so no other calls to this function can interleave with it.\n  Meteor._noYieldsAllowed(function () {\n    if (_.has(self._observeMultiplexers, observeKey)) {\n      multiplexer = self._observeMultiplexers[observeKey];\n    } else {\n      firstHandle = true;\n      // Create a new ObserveMultiplexer.\n      multiplexer = new ObserveMultiplexer({\n        ordered: ordered,\n        onStop: function () {\n          delete self._observeMultiplexers[observeKey];\n          observeDriver.stop();\n        }\n      });\n      self._observeMultiplexers[observeKey] = multiplexer;\n    }\n  });\n\n  var observeHandle = new ObserveHandle(multiplexer, callbacks);\n\n  if (firstHandle) {\n    var matcher, sorter;\n    var canUseOplog = _.all([\n      function () {\n        // At a bare minimum, using the oplog requires us to have an oplog, to\n        // want unordered callbacks, and to not want a callback on the polls\n        // that won't happen.\n        return self._oplogHandle && !ordered &&\n          !callbacks._testOnlyPollCallback;\n      }, function () {\n        // We need to be able to compile the selector. Fall back to polling for\n        // some newfangled $selector that minimongo doesn't support yet.\n        try {\n          matcher = new Minimongo.Matcher(cursorDescription.selector);\n          return true;\n        } catch (e) {\n          // XXX make all compilation errors MinimongoError or something\n          //     so that this doesn't ignore unrelated exceptions\n          return false;\n        }\n      }, function () {\n        // ... and the selector itself needs to support oplog.\n        return OplogObserveDriver.cursorSupported(cursorDescription, matcher);\n      }, function () {\n        // And we need to be able to compile the sort, if any.  eg, can't be\n        // {$natural: 1}.\n        if (!cursorDescription.options.sort)\n          return true;\n        try {\n          sorter = new Minimongo.Sorter(cursorDescription.options.sort,\n                                        { matcher: matcher });\n          return true;\n        } catch (e) {\n          // XXX make all compilation errors MinimongoError or something\n          //     so that this doesn't ignore unrelated exceptions\n          return false;\n        }\n      }], function (f) { return f(); });  // invoke each function\n\n    var driverClass = canUseOplog ? OplogObserveDriver : PollingObserveDriver;\n    observeDriver = new driverClass({\n      cursorDescription: cursorDescription,\n      mongoHandle: self,\n      multiplexer: multiplexer,\n      ordered: ordered,\n      matcher: matcher,  // ignored by polling\n      sorter: sorter,  // ignored by polling\n      _testOnlyPollCallback: callbacks._testOnlyPollCallback\n    });\n\n    // This field is only set for use in tests.\n    multiplexer._observeDriver = observeDriver;\n  }\n\n  // Blocks until the initial adds have been sent.\n  multiplexer.addHandleAndSendInitialAdds(observeHandle);\n\n  return observeHandle;\n};\n\n// Listen for the invalidation messages that will trigger us to poll the\n// database for changes. If this selector specifies specific IDs, specify them\n// here, so that updates to different specific IDs don't cause us to poll.\n// listenCallback is the same kind of (notification, complete) callback passed\n// to InvalidationCrossbar.listen.\n\nlistenAll = function (cursorDescription, listenCallback) {\n  var listeners = [];\n  forEachTrigger(cursorDescription, function (trigger) {\n    listeners.push(DDPServer._InvalidationCrossbar.listen(\n      trigger, listenCallback));\n  });\n\n  return {\n    stop: function () {\n      _.each(listeners, function (listener) {\n        listener.stop();\n      });\n    }\n  };\n};\n\nforEachTrigger = function (cursorDescription, triggerCallback) {\n  var key = {collection: cursorDescription.collectionName};\n  var specificIds = LocalCollection._idsMatchedBySelector(\n    cursorDescription.selector);\n  if (specificIds) {\n    _.each(specificIds, function (id) {\n      triggerCallback(_.extend({id: id}, key));\n    });\n    triggerCallback(_.extend({dropCollection: true, id: null}, key));\n  } else {\n    triggerCallback(key);\n  }\n  // Everyone cares about the database being dropped.\n  triggerCallback({ dropDatabase: true });\n};\n\n// observeChanges for tailable cursors on capped collections.\n//\n// Some differences from normal cursors:\n//   - Will never produce anything other than 'added' or 'addedBefore'. If you\n//     do update a document that has already been produced, this will not notice\n//     it.\n//   - If you disconnect and reconnect from Mongo, it will essentially restart\n//     the query, which will lead to duplicate results. This is pretty bad,\n//     but if you include a field called 'ts' which is inserted as\n//     new MongoInternals.MongoTimestamp(0, 0) (which is initialized to the\n//     current Mongo-style timestamp), we'll be able to find the place to\n//     restart properly. (This field is specifically understood by Mongo with an\n//     optimization which allows it to find the right place to start without\n//     an index on ts. It's how the oplog works.)\n//   - No callbacks are triggered synchronously with the call (there's no\n//     differentiation between \"initial data\" and \"later changes\"; everything\n//     that matches the query gets sent asynchronously).\n//   - De-duplication is not implemented.\n//   - Does not yet interact with the write fence. Probably, this should work by\n//     ignoring removes (which don't work on capped collections) and updates\n//     (which don't affect tailable cursors), and just keeping track of the ID\n//     of the inserted object, and closing the write fence once you get to that\n//     ID (or timestamp?).  This doesn't work well if the document doesn't match\n//     the query, though.  On the other hand, the write fence can close\n//     immediately if it does not match the query. So if we trust minimongo\n//     enough to accurately evaluate the query against the write fence, we\n//     should be able to do this...  Of course, minimongo doesn't even support\n//     Mongo Timestamps yet.\nMongoConnection.prototype._observeChangesTailable = function (\n    cursorDescription, ordered, callbacks) {\n  var self = this;\n\n  // Tailable cursors only ever call added/addedBefore callbacks, so it's an\n  // error if you didn't provide them.\n  if ((ordered && !callbacks.addedBefore) ||\n      (!ordered && !callbacks.added)) {\n    throw new Error(\"Can't observe an \" + (ordered ? \"ordered\" : \"unordered\")\n                    + \" tailable cursor without a \"\n                    + (ordered ? \"addedBefore\" : \"added\") + \" callback\");\n  }\n\n  return self.tail(cursorDescription, function (doc) {\n    var id = doc._id;\n    delete doc._id;\n    // The ts is an implementation detail. Hide it.\n    delete doc.ts;\n    if (ordered) {\n      callbacks.addedBefore(id, doc, null);\n    } else {\n      callbacks.added(id, doc);\n    }\n  });\n};\n\n// XXX We probably need to find a better way to expose this. Right now\n// it's only used by tests, but in fact you need it in normal\n// operation to interact with capped collections.\nMongoInternals.MongoTimestamp = MongoDB.Timestamp;\n\nMongoInternals.Connection = MongoConnection;\n","var Future = Npm.require('fibers/future');\n\nOPLOG_COLLECTION = 'oplog.rs';\n\nvar TOO_FAR_BEHIND = process.env.METEOR_OPLOG_TOO_FAR_BEHIND || 2000;\n\nvar showTS = function (ts) {\n  return \"Timestamp(\" + ts.getHighBits() + \", \" + ts.getLowBits() + \")\";\n};\n\nidForOp = function (op) {\n  if (op.op === 'd')\n    return op.o._id;\n  else if (op.op === 'i')\n    return op.o._id;\n  else if (op.op === 'u')\n    return op.o2._id;\n  else if (op.op === 'c')\n    throw Error(\"Operator 'c' doesn't supply an object with id: \" +\n                EJSON.stringify(op));\n  else\n    throw Error(\"Unknown op: \" + EJSON.stringify(op));\n};\n\nOplogHandle = function (oplogUrl, dbName) {\n  var self = this;\n  self._oplogUrl = oplogUrl;\n  self._dbName = dbName;\n\n  self._oplogLastEntryConnection = null;\n  self._oplogTailConnection = null;\n  self._stopped = false;\n  self._tailHandle = null;\n  self._readyFuture = new Future();\n  self._crossbar = new DDPServer._Crossbar({\n    factPackage: \"mongo-livedata\", factName: \"oplog-watchers\"\n  });\n  self._baseOplogSelector = {\n    ns: new RegExp('^' + Meteor._escapeRegExp(self._dbName) + '\\\\.'),\n    $or: [\n      { op: {$in: ['i', 'u', 'd']} },\n      // drop collection\n      { op: 'c', 'o.drop': { $exists: true } },\n      { op: 'c', 'o.dropDatabase': 1 },\n    ]\n  };\n\n  // Data structures to support waitUntilCaughtUp(). Each oplog entry has a\n  // MongoTimestamp object on it (which is not the same as a Date --- it's a\n  // combination of time and an incrementing counter; see\n  // http://docs.mongodb.org/manual/reference/bson-types/#timestamps).\n  //\n  // _catchingUpFutures is an array of {ts: MongoTimestamp, future: Future}\n  // objects, sorted by ascending timestamp. _lastProcessedTS is the\n  // MongoTimestamp of the last oplog entry we've processed.\n  //\n  // Each time we call waitUntilCaughtUp, we take a peek at the final oplog\n  // entry in the db.  If we've already processed it (ie, it is not greater than\n  // _lastProcessedTS), waitUntilCaughtUp immediately returns. Otherwise,\n  // waitUntilCaughtUp makes a new Future and inserts it along with the final\n  // timestamp entry that it read, into _catchingUpFutures. waitUntilCaughtUp\n  // then waits on that future, which is resolved once _lastProcessedTS is\n  // incremented to be past its timestamp by the worker fiber.\n  //\n  // XXX use a priority queue or something else that's faster than an array\n  self._catchingUpFutures = [];\n  self._lastProcessedTS = null;\n\n  self._onSkippedEntriesHook = new Hook({\n    debugPrintExceptions: \"onSkippedEntries callback\"\n  });\n\n  self._entryQueue = new Meteor._DoubleEndedQueue();\n  self._workerActive = false;\n\n  self._startTailing();\n};\n\n_.extend(OplogHandle.prototype, {\n  stop: function () {\n    var self = this;\n    if (self._stopped)\n      return;\n    self._stopped = true;\n    if (self._tailHandle)\n      self._tailHandle.stop();\n    // XXX should close connections too\n  },\n  onOplogEntry: function (trigger, callback) {\n    var self = this;\n    if (self._stopped)\n      throw new Error(\"Called onOplogEntry on stopped handle!\");\n\n    // Calling onOplogEntry requires us to wait for the tailing to be ready.\n    self._readyFuture.wait();\n\n    var originalCallback = callback;\n    callback = Meteor.bindEnvironment(function (notification) {\n      // XXX can we avoid this clone by making oplog.js careful?\n      originalCallback(EJSON.clone(notification));\n    }, function (err) {\n      Meteor._debug(\"Error in oplog callback\", err.stack);\n    });\n    var listenHandle = self._crossbar.listen(trigger, callback);\n    return {\n      stop: function () {\n        listenHandle.stop();\n      }\n    };\n  },\n  // Register a callback to be invoked any time we skip oplog entries (eg,\n  // because we are too far behind).\n  onSkippedEntries: function (callback) {\n    var self = this;\n    if (self._stopped)\n      throw new Error(\"Called onSkippedEntries on stopped handle!\");\n    return self._onSkippedEntriesHook.register(callback);\n  },\n  // Calls `callback` once the oplog has been processed up to a point that is\n  // roughly \"now\": specifically, once we've processed all ops that are\n  // currently visible.\n  // XXX become convinced that this is actually safe even if oplogConnection\n  // is some kind of pool\n  waitUntilCaughtUp: function () {\n    var self = this;\n    if (self._stopped)\n      throw new Error(\"Called waitUntilCaughtUp on stopped handle!\");\n\n    // Calling waitUntilCaughtUp requries us to wait for the oplog connection to\n    // be ready.\n    self._readyFuture.wait();\n\n    while (!self._stopped) {\n      // We need to make the selector at least as restrictive as the actual\n      // tailing selector (ie, we need to specify the DB name) or else we might\n      // find a TS that won't show up in the actual tail stream.\n      try {\n        var lastEntry = self._oplogLastEntryConnection.findOne(\n          OPLOG_COLLECTION, self._baseOplogSelector,\n          {fields: {ts: 1}, sort: {$natural: -1}});\n        break;\n      } catch (e) {\n        // During failover (eg) if we get an exception we should log and retry\n        // instead of crashing.\n        Meteor._debug(\"Got exception while reading last entry: \" + e);\n        Meteor._sleepForMs(100);\n      }\n    }\n\n    if (self._stopped)\n      return;\n\n    if (!lastEntry) {\n      // Really, nothing in the oplog? Well, we've processed everything.\n      return;\n    }\n\n    var ts = lastEntry.ts;\n    if (!ts)\n      throw Error(\"oplog entry without ts: \" + EJSON.stringify(lastEntry));\n\n    if (self._lastProcessedTS && ts.lessThanOrEqual(self._lastProcessedTS)) {\n      // We've already caught up to here.\n      return;\n    }\n\n\n    // Insert the future into our list. Almost always, this will be at the end,\n    // but it's conceivable that if we fail over from one primary to another,\n    // the oplog entries we see will go backwards.\n    var insertAfter = self._catchingUpFutures.length;\n    while (insertAfter - 1 > 0\n           && self._catchingUpFutures[insertAfter - 1].ts.greaterThan(ts)) {\n      insertAfter--;\n    }\n    var f = new Future;\n    self._catchingUpFutures.splice(insertAfter, 0, {ts: ts, future: f});\n    f.wait();\n  },\n  _startTailing: function () {\n    var self = this;\n    // First, make sure that we're talking to the local database.\n    var mongodbUri = Npm.require('mongodb-uri');\n    if (mongodbUri.parse(self._oplogUrl).database !== 'local') {\n      throw Error(\"$MONGO_OPLOG_URL must be set to the 'local' database of \" +\n                  \"a Mongo replica set\");\n    }\n\n    // We make two separate connections to Mongo. The Node Mongo driver\n    // implements a naive round-robin connection pool: each \"connection\" is a\n    // pool of several (5 by default) TCP connections, and each request is\n    // rotated through the pools. Tailable cursor queries block on the server\n    // until there is some data to return (or until a few seconds have\n    // passed). So if the connection pool used for tailing cursors is the same\n    // pool used for other queries, the other queries will be delayed by seconds\n    // 1/5 of the time.\n    //\n    // The tail connection will only ever be running a single tail command, so\n    // it only needs to make one underlying TCP connection.\n    self._oplogTailConnection = new MongoConnection(\n      self._oplogUrl, {poolSize: 1});\n    // XXX better docs, but: it's to get monotonic results\n    // XXX is it safe to say \"if there's an in flight query, just use its\n    //     results\"? I don't think so but should consider that\n    self._oplogLastEntryConnection = new MongoConnection(\n      self._oplogUrl, {poolSize: 1});\n\n    // Now, make sure that there actually is a repl set here. If not, oplog\n    // tailing won't ever find anything!\n    var f = new Future;\n    self._oplogLastEntryConnection.db.admin().command(\n      { ismaster: 1 }, f.resolver());\n    var isMasterDoc = f.wait();\n    if (!(isMasterDoc && isMasterDoc.documents && isMasterDoc.documents[0] &&\n          isMasterDoc.documents[0].setName)) {\n      throw Error(\"$MONGO_OPLOG_URL must be set to the 'local' database of \" +\n                  \"a Mongo replica set\");\n    }\n\n    // Find the last oplog entry.\n    var lastOplogEntry = self._oplogLastEntryConnection.findOne(\n      OPLOG_COLLECTION, {}, {sort: {$natural: -1}, fields: {ts: 1}});\n\n    var oplogSelector = _.clone(self._baseOplogSelector);\n    if (lastOplogEntry) {\n      // Start after the last entry that currently exists.\n      oplogSelector.ts = {$gt: lastOplogEntry.ts};\n      // If there are any calls to callWhenProcessedLatest before any other\n      // oplog entries show up, allow callWhenProcessedLatest to call its\n      // callback immediately.\n      self._lastProcessedTS = lastOplogEntry.ts;\n    }\n\n    var cursorDescription = new CursorDescription(\n      OPLOG_COLLECTION, oplogSelector, {tailable: true});\n\n    self._tailHandle = self._oplogTailConnection.tail(\n      cursorDescription, function (doc) {\n        self._entryQueue.push(doc);\n        self._maybeStartWorker();\n      }\n    );\n    self._readyFuture.return();\n  },\n\n  _maybeStartWorker: function () {\n    var self = this;\n    if (self._workerActive)\n      return;\n    self._workerActive = true;\n    Meteor.defer(function () {\n      try {\n        while (! self._stopped && ! self._entryQueue.isEmpty()) {\n          // Are we too far behind? Just tell our observers that they need to\n          // repoll, and drop our queue.\n          if (self._entryQueue.length > TOO_FAR_BEHIND) {\n            var lastEntry = self._entryQueue.pop();\n            self._entryQueue.clear();\n\n            self._onSkippedEntriesHook.each(function (callback) {\n              callback();\n              return true;\n            });\n\n            // Free any waitUntilCaughtUp() calls that were waiting for us to\n            // pass something that we just skipped.\n            self._setLastProcessedTS(lastEntry.ts);\n            continue;\n          }\n\n          var doc = self._entryQueue.shift();\n\n          if (!(doc.ns && doc.ns.length > self._dbName.length + 1 &&\n                doc.ns.substr(0, self._dbName.length + 1) ===\n                (self._dbName + '.'))) {\n            throw new Error(\"Unexpected ns\");\n          }\n\n          var trigger = {collection: doc.ns.substr(self._dbName.length + 1),\n                         dropCollection: false,\n                         dropDatabase: false,\n                         op: doc};\n\n          // Is it a special command and the collection name is hidden somewhere\n          // in operator?\n          if (trigger.collection === \"$cmd\") {\n            if (doc.o.dropDatabase) {\n              delete trigger.collection;\n              trigger.dropDatabase = true;\n            } else if (_.has(doc.o, 'drop')) {\n              trigger.collection = doc.o.drop;\n              trigger.dropCollection = true;\n              trigger.id = null;\n            } else {\n              throw Error(\"Unknown command \" + JSON.stringify(doc));\n            }\n          } else {\n            // All other ops have an id.\n            trigger.id = idForOp(doc);\n          }\n\n          self._crossbar.fire(trigger);\n\n          // Now that we've processed this operation, process pending\n          // sequencers.\n          if (!doc.ts)\n            throw Error(\"oplog entry without ts: \" + EJSON.stringify(doc));\n          self._setLastProcessedTS(doc.ts);\n        }\n      } finally {\n        self._workerActive = false;\n      }\n    });\n  },\n  _setLastProcessedTS: function (ts) {\n    var self = this;\n    self._lastProcessedTS = ts;\n    while (!_.isEmpty(self._catchingUpFutures)\n           && self._catchingUpFutures[0].ts.lessThanOrEqual(\n             self._lastProcessedTS)) {\n      var sequencer = self._catchingUpFutures.shift();\n      sequencer.future.return();\n    }\n  }\n});\n","var Future = Npm.require('fibers/future');\n\nObserveMultiplexer = function (options) {\n  var self = this;\n\n  if (!options || !_.has(options, 'ordered'))\n    throw Error(\"must specified ordered\");\n\n  Package.facts && Package.facts.Facts.incrementServerFact(\n    \"mongo-livedata\", \"observe-multiplexers\", 1);\n\n  self._ordered = options.ordered;\n  self._onStop = options.onStop || function () {};\n  self._queue = new Meteor._SynchronousQueue();\n  self._handles = {};\n  self._readyFuture = new Future;\n  self._cache = new LocalCollection._CachingChangeObserver({\n    ordered: options.ordered});\n  // Number of addHandleAndSendInitialAdds tasks scheduled but not yet\n  // running. removeHandle uses this to know if it's time to call the onStop\n  // callback.\n  self._addHandleTasksScheduledButNotPerformed = 0;\n\n  _.each(self.callbackNames(), function (callbackName) {\n    self[callbackName] = function (/* ... */) {\n      self._applyCallback(callbackName, _.toArray(arguments));\n    };\n  });\n};\n\n_.extend(ObserveMultiplexer.prototype, {\n  addHandleAndSendInitialAdds: function (handle) {\n    var self = this;\n\n    // Check this before calling runTask (even though runTask does the same\n    // check) so that we don't leak an ObserveMultiplexer on error by\n    // incrementing _addHandleTasksScheduledButNotPerformed and never\n    // decrementing it.\n    if (!self._queue.safeToRunTask())\n      throw new Error(\n        \"Can't call observeChanges from an observe callback on the same query\");\n    ++self._addHandleTasksScheduledButNotPerformed;\n\n    Package.facts && Package.facts.Facts.incrementServerFact(\n      \"mongo-livedata\", \"observe-handles\", 1);\n\n    self._queue.runTask(function () {\n      self._handles[handle._id] = handle;\n      // Send out whatever adds we have so far (whether or not we the\n      // multiplexer is ready).\n      self._sendAdds(handle);\n      --self._addHandleTasksScheduledButNotPerformed;\n    });\n    // *outside* the task, since otherwise we'd deadlock\n    self._readyFuture.wait();\n  },\n\n  // Remove an observe handle. If it was the last observe handle, call the\n  // onStop callback; you cannot add any more observe handles after this.\n  //\n  // This is not synchronized with polls and handle additions: this means that\n  // you can safely call it from within an observe callback, but it also means\n  // that we have to be careful when we iterate over _handles.\n  removeHandle: function (id) {\n    var self = this;\n\n    // This should not be possible: you can only call removeHandle by having\n    // access to the ObserveHandle, which isn't returned to user code until the\n    // multiplex is ready.\n    if (!self._ready())\n      throw new Error(\"Can't remove handles until the multiplex is ready\");\n\n    delete self._handles[id];\n\n    Package.facts && Package.facts.Facts.incrementServerFact(\n      \"mongo-livedata\", \"observe-handles\", -1);\n\n    if (_.isEmpty(self._handles) &&\n        self._addHandleTasksScheduledButNotPerformed === 0) {\n      self._stop();\n    }\n  },\n  _stop: function (options) {\n    var self = this;\n    options = options || {};\n\n    // It shouldn't be possible for us to stop when all our handles still\n    // haven't been returned from observeChanges!\n    if (! self._ready() && ! options.fromQueryError)\n      throw Error(\"surprising _stop: not ready\");\n\n    // Call stop callback (which kills the underlying process which sends us\n    // callbacks and removes us from the connection's dictionary).\n    self._onStop();\n    Package.facts && Package.facts.Facts.incrementServerFact(\n      \"mongo-livedata\", \"observe-multiplexers\", -1);\n\n    // Cause future addHandleAndSendInitialAdds calls to throw (but the onStop\n    // callback should make our connection forget about us).\n    self._handles = null;\n  },\n\n  // Allows all addHandleAndSendInitialAdds calls to return, once all preceding\n  // adds have been processed. Does not block.\n  ready: function () {\n    var self = this;\n    self._queue.queueTask(function () {\n      if (self._ready())\n        throw Error(\"can't make ObserveMultiplex ready twice!\");\n      self._readyFuture.return();\n    });\n  },\n\n  // If trying to execute the query results in an error, call this. This is\n  // intended for permanent errors, not transient network errors that could be\n  // fixed. It should only be called before ready(), because if you called ready\n  // that meant that you managed to run the query once. It will stop this\n  // ObserveMultiplex and cause addHandleAndSendInitialAdds calls (and thus\n  // observeChanges calls) to throw the error.\n  queryError: function (err) {\n    var self = this;\n    self._queue.runTask(function () {\n      if (self._ready())\n        throw Error(\"can't claim query has an error after it worked!\");\n      self._stop({fromQueryError: true});\n      self._readyFuture.throw(err);\n    });\n  },\n\n  // Calls \"cb\" once the effects of all \"ready\", \"addHandleAndSendInitialAdds\"\n  // and observe callbacks which came before this call have been propagated to\n  // all handles. \"ready\" must have already been called on this multiplexer.\n  onFlush: function (cb) {\n    var self = this;\n    self._queue.queueTask(function () {\n      if (!self._ready())\n        throw Error(\"only call onFlush on a multiplexer that will be ready\");\n      cb();\n    });\n  },\n  callbackNames: function () {\n    var self = this;\n    if (self._ordered)\n      return [\"addedBefore\", \"changed\", \"movedBefore\", \"removed\"];\n    else\n      return [\"added\", \"changed\", \"removed\"];\n  },\n  _ready: function () {\n    return this._readyFuture.isResolved();\n  },\n  _applyCallback: function (callbackName, args) {\n    var self = this;\n    self._queue.queueTask(function () {\n      // If we stopped in the meantime, do nothing.\n      if (!self._handles)\n        return;\n\n      // First, apply the change to the cache.\n      // XXX We could make applyChange callbacks promise not to hang on to any\n      // state from their arguments (assuming that their supplied callbacks\n      // don't) and skip this clone. Currently 'changed' hangs on to state\n      // though.\n      self._cache.applyChange[callbackName].apply(null, EJSON.clone(args));\n\n      // If we haven't finished the initial adds, then we should only be getting\n      // adds.\n      if (!self._ready() &&\n          (callbackName !== 'added' && callbackName !== 'addedBefore')) {\n        throw new Error(\"Got \" + callbackName + \" during initial adds\");\n      }\n\n      // Now multiplex the callbacks out to all observe handles. It's OK if\n      // these calls yield; since we're inside a task, no other use of our queue\n      // can continue until these are done. (But we do have to be careful to not\n      // use a handle that got removed, because removeHandle does not use the\n      // queue; thus, we iterate over an array of keys that we control.)\n      _.each(_.keys(self._handles), function (handleId) {\n        var handle = self._handles && self._handles[handleId];\n        if (!handle)\n          return;\n        var callback = handle['_' + callbackName];\n        // clone arguments so that callbacks can mutate their arguments\n        callback && callback.apply(null, EJSON.clone(args));\n      });\n    });\n  },\n\n  // Sends initial adds to a handle. It should only be called from within a task\n  // (the task that is processing the addHandleAndSendInitialAdds call). It\n  // synchronously invokes the handle's added or addedBefore; there's no need to\n  // flush the queue afterwards to ensure that the callbacks get out.\n  _sendAdds: function (handle) {\n    var self = this;\n    if (self._queue.safeToRunTask())\n      throw Error(\"_sendAdds may only be called from within a task!\");\n    var add = self._ordered ? handle._addedBefore : handle._added;\n    if (!add)\n      return;\n    // note: docs may be an _IdMap or an OrderedDict\n    self._cache.docs.forEach(function (doc, id) {\n      if (!_.has(self._handles, handle._id))\n        throw Error(\"handle got removed before sending initial adds!\");\n      var fields = EJSON.clone(doc);\n      delete fields._id;\n      if (self._ordered)\n        add(id, fields, null); // we're going in order, so add at end\n      else\n        add(id, fields);\n    });\n  }\n});\n\n\nvar nextObserveHandleId = 1;\nObserveHandle = function (multiplexer, callbacks) {\n  var self = this;\n  // The end user is only supposed to call stop().  The other fields are\n  // accessible to the multiplexer, though.\n  self._multiplexer = multiplexer;\n  _.each(multiplexer.callbackNames(), function (name) {\n    if (callbacks[name]) {\n      self['_' + name] = callbacks[name];\n    } else if (name === \"addedBefore\" && callbacks.added) {\n      // Special case: if you specify \"added\" and \"movedBefore\", you get an\n      // ordered observe where for some reason you don't get ordering data on\n      // the adds.  I dunno, we wrote tests for it, there must have been a\n      // reason.\n      self._addedBefore = function (id, fields, before) {\n        callbacks.added(id, fields);\n      };\n    }\n  });\n  self._stopped = false;\n  self._id = nextObserveHandleId++;\n};\nObserveHandle.prototype.stop = function () {\n  var self = this;\n  if (self._stopped)\n    return;\n  self._stopped = true;\n  self._multiplexer.removeHandle(self._id);\n};\n","var Fiber = Npm.require('fibers');\nvar Future = Npm.require('fibers/future');\n\nDocFetcher = function (mongoConnection) {\n  var self = this;\n  self._mongoConnection = mongoConnection;\n  // Map from cache key -> [callback]\n  self._callbacksForCacheKey = {};\n};\n\n_.extend(DocFetcher.prototype, {\n  // Fetches document \"id\" from collectionName, returning it or null if not\n  // found.\n  //\n  // If you make multiple calls to fetch() with the same cacheKey (a string),\n  // DocFetcher may assume that they all return the same document. (It does\n  // not check to see if collectionName/id match.)\n  //\n  // You may assume that callback is never called synchronously (and in fact\n  // OplogObserveDriver does so).\n  fetch: function (collectionName, id, cacheKey, callback) {\n    var self = this;\n\n    check(collectionName, String);\n    // id is some sort of scalar\n    check(cacheKey, String);\n\n    // If there's already an in-progress fetch for this cache key, yield until\n    // it's done and return whatever it returns.\n    if (_.has(self._callbacksForCacheKey, cacheKey)) {\n      self._callbacksForCacheKey[cacheKey].push(callback);\n      return;\n    }\n\n    var callbacks = self._callbacksForCacheKey[cacheKey] = [callback];\n\n    Fiber(function () {\n      try {\n        var doc = self._mongoConnection.findOne(\n          collectionName, {_id: id}) || null;\n        // Return doc to all relevant callbacks. Note that this array can\n        // continue to grow during callback excecution.\n        while (!_.isEmpty(callbacks)) {\n          // Clone the document so that the various calls to fetch don't return\n          // objects that are intertwingled with each other. Clone before\n          // popping the future, so that if clone throws, the error gets passed\n          // to the next callback.\n          var clonedDoc = EJSON.clone(doc);\n          callbacks.pop()(null, clonedDoc);\n        }\n      } catch (e) {\n        while (!_.isEmpty(callbacks)) {\n          callbacks.pop()(e);\n        }\n      } finally {\n        // XXX consider keeping the doc around for a period of time before\n        // removing from the cache\n        delete self._callbacksForCacheKey[cacheKey];\n      }\n    }).run();\n  }\n});\n\nMongoTest.DocFetcher = DocFetcher;\n","PollingObserveDriver = function (options) {\n  var self = this;\n\n  self._cursorDescription = options.cursorDescription;\n  self._mongoHandle = options.mongoHandle;\n  self._ordered = options.ordered;\n  self._multiplexer = options.multiplexer;\n  self._stopCallbacks = [];\n  self._stopped = false;\n\n  self._synchronousCursor = self._mongoHandle._createSynchronousCursor(\n    self._cursorDescription);\n\n  // previous results snapshot.  on each poll cycle, diffs against\n  // results drives the callbacks.\n  self._results = null;\n\n  // The number of _pollMongo calls that have been added to self._taskQueue but\n  // have not started running. Used to make sure we never schedule more than one\n  // _pollMongo (other than possibly the one that is currently running). It's\n  // also used by _suspendPolling to pretend there's a poll scheduled. Usually,\n  // it's either 0 (for \"no polls scheduled other than maybe one currently\n  // running\") or 1 (for \"a poll scheduled that isn't running yet\"), but it can\n  // also be 2 if incremented by _suspendPolling.\n  self._pollsScheduledButNotStarted = 0;\n  self._pendingWrites = []; // people to notify when polling completes\n\n  // Make sure to create a separately throttled function for each\n  // PollingObserveDriver object.\n  self._ensurePollIsScheduled = _.throttle(\n    self._unthrottledEnsurePollIsScheduled, 50 /* ms */);\n\n  // XXX figure out if we still need a queue\n  self._taskQueue = new Meteor._SynchronousQueue();\n\n  var listenersHandle = listenAll(\n    self._cursorDescription, function (notification) {\n      // When someone does a transaction that might affect us, schedule a poll\n      // of the database. If that transaction happens inside of a write fence,\n      // block the fence until we've polled and notified observers.\n      var fence = DDPServer._CurrentWriteFence.get();\n      if (fence)\n        self._pendingWrites.push(fence.beginWrite());\n      // Ensure a poll is scheduled... but if we already know that one is,\n      // don't hit the throttled _ensurePollIsScheduled function (which might\n      // lead to us calling it unnecessarily in 50ms).\n      if (self._pollsScheduledButNotStarted === 0)\n        self._ensurePollIsScheduled();\n    }\n  );\n  self._stopCallbacks.push(function () { listenersHandle.stop(); });\n\n  // every once and a while, poll even if we don't think we're dirty, for\n  // eventual consistency with database writes from outside the Meteor\n  // universe.\n  //\n  // For testing, there's an undocumented callback argument to observeChanges\n  // which disables time-based polling and gets called at the beginning of each\n  // poll.\n  if (options._testOnlyPollCallback) {\n    self._testOnlyPollCallback = options._testOnlyPollCallback;\n  } else {\n    var pollingInterval = self._cursorDescription.options._pollingInterval || 10 * 1000;\n    var intervalHandle = Meteor.setInterval(\n      _.bind(self._ensurePollIsScheduled, self), pollingInterval);\n    self._stopCallbacks.push(function () {\n      Meteor.clearInterval(intervalHandle);\n    });\n  }\n\n  // Make sure we actually poll soon!\n  self._unthrottledEnsurePollIsScheduled();\n\n  Package.facts && Package.facts.Facts.incrementServerFact(\n    \"mongo-livedata\", \"observe-drivers-polling\", 1);\n};\n\n_.extend(PollingObserveDriver.prototype, {\n  // This is always called through _.throttle (except once at startup).\n  _unthrottledEnsurePollIsScheduled: function () {\n    var self = this;\n    if (self._pollsScheduledButNotStarted > 0)\n      return;\n    ++self._pollsScheduledButNotStarted;\n    self._taskQueue.queueTask(function () {\n      self._pollMongo();\n    });\n  },\n\n  // test-only interface for controlling polling.\n  //\n  // _suspendPolling blocks until any currently running and scheduled polls are\n  // done, and prevents any further polls from being scheduled. (new\n  // ObserveHandles can be added and receive their initial added callbacks,\n  // though.)\n  //\n  // _resumePolling immediately polls, and allows further polls to occur.\n  _suspendPolling: function() {\n    var self = this;\n    // Pretend that there's another poll scheduled (which will prevent\n    // _ensurePollIsScheduled from queueing any more polls).\n    ++self._pollsScheduledButNotStarted;\n    // Now block until all currently running or scheduled polls are done.\n    self._taskQueue.runTask(function() {});\n\n    // Confirm that there is only one \"poll\" (the fake one we're pretending to\n    // have) scheduled.\n    if (self._pollsScheduledButNotStarted !== 1)\n      throw new Error(\"_pollsScheduledButNotStarted is \" +\n                      self._pollsScheduledButNotStarted);\n  },\n  _resumePolling: function() {\n    var self = this;\n    // We should be in the same state as in the end of _suspendPolling.\n    if (self._pollsScheduledButNotStarted !== 1)\n      throw new Error(\"_pollsScheduledButNotStarted is \" +\n                      self._pollsScheduledButNotStarted);\n    // Run a poll synchronously (which will counteract the\n    // ++_pollsScheduledButNotStarted from _suspendPolling).\n    self._taskQueue.runTask(function () {\n      self._pollMongo();\n    });\n  },\n\n  _pollMongo: function () {\n    var self = this;\n    --self._pollsScheduledButNotStarted;\n\n    if (self._stopped)\n      return;\n\n    var first = false;\n    var oldResults = self._results;\n    if (!oldResults) {\n      first = true;\n      // XXX maybe use OrderedDict instead?\n      oldResults = self._ordered ? [] : new LocalCollection._IdMap;\n    }\n\n    self._testOnlyPollCallback && self._testOnlyPollCallback();\n\n    // Save the list of pending writes which this round will commit.\n    var writesForCycle = self._pendingWrites;\n    self._pendingWrites = [];\n\n    // Get the new query results. (This yields.)\n    try {\n      var newResults = self._synchronousCursor.getRawObjects(self._ordered);\n    } catch (e) {\n      if (first && typeof(e.code) === 'number') {\n        // This is an error document sent to us by mongod, not a connection\n        // error generated by the client. And we've never seen this query work\n        // successfully. Probably it's a bad selector or something, so we should\n        // NOT retry. Instead, we should halt the observe (which ends up calling\n        // `stop` on us).\n        self._multiplexer.queryError(\n          new Error(\n            \"Exception while polling query \" +\n              JSON.stringify(self._cursorDescription) + \": \" + e.message));\n        return;\n      }\n\n      // getRawObjects can throw if we're having trouble talking to the\n      // database.  That's fine --- we will repoll later anyway. But we should\n      // make sure not to lose track of this cycle's writes.\n      // (It also can throw if there's just something invalid about this query;\n      // unfortunately the ObserveDriver API doesn't provide a good way to\n      // \"cancel\" the observe from the inside in this case.\n      Array.prototype.push.apply(self._pendingWrites, writesForCycle);\n      Meteor._debug(\"Exception while polling query \" +\n                    JSON.stringify(self._cursorDescription) + \": \" + e.stack);\n      return;\n    }\n\n    // Run diffs.\n    if (!self._stopped) {\n      LocalCollection._diffQueryChanges(\n        self._ordered, oldResults, newResults, self._multiplexer);\n    }\n\n    // Signals the multiplexer to allow all observeChanges calls that share this\n    // multiplexer to return. (This happens asynchronously, via the\n    // multiplexer's queue.)\n    if (first)\n      self._multiplexer.ready();\n\n    // Replace self._results atomically.  (This assignment is what makes `first`\n    // stay through on the next cycle, so we've waited until after we've\n    // committed to ready-ing the multiplexer.)\n    self._results = newResults;\n\n    // Once the ObserveMultiplexer has processed everything we've done in this\n    // round, mark all the writes which existed before this call as\n    // commmitted. (If new writes have shown up in the meantime, there'll\n    // already be another _pollMongo task scheduled.)\n    self._multiplexer.onFlush(function () {\n      _.each(writesForCycle, function (w) {\n        w.committed();\n      });\n    });\n  },\n\n  stop: function () {\n    var self = this;\n    self._stopped = true;\n    _.each(self._stopCallbacks, function (c) { c(); });\n    // Release any write fences that are waiting on us.\n    _.each(self._pendingWrites, function (w) {\n      w.committed();\n    });\n    Package.facts && Package.facts.Facts.incrementServerFact(\n      \"mongo-livedata\", \"observe-drivers-polling\", -1);\n  }\n});\n","var Fiber = Npm.require('fibers');\nvar Future = Npm.require('fibers/future');\n\nvar PHASE = {\n  QUERYING: \"QUERYING\",\n  FETCHING: \"FETCHING\",\n  STEADY: \"STEADY\"\n};\n\n// Exception thrown by _needToPollQuery which unrolls the stack up to the\n// enclosing call to finishIfNeedToPollQuery.\nvar SwitchedToQuery = function () {};\nvar finishIfNeedToPollQuery = function (f) {\n  return function () {\n    try {\n      f.apply(this, arguments);\n    } catch (e) {\n      if (!(e instanceof SwitchedToQuery))\n        throw e;\n    }\n  };\n};\n\nvar currentId = 0;\n\n// OplogObserveDriver is an alternative to PollingObserveDriver which follows\n// the Mongo operation log instead of just re-polling the query. It obeys the\n// same simple interface: constructing it starts sending observeChanges\n// callbacks (and a ready() invocation) to the ObserveMultiplexer, and you stop\n// it by calling the stop() method.\nOplogObserveDriver = function (options) {\n  var self = this;\n  self._usesOplog = true;  // tests look at this\n\n  self._id = currentId;\n  currentId++;\n\n  self._cursorDescription = options.cursorDescription;\n  self._mongoHandle = options.mongoHandle;\n  self._multiplexer = options.multiplexer;\n\n  if (options.ordered) {\n    throw Error(\"OplogObserveDriver only supports unordered observeChanges\");\n  }\n\n  var sorter = options.sorter;\n  // We don't support $near and other geo-queries so it's OK to initialize the\n  // comparator only once in the constructor.\n  var comparator = sorter && sorter.getComparator();\n\n  if (options.cursorDescription.options.limit) {\n    // There are several properties ordered driver implements:\n    // - _limit is a positive number\n    // - _comparator is a function-comparator by which the query is ordered\n    // - _unpublishedBuffer is non-null Min/Max Heap,\n    //                      the empty buffer in STEADY phase implies that the\n    //                      everything that matches the queries selector fits\n    //                      into published set.\n    // - _published - Min Heap (also implements IdMap methods)\n\n    var heapOptions = { IdMap: LocalCollection._IdMap };\n    self._limit = self._cursorDescription.options.limit;\n    self._comparator = comparator;\n    self._sorter = sorter;\n    self._unpublishedBuffer = new MinMaxHeap(comparator, heapOptions);\n    // We need something that can find Max value in addition to IdMap interface\n    self._published = new MaxHeap(comparator, heapOptions);\n  } else {\n    self._limit = 0;\n    self._comparator = null;\n    self._sorter = null;\n    self._unpublishedBuffer = null;\n    self._published = new LocalCollection._IdMap;\n  }\n\n  // Indicates if it is safe to insert a new document at the end of the buffer\n  // for this query. i.e. it is known that there are no documents matching the\n  // selector those are not in published or buffer.\n  self._safeAppendToBuffer = false;\n\n  self._stopped = false;\n  self._stopHandles = [];\n\n  Package.facts && Package.facts.Facts.incrementServerFact(\n    \"mongo-livedata\", \"observe-drivers-oplog\", 1);\n\n  self._registerPhaseChange(PHASE.QUERYING);\n\n  var selector = self._cursorDescription.selector;\n  self._matcher = options.matcher;\n  var projection = self._cursorDescription.options.fields || {};\n  self._projectionFn = LocalCollection._compileProjection(projection);\n  // Projection function, result of combining important fields for selector and\n  // existing fields projection\n  self._sharedProjection = self._matcher.combineIntoProjection(projection);\n  if (sorter)\n    self._sharedProjection = sorter.combineIntoProjection(self._sharedProjection);\n  self._sharedProjectionFn = LocalCollection._compileProjection(\n    self._sharedProjection);\n\n  self._needToFetch = new LocalCollection._IdMap;\n  self._currentlyFetching = null;\n  self._fetchGeneration = 0;\n\n  self._requeryWhenDoneThisQuery = false;\n  self._writesToCommitWhenWeReachSteady = [];\n\n  // If the oplog handle tells us that it skipped some entries (because it got\n  // behind, say), re-poll.\n  self._stopHandles.push(self._mongoHandle._oplogHandle.onSkippedEntries(\n    finishIfNeedToPollQuery(function () {\n      self._needToPollQuery();\n    })\n  ));\n\n  forEachTrigger(self._cursorDescription, function (trigger) {\n    self._stopHandles.push(self._mongoHandle._oplogHandle.onOplogEntry(\n      trigger, function (notification) {\n        Meteor._noYieldsAllowed(finishIfNeedToPollQuery(function () {\n          var op = notification.op;\n          if (notification.dropCollection || notification.dropDatabase) {\n            // Note: this call is not allowed to block on anything (especially\n            // on waiting for oplog entries to catch up) because that will block\n            // onOplogEntry!\n            self._needToPollQuery();\n          } else {\n            // All other operators should be handled depending on phase\n            if (self._phase === PHASE.QUERYING)\n              self._handleOplogEntryQuerying(op);\n            else\n              self._handleOplogEntrySteadyOrFetching(op);\n          }\n        }));\n      }\n    ));\n  });\n\n  // XXX ordering w.r.t. everything else?\n  self._stopHandles.push(listenAll(\n    self._cursorDescription, function (notification) {\n      // If we're not in a pre-fire write fence, we don't have to do anything.\n      var fence = DDPServer._CurrentWriteFence.get();\n      if (!fence || fence.fired)\n        return;\n\n      if (fence._oplogObserveDrivers) {\n        fence._oplogObserveDrivers[self._id] = self;\n        return;\n      }\n\n      fence._oplogObserveDrivers = {};\n      fence._oplogObserveDrivers[self._id] = self;\n\n      fence.onBeforeFire(function () {\n        var drivers = fence._oplogObserveDrivers;\n        delete fence._oplogObserveDrivers;\n\n        // This fence cannot fire until we've caught up to \"this point\" in the\n        // oplog, and all observers made it back to the steady state.\n        self._mongoHandle._oplogHandle.waitUntilCaughtUp();\n\n        _.each(drivers, function (driver) {\n          if (driver._stopped)\n            return;\n\n          var write = fence.beginWrite();\n          if (driver._phase === PHASE.STEADY) {\n            // Make sure that all of the callbacks have made it through the\n            // multiplexer and been delivered to ObserveHandles before committing\n            // writes.\n            driver._multiplexer.onFlush(function () {\n              write.committed();\n            });\n          } else {\n            driver._writesToCommitWhenWeReachSteady.push(write);\n          }\n        });\n      });\n    }\n  ));\n\n  // When Mongo fails over, we need to repoll the query, in case we processed an\n  // oplog entry that got rolled back.\n  self._stopHandles.push(self._mongoHandle._onFailover(finishIfNeedToPollQuery(\n    function () {\n      self._needToPollQuery();\n    })));\n\n  // Give _observeChanges a chance to add the new ObserveHandle to our\n  // multiplexer, so that the added calls get streamed.\n  Meteor.defer(finishIfNeedToPollQuery(function () {\n    self._runInitialQuery();\n  }));\n};\n\n_.extend(OplogObserveDriver.prototype, {\n  _addPublished: function (id, doc) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      var fields = _.clone(doc);\n      delete fields._id;\n      self._published.set(id, self._sharedProjectionFn(doc));\n      self._multiplexer.added(id, self._projectionFn(fields));\n\n      // After adding this document, the published set might be overflowed\n      // (exceeding capacity specified by limit). If so, push the maximum\n      // element to the buffer, we might want to save it in memory to reduce the\n      // amount of Mongo lookups in the future.\n      if (self._limit && self._published.size() > self._limit) {\n        // XXX in theory the size of published is no more than limit+1\n        if (self._published.size() !== self._limit + 1) {\n          throw new Error(\"After adding to published, \" +\n                          (self._published.size() - self._limit) +\n                          \" documents are overflowing the set\");\n        }\n\n        var overflowingDocId = self._published.maxElementId();\n        var overflowingDoc = self._published.get(overflowingDocId);\n\n        if (EJSON.equals(overflowingDocId, id)) {\n          throw new Error(\"The document just added is overflowing the published set\");\n        }\n\n        self._published.remove(overflowingDocId);\n        self._multiplexer.removed(overflowingDocId);\n        self._addBuffered(overflowingDocId, overflowingDoc);\n      }\n    });\n  },\n  _removePublished: function (id) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      self._published.remove(id);\n      self._multiplexer.removed(id);\n      if (! self._limit || self._published.size() === self._limit)\n        return;\n\n      if (self._published.size() > self._limit)\n        throw Error(\"self._published got too big\");\n\n      // OK, we are publishing less than the limit. Maybe we should look in the\n      // buffer to find the next element past what we were publishing before.\n\n      if (!self._unpublishedBuffer.empty()) {\n        // There's something in the buffer; move the first thing in it to\n        // _published.\n        var newDocId = self._unpublishedBuffer.minElementId();\n        var newDoc = self._unpublishedBuffer.get(newDocId);\n        self._removeBuffered(newDocId);\n        self._addPublished(newDocId, newDoc);\n        return;\n      }\n\n      // There's nothing in the buffer.  This could mean one of a few things.\n\n      // (a) We could be in the middle of re-running the query (specifically, we\n      // could be in _publishNewResults). In that case, _unpublishedBuffer is\n      // empty because we clear it at the beginning of _publishNewResults. In\n      // this case, our caller already knows the entire answer to the query and\n      // we don't need to do anything fancy here.  Just return.\n      if (self._phase === PHASE.QUERYING)\n        return;\n\n      // (b) We're pretty confident that the union of _published and\n      // _unpublishedBuffer contain all documents that match selector. Because\n      // _unpublishedBuffer is empty, that means we're confident that _published\n      // contains all documents that match selector. So we have nothing to do.\n      if (self._safeAppendToBuffer)\n        return;\n\n      // (c) Maybe there are other documents out there that should be in our\n      // buffer. But in that case, when we emptied _unpublishedBuffer in\n      // _removeBuffered, we should have called _needToPollQuery, which will\n      // either put something in _unpublishedBuffer or set _safeAppendToBuffer\n      // (or both), and it will put us in QUERYING for that whole time. So in\n      // fact, we shouldn't be able to get here.\n\n      throw new Error(\"Buffer inexplicably empty\");\n    });\n  },\n  _changePublished: function (id, oldDoc, newDoc) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      self._published.set(id, self._sharedProjectionFn(newDoc));\n      var projectedNew = self._projectionFn(newDoc);\n      var projectedOld = self._projectionFn(oldDoc);\n      var changed = DiffSequence.makeChangedFields(\n        projectedNew, projectedOld);\n      if (!_.isEmpty(changed))\n        self._multiplexer.changed(id, changed);\n    });\n  },\n  _addBuffered: function (id, doc) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      self._unpublishedBuffer.set(id, self._sharedProjectionFn(doc));\n\n      // If something is overflowing the buffer, we just remove it from cache\n      if (self._unpublishedBuffer.size() > self._limit) {\n        var maxBufferedId = self._unpublishedBuffer.maxElementId();\n\n        self._unpublishedBuffer.remove(maxBufferedId);\n\n        // Since something matching is removed from cache (both published set and\n        // buffer), set flag to false\n        self._safeAppendToBuffer = false;\n      }\n    });\n  },\n  // Is called either to remove the doc completely from matching set or to move\n  // it to the published set later.\n  _removeBuffered: function (id) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      self._unpublishedBuffer.remove(id);\n      // To keep the contract \"buffer is never empty in STEADY phase unless the\n      // everything matching fits into published\" true, we poll everything as\n      // soon as we see the buffer becoming empty.\n      if (! self._unpublishedBuffer.size() && ! self._safeAppendToBuffer)\n        self._needToPollQuery();\n    });\n  },\n  // Called when a document has joined the \"Matching\" results set.\n  // Takes responsibility of keeping _unpublishedBuffer in sync with _published\n  // and the effect of limit enforced.\n  _addMatching: function (doc) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      var id = doc._id;\n      if (self._published.has(id))\n        throw Error(\"tried to add something already published \" + id);\n      if (self._limit && self._unpublishedBuffer.has(id))\n        throw Error(\"tried to add something already existed in buffer \" + id);\n\n      var limit = self._limit;\n      var comparator = self._comparator;\n      var maxPublished = (limit && self._published.size() > 0) ?\n        self._published.get(self._published.maxElementId()) : null;\n      var maxBuffered = (limit && self._unpublishedBuffer.size() > 0)\n        ? self._unpublishedBuffer.get(self._unpublishedBuffer.maxElementId())\n        : null;\n      // The query is unlimited or didn't publish enough documents yet or the\n      // new document would fit into published set pushing the maximum element\n      // out, then we need to publish the doc.\n      var toPublish = ! limit || self._published.size() < limit ||\n        comparator(doc, maxPublished) < 0;\n\n      // Otherwise we might need to buffer it (only in case of limited query).\n      // Buffering is allowed if the buffer is not filled up yet and all\n      // matching docs are either in the published set or in the buffer.\n      var canAppendToBuffer = !toPublish && self._safeAppendToBuffer &&\n        self._unpublishedBuffer.size() < limit;\n\n      // Or if it is small enough to be safely inserted to the middle or the\n      // beginning of the buffer.\n      var canInsertIntoBuffer = !toPublish && maxBuffered &&\n        comparator(doc, maxBuffered) <= 0;\n\n      var toBuffer = canAppendToBuffer || canInsertIntoBuffer;\n\n      if (toPublish) {\n        self._addPublished(id, doc);\n      } else if (toBuffer) {\n        self._addBuffered(id, doc);\n      } else {\n        // dropping it and not saving to the cache\n        self._safeAppendToBuffer = false;\n      }\n    });\n  },\n  // Called when a document leaves the \"Matching\" results set.\n  // Takes responsibility of keeping _unpublishedBuffer in sync with _published\n  // and the effect of limit enforced.\n  _removeMatching: function (id) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      if (! self._published.has(id) && ! self._limit)\n        throw Error(\"tried to remove something matching but not cached \" + id);\n\n      if (self._published.has(id)) {\n        self._removePublished(id);\n      } else if (self._unpublishedBuffer.has(id)) {\n        self._removeBuffered(id);\n      }\n    });\n  },\n  _handleDoc: function (id, newDoc) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      var matchesNow = newDoc && self._matcher.documentMatches(newDoc).result;\n\n      var publishedBefore = self._published.has(id);\n      var bufferedBefore = self._limit && self._unpublishedBuffer.has(id);\n      var cachedBefore = publishedBefore || bufferedBefore;\n\n      if (matchesNow && !cachedBefore) {\n        self._addMatching(newDoc);\n      } else if (cachedBefore && !matchesNow) {\n        self._removeMatching(id);\n      } else if (cachedBefore && matchesNow) {\n        var oldDoc = self._published.get(id);\n        var comparator = self._comparator;\n        var minBuffered = self._limit && self._unpublishedBuffer.size() &&\n          self._unpublishedBuffer.get(self._unpublishedBuffer.minElementId());\n\n        if (publishedBefore) {\n          // Unlimited case where the document stays in published once it\n          // matches or the case when we don't have enough matching docs to\n          // publish or the changed but matching doc will stay in published\n          // anyways.\n          //\n          // XXX: We rely on the emptiness of buffer. Be sure to maintain the\n          // fact that buffer can't be empty if there are matching documents not\n          // published. Notably, we don't want to schedule repoll and continue\n          // relying on this property.\n          var staysInPublished = ! self._limit ||\n            self._unpublishedBuffer.size() === 0 ||\n            comparator(newDoc, minBuffered) <= 0;\n\n          if (staysInPublished) {\n            self._changePublished(id, oldDoc, newDoc);\n          } else {\n            // after the change doc doesn't stay in the published, remove it\n            self._removePublished(id);\n            // but it can move into buffered now, check it\n            var maxBuffered = self._unpublishedBuffer.get(\n              self._unpublishedBuffer.maxElementId());\n\n            var toBuffer = self._safeAppendToBuffer ||\n                  (maxBuffered && comparator(newDoc, maxBuffered) <= 0);\n\n            if (toBuffer) {\n              self._addBuffered(id, newDoc);\n            } else {\n              // Throw away from both published set and buffer\n              self._safeAppendToBuffer = false;\n            }\n          }\n        } else if (bufferedBefore) {\n          oldDoc = self._unpublishedBuffer.get(id);\n          // remove the old version manually instead of using _removeBuffered so\n          // we don't trigger the querying immediately.  if we end this block\n          // with the buffer empty, we will need to trigger the query poll\n          // manually too.\n          self._unpublishedBuffer.remove(id);\n\n          var maxPublished = self._published.get(\n            self._published.maxElementId());\n          var maxBuffered = self._unpublishedBuffer.size() &&\n                self._unpublishedBuffer.get(\n                  self._unpublishedBuffer.maxElementId());\n\n          // the buffered doc was updated, it could move to published\n          var toPublish = comparator(newDoc, maxPublished) < 0;\n\n          // or stays in buffer even after the change\n          var staysInBuffer = (! toPublish && self._safeAppendToBuffer) ||\n                (!toPublish && maxBuffered &&\n                 comparator(newDoc, maxBuffered) <= 0);\n\n          if (toPublish) {\n            self._addPublished(id, newDoc);\n          } else if (staysInBuffer) {\n            // stays in buffer but changes\n            self._unpublishedBuffer.set(id, newDoc);\n          } else {\n            // Throw away from both published set and buffer\n            self._safeAppendToBuffer = false;\n            // Normally this check would have been done in _removeBuffered but\n            // we didn't use it, so we need to do it ourself now.\n            if (! self._unpublishedBuffer.size()) {\n              self._needToPollQuery();\n            }\n          }\n        } else {\n          throw new Error(\"cachedBefore implies either of publishedBefore or bufferedBefore is true.\");\n        }\n      }\n    });\n  },\n  _fetchModifiedDocuments: function () {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      self._registerPhaseChange(PHASE.FETCHING);\n      // Defer, because nothing called from the oplog entry handler may yield,\n      // but fetch() yields.\n      Meteor.defer(finishIfNeedToPollQuery(function () {\n        while (!self._stopped && !self._needToFetch.empty()) {\n          if (self._phase === PHASE.QUERYING) {\n            // While fetching, we decided to go into QUERYING mode, and then we\n            // saw another oplog entry, so _needToFetch is not empty. But we\n            // shouldn't fetch these documents until AFTER the query is done.\n            break;\n          }\n\n          // Being in steady phase here would be surprising.\n          if (self._phase !== PHASE.FETCHING)\n            throw new Error(\"phase in fetchModifiedDocuments: \" + self._phase);\n\n          self._currentlyFetching = self._needToFetch;\n          var thisGeneration = ++self._fetchGeneration;\n          self._needToFetch = new LocalCollection._IdMap;\n          var waiting = 0;\n          var fut = new Future;\n          // This loop is safe, because _currentlyFetching will not be updated\n          // during this loop (in fact, it is never mutated).\n          self._currentlyFetching.forEach(function (cacheKey, id) {\n            waiting++;\n            self._mongoHandle._docFetcher.fetch(\n              self._cursorDescription.collectionName, id, cacheKey,\n              finishIfNeedToPollQuery(function (err, doc) {\n                try {\n                  if (err) {\n                    Meteor._debug(\"Got exception while fetching documents: \" +\n                                  err);\n                    // If we get an error from the fetcher (eg, trouble\n                    // connecting to Mongo), let's just abandon the fetch phase\n                    // altogether and fall back to polling. It's not like we're\n                    // getting live updates anyway.\n                    if (self._phase !== PHASE.QUERYING) {\n                      self._needToPollQuery();\n                    }\n                  } else if (!self._stopped && self._phase === PHASE.FETCHING\n                             && self._fetchGeneration === thisGeneration) {\n                    // We re-check the generation in case we've had an explicit\n                    // _pollQuery call (eg, in another fiber) which should\n                    // effectively cancel this round of fetches.  (_pollQuery\n                    // increments the generation.)\n                    self._handleDoc(id, doc);\n                  }\n                } finally {\n                  waiting--;\n                  // Because fetch() never calls its callback synchronously,\n                  // this is safe (ie, we won't call fut.return() before the\n                  // forEach is done).\n                  if (waiting === 0)\n                    fut.return();\n                }\n              }));\n          });\n          fut.wait();\n          // Exit now if we've had a _pollQuery call (here or in another fiber).\n          if (self._phase === PHASE.QUERYING)\n            return;\n          self._currentlyFetching = null;\n        }\n        // We're done fetching, so we can be steady, unless we've had a\n        // _pollQuery call (here or in another fiber).\n        if (self._phase !== PHASE.QUERYING)\n          self._beSteady();\n      }));\n    });\n  },\n  _beSteady: function () {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      self._registerPhaseChange(PHASE.STEADY);\n      var writes = self._writesToCommitWhenWeReachSteady;\n      self._writesToCommitWhenWeReachSteady = [];\n      self._multiplexer.onFlush(function () {\n        _.each(writes, function (w) {\n          w.committed();\n        });\n      });\n    });\n  },\n  _handleOplogEntryQuerying: function (op) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      self._needToFetch.set(idForOp(op), op.ts.toString());\n    });\n  },\n  _handleOplogEntrySteadyOrFetching: function (op) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      var id = idForOp(op);\n      // If we're already fetching this one, or about to, we can't optimize;\n      // make sure that we fetch it again if necessary.\n      if (self._phase === PHASE.FETCHING &&\n          ((self._currentlyFetching && self._currentlyFetching.has(id)) ||\n           self._needToFetch.has(id))) {\n        self._needToFetch.set(id, op.ts.toString());\n        return;\n      }\n\n      if (op.op === 'd') {\n        if (self._published.has(id) ||\n            (self._limit && self._unpublishedBuffer.has(id)))\n          self._removeMatching(id);\n      } else if (op.op === 'i') {\n        if (self._published.has(id))\n          throw new Error(\"insert found for already-existing ID in published\");\n        if (self._unpublishedBuffer && self._unpublishedBuffer.has(id))\n          throw new Error(\"insert found for already-existing ID in buffer\");\n\n        // XXX what if selector yields?  for now it can't but later it could\n        // have $where\n        if (self._matcher.documentMatches(op.o).result)\n          self._addMatching(op.o);\n      } else if (op.op === 'u') {\n        // Is this a modifier ($set/$unset, which may require us to poll the\n        // database to figure out if the whole document matches the selector) or\n        // a replacement (in which case we can just directly re-evaluate the\n        // selector)?\n        var isReplace = !_.has(op.o, '$set') && !_.has(op.o, '$unset');\n        // If this modifier modifies something inside an EJSON custom type (ie,\n        // anything with EJSON$), then we can't try to use\n        // LocalCollection._modify, since that just mutates the EJSON encoding,\n        // not the actual object.\n        var canDirectlyModifyDoc =\n          !isReplace && modifierCanBeDirectlyApplied(op.o);\n\n        var publishedBefore = self._published.has(id);\n        var bufferedBefore = self._limit && self._unpublishedBuffer.has(id);\n\n        if (isReplace) {\n          self._handleDoc(id, _.extend({_id: id}, op.o));\n        } else if ((publishedBefore || bufferedBefore) &&\n                   canDirectlyModifyDoc) {\n          // Oh great, we actually know what the document is, so we can apply\n          // this directly.\n          var newDoc = self._published.has(id)\n            ? self._published.get(id) : self._unpublishedBuffer.get(id);\n          newDoc = EJSON.clone(newDoc);\n\n          newDoc._id = id;\n          try {\n            LocalCollection._modify(newDoc, op.o);\n          } catch (e) {\n            if (e.name !== \"MinimongoError\")\n              throw e;\n            // We didn't understand the modifier.  Re-fetch.\n            self._needToFetch.set(id, op.ts.toString());\n            if (self._phase === PHASE.STEADY) {\n              self._fetchModifiedDocuments();\n            }\n            return;\n          }\n          self._handleDoc(id, self._sharedProjectionFn(newDoc));\n        } else if (!canDirectlyModifyDoc ||\n                   self._matcher.canBecomeTrueByModifier(op.o) ||\n                   (self._sorter && self._sorter.affectedByModifier(op.o))) {\n          self._needToFetch.set(id, op.ts.toString());\n          if (self._phase === PHASE.STEADY)\n            self._fetchModifiedDocuments();\n        }\n      } else {\n        throw Error(\"XXX SURPRISING OPERATION: \" + op);\n      }\n    });\n  },\n  // Yields!\n  _runInitialQuery: function () {\n    var self = this;\n    if (self._stopped)\n      throw new Error(\"oplog stopped surprisingly early\");\n\n    self._runQuery({initial: true});  // yields\n\n    if (self._stopped)\n      return;  // can happen on queryError\n\n    // Allow observeChanges calls to return. (After this, it's possible for\n    // stop() to be called.)\n    self._multiplexer.ready();\n\n    self._doneQuerying();  // yields\n  },\n\n  // In various circumstances, we may just want to stop processing the oplog and\n  // re-run the initial query, just as if we were a PollingObserveDriver.\n  //\n  // This function may not block, because it is called from an oplog entry\n  // handler.\n  //\n  // XXX We should call this when we detect that we've been in FETCHING for \"too\n  // long\".\n  //\n  // XXX We should call this when we detect Mongo failover (since that might\n  // mean that some of the oplog entries we have processed have been rolled\n  // back). The Node Mongo driver is in the middle of a bunch of huge\n  // refactorings, including the way that it notifies you when primary\n  // changes. Will put off implementing this until driver 1.4 is out.\n  _pollQuery: function () {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      if (self._stopped)\n        return;\n\n      // Yay, we get to forget about all the things we thought we had to fetch.\n      self._needToFetch = new LocalCollection._IdMap;\n      self._currentlyFetching = null;\n      ++self._fetchGeneration;  // ignore any in-flight fetches\n      self._registerPhaseChange(PHASE.QUERYING);\n\n      // Defer so that we don't yield.  We don't need finishIfNeedToPollQuery\n      // here because SwitchedToQuery is not thrown in QUERYING mode.\n      Meteor.defer(function () {\n        self._runQuery();\n        self._doneQuerying();\n      });\n    });\n  },\n\n  // Yields!\n  _runQuery: function (options) {\n    var self = this;\n    options = options || {};\n    var newResults, newBuffer;\n\n    // This while loop is just to retry failures.\n    while (true) {\n      // If we've been stopped, we don't have to run anything any more.\n      if (self._stopped)\n        return;\n\n      newResults = new LocalCollection._IdMap;\n      newBuffer = new LocalCollection._IdMap;\n\n      // Query 2x documents as the half excluded from the original query will go\n      // into unpublished buffer to reduce additional Mongo lookups in cases\n      // when documents are removed from the published set and need a\n      // replacement.\n      // XXX needs more thought on non-zero skip\n      // XXX 2 is a \"magic number\" meaning there is an extra chunk of docs for\n      // buffer if such is needed.\n      var cursor = self._cursorForQuery({ limit: self._limit * 2 });\n      try {\n        cursor.forEach(function (doc, i) {  // yields\n          if (!self._limit || i < self._limit)\n            newResults.set(doc._id, doc);\n          else\n            newBuffer.set(doc._id, doc);\n        });\n        break;\n      } catch (e) {\n        if (options.initial && typeof(e.code) === 'number') {\n          // This is an error document sent to us by mongod, not a connection\n          // error generated by the client. And we've never seen this query work\n          // successfully. Probably it's a bad selector or something, so we\n          // should NOT retry. Instead, we should halt the observe (which ends\n          // up calling `stop` on us).\n          self._multiplexer.queryError(e);\n          return;\n        }\n\n        // During failover (eg) if we get an exception we should log and retry\n        // instead of crashing.\n        Meteor._debug(\"Got exception while polling query: \" + e);\n        Meteor._sleepForMs(100);\n      }\n    }\n\n    if (self._stopped)\n      return;\n\n    self._publishNewResults(newResults, newBuffer);\n  },\n\n  // Transitions to QUERYING and runs another query, or (if already in QUERYING)\n  // ensures that we will query again later.\n  //\n  // This function may not block, because it is called from an oplog entry\n  // handler. However, if we were not already in the QUERYING phase, it throws\n  // an exception that is caught by the closest surrounding\n  // finishIfNeedToPollQuery call; this ensures that we don't continue running\n  // close that was designed for another phase inside PHASE.QUERYING.\n  //\n  // (It's also necessary whenever logic in this file yields to check that other\n  // phases haven't put us into QUERYING mode, though; eg,\n  // _fetchModifiedDocuments does this.)\n  _needToPollQuery: function () {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      if (self._stopped)\n        return;\n\n      // If we're not already in the middle of a query, we can query now\n      // (possibly pausing FETCHING).\n      if (self._phase !== PHASE.QUERYING) {\n        self._pollQuery();\n        throw new SwitchedToQuery;\n      }\n\n      // We're currently in QUERYING. Set a flag to ensure that we run another\n      // query when we're done.\n      self._requeryWhenDoneThisQuery = true;\n    });\n  },\n\n  // Yields!\n  _doneQuerying: function () {\n    var self = this;\n\n    if (self._stopped)\n      return;\n    self._mongoHandle._oplogHandle.waitUntilCaughtUp();  // yields\n    if (self._stopped)\n      return;\n    if (self._phase !== PHASE.QUERYING)\n      throw Error(\"Phase unexpectedly \" + self._phase);\n\n    Meteor._noYieldsAllowed(function () {\n      if (self._requeryWhenDoneThisQuery) {\n        self._requeryWhenDoneThisQuery = false;\n        self._pollQuery();\n      } else if (self._needToFetch.empty()) {\n        self._beSteady();\n      } else {\n        self._fetchModifiedDocuments();\n      }\n    });\n  },\n\n  _cursorForQuery: function (optionsOverwrite) {\n    var self = this;\n    return Meteor._noYieldsAllowed(function () {\n      // The query we run is almost the same as the cursor we are observing,\n      // with a few changes. We need to read all the fields that are relevant to\n      // the selector, not just the fields we are going to publish (that's the\n      // \"shared\" projection). And we don't want to apply any transform in the\n      // cursor, because observeChanges shouldn't use the transform.\n      var options = _.clone(self._cursorDescription.options);\n\n      // Allow the caller to modify the options. Useful to specify different\n      // skip and limit values.\n      _.extend(options, optionsOverwrite);\n\n      options.fields = self._sharedProjection;\n      delete options.transform;\n      // We are NOT deep cloning fields or selector here, which should be OK.\n      var description = new CursorDescription(\n        self._cursorDescription.collectionName,\n        self._cursorDescription.selector,\n        options);\n      return new Cursor(self._mongoHandle, description);\n    });\n  },\n\n\n  // Replace self._published with newResults (both are IdMaps), invoking observe\n  // callbacks on the multiplexer.\n  // Replace self._unpublishedBuffer with newBuffer.\n  //\n  // XXX This is very similar to LocalCollection._diffQueryUnorderedChanges. We\n  // should really: (a) Unify IdMap and OrderedDict into Unordered/OrderedDict\n  // (b) Rewrite diff.js to use these classes instead of arrays and objects.\n  _publishNewResults: function (newResults, newBuffer) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n\n      // If the query is limited and there is a buffer, shut down so it doesn't\n      // stay in a way.\n      if (self._limit) {\n        self._unpublishedBuffer.clear();\n      }\n\n      // First remove anything that's gone. Be careful not to modify\n      // self._published while iterating over it.\n      var idsToRemove = [];\n      self._published.forEach(function (doc, id) {\n        if (!newResults.has(id))\n          idsToRemove.push(id);\n      });\n      _.each(idsToRemove, function (id) {\n        self._removePublished(id);\n      });\n\n      // Now do adds and changes.\n      // If self has a buffer and limit, the new fetched result will be\n      // limited correctly as the query has sort specifier.\n      newResults.forEach(function (doc, id) {\n        self._handleDoc(id, doc);\n      });\n\n      // Sanity-check that everything we tried to put into _published ended up\n      // there.\n      // XXX if this is slow, remove it later\n      if (self._published.size() !== newResults.size()) {\n        throw Error(\n          \"The Mongo server and the Meteor query disagree on how \" +\n            \"many documents match your query. Maybe it is hitting a Mongo \" +\n            \"edge case? The query is: \" +\n            EJSON.stringify(self._cursorDescription.selector));\n      }\n      self._published.forEach(function (doc, id) {\n        if (!newResults.has(id))\n          throw Error(\"_published has a doc that newResults doesn't; \" + id);\n      });\n\n      // Finally, replace the buffer\n      newBuffer.forEach(function (doc, id) {\n        self._addBuffered(id, doc);\n      });\n\n      self._safeAppendToBuffer = newBuffer.size() < self._limit;\n    });\n  },\n\n  // This stop function is invoked from the onStop of the ObserveMultiplexer, so\n  // it shouldn't actually be possible to call it until the multiplexer is\n  // ready.\n  //\n  // It's important to check self._stopped after every call in this file that\n  // can yield!\n  stop: function () {\n    var self = this;\n    if (self._stopped)\n      return;\n    self._stopped = true;\n    _.each(self._stopHandles, function (handle) {\n      handle.stop();\n    });\n\n    // Note: we *don't* use multiplexer.onFlush here because this stop\n    // callback is actually invoked by the multiplexer itself when it has\n    // determined that there are no handles left. So nothing is actually going\n    // to get flushed (and it's probably not valid to call methods on the\n    // dying multiplexer).\n    _.each(self._writesToCommitWhenWeReachSteady, function (w) {\n      w.committed();  // maybe yields?\n    });\n    self._writesToCommitWhenWeReachSteady = null;\n\n    // Proactively drop references to potentially big things.\n    self._published = null;\n    self._unpublishedBuffer = null;\n    self._needToFetch = null;\n    self._currentlyFetching = null;\n    self._oplogEntryHandle = null;\n    self._listenersHandle = null;\n\n    Package.facts && Package.facts.Facts.incrementServerFact(\n      \"mongo-livedata\", \"observe-drivers-oplog\", -1);\n  },\n\n  _registerPhaseChange: function (phase) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      var now = new Date;\n\n      if (self._phase) {\n        var timeDiff = now - self._phaseStartTime;\n        Package.facts && Package.facts.Facts.incrementServerFact(\n          \"mongo-livedata\", \"time-spent-in-\" + self._phase + \"-phase\", timeDiff);\n      }\n\n      self._phase = phase;\n      self._phaseStartTime = now;\n    });\n  }\n});\n\n// Does our oplog tailing code support this cursor? For now, we are being very\n// conservative and allowing only simple queries with simple options.\n// (This is a \"static method\".)\nOplogObserveDriver.cursorSupported = function (cursorDescription, matcher) {\n  // First, check the options.\n  var options = cursorDescription.options;\n\n  // Did the user say no explicitly?\n  if (options._disableOplog)\n    return false;\n\n  // skip is not supported: to support it we would need to keep track of all\n  // \"skipped\" documents or at least their ids.\n  // limit w/o a sort specifier is not supported: current implementation needs a\n  // deterministic way to order documents.\n  if (options.skip || (options.limit && !options.sort)) return false;\n\n  // If a fields projection option is given check if it is supported by\n  // minimongo (some operators are not supported).\n  if (options.fields) {\n    try {\n      LocalCollection._checkSupportedProjection(options.fields);\n    } catch (e) {\n      if (e.name === \"MinimongoError\")\n        return false;\n      else\n        throw e;\n    }\n  }\n\n  // We don't allow the following selectors:\n  //   - $where (not confident that we provide the same JS environment\n  //             as Mongo, and can yield!)\n  //   - $near (has \"interesting\" properties in MongoDB, like the possibility\n  //            of returning an ID multiple times, though even polling maybe\n  //            have a bug there)\n  //           XXX: once we support it, we would need to think more on how we\n  //           initialize the comparators when we create the driver.\n  return !matcher.hasWhere() && !matcher.hasGeoQuery();\n};\n\nvar modifierCanBeDirectlyApplied = function (modifier) {\n  return _.all(modifier, function (fields, operation) {\n    return _.all(fields, function (value, field) {\n      return !/EJSON\\$/.test(field);\n    });\n  });\n};\n\nMongoInternals.OplogObserveDriver = OplogObserveDriver;\n","LocalCollectionDriver = function () {\n  var self = this;\n  self.noConnCollections = {};\n};\n\nvar ensureCollection = function (name, collections) {\n  if (!(name in collections))\n    collections[name] = new LocalCollection(name);\n  return collections[name];\n};\n\n_.extend(LocalCollectionDriver.prototype, {\n  open: function (name, conn) {\n    var self = this;\n    if (!name)\n      return new LocalCollection;\n    if (! conn) {\n      return ensureCollection(name, self.noConnCollections);\n    }\n    if (! conn._mongo_livedata_collections)\n      conn._mongo_livedata_collections = {};\n    // XXX is there a way to keep track of a connection's collections without\n    // dangling it off the connection object?\n    return ensureCollection(name, conn._mongo_livedata_collections);\n  }\n});\n\n// singleton\nLocalCollectionDriver = new LocalCollectionDriver;\n","MongoInternals.RemoteCollectionDriver = function (\n  mongo_url, options) {\n  var self = this;\n  self.mongo = new MongoConnection(mongo_url, options);\n};\n\n_.extend(MongoInternals.RemoteCollectionDriver.prototype, {\n  open: function (name) {\n    var self = this;\n    var ret = {};\n    _.each(\n      ['find', 'findOne', 'insert', 'update', 'upsert',\n       'remove', '_ensureIndex', '_dropIndex', '_createCappedCollection',\n       'dropCollection', 'rawCollection'],\n      function (m) {\n        ret[m] = _.bind(self.mongo[m], self.mongo, name);\n      });\n    return ret;\n  }\n});\n\n\n// Create the singleton RemoteCollectionDriver only on demand, so we\n// only require Mongo configuration if it's actually used (eg, not if\n// you're only trying to receive data from a remote DDP server.)\nMongoInternals.defaultRemoteCollectionDriver = _.once(function () {\n  var connectionOptions = {};\n\n  var mongoUrl = process.env.MONGO_URL;\n\n  if (process.env.MONGO_OPLOG_URL) {\n    connectionOptions.oplogUrl = process.env.MONGO_OPLOG_URL;\n  }\n\n  if (! mongoUrl)\n    throw new Error(\"MONGO_URL must be set in environment\");\n\n  return new MongoInternals.RemoteCollectionDriver(mongoUrl, connectionOptions);\n});\n","// options.connection, if given, is a LivedataClient or LivedataServer\n// XXX presently there is no way to destroy/clean up a Collection\n\n/**\n * @summary Namespace for MongoDB-related items\n * @namespace\n */\nMongo = {};\n\n/**\n * @summary Constructor for a Collection\n * @locus Anywhere\n * @instancename collection\n * @class\n * @param {String} name The name of the collection.  If null, creates an unmanaged (unsynchronized) local collection.\n * @param {Object} [options]\n * @param {Object} options.connection The server connection that will manage this collection. Uses the default connection if not specified.  Pass the return value of calling [`DDP.connect`](#ddp_connect) to specify a different server. Pass `null` to specify no connection. Unmanaged (`name` is null) collections cannot specify a connection.\n * @param {String} options.idGeneration The method of generating the `_id` fields of new documents in this collection.  Possible values:\n\n - **`'STRING'`**: random strings\n - **`'MONGO'`**:  random [`Mongo.ObjectID`](#mongo_object_id) values\n\nThe default id generation technique is `'STRING'`.\n * @param {Function} options.transform An optional transformation function. Documents will be passed through this function before being returned from `fetch` or `findOne`, and before being passed to callbacks of `observe`, `map`, `forEach`, `allow`, and `deny`. Transforms are *not* applied for the callbacks of `observeChanges` or to cursors returned from publish functions.\n */\nMongo.Collection = function (name, options) {\n  var self = this;\n  if (! (self instanceof Mongo.Collection))\n    throw new Error('use \"new\" to construct a Mongo.Collection');\n\n  if (!name && (name !== null)) {\n    Meteor._debug(\"Warning: creating anonymous collection. It will not be \" +\n                  \"saved or synchronized over the network. (Pass null for \" +\n                  \"the collection name to turn off this warning.)\");\n    name = null;\n  }\n\n  if (name !== null && typeof name !== \"string\") {\n    throw new Error(\n      \"First argument to new Mongo.Collection must be a string or null\");\n  }\n\n  if (options && options.methods) {\n    // Backwards compatibility hack with original signature (which passed\n    // \"connection\" directly instead of in options. (Connections must have a \"methods\"\n    // method.)\n    // XXX remove before 1.0\n    options = {connection: options};\n  }\n  // Backwards compatibility: \"connection\" used to be called \"manager\".\n  if (options && options.manager && !options.connection) {\n    options.connection = options.manager;\n  }\n  options = _.extend({\n    connection: undefined,\n    idGeneration: 'STRING',\n    transform: null,\n    _driver: undefined,\n    _preventAutopublish: false\n  }, options);\n\n  switch (options.idGeneration) {\n  case 'MONGO':\n    self._makeNewID = function () {\n      var src = name\n            ? DDP.randomStream('/collection/' + name)\n            : Random.insecure;\n      return new Mongo.ObjectID(src.hexString(24));\n    };\n    break;\n  case 'STRING':\n  default:\n    self._makeNewID = function () {\n      var src = name\n            ? DDP.randomStream('/collection/' + name)\n            : Random.insecure;\n      return src.id();\n    };\n    break;\n  }\n\n  self._transform = LocalCollection.wrapTransform(options.transform);\n\n  if (! name || options.connection === null)\n    // note: nameless collections never have a connection\n    self._connection = null;\n  else if (options.connection)\n    self._connection = options.connection;\n  else if (Meteor.isClient)\n    self._connection = Meteor.connection;\n  else\n    self._connection = Meteor.server;\n\n  if (!options._driver) {\n    // XXX This check assumes that webapp is loaded so that Meteor.server !==\n    // null. We should fully support the case of \"want to use a Mongo-backed\n    // collection from Node code without webapp\", but we don't yet.\n    // #MeteorServerNull\n    if (name && self._connection === Meteor.server &&\n        typeof MongoInternals !== \"undefined\" &&\n        MongoInternals.defaultRemoteCollectionDriver) {\n      options._driver = MongoInternals.defaultRemoteCollectionDriver();\n    } else {\n      options._driver = LocalCollectionDriver;\n    }\n  }\n\n  self._collection = options._driver.open(name, self._connection);\n  self._name = name;\n  self._driver = options._driver;\n\n  if (self._connection && self._connection.registerStore) {\n    // OK, we're going to be a slave, replicating some remote\n    // database, except possibly with some temporary divergence while\n    // we have unacknowledged RPC's.\n    var ok = self._connection.registerStore(name, {\n      // Called at the beginning of a batch of updates. batchSize is the number\n      // of update calls to expect.\n      //\n      // XXX This interface is pretty janky. reset probably ought to go back to\n      // being its own function, and callers shouldn't have to calculate\n      // batchSize. The optimization of not calling pause/remove should be\n      // delayed until later: the first call to update() should buffer its\n      // message, and then we can either directly apply it at endUpdate time if\n      // it was the only update, or do pauseObservers/apply/apply at the next\n      // update() if there's another one.\n      beginUpdate: function (batchSize, reset) {\n        // pause observers so users don't see flicker when updating several\n        // objects at once (including the post-reconnect reset-and-reapply\n        // stage), and so that a re-sorting of a query can take advantage of the\n        // full _diffQuery moved calculation instead of applying change one at a\n        // time.\n        if (batchSize > 1 || reset)\n          self._collection.pauseObservers();\n\n        if (reset)\n          self._collection.remove({});\n      },\n\n      // Apply an update.\n      // XXX better specify this interface (not in terms of a wire message)?\n      update: function (msg) {\n        var mongoId = MongoID.idParse(msg.id);\n        var doc = self._collection.findOne(mongoId);\n\n        // Is this a \"replace the whole doc\" message coming from the quiescence\n        // of method writes to an object? (Note that 'undefined' is a valid\n        // value meaning \"remove it\".)\n        if (msg.msg === 'replace') {\n          var replace = msg.replace;\n          if (!replace) {\n            if (doc)\n              self._collection.remove(mongoId);\n          } else if (!doc) {\n            self._collection.insert(replace);\n          } else {\n            // XXX check that replace has no $ ops\n            self._collection.update(mongoId, replace);\n          }\n          return;\n        } else if (msg.msg === 'added') {\n          if (doc) {\n            throw new Error(\"Expected not to find a document already present for an add\");\n          }\n          self._collection.insert(_.extend({_id: mongoId}, msg.fields));\n        } else if (msg.msg === 'removed') {\n          if (!doc)\n            throw new Error(\"Expected to find a document already present for removed\");\n          self._collection.remove(mongoId);\n        } else if (msg.msg === 'changed') {\n          if (!doc)\n            throw new Error(\"Expected to find a document to change\");\n          if (!_.isEmpty(msg.fields)) {\n            var modifier = {};\n            _.each(msg.fields, function (value, key) {\n              if (value === undefined) {\n                if (!modifier.$unset)\n                  modifier.$unset = {};\n                modifier.$unset[key] = 1;\n              } else {\n                if (!modifier.$set)\n                  modifier.$set = {};\n                modifier.$set[key] = value;\n              }\n            });\n            self._collection.update(mongoId, modifier);\n          }\n        } else {\n          throw new Error(\"I don't know how to deal with this message\");\n        }\n\n      },\n\n      // Called at the end of a batch of updates.\n      endUpdate: function () {\n        self._collection.resumeObservers();\n      },\n\n      // Called around method stub invocations to capture the original versions\n      // of modified documents.\n      saveOriginals: function () {\n        self._collection.saveOriginals();\n      },\n      retrieveOriginals: function () {\n        return self._collection.retrieveOriginals();\n      },\n\n      // Used to preserve current versions of documents across a store reset.\n      getDoc: function(id) {\n        return self.findOne(id);\n      },\n    });\n\n    if (!ok)\n      throw new Error(\"There is already a collection named '\" + name + \"'\");\n  }\n\n  // XXX don't define these until allow or deny is actually used for this\n  // collection. Could be hard if the security rules are only defined on the\n  // server.\n  self._defineMutationMethods();\n\n  // autopublish\n  if (Package.autopublish && !options._preventAutopublish && self._connection\n      && self._connection.publish) {\n    self._connection.publish(null, function () {\n      return self.find();\n    }, {is_auto: true});\n  }\n};\n\n///\n/// Main collection API\n///\n\n\n_.extend(Mongo.Collection.prototype, {\n\n  _getFindSelector: function (args) {\n    if (args.length == 0)\n      return {};\n    else\n      return args[0];\n  },\n\n  _getFindOptions: function (args) {\n    var self = this;\n    if (args.length < 2) {\n      return { transform: self._transform };\n    } else {\n      check(args[1], Match.Optional(Match.ObjectIncluding({\n        fields: Match.Optional(Match.OneOf(Object, undefined)),\n        sort: Match.Optional(Match.OneOf(Object, Array, undefined)),\n        limit: Match.Optional(Match.OneOf(Number, undefined)),\n        skip: Match.Optional(Match.OneOf(Number, undefined))\n     })));\n\n      return _.extend({\n        transform: self._transform\n      }, args[1]);\n    }\n  },\n\n  /**\n   * @summary Find the documents in a collection that match the selector.\n   * @locus Anywhere\n   * @method find\n   * @memberOf Mongo.Collection\n   * @instance\n   * @param {MongoSelector} [selector] A query describing the documents to find\n   * @param {Object} [options]\n   * @param {MongoSortSpecifier} options.sort Sort order (default: natural order)\n   * @param {Number} options.skip Number of results to skip at the beginning\n   * @param {Number} options.limit Maximum number of results to return\n   * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.\n   * @param {Boolean} options.reactive (Client only) Default `true`; pass `false` to disable reactivity\n   * @param {Function} options.transform Overrides `transform` on the  [`Collection`](#collections) for this cursor.  Pass `null` to disable transformation.\n   * @returns {Mongo.Cursor}\n   */\n  find: function (/* selector, options */) {\n    // Collection.find() (return all docs) behaves differently\n    // from Collection.find(undefined) (return 0 docs).  so be\n    // careful about the length of arguments.\n    var self = this;\n    var argArray = _.toArray(arguments);\n    return self._collection.find(self._getFindSelector(argArray),\n                                 self._getFindOptions(argArray));\n  },\n\n  /**\n   * @summary Finds the first document that matches the selector, as ordered by sort and skip options.\n   * @locus Anywhere\n   * @method findOne\n   * @memberOf Mongo.Collection\n   * @instance\n   * @param {MongoSelector} [selector] A query describing the documents to find\n   * @param {Object} [options]\n   * @param {MongoSortSpecifier} options.sort Sort order (default: natural order)\n   * @param {Number} options.skip Number of results to skip at the beginning\n   * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.\n   * @param {Boolean} options.reactive (Client only) Default true; pass false to disable reactivity\n   * @param {Function} options.transform Overrides `transform` on the [`Collection`](#collections) for this cursor.  Pass `null` to disable transformation.\n   * @returns {Object}\n   */\n  findOne: function (/* selector, options */) {\n    var self = this;\n    var argArray = _.toArray(arguments);\n    return self._collection.findOne(self._getFindSelector(argArray),\n                                    self._getFindOptions(argArray));\n  }\n\n});\n\nMongo.Collection._publishCursor = function (cursor, sub, collection) {\n  var observeHandle = cursor.observeChanges({\n    added: function (id, fields) {\n      sub.added(collection, id, fields);\n    },\n    changed: function (id, fields) {\n      sub.changed(collection, id, fields);\n    },\n    removed: function (id) {\n      sub.removed(collection, id);\n    }\n  });\n\n  // We don't call sub.ready() here: it gets called in livedata_server, after\n  // possibly calling _publishCursor on multiple returned cursors.\n\n  // register stop callback (expects lambda w/ no args).\n  sub.onStop(function () {observeHandle.stop();});\n\n  // return the observeHandle in case it needs to be stopped early\n  return observeHandle;\n};\n\n// protect against dangerous selectors.  falsey and {_id: falsey} are both\n// likely programmer error, and not what you want, particularly for destructive\n// operations.  JS regexps don't serialize over DDP but can be trivially\n// replaced by $regex.\nMongo.Collection._rewriteSelector = function (selector) {\n  // shorthand -- scalars match _id\n  if (LocalCollection._selectorIsId(selector))\n    selector = {_id: selector};\n\n  if (_.isArray(selector)) {\n    // This is consistent with the Mongo console itself; if we don't do this\n    // check passing an empty array ends up selecting all items\n    throw new Error(\"Mongo selector can't be an array.\");\n  }\n\n  if (!selector || (('_id' in selector) && !selector._id))\n    // can't match anything\n    return {_id: Random.id()};\n\n  var ret = {};\n  _.each(selector, function (value, key) {\n    // Mongo supports both {field: /foo/} and {field: {$regex: /foo/}}\n    if (value instanceof RegExp) {\n      ret[key] = convertRegexpToMongoSelector(value);\n    } else if (value && value.$regex instanceof RegExp) {\n      ret[key] = convertRegexpToMongoSelector(value.$regex);\n      // if value is {$regex: /foo/, $options: ...} then $options\n      // override the ones set on $regex.\n      if (value.$options !== undefined)\n        ret[key].$options = value.$options;\n    }\n    else if (_.contains(['$or','$and','$nor'], key)) {\n      // Translate lower levels of $and/$or/$nor\n      ret[key] = _.map(value, function (v) {\n        return Mongo.Collection._rewriteSelector(v);\n      });\n    } else {\n      ret[key] = value;\n    }\n  });\n  return ret;\n};\n\n// convert a JS RegExp object to a Mongo {$regex: ..., $options: ...}\n// selector\nfunction convertRegexpToMongoSelector(regexp) {\n  check(regexp, RegExp); // safety belt\n\n  var selector = {$regex: regexp.source};\n  var regexOptions = '';\n  // JS RegExp objects support 'i', 'm', and 'g'. Mongo regex $options\n  // support 'i', 'm', 'x', and 's'. So we support 'i' and 'm' here.\n  if (regexp.ignoreCase)\n    regexOptions += 'i';\n  if (regexp.multiline)\n    regexOptions += 'm';\n  if (regexOptions)\n    selector.$options = regexOptions;\n\n  return selector;\n};\n\n// 'insert' immediately returns the inserted document's new _id.\n// The others return values immediately if you are in a stub, an in-memory\n// unmanaged collection, or a mongo-backed collection and you don't pass a\n// callback. 'update' and 'remove' return the number of affected\n// documents. 'upsert' returns an object with keys 'numberAffected' and, if an\n// insert happened, 'insertedId'.\n//\n// Otherwise, the semantics are exactly like other methods: they take\n// a callback as an optional last argument; if no callback is\n// provided, they block until the operation is complete, and throw an\n// exception if it fails; if a callback is provided, then they don't\n// necessarily block, and they call the callback when they finish with error and\n// result arguments.  (The insert method provides the document ID as its result;\n// update and remove provide the number of affected docs as the result; upsert\n// provides an object with numberAffected and maybe insertedId.)\n//\n// On the client, blocking is impossible, so if a callback\n// isn't provided, they just return immediately and any error\n// information is lost.\n//\n// There's one more tweak. On the client, if you don't provide a\n// callback, then if there is an error, a message will be logged with\n// Meteor._debug.\n//\n// The intent (though this is actually determined by the underlying\n// drivers) is that the operations should be done synchronously, not\n// generating their result until the database has acknowledged\n// them. In the future maybe we should provide a flag to turn this\n// off.\n\n/**\n * @summary Insert a document in the collection.  Returns its unique _id.\n * @locus Anywhere\n * @method  insert\n * @memberOf Mongo.Collection\n * @instance\n * @param {Object} doc The document to insert. May not yet have an _id attribute, in which case Meteor will generate one for you.\n * @param {Function} [callback] Optional.  If present, called with an error object as the first argument and, if no error, the _id as the second.\n */\nMongo.Collection.prototype.insert = function insert(doc, callback) {\n  // Make sure we were passed a document to insert\n  if (!doc) {\n    throw new Error(\"insert requires an argument\");\n  }\n\n  // Shallow-copy the document and possibly generate an ID\n  doc = _.extend({}, doc);\n\n  if ('_id' in doc) {\n    if (!doc._id || !(typeof doc._id === 'string'\n          || doc._id instanceof Mongo.ObjectID)) {\n      throw new Error(\"Meteor requires document _id fields to be non-empty strings or ObjectIDs\");\n    }\n  } else {\n    let generateId = true;\n\n    // Don't generate the id if we're the client and the 'outermost' call\n    // This optimization saves us passing both the randomSeed and the id\n    // Passing both is redundant.\n    if (this._isRemoteCollection()) {\n      const enclosing = DDP._CurrentInvocation.get();\n      if (!enclosing) {\n        generateId = false;\n      }\n    }\n\n    if (generateId) {\n      doc._id = this._makeNewID();\n    }\n  }\n\n  // On inserts, always return the id that we generated; on all other\n  // operations, just return the result from the collection.\n  var chooseReturnValueFromCollectionResult = function (result) {\n    if (doc._id) {\n      return doc._id;\n    }\n\n    // XXX what is this for??\n    // It's some iteraction between the callback to _callMutatorMethod and\n    // the return value conversion\n    doc._id = result;\n\n    return result;\n  };\n\n  const wrappedCallback = wrapCallback(\n    callback, chooseReturnValueFromCollectionResult);\n\n  if (this._isRemoteCollection()) {\n    const result = this._callMutatorMethod(\"insert\", [doc], wrappedCallback);\n    return chooseReturnValueFromCollectionResult(result);\n  }\n\n  // it's my collection.  descend into the collection object\n  // and propagate any exception.\n  try {\n    // If the user provided a callback and the collection implements this\n    // operation asynchronously, then queryRet will be undefined, and the\n    // result will be returned through the callback instead.\n    const result = this._collection.insert(doc, wrappedCallback);\n    return chooseReturnValueFromCollectionResult(result);\n  } catch (e) {\n    if (callback) {\n      callback(e);\n      return null;\n    }\n    throw e;\n  }\n}\n\n/**\n * @summary Modify one or more documents in the collection. Returns the number of affected documents.\n * @locus Anywhere\n * @method update\n * @memberOf Mongo.Collection\n * @instance\n * @param {MongoSelector} selector Specifies which documents to modify\n * @param {MongoModifier} modifier Specifies how to modify the documents\n * @param {Object} [options]\n * @param {Boolean} options.multi True to modify all matching documents; false to only modify one of the matching documents (the default).\n * @param {Boolean} options.upsert True to insert a document if no matching documents are found.\n * @param {Function} [callback] Optional.  If present, called with an error object as the first argument and, if no error, the number of affected documents as the second.\n */\nMongo.Collection.prototype.update = function update(selector, modifier, ...optionsAndCallback) {\n  const callback = popCallbackFromArgs(optionsAndCallback);\n\n  selector = Mongo.Collection._rewriteSelector(selector);\n\n  // We've already popped off the callback, so we are left with an array\n  // of one or zero items\n  const options = _.clone(optionsAndCallback[0]) || {};\n  if (options && options.upsert) {\n    // set `insertedId` if absent.  `insertedId` is a Meteor extension.\n    if (options.insertedId) {\n      if (!(typeof options.insertedId === 'string'\n            || options.insertedId instanceof Mongo.ObjectID))\n        throw new Error(\"insertedId must be string or ObjectID\");\n    } else if (! selector._id) {\n      options.insertedId = this._makeNewID();\n    }\n  }\n\n  const wrappedCallback = wrapCallback(callback);\n\n  if (this._isRemoteCollection()) {\n    const args = [\n      selector,\n      modifier,\n      options\n    ];\n\n    return this._callMutatorMethod(\"update\", args, wrappedCallback);\n  }\n\n  // it's my collection.  descend into the collection object\n  // and propagate any exception.\n  try {\n    // If the user provided a callback and the collection implements this\n    // operation asynchronously, then queryRet will be undefined, and the\n    // result will be returned through the callback instead.\n    return this._collection.update(\n      selector, modifier, options, wrappedCallback);\n  } catch (e) {\n    if (callback) {\n      callback(e);\n      return null;\n    }\n    throw e;\n  }\n}\n\n/**\n * @summary Remove documents from the collection\n * @locus Anywhere\n * @method remove\n * @memberOf Mongo.Collection\n * @instance\n * @param {MongoSelector} selector Specifies which documents to remove\n * @param {Function} [callback] Optional.  If present, called with an error object as its argument.\n */\nMongo.Collection.prototype.remove = function remove(selector, callback) {\n  selector = Mongo.Collection._rewriteSelector(selector);\n\n  const wrappedCallback = wrapCallback(callback);\n\n  if (this._isRemoteCollection()) {\n    return this._callMutatorMethod(\"remove\", [selector], wrappedCallback);\n  }\n\n  // it's my collection.  descend into the collection object\n  // and propagate any exception.\n  try {\n    // If the user provided a callback and the collection implements this\n    // operation asynchronously, then queryRet will be undefined, and the\n    // result will be returned through the callback instead.\n    return this._collection.remove(selector, wrappedCallback);\n  } catch (e) {\n    if (callback) {\n      callback(e);\n      return null;\n    }\n    throw e;\n  }\n};\n\n// Determine if this collection is simply a minimongo representation of a real\n// database on another server\nMongo.Collection.prototype._isRemoteCollection = function _isRemoteCollection() {\n  // XXX see #MeteorServerNull\n  return this._connection && this._connection !== Meteor.server;\n}\n\n// Convert the callback to not return a result if there is an error\nfunction wrapCallback(callback, convertResult) {\n  if (!callback) {\n    return;\n  }\n\n  // If no convert function was passed in, just use a \"blank function\"\n  convertResult = convertResult || _.identity;\n\n  return (error, result) => {\n    callback(error, ! error && convertResult(result));\n  };\n}\n\n/**\n * @summary Modify one or more documents in the collection, or insert one if no matching documents were found. Returns an object with keys `numberAffected` (the number of documents modified)  and `insertedId` (the unique _id of the document that was inserted, if any).\n * @locus Anywhere\n * @param {MongoSelector} selector Specifies which documents to modify\n * @param {MongoModifier} modifier Specifies how to modify the documents\n * @param {Object} [options]\n * @param {Boolean} options.multi True to modify all matching documents; false to only modify one of the matching documents (the default).\n * @param {Function} [callback] Optional.  If present, called with an error object as the first argument and, if no error, the number of affected documents as the second.\n */\nMongo.Collection.prototype.upsert = function upsert(\n    selector, modifier, options, callback) {\n  if (! callback && typeof options === \"function\") {\n    callback = options;\n    options = {};\n  }\n\n  const updateOptions = _.extend({}, options, {\n    _returnObject: true,\n    upsert: true\n  });\n\n  return this.update(selector, modifier, updateOptions, callback);\n};\n\n// We'll actually design an index API later. For now, we just pass through to\n// Mongo's, but make it synchronous.\nMongo.Collection.prototype._ensureIndex = function (index, options) {\n  var self = this;\n  if (!self._collection._ensureIndex)\n    throw new Error(\"Can only call _ensureIndex on server collections\");\n  self._collection._ensureIndex(index, options);\n};\nMongo.Collection.prototype._dropIndex = function (index) {\n  var self = this;\n  if (!self._collection._dropIndex)\n    throw new Error(\"Can only call _dropIndex on server collections\");\n  self._collection._dropIndex(index);\n};\nMongo.Collection.prototype._dropCollection = function () {\n  var self = this;\n  if (!self._collection.dropCollection)\n    throw new Error(\"Can only call _dropCollection on server collections\");\n  self._collection.dropCollection();\n};\nMongo.Collection.prototype._createCappedCollection = function (byteSize, maxDocuments) {\n  var self = this;\n  if (!self._collection._createCappedCollection)\n    throw new Error(\"Can only call _createCappedCollection on server collections\");\n  self._collection._createCappedCollection(byteSize, maxDocuments);\n};\n\n/**\n * @summary Returns the [`Collection`](http://mongodb.github.io/node-mongodb-native/1.4/api-generated/collection.html) object corresponding to this collection from the [npm `mongodb` driver module](https://www.npmjs.com/package/mongodb) which is wrapped by `Mongo.Collection`.\n * @locus Server\n */\nMongo.Collection.prototype.rawCollection = function () {\n  var self = this;\n  if (! self._collection.rawCollection) {\n    throw new Error(\"Can only call rawCollection on server collections\");\n  }\n  return self._collection.rawCollection();\n};\n\n/**\n * @summary Returns the [`Db`](http://mongodb.github.io/node-mongodb-native/1.4/api-generated/db.html) object corresponding to this collection's database connection from the [npm `mongodb` driver module](https://www.npmjs.com/package/mongodb) which is wrapped by `Mongo.Collection`.\n * @locus Server\n */\nMongo.Collection.prototype.rawDatabase = function () {\n  var self = this;\n  if (! (self._driver.mongo && self._driver.mongo.db)) {\n    throw new Error(\"Can only call rawDatabase on server collections\");\n  }\n  return self._driver.mongo.db;\n};\n\n\n/**\n * @summary Create a Mongo-style `ObjectID`.  If you don't specify a `hexString`, the `ObjectID` will generated randomly (not using MongoDB's ID construction rules).\n * @locus Anywhere\n * @class\n * @param {String} [hexString] Optional.  The 24-character hexadecimal contents of the ObjectID to create\n */\nMongo.ObjectID = MongoID.ObjectID;\n\n/**\n * @summary To create a cursor, use find. To access the documents in a cursor, use forEach, map, or fetch.\n * @class\n * @instanceName cursor\n */\nMongo.Cursor = LocalCollection.Cursor;\n\n/**\n * @deprecated in 0.9.1\n */\nMongo.Collection.Cursor = Mongo.Cursor;\n\n/**\n * @deprecated in 0.9.1\n */\nMongo.Collection.ObjectID = Mongo.ObjectID;\n\n/**\n * @deprecated in 0.9.1\n */\nMeteor.Collection = Mongo.Collection;\n\n// Allow deny stuff is now in the allow-deny package\n_.extend(Meteor.Collection.prototype, AllowDeny.CollectionPrototype);\n\nfunction popCallbackFromArgs(args) {\n  // Pull off any callback (or perhaps a 'callback' variable that was passed\n  // in undefined, like how 'upsert' does it).\n  if (args.length &&\n      (args[args.length - 1] === undefined ||\n       args[args.length - 1] instanceof Function)) {\n    return args.pop();\n  }\n}\n"]}}]