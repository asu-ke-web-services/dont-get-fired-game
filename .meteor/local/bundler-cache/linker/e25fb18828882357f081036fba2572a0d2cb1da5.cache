[{"type":"js","data":"/* Imports for global scope */\n\nMongo = Package.mongo.Mongo;\nSession = Package.session.Session;\n$ = Package.jquery.$;\njQuery = Package.jquery.jQuery;\nTracker = Package.tracker.Tracker;\nDeps = Package.tracker.Deps;\n_ = Package.underscore._;\nDate = Package['es5-shim'].Date;\nparseInt = Package['es5-shim'].parseInt;\nECMAScript = Package.ecmascript.ECMAScript;\nMaterialize = Package['poetic:materialize-scss'].Materialize;\nTAPi18next = Package['tap:i18n'].TAPi18next;\nTAPi18n = Package['tap:i18n'].TAPi18n;\nCollection2 = Package['aldeed:collection2'].Collection2;\ndispatch = Package['capsulecat:commands'].dispatch;\ndispatchAsync = Package['capsulecat:commands'].dispatchAsync;\nprocess = Package.meteor.process;\nMeteor = Package.meteor.Meteor;\nglobal = Package.meteor.global;\nWebApp = Package.webapp.WebApp;\nDDP = Package['ddp-client'].DDP;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nBlaze = Package.ui.Blaze;\nUI = Package.ui.UI;\nHandlebars = Package.ui.Handlebars;\nSpacebars = Package.spacebars.Spacebars;\nTemplate = Package.templating.Template;\nmeteorInstall = Package.modules.meteorInstall;\nSymbol = Package['ecmascript-runtime'].Symbol;\nMap = Package['ecmascript-runtime'].Map;\nSet = Package['ecmascript-runtime'].Set;\nregeneratorRuntime = Package['ecmascript-runtime'].regeneratorRuntime;\nbabelHelpers = Package['babel-runtime'].babelHelpers;\nPromise = Package.promise.Promise;\nSimpleSchema = Package['aldeed:simple-schema'].SimpleSchema;\nMongoObject = Package['aldeed:simple-schema'].MongoObject;\nAutoupdate = Package.autoupdate.Autoupdate;\nReload = Package.reload.Reload;\nHTML = Package.htmljs.HTML;\n\n","servePath":"/packages/global-imports.js"},{"type":"js","data":"var require = meteorInstall({\"client\":{\"index.html\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// client/template.index.js                                                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.body.addContent((function() {                                                                                 // 2\n  var view = this;                                                                                                     // 3\n  return HTML.Raw('<div id=\"render-target\"></div>');                                                                   // 4\n}));                                                                                                                   // 5\nMeteor.startup(Template.body.renderToDocument);                                                                        // 6\n                                                                                                                       // 7\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"components\":{\"game\":{\"home\":{\"home.jsx\":[\"react\",\"../setup/setup.jsx\",\"../../../stores/scene-store.jsx\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// client/components/game/home/home.jsx                                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.__esModule = true;                                                                                             //\n                                                                                                                       //\nvar _react = require('react');                                                                                         //\n                                                                                                                       //\nvar _react2 = babelHelpers.interopRequireDefault(_react);                                                              //\n                                                                                                                       //\nvar _setupSetupJsx = require('../setup/setup.jsx');                                                                    //\n                                                                                                                       //\nvar _setupSetupJsx2 = babelHelpers.interopRequireDefault(_setupSetupJsx);                                              //\n                                                                                                                       //\nvar _storesSceneStoreJsx = require('../../../stores/scene-store.jsx');                                                 //\n                                                                                                                       //\nexports['default'] = _react2['default'].createClass({                                                                  //\n  displayName: 'home',                                                                                                 //\n                                                                                                                       //\n  handlePlay: function (e) {                                                                                           // 6\n    e.preventDefault();                                                                                                // 7\n                                                                                                                       //\n    _storesSceneStoreJsx.SceneActions.transition(_react2['default'].createElement(_setupSetupJsx2['default'], null));  // 9\n  },                                                                                                                   //\n                                                                                                                       //\n  render: function () {                                                                                                // 12\n    return _react2['default'].createElement(                                                                           // 13\n      'div',                                                                                                           //\n      { bem_element: '' },                                                                                             //\n      _react2['default'].createElement(                                                                                //\n        'h1',                                                                                                          //\n        null,                                                                                                          //\n        'Game Name Here'                                                                                               //\n      ),                                                                                                               //\n      _react2['default'].createElement(                                                                                //\n        'button',                                                                                                      //\n        { onClick: this.handlePlay },                                                                                  //\n        'Play'                                                                                                         //\n      )                                                                                                                //\n    );                                                                                                                 //\n  }                                                                                                                    //\n});                                                                                                                    //\nmodule.exports = exports['default'];                                                                                   //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"program_list_item\":{\"program_list_item.jsx\":[\"react\",\"../../../stores/scene-store.jsx\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// client/components/game/program_list_item/program_list_item.jsx                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.__esModule = true;                                                                                             //\n                                                                                                                       //\nvar _react = require('react');                                                                                         //\n                                                                                                                       //\nvar _react2 = babelHelpers.interopRequireDefault(_react);                                                              //\n                                                                                                                       //\nvar _storesSceneStoreJsx = require('../../../stores/scene-store.jsx');                                                 //\n                                                                                                                       //\nexports['default'] = _react2['default'].createClass({                                                                  //\n    displayName: 'program_list_item',                                                                                  //\n                                                                                                                       //\n    handlePlay: function (e) {                                                                                         // 5\n        e.preventDefault();                                                                                            // 6\n                                                                                                                       //\n        _storesSceneStoreJsx.SceneActions.transition(_react2['default'].createElement(ProgramListItem, null));         // 8\n    },                                                                                                                 //\n                                                                                                                       //\n    render: function () {                                                                                              // 11\n        return _react2['default'].createElement(                                                                       // 12\n            'div',                                                                                                     //\n            { style: ' padding: 20px;' },                                                                              //\n            _react2['default'].createElement(                                                                          //\n                'h1',                                                                                                  //\n                null,                                                                                                  //\n                'z'                                                                                                    //\n            ),                                                                                                         //\n            _react2['default'].createElement(                                                                          //\n                'button',                                                                                              //\n                { onClick: this.handlePlay },                                                                          //\n                'Play'                                                                                                 //\n            )                                                                                                          //\n        );                                                                                                             //\n    }                                                                                                                  //\n});                                                                                                                    //\nmodule.exports = exports['default'];                                                                                   //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"setup\":{\"setup.jsx\":[\"react\",\"reflux\",\"../../../stores/game-store\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// client/components/game/setup/setup.jsx                                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.__esModule = true;                                                                                             //\n/**                                                                                                                    //\n * GameSetup View                                                                                                      //\n */                                                                                                                    //\n                                                                                                                       //\nvar _react = require('react');                                                                                         //\n                                                                                                                       //\nvar _react2 = babelHelpers.interopRequireDefault(_react);                                                              //\n                                                                                                                       //\nvar _reflux = require('reflux');                                                                                       //\n                                                                                                                       //\nvar _reflux2 = babelHelpers.interopRequireDefault(_reflux);                                                            //\n                                                                                                                       //\nvar _storesGameStore = require('../../../stores/game-store');                                                          //\n                                                                                                                       //\nexports['default'] = _react2['default'].createClass({                                                                  //\n  displayName: 'setup',                                                                                                //\n                                                                                                                       //\n  mixins: [_reflux2['default'].connect(_storesGameStore.GameStore, 'game')],                                           // 9\n                                                                                                                       //\n  handleRandomize: function (e) {                                                                                      // 11\n    e.preventDefault();                                                                                                // 12\n                                                                                                                       //\n    _storesGameStore.GameActions.create();                                                                             // 14\n  },                                                                                                                   //\n                                                                                                                       //\n  handleStart: function (e) {                                                                                          // 17\n    e.preventDefault();                                                                                                // 18\n                                                                                                                       //\n    // TODO change view state!                                                                                         //\n  },                                                                                                                   //\n                                                                                                                       //\n  render: function () {                                                                                                // 23\n    return _react2['default'].createElement(                                                                           // 24\n      'div',                                                                                                           //\n      null,                                                                                                            //\n      _react2['default'].createElement(                                                                                //\n        'h2',                                                                                                          //\n        null,                                                                                                          //\n        this.state.game.name                                                                                           //\n      ),                                                                                                               //\n      _react2['default'].createElement(                                                                                //\n        'p',                                                                                                           //\n        null,                                                                                                          //\n        'Starting Capital ',                                                                                           //\n        this.state.game.capital                                                                                        //\n      ),                                                                                                               //\n      _react2['default'].createElement(                                                                                //\n        'p',                                                                                                           //\n        null,                                                                                                          //\n        'Cash Flow ',                                                                                                  //\n        this.state.game.cashFlow                                                                                       //\n      ),                                                                                                               //\n      _react2['default'].createElement(                                                                                //\n        'p',                                                                                                           //\n        null,                                                                                                          //\n        'Industry ',                                                                                                   //\n        this.state.game.industry.name                                                                                  //\n      ),                                                                                                               //\n      _react2['default'].createElement(                                                                                //\n        'p',                                                                                                           //\n        null,                                                                                                          //\n        'Number of Factories ',                                                                                        //\n        this.state.game.numberOfFactories                                                                              //\n      ),                                                                                                               //\n      _react2['default'].createElement(                                                                                //\n        'p',                                                                                                           //\n        null,                                                                                                          //\n        'Customer Satisfaction ',                                                                                      //\n        this.state.game.customerSatisfaction                                                                           //\n      ),                                                                                                               //\n      _react2['default'].createElement(                                                                                //\n        'p',                                                                                                           //\n        null,                                                                                                          //\n        'Board of Directors Satisfaction ',                                                                            //\n        this.state.game.companySatisfaction                                                                            //\n      ),                                                                                                               //\n      _react2['default'].createElement(                                                                                //\n        'p',                                                                                                           //\n        null,                                                                                                          //\n        'Goal ',                                                                                                       //\n        this.state.game.goal.name                                                                                      //\n      ),                                                                                                               //\n      _react2['default'].createElement(                                                                                //\n        'button',                                                                                                      //\n        { onClick: this.handleRandomize },                                                                             //\n        'Randomize'                                                                                                    //\n      ),                                                                                                               //\n      _react2['default'].createElement(                                                                                //\n        'button',                                                                                                      //\n        { onClick: this.handleStart },                                                                                 //\n        'Start'                                                                                                        //\n      )                                                                                                                //\n    );                                                                                                                 //\n  }                                                                                                                    //\n});                                                                                                                    //\nmodule.exports = exports['default'];                                                                                   //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]}}},\"builders\":{\"definition\":{\"builder.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// client/builders/definition/builder.js                                                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.__esModule = true;                                                                                             //\n/**                                                                                                                    //\n * Builders should have a build method                                                                                 //\n *                                                                                                                     //\n * The builder pattern is an object creation software                                                                  //\n * design pattern. The intention is to allow for lazy                                                                  //\n * creation of an object.                                                                                              //\n *                                                                                                                     //\n * @type {Builder}                                                                                                     //\n */                                                                                                                    //\n                                                                                                                       //\nvar Builder = (function () {                                                                                           //\n  function Builder() {                                                                                                 //\n    babelHelpers.classCallCheck(this, Builder);                                                                        //\n  }                                                                                                                    //\n                                                                                                                       //\n  Builder.prototype.build = (function () {                                                                             // 10\n    function build() {}                                                                                                // 11\n                                                                                                                       //\n    return build;                                                                                                      //\n  })();                                                                                                                //\n                                                                                                                       //\n  return Builder;                                                                                                      //\n})();                                                                                                                  //\n                                                                                                                       //\nexports[\"default\"] = Builder;                                                                                          //\nmodule.exports = exports[\"default\"];                                                                                   //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"company-builder.js\":[\"./definition/builder\",\"../models/company\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// client/builders/company-builder.js                                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.__esModule = true;                                                                                             //\n                                                                                                                       //\nvar _definitionBuilder = require('./definition/builder');                                                              //\n                                                                                                                       //\nvar _definitionBuilder2 = babelHelpers.interopRequireDefault(_definitionBuilder);                                      //\n                                                                                                                       //\nvar _modelsCompany = require('../models/company');                                                                     //\n                                                                                                                       //\nvar _modelsCompany2 = babelHelpers.interopRequireDefault(_modelsCompany);                                              //\n                                                                                                                       //\n/**                                                                                                                    //\n * The Company Builder allows you to lazily build                                                                      //\n * companies.                                                                                                          //\n *                                                                                                                     //\n * @type {Builder}                                                                                                     //\n */                                                                                                                    //\n                                                                                                                       //\nvar CompanyBuilder = (function (_Builder) {                                                                            //\n  babelHelpers.inherits(CompanyBuilder, _Builder);                                                                     //\n                                                                                                                       //\n  function CompanyBuilder() {                                                                                          // 11\n    babelHelpers.classCallCheck(this, CompanyBuilder);                                                                 //\n                                                                                                                       //\n    _Builder.call(this);                                                                                               // 12\n                                                                                                                       //\n    this.options = {};                                                                                                 // 14\n    this.options.name = 'Default Name';                                                                                // 15\n    this.options.capital = 10000000;                                                                                   // 16\n    this.options.industry = {}; // TODO a real default                                                                 // 17\n    this.options.goal = {}; // TODO a real default                                                                     // 18\n    this.options.marketPenetration = 0.001;                                                                            // 19\n    this.options.numberOfFactories = 1;                                                                                // 20\n    this.options.averageFactoryEfficiency = 0.8;                                                                       // 21\n    this.options.programCosts = 0;                                                                                     // 22\n    this.options.companySatisfaction = 0.5;                                                                            // 23\n    this.options.customerSatisfaction = 0.5;                                                                           // 24\n  }                                                                                                                    //\n                                                                                                                       //\n  CompanyBuilder.prototype.setName = (function () {                                                                    // 10\n    function setName(name) {                                                                                           // 27\n      this.options.name = name;                                                                                        // 28\n    }                                                                                                                  //\n                                                                                                                       //\n    return setName;                                                                                                    //\n  })();                                                                                                                //\n                                                                                                                       //\n  CompanyBuilder.prototype.setCapital = (function () {                                                                 // 10\n    function setCapital(capital) {                                                                                     // 31\n      this.options.capital = capital;                                                                                  // 32\n    }                                                                                                                  //\n                                                                                                                       //\n    return setCapital;                                                                                                 //\n  })();                                                                                                                //\n                                                                                                                       //\n  CompanyBuilder.prototype.setIndustry = (function () {                                                                // 10\n    function setIndustry(industry) {                                                                                   // 35\n      // TODO check typeof industry                                                                                    //\n      this.options.industry = industry;                                                                                // 37\n    }                                                                                                                  //\n                                                                                                                       //\n    return setIndustry;                                                                                                //\n  })();                                                                                                                //\n                                                                                                                       //\n  CompanyBuilder.prototype.setGoal = (function () {                                                                    // 10\n    function setGoal(goal) {                                                                                           // 40\n      // TODO check typeof goal                                                                                        //\n      this.options.goal = goal;                                                                                        // 42\n    }                                                                                                                  //\n                                                                                                                       //\n    return setGoal;                                                                                                    //\n  })();                                                                                                                //\n                                                                                                                       //\n  CompanyBuilder.prototype.setMarketPenetration = (function () {                                                       // 10\n    function setMarketPenetration(marketPenetration) {                                                                 // 45\n      this.options.marketPenetration = marketPenetration;                                                              // 46\n    }                                                                                                                  //\n                                                                                                                       //\n    return setMarketPenetration;                                                                                       //\n  })();                                                                                                                //\n                                                                                                                       //\n  CompanyBuilder.prototype.setNumberOfFactories = (function () {                                                       // 10\n    function setNumberOfFactories(numberOfFactories) {                                                                 // 49\n      this.options.numberOfFactories = numberOfFactories;                                                              // 50\n    }                                                                                                                  //\n                                                                                                                       //\n    return setNumberOfFactories;                                                                                       //\n  })();                                                                                                                //\n                                                                                                                       //\n  CompanyBuilder.prototype.setAverageFactoryEfficiency = (function () {                                                // 10\n    function setAverageFactoryEfficiency(averageFactoryEfficiency) {                                                   // 53\n      this.options.averageFactoryEfficiency = averageFactoryEfficiency;                                                // 54\n    }                                                                                                                  //\n                                                                                                                       //\n    return setAverageFactoryEfficiency;                                                                                //\n  })();                                                                                                                //\n                                                                                                                       //\n  CompanyBuilder.prototype.setProgramCosts = (function () {                                                            // 10\n    function setProgramCosts(programCosts) {                                                                           // 57\n      this.options.programCosts = programCosts;                                                                        // 58\n    }                                                                                                                  //\n                                                                                                                       //\n    return setProgramCosts;                                                                                            //\n  })();                                                                                                                //\n                                                                                                                       //\n  CompanyBuilder.prototype.setCompanySatisfaction = (function () {                                                     // 10\n    function setCompanySatisfaction(companySatisfaction) {                                                             // 61\n      this.options.companySatisfaction = companySatisfaction;                                                          // 62\n    }                                                                                                                  //\n                                                                                                                       //\n    return setCompanySatisfaction;                                                                                     //\n  })();                                                                                                                //\n                                                                                                                       //\n  CompanyBuilder.prototype.setCustomerSatisfaction = (function () {                                                    // 10\n    function setCustomerSatisfaction(customerSatisfaction) {                                                           // 65\n      this.options.customerSatisfaction = customerSatisfaction;                                                        // 66\n    }                                                                                                                  //\n                                                                                                                       //\n    return setCustomerSatisfaction;                                                                                    //\n  })();                                                                                                                //\n                                                                                                                       //\n  /**                                                                                                                  //\n   * @override                                                                                                         //\n   * @return {Company}                                                                                                 //\n   */                                                                                                                  //\n                                                                                                                       //\n  CompanyBuilder.prototype.build = (function () {                                                                      // 10\n    function build() {                                                                                                 // 73\n      return new _modelsCompany2['default'](this.options);                                                             // 74\n    }                                                                                                                  //\n                                                                                                                       //\n    return build;                                                                                                      //\n  })();                                                                                                                //\n                                                                                                                       //\n  return CompanyBuilder;                                                                                               //\n})(_definitionBuilder2['default']);                                                                                    //\n                                                                                                                       //\nexports['default'] = CompanyBuilder;                                                                                   //\nmodule.exports = exports['default'];                                                                                   //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"goal-builder.js\":[\"./definition/builder\",\"../models/goal\",\"underscore\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// client/builders/goal-builder.js                                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.__esModule = true;                                                                                             //\n                                                                                                                       //\nvar _definitionBuilder = require('./definition/builder');                                                              //\n                                                                                                                       //\nvar _definitionBuilder2 = babelHelpers.interopRequireDefault(_definitionBuilder);                                      //\n                                                                                                                       //\nvar _modelsGoal = require('../models/goal');                                                                           //\n                                                                                                                       //\nvar _modelsGoal2 = babelHelpers.interopRequireDefault(_modelsGoal);                                                    //\n                                                                                                                       //\nvar _underscore = require('underscore');                                                                               //\n                                                                                                                       //\nvar _underscore2 = babelHelpers.interopRequireDefault(_underscore);                                                    //\n                                                                                                                       //\n/**                                                                                                                    //\n * The Goal Builder allows you to lazily build                                                                         //\n * goals.                                                                                                              //\n *                                                                                                                     //\n * @type {Builder}                                                                                                     //\n */                                                                                                                    //\n                                                                                                                       //\nvar GoalBuilder = (function (_Builder) {                                                                               //\n  babelHelpers.inherits(GoalBuilder, _Builder);                                                                        //\n                                                                                                                       //\n  function GoalBuilder() {                                                                                             // 12\n    babelHelpers.classCallCheck(this, GoalBuilder);                                                                    //\n                                                                                                                       //\n    _Builder.call(this);                                                                                               // 13\n                                                                                                                       //\n    this.options = {};                                                                                                 // 15\n    this.name = 'Default Name';                                                                                        // 16\n    this.description = 'Default Description';                                                                          // 17\n    this.hooks = {};                                                                                                   // 18\n  }                                                                                                                    //\n                                                                                                                       //\n  GoalBuilder.prototype.setName = (function () {                                                                       // 11\n    function setName(name) {                                                                                           // 21\n      this.name = name;                                                                                                // 22\n    }                                                                                                                  //\n                                                                                                                       //\n    return setName;                                                                                                    //\n  })();                                                                                                                //\n                                                                                                                       //\n  GoalBuilder.prototype.setDescription = (function () {                                                                // 11\n    function setDescription(description) {                                                                             // 25\n      this.description = description;                                                                                  // 26\n    }                                                                                                                  //\n                                                                                                                       //\n    return setDescription;                                                                                             //\n  })();                                                                                                                //\n                                                                                                                       //\n  GoalBuilder.prototype.setHooks = (function () {                                                                      // 11\n    function setHooks(hooks) {                                                                                         // 29\n      this.hooks = hooks;                                                                                              // 30\n    }                                                                                                                  //\n                                                                                                                       //\n    return setHooks;                                                                                                   //\n  })();                                                                                                                //\n                                                                                                                       //\n  GoalBuilder.prototype.addHook = (function () {                                                                       // 11\n    function addHook(hookName, hookCallback) {                                                                         // 33\n      this.hooks[hookName] = hookCallback;                                                                             // 34\n    }                                                                                                                  //\n                                                                                                                       //\n    return addHook;                                                                                                    //\n  })();                                                                                                                //\n                                                                                                                       //\n  GoalBuilder.prototype.removeHook = (function () {                                                                    // 11\n    function removeHook(hookName) {                                                                                    // 37\n      delete this.hooks[hookName];                                                                                     // 38\n    }                                                                                                                  //\n                                                                                                                       //\n    return removeHook;                                                                                                 //\n  })();                                                                                                                //\n                                                                                                                       //\n  GoalBuilder.prototype.setFromOptions = (function () {                                                                // 11\n    function setFromOptions(options) {                                                                                 // 41\n      this.options = _underscore2['default'].extend(this.options, options);                                            // 42\n    }                                                                                                                  //\n                                                                                                                       //\n    return setFromOptions;                                                                                             //\n  })();                                                                                                                //\n                                                                                                                       //\n  /**                                                                                                                  //\n   * @override                                                                                                         //\n   * @return {Goal}                                                                                                    //\n   */                                                                                                                  //\n                                                                                                                       //\n  GoalBuilder.prototype.build = (function () {                                                                         // 11\n    function build() {                                                                                                 // 49\n      return new _modelsGoal2['default'](this.options);                                                                // 50\n    }                                                                                                                  //\n                                                                                                                       //\n    return build;                                                                                                      //\n  })();                                                                                                                //\n                                                                                                                       //\n  return GoalBuilder;                                                                                                  //\n})(_definitionBuilder2['default']);                                                                                    //\n                                                                                                                       //\nexports['default'] = GoalBuilder;                                                                                      //\nmodule.exports = exports['default'];                                                                                   //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"industry-builder.js\":[\"./definition/builder\",\"../models/industry\",\"underscore\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// client/builders/industry-builder.js                                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.__esModule = true;                                                                                             //\n                                                                                                                       //\nvar _definitionBuilder = require('./definition/builder');                                                              //\n                                                                                                                       //\nvar _definitionBuilder2 = babelHelpers.interopRequireDefault(_definitionBuilder);                                      //\n                                                                                                                       //\nvar _modelsIndustry = require('../models/industry');                                                                   //\n                                                                                                                       //\nvar _modelsIndustry2 = babelHelpers.interopRequireDefault(_modelsIndustry);                                            //\n                                                                                                                       //\nvar _underscore = require('underscore');                                                                               //\n                                                                                                                       //\nvar _underscore2 = babelHelpers.interopRequireDefault(_underscore);                                                    //\n                                                                                                                       //\n/**                                                                                                                    //\n * The Industry Builder allows you to lazily build                                                                     //\n * industries.                                                                                                         //\n *                                                                                                                     //\n * @type {Builder}                                                                                                     //\n */                                                                                                                    //\n                                                                                                                       //\nvar IndustryBuilder = (function (_Builder) {                                                                           //\n  babelHelpers.inherits(IndustryBuilder, _Builder);                                                                    //\n                                                                                                                       //\n  function IndustryBuilder() {                                                                                         // 12\n    babelHelpers.classCallCheck(this, IndustryBuilder);                                                                //\n                                                                                                                       //\n    _Builder.call(this);                                                                                               // 13\n                                                                                                                       //\n    this.options = {};                                                                                                 // 15\n    this.options.potentialSalesPerQuarter = 0;                                                                         // 16\n    this.options.initialRevenuePerSale = 0;                                                                            // 17\n    this.options.initialCostPerFactory = 0;                                                                            // 18\n    this.options.quarterCostPerFactory = 0;                                                                            // 19\n    this.options.maximumOutputPerFactory = 0;                                                                          // 20\n    this.options.materialCostsPerSale = 0;                                                                             // 21\n    this.options.wastePerSale = 1;                                                                                     // 22\n    this.options.comments = '';                                                                                        // 23\n  }                                                                                                                    //\n                                                                                                                       //\n  IndustryBuilder.prototype.setPotentialSalesPerQuarter = (function () {                                               // 11\n    function setPotentialSalesPerQuarter(potential) {                                                                  // 26\n      this.options.potentialSalesPerQuarter = potential;                                                               // 27\n    }                                                                                                                  //\n                                                                                                                       //\n    return setPotentialSalesPerQuarter;                                                                                //\n  })();                                                                                                                //\n                                                                                                                       //\n  IndustryBuilder.prototype.setInitialRevenuePerSale = (function () {                                                  // 11\n    function setInitialRevenuePerSale(initial) {                                                                       // 30\n      this.options.initialRevenuePerSale = initial;                                                                    // 31\n    }                                                                                                                  //\n                                                                                                                       //\n    return setInitialRevenuePerSale;                                                                                   //\n  })();                                                                                                                //\n                                                                                                                       //\n  IndustryBuilder.prototype.setInitialCostPerFactory = (function () {                                                  // 11\n    function setInitialCostPerFactory(initial) {                                                                       // 34\n      this.options.initialCostPerFactory = initial;                                                                    // 35\n    }                                                                                                                  //\n                                                                                                                       //\n    return setInitialCostPerFactory;                                                                                   //\n  })();                                                                                                                //\n                                                                                                                       //\n  IndustryBuilder.prototype.setQuarterCostPerFactory = (function () {                                                  // 11\n    function setQuarterCostPerFactory(cost) {                                                                          // 38\n      this.options.quarterCostPerFactory = cost;                                                                       // 39\n    }                                                                                                                  //\n                                                                                                                       //\n    return setQuarterCostPerFactory;                                                                                   //\n  })();                                                                                                                //\n                                                                                                                       //\n  IndustryBuilder.prototype.setMaximumOutputPerFactory = (function () {                                                // 11\n    function setMaximumOutputPerFactory(output) {                                                                      // 42\n      this.options.maximumOutputPerFactory = output;                                                                   // 43\n    }                                                                                                                  //\n                                                                                                                       //\n    return setMaximumOutputPerFactory;                                                                                 //\n  })();                                                                                                                //\n                                                                                                                       //\n  IndustryBuilder.prototype.setMaterialCostsPerSale = (function () {                                                   // 11\n    function setMaterialCostsPerSale(costs) {                                                                          // 46\n      this.options.materialCostsPerSale = costs;                                                                       // 47\n    }                                                                                                                  //\n                                                                                                                       //\n    return setMaterialCostsPerSale;                                                                                    //\n  })();                                                                                                                //\n                                                                                                                       //\n  IndustryBuilder.prototype.setWastePerSale = (function () {                                                           // 11\n    function setWastePerSale(wastePerSale) {                                                                           // 50\n      this.options.wastePerSale = wastePerSale;                                                                        // 51\n    }                                                                                                                  //\n                                                                                                                       //\n    return setWastePerSale;                                                                                            //\n  })();                                                                                                                //\n                                                                                                                       //\n  IndustryBuilder.prototype.setComment = (function () {                                                                // 11\n    function setComment(comment) {                                                                                     // 54\n      this.options.comment = comment;                                                                                  // 55\n    }                                                                                                                  //\n                                                                                                                       //\n    return setComment;                                                                                                 //\n  })();                                                                                                                //\n                                                                                                                       //\n  IndustryBuilder.prototype.setFromOptions = (function () {                                                            // 11\n    function setFromOptions(options) {                                                                                 // 58\n      this.options = _underscore2['default'].extend(this.options, options);                                            // 59\n    }                                                                                                                  //\n                                                                                                                       //\n    return setFromOptions;                                                                                             //\n  })();                                                                                                                //\n                                                                                                                       //\n  /**                                                                                                                  //\n   * @override                                                                                                         //\n   * @return {Industry}                                                                                                //\n   */                                                                                                                  //\n                                                                                                                       //\n  IndustryBuilder.prototype.build = (function () {                                                                     // 11\n    function build() {                                                                                                 // 66\n      return new _modelsIndustry2['default'](this.options);                                                            // 67\n    }                                                                                                                  //\n                                                                                                                       //\n    return build;                                                                                                      //\n  })();                                                                                                                //\n                                                                                                                       //\n  return IndustryBuilder;                                                                                              //\n})(_definitionBuilder2['default']);                                                                                    //\n                                                                                                                       //\nexports['default'] = IndustryBuilder;                                                                                  //\nmodule.exports = exports['default'];                                                                                   //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"containers\":{\"game\":{\"game.jsx\":[\"react\",\"reflux\",\"../../stores/scene-store.jsx\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// client/containers/game/game.jsx                                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.__esModule = true;                                                                                             //\n                                                                                                                       //\nvar _react = require('react');                                                                                         //\n                                                                                                                       //\nvar _react2 = babelHelpers.interopRequireDefault(_react);                                                              //\n                                                                                                                       //\nvar _reflux = require('reflux');                                                                                       //\n                                                                                                                       //\nvar _reflux2 = babelHelpers.interopRequireDefault(_reflux);                                                            //\n                                                                                                                       //\nvar _storesSceneStoreJsx = require('../../stores/scene-store.jsx');                                                    //\n                                                                                                                       //\nexports['default'] = _react2['default'].createClass({                                                                  //\n  displayName: 'game',                                                                                                 //\n                                                                                                                       //\n  mixins: [_reflux2['default'].connect(_storesSceneStoreJsx.SceneStore, 'scene')],                                     // 6\n                                                                                                                       //\n  render: function () {                                                                                                // 8\n    return _storesSceneStoreJsx.SceneStore.getScene();                                                                 // 9\n  }                                                                                                                    //\n});                                                                                                                    //\nmodule.exports = exports['default'];                                                                                   //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]}},\"rules\":{\"definition\":{\"rule.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// client/rules/definition/rule.js                                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.__esModule = true;                                                                                             //\n/**                                                                                                                    //\n * Rules should have a calculate method                                                                                //\n *                                                                                                                     //\n * Rules are used to encapsulate very specific calculations                                                            //\n *                                                                                                                     //\n * Similar to strategies, except they ONLY perform                                                                     //\n * basic calculations                                                                                                  //\n */                                                                                                                    //\n                                                                                                                       //\nvar Rule = (function () {                                                                                              //\n  function Rule() {                                                                                                    //\n    babelHelpers.classCallCheck(this, Rule);                                                                           //\n  }                                                                                                                    //\n                                                                                                                       //\n  Rule.prototype.calculate = (function () {                                                                            // 9\n    function calculate() {}                                                                                            // 10\n                                                                                                                       //\n    return calculate;                                                                                                  //\n  })();                                                                                                                //\n                                                                                                                       //\n  return Rule;                                                                                                         //\n})();                                                                                                                  //\n                                                                                                                       //\nexports[\"default\"] = Rule;                                                                                             //\nmodule.exports = exports[\"default\"];                                                                                   //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"action-points-rule.js\":[\"./definition/rule\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// client/rules/action-points-rule.js                                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.__esModule = true;                                                                                             //\n                                                                                                                       //\nvar _definitionRule = require('./definition/rule');                                                                    //\n                                                                                                                       //\nvar _definitionRule2 = babelHelpers.interopRequireDefault(_definitionRule);                                            //\n                                                                                                                       //\nvar ActionPointsRule = (function (_Rule) {                                                                             //\n  babelHelpers.inherits(ActionPointsRule, _Rule);                                                                      //\n                                                                                                                       //\n  function ActionPointsRule() {                                                                                        // 4\n    babelHelpers.classCallCheck(this, ActionPointsRule);                                                               //\n                                                                                                                       //\n    _Rule.call(this);                                                                                                  // 5\n                                                                                                                       //\n    this.baseActionPoints = 50;                                                                                        // 7\n  }                                                                                                                    //\n                                                                                                                       //\n  ActionPointsRule.prototype.calculate = (function () {                                                                // 3\n    function calculate(companySatisfaction) {                                                                          // 10\n      return companySatisfaction * this.baseActionPoints;                                                              // 11\n    }                                                                                                                  //\n                                                                                                                       //\n    return calculate;                                                                                                  //\n  })();                                                                                                                //\n                                                                                                                       //\n  return ActionPointsRule;                                                                                             //\n})(_definitionRule2['default']);                                                                                       //\n                                                                                                                       //\nexports['default'] = ActionPointsRule;                                                                                 //\nmodule.exports = exports['default'];                                                                                   //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"market-size-rule.js\":[\"./definition/rule\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// client/rules/market-size-rule.js                                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.__esModule = true;                                                                                             //\n                                                                                                                       //\nvar _definitionRule = require('./definition/rule');                                                                    //\n                                                                                                                       //\nvar _definitionRule2 = babelHelpers.interopRequireDefault(_definitionRule);                                            //\n                                                                                                                       //\nvar MarketSizeRule = (function (_Rule) {                                                                               //\n  babelHelpers.inherits(MarketSizeRule, _Rule);                                                                        //\n                                                                                                                       //\n  function MarketSizeRule() {                                                                                          //\n    babelHelpers.classCallCheck(this, MarketSizeRule);                                                                 //\n                                                                                                                       //\n    _Rule.apply(this, arguments);                                                                                      //\n  }                                                                                                                    //\n                                                                                                                       //\n  MarketSizeRule.prototype.calculate = (function () {                                                                  // 3\n    function calculate(potentialSalesPerQuarter, initialRevenuePerSale) {                                              // 4\n      return potentialSalesPerQuarter * initialRevenuePerSale;                                                         // 5\n    }                                                                                                                  //\n                                                                                                                       //\n    return calculate;                                                                                                  //\n  })();                                                                                                                //\n                                                                                                                       //\n  return MarketSizeRule;                                                                                               //\n})(_definitionRule2['default']);                                                                                       //\n                                                                                                                       //\nexports['default'] = MarketSizeRule;                                                                                   //\nmodule.exports = exports['default'];                                                                                   //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"material-costs-rule.js\":[\"./definition/rule\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// client/rules/material-costs-rule.js                                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.__esModule = true;                                                                                             //\n                                                                                                                       //\nvar _definitionRule = require('./definition/rule');                                                                    //\n                                                                                                                       //\nvar _definitionRule2 = babelHelpers.interopRequireDefault(_definitionRule);                                            //\n                                                                                                                       //\nvar MaterialCostsRule = (function (_Rule) {                                                                            //\n  babelHelpers.inherits(MaterialCostsRule, _Rule);                                                                     //\n                                                                                                                       //\n  function MaterialCostsRule() {                                                                                       //\n    babelHelpers.classCallCheck(this, MaterialCostsRule);                                                              //\n                                                                                                                       //\n    _Rule.apply(this, arguments);                                                                                      //\n  }                                                                                                                    //\n                                                                                                                       //\n  MaterialCostsRule.prototype.calculate = (function () {                                                               // 3\n    function calculate(materialCostsPerSale, productionCap) {                                                          // 4\n      return materialCostsPerSale * productionCap;                                                                     // 5\n    }                                                                                                                  //\n                                                                                                                       //\n    return calculate;                                                                                                  //\n  })();                                                                                                                //\n                                                                                                                       //\n  return MaterialCostsRule;                                                                                            //\n})(_definitionRule2['default']);                                                                                       //\n                                                                                                                       //\nexports['default'] = MaterialCostsRule;                                                                                //\nmodule.exports = exports['default'];                                                                                   //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"production-cap-rule.js\":[\"./definition/rule\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// client/rules/production-cap-rule.js                                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.__esModule = true;                                                                                             //\n                                                                                                                       //\nvar _definitionRule = require('./definition/rule');                                                                    //\n                                                                                                                       //\nvar _definitionRule2 = babelHelpers.interopRequireDefault(_definitionRule);                                            //\n                                                                                                                       //\nvar ProductionCapRule = (function (_Rule) {                                                                            //\n  babelHelpers.inherits(ProductionCapRule, _Rule);                                                                     //\n                                                                                                                       //\n  function ProductionCapRule() {                                                                                       //\n    babelHelpers.classCallCheck(this, ProductionCapRule);                                                              //\n                                                                                                                       //\n    _Rule.apply(this, arguments);                                                                                      //\n  }                                                                                                                    //\n                                                                                                                       //\n  ProductionCapRule.prototype.calculate = (function () {                                                               // 3\n    function calculate(potentialSalesPerQuarter, marketPenetration, averageFactoryEfficiency, numberOfFactories, maximumOutputPerFactory) {\n      return Math.min(potentialSalesPerQuarter * marketPenetration, averageFactoryEfficiency * maximumOutputPerFactory * numberOfFactories);\n    }                                                                                                                  //\n                                                                                                                       //\n    return calculate;                                                                                                  //\n  })();                                                                                                                //\n                                                                                                                       //\n  return ProductionCapRule;                                                                                            //\n})(_definitionRule2['default']);                                                                                       //\n                                                                                                                       //\nexports['default'] = ProductionCapRule;                                                                                //\nmodule.exports = exports['default'];                                                                                   //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"quarter-cash-flow-rule.js\":[\"./definition/rule\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// client/rules/quarter-cash-flow-rule.js                                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.__esModule = true;                                                                                             //\n                                                                                                                       //\nvar _definitionRule = require('./definition/rule');                                                                    //\n                                                                                                                       //\nvar _definitionRule2 = babelHelpers.interopRequireDefault(_definitionRule);                                            //\n                                                                                                                       //\nvar QuarterCashFlowRule = (function (_Rule) {                                                                          //\n  babelHelpers.inherits(QuarterCashFlowRule, _Rule);                                                                   //\n                                                                                                                       //\n  function QuarterCashFlowRule() {                                                                                     //\n    babelHelpers.classCallCheck(this, QuarterCashFlowRule);                                                            //\n                                                                                                                       //\n    _Rule.apply(this, arguments);                                                                                      //\n  }                                                                                                                    //\n                                                                                                                       //\n  QuarterCashFlowRule.prototype.calculate = (function () {                                                             // 3\n    function calculate(sales, costs) {                                                                                 // 4\n      return sales - costs;                                                                                            // 5\n    }                                                                                                                  //\n                                                                                                                       //\n    return calculate;                                                                                                  //\n  })();                                                                                                                //\n                                                                                                                       //\n  return QuarterCashFlowRule;                                                                                          //\n})(_definitionRule2['default']);                                                                                       //\n                                                                                                                       //\nexports['default'] = QuarterCashFlowRule;                                                                              //\nmodule.exports = exports['default'];                                                                                   //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"quarter-costs-rule.js\":[\"./definition/rule\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// client/rules/quarter-costs-rule.js                                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.__esModule = true;                                                                                             //\n                                                                                                                       //\nvar _definitionRule = require('./definition/rule');                                                                    //\n                                                                                                                       //\nvar _definitionRule2 = babelHelpers.interopRequireDefault(_definitionRule);                                            //\n                                                                                                                       //\n/**                                                                                                                    //\n * Calculates the total costs for the company                                                                          //\n */                                                                                                                    //\n                                                                                                                       //\nvar QuarterCostsRule = (function (_Rule) {                                                                             //\n  babelHelpers.inherits(QuarterCostsRule, _Rule);                                                                      //\n                                                                                                                       //\n  function QuarterCostsRule() {                                                                                        //\n    babelHelpers.classCallCheck(this, QuarterCostsRule);                                                               //\n                                                                                                                       //\n    _Rule.apply(this, arguments);                                                                                      //\n  }                                                                                                                    //\n                                                                                                                       //\n  QuarterCostsRule.prototype.calculate = (function () {                                                                // 6\n    function calculate(costPerFactory, numberOfFactories, averageFactoryEfficiency, materialCosts, programCosts) {     // 7\n      var factoryCost = costPerFactory * numberOfFactories;                                                            // 14\n      var factoryMaterialCosts = 1.0 / Number(averageFactoryEfficiency) * materialCosts;                               // 15\n                                                                                                                       //\n      return factoryCost + factoryMaterialCosts + programCosts;                                                        // 17\n    }                                                                                                                  //\n                                                                                                                       //\n    return calculate;                                                                                                  //\n  })();                                                                                                                //\n                                                                                                                       //\n  return QuarterCostsRule;                                                                                             //\n})(_definitionRule2['default']);                                                                                       //\n                                                                                                                       //\nexports['default'] = QuarterCostsRule;                                                                                 //\nmodule.exports = exports['default'];                                                                                   //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"quarter-sales-rule.js\":[\"./definition/rule\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// client/rules/quarter-sales-rule.js                                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.__esModule = true;                                                                                             //\n                                                                                                                       //\nvar _definitionRule = require('./definition/rule');                                                                    //\n                                                                                                                       //\nvar _definitionRule2 = babelHelpers.interopRequireDefault(_definitionRule);                                            //\n                                                                                                                       //\nvar QuarterSalesRule = (function (_Rule) {                                                                             //\n  babelHelpers.inherits(QuarterSalesRule, _Rule);                                                                      //\n                                                                                                                       //\n  function QuarterSalesRule() {                                                                                        //\n    babelHelpers.classCallCheck(this, QuarterSalesRule);                                                               //\n                                                                                                                       //\n    _Rule.apply(this, arguments);                                                                                      //\n  }                                                                                                                    //\n                                                                                                                       //\n  QuarterSalesRule.prototype.calculate = (function () {                                                                // 3\n    function calculate(percentageOfMarketPenetration, marketSizeInDollars, maximumOutputPerFactory, averageFactoryEffeciency, numberOfFactories) {\n      return Math.min(percentageOfMarketPenetration * marketSizeInDollars, maximumOutputPerFactory * averageFactoryEffeciency * numberOfFactories);\n    }                                                                                                                  //\n                                                                                                                       //\n    return calculate;                                                                                                  //\n  })();                                                                                                                //\n                                                                                                                       //\n  return QuarterSalesRule;                                                                                             //\n})(_definitionRule2['default']);                                                                                       //\n                                                                                                                       //\nexports['default'] = QuarterSalesRule;                                                                                 //\nmodule.exports = exports['default'];                                                                                   //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"strategies\":{\"definition\":{\"strategy.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// client/strategies/definition/strategy.js                                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.__esModule = true;                                                                                             //\n/**                                                                                                                    //\n * Stategies should have an execute method                                                                             //\n *                                                                                                                     //\n * The strategy pattern (also known as the policy pattern)                                                             //\n * is a software design pattern that enables an algorithm's                                                            //\n * behavior to be selected at runtime.                                                                                 //\n *                                                                                                                     //\n * @type {Strategy}                                                                                                    //\n */                                                                                                                    //\n                                                                                                                       //\nvar Strategy = (function () {                                                                                          //\n  function Strategy() {                                                                                                //\n    babelHelpers.classCallCheck(this, Strategy);                                                                       //\n  }                                                                                                                    //\n                                                                                                                       //\n  Strategy.prototype.execute = (function () {                                                                          // 10\n    function execute() {}                                                                                              // 11\n                                                                                                                       //\n    return execute;                                                                                                    //\n  })();                                                                                                                //\n                                                                                                                       //\n  return Strategy;                                                                                                     //\n})();                                                                                                                  //\n                                                                                                                       //\nexports[\"default\"] = Strategy;                                                                                         //\nmodule.exports = exports[\"default\"];                                                                                   //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"point-distribution-strategy.js\":[\"./definition/strategy\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// client/strategies/point-distribution-strategy.js                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.__esModule = true;                                                                                             //\n                                                                                                                       //\nvar _definitionStrategy = require('./definition/strategy');                                                            //\n                                                                                                                       //\nvar _definitionStrategy2 = babelHelpers.interopRequireDefault(_definitionStrategy);                                    //\n                                                                                                                       //\nvar PointDistributionStrategy = (function (_Strategy) {                                                                //\n  babelHelpers.inherits(PointDistributionStrategy, _Strategy);                                                         //\n                                                                                                                       //\n  function PointDistributionStrategy(numberOfBins, maxPoints) {                                                        // 4\n    babelHelpers.classCallCheck(this, PointDistributionStrategy);                                                      //\n                                                                                                                       //\n    _Strategy.call(this);                                                                                              // 5\n                                                                                                                       //\n    this.numberOfBins = numberOfBins;                                                                                  // 7\n    this.maxPoints = maxPoints;                                                                                        // 8\n  }                                                                                                                    //\n                                                                                                                       //\n  // TODO actually implement a good algorithm here                                                                     //\n                                                                                                                       //\n  PointDistributionStrategy.prototype.execute = (function () {                                                         // 3\n    function execute() {                                                                                               // 12\n      var bins = [];                                                                                                   // 13\n                                                                                                                       //\n      for (var i = 0; i < this.numberOfBins; i++) {                                                                    // 15\n        bins[i] = this.maxPoints / Number(this.numberOfBins);                                                          // 16\n      }                                                                                                                //\n                                                                                                                       //\n      return bins;                                                                                                     // 19\n    }                                                                                                                  //\n                                                                                                                       //\n    return execute;                                                                                                    //\n  })();                                                                                                                //\n                                                                                                                       //\n  return PointDistributionStrategy;                                                                                    //\n})(_definitionStrategy2['default']);                                                                                   //\n                                                                                                                       //\nexports['default'] = PointDistributionStrategy;                                                                        //\nmodule.exports = exports['default'];                                                                                   //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"quarter-customer-perception-strategy.js\":[\"./definition/strategy\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// client/strategies/quarter-customer-perception-strategy.js                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.__esModule = true;                                                                                             //\n                                                                                                                       //\nvar _definitionStrategy = require('./definition/strategy');                                                            //\n                                                                                                                       //\nvar _definitionStrategy2 = babelHelpers.interopRequireDefault(_definitionStrategy);                                    //\n                                                                                                                       //\nvar QuarterCustomerPerceptionStrategy = (function (_Strategy) {                                                        //\n  babelHelpers.inherits(QuarterCustomerPerceptionStrategy, _Strategy);                                                 //\n                                                                                                                       //\n  function QuarterCustomerPerceptionStrategy(numberOfItemsMade, factoryWaste) {                                        // 4\n    babelHelpers.classCallCheck(this, QuarterCustomerPerceptionStrategy);                                              //\n                                                                                                                       //\n    _Strategy.call(this);                                                                                              // 5\n                                                                                                                       //\n    this.numberOfItemsMade = numberOfItemsMade;                                                                        // 7\n    this.factoryWaste = factoryWaste;                                                                                  // 8\n                                                                                                                       //\n    this.mapOfPerception = [{ min: 0, max: 0.00001, out: 1.0 }, { min: 0.00001, max: 0.1, out: 0.9 }, { min: 0.1, max: 0.2, out: 0.8 }, { min: 0.2, max: 0.3, out: 0.7 }, { min: 0.3, max: 0.4, out: 0.6 }, { min: 0.4, max: 0.5, out: 0.5 }, { min: 0.5, max: 0.6, out: 0.4 }, { min: 0.6, max: 0.8, out: 0.3 }, { min: 0.8, max: 0.9999, out: 0.1 }, { min: 1, max: Number.MAX_VALUE, out: 0 }];\n  }                                                                                                                    //\n                                                                                                                       //\n  QuarterCustomerPerceptionStrategy.prototype.execute = (function () {                                                 // 3\n    function execute() {                                                                                               // 24\n      var factoryRate = 0;                                                                                             // 25\n                                                                                                                       //\n      if (this.numberOfItemsMade > 0) {                                                                                // 27\n        factoryRate = this.factoryWaste / this.numberOfItemsMade;                                                      // 28\n      }                                                                                                                //\n                                                                                                                       //\n      var wasteRate = factoryRate;                                                                                     // 31\n                                                                                                                       //\n      return this.mapOfPerception.filter(function (mapper) {                                                           // 33\n        var keep = false;                                                                                              // 34\n                                                                                                                       //\n        if (mapper.min <= wasteRate && mapper.max > wasteRate) {                                                       // 36\n          keep = true;                                                                                                 // 37\n        }                                                                                                              //\n                                                                                                                       //\n        return keep;                                                                                                   // 40\n      })[0].out;                                                                                                       //\n    }                                                                                                                  //\n                                                                                                                       //\n    return execute;                                                                                                    //\n  })();                                                                                                                //\n                                                                                                                       //\n  return QuarterCustomerPerceptionStrategy;                                                                            //\n})(_definitionStrategy2['default']);                                                                                   //\n                                                                                                                       //\nexports['default'] = QuarterCustomerPerceptionStrategy;                                                                //\nmodule.exports = exports['default'];                                                                                   //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"random-company-building-strategy.js\":[\"./definition/strategy\",\"../data/goals\",\"../data/industries\",\"../data/companyNames\",\"./point-distribution-strategy\",\"../utils/random\",\"../utils/templating\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// client/strategies/random-company-building-strategy.js                                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.__esModule = true;                                                                                             //\n                                                                                                                       //\nvar _definitionStrategy = require('./definition/strategy');                                                            //\n                                                                                                                       //\nvar _definitionStrategy2 = babelHelpers.interopRequireDefault(_definitionStrategy);                                    //\n                                                                                                                       //\nvar _dataGoals = require('../data/goals');                                                                             //\n                                                                                                                       //\nvar _dataGoals2 = babelHelpers.interopRequireDefault(_dataGoals);                                                      //\n                                                                                                                       //\nvar _dataIndustries = require('../data/industries');                                                                   //\n                                                                                                                       //\nvar _dataIndustries2 = babelHelpers.interopRequireDefault(_dataIndustries);                                            //\n                                                                                                                       //\nvar _dataCompanyNames = require('../data/companyNames');                                                               //\n                                                                                                                       //\nvar _dataCompanyNames2 = babelHelpers.interopRequireDefault(_dataCompanyNames);                                        //\n                                                                                                                       //\nvar _pointDistributionStrategy = require('./point-distribution-strategy');                                             //\n                                                                                                                       //\nvar _pointDistributionStrategy2 = babelHelpers.interopRequireDefault(_pointDistributionStrategy);                      //\n                                                                                                                       //\nvar _utilsRandom = require('../utils/random');                                                                         //\n                                                                                                                       //\nvar _utilsRandom2 = babelHelpers.interopRequireDefault(_utilsRandom);                                                  //\n                                                                                                                       //\nvar _utilsTemplating = require('../utils/templating');                                                                 //\n                                                                                                                       //\nvar _utilsTemplating2 = babelHelpers.interopRequireDefault(_utilsTemplating);                                          //\n                                                                                                                       //\nvar RandomCompanyBuildingStrategy = (function (_Strategy) {                                                            //\n  babelHelpers.inherits(RandomCompanyBuildingStrategy, _Strategy);                                                     //\n                                                                                                                       //\n  function RandomCompanyBuildingStrategy(companyBuilder, industryBuilder, goalBuilder) {                               // 10\n    babelHelpers.classCallCheck(this, RandomCompanyBuildingStrategy);                                                  //\n                                                                                                                       //\n    _Strategy.call(this);                                                                                              // 11\n                                                                                                                       //\n    this.companyBuilder = companyBuilder;                                                                              // 13\n    this.industryBuilder = industryBuilder;                                                                            // 14\n    this.goalBuilder = goalBuilder;                                                                                    // 15\n                                                                                                                       //\n    this.goalData = _dataGoals2['default'];                                                                            // 17\n    this.industryData = _dataIndustries2['default'];                                                                   // 18\n    this.companyNamesData = _dataCompanyNames2['default'];                                                             // 19\n                                                                                                                       //\n    this.numberOfPoints = 25.0;                                                                                        // 21\n    this.pointDistributionStrategy = new _pointDistributionStrategy2['default'](5, this.numberOfPoints);               // 22\n  }                                                                                                                    //\n                                                                                                                       //\n  RandomCompanyBuildingStrategy.prototype.pickAnIndustry = (function () {                                              // 9\n    function pickAnIndustry() {                                                                                        // 25\n      var industry = _utilsRandom2['default'].pick(this.industryData);                                                 // 26\n                                                                                                                       //\n      return industry;                                                                                                 // 28\n    }                                                                                                                  //\n                                                                                                                       //\n    return pickAnIndustry;                                                                                             //\n  })();                                                                                                                //\n                                                                                                                       //\n  RandomCompanyBuildingStrategy.prototype.pickAGoal = (function () {                                                   // 9\n    function pickAGoal() {                                                                                             // 31\n      var goal = _utilsRandom2['default'].pick(this.goalData);                                                         // 32\n                                                                                                                       //\n      return goal;                                                                                                     // 34\n    }                                                                                                                  //\n                                                                                                                       //\n    return pickAGoal;                                                                                                  //\n  })();                                                                                                                //\n                                                                                                                       //\n  RandomCompanyBuildingStrategy.prototype.createCompanyName = (function () {                                           // 9\n    function createCompanyName(industryName) {                                                                         // 37\n      var rawName = _utilsRandom2['default'].pick(this.companyNamesData);                                              // 38\n      var companyName = _utilsTemplating2['default'].templatize(rawName, {                                             // 39\n        name: industryName                                                                                             // 40\n      });                                                                                                              //\n                                                                                                                       //\n      return companyName;                                                                                              // 43\n    }                                                                                                                  //\n                                                                                                                       //\n    return createCompanyName;                                                                                          //\n  })();                                                                                                                //\n                                                                                                                       //\n  RandomCompanyBuildingStrategy.prototype.execute = (function () {                                                     // 9\n    function execute() {                                                                                               // 46\n      // TODO create a system of 25 \"points\" to distribute amoung these different initial settings                     //\n      // Sort of to weight them so that you never have an AMAZING start state                                          //\n      var industryOptions = this.pickAnIndustry();                                                                     // 49\n      var goalOptions = this.pickAGoal();                                                                              // 50\n      var companyName = this.createCompanyName(industryOptions.name);                                                  // 51\n                                                                                                                       //\n      var points = this.pointDistributionStrategy.execute();                                                           // 53\n                                                                                                                       //\n      /* should be between (0.001 and 0.0001] */                                                                       //\n      var marketPenetration = Math.floor(points[0] * 10 / this.numberOfPoints) / 10000;                                // 56\n      /* Between [1 to 3) */                                                                                           //\n      var numberOfFactories = Math.floor(points[1] * 3 / this.numberOfPoints + 1);                                     // 58\n      /* Between 0.1 to 0.4 */                                                                                         //\n      var averageFactoryEfficiency = Math.floor(points[2] * 4 / this.numberOfPoints + 1) / 10;                         // 60\n      /* Between .3 and .7 */                                                                                          //\n      var companySatisfaction = Math.floor(points[3] * 3 / this.numberOfPoints + 4) / 10;                              // 62\n      /* Between .3 and .7 */                                                                                          //\n      var customerSatisfaction = Math.floor(points[4] * 3 / this.numberOfPoints + 4) / 10;                             // 64\n                                                                                                                       //\n      // Build the goal                                                                                                //\n      this.goalBuilder.setFromOptions(goalOptions);                                                                    // 67\n                                                                                                                       //\n      var goal = this.goalBuilder.build();                                                                             // 69\n                                                                                                                       //\n      // Build the industry                                                                                            //\n      this.industryBuilder.setFromOptions(industryOptions);                                                            // 72\n                                                                                                                       //\n      var industry = this.industryBuilder.build();                                                                     // 74\n                                                                                                                       //\n      // Build the company                                                                                             //\n      this.companyBuilder.setGoal(goal);                                                                               // 77\n      this.companyBuilder.setIndustry(industry);                                                                       // 78\n      this.companyBuilder.setName(companyName);                                                                        // 79\n      this.companyBuilder.setMarketPenetration(marketPenetration);                                                     // 80\n      this.companyBuilder.setNumberOfFactories(numberOfFactories);                                                     // 81\n      this.companyBuilder.setAverageFactoryEfficiency(averageFactoryEfficiency);                                       // 82\n      this.companyBuilder.setCompanySatisfaction(companySatisfaction);                                                 // 83\n      this.companyBuilder.setCustomerSatisfaction(customerSatisfaction);                                               // 84\n                                                                                                                       //\n      return this.companyBuilder.build();                                                                              // 86\n    }                                                                                                                  //\n                                                                                                                       //\n    return execute;                                                                                                    //\n  })();                                                                                                                //\n                                                                                                                       //\n  return RandomCompanyBuildingStrategy;                                                                                //\n})(_definitionStrategy2['default']);                                                                                   //\n                                                                                                                       //\nexports['default'] = RandomCompanyBuildingStrategy;                                                                    //\nmodule.exports = exports['default'];                                                                                   //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"data\":{\"companyNames.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// client/data/companyNames.js                                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.__esModule = true;                                                                                             //\nexports['default'] = ['Benny\\'s {{name}}', '{{name}} Co'];                                                             //\nmodule.exports = exports['default'];                                                                                   //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"goals.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// client/data/goals.js                                                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.__esModule = true;                                                                                             //\nexports['default'] = [{                                                                                                //\n  name: 'Reach $10,000,000 in funds',                                                                                  // 3\n  description: 'Accumulate a total of $10,000,000 in your available funds',                                            // 4\n  hooks: [{                                                                                                            // 5\n    subscribe: 'funds-change',                                                                                         // 6\n    callback: function (newFundAmount) {                                                                               // 7\n      var success = false;                                                                                             // 8\n      if (newFundAmount > 10000000) {                                                                                  // 9\n        success = true;                                                                                                // 10\n      }                                                                                                                //\n                                                                                                                       //\n      return success;                                                                                                  // 13\n    }                                                                                                                  //\n  }]                                                                                                                   //\n}];                                                                                                                    //\nmodule.exports = exports['default'];                                                                                   //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"industries.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// client/data/industries.js                                                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.__esModule = true;                                                                                             //\nexports['default'] = [{                                                                                                //\n  name: 'Beverage',                                                                                                    // 3\n  potentialSalesPerQuarter: 2242000000,                                                                                // 4\n  initialRevenuePerSale: 0.7,                                                                                          // 5\n  initialCostPerFactory: 500000,                                                                                       // 6\n  quarterCostPerFactory: 200000,                                                                                       // 7\n  maximumOutputPerFactory: 5000,                                                                                       // 8\n  materialCostsPerSale: 0.1,                                                                                           // 9\n  wastePerSale: 1,                                                                                                     // 10\n  comments: '1% market share at $1 a sale nets $22.42 million in revenue.'                                             // 11\n}];                                                                                                                    //\nmodule.exports = exports['default'];                                                                                   //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"models\":{\"company.js\":[\"../rules/action-points-rule\",\"../rules/production-cap-rule\",\"../rules/material-costs-rule\",\"../rules/quarter-sales-rule\",\"../rules/quarter-costs-rule\",\"../rules/quarter-cash-flow-rule\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// client/models/company.js                                                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.__esModule = true;                                                                                             //\n                                                                                                                       //\nvar _rulesActionPointsRule = require('../rules/action-points-rule');                                                   //\n                                                                                                                       //\nvar _rulesActionPointsRule2 = babelHelpers.interopRequireDefault(_rulesActionPointsRule);                              //\n                                                                                                                       //\nvar _rulesProductionCapRule = require('../rules/production-cap-rule');                                                 //\n                                                                                                                       //\nvar _rulesProductionCapRule2 = babelHelpers.interopRequireDefault(_rulesProductionCapRule);                            //\n                                                                                                                       //\nvar _rulesMaterialCostsRule = require('../rules/material-costs-rule');                                                 //\n                                                                                                                       //\nvar _rulesMaterialCostsRule2 = babelHelpers.interopRequireDefault(_rulesMaterialCostsRule);                            //\n                                                                                                                       //\nvar _rulesQuarterSalesRule = require('../rules/quarter-sales-rule');                                                   //\n                                                                                                                       //\nvar _rulesQuarterSalesRule2 = babelHelpers.interopRequireDefault(_rulesQuarterSalesRule);                              //\n                                                                                                                       //\nvar _rulesQuarterCostsRule = require('../rules/quarter-costs-rule');                                                   //\n                                                                                                                       //\nvar _rulesQuarterCostsRule2 = babelHelpers.interopRequireDefault(_rulesQuarterCostsRule);                              //\n                                                                                                                       //\nvar _rulesQuarterCashFlowRule = require('../rules/quarter-cash-flow-rule');                                            //\n                                                                                                                       //\nvar _rulesQuarterCashFlowRule2 = babelHelpers.interopRequireDefault(_rulesQuarterCashFlowRule);                        //\n                                                                                                                       //\nvar Company = (function () {                                                                                           //\n    function Company(options) {                                                                                        // 9\n        babelHelpers.classCallCheck(this, Company);                                                                    //\n                                                                                                                       //\n        this.name = options.name;                                                                                      // 10\n        this.capital = options.capital;                                                                                // 11\n        this.industry = options.industry;                                                                              // 12\n        this.goal = options.goal;                                                                                      // 13\n        this.marketPenetration = options.marketPenetration;                                                            // 14\n        this.numberOfFactories = options.numberOfFactories;                                                            // 15\n        this.averageFactoryEfficiency = options.averageFactoryEfficiency;                                              // 16\n        this.programCosts = options.programCosts;                                                                      // 17\n        this.companySatisfaction = options.companySatisfaction;                                                        // 18\n        this.customerSatisfaction = options.customerSatisfaction;                                                      // 19\n                                                                                                                       //\n        this.actionPointsRule = new _rulesActionPointsRule2['default']();                                              // 21\n        this.productionCapRule = new _rulesProductionCapRule2['default']();                                            // 22\n        this.materialCostsRule = new _rulesMaterialCostsRule2['default']();                                            // 23\n        this.salesRule = new _rulesQuarterSalesRule2['default']();                                                     // 24\n        this.costsRule = new _rulesQuarterCostsRule2['default']();                                                     // 25\n        this.cashFlowRule = new _rulesQuarterCashFlowRule2['default']();                                               // 26\n    }                                                                                                                  //\n                                                                                                                       //\n    Company.prototype.addFactory = (function () {                                                                      // 8\n        function addFactory() {                                                                                        // 29\n            // TODO descrease cash                                                                                     //\n            // TODO add a factory                                                                                      //\n        }                                                                                                              //\n                                                                                                                       //\n        return addFactory;                                                                                             //\n    })();                                                                                                              //\n                                                                                                                       //\n    Company.prototype.getCalculatedMetrics = (function () {                                                            // 8\n        function getCalculatedMetrics() {                                                                              // 34\n            var actionPoints = this.actionPointsRule.calculate(this.companySatisfaction);                              // 35\n            var productionCap = this.productionCapRule.calculate(this.industry.potentialSalesPerQuarter, this.marketPenetration, this.averageFactoryEfficiency, this.numberOfFactories, this.industry.maximumOutputPerFactory);\n            var sales = this.salesRule.calculate(this.marketPenetration, this.industry.getCalculatedMetrics().marketSizeInDollars, this.industry.maximumOutputPerFactory, this.averageFactoryEfficiency, this.numberOfFactories);\n            var costs = this.costsRule.calculate(this.industry.quarterCostPerFactory, this.numberOfFactories, this.averageFactoryEfficiency, this.materialCostsRule.calculate(this.industry.materialCostsPerSale, productionCap), this.programCosts);\n            var cashFlow = this.cashFlowRule.calculate(sales, costs);                                                  // 62\n            // TODO calculate waste                                                                                    //\n                                                                                                                       //\n            return { actionPoints: actionPoints, productionCap: productionCap, sales: sales, costs: costs, cashFlow: cashFlow };\n        }                                                                                                              //\n                                                                                                                       //\n        return getCalculatedMetrics;                                                                                   //\n    })();                                                                                                              //\n                                                                                                                       //\n    return Company;                                                                                                    //\n})();                                                                                                                  //\n                                                                                                                       //\nexports['default'] = Company;                                                                                          //\nmodule.exports = exports['default'];                                                                                   //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"game.js\":[\"../builders/company-builder\",\"../builders/industry-builder\",\"../builders/goal-builder\",\"../strategies/random-company-building-strategy\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// client/models/game.js                                                                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.__esModule = true;                                                                                             //\n                                                                                                                       //\nvar _buildersCompanyBuilder = require('../builders/company-builder');                                                  //\n                                                                                                                       //\nvar _buildersCompanyBuilder2 = babelHelpers.interopRequireDefault(_buildersCompanyBuilder);                            //\n                                                                                                                       //\nvar _buildersIndustryBuilder = require('../builders/industry-builder');                                                //\n                                                                                                                       //\nvar _buildersIndustryBuilder2 = babelHelpers.interopRequireDefault(_buildersIndustryBuilder);                          //\n                                                                                                                       //\nvar _buildersGoalBuilder = require('../builders/goal-builder');                                                        //\n                                                                                                                       //\nvar _buildersGoalBuilder2 = babelHelpers.interopRequireDefault(_buildersGoalBuilder);                                  //\n                                                                                                                       //\nvar _strategiesRandomCompanyBuildingStrategy = require('../strategies/random-company-building-strategy');              //\n                                                                                                                       //\nvar _strategiesRandomCompanyBuildingStrategy2 = babelHelpers.interopRequireDefault(_strategiesRandomCompanyBuildingStrategy);\n                                                                                                                       //\nvar Game = (function () {                                                                                              //\n  function Game() {                                                                                                    // 9\n    babelHelpers.classCallCheck(this, Game);                                                                           //\n                                                                                                                       //\n    this.company = null;                                                                                               // 10\n    this.companyBuilder = _buildersCompanyBuilder2['default'];                                                         // 11\n    this.industryBuilder = _buildersIndustryBuilder2['default'];                                                       // 12\n    this.goalBuilder = _buildersGoalBuilder2['default'];                                                               // 13\n    this.companyBuildingStrategy = _strategiesRandomCompanyBuildingStrategy2['default'];                               // 14\n  }                                                                                                                    //\n                                                                                                                       //\n  Game.prototype.init = (function () {                                                                                 // 8\n    function init() {                                                                                                  // 17\n      var company = this.createCompany();                                                                              // 18\n                                                                                                                       //\n      this.company = company;                                                                                          // 20\n    }                                                                                                                  //\n                                                                                                                       //\n    return init;                                                                                                       //\n  })();                                                                                                                //\n                                                                                                                       //\n  Game.prototype.createCompany = (function () {                                                                        // 8\n    function createCompany() {                                                                                         // 23\n      var strategy = new this.companyBuildingStrategy(new this.companyBuilder(), new this.industryBuilder(), new this.goalBuilder());\n      return strategy.execute();                                                                                       // 29\n    }                                                                                                                  //\n                                                                                                                       //\n    return createCompany;                                                                                              //\n  })();                                                                                                                //\n                                                                                                                       //\n  return Game;                                                                                                         //\n})();                                                                                                                  //\n                                                                                                                       //\nexports['default'] = Game;                                                                                             //\nmodule.exports = exports['default'];                                                                                   //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"goal.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// client/models/goal.js                                                                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.__esModule = true;                                                                                             //\n                                                                                                                       //\nvar Goal = (function () {                                                                                              //\n  function Goal(options) {                                                                                             // 2\n    babelHelpers.classCallCheck(this, Goal);                                                                           //\n                                                                                                                       //\n    this.name = options.name;                                                                                          // 3\n    this.description = options.description;                                                                            // 4\n    this.hooks = options.hooks;                                                                                        // 5\n  }                                                                                                                    //\n                                                                                                                       //\n  return Goal;                                                                                                         //\n})();                                                                                                                  //\n                                                                                                                       //\nexports[\"default\"] = Goal;                                                                                             //\nmodule.exports = exports[\"default\"];                                                                                   //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"industry.js\":[\"../rules/market-size-rule\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// client/models/industry.js                                                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.__esModule = true;                                                                                             //\n                                                                                                                       //\nvar _rulesMarketSizeRule = require('../rules/market-size-rule');                                                       //\n                                                                                                                       //\nvar _rulesMarketSizeRule2 = babelHelpers.interopRequireDefault(_rulesMarketSizeRule);                                  //\n                                                                                                                       //\nvar Industry = (function () {                                                                                          //\n  function Industry(options) {                                                                                         // 4\n    babelHelpers.classCallCheck(this, Industry);                                                                       //\n                                                                                                                       //\n    this.name = options.name;                                                                                          // 5\n    this.potentialSalesPerQuarter = options.potentialSalesPerQuarter;                                                  // 6\n    this.initialRevenuePerSale = options.initialRevenuePerSale;                                                        // 7\n    this.initialCostPerFactory = options.initialCostPerFactory;                                                        // 8\n    this.quarterCostPerFactory = options.quarterCostPerFactory;                                                        // 9\n    this.maximumOutputPerFactory = options.maximumOutputPerFactory;                                                    // 10\n    this.materialCostsPerSale = options.materialCostsPerSale;                                                          // 11\n    this.wastePerSale = options.wastePerSale;                                                                          // 12\n    this.comments = options.comments;                                                                                  // 13\n                                                                                                                       //\n    this.marketSizeRule = new _rulesMarketSizeRule2['default']();                                                      // 15\n  }                                                                                                                    //\n                                                                                                                       //\n  Industry.prototype.getCalculatedMetrics = (function () {                                                             // 3\n    function getCalculatedMetrics() {                                                                                  // 18\n      var marketSize = this.marketSizeRule.calculate(this.potentialSalesPerQuarter, this.initialRevenuePerSale);       // 19\n                                                                                                                       //\n      return {                                                                                                         // 24\n        marketSizeInDollars: marketSize                                                                                // 25\n      };                                                                                                               //\n    }                                                                                                                  //\n                                                                                                                       //\n    return getCalculatedMetrics;                                                                                       //\n  })();                                                                                                                //\n                                                                                                                       //\n  return Industry;                                                                                                     //\n})();                                                                                                                  //\n                                                                                                                       //\nexports['default'] = Industry;                                                                                         //\nmodule.exports = exports['default'];                                                                                   //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"stores\":{\"game-store.js\":[\"reflux\",\"underscore\",\"../models/game\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// client/stores/game-store.js                                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.__esModule = true;                                                                                             //\n                                                                                                                       //\nvar _reflux = require('reflux');                                                                                       //\n                                                                                                                       //\nvar _reflux2 = babelHelpers.interopRequireDefault(_reflux);                                                            //\n                                                                                                                       //\nvar _underscore = require('underscore');                                                                               //\n                                                                                                                       //\nvar _underscore2 = babelHelpers.interopRequireDefault(_underscore);                                                    //\n                                                                                                                       //\nvar _modelsGame = require('../models/game');                                                                           //\n                                                                                                                       //\nvar _modelsGame2 = babelHelpers.interopRequireDefault(_modelsGame);                                                    //\n                                                                                                                       //\nvar GameActions = _reflux2['default'].createActions(['create']);                                                       // 5\n                                                                                                                       //\nvar GameStore = _reflux2['default'].createStore({                                                                      // 9\n  listenables: [GameActions],                                                                                          // 10\n                                                                                                                       //\n  init: function () {                                                                                                  // 12\n    this._create();                                                                                                    // 13\n  },                                                                                                                   //\n                                                                                                                       //\n  _create: function () {                                                                                               // 16\n    this._game = new _modelsGame2['default']();                                                                        // 17\n    this._game.init();                                                                                                 // 18\n  },                                                                                                                   //\n                                                                                                                       //\n  create: function () {                                                                                                // 21\n    this._create();                                                                                                    // 22\n    this.trigger(this.getInitialState());                                                                              // 23\n  },                                                                                                                   //\n                                                                                                                       //\n  getInitialState: function () {                                                                                       // 26\n    var game = this._game;                                                                                             // 27\n                                                                                                                       //\n    var state = _underscore2['default'].extend({}, game.company, game.company.getCalculatedMetrics());                 // 29\n    // TODO wrap in a debug utility                                                                                    //\n    // console.log(state);                                                                                             //\n    return state;                                                                                                      // 36\n  }                                                                                                                    //\n});                                                                                                                    //\n                                                                                                                       //\nexports.GameActions = GameActions;                                                                                     //\nexports.GameStore = GameStore;                                                                                         //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"scene-store.jsx\":[\"react\",\"reflux\",\"../components/game/home/home.jsx\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// client/stores/scene-store.jsx                                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.__esModule = true;                                                                                             //\n                                                                                                                       //\nvar _react = require('react');                                                                                         //\n                                                                                                                       //\nvar _react2 = babelHelpers.interopRequireDefault(_react);                                                              //\n                                                                                                                       //\nvar _reflux = require('reflux');                                                                                       //\n                                                                                                                       //\nvar _reflux2 = babelHelpers.interopRequireDefault(_reflux);                                                            //\n                                                                                                                       //\nvar _componentsGameHomeHomeJsx = require('../components/game/home/home.jsx');                                          //\n                                                                                                                       //\nvar _componentsGameHomeHomeJsx2 = babelHelpers.interopRequireDefault(_componentsGameHomeHomeJsx);                      //\n                                                                                                                       //\nvar SceneActions = _reflux2['default'].createActions(['transition']);                                                  // 5\n                                                                                                                       //\nvar SceneStore = _reflux2['default'].createStore({                                                                     // 9\n  listenables: [SceneActions],                                                                                         // 10\n                                                                                                                       //\n  init: function () {                                                                                                  // 12\n    this._sceneId = null;                                                                                              // 13\n    this._scene = null;                                                                                                // 14\n  },                                                                                                                   //\n                                                                                                                       //\n  transition: function (scene) {                                                                                       // 17\n    this._scene = scene;                                                                                               // 18\n    this._sceneId = scene._rootNodeId;                                                                                 // 19\n    this.trigger(this._sceneId);                                                                                       // 20\n  },                                                                                                                   //\n                                                                                                                       //\n  getInitialState: function () {                                                                                       // 23\n    if (this._scene === null) {                                                                                        // 24\n      var home = _react2['default'].createElement(_componentsGameHomeHomeJsx2['default'], null);                       // 25\n      this._sceneId = home._rootNodeID;                                                                                // 26\n      this._scene = home;                                                                                              // 27\n    }                                                                                                                  //\n                                                                                                                       //\n    return {                                                                                                           // 30\n      sceneId: this._sceneId                                                                                           // 31\n    };                                                                                                                 //\n  },                                                                                                                   //\n                                                                                                                       //\n  getScene: function () {                                                                                              // 35\n    return this._scene;                                                                                                // 36\n  }                                                                                                                    //\n});                                                                                                                    //\n                                                                                                                       //\nexports['default'] = { SceneActions: SceneActions, SceneStore: SceneStore };                                           //\nmodule.exports = exports['default'];                                                                                   //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"utils\":{\"random.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// client/utils/random.js                                                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.__esModule = true;                                                                                             //\nexports['default'] = {                                                                                                 //\n  pick: function (arr) {                                                                                               // 2\n    if (!(arr instanceof Array)) {                                                                                     // 3\n      throw new Error('You must provide an array to Utils.Random.pick');                                               // 4\n    }                                                                                                                  //\n                                                                                                                       //\n    if (arr.length === 0) {                                                                                            // 7\n      return null;                                                                                                     // 8\n    }                                                                                                                  //\n                                                                                                                       //\n    return arr[Math.floor(Math.random() * arr.length)];                                                                // 11\n  }                                                                                                                    //\n};                                                                                                                     //\nmodule.exports = exports['default'];                                                                                   //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"templating.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// client/utils/templating.js                                                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.__esModule = true;                                                                                             //\nexports['default'] = {                                                                                                 //\n  templatize: function (template, data) {                                                                              // 2\n    var rendered = template;                                                                                           // 3\n    for (var key in babelHelpers.sanitizeForInObject(data)) {                                                          // 4\n      if (data.hasOwnProperty(key)) {                                                                                  // 5\n        var value = data[key];                                                                                         // 6\n                                                                                                                       //\n        var regex = new RegExp('{{(\\s)*?' + key + '(\\s)*?}}', 'g');                                                    // 8\n                                                                                                                       //\n        rendered = rendered.replace(regex, value);                                                                     // 10\n      }                                                                                                                //\n    }                                                                                                                  //\n                                                                                                                       //\n    return rendered;                                                                                                   // 14\n  }                                                                                                                    //\n};                                                                                                                     //\nmodule.exports = exports['default'];                                                                                   //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"index.jsx\":[\"react\",\"react-dom\",\"./containers/game/game.jsx\",\"./components/game/program_list_item/program_list_item.jsx\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// client/index.jsx                                                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _react = require('react');                                                                                         //\n                                                                                                                       //\nvar _react2 = babelHelpers.interopRequireDefault(_react);                                                              //\n                                                                                                                       //\nvar _reactDom = require('react-dom');                                                                                  //\n                                                                                                                       //\nvar _reactDom2 = babelHelpers.interopRequireDefault(_reactDom);                                                        //\n                                                                                                                       //\nvar _containersGameGameJsx = require('./containers/game/game.jsx');                                                    //\n                                                                                                                       //\nvar _containersGameGameJsx2 = babelHelpers.interopRequireDefault(_containersGameGameJsx);                              //\n                                                                                                                       //\nvar _componentsGameProgram_list_itemProgram_list_itemJsx = require('./components/game/program_list_item/program_list_item.jsx');\n                                                                                                                       //\nvar _componentsGameProgram_list_itemProgram_list_itemJsx2 = babelHelpers.interopRequireDefault(_componentsGameProgram_list_itemProgram_list_itemJsx);\n                                                                                                                       //\nMeteor.startup(function () {                                                                                           // 5\n  _reactDom2['default'].render(_react2['default'].createElement(_componentsGameProgram_list_itemProgram_list_itemJsx2['default'], null), document.getElementById('render-target'));\n});                                                                                                                    //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"node_modules\":{\"react\":{\"package.json\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/package.json                                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"react\";                                                                                                // 1\nexports.main = \"react.js\";                                                                                             // 2\n                                                                                                                       // 3\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"react.js\":[\"./lib/React\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/react.js                                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n'use strict';                                                                                                          // 1\n                                                                                                                       // 2\nmodule.exports = require('./lib/React');                                                                               // 3\n                                                                                                                       // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"lib\":{\"React.js\":[\"./ReactDOM\",\"./ReactDOMServer\",\"./ReactIsomorphic\",\"./Object.assign\",\"./deprecated\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/React.js                                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule React                                                                                               // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar ReactDOM = require('./ReactDOM');                                                                                  // 14\nvar ReactDOMServer = require('./ReactDOMServer');                                                                      // 15\nvar ReactIsomorphic = require('./ReactIsomorphic');                                                                    // 16\n                                                                                                                       // 17\nvar assign = require('./Object.assign');                                                                               // 18\nvar deprecated = require('./deprecated');                                                                              // 19\n                                                                                                                       // 20\n// `version` will be added here by ReactIsomorphic.                                                                    // 21\nvar React = {};                                                                                                        // 22\n                                                                                                                       // 23\nassign(React, ReactIsomorphic);                                                                                        // 24\n                                                                                                                       // 25\nassign(React, {                                                                                                        // 26\n  // ReactDOM                                                                                                          // 27\n  findDOMNode: deprecated('findDOMNode', 'ReactDOM', 'react-dom', ReactDOM, ReactDOM.findDOMNode),                     // 28\n  render: deprecated('render', 'ReactDOM', 'react-dom', ReactDOM, ReactDOM.render),                                    // 29\n  unmountComponentAtNode: deprecated('unmountComponentAtNode', 'ReactDOM', 'react-dom', ReactDOM, ReactDOM.unmountComponentAtNode),\n                                                                                                                       // 31\n  // ReactDOMServer                                                                                                    // 32\n  renderToString: deprecated('renderToString', 'ReactDOMServer', 'react-dom/server', ReactDOMServer, ReactDOMServer.renderToString),\n  renderToStaticMarkup: deprecated('renderToStaticMarkup', 'ReactDOMServer', 'react-dom/server', ReactDOMServer, ReactDOMServer.renderToStaticMarkup)\n});                                                                                                                    // 35\n                                                                                                                       // 36\nReact.__SECRET_DOM_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactDOM;                                                         // 37\nReact.__SECRET_DOM_SERVER_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactDOMServer;                                            // 38\n                                                                                                                       // 39\nmodule.exports = React;                                                                                                // 40\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactDOM.js\":[\"./ReactCurrentOwner\",\"./ReactDOMTextComponent\",\"./ReactDefaultInjection\",\"./ReactInstanceHandles\",\"./ReactMount\",\"./ReactPerf\",\"./ReactReconciler\",\"./ReactUpdates\",\"./ReactVersion\",\"./findDOMNode\",\"./renderSubtreeIntoContainer\",\"fbjs/lib/warning\",\"fbjs/lib/ExecutionEnvironment\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactDOM.js                                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactDOM                                                                                            // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n/* globals __REACT_DEVTOOLS_GLOBAL_HOOK__*/                                                                            // 12\n                                                                                                                       // 13\n'use strict';                                                                                                          // 14\n                                                                                                                       // 15\nvar ReactCurrentOwner = require('./ReactCurrentOwner');                                                                // 16\nvar ReactDOMTextComponent = require('./ReactDOMTextComponent');                                                        // 17\nvar ReactDefaultInjection = require('./ReactDefaultInjection');                                                        // 18\nvar ReactInstanceHandles = require('./ReactInstanceHandles');                                                          // 19\nvar ReactMount = require('./ReactMount');                                                                              // 20\nvar ReactPerf = require('./ReactPerf');                                                                                // 21\nvar ReactReconciler = require('./ReactReconciler');                                                                    // 22\nvar ReactUpdates = require('./ReactUpdates');                                                                          // 23\nvar ReactVersion = require('./ReactVersion');                                                                          // 24\n                                                                                                                       // 25\nvar findDOMNode = require('./findDOMNode');                                                                            // 26\nvar renderSubtreeIntoContainer = require('./renderSubtreeIntoContainer');                                              // 27\nvar warning = require('fbjs/lib/warning');                                                                             // 28\n                                                                                                                       // 29\nReactDefaultInjection.inject();                                                                                        // 30\n                                                                                                                       // 31\nvar render = ReactPerf.measure('React', 'render', ReactMount.render);                                                  // 32\n                                                                                                                       // 33\nvar React = {                                                                                                          // 34\n  findDOMNode: findDOMNode,                                                                                            // 35\n  render: render,                                                                                                      // 36\n  unmountComponentAtNode: ReactMount.unmountComponentAtNode,                                                           // 37\n  version: ReactVersion,                                                                                               // 38\n                                                                                                                       // 39\n  /* eslint-disable camelcase */                                                                                       // 40\n  unstable_batchedUpdates: ReactUpdates.batchedUpdates,                                                                // 41\n  unstable_renderSubtreeIntoContainer: renderSubtreeIntoContainer                                                      // 42\n};                                                                                                                     // 43\n                                                                                                                       // 44\n// Inject the runtime into a devtools global hook regardless of browser.                                               // 45\n// Allows for debugging when the hook is injected on the page.                                                         // 46\n/* eslint-enable camelcase */                                                                                          // 47\nif (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {\n  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({                                                                              // 49\n    CurrentOwner: ReactCurrentOwner,                                                                                   // 50\n    InstanceHandles: ReactInstanceHandles,                                                                             // 51\n    Mount: ReactMount,                                                                                                 // 52\n    Reconciler: ReactReconciler,                                                                                       // 53\n    TextComponent: ReactDOMTextComponent                                                                               // 54\n  });                                                                                                                  // 55\n}                                                                                                                      // 56\n                                                                                                                       // 57\nif (process.env.NODE_ENV !== 'production') {                                                                           // 58\n  var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');                                                 // 59\n  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {                                                  // 60\n                                                                                                                       // 61\n    // First check if devtools is not installed                                                                        // 62\n    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {                                                       // 63\n      // If we're in Chrome or Firefox, provide a download link if not installed.                                      // 64\n      if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {\n        console.debug('Download the React DevTools for a better development experience: ' + 'https://fb.me/react-devtools');\n      }                                                                                                                // 67\n    }                                                                                                                  // 68\n                                                                                                                       // 69\n    // If we're in IE8, check to see if we are in compatibility mode and provide                                       // 70\n    // information on preventing compatibility mode                                                                    // 71\n    var ieCompatibilityMode = document.documentMode && document.documentMode < 8;                                      // 72\n                                                                                                                       // 73\n    process.env.NODE_ENV !== 'production' ? warning(!ieCompatibilityMode, 'Internet Explorer is running in compatibility mode; please add the ' + 'following tag to your HTML to prevent this from happening: ' + '<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />') : undefined;\n                                                                                                                       // 75\n    var expectedFeatures = [                                                                                           // 76\n    // shims                                                                                                           // 77\n    Array.isArray, Array.prototype.every, Array.prototype.forEach, Array.prototype.indexOf, Array.prototype.map, Date.now, Function.prototype.bind, Object.keys, String.prototype.split, String.prototype.trim,\n                                                                                                                       // 79\n    // shams                                                                                                           // 80\n    Object.create, Object.freeze];                                                                                     // 81\n                                                                                                                       // 82\n    for (var i = 0; i < expectedFeatures.length; i++) {                                                                // 83\n      if (!expectedFeatures[i]) {                                                                                      // 84\n        console.error('One or more ES5 shim/shams expected by React are not available: ' + 'https://fb.me/react-warning-polyfills');\n        break;                                                                                                         // 86\n      }                                                                                                                // 87\n    }                                                                                                                  // 88\n  }                                                                                                                    // 89\n}                                                                                                                      // 90\n                                                                                                                       // 91\nmodule.exports = React;                                                                                                // 92\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactCurrentOwner.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactCurrentOwner.js                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactCurrentOwner                                                                                   // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\n/**                                                                                                                    // 14\n * Keeps track of the current owner.                                                                                   // 15\n *                                                                                                                     // 16\n * The current owner is the component who should own any components that are                                           // 17\n * currently being constructed.                                                                                        // 18\n */                                                                                                                    // 19\nvar ReactCurrentOwner = {                                                                                              // 20\n                                                                                                                       // 21\n  /**                                                                                                                  // 22\n   * @internal                                                                                                         // 23\n   * @type {ReactComponent}                                                                                            // 24\n   */                                                                                                                  // 25\n  current: null                                                                                                        // 26\n                                                                                                                       // 27\n};                                                                                                                     // 28\n                                                                                                                       // 29\nmodule.exports = ReactCurrentOwner;                                                                                    // 30\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ReactDOMTextComponent.js\":[\"./DOMChildrenOperations\",\"./DOMPropertyOperations\",\"./ReactComponentBrowserEnvironment\",\"./ReactMount\",\"./Object.assign\",\"./escapeTextContentForBrowser\",\"./setTextContent\",\"./validateDOMNesting\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactDOMTextComponent.js                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactDOMTextComponent                                                                               // 9\n * @typechecks static-only                                                                                             // 10\n */                                                                                                                    // 11\n                                                                                                                       // 12\n'use strict';                                                                                                          // 13\n                                                                                                                       // 14\nvar DOMChildrenOperations = require('./DOMChildrenOperations');                                                        // 15\nvar DOMPropertyOperations = require('./DOMPropertyOperations');                                                        // 16\nvar ReactComponentBrowserEnvironment = require('./ReactComponentBrowserEnvironment');                                  // 17\nvar ReactMount = require('./ReactMount');                                                                              // 18\n                                                                                                                       // 19\nvar assign = require('./Object.assign');                                                                               // 20\nvar escapeTextContentForBrowser = require('./escapeTextContentForBrowser');                                            // 21\nvar setTextContent = require('./setTextContent');                                                                      // 22\nvar validateDOMNesting = require('./validateDOMNesting');                                                              // 23\n                                                                                                                       // 24\n/**                                                                                                                    // 25\n * Text nodes violate a couple assumptions that React makes about components:                                          // 26\n *                                                                                                                     // 27\n *  - When mounting text into the DOM, adjacent text nodes are merged.                                                 // 28\n *  - Text nodes cannot be assigned a React root ID.                                                                   // 29\n *                                                                                                                     // 30\n * This component is used to wrap strings in elements so that they can undergo                                         // 31\n * the same reconciliation that is applied to elements.                                                                // 32\n *                                                                                                                     // 33\n * TODO: Investigate representing React components in the DOM with text nodes.                                         // 34\n *                                                                                                                     // 35\n * @class ReactDOMTextComponent                                                                                        // 36\n * @extends ReactComponent                                                                                             // 37\n * @internal                                                                                                           // 38\n */                                                                                                                    // 39\nvar ReactDOMTextComponent = function (props) {                                                                         // 40\n  // This constructor and its argument is currently used by mocks.                                                     // 41\n};                                                                                                                     // 42\n                                                                                                                       // 43\nassign(ReactDOMTextComponent.prototype, {                                                                              // 44\n                                                                                                                       // 45\n  /**                                                                                                                  // 46\n   * @param {ReactText} text                                                                                           // 47\n   * @internal                                                                                                         // 48\n   */                                                                                                                  // 49\n  construct: function (text) {                                                                                         // 50\n    // TODO: This is really a ReactText (ReactNode), not a ReactElement                                                // 51\n    this._currentElement = text;                                                                                       // 52\n    this._stringText = '' + text;                                                                                      // 53\n                                                                                                                       // 54\n    // Properties                                                                                                      // 55\n    this._rootNodeID = null;                                                                                           // 56\n    this._mountIndex = 0;                                                                                              // 57\n  },                                                                                                                   // 58\n                                                                                                                       // 59\n  /**                                                                                                                  // 60\n   * Creates the markup for this text node. This node is not intended to have                                          // 61\n   * any features besides containing text content.                                                                     // 62\n   *                                                                                                                   // 63\n   * @param {string} rootID DOM ID of the root node.                                                                   // 64\n   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction                                    // 65\n   * @return {string} Markup for this text node.                                                                       // 66\n   * @internal                                                                                                         // 67\n   */                                                                                                                  // 68\n  mountComponent: function (rootID, transaction, context) {                                                            // 69\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 70\n      if (context[validateDOMNesting.ancestorInfoContextKey]) {                                                        // 71\n        validateDOMNesting('span', null, context[validateDOMNesting.ancestorInfoContextKey]);                          // 72\n      }                                                                                                                // 73\n    }                                                                                                                  // 74\n                                                                                                                       // 75\n    this._rootNodeID = rootID;                                                                                         // 76\n    if (transaction.useCreateElement) {                                                                                // 77\n      var ownerDocument = context[ReactMount.ownerDocumentContextKey];                                                 // 78\n      var el = ownerDocument.createElement('span');                                                                    // 79\n      DOMPropertyOperations.setAttributeForID(el, rootID);                                                             // 80\n      // Populate node cache                                                                                           // 81\n      ReactMount.getID(el);                                                                                            // 82\n      setTextContent(el, this._stringText);                                                                            // 83\n      return el;                                                                                                       // 84\n    } else {                                                                                                           // 85\n      var escapedText = escapeTextContentForBrowser(this._stringText);                                                 // 86\n                                                                                                                       // 87\n      if (transaction.renderToStaticMarkup) {                                                                          // 88\n        // Normally we'd wrap this in a `span` for the reasons stated above, but                                       // 89\n        // since this is a situation where React won't take over (static pages),                                       // 90\n        // we can simply return the text as it is.                                                                     // 91\n        return escapedText;                                                                                            // 92\n      }                                                                                                                // 93\n                                                                                                                       // 94\n      return '<span ' + DOMPropertyOperations.createMarkupForID(rootID) + '>' + escapedText + '</span>';               // 95\n    }                                                                                                                  // 96\n  },                                                                                                                   // 97\n                                                                                                                       // 98\n  /**                                                                                                                  // 99\n   * Updates this component by updating the text content.                                                              // 100\n   *                                                                                                                   // 101\n   * @param {ReactText} nextText The next text content                                                                 // 102\n   * @param {ReactReconcileTransaction} transaction                                                                    // 103\n   * @internal                                                                                                         // 104\n   */                                                                                                                  // 105\n  receiveComponent: function (nextText, transaction) {                                                                 // 106\n    if (nextText !== this._currentElement) {                                                                           // 107\n      this._currentElement = nextText;                                                                                 // 108\n      var nextStringText = '' + nextText;                                                                              // 109\n      if (nextStringText !== this._stringText) {                                                                       // 110\n        // TODO: Save this as pending props and use performUpdateIfNecessary                                           // 111\n        // and/or updateComponent to do the actual update for consistency with                                         // 112\n        // other component types?                                                                                      // 113\n        this._stringText = nextStringText;                                                                             // 114\n        var node = ReactMount.getNode(this._rootNodeID);                                                               // 115\n        DOMChildrenOperations.updateTextContent(node, nextStringText);                                                 // 116\n      }                                                                                                                // 117\n    }                                                                                                                  // 118\n  },                                                                                                                   // 119\n                                                                                                                       // 120\n  unmountComponent: function () {                                                                                      // 121\n    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);                                       // 122\n  }                                                                                                                    // 123\n                                                                                                                       // 124\n});                                                                                                                    // 125\n                                                                                                                       // 126\nmodule.exports = ReactDOMTextComponent;                                                                                // 127\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"DOMChildrenOperations.js\":[\"./Danger\",\"./ReactMultiChildUpdateTypes\",\"./ReactPerf\",\"./setInnerHTML\",\"./setTextContent\",\"fbjs/lib/invariant\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/DOMChildrenOperations.js                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule DOMChildrenOperations                                                                               // 9\n * @typechecks static-only                                                                                             // 10\n */                                                                                                                    // 11\n                                                                                                                       // 12\n'use strict';                                                                                                          // 13\n                                                                                                                       // 14\nvar Danger = require('./Danger');                                                                                      // 15\nvar ReactMultiChildUpdateTypes = require('./ReactMultiChildUpdateTypes');                                              // 16\nvar ReactPerf = require('./ReactPerf');                                                                                // 17\n                                                                                                                       // 18\nvar setInnerHTML = require('./setInnerHTML');                                                                          // 19\nvar setTextContent = require('./setTextContent');                                                                      // 20\nvar invariant = require('fbjs/lib/invariant');                                                                         // 21\n                                                                                                                       // 22\n/**                                                                                                                    // 23\n * Inserts `childNode` as a child of `parentNode` at the `index`.                                                      // 24\n *                                                                                                                     // 25\n * @param {DOMElement} parentNode Parent node in which to insert.                                                      // 26\n * @param {DOMElement} childNode Child node to insert.                                                                 // 27\n * @param {number} index Index at which to insert the child.                                                           // 28\n * @internal                                                                                                           // 29\n */                                                                                                                    // 30\nfunction insertChildAt(parentNode, childNode, index) {                                                                 // 31\n  // By exploiting arrays returning `undefined` for an undefined index, we can                                         // 32\n  // rely exclusively on `insertBefore(node, null)` instead of also using                                              // 33\n  // `appendChild(node)`. However, using `undefined` is not allowed by all                                             // 34\n  // browsers so we must replace it with `null`.                                                                       // 35\n                                                                                                                       // 36\n  // fix render order error in safari                                                                                  // 37\n  // IE8 will throw error when index out of list size.                                                                 // 38\n  var beforeChild = index >= parentNode.childNodes.length ? null : parentNode.childNodes.item(index);                  // 39\n                                                                                                                       // 40\n  parentNode.insertBefore(childNode, beforeChild);                                                                     // 41\n}                                                                                                                      // 42\n                                                                                                                       // 43\n/**                                                                                                                    // 44\n * Operations for updating with DOM children.                                                                          // 45\n */                                                                                                                    // 46\nvar DOMChildrenOperations = {                                                                                          // 47\n                                                                                                                       // 48\n  dangerouslyReplaceNodeWithMarkup: Danger.dangerouslyReplaceNodeWithMarkup,                                           // 49\n                                                                                                                       // 50\n  updateTextContent: setTextContent,                                                                                   // 51\n                                                                                                                       // 52\n  /**                                                                                                                  // 53\n   * Updates a component's children by processing a series of updates. The                                             // 54\n   * update configurations are each expected to have a `parentNode` property.                                          // 55\n   *                                                                                                                   // 56\n   * @param {array<object>} updates List of update configurations.                                                     // 57\n   * @param {array<string>} markupList List of markup strings.                                                         // 58\n   * @internal                                                                                                         // 59\n   */                                                                                                                  // 60\n  processUpdates: function (updates, markupList) {                                                                     // 61\n    var update;                                                                                                        // 62\n    // Mapping from parent IDs to initial child orderings.                                                             // 63\n    var initialChildren = null;                                                                                        // 64\n    // List of children that will be moved or removed.                                                                 // 65\n    var updatedChildren = null;                                                                                        // 66\n                                                                                                                       // 67\n    for (var i = 0; i < updates.length; i++) {                                                                         // 68\n      update = updates[i];                                                                                             // 69\n      if (update.type === ReactMultiChildUpdateTypes.MOVE_EXISTING || update.type === ReactMultiChildUpdateTypes.REMOVE_NODE) {\n        var updatedIndex = update.fromIndex;                                                                           // 71\n        var updatedChild = update.parentNode.childNodes[updatedIndex];                                                 // 72\n        var parentID = update.parentID;                                                                                // 73\n                                                                                                                       // 74\n        !updatedChild ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processUpdates(): Unable to find child %s of element. This ' + 'probably means the DOM was unexpectedly mutated (e.g., by the ' + 'browser), usually due to forgetting a <tbody> when using tables, ' + 'nesting tags like <form>, <p>, or <a>, or using non-SVG elements ' + 'in an <svg> parent. Try inspecting the child nodes of the element ' + 'with React ID `%s`.', updatedIndex, parentID) : invariant(false) : undefined;\n                                                                                                                       // 76\n        initialChildren = initialChildren || {};                                                                       // 77\n        initialChildren[parentID] = initialChildren[parentID] || [];                                                   // 78\n        initialChildren[parentID][updatedIndex] = updatedChild;                                                        // 79\n                                                                                                                       // 80\n        updatedChildren = updatedChildren || [];                                                                       // 81\n        updatedChildren.push(updatedChild);                                                                            // 82\n      }                                                                                                                // 83\n    }                                                                                                                  // 84\n                                                                                                                       // 85\n    var renderedMarkup;                                                                                                // 86\n    // markupList is either a list of markup or just a list of elements                                                // 87\n    if (markupList.length && typeof markupList[0] === 'string') {                                                      // 88\n      renderedMarkup = Danger.dangerouslyRenderMarkup(markupList);                                                     // 89\n    } else {                                                                                                           // 90\n      renderedMarkup = markupList;                                                                                     // 91\n    }                                                                                                                  // 92\n                                                                                                                       // 93\n    // Remove updated children first so that `toIndex` is consistent.                                                  // 94\n    if (updatedChildren) {                                                                                             // 95\n      for (var j = 0; j < updatedChildren.length; j++) {                                                               // 96\n        updatedChildren[j].parentNode.removeChild(updatedChildren[j]);                                                 // 97\n      }                                                                                                                // 98\n    }                                                                                                                  // 99\n                                                                                                                       // 100\n    for (var k = 0; k < updates.length; k++) {                                                                         // 101\n      update = updates[k];                                                                                             // 102\n      switch (update.type) {                                                                                           // 103\n        case ReactMultiChildUpdateTypes.INSERT_MARKUP:                                                                 // 104\n          insertChildAt(update.parentNode, renderedMarkup[update.markupIndex], update.toIndex);                        // 105\n          break;                                                                                                       // 106\n        case ReactMultiChildUpdateTypes.MOVE_EXISTING:                                                                 // 107\n          insertChildAt(update.parentNode, initialChildren[update.parentID][update.fromIndex], update.toIndex);        // 108\n          break;                                                                                                       // 109\n        case ReactMultiChildUpdateTypes.SET_MARKUP:                                                                    // 110\n          setInnerHTML(update.parentNode, update.content);                                                             // 111\n          break;                                                                                                       // 112\n        case ReactMultiChildUpdateTypes.TEXT_CONTENT:                                                                  // 113\n          setTextContent(update.parentNode, update.content);                                                           // 114\n          break;                                                                                                       // 115\n        case ReactMultiChildUpdateTypes.REMOVE_NODE:                                                                   // 116\n          // Already removed by the for-loop above.                                                                    // 117\n          break;                                                                                                       // 118\n      }                                                                                                                // 119\n    }                                                                                                                  // 120\n  }                                                                                                                    // 121\n                                                                                                                       // 122\n};                                                                                                                     // 123\n                                                                                                                       // 124\nReactPerf.measureMethods(DOMChildrenOperations, 'DOMChildrenOperations', {                                             // 125\n  updateTextContent: 'updateTextContent'                                                                               // 126\n});                                                                                                                    // 127\n                                                                                                                       // 128\nmodule.exports = DOMChildrenOperations;                                                                                // 129\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"Danger.js\":[\"fbjs/lib/ExecutionEnvironment\",\"fbjs/lib/createNodesFromMarkup\",\"fbjs/lib/emptyFunction\",\"fbjs/lib/getMarkupWrap\",\"fbjs/lib/invariant\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/Danger.js                                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule Danger                                                                                              // 9\n * @typechecks static-only                                                                                             // 10\n */                                                                                                                    // 11\n                                                                                                                       // 12\n'use strict';                                                                                                          // 13\n                                                                                                                       // 14\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');                                                   // 15\n                                                                                                                       // 16\nvar createNodesFromMarkup = require('fbjs/lib/createNodesFromMarkup');                                                 // 17\nvar emptyFunction = require('fbjs/lib/emptyFunction');                                                                 // 18\nvar getMarkupWrap = require('fbjs/lib/getMarkupWrap');                                                                 // 19\nvar invariant = require('fbjs/lib/invariant');                                                                         // 20\n                                                                                                                       // 21\nvar OPEN_TAG_NAME_EXP = /^(<[^ \\/>]+)/;                                                                                // 22\nvar RESULT_INDEX_ATTR = 'data-danger-index';                                                                           // 23\n                                                                                                                       // 24\n/**                                                                                                                    // 25\n * Extracts the `nodeName` from a string of markup.                                                                    // 26\n *                                                                                                                     // 27\n * NOTE: Extracting the `nodeName` does not require a regular expression match                                         // 28\n * because we make assumptions about React-generated markup (i.e. there are no                                         // 29\n * spaces surrounding the opening tag and there is at least one attribute).                                            // 30\n *                                                                                                                     // 31\n * @param {string} markup String of markup.                                                                            // 32\n * @return {string} Node name of the supplied markup.                                                                  // 33\n * @see http://jsperf.com/extract-nodename                                                                             // 34\n */                                                                                                                    // 35\nfunction getNodeName(markup) {                                                                                         // 36\n  return markup.substring(1, markup.indexOf(' '));                                                                     // 37\n}                                                                                                                      // 38\n                                                                                                                       // 39\nvar Danger = {                                                                                                         // 40\n                                                                                                                       // 41\n  /**                                                                                                                  // 42\n   * Renders markup into an array of nodes. The markup is expected to render                                           // 43\n   * into a list of root nodes. Also, the length of `resultList` and                                                   // 44\n   * `markupList` should be the same.                                                                                  // 45\n   *                                                                                                                   // 46\n   * @param {array<string>} markupList List of markup strings to render.                                               // 47\n   * @return {array<DOMElement>} List of rendered nodes.                                                               // 48\n   * @internal                                                                                                         // 49\n   */                                                                                                                  // 50\n  dangerouslyRenderMarkup: function (markupList) {                                                                     // 51\n    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyRenderMarkup(...): Cannot render markup in a worker ' + 'thread. Make sure `window` and `document` are available globally ' + 'before requiring React when unit testing or use ' + 'ReactDOMServer.renderToString for server rendering.') : invariant(false) : undefined;\n    var nodeName;                                                                                                      // 53\n    var markupByNodeName = {};                                                                                         // 54\n    // Group markup by `nodeName` if a wrap is necessary, else by '*'.                                                 // 55\n    for (var i = 0; i < markupList.length; i++) {                                                                      // 56\n      !markupList[i] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyRenderMarkup(...): Missing markup.') : invariant(false) : undefined;\n      nodeName = getNodeName(markupList[i]);                                                                           // 58\n      nodeName = getMarkupWrap(nodeName) ? nodeName : '*';                                                             // 59\n      markupByNodeName[nodeName] = markupByNodeName[nodeName] || [];                                                   // 60\n      markupByNodeName[nodeName][i] = markupList[i];                                                                   // 61\n    }                                                                                                                  // 62\n    var resultList = [];                                                                                               // 63\n    var resultListAssignmentCount = 0;                                                                                 // 64\n    for (nodeName in markupByNodeName) {                                                                               // 65\n      if (!markupByNodeName.hasOwnProperty(nodeName)) {                                                                // 66\n        continue;                                                                                                      // 67\n      }                                                                                                                // 68\n      var markupListByNodeName = markupByNodeName[nodeName];                                                           // 69\n                                                                                                                       // 70\n      // This for-in loop skips the holes of the sparse array. The order of                                            // 71\n      // iteration should follow the order of assignment, which happens to match                                       // 72\n      // numerical index order, but we don't rely on that.                                                             // 73\n      var resultIndex;                                                                                                 // 74\n      for (resultIndex in markupListByNodeName) {                                                                      // 75\n        if (markupListByNodeName.hasOwnProperty(resultIndex)) {                                                        // 76\n          var markup = markupListByNodeName[resultIndex];                                                              // 77\n                                                                                                                       // 78\n          // Push the requested markup with an additional RESULT_INDEX_ATTR                                            // 79\n          // attribute.  If the markup does not start with a < character, it                                           // 80\n          // will be discarded below (with an appropriate console.error).                                              // 81\n          markupListByNodeName[resultIndex] = markup.replace(OPEN_TAG_NAME_EXP,                                        // 82\n          // This index will be parsed back out below.                                                                 // 83\n          '$1 ' + RESULT_INDEX_ATTR + '=\"' + resultIndex + '\" ');                                                      // 84\n        }                                                                                                              // 85\n      }                                                                                                                // 86\n                                                                                                                       // 87\n      // Render each group of markup with similar wrapping `nodeName`.                                                 // 88\n      var renderNodes = createNodesFromMarkup(markupListByNodeName.join(''), emptyFunction // Do nothing special with <script> tags.\n      );                                                                                                               // 90\n                                                                                                                       // 91\n      for (var j = 0; j < renderNodes.length; ++j) {                                                                   // 92\n        var renderNode = renderNodes[j];                                                                               // 93\n        if (renderNode.hasAttribute && renderNode.hasAttribute(RESULT_INDEX_ATTR)) {                                   // 94\n                                                                                                                       // 95\n          resultIndex = +renderNode.getAttribute(RESULT_INDEX_ATTR);                                                   // 96\n          renderNode.removeAttribute(RESULT_INDEX_ATTR);                                                               // 97\n                                                                                                                       // 98\n          !!resultList.hasOwnProperty(resultIndex) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Assigning to an already-occupied result index.') : invariant(false) : undefined;\n                                                                                                                       // 100\n          resultList[resultIndex] = renderNode;                                                                        // 101\n                                                                                                                       // 102\n          // This should match resultList.length and markupList.length when                                            // 103\n          // we're done.                                                                                               // 104\n          resultListAssignmentCount += 1;                                                                              // 105\n        } else if (process.env.NODE_ENV !== 'production') {                                                            // 106\n          console.error('Danger: Discarding unexpected node:', renderNode);                                            // 107\n        }                                                                                                              // 108\n      }                                                                                                                // 109\n    }                                                                                                                  // 110\n                                                                                                                       // 111\n    // Although resultList was populated out of order, it should now be a dense                                        // 112\n    // array.                                                                                                          // 113\n    !(resultListAssignmentCount === resultList.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Did not assign to every index of resultList.') : invariant(false) : undefined;\n                                                                                                                       // 115\n    !(resultList.length === markupList.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Expected markup to render %s nodes, but rendered %s.', markupList.length, resultList.length) : invariant(false) : undefined;\n                                                                                                                       // 117\n    return resultList;                                                                                                 // 118\n  },                                                                                                                   // 119\n                                                                                                                       // 120\n  /**                                                                                                                  // 121\n   * Replaces a node with a string of markup at its current position within its                                        // 122\n   * parent. The markup must render into a single root node.                                                           // 123\n   *                                                                                                                   // 124\n   * @param {DOMElement} oldChild Child node to replace.                                                               // 125\n   * @param {string} markup Markup to render in place of the child node.                                               // 126\n   * @internal                                                                                                         // 127\n   */                                                                                                                  // 128\n  dangerouslyReplaceNodeWithMarkup: function (oldChild, markup) {                                                      // 129\n    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a ' + 'worker thread. Make sure `window` and `document` are available ' + 'globally before requiring React when unit testing or use ' + 'ReactDOMServer.renderToString() for server rendering.') : invariant(false) : undefined;\n    !markup ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : invariant(false) : undefined;\n    !(oldChild.tagName.toLowerCase() !== 'html') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the ' + '<html> node. This is because browser quirks make this unreliable ' + 'and/or slow. If you want to render to the root you must use ' + 'server rendering. See ReactDOMServer.renderToString().') : invariant(false) : undefined;\n                                                                                                                       // 133\n    var newChild;                                                                                                      // 134\n    if (typeof markup === 'string') {                                                                                  // 135\n      newChild = createNodesFromMarkup(markup, emptyFunction)[0];                                                      // 136\n    } else {                                                                                                           // 137\n      newChild = markup;                                                                                               // 138\n    }                                                                                                                  // 139\n    oldChild.parentNode.replaceChild(newChild, oldChild);                                                              // 140\n  }                                                                                                                    // 141\n                                                                                                                       // 142\n};                                                                                                                     // 143\n                                                                                                                       // 144\nmodule.exports = Danger;                                                                                               // 145\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactMultiChildUpdateTypes.js\":[\"fbjs/lib/keyMirror\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactMultiChildUpdateTypes.js                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactMultiChildUpdateTypes                                                                          // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar keyMirror = require('fbjs/lib/keyMirror');                                                                         // 14\n                                                                                                                       // 15\n/**                                                                                                                    // 16\n * When a component's children are updated, a series of update configuration                                           // 17\n * objects are created in order to batch and serialize the required changes.                                           // 18\n *                                                                                                                     // 19\n * Enumerates all the possible types of update configurations.                                                         // 20\n *                                                                                                                     // 21\n * @internal                                                                                                           // 22\n */                                                                                                                    // 23\nvar ReactMultiChildUpdateTypes = keyMirror({                                                                           // 24\n  INSERT_MARKUP: null,                                                                                                 // 25\n  MOVE_EXISTING: null,                                                                                                 // 26\n  REMOVE_NODE: null,                                                                                                   // 27\n  SET_MARKUP: null,                                                                                                    // 28\n  TEXT_CONTENT: null                                                                                                   // 29\n});                                                                                                                    // 30\n                                                                                                                       // 31\nmodule.exports = ReactMultiChildUpdateTypes;                                                                           // 32\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactPerf.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactPerf.js                                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactPerf                                                                                           // 9\n * @typechecks static-only                                                                                             // 10\n */                                                                                                                    // 11\n                                                                                                                       // 12\n'use strict';                                                                                                          // 13\n                                                                                                                       // 14\n/**                                                                                                                    // 15\n * ReactPerf is a general AOP system designed to measure performance. This                                             // 16\n * module only has the hooks: see ReactDefaultPerf for the analysis tool.                                              // 17\n */                                                                                                                    // 18\nvar ReactPerf = {                                                                                                      // 19\n  /**                                                                                                                  // 20\n   * Boolean to enable/disable measurement. Set to false by default to prevent                                         // 21\n   * accidental logging and perf loss.                                                                                 // 22\n   */                                                                                                                  // 23\n  enableMeasure: false,                                                                                                // 24\n                                                                                                                       // 25\n  /**                                                                                                                  // 26\n   * Holds onto the measure function in use. By default, don't measure                                                 // 27\n   * anything, but we'll override this if we inject a measure function.                                                // 28\n   */                                                                                                                  // 29\n  storedMeasure: _noMeasure,                                                                                           // 30\n                                                                                                                       // 31\n  /**                                                                                                                  // 32\n   * @param {object} object                                                                                            // 33\n   * @param {string} objectName                                                                                        // 34\n   * @param {object<string>} methodNames                                                                               // 35\n   */                                                                                                                  // 36\n  measureMethods: function (object, objectName, methodNames) {                                                         // 37\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 38\n      for (var key in methodNames) {                                                                                   // 39\n        if (!methodNames.hasOwnProperty(key)) {                                                                        // 40\n          continue;                                                                                                    // 41\n        }                                                                                                              // 42\n        object[key] = ReactPerf.measure(objectName, methodNames[key], object[key]);                                    // 43\n      }                                                                                                                // 44\n    }                                                                                                                  // 45\n  },                                                                                                                   // 46\n                                                                                                                       // 47\n  /**                                                                                                                  // 48\n   * Use this to wrap methods you want to measure. Zero overhead in production.                                        // 49\n   *                                                                                                                   // 50\n   * @param {string} objName                                                                                           // 51\n   * @param {string} fnName                                                                                            // 52\n   * @param {function} func                                                                                            // 53\n   * @return {function}                                                                                                // 54\n   */                                                                                                                  // 55\n  measure: function (objName, fnName, func) {                                                                          // 56\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 57\n      var measuredFunc = null;                                                                                         // 58\n      var wrapper = function () {                                                                                      // 59\n        if (ReactPerf.enableMeasure) {                                                                                 // 60\n          if (!measuredFunc) {                                                                                         // 61\n            measuredFunc = ReactPerf.storedMeasure(objName, fnName, func);                                             // 62\n          }                                                                                                            // 63\n          return measuredFunc.apply(this, arguments);                                                                  // 64\n        }                                                                                                              // 65\n        return func.apply(this, arguments);                                                                            // 66\n      };                                                                                                               // 67\n      wrapper.displayName = objName + '_' + fnName;                                                                    // 68\n      return wrapper;                                                                                                  // 69\n    }                                                                                                                  // 70\n    return func;                                                                                                       // 71\n  },                                                                                                                   // 72\n                                                                                                                       // 73\n  injection: {                                                                                                         // 74\n    /**                                                                                                                // 75\n     * @param {function} measure                                                                                       // 76\n     */                                                                                                                // 77\n    injectMeasure: function (measure) {                                                                                // 78\n      ReactPerf.storedMeasure = measure;                                                                               // 79\n    }                                                                                                                  // 80\n  }                                                                                                                    // 81\n};                                                                                                                     // 82\n                                                                                                                       // 83\n/**                                                                                                                    // 84\n * Simply passes through the measured function, without measuring it.                                                  // 85\n *                                                                                                                     // 86\n * @param {string} objName                                                                                             // 87\n * @param {string} fnName                                                                                              // 88\n * @param {function} func                                                                                              // 89\n * @return {function}                                                                                                  // 90\n */                                                                                                                    // 91\nfunction _noMeasure(objName, fnName, func) {                                                                           // 92\n  return func;                                                                                                         // 93\n}                                                                                                                      // 94\n                                                                                                                       // 95\nmodule.exports = ReactPerf;                                                                                            // 96\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"setInnerHTML.js\":[\"fbjs/lib/ExecutionEnvironment\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/setInnerHTML.js                                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule setInnerHTML                                                                                        // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n/* globals MSApp */                                                                                                    // 12\n                                                                                                                       // 13\n'use strict';                                                                                                          // 14\n                                                                                                                       // 15\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');                                                   // 16\n                                                                                                                       // 17\nvar WHITESPACE_TEST = /^[ \\r\\n\\t\\f]/;                                                                                  // 18\nvar NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \\r\\n\\t\\f\\/>]/;                                          // 19\n                                                                                                                       // 20\n/**                                                                                                                    // 21\n * Set the innerHTML property of a node, ensuring that whitespace is preserved                                         // 22\n * even in IE8.                                                                                                        // 23\n *                                                                                                                     // 24\n * @param {DOMElement} node                                                                                            // 25\n * @param {string} html                                                                                                // 26\n * @internal                                                                                                           // 27\n */                                                                                                                    // 28\nvar setInnerHTML = function (node, html) {                                                                             // 29\n  node.innerHTML = html;                                                                                               // 30\n};                                                                                                                     // 31\n                                                                                                                       // 32\n// Win8 apps: Allow all html to be inserted                                                                            // 33\nif (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {                                                   // 34\n  setInnerHTML = function (node, html) {                                                                               // 35\n    MSApp.execUnsafeLocalFunction(function () {                                                                        // 36\n      node.innerHTML = html;                                                                                           // 37\n    });                                                                                                                // 38\n  };                                                                                                                   // 39\n}                                                                                                                      // 40\n                                                                                                                       // 41\nif (ExecutionEnvironment.canUseDOM) {                                                                                  // 42\n  // IE8: When updating a just created node with innerHTML only leading                                                // 43\n  // whitespace is removed. When updating an existing node with innerHTML                                              // 44\n  // whitespace in root TextNodes is also collapsed.                                                                   // 45\n  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html                                              // 46\n                                                                                                                       // 47\n  // Feature detection; only IE8 is known to behave improperly like this.                                              // 48\n  var testElement = document.createElement('div');                                                                     // 49\n  testElement.innerHTML = ' ';                                                                                         // 50\n  if (testElement.innerHTML === '') {                                                                                  // 51\n    setInnerHTML = function (node, html) {                                                                             // 52\n      // Magic theory: IE8 supposedly differentiates between added and updated                                         // 53\n      // nodes when processing innerHTML, innerHTML on updated nodes suffers                                           // 54\n      // from worse whitespace behavior. Re-adding a node like this triggers                                           // 55\n      // the initial and more favorable whitespace behavior.                                                           // 56\n      // TODO: What to do on a detached node?                                                                          // 57\n      if (node.parentNode) {                                                                                           // 58\n        node.parentNode.replaceChild(node, node);                                                                      // 59\n      }                                                                                                                // 60\n                                                                                                                       // 61\n      // We also implement a workaround for non-visible tags disappearing into                                         // 62\n      // thin air on IE8, this only happens if there is no visible text                                                // 63\n      // in-front of the non-visible tags. Piggyback on the whitespace fix                                             // 64\n      // and simply check if any non-visible tags appear in the source.                                                // 65\n      if (WHITESPACE_TEST.test(html) || html[0] === '<' && NONVISIBLE_TEST.test(html)) {                               // 66\n        // Recover leading whitespace by temporarily prepending any character.                                         // 67\n        // \\uFEFF has the potential advantage of being zero-width/invisible.                                           // 68\n        // UglifyJS drops U+FEFF chars when parsing, so use String.fromCharCode                                        // 69\n        // in hopes that this is preserved even if \"\\uFEFF\" is transformed to                                          // 70\n        // the actual Unicode character (by Babel, for example).                                                       // 71\n        // https://github.com/mishoo/UglifyJS2/blob/v2.4.20/lib/parse.js#L216                                          // 72\n        node.innerHTML = String.fromCharCode(0xFEFF) + html;                                                           // 73\n                                                                                                                       // 74\n        // deleteData leaves an empty `TextNode` which offsets the index of all                                        // 75\n        // children. Definitely want to avoid this.                                                                    // 76\n        var textNode = node.firstChild;                                                                                // 77\n        if (textNode.data.length === 1) {                                                                              // 78\n          node.removeChild(textNode);                                                                                  // 79\n        } else {                                                                                                       // 80\n          textNode.deleteData(0, 1);                                                                                   // 81\n        }                                                                                                              // 82\n      } else {                                                                                                         // 83\n        node.innerHTML = html;                                                                                         // 84\n      }                                                                                                                // 85\n    };                                                                                                                 // 86\n  }                                                                                                                    // 87\n}                                                                                                                      // 88\n                                                                                                                       // 89\nmodule.exports = setInnerHTML;                                                                                         // 90\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"setTextContent.js\":[\"fbjs/lib/ExecutionEnvironment\",\"./escapeTextContentForBrowser\",\"./setInnerHTML\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/setTextContent.js                                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule setTextContent                                                                                      // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');                                                   // 14\nvar escapeTextContentForBrowser = require('./escapeTextContentForBrowser');                                            // 15\nvar setInnerHTML = require('./setInnerHTML');                                                                          // 16\n                                                                                                                       // 17\n/**                                                                                                                    // 18\n * Set the textContent property of a node, ensuring that whitespace is preserved                                       // 19\n * even in IE8. innerText is a poor substitute for textContent and, among many                                         // 20\n * issues, inserts <br> instead of the literal newline chars. innerHTML behaves                                        // 21\n * as it should.                                                                                                       // 22\n *                                                                                                                     // 23\n * @param {DOMElement} node                                                                                            // 24\n * @param {string} text                                                                                                // 25\n * @internal                                                                                                           // 26\n */                                                                                                                    // 27\nvar setTextContent = function (node, text) {                                                                           // 28\n  node.textContent = text;                                                                                             // 29\n};                                                                                                                     // 30\n                                                                                                                       // 31\nif (ExecutionEnvironment.canUseDOM) {                                                                                  // 32\n  if (!('textContent' in document.documentElement)) {                                                                  // 33\n    setTextContent = function (node, text) {                                                                           // 34\n      setInnerHTML(node, escapeTextContentForBrowser(text));                                                           // 35\n    };                                                                                                                 // 36\n  }                                                                                                                    // 37\n}                                                                                                                      // 38\n                                                                                                                       // 39\nmodule.exports = setTextContent;                                                                                       // 40\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"escapeTextContentForBrowser.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/escapeTextContentForBrowser.js                                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule escapeTextContentForBrowser                                                                         // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar ESCAPE_LOOKUP = {                                                                                                  // 14\n  '&': '&amp;',                                                                                                        // 15\n  '>': '&gt;',                                                                                                         // 16\n  '<': '&lt;',                                                                                                         // 17\n  '\"': '&quot;',                                                                                                       // 18\n  '\\'': '&#x27;'                                                                                                       // 19\n};                                                                                                                     // 20\n                                                                                                                       // 21\nvar ESCAPE_REGEX = /[&><\"']/g;                                                                                         // 22\n                                                                                                                       // 23\nfunction escaper(match) {                                                                                              // 24\n  return ESCAPE_LOOKUP[match];                                                                                         // 25\n}                                                                                                                      // 26\n                                                                                                                       // 27\n/**                                                                                                                    // 28\n * Escapes text to prevent scripting attacks.                                                                          // 29\n *                                                                                                                     // 30\n * @param {*} text Text value to escape.                                                                               // 31\n * @return {string} An escaped string.                                                                                 // 32\n */                                                                                                                    // 33\nfunction escapeTextContentForBrowser(text) {                                                                           // 34\n  return ('' + text).replace(ESCAPE_REGEX, escaper);                                                                   // 35\n}                                                                                                                      // 36\n                                                                                                                       // 37\nmodule.exports = escapeTextContentForBrowser;                                                                          // 38\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"DOMPropertyOperations.js\":[\"./DOMProperty\",\"./ReactPerf\",\"./quoteAttributeValueForBrowser\",\"fbjs/lib/warning\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/DOMPropertyOperations.js                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule DOMPropertyOperations                                                                               // 9\n * @typechecks static-only                                                                                             // 10\n */                                                                                                                    // 11\n                                                                                                                       // 12\n'use strict';                                                                                                          // 13\n                                                                                                                       // 14\nvar DOMProperty = require('./DOMProperty');                                                                            // 15\nvar ReactPerf = require('./ReactPerf');                                                                                // 16\n                                                                                                                       // 17\nvar quoteAttributeValueForBrowser = require('./quoteAttributeValueForBrowser');                                        // 18\nvar warning = require('fbjs/lib/warning');                                                                             // 19\n                                                                                                                       // 20\n// Simplified subset                                                                                                   // 21\nvar VALID_ATTRIBUTE_NAME_REGEX = /^[a-zA-Z_][\\w\\.\\-]*$/;                                                               // 22\nvar illegalAttributeNameCache = {};                                                                                    // 23\nvar validatedAttributeNameCache = {};                                                                                  // 24\n                                                                                                                       // 25\nfunction isAttributeNameSafe(attributeName) {                                                                          // 26\n  if (validatedAttributeNameCache.hasOwnProperty(attributeName)) {                                                     // 27\n    return true;                                                                                                       // 28\n  }                                                                                                                    // 29\n  if (illegalAttributeNameCache.hasOwnProperty(attributeName)) {                                                       // 30\n    return false;                                                                                                      // 31\n  }                                                                                                                    // 32\n  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {                                                                // 33\n    validatedAttributeNameCache[attributeName] = true;                                                                 // 34\n    return true;                                                                                                       // 35\n  }                                                                                                                    // 36\n  illegalAttributeNameCache[attributeName] = true;                                                                     // 37\n  process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid attribute name: `%s`', attributeName) : undefined;   // 38\n  return false;                                                                                                        // 39\n}                                                                                                                      // 40\n                                                                                                                       // 41\nfunction shouldIgnoreValue(propertyInfo, value) {                                                                      // 42\n  return value == null || propertyInfo.hasBooleanValue && !value || propertyInfo.hasNumericValue && isNaN(value) || propertyInfo.hasPositiveNumericValue && value < 1 || propertyInfo.hasOverloadedBooleanValue && value === false;\n}                                                                                                                      // 44\n                                                                                                                       // 45\nif (process.env.NODE_ENV !== 'production') {                                                                           // 46\n  var reactProps = {                                                                                                   // 47\n    children: true,                                                                                                    // 48\n    dangerouslySetInnerHTML: true,                                                                                     // 49\n    key: true,                                                                                                         // 50\n    ref: true                                                                                                          // 51\n  };                                                                                                                   // 52\n  var warnedProperties = {};                                                                                           // 53\n                                                                                                                       // 54\n  var warnUnknownProperty = function (name) {                                                                          // 55\n    if (reactProps.hasOwnProperty(name) && reactProps[name] || warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {\n      return;                                                                                                          // 57\n    }                                                                                                                  // 58\n                                                                                                                       // 59\n    warnedProperties[name] = true;                                                                                     // 60\n    var lowerCasedName = name.toLowerCase();                                                                           // 61\n                                                                                                                       // 62\n    // data-* attributes should be lowercase; suggest the lowercase version                                            // 63\n    var standardName = DOMProperty.isCustomAttribute(lowerCasedName) ? lowerCasedName : DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;\n                                                                                                                       // 65\n    // For now, only warn when we have a suggested correction. This prevents                                           // 66\n    // logging too much when using transferPropsTo.                                                                    // 67\n    process.env.NODE_ENV !== 'production' ? warning(standardName == null, 'Unknown DOM property %s. Did you mean %s?', name, standardName) : undefined;\n  };                                                                                                                   // 69\n}                                                                                                                      // 70\n                                                                                                                       // 71\n/**                                                                                                                    // 72\n * Operations for dealing with DOM properties.                                                                         // 73\n */                                                                                                                    // 74\nvar DOMPropertyOperations = {                                                                                          // 75\n                                                                                                                       // 76\n  /**                                                                                                                  // 77\n   * Creates markup for the ID property.                                                                               // 78\n   *                                                                                                                   // 79\n   * @param {string} id Unescaped ID.                                                                                  // 80\n   * @return {string} Markup string.                                                                                   // 81\n   */                                                                                                                  // 82\n  createMarkupForID: function (id) {                                                                                   // 83\n    return DOMProperty.ID_ATTRIBUTE_NAME + '=' + quoteAttributeValueForBrowser(id);                                    // 84\n  },                                                                                                                   // 85\n                                                                                                                       // 86\n  setAttributeForID: function (node, id) {                                                                             // 87\n    node.setAttribute(DOMProperty.ID_ATTRIBUTE_NAME, id);                                                              // 88\n  },                                                                                                                   // 89\n                                                                                                                       // 90\n  /**                                                                                                                  // 91\n   * Creates markup for a property.                                                                                    // 92\n   *                                                                                                                   // 93\n   * @param {string} name                                                                                              // 94\n   * @param {*} value                                                                                                  // 95\n   * @return {?string} Markup string, or null if the property was invalid.                                             // 96\n   */                                                                                                                  // 97\n  createMarkupForProperty: function (name, value) {                                                                    // 98\n    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;              // 99\n    if (propertyInfo) {                                                                                                // 100\n      if (shouldIgnoreValue(propertyInfo, value)) {                                                                    // 101\n        return '';                                                                                                     // 102\n      }                                                                                                                // 103\n      var attributeName = propertyInfo.attributeName;                                                                  // 104\n      if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {                  // 105\n        return attributeName + '=\"\"';                                                                                  // 106\n      }                                                                                                                // 107\n      return attributeName + '=' + quoteAttributeValueForBrowser(value);                                               // 108\n    } else if (DOMProperty.isCustomAttribute(name)) {                                                                  // 109\n      if (value == null) {                                                                                             // 110\n        return '';                                                                                                     // 111\n      }                                                                                                                // 112\n      return name + '=' + quoteAttributeValueForBrowser(value);                                                        // 113\n    } else if (process.env.NODE_ENV !== 'production') {                                                                // 114\n      warnUnknownProperty(name);                                                                                       // 115\n    }                                                                                                                  // 116\n    return null;                                                                                                       // 117\n  },                                                                                                                   // 118\n                                                                                                                       // 119\n  /**                                                                                                                  // 120\n   * Creates markup for a custom property.                                                                             // 121\n   *                                                                                                                   // 122\n   * @param {string} name                                                                                              // 123\n   * @param {*} value                                                                                                  // 124\n   * @return {string} Markup string, or empty string if the property was invalid.                                      // 125\n   */                                                                                                                  // 126\n  createMarkupForCustomAttribute: function (name, value) {                                                             // 127\n    if (!isAttributeNameSafe(name) || value == null) {                                                                 // 128\n      return '';                                                                                                       // 129\n    }                                                                                                                  // 130\n    return name + '=' + quoteAttributeValueForBrowser(value);                                                          // 131\n  },                                                                                                                   // 132\n                                                                                                                       // 133\n  /**                                                                                                                  // 134\n   * Sets the value for a property on a node.                                                                          // 135\n   *                                                                                                                   // 136\n   * @param {DOMElement} node                                                                                          // 137\n   * @param {string} name                                                                                              // 138\n   * @param {*} value                                                                                                  // 139\n   */                                                                                                                  // 140\n  setValueForProperty: function (node, name, value) {                                                                  // 141\n    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;              // 142\n    if (propertyInfo) {                                                                                                // 143\n      var mutationMethod = propertyInfo.mutationMethod;                                                                // 144\n      if (mutationMethod) {                                                                                            // 145\n        mutationMethod(node, value);                                                                                   // 146\n      } else if (shouldIgnoreValue(propertyInfo, value)) {                                                             // 147\n        this.deleteValueForProperty(node, name);                                                                       // 148\n      } else if (propertyInfo.mustUseAttribute) {                                                                      // 149\n        var attributeName = propertyInfo.attributeName;                                                                // 150\n        var namespace = propertyInfo.attributeNamespace;                                                               // 151\n        // `setAttribute` with objects becomes only `[object]` in IE8/9,                                               // 152\n        // ('' + value) makes it output the correct toString()-value.                                                  // 153\n        if (namespace) {                                                                                               // 154\n          node.setAttributeNS(namespace, attributeName, '' + value);                                                   // 155\n        } else if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {         // 156\n          node.setAttribute(attributeName, '');                                                                        // 157\n        } else {                                                                                                       // 158\n          node.setAttribute(attributeName, '' + value);                                                                // 159\n        }                                                                                                              // 160\n      } else {                                                                                                         // 161\n        var propName = propertyInfo.propertyName;                                                                      // 162\n        // Must explicitly cast values for HAS_SIDE_EFFECTS-properties to the                                          // 163\n        // property type before comparing; only `value` does and is string.                                            // 164\n        if (!propertyInfo.hasSideEffects || '' + node[propName] !== '' + value) {                                      // 165\n          // Contrary to `setAttribute`, object properties are properly                                                // 166\n          // `toString`ed by IE8/9.                                                                                    // 167\n          node[propName] = value;                                                                                      // 168\n        }                                                                                                              // 169\n      }                                                                                                                // 170\n    } else if (DOMProperty.isCustomAttribute(name)) {                                                                  // 171\n      DOMPropertyOperations.setValueForAttribute(node, name, value);                                                   // 172\n    } else if (process.env.NODE_ENV !== 'production') {                                                                // 173\n      warnUnknownProperty(name);                                                                                       // 174\n    }                                                                                                                  // 175\n  },                                                                                                                   // 176\n                                                                                                                       // 177\n  setValueForAttribute: function (node, name, value) {                                                                 // 178\n    if (!isAttributeNameSafe(name)) {                                                                                  // 179\n      return;                                                                                                          // 180\n    }                                                                                                                  // 181\n    if (value == null) {                                                                                               // 182\n      node.removeAttribute(name);                                                                                      // 183\n    } else {                                                                                                           // 184\n      node.setAttribute(name, '' + value);                                                                             // 185\n    }                                                                                                                  // 186\n  },                                                                                                                   // 187\n                                                                                                                       // 188\n  /**                                                                                                                  // 189\n   * Deletes the value for a property on a node.                                                                       // 190\n   *                                                                                                                   // 191\n   * @param {DOMElement} node                                                                                          // 192\n   * @param {string} name                                                                                              // 193\n   */                                                                                                                  // 194\n  deleteValueForProperty: function (node, name) {                                                                      // 195\n    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;              // 196\n    if (propertyInfo) {                                                                                                // 197\n      var mutationMethod = propertyInfo.mutationMethod;                                                                // 198\n      if (mutationMethod) {                                                                                            // 199\n        mutationMethod(node, undefined);                                                                               // 200\n      } else if (propertyInfo.mustUseAttribute) {                                                                      // 201\n        node.removeAttribute(propertyInfo.attributeName);                                                              // 202\n      } else {                                                                                                         // 203\n        var propName = propertyInfo.propertyName;                                                                      // 204\n        var defaultValue = DOMProperty.getDefaultValueForProperty(node.nodeName, propName);                            // 205\n        if (!propertyInfo.hasSideEffects || '' + node[propName] !== defaultValue) {                                    // 206\n          node[propName] = defaultValue;                                                                               // 207\n        }                                                                                                              // 208\n      }                                                                                                                // 209\n    } else if (DOMProperty.isCustomAttribute(name)) {                                                                  // 210\n      node.removeAttribute(name);                                                                                      // 211\n    } else if (process.env.NODE_ENV !== 'production') {                                                                // 212\n      warnUnknownProperty(name);                                                                                       // 213\n    }                                                                                                                  // 214\n  }                                                                                                                    // 215\n                                                                                                                       // 216\n};                                                                                                                     // 217\n                                                                                                                       // 218\nReactPerf.measureMethods(DOMPropertyOperations, 'DOMPropertyOperations', {                                             // 219\n  setValueForProperty: 'setValueForProperty',                                                                          // 220\n  setValueForAttribute: 'setValueForAttribute',                                                                        // 221\n  deleteValueForProperty: 'deleteValueForProperty'                                                                     // 222\n});                                                                                                                    // 223\n                                                                                                                       // 224\nmodule.exports = DOMPropertyOperations;                                                                                // 225\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"DOMProperty.js\":[\"fbjs/lib/invariant\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/DOMProperty.js                                                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule DOMProperty                                                                                         // 9\n * @typechecks static-only                                                                                             // 10\n */                                                                                                                    // 11\n                                                                                                                       // 12\n'use strict';                                                                                                          // 13\n                                                                                                                       // 14\nvar invariant = require('fbjs/lib/invariant');                                                                         // 15\n                                                                                                                       // 16\nfunction checkMask(value, bitmask) {                                                                                   // 17\n  return (value & bitmask) === bitmask;                                                                                // 18\n}                                                                                                                      // 19\n                                                                                                                       // 20\nvar DOMPropertyInjection = {                                                                                           // 21\n  /**                                                                                                                  // 22\n   * Mapping from normalized, camelcased property names to a configuration that                                        // 23\n   * specifies how the associated DOM property should be accessed or rendered.                                         // 24\n   */                                                                                                                  // 25\n  MUST_USE_ATTRIBUTE: 0x1,                                                                                             // 26\n  MUST_USE_PROPERTY: 0x2,                                                                                              // 27\n  HAS_SIDE_EFFECTS: 0x4,                                                                                               // 28\n  HAS_BOOLEAN_VALUE: 0x8,                                                                                              // 29\n  HAS_NUMERIC_VALUE: 0x10,                                                                                             // 30\n  HAS_POSITIVE_NUMERIC_VALUE: 0x20 | 0x10,                                                                             // 31\n  HAS_OVERLOADED_BOOLEAN_VALUE: 0x40,                                                                                  // 32\n                                                                                                                       // 33\n  /**                                                                                                                  // 34\n   * Inject some specialized knowledge about the DOM. This takes a config object                                       // 35\n   * with the following properties:                                                                                    // 36\n   *                                                                                                                   // 37\n   * isCustomAttribute: function that given an attribute name will return true                                         // 38\n   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*                                          // 39\n   * attributes where it's impossible to enumerate all of the possible                                                 // 40\n   * attribute names,                                                                                                  // 41\n   *                                                                                                                   // 42\n   * Properties: object mapping DOM property name to one of the                                                        // 43\n   * DOMPropertyInjection constants or null. If your attribute isn't in here,                                          // 44\n   * it won't get written to the DOM.                                                                                  // 45\n   *                                                                                                                   // 46\n   * DOMAttributeNames: object mapping React attribute name to the DOM                                                 // 47\n   * attribute name. Attribute names not specified use the **lowercase**                                               // 48\n   * normalized name.                                                                                                  // 49\n   *                                                                                                                   // 50\n   * DOMAttributeNamespaces: object mapping React attribute name to the DOM                                            // 51\n   * attribute namespace URL. (Attribute names not specified use no namespace.)                                        // 52\n   *                                                                                                                   // 53\n   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.                                            // 54\n   * Property names not specified use the normalized name.                                                             // 55\n   *                                                                                                                   // 56\n   * DOMMutationMethods: Properties that require special mutation methods. If                                          // 57\n   * `value` is undefined, the mutation method should unset the property.                                              // 58\n   *                                                                                                                   // 59\n   * @param {object} domPropertyConfig the config as described above.                                                  // 60\n   */                                                                                                                  // 61\n  injectDOMPropertyConfig: function (domPropertyConfig) {                                                              // 62\n    var Injection = DOMPropertyInjection;                                                                              // 63\n    var Properties = domPropertyConfig.Properties || {};                                                               // 64\n    var DOMAttributeNamespaces = domPropertyConfig.DOMAttributeNamespaces || {};                                       // 65\n    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};                                                 // 66\n    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};                                                   // 67\n    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};                                               // 68\n                                                                                                                       // 69\n    if (domPropertyConfig.isCustomAttribute) {                                                                         // 70\n      DOMProperty._isCustomAttributeFunctions.push(domPropertyConfig.isCustomAttribute);                               // 71\n    }                                                                                                                  // 72\n                                                                                                                       // 73\n    for (var propName in Properties) {                                                                                 // 74\n      !!DOMProperty.properties.hasOwnProperty(propName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'injectDOMPropertyConfig(...): You\\'re trying to inject DOM property ' + '\\'%s\\' which has already been injected. You may be accidentally ' + 'injecting the same DOM property config twice, or you may be ' + 'injecting two configs that have conflicting property names.', propName) : invariant(false) : undefined;\n                                                                                                                       // 76\n      var lowerCased = propName.toLowerCase();                                                                         // 77\n      var propConfig = Properties[propName];                                                                           // 78\n                                                                                                                       // 79\n      var propertyInfo = {                                                                                             // 80\n        attributeName: lowerCased,                                                                                     // 81\n        attributeNamespace: null,                                                                                      // 82\n        propertyName: propName,                                                                                        // 83\n        mutationMethod: null,                                                                                          // 84\n                                                                                                                       // 85\n        mustUseAttribute: checkMask(propConfig, Injection.MUST_USE_ATTRIBUTE),                                         // 86\n        mustUseProperty: checkMask(propConfig, Injection.MUST_USE_PROPERTY),                                           // 87\n        hasSideEffects: checkMask(propConfig, Injection.HAS_SIDE_EFFECTS),                                             // 88\n        hasBooleanValue: checkMask(propConfig, Injection.HAS_BOOLEAN_VALUE),                                           // 89\n        hasNumericValue: checkMask(propConfig, Injection.HAS_NUMERIC_VALUE),                                           // 90\n        hasPositiveNumericValue: checkMask(propConfig, Injection.HAS_POSITIVE_NUMERIC_VALUE),                          // 91\n        hasOverloadedBooleanValue: checkMask(propConfig, Injection.HAS_OVERLOADED_BOOLEAN_VALUE)                       // 92\n      };                                                                                                               // 93\n                                                                                                                       // 94\n      !(!propertyInfo.mustUseAttribute || !propertyInfo.mustUseProperty) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Cannot require using both attribute and property: %s', propName) : invariant(false) : undefined;\n      !(propertyInfo.mustUseProperty || !propertyInfo.hasSideEffects) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Properties that have side effects must use property: %s', propName) : invariant(false) : undefined;\n      !(propertyInfo.hasBooleanValue + propertyInfo.hasNumericValue + propertyInfo.hasOverloadedBooleanValue <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Value can be one of boolean, overloaded boolean, or ' + 'numeric value, but not a combination: %s', propName) : invariant(false) : undefined;\n                                                                                                                       // 98\n      if (process.env.NODE_ENV !== 'production') {                                                                     // 99\n        DOMProperty.getPossibleStandardName[lowerCased] = propName;                                                    // 100\n      }                                                                                                                // 101\n                                                                                                                       // 102\n      if (DOMAttributeNames.hasOwnProperty(propName)) {                                                                // 103\n        var attributeName = DOMAttributeNames[propName];                                                               // 104\n        propertyInfo.attributeName = attributeName;                                                                    // 105\n        if (process.env.NODE_ENV !== 'production') {                                                                   // 106\n          DOMProperty.getPossibleStandardName[attributeName] = propName;                                               // 107\n        }                                                                                                              // 108\n      }                                                                                                                // 109\n                                                                                                                       // 110\n      if (DOMAttributeNamespaces.hasOwnProperty(propName)) {                                                           // 111\n        propertyInfo.attributeNamespace = DOMAttributeNamespaces[propName];                                            // 112\n      }                                                                                                                // 113\n                                                                                                                       // 114\n      if (DOMPropertyNames.hasOwnProperty(propName)) {                                                                 // 115\n        propertyInfo.propertyName = DOMPropertyNames[propName];                                                        // 116\n      }                                                                                                                // 117\n                                                                                                                       // 118\n      if (DOMMutationMethods.hasOwnProperty(propName)) {                                                               // 119\n        propertyInfo.mutationMethod = DOMMutationMethods[propName];                                                    // 120\n      }                                                                                                                // 121\n                                                                                                                       // 122\n      DOMProperty.properties[propName] = propertyInfo;                                                                 // 123\n    }                                                                                                                  // 124\n  }                                                                                                                    // 125\n};                                                                                                                     // 126\nvar defaultValueCache = {};                                                                                            // 127\n                                                                                                                       // 128\n/**                                                                                                                    // 129\n * DOMProperty exports lookup objects that can be used like functions:                                                 // 130\n *                                                                                                                     // 131\n *   > DOMProperty.isValid['id']                                                                                       // 132\n *   true                                                                                                              // 133\n *   > DOMProperty.isValid['foobar']                                                                                   // 134\n *   undefined                                                                                                         // 135\n *                                                                                                                     // 136\n * Although this may be confusing, it performs better in general.                                                      // 137\n *                                                                                                                     // 138\n * @see http://jsperf.com/key-exists                                                                                   // 139\n * @see http://jsperf.com/key-missing                                                                                  // 140\n */                                                                                                                    // 141\nvar DOMProperty = {                                                                                                    // 142\n                                                                                                                       // 143\n  ID_ATTRIBUTE_NAME: 'data-reactid',                                                                                   // 144\n                                                                                                                       // 145\n  /**                                                                                                                  // 146\n   * Map from property \"standard name\" to an object with info about how to set                                         // 147\n   * the property in the DOM. Each object contains:                                                                    // 148\n   *                                                                                                                   // 149\n   * attributeName:                                                                                                    // 150\n   *   Used when rendering markup or with `*Attribute()`.                                                              // 151\n   * attributeNamespace                                                                                                // 152\n   * propertyName:                                                                                                     // 153\n   *   Used on DOM node instances. (This includes properties that mutate due to                                        // 154\n   *   external factors.)                                                                                              // 155\n   * mutationMethod:                                                                                                   // 156\n   *   If non-null, used instead of the property or `setAttribute()` after                                             // 157\n   *   initial render.                                                                                                 // 158\n   * mustUseAttribute:                                                                                                 // 159\n   *   Whether the property must be accessed and mutated using `*Attribute()`.                                         // 160\n   *   (This includes anything that fails `<propName> in <element>`.)                                                  // 161\n   * mustUseProperty:                                                                                                  // 162\n   *   Whether the property must be accessed and mutated as an object property.                                        // 163\n   * hasSideEffects:                                                                                                   // 164\n   *   Whether or not setting a value causes side effects such as triggering                                           // 165\n   *   resources to be loaded or text selection changes. If true, we read from                                         // 166\n   *   the DOM before updating to ensure that the value is only set if it has                                          // 167\n   *   changed.                                                                                                        // 168\n   * hasBooleanValue:                                                                                                  // 169\n   *   Whether the property should be removed when set to a falsey value.                                              // 170\n   * hasNumericValue:                                                                                                  // 171\n   *   Whether the property must be numeric or parse as a numeric and should be                                        // 172\n   *   removed when set to a falsey value.                                                                             // 173\n   * hasPositiveNumericValue:                                                                                          // 174\n   *   Whether the property must be positive numeric or parse as a positive                                            // 175\n   *   numeric and should be removed when set to a falsey value.                                                       // 176\n   * hasOverloadedBooleanValue:                                                                                        // 177\n   *   Whether the property can be used as a flag as well as with a value.                                             // 178\n   *   Removed when strictly equal to false; present without a value when                                              // 179\n   *   strictly equal to true; present with a value otherwise.                                                         // 180\n   */                                                                                                                  // 181\n  properties: {},                                                                                                      // 182\n                                                                                                                       // 183\n  /**                                                                                                                  // 184\n   * Mapping from lowercase property names to the properly cased version, used                                         // 185\n   * to warn in the case of missing properties. Available only in __DEV__.                                             // 186\n   * @type {Object}                                                                                                    // 187\n   */                                                                                                                  // 188\n  getPossibleStandardName: process.env.NODE_ENV !== 'production' ? {} : null,                                          // 189\n                                                                                                                       // 190\n  /**                                                                                                                  // 191\n   * All of the isCustomAttribute() functions that have been injected.                                                 // 192\n   */                                                                                                                  // 193\n  _isCustomAttributeFunctions: [],                                                                                     // 194\n                                                                                                                       // 195\n  /**                                                                                                                  // 196\n   * Checks whether a property name is a custom attribute.                                                             // 197\n   * @method                                                                                                           // 198\n   */                                                                                                                  // 199\n  isCustomAttribute: function (attributeName) {                                                                        // 200\n    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {                                         // 201\n      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];                                            // 202\n      if (isCustomAttributeFn(attributeName)) {                                                                        // 203\n        return true;                                                                                                   // 204\n      }                                                                                                                // 205\n    }                                                                                                                  // 206\n    return false;                                                                                                      // 207\n  },                                                                                                                   // 208\n                                                                                                                       // 209\n  /**                                                                                                                  // 210\n   * Returns the default property value for a DOM property (i.e., not an                                               // 211\n   * attribute). Most default values are '' or false, but not all. Worse yet,                                          // 212\n   * some (in particular, `type`) vary depending on the type of element.                                               // 213\n   *                                                                                                                   // 214\n   * TODO: Is it better to grab all the possible properties when creating an                                           // 215\n   * element to avoid having to create the same element twice?                                                         // 216\n   */                                                                                                                  // 217\n  getDefaultValueForProperty: function (nodeName, prop) {                                                              // 218\n    var nodeDefaults = defaultValueCache[nodeName];                                                                    // 219\n    var testElement;                                                                                                   // 220\n    if (!nodeDefaults) {                                                                                               // 221\n      defaultValueCache[nodeName] = nodeDefaults = {};                                                                 // 222\n    }                                                                                                                  // 223\n    if (!(prop in nodeDefaults)) {                                                                                     // 224\n      testElement = document.createElement(nodeName);                                                                  // 225\n      nodeDefaults[prop] = testElement[prop];                                                                          // 226\n    }                                                                                                                  // 227\n    return nodeDefaults[prop];                                                                                         // 228\n  },                                                                                                                   // 229\n                                                                                                                       // 230\n  injection: DOMPropertyInjection                                                                                      // 231\n};                                                                                                                     // 232\n                                                                                                                       // 233\nmodule.exports = DOMProperty;                                                                                          // 234\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"quoteAttributeValueForBrowser.js\":[\"./escapeTextContentForBrowser\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/quoteAttributeValueForBrowser.js                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule quoteAttributeValueForBrowser                                                                       // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar escapeTextContentForBrowser = require('./escapeTextContentForBrowser');                                            // 14\n                                                                                                                       // 15\n/**                                                                                                                    // 16\n * Escapes attribute value to prevent scripting attacks.                                                               // 17\n *                                                                                                                     // 18\n * @param {*} value Value to escape.                                                                                   // 19\n * @return {string} An escaped string.                                                                                 // 20\n */                                                                                                                    // 21\nfunction quoteAttributeValueForBrowser(value) {                                                                        // 22\n  return '\"' + escapeTextContentForBrowser(value) + '\"';                                                               // 23\n}                                                                                                                      // 24\n                                                                                                                       // 25\nmodule.exports = quoteAttributeValueForBrowser;                                                                        // 26\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactComponentBrowserEnvironment.js\":[\"./ReactDOMIDOperations\",\"./ReactMount\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactComponentBrowserEnvironment.js                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactComponentBrowserEnvironment                                                                    // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar ReactDOMIDOperations = require('./ReactDOMIDOperations');                                                          // 14\nvar ReactMount = require('./ReactMount');                                                                              // 15\n                                                                                                                       // 16\n/**                                                                                                                    // 17\n * Abstracts away all functionality of the reconciler that requires knowledge of                                       // 18\n * the browser context. TODO: These callers should be refactored to avoid the                                          // 19\n * need for this injection.                                                                                            // 20\n */                                                                                                                    // 21\nvar ReactComponentBrowserEnvironment = {                                                                               // 22\n                                                                                                                       // 23\n  processChildrenUpdates: ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,                                      // 24\n                                                                                                                       // 25\n  replaceNodeWithMarkupByID: ReactDOMIDOperations.dangerouslyReplaceNodeWithMarkupByID,                                // 26\n                                                                                                                       // 27\n  /**                                                                                                                  // 28\n   * If a particular environment requires that some resources be cleaned up,                                           // 29\n   * specify this in the injected Mixin. In the DOM, we would likely want to                                           // 30\n   * purge any cached node ID lookups.                                                                                 // 31\n   *                                                                                                                   // 32\n   * @private                                                                                                          // 33\n   */                                                                                                                  // 34\n  unmountIDFromEnvironment: function (rootNodeID) {                                                                    // 35\n    ReactMount.purgeID(rootNodeID);                                                                                    // 36\n  }                                                                                                                    // 37\n                                                                                                                       // 38\n};                                                                                                                     // 39\n                                                                                                                       // 40\nmodule.exports = ReactComponentBrowserEnvironment;                                                                     // 41\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactDOMIDOperations.js\":[\"./DOMChildrenOperations\",\"./DOMPropertyOperations\",\"./ReactMount\",\"./ReactPerf\",\"fbjs/lib/invariant\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactDOMIDOperations.js                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactDOMIDOperations                                                                                // 9\n * @typechecks static-only                                                                                             // 10\n */                                                                                                                    // 11\n                                                                                                                       // 12\n'use strict';                                                                                                          // 13\n                                                                                                                       // 14\nvar DOMChildrenOperations = require('./DOMChildrenOperations');                                                        // 15\nvar DOMPropertyOperations = require('./DOMPropertyOperations');                                                        // 16\nvar ReactMount = require('./ReactMount');                                                                              // 17\nvar ReactPerf = require('./ReactPerf');                                                                                // 18\n                                                                                                                       // 19\nvar invariant = require('fbjs/lib/invariant');                                                                         // 20\n                                                                                                                       // 21\n/**                                                                                                                    // 22\n * Errors for properties that should not be updated with `updatePropertyByID()`.                                       // 23\n *                                                                                                                     // 24\n * @type {object}                                                                                                      // 25\n * @private                                                                                                            // 26\n */                                                                                                                    // 27\nvar INVALID_PROPERTY_ERRORS = {                                                                                        // 28\n  dangerouslySetInnerHTML: '`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.',                     // 29\n  style: '`style` must be set using `updateStylesByID()`.'                                                             // 30\n};                                                                                                                     // 31\n                                                                                                                       // 32\n/**                                                                                                                    // 33\n * Operations used to process updates to DOM nodes.                                                                    // 34\n */                                                                                                                    // 35\nvar ReactDOMIDOperations = {                                                                                           // 36\n                                                                                                                       // 37\n  /**                                                                                                                  // 38\n   * Updates a DOM node with new property values. This should only be used to                                          // 39\n   * update DOM properties in `DOMProperty`.                                                                           // 40\n   *                                                                                                                   // 41\n   * @param {string} id ID of the node to update.                                                                      // 42\n   * @param {string} name A valid property name, see `DOMProperty`.                                                    // 43\n   * @param {*} value New value of the property.                                                                       // 44\n   * @internal                                                                                                         // 45\n   */                                                                                                                  // 46\n  updatePropertyByID: function (id, name, value) {                                                                     // 47\n    var node = ReactMount.getNode(id);                                                                                 // 48\n    !!INVALID_PROPERTY_ERRORS.hasOwnProperty(name) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updatePropertyByID(...): %s', INVALID_PROPERTY_ERRORS[name]) : invariant(false) : undefined;\n                                                                                                                       // 50\n    // If we're updating to null or undefined, we should remove the property                                           // 51\n    // from the DOM node instead of inadvertantly setting to a string. This                                            // 52\n    // brings us in line with the same behavior we have on initial render.                                             // 53\n    if (value != null) {                                                                                               // 54\n      DOMPropertyOperations.setValueForProperty(node, name, value);                                                    // 55\n    } else {                                                                                                           // 56\n      DOMPropertyOperations.deleteValueForProperty(node, name);                                                        // 57\n    }                                                                                                                  // 58\n  },                                                                                                                   // 59\n                                                                                                                       // 60\n  /**                                                                                                                  // 61\n   * Replaces a DOM node that exists in the document with markup.                                                      // 62\n   *                                                                                                                   // 63\n   * @param {string} id ID of child to be replaced.                                                                    // 64\n   * @param {string} markup Dangerous markup to inject in place of child.                                              // 65\n   * @internal                                                                                                         // 66\n   * @see {Danger.dangerouslyReplaceNodeWithMarkup}                                                                    // 67\n   */                                                                                                                  // 68\n  dangerouslyReplaceNodeWithMarkupByID: function (id, markup) {                                                        // 69\n    var node = ReactMount.getNode(id);                                                                                 // 70\n    DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup(node, markup);                                              // 71\n  },                                                                                                                   // 72\n                                                                                                                       // 73\n  /**                                                                                                                  // 74\n   * Updates a component's children by processing a series of updates.                                                 // 75\n   *                                                                                                                   // 76\n   * @param {array<object>} updates List of update configurations.                                                     // 77\n   * @param {array<string>} markup List of markup strings.                                                             // 78\n   * @internal                                                                                                         // 79\n   */                                                                                                                  // 80\n  dangerouslyProcessChildrenUpdates: function (updates, markup) {                                                      // 81\n    for (var i = 0; i < updates.length; i++) {                                                                         // 82\n      updates[i].parentNode = ReactMount.getNode(updates[i].parentID);                                                 // 83\n    }                                                                                                                  // 84\n    DOMChildrenOperations.processUpdates(updates, markup);                                                             // 85\n  }                                                                                                                    // 86\n};                                                                                                                     // 87\n                                                                                                                       // 88\nReactPerf.measureMethods(ReactDOMIDOperations, 'ReactDOMIDOperations', {                                               // 89\n  dangerouslyReplaceNodeWithMarkupByID: 'dangerouslyReplaceNodeWithMarkupByID',                                        // 90\n  dangerouslyProcessChildrenUpdates: 'dangerouslyProcessChildrenUpdates'                                               // 91\n});                                                                                                                    // 92\n                                                                                                                       // 93\nmodule.exports = ReactDOMIDOperations;                                                                                 // 94\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactMount.js\":[\"./DOMProperty\",\"./ReactBrowserEventEmitter\",\"./ReactCurrentOwner\",\"./ReactDOMFeatureFlags\",\"./ReactElement\",\"./ReactEmptyComponentRegistry\",\"./ReactInstanceHandles\",\"./ReactInstanceMap\",\"./ReactMarkupChecksum\",\"./ReactPerf\",\"./ReactReconciler\",\"./ReactUpdateQueue\",\"./ReactUpdates\",\"./Object.assign\",\"fbjs/lib/emptyObject\",\"fbjs/lib/containsNode\",\"./instantiateReactComponent\",\"fbjs/lib/invariant\",\"./setInnerHTML\",\"./shouldUpdateReactComponent\",\"./validateDOMNesting\",\"fbjs/lib/warning\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactMount.js                                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactMount                                                                                          // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar DOMProperty = require('./DOMProperty');                                                                            // 14\nvar ReactBrowserEventEmitter = require('./ReactBrowserEventEmitter');                                                  // 15\nvar ReactCurrentOwner = require('./ReactCurrentOwner');                                                                // 16\nvar ReactDOMFeatureFlags = require('./ReactDOMFeatureFlags');                                                          // 17\nvar ReactElement = require('./ReactElement');                                                                          // 18\nvar ReactEmptyComponentRegistry = require('./ReactEmptyComponentRegistry');                                            // 19\nvar ReactInstanceHandles = require('./ReactInstanceHandles');                                                          // 20\nvar ReactInstanceMap = require('./ReactInstanceMap');                                                                  // 21\nvar ReactMarkupChecksum = require('./ReactMarkupChecksum');                                                            // 22\nvar ReactPerf = require('./ReactPerf');                                                                                // 23\nvar ReactReconciler = require('./ReactReconciler');                                                                    // 24\nvar ReactUpdateQueue = require('./ReactUpdateQueue');                                                                  // 25\nvar ReactUpdates = require('./ReactUpdates');                                                                          // 26\n                                                                                                                       // 27\nvar assign = require('./Object.assign');                                                                               // 28\nvar emptyObject = require('fbjs/lib/emptyObject');                                                                     // 29\nvar containsNode = require('fbjs/lib/containsNode');                                                                   // 30\nvar instantiateReactComponent = require('./instantiateReactComponent');                                                // 31\nvar invariant = require('fbjs/lib/invariant');                                                                         // 32\nvar setInnerHTML = require('./setInnerHTML');                                                                          // 33\nvar shouldUpdateReactComponent = require('./shouldUpdateReactComponent');                                              // 34\nvar validateDOMNesting = require('./validateDOMNesting');                                                              // 35\nvar warning = require('fbjs/lib/warning');                                                                             // 36\n                                                                                                                       // 37\nvar ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;                                                                         // 38\nvar nodeCache = {};                                                                                                    // 39\n                                                                                                                       // 40\nvar ELEMENT_NODE_TYPE = 1;                                                                                             // 41\nvar DOC_NODE_TYPE = 9;                                                                                                 // 42\nvar DOCUMENT_FRAGMENT_NODE_TYPE = 11;                                                                                  // 43\n                                                                                                                       // 44\nvar ownerDocumentContextKey = '__ReactMount_ownerDocument$' + Math.random().toString(36).slice(2);                     // 45\n                                                                                                                       // 46\n/** Mapping from reactRootID to React component instance. */                                                           // 47\nvar instancesByReactRootID = {};                                                                                       // 48\n                                                                                                                       // 49\n/** Mapping from reactRootID to `container` nodes. */                                                                  // 50\nvar containersByReactRootID = {};                                                                                      // 51\n                                                                                                                       // 52\nif (process.env.NODE_ENV !== 'production') {                                                                           // 53\n  /** __DEV__-only mapping from reactRootID to root elements. */                                                       // 54\n  var rootElementsByReactRootID = {};                                                                                  // 55\n}                                                                                                                      // 56\n                                                                                                                       // 57\n// Used to store breadth-first search state in findComponentRoot.                                                      // 58\nvar findComponentRootReusableArray = [];                                                                               // 59\n                                                                                                                       // 60\n/**                                                                                                                    // 61\n * Finds the index of the first character                                                                              // 62\n * that's not common between the two given strings.                                                                    // 63\n *                                                                                                                     // 64\n * @return {number} the index of the character where the strings diverge                                               // 65\n */                                                                                                                    // 66\nfunction firstDifferenceIndex(string1, string2) {                                                                      // 67\n  var minLen = Math.min(string1.length, string2.length);                                                               // 68\n  for (var i = 0; i < minLen; i++) {                                                                                   // 69\n    if (string1.charAt(i) !== string2.charAt(i)) {                                                                     // 70\n      return i;                                                                                                        // 71\n    }                                                                                                                  // 72\n  }                                                                                                                    // 73\n  return string1.length === string2.length ? -1 : minLen;                                                              // 74\n}                                                                                                                      // 75\n                                                                                                                       // 76\n/**                                                                                                                    // 77\n * @param {DOMElement|DOMDocument} container DOM element that may contain                                              // 78\n * a React component                                                                                                   // 79\n * @return {?*} DOM element that may have the reactRoot ID, or null.                                                   // 80\n */                                                                                                                    // 81\nfunction getReactRootElementInContainer(container) {                                                                   // 82\n  if (!container) {                                                                                                    // 83\n    return null;                                                                                                       // 84\n  }                                                                                                                    // 85\n                                                                                                                       // 86\n  if (container.nodeType === DOC_NODE_TYPE) {                                                                          // 87\n    return container.documentElement;                                                                                  // 88\n  } else {                                                                                                             // 89\n    return container.firstChild;                                                                                       // 90\n  }                                                                                                                    // 91\n}                                                                                                                      // 92\n                                                                                                                       // 93\n/**                                                                                                                    // 94\n * @param {DOMElement} container DOM element that may contain a React component.                                       // 95\n * @return {?string} A \"reactRoot\" ID, if a React component is rendered.                                               // 96\n */                                                                                                                    // 97\nfunction getReactRootID(container) {                                                                                   // 98\n  var rootElement = getReactRootElementInContainer(container);                                                         // 99\n  return rootElement && ReactMount.getID(rootElement);                                                                 // 100\n}                                                                                                                      // 101\n                                                                                                                       // 102\n/**                                                                                                                    // 103\n * Accessing node[ATTR_NAME] or calling getAttribute(ATTR_NAME) on a form                                              // 104\n * element can return its control whose name or ID equals ATTR_NAME. All                                               // 105\n * DOM nodes support `getAttributeNode` but this can also get called on                                                // 106\n * other objects so just return '' if we're given something other than a                                               // 107\n * DOM node (such as window).                                                                                          // 108\n *                                                                                                                     // 109\n * @param {?DOMElement|DOMWindow|DOMDocument|DOMTextNode} node DOM node.                                               // 110\n * @return {string} ID of the supplied `domNode`.                                                                      // 111\n */                                                                                                                    // 112\nfunction getID(node) {                                                                                                 // 113\n  var id = internalGetID(node);                                                                                        // 114\n  if (id) {                                                                                                            // 115\n    if (nodeCache.hasOwnProperty(id)) {                                                                                // 116\n      var cached = nodeCache[id];                                                                                      // 117\n      if (cached !== node) {                                                                                           // 118\n        !!isValid(cached, id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactMount: Two valid but unequal nodes with the same `%s`: %s', ATTR_NAME, id) : invariant(false) : undefined;\n                                                                                                                       // 120\n        nodeCache[id] = node;                                                                                          // 121\n      }                                                                                                                // 122\n    } else {                                                                                                           // 123\n      nodeCache[id] = node;                                                                                            // 124\n    }                                                                                                                  // 125\n  }                                                                                                                    // 126\n                                                                                                                       // 127\n  return id;                                                                                                           // 128\n}                                                                                                                      // 129\n                                                                                                                       // 130\nfunction internalGetID(node) {                                                                                         // 131\n  // If node is something like a window, document, or text node, none of                                               // 132\n  // which support attributes or a .getAttribute method, gracefully return                                             // 133\n  // the empty string, as if the attribute were missing.                                                               // 134\n  return node && node.getAttribute && node.getAttribute(ATTR_NAME) || '';                                              // 135\n}                                                                                                                      // 136\n                                                                                                                       // 137\n/**                                                                                                                    // 138\n * Sets the React-specific ID of the given node.                                                                       // 139\n *                                                                                                                     // 140\n * @param {DOMElement} node The DOM node whose ID will be set.                                                         // 141\n * @param {string} id The value of the ID attribute.                                                                   // 142\n */                                                                                                                    // 143\nfunction setID(node, id) {                                                                                             // 144\n  var oldID = internalGetID(node);                                                                                     // 145\n  if (oldID !== id) {                                                                                                  // 146\n    delete nodeCache[oldID];                                                                                           // 147\n  }                                                                                                                    // 148\n  node.setAttribute(ATTR_NAME, id);                                                                                    // 149\n  nodeCache[id] = node;                                                                                                // 150\n}                                                                                                                      // 151\n                                                                                                                       // 152\n/**                                                                                                                    // 153\n * Finds the node with the supplied React-generated DOM ID.                                                            // 154\n *                                                                                                                     // 155\n * @param {string} id A React-generated DOM ID.                                                                        // 156\n * @return {DOMElement} DOM node with the suppled `id`.                                                                // 157\n * @internal                                                                                                           // 158\n */                                                                                                                    // 159\nfunction getNode(id) {                                                                                                 // 160\n  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {                                                  // 161\n    nodeCache[id] = ReactMount.findReactNodeByID(id);                                                                  // 162\n  }                                                                                                                    // 163\n  return nodeCache[id];                                                                                                // 164\n}                                                                                                                      // 165\n                                                                                                                       // 166\n/**                                                                                                                    // 167\n * Finds the node with the supplied public React instance.                                                             // 168\n *                                                                                                                     // 169\n * @param {*} instance A public React instance.                                                                        // 170\n * @return {?DOMElement} DOM node with the suppled `id`.                                                               // 171\n * @internal                                                                                                           // 172\n */                                                                                                                    // 173\nfunction getNodeFromInstance(instance) {                                                                               // 174\n  var id = ReactInstanceMap.get(instance)._rootNodeID;                                                                 // 175\n  if (ReactEmptyComponentRegistry.isNullComponentID(id)) {                                                             // 176\n    return null;                                                                                                       // 177\n  }                                                                                                                    // 178\n  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {                                                  // 179\n    nodeCache[id] = ReactMount.findReactNodeByID(id);                                                                  // 180\n  }                                                                                                                    // 181\n  return nodeCache[id];                                                                                                // 182\n}                                                                                                                      // 183\n                                                                                                                       // 184\n/**                                                                                                                    // 185\n * A node is \"valid\" if it is contained by a currently mounted container.                                              // 186\n *                                                                                                                     // 187\n * This means that the node does not have to be contained by a document in                                             // 188\n * order to be considered valid.                                                                                       // 189\n *                                                                                                                     // 190\n * @param {?DOMElement} node The candidate DOM node.                                                                   // 191\n * @param {string} id The expected ID of the node.                                                                     // 192\n * @return {boolean} Whether the node is contained by a mounted container.                                             // 193\n */                                                                                                                    // 194\nfunction isValid(node, id) {                                                                                           // 195\n  if (node) {                                                                                                          // 196\n    !(internalGetID(node) === id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactMount: Unexpected modification of `%s`', ATTR_NAME) : invariant(false) : undefined;\n                                                                                                                       // 198\n    var container = ReactMount.findReactContainerForID(id);                                                            // 199\n    if (container && containsNode(container, node)) {                                                                  // 200\n      return true;                                                                                                     // 201\n    }                                                                                                                  // 202\n  }                                                                                                                    // 203\n                                                                                                                       // 204\n  return false;                                                                                                        // 205\n}                                                                                                                      // 206\n                                                                                                                       // 207\n/**                                                                                                                    // 208\n * Causes the cache to forget about one React-specific ID.                                                             // 209\n *                                                                                                                     // 210\n * @param {string} id The ID to forget.                                                                                // 211\n */                                                                                                                    // 212\nfunction purgeID(id) {                                                                                                 // 213\n  delete nodeCache[id];                                                                                                // 214\n}                                                                                                                      // 215\n                                                                                                                       // 216\nvar deepestNodeSoFar = null;                                                                                           // 217\nfunction findDeepestCachedAncestorImpl(ancestorID) {                                                                   // 218\n  var ancestor = nodeCache[ancestorID];                                                                                // 219\n  if (ancestor && isValid(ancestor, ancestorID)) {                                                                     // 220\n    deepestNodeSoFar = ancestor;                                                                                       // 221\n  } else {                                                                                                             // 222\n    // This node isn't populated in the cache, so presumably none of its                                               // 223\n    // descendants are. Break out of the loop.                                                                         // 224\n    return false;                                                                                                      // 225\n  }                                                                                                                    // 226\n}                                                                                                                      // 227\n                                                                                                                       // 228\n/**                                                                                                                    // 229\n * Return the deepest cached node whose ID is a prefix of `targetID`.                                                  // 230\n */                                                                                                                    // 231\nfunction findDeepestCachedAncestor(targetID) {                                                                         // 232\n  deepestNodeSoFar = null;                                                                                             // 233\n  ReactInstanceHandles.traverseAncestors(targetID, findDeepestCachedAncestorImpl);                                     // 234\n                                                                                                                       // 235\n  var foundNode = deepestNodeSoFar;                                                                                    // 236\n  deepestNodeSoFar = null;                                                                                             // 237\n  return foundNode;                                                                                                    // 238\n}                                                                                                                      // 239\n                                                                                                                       // 240\n/**                                                                                                                    // 241\n * Mounts this component and inserts it into the DOM.                                                                  // 242\n *                                                                                                                     // 243\n * @param {ReactComponent} componentInstance The instance to mount.                                                    // 244\n * @param {string} rootID DOM ID of the root node.                                                                     // 245\n * @param {DOMElement} container DOM element to mount into.                                                            // 246\n * @param {ReactReconcileTransaction} transaction                                                                      // 247\n * @param {boolean} shouldReuseMarkup If true, do not insert markup                                                    // 248\n */                                                                                                                    // 249\nfunction mountComponentIntoNode(componentInstance, rootID, container, transaction, shouldReuseMarkup, context) {       // 250\n  if (ReactDOMFeatureFlags.useCreateElement) {                                                                         // 251\n    context = assign({}, context);                                                                                     // 252\n    if (container.nodeType === DOC_NODE_TYPE) {                                                                        // 253\n      context[ownerDocumentContextKey] = container;                                                                    // 254\n    } else {                                                                                                           // 255\n      context[ownerDocumentContextKey] = container.ownerDocument;                                                      // 256\n    }                                                                                                                  // 257\n  }                                                                                                                    // 258\n  if (process.env.NODE_ENV !== 'production') {                                                                         // 259\n    if (context === emptyObject) {                                                                                     // 260\n      context = {};                                                                                                    // 261\n    }                                                                                                                  // 262\n    var tag = container.nodeName.toLowerCase();                                                                        // 263\n    context[validateDOMNesting.ancestorInfoContextKey] = validateDOMNesting.updatedAncestorInfo(null, tag, null);      // 264\n  }                                                                                                                    // 265\n  var markup = ReactReconciler.mountComponent(componentInstance, rootID, transaction, context);                        // 266\n  componentInstance._renderedComponent._topLevelWrapper = componentInstance;                                           // 267\n  ReactMount._mountImageIntoNode(markup, container, shouldReuseMarkup, transaction);                                   // 268\n}                                                                                                                      // 269\n                                                                                                                       // 270\n/**                                                                                                                    // 271\n * Batched mount.                                                                                                      // 272\n *                                                                                                                     // 273\n * @param {ReactComponent} componentInstance The instance to mount.                                                    // 274\n * @param {string} rootID DOM ID of the root node.                                                                     // 275\n * @param {DOMElement} container DOM element to mount into.                                                            // 276\n * @param {boolean} shouldReuseMarkup If true, do not insert markup                                                    // 277\n */                                                                                                                    // 278\nfunction batchedMountComponentIntoNode(componentInstance, rootID, container, shouldReuseMarkup, context) {             // 279\n  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled(                                                  // 280\n  /* forceHTML */shouldReuseMarkup);                                                                                   // 281\n  transaction.perform(mountComponentIntoNode, null, componentInstance, rootID, container, transaction, shouldReuseMarkup, context);\n  ReactUpdates.ReactReconcileTransaction.release(transaction);                                                         // 283\n}                                                                                                                      // 284\n                                                                                                                       // 285\n/**                                                                                                                    // 286\n * Unmounts a component and removes it from the DOM.                                                                   // 287\n *                                                                                                                     // 288\n * @param {ReactComponent} instance React component instance.                                                          // 289\n * @param {DOMElement} container DOM element to unmount from.                                                          // 290\n * @final                                                                                                              // 291\n * @internal                                                                                                           // 292\n * @see {ReactMount.unmountComponentAtNode}                                                                            // 293\n */                                                                                                                    // 294\nfunction unmountComponentFromNode(instance, container) {                                                               // 295\n  ReactReconciler.unmountComponent(instance);                                                                          // 296\n                                                                                                                       // 297\n  if (container.nodeType === DOC_NODE_TYPE) {                                                                          // 298\n    container = container.documentElement;                                                                             // 299\n  }                                                                                                                    // 300\n                                                                                                                       // 301\n  // http://jsperf.com/emptying-a-node                                                                                 // 302\n  while (container.lastChild) {                                                                                        // 303\n    container.removeChild(container.lastChild);                                                                        // 304\n  }                                                                                                                    // 305\n}                                                                                                                      // 306\n                                                                                                                       // 307\n/**                                                                                                                    // 308\n * True if the supplied DOM node has a direct React-rendered child that is                                             // 309\n * not a React root element. Useful for warning in `render`,                                                           // 310\n * `unmountComponentAtNode`, etc.                                                                                      // 311\n *                                                                                                                     // 312\n * @param {?DOMElement} node The candidate DOM node.                                                                   // 313\n * @return {boolean} True if the DOM element contains a direct child that was                                          // 314\n * rendered by React but is not a root element.                                                                        // 315\n * @internal                                                                                                           // 316\n */                                                                                                                    // 317\nfunction hasNonRootReactChild(node) {                                                                                  // 318\n  var reactRootID = getReactRootID(node);                                                                              // 319\n  return reactRootID ? reactRootID !== ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID) : false;             // 320\n}                                                                                                                      // 321\n                                                                                                                       // 322\n/**                                                                                                                    // 323\n * Returns the first (deepest) ancestor of a node which is rendered by this copy                                       // 324\n * of React.                                                                                                           // 325\n */                                                                                                                    // 326\nfunction findFirstReactDOMImpl(node) {                                                                                 // 327\n  // This node might be from another React instance, so we make sure not to                                            // 328\n  // examine the node cache here                                                                                       // 329\n  for (; node && node.parentNode !== node; node = node.parentNode) {                                                   // 330\n    if (node.nodeType !== 1) {                                                                                         // 331\n      // Not a DOMElement, therefore not a React component                                                             // 332\n      continue;                                                                                                        // 333\n    }                                                                                                                  // 334\n    var nodeID = internalGetID(node);                                                                                  // 335\n    if (!nodeID) {                                                                                                     // 336\n      continue;                                                                                                        // 337\n    }                                                                                                                  // 338\n    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);                                           // 339\n                                                                                                                       // 340\n    // If containersByReactRootID contains the container we find by crawling up                                        // 341\n    // the tree, we know that this instance of React rendered the node.                                                // 342\n    // nb. isValid's strategy (with containsNode) does not work because render                                         // 343\n    // trees may be nested and we don't want a false positive in that case.                                            // 344\n    var current = node;                                                                                                // 345\n    var lastID;                                                                                                        // 346\n    do {                                                                                                               // 347\n      lastID = internalGetID(current);                                                                                 // 348\n      current = current.parentNode;                                                                                    // 349\n      if (current == null) {                                                                                           // 350\n        // The passed-in node has been detached from the container it was                                              // 351\n        // originally rendered into.                                                                                   // 352\n        return null;                                                                                                   // 353\n      }                                                                                                                // 354\n    } while (lastID !== reactRootID);                                                                                  // 355\n                                                                                                                       // 356\n    if (current === containersByReactRootID[reactRootID]) {                                                            // 357\n      return node;                                                                                                     // 358\n    }                                                                                                                  // 359\n  }                                                                                                                    // 360\n  return null;                                                                                                         // 361\n}                                                                                                                      // 362\n                                                                                                                       // 363\n/**                                                                                                                    // 364\n * Temporary (?) hack so that we can store all top-level pending updates on                                            // 365\n * composites instead of having to worry about different types of components                                           // 366\n * here.                                                                                                               // 367\n */                                                                                                                    // 368\nvar TopLevelWrapper = function () {};                                                                                  // 369\nTopLevelWrapper.prototype.isReactComponent = {};                                                                       // 370\nif (process.env.NODE_ENV !== 'production') {                                                                           // 371\n  TopLevelWrapper.displayName = 'TopLevelWrapper';                                                                     // 372\n}                                                                                                                      // 373\nTopLevelWrapper.prototype.render = function () {                                                                       // 374\n  // this.props is actually a ReactElement                                                                             // 375\n  return this.props;                                                                                                   // 376\n};                                                                                                                     // 377\n                                                                                                                       // 378\n/**                                                                                                                    // 379\n * Mounting is the process of initializing a React component by creating its                                           // 380\n * representative DOM elements and inserting them into a supplied `container`.                                         // 381\n * Any prior content inside `container` is destroyed in the process.                                                   // 382\n *                                                                                                                     // 383\n *   ReactMount.render(                                                                                                // 384\n *     component,                                                                                                      // 385\n *     document.getElementById('container')                                                                            // 386\n *   );                                                                                                                // 387\n *                                                                                                                     // 388\n *   <div id=\"container\">                   <-- Supplied `container`.                                                  // 389\n *     <div data-reactid=\".3\">              <-- Rendered reactRoot of React                                            // 390\n *       // ...                                 component.                                                             // 391\n *     </div>                                                                                                          // 392\n *   </div>                                                                                                            // 393\n *                                                                                                                     // 394\n * Inside of `container`, the first element rendered is the \"reactRoot\".                                               // 395\n */                                                                                                                    // 396\nvar ReactMount = {                                                                                                     // 397\n                                                                                                                       // 398\n  TopLevelWrapper: TopLevelWrapper,                                                                                    // 399\n                                                                                                                       // 400\n  /** Exposed for debugging purposes **/                                                                               // 401\n  _instancesByReactRootID: instancesByReactRootID,                                                                     // 402\n                                                                                                                       // 403\n  /**                                                                                                                  // 404\n   * This is a hook provided to support rendering React components while                                               // 405\n   * ensuring that the apparent scroll position of its `container` does not                                            // 406\n   * change.                                                                                                           // 407\n   *                                                                                                                   // 408\n   * @param {DOMElement} container The `container` being rendered into.                                                // 409\n   * @param {function} renderCallback This must be called once to do the render.                                       // 410\n   */                                                                                                                  // 411\n  scrollMonitor: function (container, renderCallback) {                                                                // 412\n    renderCallback();                                                                                                  // 413\n  },                                                                                                                   // 414\n                                                                                                                       // 415\n  /**                                                                                                                  // 416\n   * Take a component that's already mounted into the DOM and replace its props                                        // 417\n   * @param {ReactComponent} prevComponent component instance already in the DOM                                       // 418\n   * @param {ReactElement} nextElement component instance to render                                                    // 419\n   * @param {DOMElement} container container to render into                                                            // 420\n   * @param {?function} callback function triggered on completion                                                      // 421\n   */                                                                                                                  // 422\n  _updateRootComponent: function (prevComponent, nextElement, container, callback) {                                   // 423\n    ReactMount.scrollMonitor(container, function () {                                                                  // 424\n      ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement);                                             // 425\n      if (callback) {                                                                                                  // 426\n        ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);                                             // 427\n      }                                                                                                                // 428\n    });                                                                                                                // 429\n                                                                                                                       // 430\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 431\n      // Record the root element in case it later gets transplanted.                                                   // 432\n      rootElementsByReactRootID[getReactRootID(container)] = getReactRootElementInContainer(container);                // 433\n    }                                                                                                                  // 434\n                                                                                                                       // 435\n    return prevComponent;                                                                                              // 436\n  },                                                                                                                   // 437\n                                                                                                                       // 438\n  /**                                                                                                                  // 439\n   * Register a component into the instance map and starts scroll value                                                // 440\n   * monitoring                                                                                                        // 441\n   * @param {ReactComponent} nextComponent component instance to render                                                // 442\n   * @param {DOMElement} container container to render into                                                            // 443\n   * @return {string} reactRoot ID prefix                                                                              // 444\n   */                                                                                                                  // 445\n  _registerComponent: function (nextComponent, container) {                                                            // 446\n    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '_registerComponent(...): Target container is not a DOM element.') : invariant(false) : undefined;\n                                                                                                                       // 448\n    ReactBrowserEventEmitter.ensureScrollValueMonitoring();                                                            // 449\n                                                                                                                       // 450\n    var reactRootID = ReactMount.registerContainer(container);                                                         // 451\n    instancesByReactRootID[reactRootID] = nextComponent;                                                               // 452\n    return reactRootID;                                                                                                // 453\n  },                                                                                                                   // 454\n                                                                                                                       // 455\n  /**                                                                                                                  // 456\n   * Render a new component into the DOM.                                                                              // 457\n   * @param {ReactElement} nextElement element to render                                                               // 458\n   * @param {DOMElement} container container to render into                                                            // 459\n   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion                                         // 460\n   * @return {ReactComponent} nextComponent                                                                            // 461\n   */                                                                                                                  // 462\n  _renderNewRootComponent: function (nextElement, container, shouldReuseMarkup, context) {                             // 463\n    // Various parts of our code (such as ReactCompositeComponent's                                                    // 464\n    // _renderValidatedComponent) assume that calls to render aren't nested;                                           // 465\n    // verify that that's the case.                                                                                    // 466\n    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '_renderNewRootComponent(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from ' + 'render is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : undefined;\n                                                                                                                       // 468\n    var componentInstance = instantiateReactComponent(nextElement, null);                                              // 469\n    var reactRootID = ReactMount._registerComponent(componentInstance, container);                                     // 470\n                                                                                                                       // 471\n    // The initial render is synchronous but any updates that happen during                                            // 472\n    // rendering, in componentWillMount or componentDidMount, will be batched                                          // 473\n    // according to the current batching strategy.                                                                     // 474\n                                                                                                                       // 475\n    ReactUpdates.batchedUpdates(batchedMountComponentIntoNode, componentInstance, reactRootID, container, shouldReuseMarkup, context);\n                                                                                                                       // 477\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 478\n      // Record the root element in case it later gets transplanted.                                                   // 479\n      rootElementsByReactRootID[reactRootID] = getReactRootElementInContainer(container);                              // 480\n    }                                                                                                                  // 481\n                                                                                                                       // 482\n    return componentInstance;                                                                                          // 483\n  },                                                                                                                   // 484\n                                                                                                                       // 485\n  /**                                                                                                                  // 486\n   * Renders a React component into the DOM in the supplied `container`.                                               // 487\n   *                                                                                                                   // 488\n   * If the React component was previously rendered into `container`, this will                                        // 489\n   * perform an update on it and only mutate the DOM as necessary to reflect the                                       // 490\n   * latest React component.                                                                                           // 491\n   *                                                                                                                   // 492\n   * @param {ReactComponent} parentComponent The conceptual parent of this render tree.                                // 493\n   * @param {ReactElement} nextElement Component element to render.                                                    // 494\n   * @param {DOMElement} container DOM element to render into.                                                         // 495\n   * @param {?function} callback function triggered on completion                                                      // 496\n   * @return {ReactComponent} Component instance rendered in `container`.                                              // 497\n   */                                                                                                                  // 498\n  renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {                           // 499\n    !(parentComponent != null && parentComponent._reactInternalInstance != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'parentComponent must be a valid React Component') : invariant(false) : undefined;\n    return ReactMount._renderSubtreeIntoContainer(parentComponent, nextElement, container, callback);                  // 501\n  },                                                                                                                   // 502\n                                                                                                                       // 503\n  _renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {                          // 504\n    !ReactElement.isValidElement(nextElement) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOM.render(): Invalid component element.%s', typeof nextElement === 'string' ? ' Instead of passing an element string, make sure to instantiate ' + 'it by passing it to React.createElement.' : typeof nextElement === 'function' ? ' Instead of passing a component class, make sure to instantiate ' + 'it by passing it to React.createElement.' :\n    // Check if it quacks like an element                                                                              // 506\n    nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : invariant(false) : undefined;\n                                                                                                                       // 508\n    process.env.NODE_ENV !== 'production' ? warning(!container || !container.tagName || container.tagName.toUpperCase() !== 'BODY', 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.') : undefined;\n                                                                                                                       // 510\n    var nextWrappedElement = new ReactElement(TopLevelWrapper, null, null, null, null, null, nextElement);             // 511\n                                                                                                                       // 512\n    var prevComponent = instancesByReactRootID[getReactRootID(container)];                                             // 513\n                                                                                                                       // 514\n    if (prevComponent) {                                                                                               // 515\n      var prevWrappedElement = prevComponent._currentElement;                                                          // 516\n      var prevElement = prevWrappedElement.props;                                                                      // 517\n      if (shouldUpdateReactComponent(prevElement, nextElement)) {                                                      // 518\n        var publicInst = prevComponent._renderedComponent.getPublicInstance();                                         // 519\n        var updatedCallback = callback && function () {                                                                // 520\n          callback.call(publicInst);                                                                                   // 521\n        };                                                                                                             // 522\n        ReactMount._updateRootComponent(prevComponent, nextWrappedElement, container, updatedCallback);                // 523\n        return publicInst;                                                                                             // 524\n      } else {                                                                                                         // 525\n        ReactMount.unmountComponentAtNode(container);                                                                  // 526\n      }                                                                                                                // 527\n    }                                                                                                                  // 528\n                                                                                                                       // 529\n    var reactRootElement = getReactRootElementInContainer(container);                                                  // 530\n    var containerHasReactMarkup = reactRootElement && !!internalGetID(reactRootElement);                               // 531\n    var containerHasNonRootReactChild = hasNonRootReactChild(container);                                               // 532\n                                                                                                                       // 533\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 534\n      process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.') : undefined;\n                                                                                                                       // 536\n      if (!containerHasReactMarkup || reactRootElement.nextSibling) {                                                  // 537\n        var rootElementSibling = reactRootElement;                                                                     // 538\n        while (rootElementSibling) {                                                                                   // 539\n          if (internalGetID(rootElementSibling)) {                                                                     // 540\n            process.env.NODE_ENV !== 'production' ? warning(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.') : undefined;\n            break;                                                                                                     // 542\n          }                                                                                                            // 543\n          rootElementSibling = rootElementSibling.nextSibling;                                                         // 544\n        }                                                                                                              // 545\n      }                                                                                                                // 546\n    }                                                                                                                  // 547\n                                                                                                                       // 548\n    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent && !containerHasNonRootReactChild;               // 549\n    var component = ReactMount._renderNewRootComponent(nextWrappedElement, container, shouldReuseMarkup, parentComponent != null ? parentComponent._reactInternalInstance._processChildContext(parentComponent._reactInternalInstance._context) : emptyObject)._renderedComponent.getPublicInstance();\n    if (callback) {                                                                                                    // 551\n      callback.call(component);                                                                                        // 552\n    }                                                                                                                  // 553\n    return component;                                                                                                  // 554\n  },                                                                                                                   // 555\n                                                                                                                       // 556\n  /**                                                                                                                  // 557\n   * Renders a React component into the DOM in the supplied `container`.                                               // 558\n   *                                                                                                                   // 559\n   * If the React component was previously rendered into `container`, this will                                        // 560\n   * perform an update on it and only mutate the DOM as necessary to reflect the                                       // 561\n   * latest React component.                                                                                           // 562\n   *                                                                                                                   // 563\n   * @param {ReactElement} nextElement Component element to render.                                                    // 564\n   * @param {DOMElement} container DOM element to render into.                                                         // 565\n   * @param {?function} callback function triggered on completion                                                      // 566\n   * @return {ReactComponent} Component instance rendered in `container`.                                              // 567\n   */                                                                                                                  // 568\n  render: function (nextElement, container, callback) {                                                                // 569\n    return ReactMount._renderSubtreeIntoContainer(null, nextElement, container, callback);                             // 570\n  },                                                                                                                   // 571\n                                                                                                                       // 572\n  /**                                                                                                                  // 573\n   * Registers a container node into which React components will be rendered.                                          // 574\n   * This also creates the \"reactRoot\" ID that will be assigned to the element                                         // 575\n   * rendered within.                                                                                                  // 576\n   *                                                                                                                   // 577\n   * @param {DOMElement} container DOM element to register as a container.                                             // 578\n   * @return {string} The \"reactRoot\" ID of elements rendered within.                                                  // 579\n   */                                                                                                                  // 580\n  registerContainer: function (container) {                                                                            // 581\n    var reactRootID = getReactRootID(container);                                                                       // 582\n    if (reactRootID) {                                                                                                 // 583\n      // If one exists, make sure it is a valid \"reactRoot\" ID.                                                        // 584\n      reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID);                                        // 585\n    }                                                                                                                  // 586\n    if (!reactRootID) {                                                                                                // 587\n      // No valid \"reactRoot\" ID found, create one.                                                                    // 588\n      reactRootID = ReactInstanceHandles.createReactRootID();                                                          // 589\n    }                                                                                                                  // 590\n    containersByReactRootID[reactRootID] = container;                                                                  // 591\n    return reactRootID;                                                                                                // 592\n  },                                                                                                                   // 593\n                                                                                                                       // 594\n  /**                                                                                                                  // 595\n   * Unmounts and destroys the React component rendered in the `container`.                                            // 596\n   *                                                                                                                   // 597\n   * @param {DOMElement} container DOM element containing a React component.                                           // 598\n   * @return {boolean} True if a component was found in and unmounted from                                             // 599\n   *                   `container`                                                                                     // 600\n   */                                                                                                                  // 601\n  unmountComponentAtNode: function (container) {                                                                       // 602\n    // Various parts of our code (such as ReactCompositeComponent's                                                    // 603\n    // _renderValidatedComponent) assume that calls to render aren't nested;                                           // 604\n    // verify that that's the case. (Strictly speaking, unmounting won't cause a                                       // 605\n    // render but we still don't expect to be in a render call here.)                                                  // 606\n    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, 'unmountComponentAtNode(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from render ' + 'is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : undefined;\n                                                                                                                       // 608\n    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : invariant(false) : undefined;\n                                                                                                                       // 610\n    var reactRootID = getReactRootID(container);                                                                       // 611\n    var component = instancesByReactRootID[reactRootID];                                                               // 612\n    if (!component) {                                                                                                  // 613\n      // Check if the node being unmounted was rendered by React, but isn't a                                          // 614\n      // root node.                                                                                                    // 615\n      var containerHasNonRootReactChild = hasNonRootReactChild(container);                                             // 616\n                                                                                                                       // 617\n      // Check if the container itself is a React root node.                                                           // 618\n      var containerID = internalGetID(container);                                                                      // 619\n      var isContainerReactRoot = containerID && containerID === ReactInstanceHandles.getReactRootIDFromNodeID(containerID);\n                                                                                                                       // 621\n      if (process.env.NODE_ENV !== 'production') {                                                                     // 622\n        process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'unmountComponentAtNode(): The node you\\'re attempting to unmount ' + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.') : undefined;\n      }                                                                                                                // 624\n                                                                                                                       // 625\n      return false;                                                                                                    // 626\n    }                                                                                                                  // 627\n    ReactUpdates.batchedUpdates(unmountComponentFromNode, component, container);                                       // 628\n    delete instancesByReactRootID[reactRootID];                                                                        // 629\n    delete containersByReactRootID[reactRootID];                                                                       // 630\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 631\n      delete rootElementsByReactRootID[reactRootID];                                                                   // 632\n    }                                                                                                                  // 633\n    return true;                                                                                                       // 634\n  },                                                                                                                   // 635\n                                                                                                                       // 636\n  /**                                                                                                                  // 637\n   * Finds the container DOM element that contains React component to which the                                        // 638\n   * supplied DOM `id` belongs.                                                                                        // 639\n   *                                                                                                                   // 640\n   * @param {string} id The ID of an element rendered by a React component.                                            // 641\n   * @return {?DOMElement} DOM element that contains the `id`.                                                         // 642\n   */                                                                                                                  // 643\n  findReactContainerForID: function (id) {                                                                             // 644\n    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(id);                                               // 645\n    var container = containersByReactRootID[reactRootID];                                                              // 646\n                                                                                                                       // 647\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 648\n      var rootElement = rootElementsByReactRootID[reactRootID];                                                        // 649\n      if (rootElement && rootElement.parentNode !== container) {                                                       // 650\n        process.env.NODE_ENV !== 'production' ? warning(                                                               // 651\n        // Call internalGetID here because getID calls isValid which calls                                             // 652\n        // findReactContainerForID (this function).                                                                    // 653\n        internalGetID(rootElement) === reactRootID, 'ReactMount: Root element ID differed from reactRootID.') : undefined;\n        var containerChild = container.firstChild;                                                                     // 655\n        if (containerChild && reactRootID === internalGetID(containerChild)) {                                         // 656\n          // If the container has a new child with the same ID as the old                                              // 657\n          // root element, then rootElementsByReactRootID[reactRootID] is                                              // 658\n          // just stale and needs to be updated. The case that deserves a                                              // 659\n          // warning is when the container is empty.                                                                   // 660\n          rootElementsByReactRootID[reactRootID] = containerChild;                                                     // 661\n        } else {                                                                                                       // 662\n          process.env.NODE_ENV !== 'production' ? warning(false, 'ReactMount: Root element has been removed from its original ' + 'container. New container: %s', rootElement.parentNode) : undefined;\n        }                                                                                                              // 664\n      }                                                                                                                // 665\n    }                                                                                                                  // 666\n                                                                                                                       // 667\n    return container;                                                                                                  // 668\n  },                                                                                                                   // 669\n                                                                                                                       // 670\n  /**                                                                                                                  // 671\n   * Finds an element rendered by React with the supplied ID.                                                          // 672\n   *                                                                                                                   // 673\n   * @param {string} id ID of a DOM node in the React component.                                                       // 674\n   * @return {DOMElement} Root DOM node of the React component.                                                        // 675\n   */                                                                                                                  // 676\n  findReactNodeByID: function (id) {                                                                                   // 677\n    var reactRoot = ReactMount.findReactContainerForID(id);                                                            // 678\n    return ReactMount.findComponentRoot(reactRoot, id);                                                                // 679\n  },                                                                                                                   // 680\n                                                                                                                       // 681\n  /**                                                                                                                  // 682\n   * Traverses up the ancestors of the supplied node to find a node that is a                                          // 683\n   * DOM representation of a React component rendered by this copy of React.                                           // 684\n   *                                                                                                                   // 685\n   * @param {*} node                                                                                                   // 686\n   * @return {?DOMEventTarget}                                                                                         // 687\n   * @internal                                                                                                         // 688\n   */                                                                                                                  // 689\n  getFirstReactDOM: function (node) {                                                                                  // 690\n    return findFirstReactDOMImpl(node);                                                                                // 691\n  },                                                                                                                   // 692\n                                                                                                                       // 693\n  /**                                                                                                                  // 694\n   * Finds a node with the supplied `targetID` inside of the supplied                                                  // 695\n   * `ancestorNode`.  Exploits the ID naming scheme to perform the search                                              // 696\n   * quickly.                                                                                                          // 697\n   *                                                                                                                   // 698\n   * @param {DOMEventTarget} ancestorNode Search from this root.                                                       // 699\n   * @pararm {string} targetID ID of the DOM representation of the component.                                          // 700\n   * @return {DOMEventTarget} DOM node with the supplied `targetID`.                                                   // 701\n   * @internal                                                                                                         // 702\n   */                                                                                                                  // 703\n  findComponentRoot: function (ancestorNode, targetID) {                                                               // 704\n    var firstChildren = findComponentRootReusableArray;                                                                // 705\n    var childIndex = 0;                                                                                                // 706\n                                                                                                                       // 707\n    var deepestAncestor = findDeepestCachedAncestor(targetID) || ancestorNode;                                         // 708\n                                                                                                                       // 709\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 710\n      // This will throw on the next line; give an early warning                                                       // 711\n      process.env.NODE_ENV !== 'production' ? warning(deepestAncestor != null, 'React can\\'t find the root component node for data-reactid value ' + '`%s`. If you\\'re seeing this message, it probably means that ' + 'you\\'ve loaded two copies of React on the page. At this time, only ' + 'a single copy of React can be loaded at a time.', targetID) : undefined;\n    }                                                                                                                  // 713\n                                                                                                                       // 714\n    firstChildren[0] = deepestAncestor.firstChild;                                                                     // 715\n    firstChildren.length = 1;                                                                                          // 716\n                                                                                                                       // 717\n    while (childIndex < firstChildren.length) {                                                                        // 718\n      var child = firstChildren[childIndex++];                                                                         // 719\n      var targetChild;                                                                                                 // 720\n                                                                                                                       // 721\n      while (child) {                                                                                                  // 722\n        var childID = ReactMount.getID(child);                                                                         // 723\n        if (childID) {                                                                                                 // 724\n          // Even if we find the node we're looking for, we finish looping                                             // 725\n          // through its siblings to ensure they're cached so that we don't have                                       // 726\n          // to revisit this node again. Otherwise, we make n^2 calls to getID                                         // 727\n          // when visiting the many children of a single node in order.                                                // 728\n                                                                                                                       // 729\n          if (targetID === childID) {                                                                                  // 730\n            targetChild = child;                                                                                       // 731\n          } else if (ReactInstanceHandles.isAncestorIDOf(childID, targetID)) {                                         // 732\n            // If we find a child whose ID is an ancestor of the given ID,                                             // 733\n            // then we can be sure that we only want to search the subtree                                             // 734\n            // rooted at this child, so we can throw out the rest of the                                               // 735\n            // search state.                                                                                           // 736\n            firstChildren.length = childIndex = 0;                                                                     // 737\n            firstChildren.push(child.firstChild);                                                                      // 738\n          }                                                                                                            // 739\n        } else {                                                                                                       // 740\n          // If this child had no ID, then there's a chance that it was                                                // 741\n          // injected automatically by the browser, as when a `<table>`                                                // 742\n          // element sprouts an extra `<tbody>` child as a side effect of                                              // 743\n          // `.innerHTML` parsing. Optimistically continue down this                                                   // 744\n          // branch, but not before examining the other siblings.                                                      // 745\n          firstChildren.push(child.firstChild);                                                                        // 746\n        }                                                                                                              // 747\n                                                                                                                       // 748\n        child = child.nextSibling;                                                                                     // 749\n      }                                                                                                                // 750\n                                                                                                                       // 751\n      if (targetChild) {                                                                                               // 752\n        // Emptying firstChildren/findComponentRootReusableArray is                                                    // 753\n        // not necessary for correctness, but it helps the GC reclaim                                                  // 754\n        // any nodes that were left at the end of the search.                                                          // 755\n        firstChildren.length = 0;                                                                                      // 756\n                                                                                                                       // 757\n        return targetChild;                                                                                            // 758\n      }                                                                                                                // 759\n    }                                                                                                                  // 760\n                                                                                                                       // 761\n    firstChildren.length = 0;                                                                                          // 762\n                                                                                                                       // 763\n    !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'findComponentRoot(..., %s): Unable to find element. This probably ' + 'means the DOM was unexpectedly mutated (e.g., by the browser), ' + 'usually due to forgetting a <tbody> when using tables, nesting tags ' + 'like <form>, <p>, or <a>, or using non-SVG elements in an <svg> ' + 'parent. ' + 'Try inspecting the child nodes of the element with React ID `%s`.', targetID, ReactMount.getID(ancestorNode)) : invariant(false) : undefined;\n  },                                                                                                                   // 765\n                                                                                                                       // 766\n  _mountImageIntoNode: function (markup, container, shouldReuseMarkup, transaction) {                                  // 767\n    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mountComponentIntoNode(...): Target container is not valid.') : invariant(false) : undefined;\n                                                                                                                       // 769\n    if (shouldReuseMarkup) {                                                                                           // 770\n      var rootElement = getReactRootElementInContainer(container);                                                     // 771\n      if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {                                                   // 772\n        return;                                                                                                        // 773\n      } else {                                                                                                         // 774\n        var checksum = rootElement.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);                               // 775\n        rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);                                           // 776\n                                                                                                                       // 777\n        var rootMarkup = rootElement.outerHTML;                                                                        // 778\n        rootElement.setAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME, checksum);                                    // 779\n                                                                                                                       // 780\n        var normalizedMarkup = markup;                                                                                 // 781\n        if (process.env.NODE_ENV !== 'production') {                                                                   // 782\n          // because rootMarkup is retrieved from the DOM, various normalizations                                      // 783\n          // will have occurred which will not be present in `markup`. Here,                                           // 784\n          // insert markup into a <div> or <iframe> depending on the container                                         // 785\n          // type to perform the same normalizations before comparing.                                                 // 786\n          var normalizer;                                                                                              // 787\n          if (container.nodeType === ELEMENT_NODE_TYPE) {                                                              // 788\n            normalizer = document.createElement('div');                                                                // 789\n            normalizer.innerHTML = markup;                                                                             // 790\n            normalizedMarkup = normalizer.innerHTML;                                                                   // 791\n          } else {                                                                                                     // 792\n            normalizer = document.createElement('iframe');                                                             // 793\n            document.body.appendChild(normalizer);                                                                     // 794\n            normalizer.contentDocument.write(markup);                                                                  // 795\n            normalizedMarkup = normalizer.contentDocument.documentElement.outerHTML;                                   // 796\n            document.body.removeChild(normalizer);                                                                     // 797\n          }                                                                                                            // 798\n        }                                                                                                              // 799\n                                                                                                                       // 800\n        var diffIndex = firstDifferenceIndex(normalizedMarkup, rootMarkup);                                            // 801\n        var difference = ' (client) ' + normalizedMarkup.substring(diffIndex - 20, diffIndex + 20) + '\\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);\n                                                                                                                       // 803\n        !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\\'re trying to render a component to the document using ' + 'server rendering but the checksum was invalid. This usually ' + 'means you rendered a different component type or props on ' + 'the client from the one on the server, or your render() ' + 'methods are impure. React cannot handle this case due to ' + 'cross-browser quirks by rendering at the document root. You ' + 'should look for environment dependent code in your components ' + 'and ensure the props are the same client and server side:\\n%s', difference) : invariant(false) : undefined;\n                                                                                                                       // 805\n        if (process.env.NODE_ENV !== 'production') {                                                                   // 806\n          process.env.NODE_ENV !== 'production' ? warning(false, 'React attempted to reuse markup in a container but the ' + 'checksum was invalid. This generally means that you are ' + 'using server rendering and the markup generated on the ' + 'server was not what the client was expecting. React injected ' + 'new markup to compensate which works but you have lost many ' + 'of the benefits of server rendering. Instead, figure out ' + 'why the markup being generated is different on the client ' + 'or server:\\n%s', difference) : undefined;\n        }                                                                                                              // 808\n      }                                                                                                                // 809\n    }                                                                                                                  // 810\n                                                                                                                       // 811\n    !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\\'re trying to render a component to the document but ' + 'you didn\\'t use server rendering. We can\\'t do this ' + 'without using server rendering due to cross-browser quirks. ' + 'See ReactDOMServer.renderToString() for server rendering.') : invariant(false) : undefined;\n                                                                                                                       // 813\n    if (transaction.useCreateElement) {                                                                                // 814\n      while (container.lastChild) {                                                                                    // 815\n        container.removeChild(container.lastChild);                                                                    // 816\n      }                                                                                                                // 817\n      container.appendChild(markup);                                                                                   // 818\n    } else {                                                                                                           // 819\n      setInnerHTML(container, markup);                                                                                 // 820\n    }                                                                                                                  // 821\n  },                                                                                                                   // 822\n                                                                                                                       // 823\n  ownerDocumentContextKey: ownerDocumentContextKey,                                                                    // 824\n                                                                                                                       // 825\n  /**                                                                                                                  // 826\n   * React ID utilities.                                                                                               // 827\n   */                                                                                                                  // 828\n                                                                                                                       // 829\n  getReactRootID: getReactRootID,                                                                                      // 830\n                                                                                                                       // 831\n  getID: getID,                                                                                                        // 832\n                                                                                                                       // 833\n  setID: setID,                                                                                                        // 834\n                                                                                                                       // 835\n  getNode: getNode,                                                                                                    // 836\n                                                                                                                       // 837\n  getNodeFromInstance: getNodeFromInstance,                                                                            // 838\n                                                                                                                       // 839\n  isValid: isValid,                                                                                                    // 840\n                                                                                                                       // 841\n  purgeID: purgeID                                                                                                     // 842\n};                                                                                                                     // 843\n                                                                                                                       // 844\nReactPerf.measureMethods(ReactMount, 'ReactMount', {                                                                   // 845\n  _renderNewRootComponent: '_renderNewRootComponent',                                                                  // 846\n  _mountImageIntoNode: '_mountImageIntoNode'                                                                           // 847\n});                                                                                                                    // 848\n                                                                                                                       // 849\nmodule.exports = ReactMount;                                                                                           // 850\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactBrowserEventEmitter.js\":[\"./EventConstants\",\"./EventPluginHub\",\"./EventPluginRegistry\",\"./ReactEventEmitterMixin\",\"./ReactPerf\",\"./ViewportMetrics\",\"./Object.assign\",\"./isEventSupported\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactBrowserEventEmitter.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactBrowserEventEmitter                                                                            // 9\n * @typechecks static-only                                                                                             // 10\n */                                                                                                                    // 11\n                                                                                                                       // 12\n'use strict';                                                                                                          // 13\n                                                                                                                       // 14\nvar EventConstants = require('./EventConstants');                                                                      // 15\nvar EventPluginHub = require('./EventPluginHub');                                                                      // 16\nvar EventPluginRegistry = require('./EventPluginRegistry');                                                            // 17\nvar ReactEventEmitterMixin = require('./ReactEventEmitterMixin');                                                      // 18\nvar ReactPerf = require('./ReactPerf');                                                                                // 19\nvar ViewportMetrics = require('./ViewportMetrics');                                                                    // 20\n                                                                                                                       // 21\nvar assign = require('./Object.assign');                                                                               // 22\nvar isEventSupported = require('./isEventSupported');                                                                  // 23\n                                                                                                                       // 24\n/**                                                                                                                    // 25\n * Summary of `ReactBrowserEventEmitter` event handling:                                                               // 26\n *                                                                                                                     // 27\n *  - Top-level delegation is used to trap most native browser events. This                                            // 28\n *    may only occur in the main thread and is the responsibility of                                                   // 29\n *    ReactEventListener, which is injected and can therefore support pluggable                                        // 30\n *    event sources. This is the only work that occurs in the main thread.                                             // 31\n *                                                                                                                     // 32\n *  - We normalize and de-duplicate events to account for browser quirks. This                                         // 33\n *    may be done in the worker thread.                                                                                // 34\n *                                                                                                                     // 35\n *  - Forward these native events (with the associated top-level type used to                                          // 36\n *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want                                        // 37\n *    to extract any synthetic events.                                                                                 // 38\n *                                                                                                                     // 39\n *  - The `EventPluginHub` will then process each event by annotating them with                                        // 40\n *    \"dispatches\", a sequence of listeners and IDs that care about that event.                                        // 41\n *                                                                                                                     // 42\n *  - The `EventPluginHub` then dispatches the events.                                                                 // 43\n *                                                                                                                     // 44\n * Overview of React and the event system:                                                                             // 45\n *                                                                                                                     // 46\n * +------------+    .                                                                                                 // 47\n * |    DOM     |    .                                                                                                 // 48\n * +------------+    .                                                                                                 // 49\n *       |           .                                                                                                 // 50\n *       v           .                                                                                                 // 51\n * +------------+    .                                                                                                 // 52\n * | ReactEvent |    .                                                                                                 // 53\n * |  Listener  |    .                                                                                                 // 54\n * +------------+    .                         +-----------+                                                           // 55\n *       |           .               +--------+|SimpleEvent|                                                           // 56\n *       |           .               |         |Plugin     |                                                           // 57\n * +-----|------+    .               v         +-----------+                                                           // 58\n * |     |      |    .    +--------------+                    +------------+                                           // 59\n * |     +-----------.--->|EventPluginHub|                    |    Event   |                                           // 60\n * |            |    .    |              |     +-----------+  | Propagators|                                           // 61\n * | ReactEvent |    .    |              |     |TapEvent   |  |------------|                                           // 62\n * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|                                           // 63\n * |            |    .    |              |     +-----------+  |  utilities |                                           // 64\n * |     +-----------.--->|              |                    +------------+                                           // 65\n * |     |      |    .    +--------------+                                                                             // 66\n * +-----|------+    .                ^        +-----------+                                                           // 67\n *       |           .                |        |Enter/Leave|                                                           // 68\n *       +           .                +-------+|Plugin     |                                                           // 69\n * +-------------+   .                         +-----------+                                                           // 70\n * | application |   .                                                                                                 // 71\n * |-------------|   .                                                                                                 // 72\n * |             |   .                                                                                                 // 73\n * |             |   .                                                                                                 // 74\n * +-------------+   .                                                                                                 // 75\n *                   .                                                                                                 // 76\n *    React Core     .  General Purpose Event Plugin System                                                            // 77\n */                                                                                                                    // 78\n                                                                                                                       // 79\nvar alreadyListeningTo = {};                                                                                           // 80\nvar isMonitoringScrollValue = false;                                                                                   // 81\nvar reactTopListenersCounter = 0;                                                                                      // 82\n                                                                                                                       // 83\n// For events like 'submit' which don't consistently bubble (which we trap at a                                        // 84\n// lower node than `document`), binding at `document` would cause duplicate                                            // 85\n// events so we don't include them here                                                                                // 86\nvar topEventMapping = {                                                                                                // 87\n  topAbort: 'abort',                                                                                                   // 88\n  topBlur: 'blur',                                                                                                     // 89\n  topCanPlay: 'canplay',                                                                                               // 90\n  topCanPlayThrough: 'canplaythrough',                                                                                 // 91\n  topChange: 'change',                                                                                                 // 92\n  topClick: 'click',                                                                                                   // 93\n  topCompositionEnd: 'compositionend',                                                                                 // 94\n  topCompositionStart: 'compositionstart',                                                                             // 95\n  topCompositionUpdate: 'compositionupdate',                                                                           // 96\n  topContextMenu: 'contextmenu',                                                                                       // 97\n  topCopy: 'copy',                                                                                                     // 98\n  topCut: 'cut',                                                                                                       // 99\n  topDoubleClick: 'dblclick',                                                                                          // 100\n  topDrag: 'drag',                                                                                                     // 101\n  topDragEnd: 'dragend',                                                                                               // 102\n  topDragEnter: 'dragenter',                                                                                           // 103\n  topDragExit: 'dragexit',                                                                                             // 104\n  topDragLeave: 'dragleave',                                                                                           // 105\n  topDragOver: 'dragover',                                                                                             // 106\n  topDragStart: 'dragstart',                                                                                           // 107\n  topDrop: 'drop',                                                                                                     // 108\n  topDurationChange: 'durationchange',                                                                                 // 109\n  topEmptied: 'emptied',                                                                                               // 110\n  topEncrypted: 'encrypted',                                                                                           // 111\n  topEnded: 'ended',                                                                                                   // 112\n  topError: 'error',                                                                                                   // 113\n  topFocus: 'focus',                                                                                                   // 114\n  topInput: 'input',                                                                                                   // 115\n  topKeyDown: 'keydown',                                                                                               // 116\n  topKeyPress: 'keypress',                                                                                             // 117\n  topKeyUp: 'keyup',                                                                                                   // 118\n  topLoadedData: 'loadeddata',                                                                                         // 119\n  topLoadedMetadata: 'loadedmetadata',                                                                                 // 120\n  topLoadStart: 'loadstart',                                                                                           // 121\n  topMouseDown: 'mousedown',                                                                                           // 122\n  topMouseMove: 'mousemove',                                                                                           // 123\n  topMouseOut: 'mouseout',                                                                                             // 124\n  topMouseOver: 'mouseover',                                                                                           // 125\n  topMouseUp: 'mouseup',                                                                                               // 126\n  topPaste: 'paste',                                                                                                   // 127\n  topPause: 'pause',                                                                                                   // 128\n  topPlay: 'play',                                                                                                     // 129\n  topPlaying: 'playing',                                                                                               // 130\n  topProgress: 'progress',                                                                                             // 131\n  topRateChange: 'ratechange',                                                                                         // 132\n  topScroll: 'scroll',                                                                                                 // 133\n  topSeeked: 'seeked',                                                                                                 // 134\n  topSeeking: 'seeking',                                                                                               // 135\n  topSelectionChange: 'selectionchange',                                                                               // 136\n  topStalled: 'stalled',                                                                                               // 137\n  topSuspend: 'suspend',                                                                                               // 138\n  topTextInput: 'textInput',                                                                                           // 139\n  topTimeUpdate: 'timeupdate',                                                                                         // 140\n  topTouchCancel: 'touchcancel',                                                                                       // 141\n  topTouchEnd: 'touchend',                                                                                             // 142\n  topTouchMove: 'touchmove',                                                                                           // 143\n  topTouchStart: 'touchstart',                                                                                         // 144\n  topVolumeChange: 'volumechange',                                                                                     // 145\n  topWaiting: 'waiting',                                                                                               // 146\n  topWheel: 'wheel'                                                                                                    // 147\n};                                                                                                                     // 148\n                                                                                                                       // 149\n/**                                                                                                                    // 150\n * To ensure no conflicts with other potential React instances on the page                                             // 151\n */                                                                                                                    // 152\nvar topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);                                          // 153\n                                                                                                                       // 154\nfunction getListeningForDocument(mountAt) {                                                                            // 155\n  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`                                              // 156\n  // directly.                                                                                                         // 157\n  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {                                             // 158\n    mountAt[topListenersIDKey] = reactTopListenersCounter++;                                                           // 159\n    alreadyListeningTo[mountAt[topListenersIDKey]] = {};                                                               // 160\n  }                                                                                                                    // 161\n  return alreadyListeningTo[mountAt[topListenersIDKey]];                                                               // 162\n}                                                                                                                      // 163\n                                                                                                                       // 164\n/**                                                                                                                    // 165\n * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For                                         // 166\n * example:                                                                                                            // 167\n *                                                                                                                     // 168\n *   ReactBrowserEventEmitter.putListener('myID', 'onClick', myFunction);                                              // 169\n *                                                                                                                     // 170\n * This would allocate a \"registration\" of `('onClick', myFunction)` on 'myID'.                                        // 171\n *                                                                                                                     // 172\n * @internal                                                                                                           // 173\n */                                                                                                                    // 174\nvar ReactBrowserEventEmitter = assign({}, ReactEventEmitterMixin, {                                                    // 175\n                                                                                                                       // 176\n  /**                                                                                                                  // 177\n   * Injectable event backend                                                                                          // 178\n   */                                                                                                                  // 179\n  ReactEventListener: null,                                                                                            // 180\n                                                                                                                       // 181\n  injection: {                                                                                                         // 182\n    /**                                                                                                                // 183\n     * @param {object} ReactEventListener                                                                              // 184\n     */                                                                                                                // 185\n    injectReactEventListener: function (ReactEventListener) {                                                          // 186\n      ReactEventListener.setHandleTopLevel(ReactBrowserEventEmitter.handleTopLevel);                                   // 187\n      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;                                                // 188\n    }                                                                                                                  // 189\n  },                                                                                                                   // 190\n                                                                                                                       // 191\n  /**                                                                                                                  // 192\n   * Sets whether or not any created callbacks should be enabled.                                                      // 193\n   *                                                                                                                   // 194\n   * @param {boolean} enabled True if callbacks should be enabled.                                                     // 195\n   */                                                                                                                  // 196\n  setEnabled: function (enabled) {                                                                                     // 197\n    if (ReactBrowserEventEmitter.ReactEventListener) {                                                                 // 198\n      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);                                                 // 199\n    }                                                                                                                  // 200\n  },                                                                                                                   // 201\n                                                                                                                       // 202\n  /**                                                                                                                  // 203\n   * @return {boolean} True if callbacks are enabled.                                                                  // 204\n   */                                                                                                                  // 205\n  isEnabled: function () {                                                                                             // 206\n    return !!(ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled());\n  },                                                                                                                   // 208\n                                                                                                                       // 209\n  /**                                                                                                                  // 210\n   * We listen for bubbled touch events on the document object.                                                        // 211\n   *                                                                                                                   // 212\n   * Firefox v8.01 (and possibly others) exhibited strange behavior when                                               // 213\n   * mounting `onmousemove` events at some node that was not the document                                              // 214\n   * element. The symptoms were that if your mouse is not moving over something                                        // 215\n   * contained within that mount point (for example on the background) the                                             // 216\n   * top-level listeners for `onmousemove` won't be called. However, if you                                            // 217\n   * register the `mousemove` on the document object, then it will of course                                           // 218\n   * catch all `mousemove`s. This along with iOS quirks, justifies restricting                                         // 219\n   * top-level listeners to the document object only, at least for these                                               // 220\n   * movement types of events and possibly all events.                                                                 // 221\n   *                                                                                                                   // 222\n   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html                                         // 223\n   *                                                                                                                   // 224\n   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but                                         // 225\n   * they bubble to document.                                                                                          // 226\n   *                                                                                                                   // 227\n   * @param {string} registrationName Name of listener (e.g. `onClick`).                                               // 228\n   * @param {object} contentDocumentHandle Document which owns the container                                           // 229\n   */                                                                                                                  // 230\n  listenTo: function (registrationName, contentDocumentHandle) {                                                       // 231\n    var mountAt = contentDocumentHandle;                                                                               // 232\n    var isListening = getListeningForDocument(mountAt);                                                                // 233\n    var dependencies = EventPluginRegistry.registrationNameDependencies[registrationName];                             // 234\n                                                                                                                       // 235\n    var topLevelTypes = EventConstants.topLevelTypes;                                                                  // 236\n    for (var i = 0; i < dependencies.length; i++) {                                                                    // 237\n      var dependency = dependencies[i];                                                                                // 238\n      if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {                                      // 239\n        if (dependency === topLevelTypes.topWheel) {                                                                   // 240\n          if (isEventSupported('wheel')) {                                                                             // 241\n            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'wheel', mountAt);    // 242\n          } else if (isEventSupported('mousewheel')) {                                                                 // 243\n            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'mousewheel', mountAt);\n          } else {                                                                                                     // 245\n            // Firefox needs to capture a different mouse scroll event.                                                // 246\n            // @see http://www.quirksmode.org/dom/events/tests/scroll.html                                             // 247\n            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'DOMMouseScroll', mountAt);\n          }                                                                                                            // 249\n        } else if (dependency === topLevelTypes.topScroll) {                                                           // 250\n                                                                                                                       // 251\n          if (isEventSupported('scroll', true)) {                                                                      // 252\n            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topScroll, 'scroll', mountAt);\n          } else {                                                                                                     // 254\n            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topScroll, 'scroll', ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE);\n          }                                                                                                            // 256\n        } else if (dependency === topLevelTypes.topFocus || dependency === topLevelTypes.topBlur) {                    // 257\n                                                                                                                       // 258\n          if (isEventSupported('focus', true)) {                                                                       // 259\n            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topFocus, 'focus', mountAt);   // 260\n            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topBlur, 'blur', mountAt);     // 261\n          } else if (isEventSupported('focusin')) {                                                                    // 262\n            // IE has `focusin` and `focusout` events which bubble.                                                    // 263\n            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html                                // 264\n            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topFocus, 'focusin', mountAt);  // 265\n            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topBlur, 'focusout', mountAt);  // 266\n          }                                                                                                            // 267\n                                                                                                                       // 268\n          // to make sure blur and focus event listeners are only attached once                                        // 269\n          isListening[topLevelTypes.topBlur] = true;                                                                   // 270\n          isListening[topLevelTypes.topFocus] = true;                                                                  // 271\n        } else if (topEventMapping.hasOwnProperty(dependency)) {                                                       // 272\n          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(dependency, topEventMapping[dependency], mountAt);\n        }                                                                                                              // 274\n                                                                                                                       // 275\n        isListening[dependency] = true;                                                                                // 276\n      }                                                                                                                // 277\n    }                                                                                                                  // 278\n  },                                                                                                                   // 279\n                                                                                                                       // 280\n  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {                                                 // 281\n    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelType, handlerBaseName, handle);        // 282\n  },                                                                                                                   // 283\n                                                                                                                       // 284\n  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {                                                // 285\n    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelType, handlerBaseName, handle);       // 286\n  },                                                                                                                   // 287\n                                                                                                                       // 288\n  /**                                                                                                                  // 289\n   * Listens to window scroll and resize events. We cache scroll values so that                                        // 290\n   * application code can access them without triggering reflows.                                                      // 291\n   *                                                                                                                   // 292\n   * NOTE: Scroll events do not bubble.                                                                                // 293\n   *                                                                                                                   // 294\n   * @see http://www.quirksmode.org/dom/events/scroll.html                                                             // 295\n   */                                                                                                                  // 296\n  ensureScrollValueMonitoring: function () {                                                                           // 297\n    if (!isMonitoringScrollValue) {                                                                                    // 298\n      var refresh = ViewportMetrics.refreshScrollValues;                                                               // 299\n      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);                                         // 300\n      isMonitoringScrollValue = true;                                                                                  // 301\n    }                                                                                                                  // 302\n  },                                                                                                                   // 303\n                                                                                                                       // 304\n  eventNameDispatchConfigs: EventPluginHub.eventNameDispatchConfigs,                                                   // 305\n                                                                                                                       // 306\n  registrationNameModules: EventPluginHub.registrationNameModules,                                                     // 307\n                                                                                                                       // 308\n  putListener: EventPluginHub.putListener,                                                                             // 309\n                                                                                                                       // 310\n  getListener: EventPluginHub.getListener,                                                                             // 311\n                                                                                                                       // 312\n  deleteListener: EventPluginHub.deleteListener,                                                                       // 313\n                                                                                                                       // 314\n  deleteAllListeners: EventPluginHub.deleteAllListeners                                                                // 315\n                                                                                                                       // 316\n});                                                                                                                    // 317\n                                                                                                                       // 318\nReactPerf.measureMethods(ReactBrowserEventEmitter, 'ReactBrowserEventEmitter', {                                       // 319\n  putListener: 'putListener',                                                                                          // 320\n  deleteListener: 'deleteListener'                                                                                     // 321\n});                                                                                                                    // 322\n                                                                                                                       // 323\nmodule.exports = ReactBrowserEventEmitter;                                                                             // 324\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"EventConstants.js\":[\"fbjs/lib/keyMirror\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/EventConstants.js                                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule EventConstants                                                                                      // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar keyMirror = require('fbjs/lib/keyMirror');                                                                         // 14\n                                                                                                                       // 15\nvar PropagationPhases = keyMirror({ bubbled: null, captured: null });                                                  // 16\n                                                                                                                       // 17\n/**                                                                                                                    // 18\n * Types of raw signals from the browser caught at the top level.                                                      // 19\n */                                                                                                                    // 20\nvar topLevelTypes = keyMirror({                                                                                        // 21\n  topAbort: null,                                                                                                      // 22\n  topBlur: null,                                                                                                       // 23\n  topCanPlay: null,                                                                                                    // 24\n  topCanPlayThrough: null,                                                                                             // 25\n  topChange: null,                                                                                                     // 26\n  topClick: null,                                                                                                      // 27\n  topCompositionEnd: null,                                                                                             // 28\n  topCompositionStart: null,                                                                                           // 29\n  topCompositionUpdate: null,                                                                                          // 30\n  topContextMenu: null,                                                                                                // 31\n  topCopy: null,                                                                                                       // 32\n  topCut: null,                                                                                                        // 33\n  topDoubleClick: null,                                                                                                // 34\n  topDrag: null,                                                                                                       // 35\n  topDragEnd: null,                                                                                                    // 36\n  topDragEnter: null,                                                                                                  // 37\n  topDragExit: null,                                                                                                   // 38\n  topDragLeave: null,                                                                                                  // 39\n  topDragOver: null,                                                                                                   // 40\n  topDragStart: null,                                                                                                  // 41\n  topDrop: null,                                                                                                       // 42\n  topDurationChange: null,                                                                                             // 43\n  topEmptied: null,                                                                                                    // 44\n  topEncrypted: null,                                                                                                  // 45\n  topEnded: null,                                                                                                      // 46\n  topError: null,                                                                                                      // 47\n  topFocus: null,                                                                                                      // 48\n  topInput: null,                                                                                                      // 49\n  topKeyDown: null,                                                                                                    // 50\n  topKeyPress: null,                                                                                                   // 51\n  topKeyUp: null,                                                                                                      // 52\n  topLoad: null,                                                                                                       // 53\n  topLoadedData: null,                                                                                                 // 54\n  topLoadedMetadata: null,                                                                                             // 55\n  topLoadStart: null,                                                                                                  // 56\n  topMouseDown: null,                                                                                                  // 57\n  topMouseMove: null,                                                                                                  // 58\n  topMouseOut: null,                                                                                                   // 59\n  topMouseOver: null,                                                                                                  // 60\n  topMouseUp: null,                                                                                                    // 61\n  topPaste: null,                                                                                                      // 62\n  topPause: null,                                                                                                      // 63\n  topPlay: null,                                                                                                       // 64\n  topPlaying: null,                                                                                                    // 65\n  topProgress: null,                                                                                                   // 66\n  topRateChange: null,                                                                                                 // 67\n  topReset: null,                                                                                                      // 68\n  topScroll: null,                                                                                                     // 69\n  topSeeked: null,                                                                                                     // 70\n  topSeeking: null,                                                                                                    // 71\n  topSelectionChange: null,                                                                                            // 72\n  topStalled: null,                                                                                                    // 73\n  topSubmit: null,                                                                                                     // 74\n  topSuspend: null,                                                                                                    // 75\n  topTextInput: null,                                                                                                  // 76\n  topTimeUpdate: null,                                                                                                 // 77\n  topTouchCancel: null,                                                                                                // 78\n  topTouchEnd: null,                                                                                                   // 79\n  topTouchMove: null,                                                                                                  // 80\n  topTouchStart: null,                                                                                                 // 81\n  topVolumeChange: null,                                                                                               // 82\n  topWaiting: null,                                                                                                    // 83\n  topWheel: null                                                                                                       // 84\n});                                                                                                                    // 85\n                                                                                                                       // 86\nvar EventConstants = {                                                                                                 // 87\n  topLevelTypes: topLevelTypes,                                                                                        // 88\n  PropagationPhases: PropagationPhases                                                                                 // 89\n};                                                                                                                     // 90\n                                                                                                                       // 91\nmodule.exports = EventConstants;                                                                                       // 92\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"EventPluginHub.js\":[\"./EventPluginRegistry\",\"./EventPluginUtils\",\"./ReactErrorUtils\",\"./accumulateInto\",\"./forEachAccumulated\",\"fbjs/lib/invariant\",\"fbjs/lib/warning\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/EventPluginHub.js                                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule EventPluginHub                                                                                      // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar EventPluginRegistry = require('./EventPluginRegistry');                                                            // 14\nvar EventPluginUtils = require('./EventPluginUtils');                                                                  // 15\nvar ReactErrorUtils = require('./ReactErrorUtils');                                                                    // 16\n                                                                                                                       // 17\nvar accumulateInto = require('./accumulateInto');                                                                      // 18\nvar forEachAccumulated = require('./forEachAccumulated');                                                              // 19\nvar invariant = require('fbjs/lib/invariant');                                                                         // 20\nvar warning = require('fbjs/lib/warning');                                                                             // 21\n                                                                                                                       // 22\n/**                                                                                                                    // 23\n * Internal store for event listeners                                                                                  // 24\n */                                                                                                                    // 25\nvar listenerBank = {};                                                                                                 // 26\n                                                                                                                       // 27\n/**                                                                                                                    // 28\n * Internal queue of events that have accumulated their dispatches and are                                             // 29\n * waiting to have their dispatches executed.                                                                          // 30\n */                                                                                                                    // 31\nvar eventQueue = null;                                                                                                 // 32\n                                                                                                                       // 33\n/**                                                                                                                    // 34\n * Dispatches an event and releases it back into the pool, unless persistent.                                          // 35\n *                                                                                                                     // 36\n * @param {?object} event Synthetic event to be dispatched.                                                            // 37\n * @param {boolean} simulated If the event is simulated (changes exn behavior)                                         // 38\n * @private                                                                                                            // 39\n */                                                                                                                    // 40\nvar executeDispatchesAndRelease = function (event, simulated) {                                                        // 41\n  if (event) {                                                                                                         // 42\n    EventPluginUtils.executeDispatchesInOrder(event, simulated);                                                       // 43\n                                                                                                                       // 44\n    if (!event.isPersistent()) {                                                                                       // 45\n      event.constructor.release(event);                                                                                // 46\n    }                                                                                                                  // 47\n  }                                                                                                                    // 48\n};                                                                                                                     // 49\nvar executeDispatchesAndReleaseSimulated = function (e) {                                                              // 50\n  return executeDispatchesAndRelease(e, true);                                                                         // 51\n};                                                                                                                     // 52\nvar executeDispatchesAndReleaseTopLevel = function (e) {                                                               // 53\n  return executeDispatchesAndRelease(e, false);                                                                        // 54\n};                                                                                                                     // 55\n                                                                                                                       // 56\n/**                                                                                                                    // 57\n * - `InstanceHandle`: [required] Module that performs logical traversals of DOM                                       // 58\n *   hierarchy given ids of the logical DOM elements involved.                                                         // 59\n */                                                                                                                    // 60\nvar InstanceHandle = null;                                                                                             // 61\n                                                                                                                       // 62\nfunction validateInstanceHandle() {                                                                                    // 63\n  var valid = InstanceHandle && InstanceHandle.traverseTwoPhase && InstanceHandle.traverseEnterLeave;                  // 64\n  process.env.NODE_ENV !== 'production' ? warning(valid, 'InstanceHandle not injected before use!') : undefined;       // 65\n}                                                                                                                      // 66\n                                                                                                                       // 67\n/**                                                                                                                    // 68\n * This is a unified interface for event plugins to be installed and configured.                                       // 69\n *                                                                                                                     // 70\n * Event plugins can implement the following properties:                                                               // 71\n *                                                                                                                     // 72\n *   `extractEvents` {function(string, DOMEventTarget, string, object): *}                                             // 73\n *     Required. When a top-level event is fired, this method is expected to                                           // 74\n *     extract synthetic events that will in turn be queued and dispatched.                                            // 75\n *                                                                                                                     // 76\n *   `eventTypes` {object}                                                                                             // 77\n *     Optional, plugins that fire events must publish a mapping of registration                                       // 78\n *     names that are used to register listeners. Values of this mapping must                                          // 79\n *     be objects that contain `registrationName` or `phasedRegistrationNames`.                                        // 80\n *                                                                                                                     // 81\n *   `executeDispatch` {function(object, function, string)}                                                            // 82\n *     Optional, allows plugins to override how an event gets dispatched. By                                           // 83\n *     default, the listener is simply invoked.                                                                        // 84\n *                                                                                                                     // 85\n * Each plugin that is injected into `EventsPluginHub` is immediately operable.                                        // 86\n *                                                                                                                     // 87\n * @public                                                                                                             // 88\n */                                                                                                                    // 89\nvar EventPluginHub = {                                                                                                 // 90\n                                                                                                                       // 91\n  /**                                                                                                                  // 92\n   * Methods for injecting dependencies.                                                                               // 93\n   */                                                                                                                  // 94\n  injection: {                                                                                                         // 95\n                                                                                                                       // 96\n    /**                                                                                                                // 97\n     * @param {object} InjectedMount                                                                                   // 98\n     * @public                                                                                                         // 99\n     */                                                                                                                // 100\n    injectMount: EventPluginUtils.injection.injectMount,                                                               // 101\n                                                                                                                       // 102\n    /**                                                                                                                // 103\n     * @param {object} InjectedInstanceHandle                                                                          // 104\n     * @public                                                                                                         // 105\n     */                                                                                                                // 106\n    injectInstanceHandle: function (InjectedInstanceHandle) {                                                          // 107\n      InstanceHandle = InjectedInstanceHandle;                                                                         // 108\n      if (process.env.NODE_ENV !== 'production') {                                                                     // 109\n        validateInstanceHandle();                                                                                      // 110\n      }                                                                                                                // 111\n    },                                                                                                                 // 112\n                                                                                                                       // 113\n    getInstanceHandle: function () {                                                                                   // 114\n      if (process.env.NODE_ENV !== 'production') {                                                                     // 115\n        validateInstanceHandle();                                                                                      // 116\n      }                                                                                                                // 117\n      return InstanceHandle;                                                                                           // 118\n    },                                                                                                                 // 119\n                                                                                                                       // 120\n    /**                                                                                                                // 121\n     * @param {array} InjectedEventPluginOrder                                                                         // 122\n     * @public                                                                                                         // 123\n     */                                                                                                                // 124\n    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,                                                // 125\n                                                                                                                       // 126\n    /**                                                                                                                // 127\n     * @param {object} injectedNamesToPlugins Map from names to plugin modules.                                        // 128\n     */                                                                                                                // 129\n    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName                                             // 130\n                                                                                                                       // 131\n  },                                                                                                                   // 132\n                                                                                                                       // 133\n  eventNameDispatchConfigs: EventPluginRegistry.eventNameDispatchConfigs,                                              // 134\n                                                                                                                       // 135\n  registrationNameModules: EventPluginRegistry.registrationNameModules,                                                // 136\n                                                                                                                       // 137\n  /**                                                                                                                  // 138\n   * Stores `listener` at `listenerBank[registrationName][id]`. Is idempotent.                                         // 139\n   *                                                                                                                   // 140\n   * @param {string} id ID of the DOM element.                                                                         // 141\n   * @param {string} registrationName Name of listener (e.g. `onClick`).                                               // 142\n   * @param {?function} listener The callback to store.                                                                // 143\n   */                                                                                                                  // 144\n  putListener: function (id, registrationName, listener) {                                                             // 145\n    !(typeof listener === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected %s listener to be a function, instead got type %s', registrationName, typeof listener) : invariant(false) : undefined;\n                                                                                                                       // 147\n    var bankForRegistrationName = listenerBank[registrationName] || (listenerBank[registrationName] = {});             // 148\n    bankForRegistrationName[id] = listener;                                                                            // 149\n                                                                                                                       // 150\n    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];                                  // 151\n    if (PluginModule && PluginModule.didPutListener) {                                                                 // 152\n      PluginModule.didPutListener(id, registrationName, listener);                                                     // 153\n    }                                                                                                                  // 154\n  },                                                                                                                   // 155\n                                                                                                                       // 156\n  /**                                                                                                                  // 157\n   * @param {string} id ID of the DOM element.                                                                         // 158\n   * @param {string} registrationName Name of listener (e.g. `onClick`).                                               // 159\n   * @return {?function} The stored callback.                                                                          // 160\n   */                                                                                                                  // 161\n  getListener: function (id, registrationName) {                                                                       // 162\n    var bankForRegistrationName = listenerBank[registrationName];                                                      // 163\n    return bankForRegistrationName && bankForRegistrationName[id];                                                     // 164\n  },                                                                                                                   // 165\n                                                                                                                       // 166\n  /**                                                                                                                  // 167\n   * Deletes a listener from the registration bank.                                                                    // 168\n   *                                                                                                                   // 169\n   * @param {string} id ID of the DOM element.                                                                         // 170\n   * @param {string} registrationName Name of listener (e.g. `onClick`).                                               // 171\n   */                                                                                                                  // 172\n  deleteListener: function (id, registrationName) {                                                                    // 173\n    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];                                  // 174\n    if (PluginModule && PluginModule.willDeleteListener) {                                                             // 175\n      PluginModule.willDeleteListener(id, registrationName);                                                           // 176\n    }                                                                                                                  // 177\n                                                                                                                       // 178\n    var bankForRegistrationName = listenerBank[registrationName];                                                      // 179\n    // TODO: This should never be null -- when is it?                                                                  // 180\n    if (bankForRegistrationName) {                                                                                     // 181\n      delete bankForRegistrationName[id];                                                                              // 182\n    }                                                                                                                  // 183\n  },                                                                                                                   // 184\n                                                                                                                       // 185\n  /**                                                                                                                  // 186\n   * Deletes all listeners for the DOM element with the supplied ID.                                                   // 187\n   *                                                                                                                   // 188\n   * @param {string} id ID of the DOM element.                                                                         // 189\n   */                                                                                                                  // 190\n  deleteAllListeners: function (id) {                                                                                  // 191\n    for (var registrationName in listenerBank) {                                                                       // 192\n      if (!listenerBank[registrationName][id]) {                                                                       // 193\n        continue;                                                                                                      // 194\n      }                                                                                                                // 195\n                                                                                                                       // 196\n      var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];                                // 197\n      if (PluginModule && PluginModule.willDeleteListener) {                                                           // 198\n        PluginModule.willDeleteListener(id, registrationName);                                                         // 199\n      }                                                                                                                // 200\n                                                                                                                       // 201\n      delete listenerBank[registrationName][id];                                                                       // 202\n    }                                                                                                                  // 203\n  },                                                                                                                   // 204\n                                                                                                                       // 205\n  /**                                                                                                                  // 206\n   * Allows registered plugins an opportunity to extract events from top-level                                         // 207\n   * native browser events.                                                                                            // 208\n   *                                                                                                                   // 209\n   * @param {string} topLevelType Record from `EventConstants`.                                                        // 210\n   * @param {DOMEventTarget} topLevelTarget The listening component root node.                                         // 211\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.                                                          // 212\n   * @param {object} nativeEvent Native browser event.                                                                 // 213\n   * @return {*} An accumulation of synthetic events.                                                                  // 214\n   * @internal                                                                                                         // 215\n   */                                                                                                                  // 216\n  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {           // 217\n    var events;                                                                                                        // 218\n    var plugins = EventPluginRegistry.plugins;                                                                         // 219\n    for (var i = 0; i < plugins.length; i++) {                                                                         // 220\n      // Not every plugin in the ordering may be loaded at runtime.                                                    // 221\n      var possiblePlugin = plugins[i];                                                                                 // 222\n      if (possiblePlugin) {                                                                                            // 223\n        var extractedEvents = possiblePlugin.extractEvents(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget);\n        if (extractedEvents) {                                                                                         // 225\n          events = accumulateInto(events, extractedEvents);                                                            // 226\n        }                                                                                                              // 227\n      }                                                                                                                // 228\n    }                                                                                                                  // 229\n    return events;                                                                                                     // 230\n  },                                                                                                                   // 231\n                                                                                                                       // 232\n  /**                                                                                                                  // 233\n   * Enqueues a synthetic event that should be dispatched when                                                         // 234\n   * `processEventQueue` is invoked.                                                                                   // 235\n   *                                                                                                                   // 236\n   * @param {*} events An accumulation of synthetic events.                                                            // 237\n   * @internal                                                                                                         // 238\n   */                                                                                                                  // 239\n  enqueueEvents: function (events) {                                                                                   // 240\n    if (events) {                                                                                                      // 241\n      eventQueue = accumulateInto(eventQueue, events);                                                                 // 242\n    }                                                                                                                  // 243\n  },                                                                                                                   // 244\n                                                                                                                       // 245\n  /**                                                                                                                  // 246\n   * Dispatches all synthetic events on the event queue.                                                               // 247\n   *                                                                                                                   // 248\n   * @internal                                                                                                         // 249\n   */                                                                                                                  // 250\n  processEventQueue: function (simulated) {                                                                            // 251\n    // Set `eventQueue` to null before processing it so that we can tell if more                                       // 252\n    // events get enqueued while processing.                                                                           // 253\n    var processingEventQueue = eventQueue;                                                                             // 254\n    eventQueue = null;                                                                                                 // 255\n    if (simulated) {                                                                                                   // 256\n      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);                                  // 257\n    } else {                                                                                                           // 258\n      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);                                   // 259\n    }                                                                                                                  // 260\n    !!eventQueue ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing ' + 'an event queue. Support for this has not yet been implemented.') : invariant(false) : undefined;\n    // This would be a good time to rethrow if any of the event handlers threw.                                        // 262\n    ReactErrorUtils.rethrowCaughtError();                                                                              // 263\n  },                                                                                                                   // 264\n                                                                                                                       // 265\n  /**                                                                                                                  // 266\n   * These are needed for tests only. Do not use!                                                                      // 267\n   */                                                                                                                  // 268\n  __purge: function () {                                                                                               // 269\n    listenerBank = {};                                                                                                 // 270\n  },                                                                                                                   // 271\n                                                                                                                       // 272\n  __getListenerBank: function () {                                                                                     // 273\n    return listenerBank;                                                                                               // 274\n  }                                                                                                                    // 275\n                                                                                                                       // 276\n};                                                                                                                     // 277\n                                                                                                                       // 278\nmodule.exports = EventPluginHub;                                                                                       // 279\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"EventPluginRegistry.js\":[\"fbjs/lib/invariant\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/EventPluginRegistry.js                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule EventPluginRegistry                                                                                 // 9\n * @typechecks static-only                                                                                             // 10\n */                                                                                                                    // 11\n                                                                                                                       // 12\n'use strict';                                                                                                          // 13\n                                                                                                                       // 14\nvar invariant = require('fbjs/lib/invariant');                                                                         // 15\n                                                                                                                       // 16\n/**                                                                                                                    // 17\n * Injectable ordering of event plugins.                                                                               // 18\n */                                                                                                                    // 19\nvar EventPluginOrder = null;                                                                                           // 20\n                                                                                                                       // 21\n/**                                                                                                                    // 22\n * Injectable mapping from names to event plugin modules.                                                              // 23\n */                                                                                                                    // 24\nvar namesToPlugins = {};                                                                                               // 25\n                                                                                                                       // 26\n/**                                                                                                                    // 27\n * Recomputes the plugin list using the injected plugins and plugin ordering.                                          // 28\n *                                                                                                                     // 29\n * @private                                                                                                            // 30\n */                                                                                                                    // 31\nfunction recomputePluginOrdering() {                                                                                   // 32\n  if (!EventPluginOrder) {                                                                                             // 33\n    // Wait until an `EventPluginOrder` is injected.                                                                   // 34\n    return;                                                                                                            // 35\n  }                                                                                                                    // 36\n  for (var pluginName in namesToPlugins) {                                                                             // 37\n    var PluginModule = namesToPlugins[pluginName];                                                                     // 38\n    var pluginIndex = EventPluginOrder.indexOf(pluginName);                                                            // 39\n    !(pluginIndex > -1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in ' + 'the plugin ordering, `%s`.', pluginName) : invariant(false) : undefined;\n    if (EventPluginRegistry.plugins[pluginIndex]) {                                                                    // 41\n      continue;                                                                                                        // 42\n    }                                                                                                                  // 43\n    !PluginModule.extractEvents ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` ' + 'method, but `%s` does not.', pluginName) : invariant(false) : undefined;\n    EventPluginRegistry.plugins[pluginIndex] = PluginModule;                                                           // 45\n    var publishedEvents = PluginModule.eventTypes;                                                                     // 46\n    for (var eventName in publishedEvents) {                                                                           // 47\n      !publishEventForPlugin(publishedEvents[eventName], PluginModule, eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : invariant(false) : undefined;\n    }                                                                                                                  // 49\n  }                                                                                                                    // 50\n}                                                                                                                      // 51\n                                                                                                                       // 52\n/**                                                                                                                    // 53\n * Publishes an event so that it can be dispatched by the supplied plugin.                                             // 54\n *                                                                                                                     // 55\n * @param {object} dispatchConfig Dispatch configuration for the event.                                                // 56\n * @param {object} PluginModule Plugin publishing the event.                                                           // 57\n * @return {boolean} True if the event was successfully published.                                                     // 58\n * @private                                                                                                            // 59\n */                                                                                                                    // 60\nfunction publishEventForPlugin(dispatchConfig, PluginModule, eventName) {                                              // 61\n  !!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same ' + 'event name, `%s`.', eventName) : invariant(false) : undefined;\n  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;                                            // 63\n                                                                                                                       // 64\n  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;                                                // 65\n  if (phasedRegistrationNames) {                                                                                       // 66\n    for (var phaseName in phasedRegistrationNames) {                                                                   // 67\n      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {                                                         // 68\n        var phasedRegistrationName = phasedRegistrationNames[phaseName];                                               // 69\n        publishRegistrationName(phasedRegistrationName, PluginModule, eventName);                                      // 70\n      }                                                                                                                // 71\n    }                                                                                                                  // 72\n    return true;                                                                                                       // 73\n  } else if (dispatchConfig.registrationName) {                                                                        // 74\n    publishRegistrationName(dispatchConfig.registrationName, PluginModule, eventName);                                 // 75\n    return true;                                                                                                       // 76\n  }                                                                                                                    // 77\n  return false;                                                                                                        // 78\n}                                                                                                                      // 79\n                                                                                                                       // 80\n/**                                                                                                                    // 81\n * Publishes a registration name that is used to identify dispatched events and                                        // 82\n * can be used with `EventPluginHub.putListener` to register listeners.                                                // 83\n *                                                                                                                     // 84\n * @param {string} registrationName Registration name to add.                                                          // 85\n * @param {object} PluginModule Plugin publishing the event.                                                           // 86\n * @private                                                                                                            // 87\n */                                                                                                                    // 88\nfunction publishRegistrationName(registrationName, PluginModule, eventName) {                                          // 89\n  !!EventPluginRegistry.registrationNameModules[registrationName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same ' + 'registration name, `%s`.', registrationName) : invariant(false) : undefined;\n  EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;                                        // 91\n  EventPluginRegistry.registrationNameDependencies[registrationName] = PluginModule.eventTypes[eventName].dependencies;\n}                                                                                                                      // 93\n                                                                                                                       // 94\n/**                                                                                                                    // 95\n * Registers plugins so that they can extract and dispatch events.                                                     // 96\n *                                                                                                                     // 97\n * @see {EventPluginHub}                                                                                               // 98\n */                                                                                                                    // 99\nvar EventPluginRegistry = {                                                                                            // 100\n                                                                                                                       // 101\n  /**                                                                                                                  // 102\n   * Ordered list of injected plugins.                                                                                 // 103\n   */                                                                                                                  // 104\n  plugins: [],                                                                                                         // 105\n                                                                                                                       // 106\n  /**                                                                                                                  // 107\n   * Mapping from event name to dispatch config                                                                        // 108\n   */                                                                                                                  // 109\n  eventNameDispatchConfigs: {},                                                                                        // 110\n                                                                                                                       // 111\n  /**                                                                                                                  // 112\n   * Mapping from registration name to plugin module                                                                   // 113\n   */                                                                                                                  // 114\n  registrationNameModules: {},                                                                                         // 115\n                                                                                                                       // 116\n  /**                                                                                                                  // 117\n   * Mapping from registration name to event name                                                                      // 118\n   */                                                                                                                  // 119\n  registrationNameDependencies: {},                                                                                    // 120\n                                                                                                                       // 121\n  /**                                                                                                                  // 122\n   * Injects an ordering of plugins (by plugin name). This allows the ordering                                         // 123\n   * to be decoupled from injection of the actual plugins so that ordering is                                          // 124\n   * always deterministic regardless of packaging, on-the-fly injection, etc.                                          // 125\n   *                                                                                                                   // 126\n   * @param {array} InjectedEventPluginOrder                                                                           // 127\n   * @internal                                                                                                         // 128\n   * @see {EventPluginHub.injection.injectEventPluginOrder}                                                            // 129\n   */                                                                                                                  // 130\n  injectEventPluginOrder: function (InjectedEventPluginOrder) {                                                        // 131\n    !!EventPluginOrder ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than ' + 'once. You are likely trying to load more than one copy of React.') : invariant(false) : undefined;\n    // Clone the ordering so it cannot be dynamically mutated.                                                         // 133\n    EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);                                           // 134\n    recomputePluginOrdering();                                                                                         // 135\n  },                                                                                                                   // 136\n                                                                                                                       // 137\n  /**                                                                                                                  // 138\n   * Injects plugins to be used by `EventPluginHub`. The plugin names must be                                          // 139\n   * in the ordering injected by `injectEventPluginOrder`.                                                             // 140\n   *                                                                                                                   // 141\n   * Plugins can be injected as part of page initialization or on-the-fly.                                             // 142\n   *                                                                                                                   // 143\n   * @param {object} injectedNamesToPlugins Map from names to plugin modules.                                          // 144\n   * @internal                                                                                                         // 145\n   * @see {EventPluginHub.injection.injectEventPluginsByName}                                                          // 146\n   */                                                                                                                  // 147\n  injectEventPluginsByName: function (injectedNamesToPlugins) {                                                        // 148\n    var isOrderingDirty = false;                                                                                       // 149\n    for (var pluginName in injectedNamesToPlugins) {                                                                   // 150\n      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {                                                        // 151\n        continue;                                                                                                      // 152\n      }                                                                                                                // 153\n      var PluginModule = injectedNamesToPlugins[pluginName];                                                           // 154\n      if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== PluginModule) {                 // 155\n        !!namesToPlugins[pluginName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins ' + 'using the same name, `%s`.', pluginName) : invariant(false) : undefined;\n        namesToPlugins[pluginName] = PluginModule;                                                                     // 157\n        isOrderingDirty = true;                                                                                        // 158\n      }                                                                                                                // 159\n    }                                                                                                                  // 160\n    if (isOrderingDirty) {                                                                                             // 161\n      recomputePluginOrdering();                                                                                       // 162\n    }                                                                                                                  // 163\n  },                                                                                                                   // 164\n                                                                                                                       // 165\n  /**                                                                                                                  // 166\n   * Looks up the plugin for the supplied event.                                                                       // 167\n   *                                                                                                                   // 168\n   * @param {object} event A synthetic event.                                                                          // 169\n   * @return {?object} The plugin that created the supplied event.                                                     // 170\n   * @internal                                                                                                         // 171\n   */                                                                                                                  // 172\n  getPluginModuleForEvent: function (event) {                                                                          // 173\n    var dispatchConfig = event.dispatchConfig;                                                                         // 174\n    if (dispatchConfig.registrationName) {                                                                             // 175\n      return EventPluginRegistry.registrationNameModules[dispatchConfig.registrationName] || null;                     // 176\n    }                                                                                                                  // 177\n    for (var phase in dispatchConfig.phasedRegistrationNames) {                                                        // 178\n      if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {                                             // 179\n        continue;                                                                                                      // 180\n      }                                                                                                                // 181\n      var PluginModule = EventPluginRegistry.registrationNameModules[dispatchConfig.phasedRegistrationNames[phase]];   // 182\n      if (PluginModule) {                                                                                              // 183\n        return PluginModule;                                                                                           // 184\n      }                                                                                                                // 185\n    }                                                                                                                  // 186\n    return null;                                                                                                       // 187\n  },                                                                                                                   // 188\n                                                                                                                       // 189\n  /**                                                                                                                  // 190\n   * Exposed for unit testing.                                                                                         // 191\n   * @private                                                                                                          // 192\n   */                                                                                                                  // 193\n  _resetEventPlugins: function () {                                                                                    // 194\n    EventPluginOrder = null;                                                                                           // 195\n    for (var pluginName in namesToPlugins) {                                                                           // 196\n      if (namesToPlugins.hasOwnProperty(pluginName)) {                                                                 // 197\n        delete namesToPlugins[pluginName];                                                                             // 198\n      }                                                                                                                // 199\n    }                                                                                                                  // 200\n    EventPluginRegistry.plugins.length = 0;                                                                            // 201\n                                                                                                                       // 202\n    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;                                       // 203\n    for (var eventName in eventNameDispatchConfigs) {                                                                  // 204\n      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {                                                        // 205\n        delete eventNameDispatchConfigs[eventName];                                                                    // 206\n      }                                                                                                                // 207\n    }                                                                                                                  // 208\n                                                                                                                       // 209\n    var registrationNameModules = EventPluginRegistry.registrationNameModules;                                         // 210\n    for (var registrationName in registrationNameModules) {                                                            // 211\n      if (registrationNameModules.hasOwnProperty(registrationName)) {                                                  // 212\n        delete registrationNameModules[registrationName];                                                              // 213\n      }                                                                                                                // 214\n    }                                                                                                                  // 215\n  }                                                                                                                    // 216\n                                                                                                                       // 217\n};                                                                                                                     // 218\n                                                                                                                       // 219\nmodule.exports = EventPluginRegistry;                                                                                  // 220\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"EventPluginUtils.js\":[\"./EventConstants\",\"./ReactErrorUtils\",\"fbjs/lib/invariant\",\"fbjs/lib/warning\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/EventPluginUtils.js                                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule EventPluginUtils                                                                                    // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar EventConstants = require('./EventConstants');                                                                      // 14\nvar ReactErrorUtils = require('./ReactErrorUtils');                                                                    // 15\n                                                                                                                       // 16\nvar invariant = require('fbjs/lib/invariant');                                                                         // 17\nvar warning = require('fbjs/lib/warning');                                                                             // 18\n                                                                                                                       // 19\n/**                                                                                                                    // 20\n * Injected dependencies:                                                                                              // 21\n */                                                                                                                    // 22\n                                                                                                                       // 23\n/**                                                                                                                    // 24\n * - `Mount`: [required] Module that can convert between React dom IDs and                                             // 25\n *   actual node references.                                                                                           // 26\n */                                                                                                                    // 27\nvar injection = {                                                                                                      // 28\n  Mount: null,                                                                                                         // 29\n  injectMount: function (InjectedMount) {                                                                              // 30\n    injection.Mount = InjectedMount;                                                                                   // 31\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 32\n      process.env.NODE_ENV !== 'production' ? warning(InjectedMount && InjectedMount.getNode && InjectedMount.getID, 'EventPluginUtils.injection.injectMount(...): Injected Mount ' + 'module is missing getNode or getID.') : undefined;\n    }                                                                                                                  // 34\n  }                                                                                                                    // 35\n};                                                                                                                     // 36\n                                                                                                                       // 37\nvar topLevelTypes = EventConstants.topLevelTypes;                                                                      // 38\n                                                                                                                       // 39\nfunction isEndish(topLevelType) {                                                                                      // 40\n  return topLevelType === topLevelTypes.topMouseUp || topLevelType === topLevelTypes.topTouchEnd || topLevelType === topLevelTypes.topTouchCancel;\n}                                                                                                                      // 42\n                                                                                                                       // 43\nfunction isMoveish(topLevelType) {                                                                                     // 44\n  return topLevelType === topLevelTypes.topMouseMove || topLevelType === topLevelTypes.topTouchMove;                   // 45\n}                                                                                                                      // 46\nfunction isStartish(topLevelType) {                                                                                    // 47\n  return topLevelType === topLevelTypes.topMouseDown || topLevelType === topLevelTypes.topTouchStart;                  // 48\n}                                                                                                                      // 49\n                                                                                                                       // 50\nvar validateEventDispatches;                                                                                           // 51\nif (process.env.NODE_ENV !== 'production') {                                                                           // 52\n  validateEventDispatches = function (event) {                                                                         // 53\n    var dispatchListeners = event._dispatchListeners;                                                                  // 54\n    var dispatchIDs = event._dispatchIDs;                                                                              // 55\n                                                                                                                       // 56\n    var listenersIsArr = Array.isArray(dispatchListeners);                                                             // 57\n    var idsIsArr = Array.isArray(dispatchIDs);                                                                         // 58\n    var IDsLen = idsIsArr ? dispatchIDs.length : dispatchIDs ? 1 : 0;                                                  // 59\n    var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;                          // 60\n                                                                                                                       // 61\n    process.env.NODE_ENV !== 'production' ? warning(idsIsArr === listenersIsArr && IDsLen === listenersLen, 'EventPluginUtils: Invalid `event`.') : undefined;\n  };                                                                                                                   // 63\n}                                                                                                                      // 64\n                                                                                                                       // 65\n/**                                                                                                                    // 66\n * Dispatch the event to the listener.                                                                                 // 67\n * @param {SyntheticEvent} event SyntheticEvent to handle                                                              // 68\n * @param {boolean} simulated If the event is simulated (changes exn behavior)                                         // 69\n * @param {function} listener Application-level callback                                                               // 70\n * @param {string} domID DOM id to pass to the callback.                                                               // 71\n */                                                                                                                    // 72\nfunction executeDispatch(event, simulated, listener, domID) {                                                          // 73\n  var type = event.type || 'unknown-event';                                                                            // 74\n  event.currentTarget = injection.Mount.getNode(domID);                                                                // 75\n  if (simulated) {                                                                                                     // 76\n    ReactErrorUtils.invokeGuardedCallbackWithCatch(type, listener, event, domID);                                      // 77\n  } else {                                                                                                             // 78\n    ReactErrorUtils.invokeGuardedCallback(type, listener, event, domID);                                               // 79\n  }                                                                                                                    // 80\n  event.currentTarget = null;                                                                                          // 81\n}                                                                                                                      // 82\n                                                                                                                       // 83\n/**                                                                                                                    // 84\n * Standard/simple iteration through an event's collected dispatches.                                                  // 85\n */                                                                                                                    // 86\nfunction executeDispatchesInOrder(event, simulated) {                                                                  // 87\n  var dispatchListeners = event._dispatchListeners;                                                                    // 88\n  var dispatchIDs = event._dispatchIDs;                                                                                // 89\n  if (process.env.NODE_ENV !== 'production') {                                                                         // 90\n    validateEventDispatches(event);                                                                                    // 91\n  }                                                                                                                    // 92\n  if (Array.isArray(dispatchListeners)) {                                                                              // 93\n    for (var i = 0; i < dispatchListeners.length; i++) {                                                               // 94\n      if (event.isPropagationStopped()) {                                                                              // 95\n        break;                                                                                                         // 96\n      }                                                                                                                // 97\n      // Listeners and IDs are two parallel arrays that are always in sync.                                            // 98\n      executeDispatch(event, simulated, dispatchListeners[i], dispatchIDs[i]);                                         // 99\n    }                                                                                                                  // 100\n  } else if (dispatchListeners) {                                                                                      // 101\n    executeDispatch(event, simulated, dispatchListeners, dispatchIDs);                                                 // 102\n  }                                                                                                                    // 103\n  event._dispatchListeners = null;                                                                                     // 104\n  event._dispatchIDs = null;                                                                                           // 105\n}                                                                                                                      // 106\n                                                                                                                       // 107\n/**                                                                                                                    // 108\n * Standard/simple iteration through an event's collected dispatches, but stops                                        // 109\n * at the first dispatch execution returning true, and returns that id.                                                // 110\n *                                                                                                                     // 111\n * @return {?string} id of the first dispatch execution who's listener returns                                         // 112\n * true, or null if no listener returned true.                                                                         // 113\n */                                                                                                                    // 114\nfunction executeDispatchesInOrderStopAtTrueImpl(event) {                                                               // 115\n  var dispatchListeners = event._dispatchListeners;                                                                    // 116\n  var dispatchIDs = event._dispatchIDs;                                                                                // 117\n  if (process.env.NODE_ENV !== 'production') {                                                                         // 118\n    validateEventDispatches(event);                                                                                    // 119\n  }                                                                                                                    // 120\n  if (Array.isArray(dispatchListeners)) {                                                                              // 121\n    for (var i = 0; i < dispatchListeners.length; i++) {                                                               // 122\n      if (event.isPropagationStopped()) {                                                                              // 123\n        break;                                                                                                         // 124\n      }                                                                                                                // 125\n      // Listeners and IDs are two parallel arrays that are always in sync.                                            // 126\n      if (dispatchListeners[i](event, dispatchIDs[i])) {                                                               // 127\n        return dispatchIDs[i];                                                                                         // 128\n      }                                                                                                                // 129\n    }                                                                                                                  // 130\n  } else if (dispatchListeners) {                                                                                      // 131\n    if (dispatchListeners(event, dispatchIDs)) {                                                                       // 132\n      return dispatchIDs;                                                                                              // 133\n    }                                                                                                                  // 134\n  }                                                                                                                    // 135\n  return null;                                                                                                         // 136\n}                                                                                                                      // 137\n                                                                                                                       // 138\n/**                                                                                                                    // 139\n * @see executeDispatchesInOrderStopAtTrueImpl                                                                         // 140\n */                                                                                                                    // 141\nfunction executeDispatchesInOrderStopAtTrue(event) {                                                                   // 142\n  var ret = executeDispatchesInOrderStopAtTrueImpl(event);                                                             // 143\n  event._dispatchIDs = null;                                                                                           // 144\n  event._dispatchListeners = null;                                                                                     // 145\n  return ret;                                                                                                          // 146\n}                                                                                                                      // 147\n                                                                                                                       // 148\n/**                                                                                                                    // 149\n * Execution of a \"direct\" dispatch - there must be at most one dispatch                                               // 150\n * accumulated on the event or it is considered an error. It doesn't really make                                       // 151\n * sense for an event with multiple dispatches (bubbled) to keep track of the                                          // 152\n * return values at each dispatch execution, but it does tend to make sense when                                       // 153\n * dealing with \"direct\" dispatches.                                                                                   // 154\n *                                                                                                                     // 155\n * @return {*} The return value of executing the single dispatch.                                                      // 156\n */                                                                                                                    // 157\nfunction executeDirectDispatch(event) {                                                                                // 158\n  if (process.env.NODE_ENV !== 'production') {                                                                         // 159\n    validateEventDispatches(event);                                                                                    // 160\n  }                                                                                                                    // 161\n  var dispatchListener = event._dispatchListeners;                                                                     // 162\n  var dispatchID = event._dispatchIDs;                                                                                 // 163\n  !!Array.isArray(dispatchListener) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'executeDirectDispatch(...): Invalid `event`.') : invariant(false) : undefined;\n  var res = dispatchListener ? dispatchListener(event, dispatchID) : null;                                             // 165\n  event._dispatchListeners = null;                                                                                     // 166\n  event._dispatchIDs = null;                                                                                           // 167\n  return res;                                                                                                          // 168\n}                                                                                                                      // 169\n                                                                                                                       // 170\n/**                                                                                                                    // 171\n * @param {SyntheticEvent} event                                                                                       // 172\n * @return {boolean} True iff number of dispatches accumulated is greater than 0.                                      // 173\n */                                                                                                                    // 174\nfunction hasDispatches(event) {                                                                                        // 175\n  return !!event._dispatchListeners;                                                                                   // 176\n}                                                                                                                      // 177\n                                                                                                                       // 178\n/**                                                                                                                    // 179\n * General utilities that are useful in creating custom Event Plugins.                                                 // 180\n */                                                                                                                    // 181\nvar EventPluginUtils = {                                                                                               // 182\n  isEndish: isEndish,                                                                                                  // 183\n  isMoveish: isMoveish,                                                                                                // 184\n  isStartish: isStartish,                                                                                              // 185\n                                                                                                                       // 186\n  executeDirectDispatch: executeDirectDispatch,                                                                        // 187\n  executeDispatchesInOrder: executeDispatchesInOrder,                                                                  // 188\n  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,                                              // 189\n  hasDispatches: hasDispatches,                                                                                        // 190\n                                                                                                                       // 191\n  getNode: function (id) {                                                                                             // 192\n    return injection.Mount.getNode(id);                                                                                // 193\n  },                                                                                                                   // 194\n  getID: function (node) {                                                                                             // 195\n    return injection.Mount.getID(node);                                                                                // 196\n  },                                                                                                                   // 197\n                                                                                                                       // 198\n  injection: injection                                                                                                 // 199\n};                                                                                                                     // 200\n                                                                                                                       // 201\nmodule.exports = EventPluginUtils;                                                                                     // 202\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactErrorUtils.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactErrorUtils.js                                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactErrorUtils                                                                                     // 9\n * @typechecks                                                                                                         // 10\n */                                                                                                                    // 11\n                                                                                                                       // 12\n'use strict';                                                                                                          // 13\n                                                                                                                       // 14\nvar caughtError = null;                                                                                                // 15\n                                                                                                                       // 16\n/**                                                                                                                    // 17\n * Call a function while guarding against errors that happens within it.                                               // 18\n *                                                                                                                     // 19\n * @param {?String} name of the guard to use for logging or debugging                                                  // 20\n * @param {Function} func The function to invoke                                                                       // 21\n * @param {*} a First argument                                                                                         // 22\n * @param {*} b Second argument                                                                                        // 23\n */                                                                                                                    // 24\nfunction invokeGuardedCallback(name, func, a, b) {                                                                     // 25\n  try {                                                                                                                // 26\n    return func(a, b);                                                                                                 // 27\n  } catch (x) {                                                                                                        // 28\n    if (caughtError === null) {                                                                                        // 29\n      caughtError = x;                                                                                                 // 30\n    }                                                                                                                  // 31\n    return undefined;                                                                                                  // 32\n  }                                                                                                                    // 33\n}                                                                                                                      // 34\n                                                                                                                       // 35\nvar ReactErrorUtils = {                                                                                                // 36\n  invokeGuardedCallback: invokeGuardedCallback,                                                                        // 37\n                                                                                                                       // 38\n  /**                                                                                                                  // 39\n   * Invoked by ReactTestUtils.Simulate so that any errors thrown by the event                                         // 40\n   * handler are sure to be rethrown by rethrowCaughtError.                                                            // 41\n   */                                                                                                                  // 42\n  invokeGuardedCallbackWithCatch: invokeGuardedCallback,                                                               // 43\n                                                                                                                       // 44\n  /**                                                                                                                  // 45\n   * During execution of guarded functions we will capture the first error which                                       // 46\n   * we will rethrow to be handled by the top level error handler.                                                     // 47\n   */                                                                                                                  // 48\n  rethrowCaughtError: function () {                                                                                    // 49\n    if (caughtError) {                                                                                                 // 50\n      var error = caughtError;                                                                                         // 51\n      caughtError = null;                                                                                              // 52\n      throw error;                                                                                                     // 53\n    }                                                                                                                  // 54\n  }                                                                                                                    // 55\n};                                                                                                                     // 56\n                                                                                                                       // 57\nif (process.env.NODE_ENV !== 'production') {                                                                           // 58\n  /**                                                                                                                  // 59\n   * To help development we can get better devtools integration by simulating a                                        // 60\n   * real browser event.                                                                                               // 61\n   */                                                                                                                  // 62\n  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {\n    var fakeNode = document.createElement('react');                                                                    // 64\n    ReactErrorUtils.invokeGuardedCallback = function (name, func, a, b) {                                              // 65\n      var boundFunc = func.bind(null, a, b);                                                                           // 66\n      var evtType = 'react-' + name;                                                                                   // 67\n      fakeNode.addEventListener(evtType, boundFunc, false);                                                            // 68\n      var evt = document.createEvent('Event');                                                                         // 69\n      evt.initEvent(evtType, false, false);                                                                            // 70\n      fakeNode.dispatchEvent(evt);                                                                                     // 71\n      fakeNode.removeEventListener(evtType, boundFunc, false);                                                         // 72\n    };                                                                                                                 // 73\n  }                                                                                                                    // 74\n}                                                                                                                      // 75\n                                                                                                                       // 76\nmodule.exports = ReactErrorUtils;                                                                                      // 77\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"accumulateInto.js\":[\"fbjs/lib/invariant\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/accumulateInto.js                                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2014-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule accumulateInto                                                                                      // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar invariant = require('fbjs/lib/invariant');                                                                         // 14\n                                                                                                                       // 15\n/**                                                                                                                    // 16\n *                                                                                                                     // 17\n * Accumulates items that must not be null or undefined into the first one. This                                       // 18\n * is used to conserve memory by avoiding array allocations, and thus sacrifices                                       // 19\n * API cleanness. Since `current` can be null before being passed in and not                                           // 20\n * null after this function, make sure to assign it back to `current`:                                                 // 21\n *                                                                                                                     // 22\n * `a = accumulateInto(a, b);`                                                                                         // 23\n *                                                                                                                     // 24\n * This API should be sparingly used. Try `accumulate` for something cleaner.                                          // 25\n *                                                                                                                     // 26\n * @return {*|array<*>} An accumulation of items.                                                                      // 27\n */                                                                                                                    // 28\n                                                                                                                       // 29\nfunction accumulateInto(current, next) {                                                                               // 30\n  !(next != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : invariant(false) : undefined;\n  if (current == null) {                                                                                               // 32\n    return next;                                                                                                       // 33\n  }                                                                                                                    // 34\n                                                                                                                       // 35\n  // Both are not empty. Warning: Never call x.concat(y) when you are not                                              // 36\n  // certain that x is an Array (x could be a string with concat method).                                              // 37\n  var currentIsArray = Array.isArray(current);                                                                         // 38\n  var nextIsArray = Array.isArray(next);                                                                               // 39\n                                                                                                                       // 40\n  if (currentIsArray && nextIsArray) {                                                                                 // 41\n    current.push.apply(current, next);                                                                                 // 42\n    return current;                                                                                                    // 43\n  }                                                                                                                    // 44\n                                                                                                                       // 45\n  if (currentIsArray) {                                                                                                // 46\n    current.push(next);                                                                                                // 47\n    return current;                                                                                                    // 48\n  }                                                                                                                    // 49\n                                                                                                                       // 50\n  if (nextIsArray) {                                                                                                   // 51\n    // A bit too dangerous to mutate `next`.                                                                           // 52\n    return [current].concat(next);                                                                                     // 53\n  }                                                                                                                    // 54\n                                                                                                                       // 55\n  return [current, next];                                                                                              // 56\n}                                                                                                                      // 57\n                                                                                                                       // 58\nmodule.exports = accumulateInto;                                                                                       // 59\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"forEachAccumulated.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/forEachAccumulated.js                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule forEachAccumulated                                                                                  // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\n/**                                                                                                                    // 14\n * @param {array} arr an \"accumulation\" of items which is either an Array or                                           // 15\n * a single item. Useful when paired with the `accumulate` module. This is a                                           // 16\n * simple utility that allows us to reason about a collection of items, but                                            // 17\n * handling the case when there is exactly one item (and we do not need to                                             // 18\n * allocate an array).                                                                                                 // 19\n */                                                                                                                    // 20\nvar forEachAccumulated = function (arr, cb, scope) {                                                                   // 21\n  if (Array.isArray(arr)) {                                                                                            // 22\n    arr.forEach(cb, scope);                                                                                            // 23\n  } else if (arr) {                                                                                                    // 24\n    cb.call(scope, arr);                                                                                               // 25\n  }                                                                                                                    // 26\n};                                                                                                                     // 27\n                                                                                                                       // 28\nmodule.exports = forEachAccumulated;                                                                                   // 29\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ReactEventEmitterMixin.js\":[\"./EventPluginHub\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactEventEmitterMixin.js                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactEventEmitterMixin                                                                              // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar EventPluginHub = require('./EventPluginHub');                                                                      // 14\n                                                                                                                       // 15\nfunction runEventQueueInBatch(events) {                                                                                // 16\n  EventPluginHub.enqueueEvents(events);                                                                                // 17\n  EventPluginHub.processEventQueue(false);                                                                             // 18\n}                                                                                                                      // 19\n                                                                                                                       // 20\nvar ReactEventEmitterMixin = {                                                                                         // 21\n                                                                                                                       // 22\n  /**                                                                                                                  // 23\n   * Streams a fired top-level event to `EventPluginHub` where plugins have the                                        // 24\n   * opportunity to create `ReactEvent`s to be dispatched.                                                             // 25\n   *                                                                                                                   // 26\n   * @param {string} topLevelType Record from `EventConstants`.                                                        // 27\n   * @param {object} topLevelTarget The listening component root node.                                                 // 28\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.                                                          // 29\n   * @param {object} nativeEvent Native environment event.                                                             // 30\n   */                                                                                                                  // 31\n  handleTopLevel: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {          // 32\n    var events = EventPluginHub.extractEvents(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget);\n    runEventQueueInBatch(events);                                                                                      // 34\n  }                                                                                                                    // 35\n};                                                                                                                     // 36\n                                                                                                                       // 37\nmodule.exports = ReactEventEmitterMixin;                                                                               // 38\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ViewportMetrics.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ViewportMetrics.js                                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ViewportMetrics                                                                                     // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar ViewportMetrics = {                                                                                                // 14\n                                                                                                                       // 15\n  currentScrollLeft: 0,                                                                                                // 16\n                                                                                                                       // 17\n  currentScrollTop: 0,                                                                                                 // 18\n                                                                                                                       // 19\n  refreshScrollValues: function (scrollPosition) {                                                                     // 20\n    ViewportMetrics.currentScrollLeft = scrollPosition.x;                                                              // 21\n    ViewportMetrics.currentScrollTop = scrollPosition.y;                                                               // 22\n  }                                                                                                                    // 23\n                                                                                                                       // 24\n};                                                                                                                     // 25\n                                                                                                                       // 26\nmodule.exports = ViewportMetrics;                                                                                      // 27\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"Object.assign.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/Object.assign.js                                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2014-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule Object.assign                                                                                       // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign                                             // 12\n                                                                                                                       // 13\n'use strict';                                                                                                          // 14\n                                                                                                                       // 15\nfunction assign(target, sources) {                                                                                     // 16\n  if (target == null) {                                                                                                // 17\n    throw new TypeError('Object.assign target cannot be null or undefined');                                           // 18\n  }                                                                                                                    // 19\n                                                                                                                       // 20\n  var to = Object(target);                                                                                             // 21\n  var hasOwnProperty = Object.prototype.hasOwnProperty;                                                                // 22\n                                                                                                                       // 23\n  for (var nextIndex = 1; nextIndex < arguments.length; nextIndex++) {                                                 // 24\n    var nextSource = arguments[nextIndex];                                                                             // 25\n    if (nextSource == null) {                                                                                          // 26\n      continue;                                                                                                        // 27\n    }                                                                                                                  // 28\n                                                                                                                       // 29\n    var from = Object(nextSource);                                                                                     // 30\n                                                                                                                       // 31\n    // We don't currently support accessors nor proxies. Therefore this                                                // 32\n    // copy cannot throw. If we ever supported this then we must handle                                                // 33\n    // exceptions and side-effects. We don't support symbols so they won't                                             // 34\n    // be transferred.                                                                                                 // 35\n                                                                                                                       // 36\n    for (var key in from) {                                                                                            // 37\n      if (hasOwnProperty.call(from, key)) {                                                                            // 38\n        to[key] = from[key];                                                                                           // 39\n      }                                                                                                                // 40\n    }                                                                                                                  // 41\n  }                                                                                                                    // 42\n                                                                                                                       // 43\n  return to;                                                                                                           // 44\n}                                                                                                                      // 45\n                                                                                                                       // 46\nmodule.exports = assign;                                                                                               // 47\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"isEventSupported.js\":[\"fbjs/lib/ExecutionEnvironment\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/isEventSupported.js                                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule isEventSupported                                                                                    // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');                                                   // 14\n                                                                                                                       // 15\nvar useHasFeature;                                                                                                     // 16\nif (ExecutionEnvironment.canUseDOM) {                                                                                  // 17\n  useHasFeature = document.implementation && document.implementation.hasFeature &&                                     // 18\n  // always returns true in newer browsers as per the standard.                                                        // 19\n  // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature                                                 // 20\n  document.implementation.hasFeature('', '') !== true;                                                                 // 21\n}                                                                                                                      // 22\n                                                                                                                       // 23\n/**                                                                                                                    // 24\n * Checks if an event is supported in the current execution environment.                                               // 25\n *                                                                                                                     // 26\n * NOTE: This will not work correctly for non-generic events such as `change`,                                         // 27\n * `reset`, `load`, `error`, and `select`.                                                                             // 28\n *                                                                                                                     // 29\n * Borrows from Modernizr.                                                                                             // 30\n *                                                                                                                     // 31\n * @param {string} eventNameSuffix Event name, e.g. \"click\".                                                           // 32\n * @param {?boolean} capture Check if the capture phase is supported.                                                  // 33\n * @return {boolean} True if the event is supported.                                                                   // 34\n * @internal                                                                                                           // 35\n * @license Modernizr 3.0.0pre (Custom Build) | MIT                                                                    // 36\n */                                                                                                                    // 37\nfunction isEventSupported(eventNameSuffix, capture) {                                                                  // 38\n  if (!ExecutionEnvironment.canUseDOM || capture && !('addEventListener' in document)) {                               // 39\n    return false;                                                                                                      // 40\n  }                                                                                                                    // 41\n                                                                                                                       // 42\n  var eventName = 'on' + eventNameSuffix;                                                                              // 43\n  var isSupported = (eventName in document);                                                                           // 44\n                                                                                                                       // 45\n  if (!isSupported) {                                                                                                  // 46\n    var element = document.createElement('div');                                                                       // 47\n    element.setAttribute(eventName, 'return;');                                                                        // 48\n    isSupported = typeof element[eventName] === 'function';                                                            // 49\n  }                                                                                                                    // 50\n                                                                                                                       // 51\n  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {                                                  // 52\n    // This is the only way to test support for the `wheel` event in IE9+.                                             // 53\n    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');                                           // 54\n  }                                                                                                                    // 55\n                                                                                                                       // 56\n  return isSupported;                                                                                                  // 57\n}                                                                                                                      // 58\n                                                                                                                       // 59\nmodule.exports = isEventSupported;                                                                                     // 60\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactDOMFeatureFlags.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactDOMFeatureFlags.js                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactDOMFeatureFlags                                                                                // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar ReactDOMFeatureFlags = {                                                                                           // 14\n  useCreateElement: false                                                                                              // 15\n};                                                                                                                     // 16\n                                                                                                                       // 17\nmodule.exports = ReactDOMFeatureFlags;                                                                                 // 18\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ReactElement.js\":[\"./ReactCurrentOwner\",\"./Object.assign\",\"./canDefineProperty\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactElement.js                                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2014-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactElement                                                                                        // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar ReactCurrentOwner = require('./ReactCurrentOwner');                                                                // 14\n                                                                                                                       // 15\nvar assign = require('./Object.assign');                                                                               // 16\nvar canDefineProperty = require('./canDefineProperty');                                                                // 17\n                                                                                                                       // 18\n// The Symbol used to tag the ReactElement type. If there is no native Symbol                                          // 19\n// nor polyfill, then a plain number is used for performance.                                                          // 20\nvar REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;    // 21\n                                                                                                                       // 22\nvar RESERVED_PROPS = {                                                                                                 // 23\n  key: true,                                                                                                           // 24\n  ref: true,                                                                                                           // 25\n  __self: true,                                                                                                        // 26\n  __source: true                                                                                                       // 27\n};                                                                                                                     // 28\n                                                                                                                       // 29\n/**                                                                                                                    // 30\n * Base constructor for all React elements. This is only used to make this                                             // 31\n * work with a dynamic instanceof check. Nothing should live on this prototype.                                        // 32\n *                                                                                                                     // 33\n * @param {*} type                                                                                                     // 34\n * @param {*} key                                                                                                      // 35\n * @param {string|object} ref                                                                                          // 36\n * @param {*} self A *temporary* helper to detect places where `this` is                                               // 37\n * different from the `owner` when React.createElement is called, so that we                                           // 38\n * can warn. We want to get rid of owner and replace string `ref`s with arrow                                          // 39\n * functions, and as long as `this` and owner are the same, there will be no                                           // 40\n * change in behavior.                                                                                                 // 41\n * @param {*} source An annotation object (added by a transpiler or otherwise)                                         // 42\n * indicating filename, line number, and/or other information.                                                         // 43\n * @param {*} owner                                                                                                    // 44\n * @param {*} props                                                                                                    // 45\n * @internal                                                                                                           // 46\n */                                                                                                                    // 47\nvar ReactElement = function (type, key, ref, self, source, owner, props) {                                             // 48\n  var element = {                                                                                                      // 49\n    // This tag allow us to uniquely identify this as a React Element                                                  // 50\n    $$typeof: REACT_ELEMENT_TYPE,                                                                                      // 51\n                                                                                                                       // 52\n    // Built-in properties that belong on the element                                                                  // 53\n    type: type,                                                                                                        // 54\n    key: key,                                                                                                          // 55\n    ref: ref,                                                                                                          // 56\n    props: props,                                                                                                      // 57\n                                                                                                                       // 58\n    // Record the component responsible for creating this element.                                                     // 59\n    _owner: owner                                                                                                      // 60\n  };                                                                                                                   // 61\n                                                                                                                       // 62\n  if (process.env.NODE_ENV !== 'production') {                                                                         // 63\n    // The validation flag is currently mutative. We put it on                                                         // 64\n    // an external backing store so that we can freeze the whole object.                                               // 65\n    // This can be replaced with a WeakMap once they are implemented in                                                // 66\n    // commonly used development environments.                                                                         // 67\n    element._store = {};                                                                                               // 68\n                                                                                                                       // 69\n    // To make comparing ReactElements easier for testing purposes, we make                                            // 70\n    // the validation flag non-enumerable (where possible, which should                                                // 71\n    // include every environment we run tests in), so the test framework                                               // 72\n    // ignores it.                                                                                                     // 73\n    if (canDefineProperty) {                                                                                           // 74\n      Object.defineProperty(element._store, 'validated', {                                                             // 75\n        configurable: false,                                                                                           // 76\n        enumerable: false,                                                                                             // 77\n        writable: true,                                                                                                // 78\n        value: false                                                                                                   // 79\n      });                                                                                                              // 80\n      // self and source are DEV only properties.                                                                      // 81\n      Object.defineProperty(element, '_self', {                                                                        // 82\n        configurable: false,                                                                                           // 83\n        enumerable: false,                                                                                             // 84\n        writable: false,                                                                                               // 85\n        value: self                                                                                                    // 86\n      });                                                                                                              // 87\n      // Two elements created in two different places should be considered                                             // 88\n      // equal for testing purposes and therefore we hide it from enumeration.                                         // 89\n      Object.defineProperty(element, '_source', {                                                                      // 90\n        configurable: false,                                                                                           // 91\n        enumerable: false,                                                                                             // 92\n        writable: false,                                                                                               // 93\n        value: source                                                                                                  // 94\n      });                                                                                                              // 95\n    } else {                                                                                                           // 96\n      element._store.validated = false;                                                                                // 97\n      element._self = self;                                                                                            // 98\n      element._source = source;                                                                                        // 99\n    }                                                                                                                  // 100\n    Object.freeze(element.props);                                                                                      // 101\n    Object.freeze(element);                                                                                            // 102\n  }                                                                                                                    // 103\n                                                                                                                       // 104\n  return element;                                                                                                      // 105\n};                                                                                                                     // 106\n                                                                                                                       // 107\nReactElement.createElement = function (type, config, children) {                                                       // 108\n  var propName;                                                                                                        // 109\n                                                                                                                       // 110\n  // Reserved names are extracted                                                                                      // 111\n  var props = {};                                                                                                      // 112\n                                                                                                                       // 113\n  var key = null;                                                                                                      // 114\n  var ref = null;                                                                                                      // 115\n  var self = null;                                                                                                     // 116\n  var source = null;                                                                                                   // 117\n                                                                                                                       // 118\n  if (config != null) {                                                                                                // 119\n    ref = config.ref === undefined ? null : config.ref;                                                                // 120\n    key = config.key === undefined ? null : '' + config.key;                                                           // 121\n    self = config.__self === undefined ? null : config.__self;                                                         // 122\n    source = config.__source === undefined ? null : config.__source;                                                   // 123\n    // Remaining properties are added to a new props object                                                            // 124\n    for (propName in config) {                                                                                         // 125\n      if (config.hasOwnProperty(propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {                               // 126\n        props[propName] = config[propName];                                                                            // 127\n      }                                                                                                                // 128\n    }                                                                                                                  // 129\n  }                                                                                                                    // 130\n                                                                                                                       // 131\n  // Children can be more than one argument, and those are transferred onto                                            // 132\n  // the newly allocated props object.                                                                                 // 133\n  var childrenLength = arguments.length - 2;                                                                           // 134\n  if (childrenLength === 1) {                                                                                          // 135\n    props.children = children;                                                                                         // 136\n  } else if (childrenLength > 1) {                                                                                     // 137\n    var childArray = Array(childrenLength);                                                                            // 138\n    for (var i = 0; i < childrenLength; i++) {                                                                         // 139\n      childArray[i] = arguments[i + 2];                                                                                // 140\n    }                                                                                                                  // 141\n    props.children = childArray;                                                                                       // 142\n  }                                                                                                                    // 143\n                                                                                                                       // 144\n  // Resolve default props                                                                                             // 145\n  if (type && type.defaultProps) {                                                                                     // 146\n    var defaultProps = type.defaultProps;                                                                              // 147\n    for (propName in defaultProps) {                                                                                   // 148\n      if (typeof props[propName] === 'undefined') {                                                                    // 149\n        props[propName] = defaultProps[propName];                                                                      // 150\n      }                                                                                                                // 151\n    }                                                                                                                  // 152\n  }                                                                                                                    // 153\n                                                                                                                       // 154\n  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);                                 // 155\n};                                                                                                                     // 156\n                                                                                                                       // 157\nReactElement.createFactory = function (type) {                                                                         // 158\n  var factory = ReactElement.createElement.bind(null, type);                                                           // 159\n  // Expose the type on the factory and the prototype so that it can be                                                // 160\n  // easily accessed on elements. E.g. `<Foo />.type === Foo`.                                                         // 161\n  // This should not be named `constructor` since this may not be the function                                         // 162\n  // that created the element, and it may not even be a constructor.                                                   // 163\n  // Legacy hook TODO: Warn if this is accessed                                                                        // 164\n  factory.type = type;                                                                                                 // 165\n  return factory;                                                                                                      // 166\n};                                                                                                                     // 167\n                                                                                                                       // 168\nReactElement.cloneAndReplaceKey = function (oldElement, newKey) {                                                      // 169\n  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);\n                                                                                                                       // 171\n  return newElement;                                                                                                   // 172\n};                                                                                                                     // 173\n                                                                                                                       // 174\nReactElement.cloneAndReplaceProps = function (oldElement, newProps) {                                                  // 175\n  var newElement = ReactElement(oldElement.type, oldElement.key, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, newProps);\n                                                                                                                       // 177\n  if (process.env.NODE_ENV !== 'production') {                                                                         // 178\n    // If the key on the original is valid, then the clone is valid                                                    // 179\n    newElement._store.validated = oldElement._store.validated;                                                         // 180\n  }                                                                                                                    // 181\n                                                                                                                       // 182\n  return newElement;                                                                                                   // 183\n};                                                                                                                     // 184\n                                                                                                                       // 185\nReactElement.cloneElement = function (element, config, children) {                                                     // 186\n  var propName;                                                                                                        // 187\n                                                                                                                       // 188\n  // Original props are copied                                                                                         // 189\n  var props = assign({}, element.props);                                                                               // 190\n                                                                                                                       // 191\n  // Reserved names are extracted                                                                                      // 192\n  var key = element.key;                                                                                               // 193\n  var ref = element.ref;                                                                                               // 194\n  // Self is preserved since the owner is preserved.                                                                   // 195\n  var self = element._self;                                                                                            // 196\n  // Source is preserved since cloneElement is unlikely to be targeted by a                                            // 197\n  // transpiler, and the original source is probably a better indicator of the                                         // 198\n  // true owner.                                                                                                       // 199\n  var source = element._source;                                                                                        // 200\n                                                                                                                       // 201\n  // Owner will be preserved, unless ref is overridden                                                                 // 202\n  var owner = element._owner;                                                                                          // 203\n                                                                                                                       // 204\n  if (config != null) {                                                                                                // 205\n    if (config.ref !== undefined) {                                                                                    // 206\n      // Silently steal the ref from the parent.                                                                       // 207\n      ref = config.ref;                                                                                                // 208\n      owner = ReactCurrentOwner.current;                                                                               // 209\n    }                                                                                                                  // 210\n    if (config.key !== undefined) {                                                                                    // 211\n      key = '' + config.key;                                                                                           // 212\n    }                                                                                                                  // 213\n    // Remaining properties override existing props                                                                    // 214\n    for (propName in config) {                                                                                         // 215\n      if (config.hasOwnProperty(propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {                               // 216\n        props[propName] = config[propName];                                                                            // 217\n      }                                                                                                                // 218\n    }                                                                                                                  // 219\n  }                                                                                                                    // 220\n                                                                                                                       // 221\n  // Children can be more than one argument, and those are transferred onto                                            // 222\n  // the newly allocated props object.                                                                                 // 223\n  var childrenLength = arguments.length - 2;                                                                           // 224\n  if (childrenLength === 1) {                                                                                          // 225\n    props.children = children;                                                                                         // 226\n  } else if (childrenLength > 1) {                                                                                     // 227\n    var childArray = Array(childrenLength);                                                                            // 228\n    for (var i = 0; i < childrenLength; i++) {                                                                         // 229\n      childArray[i] = arguments[i + 2];                                                                                // 230\n    }                                                                                                                  // 231\n    props.children = childArray;                                                                                       // 232\n  }                                                                                                                    // 233\n                                                                                                                       // 234\n  return ReactElement(element.type, key, ref, self, source, owner, props);                                             // 235\n};                                                                                                                     // 236\n                                                                                                                       // 237\n/**                                                                                                                    // 238\n * @param {?object} object                                                                                             // 239\n * @return {boolean} True if `object` is a valid component.                                                            // 240\n * @final                                                                                                              // 241\n */                                                                                                                    // 242\nReactElement.isValidElement = function (object) {                                                                      // 243\n  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;                      // 244\n};                                                                                                                     // 245\n                                                                                                                       // 246\nmodule.exports = ReactElement;                                                                                         // 247\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"canDefineProperty.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/canDefineProperty.js                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule canDefineProperty                                                                                   // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar canDefineProperty = false;                                                                                         // 14\nif (process.env.NODE_ENV !== 'production') {                                                                           // 15\n  try {                                                                                                                // 16\n    Object.defineProperty({}, 'x', { get: function () {} });                                                           // 17\n    canDefineProperty = true;                                                                                          // 18\n  } catch (x) {                                                                                                        // 19\n    // IE will fail on defineProperty                                                                                  // 20\n  }                                                                                                                    // 21\n}                                                                                                                      // 22\n                                                                                                                       // 23\nmodule.exports = canDefineProperty;                                                                                    // 24\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ReactEmptyComponentRegistry.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactEmptyComponentRegistry.js                                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2014-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactEmptyComponentRegistry                                                                         // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\n// This registry keeps track of the React IDs of the components that rendered to                                       // 14\n// `null` (in reality a placeholder such as `noscript`)                                                                // 15\nvar nullComponentIDsRegistry = {};                                                                                     // 16\n                                                                                                                       // 17\n/**                                                                                                                    // 18\n * @param {string} id Component's `_rootNodeID`.                                                                       // 19\n * @return {boolean} True if the component is rendered to null.                                                        // 20\n */                                                                                                                    // 21\nfunction isNullComponentID(id) {                                                                                       // 22\n  return !!nullComponentIDsRegistry[id];                                                                               // 23\n}                                                                                                                      // 24\n                                                                                                                       // 25\n/**                                                                                                                    // 26\n * Mark the component as having rendered to null.                                                                      // 27\n * @param {string} id Component's `_rootNodeID`.                                                                       // 28\n */                                                                                                                    // 29\nfunction registerNullComponentID(id) {                                                                                 // 30\n  nullComponentIDsRegistry[id] = true;                                                                                 // 31\n}                                                                                                                      // 32\n                                                                                                                       // 33\n/**                                                                                                                    // 34\n * Unmark the component as having rendered to null: it renders to something now.                                       // 35\n * @param {string} id Component's `_rootNodeID`.                                                                       // 36\n */                                                                                                                    // 37\nfunction deregisterNullComponentID(id) {                                                                               // 38\n  delete nullComponentIDsRegistry[id];                                                                                 // 39\n}                                                                                                                      // 40\n                                                                                                                       // 41\nvar ReactEmptyComponentRegistry = {                                                                                    // 42\n  isNullComponentID: isNullComponentID,                                                                                // 43\n  registerNullComponentID: registerNullComponentID,                                                                    // 44\n  deregisterNullComponentID: deregisterNullComponentID                                                                 // 45\n};                                                                                                                     // 46\n                                                                                                                       // 47\nmodule.exports = ReactEmptyComponentRegistry;                                                                          // 48\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ReactInstanceHandles.js\":[\"./ReactRootIndex\",\"fbjs/lib/invariant\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactInstanceHandles.js                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactInstanceHandles                                                                                // 9\n * @typechecks static-only                                                                                             // 10\n */                                                                                                                    // 11\n                                                                                                                       // 12\n'use strict';                                                                                                          // 13\n                                                                                                                       // 14\nvar ReactRootIndex = require('./ReactRootIndex');                                                                      // 15\n                                                                                                                       // 16\nvar invariant = require('fbjs/lib/invariant');                                                                         // 17\n                                                                                                                       // 18\nvar SEPARATOR = '.';                                                                                                   // 19\nvar SEPARATOR_LENGTH = SEPARATOR.length;                                                                               // 20\n                                                                                                                       // 21\n/**                                                                                                                    // 22\n * Maximum depth of traversals before we consider the possibility of a bad ID.                                         // 23\n */                                                                                                                    // 24\nvar MAX_TREE_DEPTH = 10000;                                                                                            // 25\n                                                                                                                       // 26\n/**                                                                                                                    // 27\n * Creates a DOM ID prefix to use when mounting React components.                                                      // 28\n *                                                                                                                     // 29\n * @param {number} index A unique integer                                                                              // 30\n * @return {string} React root ID.                                                                                     // 31\n * @internal                                                                                                           // 32\n */                                                                                                                    // 33\nfunction getReactRootIDString(index) {                                                                                 // 34\n  return SEPARATOR + index.toString(36);                                                                               // 35\n}                                                                                                                      // 36\n                                                                                                                       // 37\n/**                                                                                                                    // 38\n * Checks if a character in the supplied ID is a separator or the end.                                                 // 39\n *                                                                                                                     // 40\n * @param {string} id A React DOM ID.                                                                                  // 41\n * @param {number} index Index of the character to check.                                                              // 42\n * @return {boolean} True if the character is a separator or end of the ID.                                            // 43\n * @private                                                                                                            // 44\n */                                                                                                                    // 45\nfunction isBoundary(id, index) {                                                                                       // 46\n  return id.charAt(index) === SEPARATOR || index === id.length;                                                        // 47\n}                                                                                                                      // 48\n                                                                                                                       // 49\n/**                                                                                                                    // 50\n * Checks if the supplied string is a valid React DOM ID.                                                              // 51\n *                                                                                                                     // 52\n * @param {string} id A React DOM ID, maybe.                                                                           // 53\n * @return {boolean} True if the string is a valid React DOM ID.                                                       // 54\n * @private                                                                                                            // 55\n */                                                                                                                    // 56\nfunction isValidID(id) {                                                                                               // 57\n  return id === '' || id.charAt(0) === SEPARATOR && id.charAt(id.length - 1) !== SEPARATOR;                            // 58\n}                                                                                                                      // 59\n                                                                                                                       // 60\n/**                                                                                                                    // 61\n * Checks if the first ID is an ancestor of or equal to the second ID.                                                 // 62\n *                                                                                                                     // 63\n * @param {string} ancestorID                                                                                          // 64\n * @param {string} descendantID                                                                                        // 65\n * @return {boolean} True if `ancestorID` is an ancestor of `descendantID`.                                            // 66\n * @internal                                                                                                           // 67\n */                                                                                                                    // 68\nfunction isAncestorIDOf(ancestorID, descendantID) {                                                                    // 69\n  return descendantID.indexOf(ancestorID) === 0 && isBoundary(descendantID, ancestorID.length);                        // 70\n}                                                                                                                      // 71\n                                                                                                                       // 72\n/**                                                                                                                    // 73\n * Gets the parent ID of the supplied React DOM ID, `id`.                                                              // 74\n *                                                                                                                     // 75\n * @param {string} id ID of a component.                                                                               // 76\n * @return {string} ID of the parent, or an empty string.                                                              // 77\n * @private                                                                                                            // 78\n */                                                                                                                    // 79\nfunction getParentID(id) {                                                                                             // 80\n  return id ? id.substr(0, id.lastIndexOf(SEPARATOR)) : '';                                                            // 81\n}                                                                                                                      // 82\n                                                                                                                       // 83\n/**                                                                                                                    // 84\n * Gets the next DOM ID on the tree path from the supplied `ancestorID` to the                                         // 85\n * supplied `destinationID`. If they are equal, the ID is returned.                                                    // 86\n *                                                                                                                     // 87\n * @param {string} ancestorID ID of an ancestor node of `destinationID`.                                               // 88\n * @param {string} destinationID ID of the destination node.                                                           // 89\n * @return {string} Next ID on the path from `ancestorID` to `destinationID`.                                          // 90\n * @private                                                                                                            // 91\n */                                                                                                                    // 92\nfunction getNextDescendantID(ancestorID, destinationID) {                                                              // 93\n  !(isValidID(ancestorID) && isValidID(destinationID)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNextDescendantID(%s, %s): Received an invalid React DOM ID.', ancestorID, destinationID) : invariant(false) : undefined;\n  !isAncestorIDOf(ancestorID, destinationID) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNextDescendantID(...): React has made an invalid assumption about ' + 'the DOM hierarchy. Expected `%s` to be an ancestor of `%s`.', ancestorID, destinationID) : invariant(false) : undefined;\n  if (ancestorID === destinationID) {                                                                                  // 96\n    return ancestorID;                                                                                                 // 97\n  }                                                                                                                    // 98\n  // Skip over the ancestor and the immediate separator. Traverse until we hit                                         // 99\n  // another separator or we reach the end of `destinationID`.                                                         // 100\n  var start = ancestorID.length + SEPARATOR_LENGTH;                                                                    // 101\n  var i;                                                                                                               // 102\n  for (i = start; i < destinationID.length; i++) {                                                                     // 103\n    if (isBoundary(destinationID, i)) {                                                                                // 104\n      break;                                                                                                           // 105\n    }                                                                                                                  // 106\n  }                                                                                                                    // 107\n  return destinationID.substr(0, i);                                                                                   // 108\n}                                                                                                                      // 109\n                                                                                                                       // 110\n/**                                                                                                                    // 111\n * Gets the nearest common ancestor ID of two IDs.                                                                     // 112\n *                                                                                                                     // 113\n * Using this ID scheme, the nearest common ancestor ID is the longest common                                          // 114\n * prefix of the two IDs that immediately preceded a \"marker\" in both strings.                                         // 115\n *                                                                                                                     // 116\n * @param {string} oneID                                                                                               // 117\n * @param {string} twoID                                                                                               // 118\n * @return {string} Nearest common ancestor ID, or the empty string if none.                                           // 119\n * @private                                                                                                            // 120\n */                                                                                                                    // 121\nfunction getFirstCommonAncestorID(oneID, twoID) {                                                                      // 122\n  var minLength = Math.min(oneID.length, twoID.length);                                                                // 123\n  if (minLength === 0) {                                                                                               // 124\n    return '';                                                                                                         // 125\n  }                                                                                                                    // 126\n  var lastCommonMarkerIndex = 0;                                                                                       // 127\n  // Use `<=` to traverse until the \"EOL\" of the shorter string.                                                       // 128\n  for (var i = 0; i <= minLength; i++) {                                                                               // 129\n    if (isBoundary(oneID, i) && isBoundary(twoID, i)) {                                                                // 130\n      lastCommonMarkerIndex = i;                                                                                       // 131\n    } else if (oneID.charAt(i) !== twoID.charAt(i)) {                                                                  // 132\n      break;                                                                                                           // 133\n    }                                                                                                                  // 134\n  }                                                                                                                    // 135\n  var longestCommonID = oneID.substr(0, lastCommonMarkerIndex);                                                        // 136\n  !isValidID(longestCommonID) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getFirstCommonAncestorID(%s, %s): Expected a valid React DOM ID: %s', oneID, twoID, longestCommonID) : invariant(false) : undefined;\n  return longestCommonID;                                                                                              // 138\n}                                                                                                                      // 139\n                                                                                                                       // 140\n/**                                                                                                                    // 141\n * Traverses the parent path between two IDs (either up or down). The IDs must                                         // 142\n * not be the same, and there must exist a parent path between them. If the                                            // 143\n * callback returns `false`, traversal is stopped.                                                                     // 144\n *                                                                                                                     // 145\n * @param {?string} start ID at which to start traversal.                                                              // 146\n * @param {?string} stop ID at which to end traversal.                                                                 // 147\n * @param {function} cb Callback to invoke each ID with.                                                               // 148\n * @param {*} arg Argument to invoke the callback with.                                                                // 149\n * @param {?boolean} skipFirst Whether or not to skip the first node.                                                  // 150\n * @param {?boolean} skipLast Whether or not to skip the last node.                                                    // 151\n * @private                                                                                                            // 152\n */                                                                                                                    // 153\nfunction traverseParentPath(start, stop, cb, arg, skipFirst, skipLast) {                                               // 154\n  start = start || '';                                                                                                 // 155\n  stop = stop || '';                                                                                                   // 156\n  !(start !== stop) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'traverseParentPath(...): Cannot traverse from and to the same ID, `%s`.', start) : invariant(false) : undefined;\n  var traverseUp = isAncestorIDOf(stop, start);                                                                        // 158\n  !(traverseUp || isAncestorIDOf(start, stop)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'traverseParentPath(%s, %s, ...): Cannot traverse from two IDs that do ' + 'not have a parent path.', start, stop) : invariant(false) : undefined;\n  // Traverse from `start` to `stop` one depth at a time.                                                              // 160\n  var depth = 0;                                                                                                       // 161\n  var traverse = traverseUp ? getParentID : getNextDescendantID;                                                       // 162\n  for (var id = start;; /* until break */id = traverse(id, stop)) {                                                    // 163\n    var ret;                                                                                                           // 164\n    if ((!skipFirst || id !== start) && (!skipLast || id !== stop)) {                                                  // 165\n      ret = cb(id, traverseUp, arg);                                                                                   // 166\n    }                                                                                                                  // 167\n    if (ret === false || id === stop) {                                                                                // 168\n      // Only break //after// visiting `stop`.                                                                         // 169\n      break;                                                                                                           // 170\n    }                                                                                                                  // 171\n    !(depth++ < MAX_TREE_DEPTH) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'traverseParentPath(%s, %s, ...): Detected an infinite loop while ' + 'traversing the React DOM ID tree. This may be due to malformed IDs: %s', start, stop, id) : invariant(false) : undefined;\n  }                                                                                                                    // 173\n}                                                                                                                      // 174\n                                                                                                                       // 175\n/**                                                                                                                    // 176\n * Manages the IDs assigned to DOM representations of React components. This                                           // 177\n * uses a specific scheme in order to traverse the DOM efficiently (e.g. in                                            // 178\n * order to simulate events).                                                                                          // 179\n *                                                                                                                     // 180\n * @internal                                                                                                           // 181\n */                                                                                                                    // 182\nvar ReactInstanceHandles = {                                                                                           // 183\n                                                                                                                       // 184\n  /**                                                                                                                  // 185\n   * Constructs a React root ID                                                                                        // 186\n   * @return {string} A React root ID.                                                                                 // 187\n   */                                                                                                                  // 188\n  createReactRootID: function () {                                                                                     // 189\n    return getReactRootIDString(ReactRootIndex.createReactRootIndex());                                                // 190\n  },                                                                                                                   // 191\n                                                                                                                       // 192\n  /**                                                                                                                  // 193\n   * Constructs a React ID by joining a root ID with a name.                                                           // 194\n   *                                                                                                                   // 195\n   * @param {string} rootID Root ID of a parent component.                                                             // 196\n   * @param {string} name A component's name (as flattened children).                                                  // 197\n   * @return {string} A React ID.                                                                                      // 198\n   * @internal                                                                                                         // 199\n   */                                                                                                                  // 200\n  createReactID: function (rootID, name) {                                                                             // 201\n    return rootID + name;                                                                                              // 202\n  },                                                                                                                   // 203\n                                                                                                                       // 204\n  /**                                                                                                                  // 205\n   * Gets the DOM ID of the React component that is the root of the tree that                                          // 206\n   * contains the React component with the supplied DOM ID.                                                            // 207\n   *                                                                                                                   // 208\n   * @param {string} id DOM ID of a React component.                                                                   // 209\n   * @return {?string} DOM ID of the React component that is the root.                                                 // 210\n   * @internal                                                                                                         // 211\n   */                                                                                                                  // 212\n  getReactRootIDFromNodeID: function (id) {                                                                            // 213\n    if (id && id.charAt(0) === SEPARATOR && id.length > 1) {                                                           // 214\n      var index = id.indexOf(SEPARATOR, 1);                                                                            // 215\n      return index > -1 ? id.substr(0, index) : id;                                                                    // 216\n    }                                                                                                                  // 217\n    return null;                                                                                                       // 218\n  },                                                                                                                   // 219\n                                                                                                                       // 220\n  /**                                                                                                                  // 221\n   * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that                                          // 222\n   * should would receive a `mouseEnter` or `mouseLeave` event.                                                        // 223\n   *                                                                                                                   // 224\n   * NOTE: Does not invoke the callback on the nearest common ancestor because                                         // 225\n   * nothing \"entered\" or \"left\" that element.                                                                         // 226\n   *                                                                                                                   // 227\n   * @param {string} leaveID ID being left.                                                                            // 228\n   * @param {string} enterID ID being entered.                                                                         // 229\n   * @param {function} cb Callback to invoke on each entered/left ID.                                                  // 230\n   * @param {*} upArg Argument to invoke the callback with on left IDs.                                                // 231\n   * @param {*} downArg Argument to invoke the callback with on entered IDs.                                           // 232\n   * @internal                                                                                                         // 233\n   */                                                                                                                  // 234\n  traverseEnterLeave: function (leaveID, enterID, cb, upArg, downArg) {                                                // 235\n    var ancestorID = getFirstCommonAncestorID(leaveID, enterID);                                                       // 236\n    if (ancestorID !== leaveID) {                                                                                      // 237\n      traverseParentPath(leaveID, ancestorID, cb, upArg, false, true);                                                 // 238\n    }                                                                                                                  // 239\n    if (ancestorID !== enterID) {                                                                                      // 240\n      traverseParentPath(ancestorID, enterID, cb, downArg, true, false);                                               // 241\n    }                                                                                                                  // 242\n  },                                                                                                                   // 243\n                                                                                                                       // 244\n  /**                                                                                                                  // 245\n   * Simulates the traversal of a two-phase, capture/bubble event dispatch.                                            // 246\n   *                                                                                                                   // 247\n   * NOTE: This traversal happens on IDs without touching the DOM.                                                     // 248\n   *                                                                                                                   // 249\n   * @param {string} targetID ID of the target node.                                                                   // 250\n   * @param {function} cb Callback to invoke.                                                                          // 251\n   * @param {*} arg Argument to invoke the callback with.                                                              // 252\n   * @internal                                                                                                         // 253\n   */                                                                                                                  // 254\n  traverseTwoPhase: function (targetID, cb, arg) {                                                                     // 255\n    if (targetID) {                                                                                                    // 256\n      traverseParentPath('', targetID, cb, arg, true, false);                                                          // 257\n      traverseParentPath(targetID, '', cb, arg, false, true);                                                          // 258\n    }                                                                                                                  // 259\n  },                                                                                                                   // 260\n                                                                                                                       // 261\n  /**                                                                                                                  // 262\n   * Same as `traverseTwoPhase` but skips the `targetID`.                                                              // 263\n   */                                                                                                                  // 264\n  traverseTwoPhaseSkipTarget: function (targetID, cb, arg) {                                                           // 265\n    if (targetID) {                                                                                                    // 266\n      traverseParentPath('', targetID, cb, arg, true, true);                                                           // 267\n      traverseParentPath(targetID, '', cb, arg, true, true);                                                           // 268\n    }                                                                                                                  // 269\n  },                                                                                                                   // 270\n                                                                                                                       // 271\n  /**                                                                                                                  // 272\n   * Traverse a node ID, calling the supplied `cb` for each ancestor ID. For                                           // 273\n   * example, passing `.0.$row-0.1` would result in `cb` getting called                                                // 274\n   * with `.0`, `.0.$row-0`, and `.0.$row-0.1`.                                                                        // 275\n   *                                                                                                                   // 276\n   * NOTE: This traversal happens on IDs without touching the DOM.                                                     // 277\n   *                                                                                                                   // 278\n   * @param {string} targetID ID of the target node.                                                                   // 279\n   * @param {function} cb Callback to invoke.                                                                          // 280\n   * @param {*} arg Argument to invoke the callback with.                                                              // 281\n   * @internal                                                                                                         // 282\n   */                                                                                                                  // 283\n  traverseAncestors: function (targetID, cb, arg) {                                                                    // 284\n    traverseParentPath('', targetID, cb, arg, true, false);                                                            // 285\n  },                                                                                                                   // 286\n                                                                                                                       // 287\n  getFirstCommonAncestorID: getFirstCommonAncestorID,                                                                  // 288\n                                                                                                                       // 289\n  /**                                                                                                                  // 290\n   * Exposed for unit testing.                                                                                         // 291\n   * @private                                                                                                          // 292\n   */                                                                                                                  // 293\n  _getNextDescendantID: getNextDescendantID,                                                                           // 294\n                                                                                                                       // 295\n  isAncestorIDOf: isAncestorIDOf,                                                                                      // 296\n                                                                                                                       // 297\n  SEPARATOR: SEPARATOR                                                                                                 // 298\n                                                                                                                       // 299\n};                                                                                                                     // 300\n                                                                                                                       // 301\nmodule.exports = ReactInstanceHandles;                                                                                 // 302\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactRootIndex.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactRootIndex.js                                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactRootIndex                                                                                      // 9\n * @typechecks                                                                                                         // 10\n */                                                                                                                    // 11\n                                                                                                                       // 12\n'use strict';                                                                                                          // 13\n                                                                                                                       // 14\nvar ReactRootIndexInjection = {                                                                                        // 15\n  /**                                                                                                                  // 16\n   * @param {function} _createReactRootIndex                                                                           // 17\n   */                                                                                                                  // 18\n  injectCreateReactRootIndex: function (_createReactRootIndex) {                                                       // 19\n    ReactRootIndex.createReactRootIndex = _createReactRootIndex;                                                       // 20\n  }                                                                                                                    // 21\n};                                                                                                                     // 22\n                                                                                                                       // 23\nvar ReactRootIndex = {                                                                                                 // 24\n  createReactRootIndex: null,                                                                                          // 25\n  injection: ReactRootIndexInjection                                                                                   // 26\n};                                                                                                                     // 27\n                                                                                                                       // 28\nmodule.exports = ReactRootIndex;                                                                                       // 29\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ReactInstanceMap.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactInstanceMap.js                                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactInstanceMap                                                                                    // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\n/**                                                                                                                    // 14\n * `ReactInstanceMap` maintains a mapping from a public facing stateful                                                // 15\n * instance (key) and the internal representation (value). This allows public                                          // 16\n * methods to accept the user facing instance as an argument and map them back                                         // 17\n * to internal methods.                                                                                                // 18\n */                                                                                                                    // 19\n                                                                                                                       // 20\n// TODO: Replace this with ES6: var ReactInstanceMap = new Map();                                                      // 21\nvar ReactInstanceMap = {                                                                                               // 22\n                                                                                                                       // 23\n  /**                                                                                                                  // 24\n   * This API should be called `delete` but we'd have to make sure to always                                           // 25\n   * transform these to strings for IE support. When this transform is fully                                           // 26\n   * supported we can rename it.                                                                                       // 27\n   */                                                                                                                  // 28\n  remove: function (key) {                                                                                             // 29\n    key._reactInternalInstance = undefined;                                                                            // 30\n  },                                                                                                                   // 31\n                                                                                                                       // 32\n  get: function (key) {                                                                                                // 33\n    return key._reactInternalInstance;                                                                                 // 34\n  },                                                                                                                   // 35\n                                                                                                                       // 36\n  has: function (key) {                                                                                                // 37\n    return key._reactInternalInstance !== undefined;                                                                   // 38\n  },                                                                                                                   // 39\n                                                                                                                       // 40\n  set: function (key, value) {                                                                                         // 41\n    key._reactInternalInstance = value;                                                                                // 42\n  }                                                                                                                    // 43\n                                                                                                                       // 44\n};                                                                                                                     // 45\n                                                                                                                       // 46\nmodule.exports = ReactInstanceMap;                                                                                     // 47\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ReactMarkupChecksum.js\":[\"./adler32\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactMarkupChecksum.js                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactMarkupChecksum                                                                                 // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar adler32 = require('./adler32');                                                                                    // 14\n                                                                                                                       // 15\nvar TAG_END = /\\/?>/;                                                                                                  // 16\n                                                                                                                       // 17\nvar ReactMarkupChecksum = {                                                                                            // 18\n  CHECKSUM_ATTR_NAME: 'data-react-checksum',                                                                           // 19\n                                                                                                                       // 20\n  /**                                                                                                                  // 21\n   * @param {string} markup Markup string                                                                              // 22\n   * @return {string} Markup string with checksum attribute attached                                                   // 23\n   */                                                                                                                  // 24\n  addChecksumToMarkup: function (markup) {                                                                             // 25\n    var checksum = adler32(markup);                                                                                    // 26\n                                                                                                                       // 27\n    // Add checksum (handle both parent tags and self-closing tags)                                                    // 28\n    return markup.replace(TAG_END, ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '=\"' + checksum + '\"$&');            // 29\n  },                                                                                                                   // 30\n                                                                                                                       // 31\n  /**                                                                                                                  // 32\n   * @param {string} markup to use                                                                                     // 33\n   * @param {DOMElement} element root React element                                                                    // 34\n   * @returns {boolean} whether or not the markup is the same                                                          // 35\n   */                                                                                                                  // 36\n  canReuseMarkup: function (markup, element) {                                                                         // 37\n    var existingChecksum = element.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);                               // 38\n    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);                                             // 39\n    var markupChecksum = adler32(markup);                                                                              // 40\n    return markupChecksum === existingChecksum;                                                                        // 41\n  }                                                                                                                    // 42\n};                                                                                                                     // 43\n                                                                                                                       // 44\nmodule.exports = ReactMarkupChecksum;                                                                                  // 45\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"adler32.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/adler32.js                                                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule adler32                                                                                             // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar MOD = 65521;                                                                                                       // 14\n                                                                                                                       // 15\n// adler32 is not cryptographically strong, and is only used to sanity check that                                      // 16\n// markup generated on the server matches the markup generated on the client.                                          // 17\n// This implementation (a modified version of the SheetJS version) has been optimized                                  // 18\n// for our use case, at the expense of conforming to the adler32 specification                                         // 19\n// for non-ascii inputs.                                                                                               // 20\nfunction adler32(data) {                                                                                               // 21\n  var a = 1;                                                                                                           // 22\n  var b = 0;                                                                                                           // 23\n  var i = 0;                                                                                                           // 24\n  var l = data.length;                                                                                                 // 25\n  var m = l & ~0x3;                                                                                                    // 26\n  while (i < m) {                                                                                                      // 27\n    for (; i < Math.min(i + 4096, m); i += 4) {                                                                        // 28\n      b += (a += data.charCodeAt(i)) + (a += data.charCodeAt(i + 1)) + (a += data.charCodeAt(i + 2)) + (a += data.charCodeAt(i + 3));\n    }                                                                                                                  // 30\n    a %= MOD;                                                                                                          // 31\n    b %= MOD;                                                                                                          // 32\n  }                                                                                                                    // 33\n  for (; i < l; i++) {                                                                                                 // 34\n    b += a += data.charCodeAt(i);                                                                                      // 35\n  }                                                                                                                    // 36\n  a %= MOD;                                                                                                            // 37\n  b %= MOD;                                                                                                            // 38\n  return a | b << 16;                                                                                                  // 39\n}                                                                                                                      // 40\n                                                                                                                       // 41\nmodule.exports = adler32;                                                                                              // 42\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ReactReconciler.js\":[\"./ReactRef\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactReconciler.js                                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactReconciler                                                                                     // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar ReactRef = require('./ReactRef');                                                                                  // 14\n                                                                                                                       // 15\n/**                                                                                                                    // 16\n * Helper to call ReactRef.attachRefs with this composite component, split out                                         // 17\n * to avoid allocations in the transaction mount-ready queue.                                                          // 18\n */                                                                                                                    // 19\nfunction attachRefs() {                                                                                                // 20\n  ReactRef.attachRefs(this, this._currentElement);                                                                     // 21\n}                                                                                                                      // 22\n                                                                                                                       // 23\nvar ReactReconciler = {                                                                                                // 24\n                                                                                                                       // 25\n  /**                                                                                                                  // 26\n   * Initializes the component, renders markup, and registers event listeners.                                         // 27\n   *                                                                                                                   // 28\n   * @param {ReactComponent} internalInstance                                                                          // 29\n   * @param {string} rootID DOM ID of the root node.                                                                   // 30\n   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction                                    // 31\n   * @return {?string} Rendered markup to be inserted into the DOM.                                                    // 32\n   * @final                                                                                                            // 33\n   * @internal                                                                                                         // 34\n   */                                                                                                                  // 35\n  mountComponent: function (internalInstance, rootID, transaction, context) {                                          // 36\n    var markup = internalInstance.mountComponent(rootID, transaction, context);                                        // 37\n    if (internalInstance._currentElement && internalInstance._currentElement.ref != null) {                            // 38\n      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);                                          // 39\n    }                                                                                                                  // 40\n    return markup;                                                                                                     // 41\n  },                                                                                                                   // 42\n                                                                                                                       // 43\n  /**                                                                                                                  // 44\n   * Releases any resources allocated by `mountComponent`.                                                             // 45\n   *                                                                                                                   // 46\n   * @final                                                                                                            // 47\n   * @internal                                                                                                         // 48\n   */                                                                                                                  // 49\n  unmountComponent: function (internalInstance) {                                                                      // 50\n    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);                                           // 51\n    internalInstance.unmountComponent();                                                                               // 52\n  },                                                                                                                   // 53\n                                                                                                                       // 54\n  /**                                                                                                                  // 55\n   * Update a component using a new element.                                                                           // 56\n   *                                                                                                                   // 57\n   * @param {ReactComponent} internalInstance                                                                          // 58\n   * @param {ReactElement} nextElement                                                                                 // 59\n   * @param {ReactReconcileTransaction} transaction                                                                    // 60\n   * @param {object} context                                                                                           // 61\n   * @internal                                                                                                         // 62\n   */                                                                                                                  // 63\n  receiveComponent: function (internalInstance, nextElement, transaction, context) {                                   // 64\n    var prevElement = internalInstance._currentElement;                                                                // 65\n                                                                                                                       // 66\n    if (nextElement === prevElement && context === internalInstance._context) {                                        // 67\n      // Since elements are immutable after the owner is rendered,                                                     // 68\n      // we can do a cheap identity compare here to determine if this is a                                             // 69\n      // superfluous reconcile. It's possible for state to be mutable but such                                         // 70\n      // change should trigger an update of the owner which would recreate                                             // 71\n      // the element. We explicitly check for the existence of an owner since                                          // 72\n      // it's possible for an element created outside a composite to be                                                // 73\n      // deeply mutated and reused.                                                                                    // 74\n                                                                                                                       // 75\n      // TODO: Bailing out early is just a perf optimization right?                                                    // 76\n      // TODO: Removing the return statement should affect correctness?                                                // 77\n      return;                                                                                                          // 78\n    }                                                                                                                  // 79\n                                                                                                                       // 80\n    var refsChanged = ReactRef.shouldUpdateRefs(prevElement, nextElement);                                             // 81\n                                                                                                                       // 82\n    if (refsChanged) {                                                                                                 // 83\n      ReactRef.detachRefs(internalInstance, prevElement);                                                              // 84\n    }                                                                                                                  // 85\n                                                                                                                       // 86\n    internalInstance.receiveComponent(nextElement, transaction, context);                                              // 87\n                                                                                                                       // 88\n    if (refsChanged && internalInstance._currentElement && internalInstance._currentElement.ref != null) {             // 89\n      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);                                          // 90\n    }                                                                                                                  // 91\n  },                                                                                                                   // 92\n                                                                                                                       // 93\n  /**                                                                                                                  // 94\n   * Flush any dirty changes in a component.                                                                           // 95\n   *                                                                                                                   // 96\n   * @param {ReactComponent} internalInstance                                                                          // 97\n   * @param {ReactReconcileTransaction} transaction                                                                    // 98\n   * @internal                                                                                                         // 99\n   */                                                                                                                  // 100\n  performUpdateIfNecessary: function (internalInstance, transaction) {                                                 // 101\n    internalInstance.performUpdateIfNecessary(transaction);                                                            // 102\n  }                                                                                                                    // 103\n                                                                                                                       // 104\n};                                                                                                                     // 105\n                                                                                                                       // 106\nmodule.exports = ReactReconciler;                                                                                      // 107\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactRef.js\":[\"./ReactOwner\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactRef.js                                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactRef                                                                                            // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar ReactOwner = require('./ReactOwner');                                                                              // 14\n                                                                                                                       // 15\nvar ReactRef = {};                                                                                                     // 16\n                                                                                                                       // 17\nfunction attachRef(ref, component, owner) {                                                                            // 18\n  if (typeof ref === 'function') {                                                                                     // 19\n    ref(component.getPublicInstance());                                                                                // 20\n  } else {                                                                                                             // 21\n    // Legacy ref                                                                                                      // 22\n    ReactOwner.addComponentAsRefTo(component, ref, owner);                                                             // 23\n  }                                                                                                                    // 24\n}                                                                                                                      // 25\n                                                                                                                       // 26\nfunction detachRef(ref, component, owner) {                                                                            // 27\n  if (typeof ref === 'function') {                                                                                     // 28\n    ref(null);                                                                                                         // 29\n  } else {                                                                                                             // 30\n    // Legacy ref                                                                                                      // 31\n    ReactOwner.removeComponentAsRefFrom(component, ref, owner);                                                        // 32\n  }                                                                                                                    // 33\n}                                                                                                                      // 34\n                                                                                                                       // 35\nReactRef.attachRefs = function (instance, element) {                                                                   // 36\n  if (element === null || element === false) {                                                                         // 37\n    return;                                                                                                            // 38\n  }                                                                                                                    // 39\n  var ref = element.ref;                                                                                               // 40\n  if (ref != null) {                                                                                                   // 41\n    attachRef(ref, instance, element._owner);                                                                          // 42\n  }                                                                                                                    // 43\n};                                                                                                                     // 44\n                                                                                                                       // 45\nReactRef.shouldUpdateRefs = function (prevElement, nextElement) {                                                      // 46\n  // If either the owner or a `ref` has changed, make sure the newest owner                                            // 47\n  // has stored a reference to `this`, and the previous owner (if different)                                           // 48\n  // has forgotten the reference to `this`. We use the element instead                                                 // 49\n  // of the public this.props because the post processing cannot determine                                             // 50\n  // a ref. The ref conceptually lives on the element.                                                                 // 51\n                                                                                                                       // 52\n  // TODO: Should this even be possible? The owner cannot change because                                               // 53\n  // it's forbidden by shouldUpdateReactComponent. The ref can change                                                  // 54\n  // if you swap the keys of but not the refs. Reconsider where this check                                             // 55\n  // is made. It probably belongs where the key checking and                                                           // 56\n  // instantiateReactComponent is done.                                                                                // 57\n                                                                                                                       // 58\n  var prevEmpty = prevElement === null || prevElement === false;                                                       // 59\n  var nextEmpty = nextElement === null || nextElement === false;                                                       // 60\n                                                                                                                       // 61\n  return(                                                                                                              // 62\n    // This has a few false positives w/r/t empty components.                                                          // 63\n    prevEmpty || nextEmpty || nextElement._owner !== prevElement._owner || nextElement.ref !== prevElement.ref         // 64\n  );                                                                                                                   // 65\n};                                                                                                                     // 66\n                                                                                                                       // 67\nReactRef.detachRefs = function (instance, element) {                                                                   // 68\n  if (element === null || element === false) {                                                                         // 69\n    return;                                                                                                            // 70\n  }                                                                                                                    // 71\n  var ref = element.ref;                                                                                               // 72\n  if (ref != null) {                                                                                                   // 73\n    detachRef(ref, instance, element._owner);                                                                          // 74\n  }                                                                                                                    // 75\n};                                                                                                                     // 76\n                                                                                                                       // 77\nmodule.exports = ReactRef;                                                                                             // 78\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactOwner.js\":[\"fbjs/lib/invariant\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactOwner.js                                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactOwner                                                                                          // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar invariant = require('fbjs/lib/invariant');                                                                         // 14\n                                                                                                                       // 15\n/**                                                                                                                    // 16\n * ReactOwners are capable of storing references to owned components.                                                  // 17\n *                                                                                                                     // 18\n * All components are capable of //being// referenced by owner components, but                                         // 19\n * only ReactOwner components are capable of //referencing// owned components.                                         // 20\n * The named reference is known as a \"ref\".                                                                            // 21\n *                                                                                                                     // 22\n * Refs are available when mounted and updated during reconciliation.                                                  // 23\n *                                                                                                                     // 24\n *   var MyComponent = React.createClass({                                                                             // 25\n *     render: function() {                                                                                            // 26\n *       return (                                                                                                      // 27\n *         <div onClick={this.handleClick}>                                                                            // 28\n *           <CustomComponent ref=\"custom\" />                                                                          // 29\n *         </div>                                                                                                      // 30\n *       );                                                                                                            // 31\n *     },                                                                                                              // 32\n *     handleClick: function() {                                                                                       // 33\n *       this.refs.custom.handleClick();                                                                               // 34\n *     },                                                                                                              // 35\n *     componentDidMount: function() {                                                                                 // 36\n *       this.refs.custom.initialize();                                                                                // 37\n *     }                                                                                                               // 38\n *   });                                                                                                               // 39\n *                                                                                                                     // 40\n * Refs should rarely be used. When refs are used, they should only be done to                                         // 41\n * control data that is not handled by React's data flow.                                                              // 42\n *                                                                                                                     // 43\n * @class ReactOwner                                                                                                   // 44\n */                                                                                                                    // 45\nvar ReactOwner = {                                                                                                     // 46\n                                                                                                                       // 47\n  /**                                                                                                                  // 48\n   * @param {?object} object                                                                                           // 49\n   * @return {boolean} True if `object` is a valid owner.                                                              // 50\n   * @final                                                                                                            // 51\n   */                                                                                                                  // 52\n  isValidOwner: function (object) {                                                                                    // 53\n    return !!(object && typeof object.attachRef === 'function' && typeof object.detachRef === 'function');             // 54\n  },                                                                                                                   // 55\n                                                                                                                       // 56\n  /**                                                                                                                  // 57\n   * Adds a component by ref to an owner component.                                                                    // 58\n   *                                                                                                                   // 59\n   * @param {ReactComponent} component Component to reference.                                                         // 60\n   * @param {string} ref Name by which to refer to the component.                                                      // 61\n   * @param {ReactOwner} owner Component on which to record the ref.                                                   // 62\n   * @final                                                                                                            // 63\n   * @internal                                                                                                         // 64\n   */                                                                                                                  // 65\n  addComponentAsRefTo: function (component, ref, owner) {                                                              // 66\n    !ReactOwner.isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'addComponentAsRefTo(...): Only a ReactOwner can have refs. You might ' + 'be adding a ref to a component that was not created inside a component\\'s ' + '`render` method, or you have multiple copies of React loaded ' + '(details: https://fb.me/react-refs-must-have-owner).') : invariant(false) : undefined;\n    owner.attachRef(ref, component);                                                                                   // 68\n  },                                                                                                                   // 69\n                                                                                                                       // 70\n  /**                                                                                                                  // 71\n   * Removes a component by ref from an owner component.                                                               // 72\n   *                                                                                                                   // 73\n   * @param {ReactComponent} component Component to dereference.                                                       // 74\n   * @param {string} ref Name of the ref to remove.                                                                    // 75\n   * @param {ReactOwner} owner Component on which the ref is recorded.                                                 // 76\n   * @final                                                                                                            // 77\n   * @internal                                                                                                         // 78\n   */                                                                                                                  // 79\n  removeComponentAsRefFrom: function (component, ref, owner) {                                                         // 80\n    !ReactOwner.isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. You might ' + 'be removing a ref to a component that was not created inside a component\\'s ' + '`render` method, or you have multiple copies of React loaded ' + '(details: https://fb.me/react-refs-must-have-owner).') : invariant(false) : undefined;\n    // Check that `component` is still the current ref because we do not want to                                       // 82\n    // detach the ref if another component stole it.                                                                   // 83\n    if (owner.getPublicInstance().refs[ref] === component.getPublicInstance()) {                                       // 84\n      owner.detachRef(ref);                                                                                            // 85\n    }                                                                                                                  // 86\n  }                                                                                                                    // 87\n                                                                                                                       // 88\n};                                                                                                                     // 89\n                                                                                                                       // 90\nmodule.exports = ReactOwner;                                                                                           // 91\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactUpdateQueue.js\":[\"./ReactCurrentOwner\",\"./ReactElement\",\"./ReactInstanceMap\",\"./ReactUpdates\",\"./Object.assign\",\"fbjs/lib/invariant\",\"fbjs/lib/warning\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactUpdateQueue.js                                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2015, Facebook, Inc.                                                                                      // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactUpdateQueue                                                                                    // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar ReactCurrentOwner = require('./ReactCurrentOwner');                                                                // 14\nvar ReactElement = require('./ReactElement');                                                                          // 15\nvar ReactInstanceMap = require('./ReactInstanceMap');                                                                  // 16\nvar ReactUpdates = require('./ReactUpdates');                                                                          // 17\n                                                                                                                       // 18\nvar assign = require('./Object.assign');                                                                               // 19\nvar invariant = require('fbjs/lib/invariant');                                                                         // 20\nvar warning = require('fbjs/lib/warning');                                                                             // 21\n                                                                                                                       // 22\nfunction enqueueUpdate(internalInstance) {                                                                             // 23\n  ReactUpdates.enqueueUpdate(internalInstance);                                                                        // 24\n}                                                                                                                      // 25\n                                                                                                                       // 26\nfunction getInternalInstanceReadyForUpdate(publicInstance, callerName) {                                               // 27\n  var internalInstance = ReactInstanceMap.get(publicInstance);                                                         // 28\n  if (!internalInstance) {                                                                                             // 29\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 30\n      // Only warn when we have a callerName. Otherwise we should be silent.                                           // 31\n      // We're probably calling from enqueueCallback. We don't want to warn                                            // 32\n      // there because we already warned for the corresponding lifecycle method.                                       // 33\n      process.env.NODE_ENV !== 'production' ? warning(!callerName, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, publicInstance.constructor.displayName) : undefined;\n    }                                                                                                                  // 35\n    return null;                                                                                                       // 36\n  }                                                                                                                    // 37\n                                                                                                                       // 38\n  if (process.env.NODE_ENV !== 'production') {                                                                         // 39\n    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '%s(...): Cannot update during an existing state transition ' + '(such as within `render`). Render methods should be a pure function ' + 'of props and state.', callerName) : undefined;\n  }                                                                                                                    // 41\n                                                                                                                       // 42\n  return internalInstance;                                                                                             // 43\n}                                                                                                                      // 44\n                                                                                                                       // 45\n/**                                                                                                                    // 46\n * ReactUpdateQueue allows for state updates to be scheduled into a later                                              // 47\n * reconciliation step.                                                                                                // 48\n */                                                                                                                    // 49\nvar ReactUpdateQueue = {                                                                                               // 50\n                                                                                                                       // 51\n  /**                                                                                                                  // 52\n   * Checks whether or not this composite component is mounted.                                                        // 53\n   * @param {ReactClass} publicInstance The instance we want to test.                                                  // 54\n   * @return {boolean} True if mounted, false otherwise.                                                               // 55\n   * @protected                                                                                                        // 56\n   * @final                                                                                                            // 57\n   */                                                                                                                  // 58\n  isMounted: function (publicInstance) {                                                                               // 59\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 60\n      var owner = ReactCurrentOwner.current;                                                                           // 61\n      if (owner !== null) {                                                                                            // 62\n        process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : undefined;\n        owner._warnedAboutRefsInRender = true;                                                                         // 64\n      }                                                                                                                // 65\n    }                                                                                                                  // 66\n    var internalInstance = ReactInstanceMap.get(publicInstance);                                                       // 67\n    if (internalInstance) {                                                                                            // 68\n      // During componentWillMount and render this will still be null but after                                        // 69\n      // that will always render to something. At least for now. So we can use                                         // 70\n      // this hack.                                                                                                    // 71\n      return !!internalInstance._renderedComponent;                                                                    // 72\n    } else {                                                                                                           // 73\n      return false;                                                                                                    // 74\n    }                                                                                                                  // 75\n  },                                                                                                                   // 76\n                                                                                                                       // 77\n  /**                                                                                                                  // 78\n   * Enqueue a callback that will be executed after all the pending updates                                            // 79\n   * have processed.                                                                                                   // 80\n   *                                                                                                                   // 81\n   * @param {ReactClass} publicInstance The instance to use as `this` context.                                         // 82\n   * @param {?function} callback Called after state is updated.                                                        // 83\n   * @internal                                                                                                         // 84\n   */                                                                                                                  // 85\n  enqueueCallback: function (publicInstance, callback) {                                                               // 86\n    !(typeof callback === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'enqueueCallback(...): You called `setProps`, `replaceProps`, ' + '`setState`, `replaceState`, or `forceUpdate` with a callback that ' + 'isn\\'t callable.') : invariant(false) : undefined;\n    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);                                          // 88\n                                                                                                                       // 89\n    // Previously we would throw an error if we didn't have an internal                                                // 90\n    // instance. Since we want to make it a no-op instead, we mirror the same                                          // 91\n    // behavior we have in other enqueue* methods.                                                                     // 92\n    // We also need to ignore callbacks in componentWillMount. See                                                     // 93\n    // enqueueUpdates.                                                                                                 // 94\n    if (!internalInstance) {                                                                                           // 95\n      return null;                                                                                                     // 96\n    }                                                                                                                  // 97\n                                                                                                                       // 98\n    if (internalInstance._pendingCallbacks) {                                                                          // 99\n      internalInstance._pendingCallbacks.push(callback);                                                               // 100\n    } else {                                                                                                           // 101\n      internalInstance._pendingCallbacks = [callback];                                                                 // 102\n    }                                                                                                                  // 103\n    // TODO: The callback here is ignored when setState is called from                                                 // 104\n    // componentWillMount. Either fix it or disallow doing so completely in                                            // 105\n    // favor of getInitialState. Alternatively, we can disallow                                                        // 106\n    // componentWillMount during server-side rendering.                                                                // 107\n    enqueueUpdate(internalInstance);                                                                                   // 108\n  },                                                                                                                   // 109\n                                                                                                                       // 110\n  enqueueCallbackInternal: function (internalInstance, callback) {                                                     // 111\n    !(typeof callback === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'enqueueCallback(...): You called `setProps`, `replaceProps`, ' + '`setState`, `replaceState`, or `forceUpdate` with a callback that ' + 'isn\\'t callable.') : invariant(false) : undefined;\n    if (internalInstance._pendingCallbacks) {                                                                          // 113\n      internalInstance._pendingCallbacks.push(callback);                                                               // 114\n    } else {                                                                                                           // 115\n      internalInstance._pendingCallbacks = [callback];                                                                 // 116\n    }                                                                                                                  // 117\n    enqueueUpdate(internalInstance);                                                                                   // 118\n  },                                                                                                                   // 119\n                                                                                                                       // 120\n  /**                                                                                                                  // 121\n   * Forces an update. This should only be invoked when it is known with                                               // 122\n   * certainty that we are **not** in a DOM transaction.                                                               // 123\n   *                                                                                                                   // 124\n   * You may want to call this when you know that some deeper aspect of the                                            // 125\n   * component's state has changed but `setState` was not called.                                                      // 126\n   *                                                                                                                   // 127\n   * This will not invoke `shouldComponentUpdate`, but it will invoke                                                  // 128\n   * `componentWillUpdate` and `componentDidUpdate`.                                                                   // 129\n   *                                                                                                                   // 130\n   * @param {ReactClass} publicInstance The instance that should rerender.                                             // 131\n   * @internal                                                                                                         // 132\n   */                                                                                                                  // 133\n  enqueueForceUpdate: function (publicInstance) {                                                                      // 134\n    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'forceUpdate');                           // 135\n                                                                                                                       // 136\n    if (!internalInstance) {                                                                                           // 137\n      return;                                                                                                          // 138\n    }                                                                                                                  // 139\n                                                                                                                       // 140\n    internalInstance._pendingForceUpdate = true;                                                                       // 141\n                                                                                                                       // 142\n    enqueueUpdate(internalInstance);                                                                                   // 143\n  },                                                                                                                   // 144\n                                                                                                                       // 145\n  /**                                                                                                                  // 146\n   * Replaces all of the state. Always use this or `setState` to mutate state.                                         // 147\n   * You should treat `this.state` as immutable.                                                                       // 148\n   *                                                                                                                   // 149\n   * There is no guarantee that `this.state` will be immediately updated, so                                           // 150\n   * accessing `this.state` after calling this method may return the old value.                                        // 151\n   *                                                                                                                   // 152\n   * @param {ReactClass} publicInstance The instance that should rerender.                                             // 153\n   * @param {object} completeState Next state.                                                                         // 154\n   * @internal                                                                                                         // 155\n   */                                                                                                                  // 156\n  enqueueReplaceState: function (publicInstance, completeState) {                                                      // 157\n    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceState');                          // 158\n                                                                                                                       // 159\n    if (!internalInstance) {                                                                                           // 160\n      return;                                                                                                          // 161\n    }                                                                                                                  // 162\n                                                                                                                       // 163\n    internalInstance._pendingStateQueue = [completeState];                                                             // 164\n    internalInstance._pendingReplaceState = true;                                                                      // 165\n                                                                                                                       // 166\n    enqueueUpdate(internalInstance);                                                                                   // 167\n  },                                                                                                                   // 168\n                                                                                                                       // 169\n  /**                                                                                                                  // 170\n   * Sets a subset of the state. This only exists because _pendingState is                                             // 171\n   * internal. This provides a merging strategy that is not available to deep                                          // 172\n   * properties which is confusing. TODO: Expose pendingState or don't use it                                          // 173\n   * during the merge.                                                                                                 // 174\n   *                                                                                                                   // 175\n   * @param {ReactClass} publicInstance The instance that should rerender.                                             // 176\n   * @param {object} partialState Next partial state to be merged with state.                                          // 177\n   * @internal                                                                                                         // 178\n   */                                                                                                                  // 179\n  enqueueSetState: function (publicInstance, partialState) {                                                           // 180\n    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setState');                              // 181\n                                                                                                                       // 182\n    if (!internalInstance) {                                                                                           // 183\n      return;                                                                                                          // 184\n    }                                                                                                                  // 185\n                                                                                                                       // 186\n    var queue = internalInstance._pendingStateQueue || (internalInstance._pendingStateQueue = []);                     // 187\n    queue.push(partialState);                                                                                          // 188\n                                                                                                                       // 189\n    enqueueUpdate(internalInstance);                                                                                   // 190\n  },                                                                                                                   // 191\n                                                                                                                       // 192\n  /**                                                                                                                  // 193\n   * Sets a subset of the props.                                                                                       // 194\n   *                                                                                                                   // 195\n   * @param {ReactClass} publicInstance The instance that should rerender.                                             // 196\n   * @param {object} partialProps Subset of the next props.                                                            // 197\n   * @internal                                                                                                         // 198\n   */                                                                                                                  // 199\n  enqueueSetProps: function (publicInstance, partialProps) {                                                           // 200\n    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setProps');                              // 201\n    if (!internalInstance) {                                                                                           // 202\n      return;                                                                                                          // 203\n    }                                                                                                                  // 204\n    ReactUpdateQueue.enqueueSetPropsInternal(internalInstance, partialProps);                                          // 205\n  },                                                                                                                   // 206\n                                                                                                                       // 207\n  enqueueSetPropsInternal: function (internalInstance, partialProps) {                                                 // 208\n    var topLevelWrapper = internalInstance._topLevelWrapper;                                                           // 209\n    !topLevelWrapper ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setProps(...): You called `setProps` on a ' + 'component with a parent. This is an anti-pattern since props will ' + 'get reactively updated when rendered. Instead, change the owner\\'s ' + '`render` method to pass the correct value as props to the component ' + 'where it is created.') : invariant(false) : undefined;\n                                                                                                                       // 211\n    // Merge with the pending element if it exists, otherwise with existing                                            // 212\n    // element props.                                                                                                  // 213\n    var wrapElement = topLevelWrapper._pendingElement || topLevelWrapper._currentElement;                              // 214\n    var element = wrapElement.props;                                                                                   // 215\n    var props = assign({}, element.props, partialProps);                                                               // 216\n    topLevelWrapper._pendingElement = ReactElement.cloneAndReplaceProps(wrapElement, ReactElement.cloneAndReplaceProps(element, props));\n                                                                                                                       // 218\n    enqueueUpdate(topLevelWrapper);                                                                                    // 219\n  },                                                                                                                   // 220\n                                                                                                                       // 221\n  /**                                                                                                                  // 222\n   * Replaces all of the props.                                                                                        // 223\n   *                                                                                                                   // 224\n   * @param {ReactClass} publicInstance The instance that should rerender.                                             // 225\n   * @param {object} props New props.                                                                                  // 226\n   * @internal                                                                                                         // 227\n   */                                                                                                                  // 228\n  enqueueReplaceProps: function (publicInstance, props) {                                                              // 229\n    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceProps');                          // 230\n    if (!internalInstance) {                                                                                           // 231\n      return;                                                                                                          // 232\n    }                                                                                                                  // 233\n    ReactUpdateQueue.enqueueReplacePropsInternal(internalInstance, props);                                             // 234\n  },                                                                                                                   // 235\n                                                                                                                       // 236\n  enqueueReplacePropsInternal: function (internalInstance, props) {                                                    // 237\n    var topLevelWrapper = internalInstance._topLevelWrapper;                                                           // 238\n    !topLevelWrapper ? process.env.NODE_ENV !== 'production' ? invariant(false, 'replaceProps(...): You called `replaceProps` on a ' + 'component with a parent. This is an anti-pattern since props will ' + 'get reactively updated when rendered. Instead, change the owner\\'s ' + '`render` method to pass the correct value as props to the component ' + 'where it is created.') : invariant(false) : undefined;\n                                                                                                                       // 240\n    // Merge with the pending element if it exists, otherwise with existing                                            // 241\n    // element props.                                                                                                  // 242\n    var wrapElement = topLevelWrapper._pendingElement || topLevelWrapper._currentElement;                              // 243\n    var element = wrapElement.props;                                                                                   // 244\n    topLevelWrapper._pendingElement = ReactElement.cloneAndReplaceProps(wrapElement, ReactElement.cloneAndReplaceProps(element, props));\n                                                                                                                       // 246\n    enqueueUpdate(topLevelWrapper);                                                                                    // 247\n  },                                                                                                                   // 248\n                                                                                                                       // 249\n  enqueueElementInternal: function (internalInstance, newElement) {                                                    // 250\n    internalInstance._pendingElement = newElement;                                                                     // 251\n    enqueueUpdate(internalInstance);                                                                                   // 252\n  }                                                                                                                    // 253\n                                                                                                                       // 254\n};                                                                                                                     // 255\n                                                                                                                       // 256\nmodule.exports = ReactUpdateQueue;                                                                                     // 257\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactUpdates.js\":[\"./CallbackQueue\",\"./PooledClass\",\"./ReactPerf\",\"./ReactReconciler\",\"./Transaction\",\"./Object.assign\",\"fbjs/lib/invariant\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactUpdates.js                                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactUpdates                                                                                        // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar CallbackQueue = require('./CallbackQueue');                                                                        // 14\nvar PooledClass = require('./PooledClass');                                                                            // 15\nvar ReactPerf = require('./ReactPerf');                                                                                // 16\nvar ReactReconciler = require('./ReactReconciler');                                                                    // 17\nvar Transaction = require('./Transaction');                                                                            // 18\n                                                                                                                       // 19\nvar assign = require('./Object.assign');                                                                               // 20\nvar invariant = require('fbjs/lib/invariant');                                                                         // 21\n                                                                                                                       // 22\nvar dirtyComponents = [];                                                                                              // 23\nvar asapCallbackQueue = CallbackQueue.getPooled();                                                                     // 24\nvar asapEnqueued = false;                                                                                              // 25\n                                                                                                                       // 26\nvar batchingStrategy = null;                                                                                           // 27\n                                                                                                                       // 28\nfunction ensureInjected() {                                                                                            // 29\n  !(ReactUpdates.ReactReconcileTransaction && batchingStrategy) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must inject a reconcile transaction class and batching ' + 'strategy') : invariant(false) : undefined;\n}                                                                                                                      // 31\n                                                                                                                       // 32\nvar NESTED_UPDATES = {                                                                                                 // 33\n  initialize: function () {                                                                                            // 34\n    this.dirtyComponentsLength = dirtyComponents.length;                                                               // 35\n  },                                                                                                                   // 36\n  close: function () {                                                                                                 // 37\n    if (this.dirtyComponentsLength !== dirtyComponents.length) {                                                       // 38\n      // Additional updates were enqueued by componentDidUpdate handlers or                                            // 39\n      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run                                        // 40\n      // these new updates so that if A's componentDidUpdate calls setState on                                         // 41\n      // B, B will update before the callback A's updater provided when calling                                        // 42\n      // setState.                                                                                                     // 43\n      dirtyComponents.splice(0, this.dirtyComponentsLength);                                                           // 44\n      flushBatchedUpdates();                                                                                           // 45\n    } else {                                                                                                           // 46\n      dirtyComponents.length = 0;                                                                                      // 47\n    }                                                                                                                  // 48\n  }                                                                                                                    // 49\n};                                                                                                                     // 50\n                                                                                                                       // 51\nvar UPDATE_QUEUEING = {                                                                                                // 52\n  initialize: function () {                                                                                            // 53\n    this.callbackQueue.reset();                                                                                        // 54\n  },                                                                                                                   // 55\n  close: function () {                                                                                                 // 56\n    this.callbackQueue.notifyAll();                                                                                    // 57\n  }                                                                                                                    // 58\n};                                                                                                                     // 59\n                                                                                                                       // 60\nvar TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];                                                          // 61\n                                                                                                                       // 62\nfunction ReactUpdatesFlushTransaction() {                                                                              // 63\n  this.reinitializeTransaction();                                                                                      // 64\n  this.dirtyComponentsLength = null;                                                                                   // 65\n  this.callbackQueue = CallbackQueue.getPooled();                                                                      // 66\n  this.reconcileTransaction = ReactUpdates.ReactReconcileTransaction.getPooled( /* forceHTML */false);                 // 67\n}                                                                                                                      // 68\n                                                                                                                       // 69\nassign(ReactUpdatesFlushTransaction.prototype, Transaction.Mixin, {                                                    // 70\n  getTransactionWrappers: function () {                                                                                // 71\n    return TRANSACTION_WRAPPERS;                                                                                       // 72\n  },                                                                                                                   // 73\n                                                                                                                       // 74\n  destructor: function () {                                                                                            // 75\n    this.dirtyComponentsLength = null;                                                                                 // 76\n    CallbackQueue.release(this.callbackQueue);                                                                         // 77\n    this.callbackQueue = null;                                                                                         // 78\n    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);                                         // 79\n    this.reconcileTransaction = null;                                                                                  // 80\n  },                                                                                                                   // 81\n                                                                                                                       // 82\n  perform: function (method, scope, a) {                                                                               // 83\n    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`                                         // 84\n    // with this transaction's wrappers around it.                                                                     // 85\n    return Transaction.Mixin.perform.call(this, this.reconcileTransaction.perform, this.reconcileTransaction, method, scope, a);\n  }                                                                                                                    // 87\n});                                                                                                                    // 88\n                                                                                                                       // 89\nPooledClass.addPoolingTo(ReactUpdatesFlushTransaction);                                                                // 90\n                                                                                                                       // 91\nfunction batchedUpdates(callback, a, b, c, d, e) {                                                                     // 92\n  ensureInjected();                                                                                                    // 93\n  batchingStrategy.batchedUpdates(callback, a, b, c, d, e);                                                            // 94\n}                                                                                                                      // 95\n                                                                                                                       // 96\n/**                                                                                                                    // 97\n * Array comparator for ReactComponents by mount ordering.                                                             // 98\n *                                                                                                                     // 99\n * @param {ReactComponent} c1 first component you're comparing                                                         // 100\n * @param {ReactComponent} c2 second component you're comparing                                                        // 101\n * @return {number} Return value usable by Array.prototype.sort().                                                     // 102\n */                                                                                                                    // 103\nfunction mountOrderComparator(c1, c2) {                                                                                // 104\n  return c1._mountOrder - c2._mountOrder;                                                                              // 105\n}                                                                                                                      // 106\n                                                                                                                       // 107\nfunction runBatchedUpdates(transaction) {                                                                              // 108\n  var len = transaction.dirtyComponentsLength;                                                                         // 109\n  !(len === dirtyComponents.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected flush transaction\\'s stored dirty-components length (%s) to ' + 'match dirty-components array length (%s).', len, dirtyComponents.length) : invariant(false) : undefined;\n                                                                                                                       // 111\n  // Since reconciling a component higher in the owner hierarchy usually (not                                          // 112\n  // always -- see shouldComponentUpdate()) will reconcile children, reconcile                                         // 113\n  // them before their children by sorting the array.                                                                  // 114\n  dirtyComponents.sort(mountOrderComparator);                                                                          // 115\n                                                                                                                       // 116\n  for (var i = 0; i < len; i++) {                                                                                      // 117\n    // If a component is unmounted before pending changes apply, it will still                                         // 118\n    // be here, but we assume that it has cleared its _pendingCallbacks and                                            // 119\n    // that performUpdateIfNecessary is a noop.                                                                        // 120\n    var component = dirtyComponents[i];                                                                                // 121\n                                                                                                                       // 122\n    // If performUpdateIfNecessary happens to enqueue any new updates, we                                              // 123\n    // shouldn't execute the callbacks until the next render happens, so                                               // 124\n    // stash the callbacks first                                                                                       // 125\n    var callbacks = component._pendingCallbacks;                                                                       // 126\n    component._pendingCallbacks = null;                                                                                // 127\n                                                                                                                       // 128\n    ReactReconciler.performUpdateIfNecessary(component, transaction.reconcileTransaction);                             // 129\n                                                                                                                       // 130\n    if (callbacks) {                                                                                                   // 131\n      for (var j = 0; j < callbacks.length; j++) {                                                                     // 132\n        transaction.callbackQueue.enqueue(callbacks[j], component.getPublicInstance());                                // 133\n      }                                                                                                                // 134\n    }                                                                                                                  // 135\n  }                                                                                                                    // 136\n}                                                                                                                      // 137\n                                                                                                                       // 138\nvar flushBatchedUpdates = function () {                                                                                // 139\n  // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents                                            // 140\n  // array and perform any updates enqueued by mount-ready handlers (i.e.,                                             // 141\n  // componentDidUpdate) but we need to check here too in order to catch                                               // 142\n  // updates enqueued by setState callbacks and asap calls.                                                            // 143\n  while (dirtyComponents.length || asapEnqueued) {                                                                     // 144\n    if (dirtyComponents.length) {                                                                                      // 145\n      var transaction = ReactUpdatesFlushTransaction.getPooled();                                                      // 146\n      transaction.perform(runBatchedUpdates, null, transaction);                                                       // 147\n      ReactUpdatesFlushTransaction.release(transaction);                                                               // 148\n    }                                                                                                                  // 149\n                                                                                                                       // 150\n    if (asapEnqueued) {                                                                                                // 151\n      asapEnqueued = false;                                                                                            // 152\n      var queue = asapCallbackQueue;                                                                                   // 153\n      asapCallbackQueue = CallbackQueue.getPooled();                                                                   // 154\n      queue.notifyAll();                                                                                               // 155\n      CallbackQueue.release(queue);                                                                                    // 156\n    }                                                                                                                  // 157\n  }                                                                                                                    // 158\n};                                                                                                                     // 159\nflushBatchedUpdates = ReactPerf.measure('ReactUpdates', 'flushBatchedUpdates', flushBatchedUpdates);                   // 160\n                                                                                                                       // 161\n/**                                                                                                                    // 162\n * Mark a component as needing a rerender, adding an optional callback to a                                            // 163\n * list of functions which will be executed once the rerender occurs.                                                  // 164\n */                                                                                                                    // 165\nfunction enqueueUpdate(component) {                                                                                    // 166\n  ensureInjected();                                                                                                    // 167\n                                                                                                                       // 168\n  // Various parts of our code (such as ReactCompositeComponent's                                                      // 169\n  // _renderValidatedComponent) assume that calls to render aren't nested;                                             // 170\n  // verify that that's the case. (This is called by each top-level update                                             // 171\n  // function, like setProps, setState, forceUpdate, etc.; creation and                                                // 172\n  // destruction of top-level components is guarded in ReactMount.)                                                    // 173\n                                                                                                                       // 174\n  if (!batchingStrategy.isBatchingUpdates) {                                                                           // 175\n    batchingStrategy.batchedUpdates(enqueueUpdate, component);                                                         // 176\n    return;                                                                                                            // 177\n  }                                                                                                                    // 178\n                                                                                                                       // 179\n  dirtyComponents.push(component);                                                                                     // 180\n}                                                                                                                      // 181\n                                                                                                                       // 182\n/**                                                                                                                    // 183\n * Enqueue a callback to be run at the end of the current batching cycle. Throws                                       // 184\n * if no updates are currently being performed.                                                                        // 185\n */                                                                                                                    // 186\nfunction asap(callback, context) {                                                                                     // 187\n  !batchingStrategy.isBatchingUpdates ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates.asap: Can\\'t enqueue an asap callback in a context where' + 'updates are not being batched.') : invariant(false) : undefined;\n  asapCallbackQueue.enqueue(callback, context);                                                                        // 189\n  asapEnqueued = true;                                                                                                 // 190\n}                                                                                                                      // 191\n                                                                                                                       // 192\nvar ReactUpdatesInjection = {                                                                                          // 193\n  injectReconcileTransaction: function (ReconcileTransaction) {                                                        // 194\n    !ReconcileTransaction ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a reconcile transaction class') : invariant(false) : undefined;\n    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;                                                     // 196\n  },                                                                                                                   // 197\n                                                                                                                       // 198\n  injectBatchingStrategy: function (_batchingStrategy) {                                                               // 199\n    !_batchingStrategy ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batching strategy') : invariant(false) : undefined;\n    !(typeof _batchingStrategy.batchedUpdates === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batchedUpdates() function') : invariant(false) : undefined;\n    !(typeof _batchingStrategy.isBatchingUpdates === 'boolean') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide an isBatchingUpdates boolean attribute') : invariant(false) : undefined;\n    batchingStrategy = _batchingStrategy;                                                                              // 203\n  }                                                                                                                    // 204\n};                                                                                                                     // 205\n                                                                                                                       // 206\nvar ReactUpdates = {                                                                                                   // 207\n  /**                                                                                                                  // 208\n   * React references `ReactReconcileTransaction` using this property in order                                         // 209\n   * to allow dependency injection.                                                                                    // 210\n   *                                                                                                                   // 211\n   * @internal                                                                                                         // 212\n   */                                                                                                                  // 213\n  ReactReconcileTransaction: null,                                                                                     // 214\n                                                                                                                       // 215\n  batchedUpdates: batchedUpdates,                                                                                      // 216\n  enqueueUpdate: enqueueUpdate,                                                                                        // 217\n  flushBatchedUpdates: flushBatchedUpdates,                                                                            // 218\n  injection: ReactUpdatesInjection,                                                                                    // 219\n  asap: asap                                                                                                           // 220\n};                                                                                                                     // 221\n                                                                                                                       // 222\nmodule.exports = ReactUpdates;                                                                                         // 223\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"CallbackQueue.js\":[\"./PooledClass\",\"./Object.assign\",\"fbjs/lib/invariant\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/CallbackQueue.js                                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule CallbackQueue                                                                                       // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar PooledClass = require('./PooledClass');                                                                            // 14\n                                                                                                                       // 15\nvar assign = require('./Object.assign');                                                                               // 16\nvar invariant = require('fbjs/lib/invariant');                                                                         // 17\n                                                                                                                       // 18\n/**                                                                                                                    // 19\n * A specialized pseudo-event module to help keep track of components waiting to                                       // 20\n * be notified when their DOM representations are available for use.                                                   // 21\n *                                                                                                                     // 22\n * This implements `PooledClass`, so you should never need to instantiate this.                                        // 23\n * Instead, use `CallbackQueue.getPooled()`.                                                                           // 24\n *                                                                                                                     // 25\n * @class ReactMountReady                                                                                              // 26\n * @implements PooledClass                                                                                             // 27\n * @internal                                                                                                           // 28\n */                                                                                                                    // 29\nfunction CallbackQueue() {                                                                                             // 30\n  this._callbacks = null;                                                                                              // 31\n  this._contexts = null;                                                                                               // 32\n}                                                                                                                      // 33\n                                                                                                                       // 34\nassign(CallbackQueue.prototype, {                                                                                      // 35\n                                                                                                                       // 36\n  /**                                                                                                                  // 37\n   * Enqueues a callback to be invoked when `notifyAll` is invoked.                                                    // 38\n   *                                                                                                                   // 39\n   * @param {function} callback Invoked when `notifyAll` is invoked.                                                   // 40\n   * @param {?object} context Context to call `callback` with.                                                         // 41\n   * @internal                                                                                                         // 42\n   */                                                                                                                  // 43\n  enqueue: function (callback, context) {                                                                              // 44\n    this._callbacks = this._callbacks || [];                                                                           // 45\n    this._contexts = this._contexts || [];                                                                             // 46\n    this._callbacks.push(callback);                                                                                    // 47\n    this._contexts.push(context);                                                                                      // 48\n  },                                                                                                                   // 49\n                                                                                                                       // 50\n  /**                                                                                                                  // 51\n   * Invokes all enqueued callbacks and clears the queue. This is invoked after                                        // 52\n   * the DOM representation of a component has been created or updated.                                                // 53\n   *                                                                                                                   // 54\n   * @internal                                                                                                         // 55\n   */                                                                                                                  // 56\n  notifyAll: function () {                                                                                             // 57\n    var callbacks = this._callbacks;                                                                                   // 58\n    var contexts = this._contexts;                                                                                     // 59\n    if (callbacks) {                                                                                                   // 60\n      !(callbacks.length === contexts.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Mismatched list of contexts in callback queue') : invariant(false) : undefined;\n      this._callbacks = null;                                                                                          // 62\n      this._contexts = null;                                                                                           // 63\n      for (var i = 0; i < callbacks.length; i++) {                                                                     // 64\n        callbacks[i].call(contexts[i]);                                                                                // 65\n      }                                                                                                                // 66\n      callbacks.length = 0;                                                                                            // 67\n      contexts.length = 0;                                                                                             // 68\n    }                                                                                                                  // 69\n  },                                                                                                                   // 70\n                                                                                                                       // 71\n  /**                                                                                                                  // 72\n   * Resets the internal queue.                                                                                        // 73\n   *                                                                                                                   // 74\n   * @internal                                                                                                         // 75\n   */                                                                                                                  // 76\n  reset: function () {                                                                                                 // 77\n    this._callbacks = null;                                                                                            // 78\n    this._contexts = null;                                                                                             // 79\n  },                                                                                                                   // 80\n                                                                                                                       // 81\n  /**                                                                                                                  // 82\n   * `PooledClass` looks for this.                                                                                     // 83\n   */                                                                                                                  // 84\n  destructor: function () {                                                                                            // 85\n    this.reset();                                                                                                      // 86\n  }                                                                                                                    // 87\n                                                                                                                       // 88\n});                                                                                                                    // 89\n                                                                                                                       // 90\nPooledClass.addPoolingTo(CallbackQueue);                                                                               // 91\n                                                                                                                       // 92\nmodule.exports = CallbackQueue;                                                                                        // 93\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"PooledClass.js\":[\"fbjs/lib/invariant\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/PooledClass.js                                                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule PooledClass                                                                                         // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar invariant = require('fbjs/lib/invariant');                                                                         // 14\n                                                                                                                       // 15\n/**                                                                                                                    // 16\n * Static poolers. Several custom versions for each potential number of                                                // 17\n * arguments. A completely generic pooler is easy to implement, but would                                              // 18\n * require accessing the `arguments` object. In each of these, `this` refers to                                        // 19\n * the Class itself, not an instance. If any others are needed, simply add them                                        // 20\n * here, or in their own files.                                                                                        // 21\n */                                                                                                                    // 22\nvar oneArgumentPooler = function (copyFieldsFrom) {                                                                    // 23\n  var Klass = this;                                                                                                    // 24\n  if (Klass.instancePool.length) {                                                                                     // 25\n    var instance = Klass.instancePool.pop();                                                                           // 26\n    Klass.call(instance, copyFieldsFrom);                                                                              // 27\n    return instance;                                                                                                   // 28\n  } else {                                                                                                             // 29\n    return new Klass(copyFieldsFrom);                                                                                  // 30\n  }                                                                                                                    // 31\n};                                                                                                                     // 32\n                                                                                                                       // 33\nvar twoArgumentPooler = function (a1, a2) {                                                                            // 34\n  var Klass = this;                                                                                                    // 35\n  if (Klass.instancePool.length) {                                                                                     // 36\n    var instance = Klass.instancePool.pop();                                                                           // 37\n    Klass.call(instance, a1, a2);                                                                                      // 38\n    return instance;                                                                                                   // 39\n  } else {                                                                                                             // 40\n    return new Klass(a1, a2);                                                                                          // 41\n  }                                                                                                                    // 42\n};                                                                                                                     // 43\n                                                                                                                       // 44\nvar threeArgumentPooler = function (a1, a2, a3) {                                                                      // 45\n  var Klass = this;                                                                                                    // 46\n  if (Klass.instancePool.length) {                                                                                     // 47\n    var instance = Klass.instancePool.pop();                                                                           // 48\n    Klass.call(instance, a1, a2, a3);                                                                                  // 49\n    return instance;                                                                                                   // 50\n  } else {                                                                                                             // 51\n    return new Klass(a1, a2, a3);                                                                                      // 52\n  }                                                                                                                    // 53\n};                                                                                                                     // 54\n                                                                                                                       // 55\nvar fourArgumentPooler = function (a1, a2, a3, a4) {                                                                   // 56\n  var Klass = this;                                                                                                    // 57\n  if (Klass.instancePool.length) {                                                                                     // 58\n    var instance = Klass.instancePool.pop();                                                                           // 59\n    Klass.call(instance, a1, a2, a3, a4);                                                                              // 60\n    return instance;                                                                                                   // 61\n  } else {                                                                                                             // 62\n    return new Klass(a1, a2, a3, a4);                                                                                  // 63\n  }                                                                                                                    // 64\n};                                                                                                                     // 65\n                                                                                                                       // 66\nvar fiveArgumentPooler = function (a1, a2, a3, a4, a5) {                                                               // 67\n  var Klass = this;                                                                                                    // 68\n  if (Klass.instancePool.length) {                                                                                     // 69\n    var instance = Klass.instancePool.pop();                                                                           // 70\n    Klass.call(instance, a1, a2, a3, a4, a5);                                                                          // 71\n    return instance;                                                                                                   // 72\n  } else {                                                                                                             // 73\n    return new Klass(a1, a2, a3, a4, a5);                                                                              // 74\n  }                                                                                                                    // 75\n};                                                                                                                     // 76\n                                                                                                                       // 77\nvar standardReleaser = function (instance) {                                                                           // 78\n  var Klass = this;                                                                                                    // 79\n  !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : invariant(false) : undefined;\n  instance.destructor();                                                                                               // 81\n  if (Klass.instancePool.length < Klass.poolSize) {                                                                    // 82\n    Klass.instancePool.push(instance);                                                                                 // 83\n  }                                                                                                                    // 84\n};                                                                                                                     // 85\n                                                                                                                       // 86\nvar DEFAULT_POOL_SIZE = 10;                                                                                            // 87\nvar DEFAULT_POOLER = oneArgumentPooler;                                                                                // 88\n                                                                                                                       // 89\n/**                                                                                                                    // 90\n * Augments `CopyConstructor` to be a poolable class, augmenting only the class                                        // 91\n * itself (statically) not adding any prototypical fields. Any CopyConstructor                                         // 92\n * you give this may have a `poolSize` property, and will look for a                                                   // 93\n * prototypical `destructor` on instances (optional).                                                                  // 94\n *                                                                                                                     // 95\n * @param {Function} CopyConstructor Constructor that can be used to reset.                                            // 96\n * @param {Function} pooler Customizable pooler.                                                                       // 97\n */                                                                                                                    // 98\nvar addPoolingTo = function (CopyConstructor, pooler) {                                                                // 99\n  var NewKlass = CopyConstructor;                                                                                      // 100\n  NewKlass.instancePool = [];                                                                                          // 101\n  NewKlass.getPooled = pooler || DEFAULT_POOLER;                                                                       // 102\n  if (!NewKlass.poolSize) {                                                                                            // 103\n    NewKlass.poolSize = DEFAULT_POOL_SIZE;                                                                             // 104\n  }                                                                                                                    // 105\n  NewKlass.release = standardReleaser;                                                                                 // 106\n  return NewKlass;                                                                                                     // 107\n};                                                                                                                     // 108\n                                                                                                                       // 109\nvar PooledClass = {                                                                                                    // 110\n  addPoolingTo: addPoolingTo,                                                                                          // 111\n  oneArgumentPooler: oneArgumentPooler,                                                                                // 112\n  twoArgumentPooler: twoArgumentPooler,                                                                                // 113\n  threeArgumentPooler: threeArgumentPooler,                                                                            // 114\n  fourArgumentPooler: fourArgumentPooler,                                                                              // 115\n  fiveArgumentPooler: fiveArgumentPooler                                                                               // 116\n};                                                                                                                     // 117\n                                                                                                                       // 118\nmodule.exports = PooledClass;                                                                                          // 119\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"Transaction.js\":[\"fbjs/lib/invariant\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/Transaction.js                                                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule Transaction                                                                                         // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar invariant = require('fbjs/lib/invariant');                                                                         // 14\n                                                                                                                       // 15\n/**                                                                                                                    // 16\n * `Transaction` creates a black box that is able to wrap any method such that                                         // 17\n * certain invariants are maintained before and after the method is invoked                                            // 18\n * (Even if an exception is thrown while invoking the wrapped method). Whoever                                         // 19\n * instantiates a transaction can provide enforcers of the invariants at                                               // 20\n * creation time. The `Transaction` class itself will supply one additional                                            // 21\n * automatic invariant for you - the invariant that any transaction instance                                           // 22\n * should not be run while it is already being run. You would typically create a                                       // 23\n * single instance of a `Transaction` for reuse multiple times, that potentially                                       // 24\n * is used to wrap several different methods. Wrappers are extremely simple -                                          // 25\n * they only require implementing two methods.                                                                         // 26\n *                                                                                                                     // 27\n * <pre>                                                                                                               // 28\n *                       wrappers (injected at creation time)                                                          // 29\n *                                      +        +                                                                     // 30\n *                                      |        |                                                                     // 31\n *                    +-----------------|--------|--------------+                                                      // 32\n *                    |                 v        |              |                                                      // 33\n *                    |      +---------------+   |              |                                                      // 34\n *                    |   +--|    wrapper1   |---|----+         |                                                      // 35\n *                    |   |  +---------------+   v    |         |                                                      // 36\n *                    |   |          +-------------+  |         |                                                      // 37\n *                    |   |     +----|   wrapper2  |--------+   |                                                      // 38\n *                    |   |     |    +-------------+  |     |   |                                                      // 39\n *                    |   |     |                     |     |   |                                                      // 40\n *                    |   v     v                     v     v   | wrapper                                              // 41\n *                    | +---+ +---+   +---------+   +---+ +---+ | invariants                                           // 42\n * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained                                           // 43\n * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->                                             // 44\n *                    | |   | |   |   |         |   |   | |   | |                                                      // 45\n *                    | |   | |   |   |         |   |   | |   | |                                                      // 46\n *                    | |   | |   |   |         |   |   | |   | |                                                      // 47\n *                    | +---+ +---+   +---------+   +---+ +---+ |                                                      // 48\n *                    |  initialize                    close    |                                                      // 49\n *                    +-----------------------------------------+                                                      // 50\n * </pre>                                                                                                              // 51\n *                                                                                                                     // 52\n * Use cases:                                                                                                          // 53\n * - Preserving the input selection ranges before/after reconciliation.                                                // 54\n *   Restoring selection even in the event of an unexpected error.                                                     // 55\n * - Deactivating events while rearranging the DOM, preventing blurs/focuses,                                          // 56\n *   while guaranteeing that afterwards, the event system is reactivated.                                              // 57\n * - Flushing a queue of collected DOM mutations to the main UI thread after a                                         // 58\n *   reconciliation takes place in a worker thread.                                                                    // 59\n * - Invoking any collected `componentDidUpdate` callbacks after rendering new                                         // 60\n *   content.                                                                                                          // 61\n * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue                                         // 62\n *   to preserve the `scrollTop` (an automatic scroll aware DOM).                                                      // 63\n * - (Future use case): Layout calculations before and after DOM updates.                                              // 64\n *                                                                                                                     // 65\n * Transactional plugin API:                                                                                           // 66\n * - A module that has an `initialize` method that returns any precomputation.                                         // 67\n * - and a `close` method that accepts the precomputation. `close` is invoked                                          // 68\n *   when the wrapped process is completed, or has failed.                                                             // 69\n *                                                                                                                     // 70\n * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules                                             // 71\n * that implement `initialize` and `close`.                                                                            // 72\n * @return {Transaction} Single transaction for reuse in thread.                                                       // 73\n *                                                                                                                     // 74\n * @class Transaction                                                                                                  // 75\n */                                                                                                                    // 76\nvar Mixin = {                                                                                                          // 77\n  /**                                                                                                                  // 78\n   * Sets up this instance so that it is prepared for collecting metrics. Does                                         // 79\n   * so such that this setup method may be used on an instance that is already                                         // 80\n   * initialized, in a way that does not consume additional memory upon reuse.                                         // 81\n   * That can be useful if you decide to make your subclass of this mixin a                                            // 82\n   * \"PooledClass\".                                                                                                    // 83\n   */                                                                                                                  // 84\n  reinitializeTransaction: function () {                                                                               // 85\n    this.transactionWrappers = this.getTransactionWrappers();                                                          // 86\n    if (this.wrapperInitData) {                                                                                        // 87\n      this.wrapperInitData.length = 0;                                                                                 // 88\n    } else {                                                                                                           // 89\n      this.wrapperInitData = [];                                                                                       // 90\n    }                                                                                                                  // 91\n    this._isInTransaction = false;                                                                                     // 92\n  },                                                                                                                   // 93\n                                                                                                                       // 94\n  _isInTransaction: false,                                                                                             // 95\n                                                                                                                       // 96\n  /**                                                                                                                  // 97\n   * @abstract                                                                                                         // 98\n   * @return {Array<TransactionWrapper>} Array of transaction wrappers.                                                // 99\n   */                                                                                                                  // 100\n  getTransactionWrappers: null,                                                                                        // 101\n                                                                                                                       // 102\n  isInTransaction: function () {                                                                                       // 103\n    return !!this._isInTransaction;                                                                                    // 104\n  },                                                                                                                   // 105\n                                                                                                                       // 106\n  /**                                                                                                                  // 107\n   * Executes the function within a safety window. Use this for the top level                                          // 108\n   * methods that result in large amounts of computation/mutations that would                                          // 109\n   * need to be safety checked. The optional arguments helps prevent the need                                          // 110\n   * to bind in many cases.                                                                                            // 111\n   *                                                                                                                   // 112\n   * @param {function} method Member of scope to call.                                                                 // 113\n   * @param {Object} scope Scope to invoke from.                                                                       // 114\n   * @param {Object?=} a Argument to pass to the method.                                                               // 115\n   * @param {Object?=} b Argument to pass to the method.                                                               // 116\n   * @param {Object?=} c Argument to pass to the method.                                                               // 117\n   * @param {Object?=} d Argument to pass to the method.                                                               // 118\n   * @param {Object?=} e Argument to pass to the method.                                                               // 119\n   * @param {Object?=} f Argument to pass to the method.                                                               // 120\n   *                                                                                                                   // 121\n   * @return {*} Return value from `method`.                                                                           // 122\n   */                                                                                                                  // 123\n  perform: function (method, scope, a, b, c, d, e, f) {                                                                // 124\n    !!this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.perform(...): Cannot initialize a transaction when there ' + 'is already an outstanding transaction.') : invariant(false) : undefined;\n    var errorThrown;                                                                                                   // 126\n    var ret;                                                                                                           // 127\n    try {                                                                                                              // 128\n      this._isInTransaction = true;                                                                                    // 129\n      // Catching errors makes debugging more difficult, so we start with                                              // 130\n      // errorThrown set to true before setting it to false after calling                                              // 131\n      // close -- if it's still set to true in the finally block, it means                                             // 132\n      // one of these calls threw.                                                                                     // 133\n      errorThrown = true;                                                                                              // 134\n      this.initializeAll(0);                                                                                           // 135\n      ret = method.call(scope, a, b, c, d, e, f);                                                                      // 136\n      errorThrown = false;                                                                                             // 137\n    } finally {                                                                                                        // 138\n      try {                                                                                                            // 139\n        if (errorThrown) {                                                                                             // 140\n          // If `method` throws, prefer to show that stack trace over any thrown                                       // 141\n          // by invoking `closeAll`.                                                                                   // 142\n          try {                                                                                                        // 143\n            this.closeAll(0);                                                                                          // 144\n          } catch (err) {}                                                                                             // 145\n        } else {                                                                                                       // 146\n          // Since `method` didn't throw, we don't want to silence the exception                                       // 147\n          // here.                                                                                                     // 148\n          this.closeAll(0);                                                                                            // 149\n        }                                                                                                              // 150\n      } finally {                                                                                                      // 151\n        this._isInTransaction = false;                                                                                 // 152\n      }                                                                                                                // 153\n    }                                                                                                                  // 154\n    return ret;                                                                                                        // 155\n  },                                                                                                                   // 156\n                                                                                                                       // 157\n  initializeAll: function (startIndex) {                                                                               // 158\n    var transactionWrappers = this.transactionWrappers;                                                                // 159\n    for (var i = startIndex; i < transactionWrappers.length; i++) {                                                    // 160\n      var wrapper = transactionWrappers[i];                                                                            // 161\n      try {                                                                                                            // 162\n        // Catching errors makes debugging more difficult, so we start with the                                        // 163\n        // OBSERVED_ERROR state before overwriting it with the real return value                                       // 164\n        // of initialize -- if it's still set to OBSERVED_ERROR in the finally                                         // 165\n        // block, it means wrapper.initialize threw.                                                                   // 166\n        this.wrapperInitData[i] = Transaction.OBSERVED_ERROR;                                                          // 167\n        this.wrapperInitData[i] = wrapper.initialize ? wrapper.initialize.call(this) : null;                           // 168\n      } finally {                                                                                                      // 169\n        if (this.wrapperInitData[i] === Transaction.OBSERVED_ERROR) {                                                  // 170\n          // The initializer for wrapper i threw an error; initialize the                                              // 171\n          // remaining wrappers but silence any exceptions from them to ensure                                         // 172\n          // that the first error is the one to bubble up.                                                             // 173\n          try {                                                                                                        // 174\n            this.initializeAll(i + 1);                                                                                 // 175\n          } catch (err) {}                                                                                             // 176\n        }                                                                                                              // 177\n      }                                                                                                                // 178\n    }                                                                                                                  // 179\n  },                                                                                                                   // 180\n                                                                                                                       // 181\n  /**                                                                                                                  // 182\n   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into                                       // 183\n   * them the respective return values of `this.transactionWrappers.init[i]`                                           // 184\n   * (`close`rs that correspond to initializers that failed will not be                                                // 185\n   * invoked).                                                                                                         // 186\n   */                                                                                                                  // 187\n  closeAll: function (startIndex) {                                                                                    // 188\n    !this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.closeAll(): Cannot close transaction when none are open.') : invariant(false) : undefined;\n    var transactionWrappers = this.transactionWrappers;                                                                // 190\n    for (var i = startIndex; i < transactionWrappers.length; i++) {                                                    // 191\n      var wrapper = transactionWrappers[i];                                                                            // 192\n      var initData = this.wrapperInitData[i];                                                                          // 193\n      var errorThrown;                                                                                                 // 194\n      try {                                                                                                            // 195\n        // Catching errors makes debugging more difficult, so we start with                                            // 196\n        // errorThrown set to true before setting it to false after calling                                            // 197\n        // close -- if it's still set to true in the finally block, it means                                           // 198\n        // wrapper.close threw.                                                                                        // 199\n        errorThrown = true;                                                                                            // 200\n        if (initData !== Transaction.OBSERVED_ERROR && wrapper.close) {                                                // 201\n          wrapper.close.call(this, initData);                                                                          // 202\n        }                                                                                                              // 203\n        errorThrown = false;                                                                                           // 204\n      } finally {                                                                                                      // 205\n        if (errorThrown) {                                                                                             // 206\n          // The closer for wrapper i threw an error; close the remaining                                              // 207\n          // wrappers but silence any exceptions from them to ensure that the                                          // 208\n          // first error is the one to bubble up.                                                                      // 209\n          try {                                                                                                        // 210\n            this.closeAll(i + 1);                                                                                      // 211\n          } catch (e) {}                                                                                               // 212\n        }                                                                                                              // 213\n      }                                                                                                                // 214\n    }                                                                                                                  // 215\n    this.wrapperInitData.length = 0;                                                                                   // 216\n  }                                                                                                                    // 217\n};                                                                                                                     // 218\n                                                                                                                       // 219\nvar Transaction = {                                                                                                    // 220\n                                                                                                                       // 221\n  Mixin: Mixin,                                                                                                        // 222\n                                                                                                                       // 223\n  /**                                                                                                                  // 224\n   * Token to look for to determine if an error occurred.                                                              // 225\n   */                                                                                                                  // 226\n  OBSERVED_ERROR: {}                                                                                                   // 227\n                                                                                                                       // 228\n};                                                                                                                     // 229\n                                                                                                                       // 230\nmodule.exports = Transaction;                                                                                          // 231\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"instantiateReactComponent.js\":[\"./ReactCompositeComponent\",\"./ReactEmptyComponent\",\"./ReactNativeComponent\",\"./Object.assign\",\"fbjs/lib/invariant\",\"fbjs/lib/warning\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/instantiateReactComponent.js                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule instantiateReactComponent                                                                           // 9\n * @typechecks static-only                                                                                             // 10\n */                                                                                                                    // 11\n                                                                                                                       // 12\n'use strict';                                                                                                          // 13\n                                                                                                                       // 14\nvar ReactCompositeComponent = require('./ReactCompositeComponent');                                                    // 15\nvar ReactEmptyComponent = require('./ReactEmptyComponent');                                                            // 16\nvar ReactNativeComponent = require('./ReactNativeComponent');                                                          // 17\n                                                                                                                       // 18\nvar assign = require('./Object.assign');                                                                               // 19\nvar invariant = require('fbjs/lib/invariant');                                                                         // 20\nvar warning = require('fbjs/lib/warning');                                                                             // 21\n                                                                                                                       // 22\n// To avoid a cyclic dependency, we create the final class in this module                                              // 23\nvar ReactCompositeComponentWrapper = function () {};                                                                   // 24\nassign(ReactCompositeComponentWrapper.prototype, ReactCompositeComponent.Mixin, {                                      // 25\n  _instantiateReactComponent: instantiateReactComponent                                                                // 26\n});                                                                                                                    // 27\n                                                                                                                       // 28\nfunction getDeclarationErrorAddendum(owner) {                                                                          // 29\n  if (owner) {                                                                                                         // 30\n    var name = owner.getName();                                                                                        // 31\n    if (name) {                                                                                                        // 32\n      return ' Check the render method of `' + name + '`.';                                                            // 33\n    }                                                                                                                  // 34\n  }                                                                                                                    // 35\n  return '';                                                                                                           // 36\n}                                                                                                                      // 37\n                                                                                                                       // 38\n/**                                                                                                                    // 39\n * Check if the type reference is a known internal type. I.e. not a user                                               // 40\n * provided composite type.                                                                                            // 41\n *                                                                                                                     // 42\n * @param {function} type                                                                                              // 43\n * @return {boolean} Returns true if this is a valid internal type.                                                    // 44\n */                                                                                                                    // 45\nfunction isInternalComponentType(type) {                                                                               // 46\n  return typeof type === 'function' && typeof type.prototype !== 'undefined' && typeof type.prototype.mountComponent === 'function' && typeof type.prototype.receiveComponent === 'function';\n}                                                                                                                      // 48\n                                                                                                                       // 49\n/**                                                                                                                    // 50\n * Given a ReactNode, create an instance that will actually be mounted.                                                // 51\n *                                                                                                                     // 52\n * @param {ReactNode} node                                                                                             // 53\n * @return {object} A new instance of the element's constructor.                                                       // 54\n * @protected                                                                                                          // 55\n */                                                                                                                    // 56\nfunction instantiateReactComponent(node) {                                                                             // 57\n  var instance;                                                                                                        // 58\n                                                                                                                       // 59\n  if (node === null || node === false) {                                                                               // 60\n    instance = new ReactEmptyComponent(instantiateReactComponent);                                                     // 61\n  } else if (typeof node === 'object') {                                                                               // 62\n    var element = node;                                                                                                // 63\n    !(element && (typeof element.type === 'function' || typeof element.type === 'string')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element type is invalid: expected a string (for built-in components) ' + 'or a class/function (for composite components) but got: %s.%s', element.type == null ? element.type : typeof element.type, getDeclarationErrorAddendum(element._owner)) : invariant(false) : undefined;\n                                                                                                                       // 65\n    // Special case string values                                                                                      // 66\n    if (typeof element.type === 'string') {                                                                            // 67\n      instance = ReactNativeComponent.createInternalComponent(element);                                                // 68\n    } else if (isInternalComponentType(element.type)) {                                                                // 69\n      // This is temporarily available for custom components that are not string                                       // 70\n      // representations. I.e. ART. Once those are updated to use the string                                           // 71\n      // representation, we can drop this code path.                                                                   // 72\n      instance = new element.type(element);                                                                            // 73\n    } else {                                                                                                           // 74\n      instance = new ReactCompositeComponentWrapper();                                                                 // 75\n    }                                                                                                                  // 76\n  } else if (typeof node === 'string' || typeof node === 'number') {                                                   // 77\n    instance = ReactNativeComponent.createInstanceForText(node);                                                       // 78\n  } else {                                                                                                             // 79\n    !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Encountered invalid React node of type %s', typeof node) : invariant(false) : undefined;\n  }                                                                                                                    // 81\n                                                                                                                       // 82\n  if (process.env.NODE_ENV !== 'production') {                                                                         // 83\n    process.env.NODE_ENV !== 'production' ? warning(typeof instance.construct === 'function' && typeof instance.mountComponent === 'function' && typeof instance.receiveComponent === 'function' && typeof instance.unmountComponent === 'function', 'Only React Components can be mounted.') : undefined;\n  }                                                                                                                    // 85\n                                                                                                                       // 86\n  // Sets up the instance. This can probably just move into the constructor now.                                       // 87\n  instance.construct(node);                                                                                            // 88\n                                                                                                                       // 89\n  // These two fields are used by the DOM and ART diffing algorithms                                                   // 90\n  // respectively. Instead of using expandos on components, we should be                                               // 91\n  // storing the state needed by the diffing algorithms elsewhere.                                                     // 92\n  instance._mountIndex = 0;                                                                                            // 93\n  instance._mountImage = null;                                                                                         // 94\n                                                                                                                       // 95\n  if (process.env.NODE_ENV !== 'production') {                                                                         // 96\n    instance._isOwnerNecessary = false;                                                                                // 97\n    instance._warnedAboutRefsInRender = false;                                                                         // 98\n  }                                                                                                                    // 99\n                                                                                                                       // 100\n  // Internal instances should fully constructed at this point, so they should                                         // 101\n  // not get any new fields added to them at this point.                                                               // 102\n  if (process.env.NODE_ENV !== 'production') {                                                                         // 103\n    if (Object.preventExtensions) {                                                                                    // 104\n      Object.preventExtensions(instance);                                                                              // 105\n    }                                                                                                                  // 106\n  }                                                                                                                    // 107\n                                                                                                                       // 108\n  return instance;                                                                                                     // 109\n}                                                                                                                      // 110\n                                                                                                                       // 111\nmodule.exports = instantiateReactComponent;                                                                            // 112\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactCompositeComponent.js\":[\"./ReactComponentEnvironment\",\"./ReactCurrentOwner\",\"./ReactElement\",\"./ReactInstanceMap\",\"./ReactPerf\",\"./ReactPropTypeLocations\",\"./ReactPropTypeLocationNames\",\"./ReactReconciler\",\"./ReactUpdateQueue\",\"./Object.assign\",\"fbjs/lib/emptyObject\",\"fbjs/lib/invariant\",\"./shouldUpdateReactComponent\",\"fbjs/lib/warning\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactCompositeComponent.js                                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactCompositeComponent                                                                             // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar ReactComponentEnvironment = require('./ReactComponentEnvironment');                                                // 14\nvar ReactCurrentOwner = require('./ReactCurrentOwner');                                                                // 15\nvar ReactElement = require('./ReactElement');                                                                          // 16\nvar ReactInstanceMap = require('./ReactInstanceMap');                                                                  // 17\nvar ReactPerf = require('./ReactPerf');                                                                                // 18\nvar ReactPropTypeLocations = require('./ReactPropTypeLocations');                                                      // 19\nvar ReactPropTypeLocationNames = require('./ReactPropTypeLocationNames');                                              // 20\nvar ReactReconciler = require('./ReactReconciler');                                                                    // 21\nvar ReactUpdateQueue = require('./ReactUpdateQueue');                                                                  // 22\n                                                                                                                       // 23\nvar assign = require('./Object.assign');                                                                               // 24\nvar emptyObject = require('fbjs/lib/emptyObject');                                                                     // 25\nvar invariant = require('fbjs/lib/invariant');                                                                         // 26\nvar shouldUpdateReactComponent = require('./shouldUpdateReactComponent');                                              // 27\nvar warning = require('fbjs/lib/warning');                                                                             // 28\n                                                                                                                       // 29\nfunction getDeclarationErrorAddendum(component) {                                                                      // 30\n  var owner = component._currentElement._owner || null;                                                                // 31\n  if (owner) {                                                                                                         // 32\n    var name = owner.getName();                                                                                        // 33\n    if (name) {                                                                                                        // 34\n      return ' Check the render method of `' + name + '`.';                                                            // 35\n    }                                                                                                                  // 36\n  }                                                                                                                    // 37\n  return '';                                                                                                           // 38\n}                                                                                                                      // 39\n                                                                                                                       // 40\nfunction StatelessComponent(Component) {}                                                                              // 41\nStatelessComponent.prototype.render = function () {                                                                    // 42\n  var Component = ReactInstanceMap.get(this)._currentElement.type;                                                     // 43\n  return Component(this.props, this.context, this.updater);                                                            // 44\n};                                                                                                                     // 45\n                                                                                                                       // 46\n/**                                                                                                                    // 47\n * ------------------ The Life-Cycle of a Composite Component ------------------                                       // 48\n *                                                                                                                     // 49\n * - constructor: Initialization of state. The instance is now retained.                                               // 50\n *   - componentWillMount                                                                                              // 51\n *   - render                                                                                                          // 52\n *   - [children's constructors]                                                                                       // 53\n *     - [children's componentWillMount and render]                                                                    // 54\n *     - [children's componentDidMount]                                                                                // 55\n *     - componentDidMount                                                                                             // 56\n *                                                                                                                     // 57\n *       Update Phases:                                                                                                // 58\n *       - componentWillReceiveProps (only called if parent updated)                                                   // 59\n *       - shouldComponentUpdate                                                                                       // 60\n *         - componentWillUpdate                                                                                       // 61\n *           - render                                                                                                  // 62\n *           - [children's constructors or receive props phases]                                                       // 63\n *         - componentDidUpdate                                                                                        // 64\n *                                                                                                                     // 65\n *     - componentWillUnmount                                                                                          // 66\n *     - [children's componentWillUnmount]                                                                             // 67\n *   - [children destroyed]                                                                                            // 68\n * - (destroyed): The instance is now blank, released by React and ready for GC.                                       // 69\n *                                                                                                                     // 70\n * -----------------------------------------------------------------------------                                       // 71\n */                                                                                                                    // 72\n                                                                                                                       // 73\n/**                                                                                                                    // 74\n * An incrementing ID assigned to each component when it is mounted. This is                                           // 75\n * used to enforce the order in which `ReactUpdates` updates dirty components.                                         // 76\n *                                                                                                                     // 77\n * @private                                                                                                            // 78\n */                                                                                                                    // 79\nvar nextMountID = 1;                                                                                                   // 80\n                                                                                                                       // 81\n/**                                                                                                                    // 82\n * @lends {ReactCompositeComponent.prototype}                                                                          // 83\n */                                                                                                                    // 84\nvar ReactCompositeComponentMixin = {                                                                                   // 85\n                                                                                                                       // 86\n  /**                                                                                                                  // 87\n   * Base constructor for all composite component.                                                                     // 88\n   *                                                                                                                   // 89\n   * @param {ReactElement} element                                                                                     // 90\n   * @final                                                                                                            // 91\n   * @internal                                                                                                         // 92\n   */                                                                                                                  // 93\n  construct: function (element) {                                                                                      // 94\n    this._currentElement = element;                                                                                    // 95\n    this._rootNodeID = null;                                                                                           // 96\n    this._instance = null;                                                                                             // 97\n                                                                                                                       // 98\n    // See ReactUpdateQueue                                                                                            // 99\n    this._pendingElement = null;                                                                                       // 100\n    this._pendingStateQueue = null;                                                                                    // 101\n    this._pendingReplaceState = false;                                                                                 // 102\n    this._pendingForceUpdate = false;                                                                                  // 103\n                                                                                                                       // 104\n    this._renderedComponent = null;                                                                                    // 105\n                                                                                                                       // 106\n    this._context = null;                                                                                              // 107\n    this._mountOrder = 0;                                                                                              // 108\n    this._topLevelWrapper = null;                                                                                      // 109\n                                                                                                                       // 110\n    // See ReactUpdates and ReactUpdateQueue.                                                                          // 111\n    this._pendingCallbacks = null;                                                                                     // 112\n  },                                                                                                                   // 113\n                                                                                                                       // 114\n  /**                                                                                                                  // 115\n   * Initializes the component, renders markup, and registers event listeners.                                         // 116\n   *                                                                                                                   // 117\n   * @param {string} rootID DOM ID of the root node.                                                                   // 118\n   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction                                    // 119\n   * @return {?string} Rendered markup to be inserted into the DOM.                                                    // 120\n   * @final                                                                                                            // 121\n   * @internal                                                                                                         // 122\n   */                                                                                                                  // 123\n  mountComponent: function (rootID, transaction, context) {                                                            // 124\n    this._context = context;                                                                                           // 125\n    this._mountOrder = nextMountID++;                                                                                  // 126\n    this._rootNodeID = rootID;                                                                                         // 127\n                                                                                                                       // 128\n    var publicProps = this._processProps(this._currentElement.props);                                                  // 129\n    var publicContext = this._processContext(context);                                                                 // 130\n                                                                                                                       // 131\n    var Component = this._currentElement.type;                                                                         // 132\n                                                                                                                       // 133\n    // Initialize the public class                                                                                     // 134\n    var inst;                                                                                                          // 135\n    var renderedElement;                                                                                               // 136\n                                                                                                                       // 137\n    // This is a way to detect if Component is a stateless arrow function                                              // 138\n    // component, which is not newable. It might not be 100% reliable but is                                           // 139\n    // something we can do until we start detecting that Component extends                                             // 140\n    // React.Component. We already assume that typeof Component === 'function'.                                        // 141\n    var canInstantiate = ('prototype' in Component);                                                                   // 142\n                                                                                                                       // 143\n    if (canInstantiate) {                                                                                              // 144\n      if (process.env.NODE_ENV !== 'production') {                                                                     // 145\n        ReactCurrentOwner.current = this;                                                                              // 146\n        try {                                                                                                          // 147\n          inst = new Component(publicProps, publicContext, ReactUpdateQueue);                                          // 148\n        } finally {                                                                                                    // 149\n          ReactCurrentOwner.current = null;                                                                            // 150\n        }                                                                                                              // 151\n      } else {                                                                                                         // 152\n        inst = new Component(publicProps, publicContext, ReactUpdateQueue);                                            // 153\n      }                                                                                                                // 154\n    }                                                                                                                  // 155\n                                                                                                                       // 156\n    if (!canInstantiate || inst === null || inst === false || ReactElement.isValidElement(inst)) {                     // 157\n      renderedElement = inst;                                                                                          // 158\n      inst = new StatelessComponent(Component);                                                                        // 159\n    }                                                                                                                  // 160\n                                                                                                                       // 161\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 162\n      // This will throw later in _renderValidatedComponent, but add an early                                          // 163\n      // warning now to help debugging                                                                                 // 164\n      if (inst.render == null) {                                                                                       // 165\n        process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`, returned ' + 'null/false from a stateless component, or tried to render an ' + 'element whose type is a function that isn\\'t a React component.', Component.displayName || Component.name || 'Component') : undefined;\n      } else {                                                                                                         // 167\n        // We support ES6 inheriting from React.Component, the module pattern,                                         // 168\n        // and stateless components, but not ES6 classes that don't extend                                             // 169\n        process.env.NODE_ENV !== 'production' ? warning(Component.prototype && Component.prototype.isReactComponent || !canInstantiate || !(inst instanceof Component), '%s(...): React component classes must extend React.Component.', Component.displayName || Component.name || 'Component') : undefined;\n      }                                                                                                                // 171\n    }                                                                                                                  // 172\n                                                                                                                       // 173\n    // These should be set up in the constructor, but as a convenience for                                             // 174\n    // simpler class abstractions, we set them up after the fact.                                                      // 175\n    inst.props = publicProps;                                                                                          // 176\n    inst.context = publicContext;                                                                                      // 177\n    inst.refs = emptyObject;                                                                                           // 178\n    inst.updater = ReactUpdateQueue;                                                                                   // 179\n                                                                                                                       // 180\n    this._instance = inst;                                                                                             // 181\n                                                                                                                       // 182\n    // Store a reference from the instance back to the internal representation                                         // 183\n    ReactInstanceMap.set(inst, this);                                                                                  // 184\n                                                                                                                       // 185\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 186\n      // Since plain JS classes are defined without any special initialization                                         // 187\n      // logic, we can not catch common errors early. Therefore, we have to                                            // 188\n      // catch them here, at initialization time, instead.                                                             // 189\n      process.env.NODE_ENV !== 'production' ? warning(!inst.getInitialState || inst.getInitialState.isReactClassApproved, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', this.getName() || 'a component') : undefined;\n      process.env.NODE_ENV !== 'production' ? warning(!inst.getDefaultProps || inst.getDefaultProps.isReactClassApproved, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', this.getName() || 'a component') : undefined;\n      process.env.NODE_ENV !== 'production' ? warning(!inst.propTypes, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', this.getName() || 'a component') : undefined;\n      process.env.NODE_ENV !== 'production' ? warning(!inst.contextTypes, 'contextTypes was defined as an instance property on %s. Use a ' + 'static property to define contextTypes instead.', this.getName() || 'a component') : undefined;\n      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentShouldUpdate !== 'function', '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', this.getName() || 'A component') : undefined;\n      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentDidUnmount !== 'function', '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', this.getName() || 'A component') : undefined;\n      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentWillRecieveProps !== 'function', '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', this.getName() || 'A component') : undefined;\n    }                                                                                                                  // 197\n                                                                                                                       // 198\n    var initialState = inst.state;                                                                                     // 199\n    if (initialState === undefined) {                                                                                  // 200\n      inst.state = initialState = null;                                                                                // 201\n    }                                                                                                                  // 202\n    !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.state: must be set to an object or null', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;\n                                                                                                                       // 204\n    this._pendingStateQueue = null;                                                                                    // 205\n    this._pendingReplaceState = false;                                                                                 // 206\n    this._pendingForceUpdate = false;                                                                                  // 207\n                                                                                                                       // 208\n    if (inst.componentWillMount) {                                                                                     // 209\n      inst.componentWillMount();                                                                                       // 210\n      // When mounting, calls to `setState` by `componentWillMount` will set                                           // 211\n      // `this._pendingStateQueue` without triggering a re-render.                                                     // 212\n      if (this._pendingStateQueue) {                                                                                   // 213\n        inst.state = this._processPendingState(inst.props, inst.context);                                              // 214\n      }                                                                                                                // 215\n    }                                                                                                                  // 216\n                                                                                                                       // 217\n    // If not a stateless component, we now render                                                                     // 218\n    if (renderedElement === undefined) {                                                                               // 219\n      renderedElement = this._renderValidatedComponent();                                                              // 220\n    }                                                                                                                  // 221\n                                                                                                                       // 222\n    this._renderedComponent = this._instantiateReactComponent(renderedElement);                                        // 223\n                                                                                                                       // 224\n    var markup = ReactReconciler.mountComponent(this._renderedComponent, rootID, transaction, this._processChildContext(context));\n    if (inst.componentDidMount) {                                                                                      // 226\n      transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);                                          // 227\n    }                                                                                                                  // 228\n                                                                                                                       // 229\n    return markup;                                                                                                     // 230\n  },                                                                                                                   // 231\n                                                                                                                       // 232\n  /**                                                                                                                  // 233\n   * Releases any resources allocated by `mountComponent`.                                                             // 234\n   *                                                                                                                   // 235\n   * @final                                                                                                            // 236\n   * @internal                                                                                                         // 237\n   */                                                                                                                  // 238\n  unmountComponent: function () {                                                                                      // 239\n    var inst = this._instance;                                                                                         // 240\n                                                                                                                       // 241\n    if (inst.componentWillUnmount) {                                                                                   // 242\n      inst.componentWillUnmount();                                                                                     // 243\n    }                                                                                                                  // 244\n                                                                                                                       // 245\n    ReactReconciler.unmountComponent(this._renderedComponent);                                                         // 246\n    this._renderedComponent = null;                                                                                    // 247\n    this._instance = null;                                                                                             // 248\n                                                                                                                       // 249\n    // Reset pending fields                                                                                            // 250\n    // Even if this component is scheduled for another update in ReactUpdates,                                         // 251\n    // it would still be ignored because these fields are reset.                                                       // 252\n    this._pendingStateQueue = null;                                                                                    // 253\n    this._pendingReplaceState = false;                                                                                 // 254\n    this._pendingForceUpdate = false;                                                                                  // 255\n    this._pendingCallbacks = null;                                                                                     // 256\n    this._pendingElement = null;                                                                                       // 257\n                                                                                                                       // 258\n    // These fields do not really need to be reset since this object is no                                             // 259\n    // longer accessible.                                                                                              // 260\n    this._context = null;                                                                                              // 261\n    this._rootNodeID = null;                                                                                           // 262\n    this._topLevelWrapper = null;                                                                                      // 263\n                                                                                                                       // 264\n    // Delete the reference from the instance to this internal representation                                          // 265\n    // which allow the internals to be properly cleaned up even if the user                                            // 266\n    // leaks a reference to the public instance.                                                                       // 267\n    ReactInstanceMap.remove(inst);                                                                                     // 268\n                                                                                                                       // 269\n    // Some existing components rely on inst.props even after they've been                                             // 270\n    // destroyed (in event handlers).                                                                                  // 271\n    // TODO: inst.props = null;                                                                                        // 272\n    // TODO: inst.state = null;                                                                                        // 273\n    // TODO: inst.context = null;                                                                                      // 274\n  },                                                                                                                   // 275\n                                                                                                                       // 276\n  /**                                                                                                                  // 277\n   * Filters the context object to only contain keys specified in                                                      // 278\n   * `contextTypes`                                                                                                    // 279\n   *                                                                                                                   // 280\n   * @param {object} context                                                                                           // 281\n   * @return {?object}                                                                                                 // 282\n   * @private                                                                                                          // 283\n   */                                                                                                                  // 284\n  _maskContext: function (context) {                                                                                   // 285\n    var maskedContext = null;                                                                                          // 286\n    var Component = this._currentElement.type;                                                                         // 287\n    var contextTypes = Component.contextTypes;                                                                         // 288\n    if (!contextTypes) {                                                                                               // 289\n      return emptyObject;                                                                                              // 290\n    }                                                                                                                  // 291\n    maskedContext = {};                                                                                                // 292\n    for (var contextName in contextTypes) {                                                                            // 293\n      maskedContext[contextName] = context[contextName];                                                               // 294\n    }                                                                                                                  // 295\n    return maskedContext;                                                                                              // 296\n  },                                                                                                                   // 297\n                                                                                                                       // 298\n  /**                                                                                                                  // 299\n   * Filters the context object to only contain keys specified in                                                      // 300\n   * `contextTypes`, and asserts that they are valid.                                                                  // 301\n   *                                                                                                                   // 302\n   * @param {object} context                                                                                           // 303\n   * @return {?object}                                                                                                 // 304\n   * @private                                                                                                          // 305\n   */                                                                                                                  // 306\n  _processContext: function (context) {                                                                                // 307\n    var maskedContext = this._maskContext(context);                                                                    // 308\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 309\n      var Component = this._currentElement.type;                                                                       // 310\n      if (Component.contextTypes) {                                                                                    // 311\n        this._checkPropTypes(Component.contextTypes, maskedContext, ReactPropTypeLocations.context);                   // 312\n      }                                                                                                                // 313\n    }                                                                                                                  // 314\n    return maskedContext;                                                                                              // 315\n  },                                                                                                                   // 316\n                                                                                                                       // 317\n  /**                                                                                                                  // 318\n   * @param {object} currentContext                                                                                    // 319\n   * @return {object}                                                                                                  // 320\n   * @private                                                                                                          // 321\n   */                                                                                                                  // 322\n  _processChildContext: function (currentContext) {                                                                    // 323\n    var Component = this._currentElement.type;                                                                         // 324\n    var inst = this._instance;                                                                                         // 325\n    var childContext = inst.getChildContext && inst.getChildContext();                                                 // 326\n    if (childContext) {                                                                                                // 327\n      !(typeof Component.childContextTypes === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;\n      if (process.env.NODE_ENV !== 'production') {                                                                     // 329\n        this._checkPropTypes(Component.childContextTypes, childContext, ReactPropTypeLocations.childContext);          // 330\n      }                                                                                                                // 331\n      for (var name in childContext) {                                                                                 // 332\n        !(name in Component.childContextTypes) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): key \"%s\" is not defined in childContextTypes.', this.getName() || 'ReactCompositeComponent', name) : invariant(false) : undefined;\n      }                                                                                                                // 334\n      return assign({}, currentContext, childContext);                                                                 // 335\n    }                                                                                                                  // 336\n    return currentContext;                                                                                             // 337\n  },                                                                                                                   // 338\n                                                                                                                       // 339\n  /**                                                                                                                  // 340\n   * Processes props by setting default values for unspecified props and                                               // 341\n   * asserting that the props are valid. Does not mutate its argument; returns                                         // 342\n   * a new props object with defaults merged in.                                                                       // 343\n   *                                                                                                                   // 344\n   * @param {object} newProps                                                                                          // 345\n   * @return {object}                                                                                                  // 346\n   * @private                                                                                                          // 347\n   */                                                                                                                  // 348\n  _processProps: function (newProps) {                                                                                 // 349\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 350\n      var Component = this._currentElement.type;                                                                       // 351\n      if (Component.propTypes) {                                                                                       // 352\n        this._checkPropTypes(Component.propTypes, newProps, ReactPropTypeLocations.prop);                              // 353\n      }                                                                                                                // 354\n    }                                                                                                                  // 355\n    return newProps;                                                                                                   // 356\n  },                                                                                                                   // 357\n                                                                                                                       // 358\n  /**                                                                                                                  // 359\n   * Assert that the props are valid                                                                                   // 360\n   *                                                                                                                   // 361\n   * @param {object} propTypes Map of prop name to a ReactPropType                                                     // 362\n   * @param {object} props                                                                                             // 363\n   * @param {string} location e.g. \"prop\", \"context\", \"child context\"                                                  // 364\n   * @private                                                                                                          // 365\n   */                                                                                                                  // 366\n  _checkPropTypes: function (propTypes, props, location) {                                                             // 367\n    // TODO: Stop validating prop types here and only use the element                                                  // 368\n    // validation.                                                                                                     // 369\n    var componentName = this.getName();                                                                                // 370\n    for (var propName in propTypes) {                                                                                  // 371\n      if (propTypes.hasOwnProperty(propName)) {                                                                        // 372\n        var error;                                                                                                     // 373\n        try {                                                                                                          // 374\n          // This is intentionally an invariant that gets caught. It's the same                                        // 375\n          // behavior as without this statement except with a better message.                                          // 376\n          !(typeof propTypes[propName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually ' + 'from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], propName) : invariant(false) : undefined;\n          error = propTypes[propName](props, propName, componentName, location);                                       // 378\n        } catch (ex) {                                                                                                 // 379\n          error = ex;                                                                                                  // 380\n        }                                                                                                              // 381\n        if (error instanceof Error) {                                                                                  // 382\n          // We may want to extend this logic for similar errors in                                                    // 383\n          // top-level render calls, so I'm abstracting it away into                                                   // 384\n          // a function to minimize refactoring in the future                                                          // 385\n          var addendum = getDeclarationErrorAddendum(this);                                                            // 386\n                                                                                                                       // 387\n          if (location === ReactPropTypeLocations.prop) {                                                              // 388\n            // Preface gives us something to blacklist in warning module                                               // 389\n            process.env.NODE_ENV !== 'production' ? warning(false, 'Failed Composite propType: %s%s', error.message, addendum) : undefined;\n          } else {                                                                                                     // 391\n            process.env.NODE_ENV !== 'production' ? warning(false, 'Failed Context Types: %s%s', error.message, addendum) : undefined;\n          }                                                                                                            // 393\n        }                                                                                                              // 394\n      }                                                                                                                // 395\n    }                                                                                                                  // 396\n  },                                                                                                                   // 397\n                                                                                                                       // 398\n  receiveComponent: function (nextElement, transaction, nextContext) {                                                 // 399\n    var prevElement = this._currentElement;                                                                            // 400\n    var prevContext = this._context;                                                                                   // 401\n                                                                                                                       // 402\n    this._pendingElement = null;                                                                                       // 403\n                                                                                                                       // 404\n    this.updateComponent(transaction, prevElement, nextElement, prevContext, nextContext);                             // 405\n  },                                                                                                                   // 406\n                                                                                                                       // 407\n  /**                                                                                                                  // 408\n   * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`                                       // 409\n   * is set, update the component.                                                                                     // 410\n   *                                                                                                                   // 411\n   * @param {ReactReconcileTransaction} transaction                                                                    // 412\n   * @internal                                                                                                         // 413\n   */                                                                                                                  // 414\n  performUpdateIfNecessary: function (transaction) {                                                                   // 415\n    if (this._pendingElement != null) {                                                                                // 416\n      ReactReconciler.receiveComponent(this, this._pendingElement || this._currentElement, transaction, this._context);\n    }                                                                                                                  // 418\n                                                                                                                       // 419\n    if (this._pendingStateQueue !== null || this._pendingForceUpdate) {                                                // 420\n      this.updateComponent(transaction, this._currentElement, this._currentElement, this._context, this._context);     // 421\n    }                                                                                                                  // 422\n  },                                                                                                                   // 423\n                                                                                                                       // 424\n  /**                                                                                                                  // 425\n   * Perform an update to a mounted component. The componentWillReceiveProps and                                       // 426\n   * shouldComponentUpdate methods are called, then (assuming the update isn't                                         // 427\n   * skipped) the remaining update lifecycle methods are called and the DOM                                            // 428\n   * representation is updated.                                                                                        // 429\n   *                                                                                                                   // 430\n   * By default, this implements React's rendering and reconciliation algorithm.                                       // 431\n   * Sophisticated clients may wish to override this.                                                                  // 432\n   *                                                                                                                   // 433\n   * @param {ReactReconcileTransaction} transaction                                                                    // 434\n   * @param {ReactElement} prevParentElement                                                                           // 435\n   * @param {ReactElement} nextParentElement                                                                           // 436\n   * @internal                                                                                                         // 437\n   * @overridable                                                                                                      // 438\n   */                                                                                                                  // 439\n  updateComponent: function (transaction, prevParentElement, nextParentElement, prevUnmaskedContext, nextUnmaskedContext) {\n    var inst = this._instance;                                                                                         // 441\n                                                                                                                       // 442\n    var nextContext = this._context === nextUnmaskedContext ? inst.context : this._processContext(nextUnmaskedContext);\n    var nextProps;                                                                                                     // 444\n                                                                                                                       // 445\n    // Distinguish between a props update versus a simple state update                                                 // 446\n    if (prevParentElement === nextParentElement) {                                                                     // 447\n      // Skip checking prop types again -- we don't read inst.props to avoid                                           // 448\n      // warning for DOM component props in this upgrade                                                               // 449\n      nextProps = nextParentElement.props;                                                                             // 450\n    } else {                                                                                                           // 451\n      nextProps = this._processProps(nextParentElement.props);                                                         // 452\n      // An update here will schedule an update but immediately set                                                    // 453\n      // _pendingStateQueue which will ensure that any state updates gets                                              // 454\n      // immediately reconciled instead of waiting for the next batch.                                                 // 455\n                                                                                                                       // 456\n      if (inst.componentWillReceiveProps) {                                                                            // 457\n        inst.componentWillReceiveProps(nextProps, nextContext);                                                        // 458\n      }                                                                                                                // 459\n    }                                                                                                                  // 460\n                                                                                                                       // 461\n    var nextState = this._processPendingState(nextProps, nextContext);                                                 // 462\n                                                                                                                       // 463\n    var shouldUpdate = this._pendingForceUpdate || !inst.shouldComponentUpdate || inst.shouldComponentUpdate(nextProps, nextState, nextContext);\n                                                                                                                       // 465\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 466\n      process.env.NODE_ENV !== 'production' ? warning(typeof shouldUpdate !== 'undefined', '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', this.getName() || 'ReactCompositeComponent') : undefined;\n    }                                                                                                                  // 468\n                                                                                                                       // 469\n    if (shouldUpdate) {                                                                                                // 470\n      this._pendingForceUpdate = false;                                                                                // 471\n      // Will set `this.props`, `this.state` and `this.context`.                                                       // 472\n      this._performComponentUpdate(nextParentElement, nextProps, nextState, nextContext, transaction, nextUnmaskedContext);\n    } else {                                                                                                           // 474\n      // If it's determined that a component should not update, we still want                                          // 475\n      // to set props and state but we shortcut the rest of the update.                                                // 476\n      this._currentElement = nextParentElement;                                                                        // 477\n      this._context = nextUnmaskedContext;                                                                             // 478\n      inst.props = nextProps;                                                                                          // 479\n      inst.state = nextState;                                                                                          // 480\n      inst.context = nextContext;                                                                                      // 481\n    }                                                                                                                  // 482\n  },                                                                                                                   // 483\n                                                                                                                       // 484\n  _processPendingState: function (props, context) {                                                                    // 485\n    var inst = this._instance;                                                                                         // 486\n    var queue = this._pendingStateQueue;                                                                               // 487\n    var replace = this._pendingReplaceState;                                                                           // 488\n    this._pendingReplaceState = false;                                                                                 // 489\n    this._pendingStateQueue = null;                                                                                    // 490\n                                                                                                                       // 491\n    if (!queue) {                                                                                                      // 492\n      return inst.state;                                                                                               // 493\n    }                                                                                                                  // 494\n                                                                                                                       // 495\n    if (replace && queue.length === 1) {                                                                               // 496\n      return queue[0];                                                                                                 // 497\n    }                                                                                                                  // 498\n                                                                                                                       // 499\n    var nextState = assign({}, replace ? queue[0] : inst.state);                                                       // 500\n    for (var i = replace ? 1 : 0; i < queue.length; i++) {                                                             // 501\n      var partial = queue[i];                                                                                          // 502\n      assign(nextState, typeof partial === 'function' ? partial.call(inst, nextState, props, context) : partial);      // 503\n    }                                                                                                                  // 504\n                                                                                                                       // 505\n    return nextState;                                                                                                  // 506\n  },                                                                                                                   // 507\n                                                                                                                       // 508\n  /**                                                                                                                  // 509\n   * Merges new props and state, notifies delegate methods of update and                                               // 510\n   * performs update.                                                                                                  // 511\n   *                                                                                                                   // 512\n   * @param {ReactElement} nextElement Next element                                                                    // 513\n   * @param {object} nextProps Next public object to set as properties.                                                // 514\n   * @param {?object} nextState Next object to set as state.                                                           // 515\n   * @param {?object} nextContext Next public object to set as context.                                                // 516\n   * @param {ReactReconcileTransaction} transaction                                                                    // 517\n   * @param {?object} unmaskedContext                                                                                  // 518\n   * @private                                                                                                          // 519\n   */                                                                                                                  // 520\n  _performComponentUpdate: function (nextElement, nextProps, nextState, nextContext, transaction, unmaskedContext) {   // 521\n    var inst = this._instance;                                                                                         // 522\n                                                                                                                       // 523\n    var hasComponentDidUpdate = Boolean(inst.componentDidUpdate);                                                      // 524\n    var prevProps;                                                                                                     // 525\n    var prevState;                                                                                                     // 526\n    var prevContext;                                                                                                   // 527\n    if (hasComponentDidUpdate) {                                                                                       // 528\n      prevProps = inst.props;                                                                                          // 529\n      prevState = inst.state;                                                                                          // 530\n      prevContext = inst.context;                                                                                      // 531\n    }                                                                                                                  // 532\n                                                                                                                       // 533\n    if (inst.componentWillUpdate) {                                                                                    // 534\n      inst.componentWillUpdate(nextProps, nextState, nextContext);                                                     // 535\n    }                                                                                                                  // 536\n                                                                                                                       // 537\n    this._currentElement = nextElement;                                                                                // 538\n    this._context = unmaskedContext;                                                                                   // 539\n    inst.props = nextProps;                                                                                            // 540\n    inst.state = nextState;                                                                                            // 541\n    inst.context = nextContext;                                                                                        // 542\n                                                                                                                       // 543\n    this._updateRenderedComponent(transaction, unmaskedContext);                                                       // 544\n                                                                                                                       // 545\n    if (hasComponentDidUpdate) {                                                                                       // 546\n      transaction.getReactMountReady().enqueue(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), inst);\n    }                                                                                                                  // 548\n  },                                                                                                                   // 549\n                                                                                                                       // 550\n  /**                                                                                                                  // 551\n   * Call the component's `render` method and update the DOM accordingly.                                              // 552\n   *                                                                                                                   // 553\n   * @param {ReactReconcileTransaction} transaction                                                                    // 554\n   * @internal                                                                                                         // 555\n   */                                                                                                                  // 556\n  _updateRenderedComponent: function (transaction, context) {                                                          // 557\n    var prevComponentInstance = this._renderedComponent;                                                               // 558\n    var prevRenderedElement = prevComponentInstance._currentElement;                                                   // 559\n    var nextRenderedElement = this._renderValidatedComponent();                                                        // 560\n    if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {                                        // 561\n      ReactReconciler.receiveComponent(prevComponentInstance, nextRenderedElement, transaction, this._processChildContext(context));\n    } else {                                                                                                           // 563\n      // These two IDs are actually the same! But nothing should rely on that.                                         // 564\n      var thisID = this._rootNodeID;                                                                                   // 565\n      var prevComponentID = prevComponentInstance._rootNodeID;                                                         // 566\n      ReactReconciler.unmountComponent(prevComponentInstance);                                                         // 567\n                                                                                                                       // 568\n      this._renderedComponent = this._instantiateReactComponent(nextRenderedElement);                                  // 569\n      var nextMarkup = ReactReconciler.mountComponent(this._renderedComponent, thisID, transaction, this._processChildContext(context));\n      this._replaceNodeWithMarkupByID(prevComponentID, nextMarkup);                                                    // 571\n    }                                                                                                                  // 572\n  },                                                                                                                   // 573\n                                                                                                                       // 574\n  /**                                                                                                                  // 575\n   * @protected                                                                                                        // 576\n   */                                                                                                                  // 577\n  _replaceNodeWithMarkupByID: function (prevComponentID, nextMarkup) {                                                 // 578\n    ReactComponentEnvironment.replaceNodeWithMarkupByID(prevComponentID, nextMarkup);                                  // 579\n  },                                                                                                                   // 580\n                                                                                                                       // 581\n  /**                                                                                                                  // 582\n   * @protected                                                                                                        // 583\n   */                                                                                                                  // 584\n  _renderValidatedComponentWithoutOwnerOrContext: function () {                                                        // 585\n    var inst = this._instance;                                                                                         // 586\n    var renderedComponent = inst.render();                                                                             // 587\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 588\n      // We allow auto-mocks to proceed as if they're returning null.                                                  // 589\n      if (typeof renderedComponent === 'undefined' && inst.render._isMockFunction) {                                   // 590\n        // This is probably bad practice. Consider warning here and                                                    // 591\n        // deprecating this convenience.                                                                               // 592\n        renderedComponent = null;                                                                                      // 593\n      }                                                                                                                // 594\n    }                                                                                                                  // 595\n                                                                                                                       // 596\n    return renderedComponent;                                                                                          // 597\n  },                                                                                                                   // 598\n                                                                                                                       // 599\n  /**                                                                                                                  // 600\n   * @private                                                                                                          // 601\n   */                                                                                                                  // 602\n  _renderValidatedComponent: function () {                                                                             // 603\n    var renderedComponent;                                                                                             // 604\n    ReactCurrentOwner.current = this;                                                                                  // 605\n    try {                                                                                                              // 606\n      renderedComponent = this._renderValidatedComponentWithoutOwnerOrContext();                                       // 607\n    } finally {                                                                                                        // 608\n      ReactCurrentOwner.current = null;                                                                                // 609\n    }                                                                                                                  // 610\n    !(                                                                                                                 // 611\n    // TODO: An `isValidNode` function would probably be more appropriate                                              // 612\n    renderedComponent === null || renderedComponent === false || ReactElement.isValidElement(renderedComponent)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.render(): A valid ReactComponent must be returned. You may have ' + 'returned undefined, an array or some other invalid object.', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;\n    return renderedComponent;                                                                                          // 614\n  },                                                                                                                   // 615\n                                                                                                                       // 616\n  /**                                                                                                                  // 617\n   * Lazily allocates the refs object and stores `component` as `ref`.                                                 // 618\n   *                                                                                                                   // 619\n   * @param {string} ref Reference name.                                                                               // 620\n   * @param {component} component Component to store as `ref`.                                                         // 621\n   * @final                                                                                                            // 622\n   * @private                                                                                                          // 623\n   */                                                                                                                  // 624\n  attachRef: function (ref, component) {                                                                               // 625\n    var inst = this.getPublicInstance();                                                                               // 626\n    !(inst != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Stateless function components cannot have refs.') : invariant(false) : undefined;\n    var publicComponentInstance = component.getPublicInstance();                                                       // 628\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 629\n      var componentName = component && component.getName ? component.getName() : 'a component';                        // 630\n      process.env.NODE_ENV !== 'production' ? warning(publicComponentInstance != null, 'Stateless function components cannot be given refs ' + '(See ref \"%s\" in %s created by %s). ' + 'Attempts to access this ref will fail.', ref, componentName, this.getName()) : undefined;\n    }                                                                                                                  // 632\n    var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;                                                 // 633\n    refs[ref] = publicComponentInstance;                                                                               // 634\n  },                                                                                                                   // 635\n                                                                                                                       // 636\n  /**                                                                                                                  // 637\n   * Detaches a reference name.                                                                                        // 638\n   *                                                                                                                   // 639\n   * @param {string} ref Name to dereference.                                                                          // 640\n   * @final                                                                                                            // 641\n   * @private                                                                                                          // 642\n   */                                                                                                                  // 643\n  detachRef: function (ref) {                                                                                          // 644\n    var refs = this.getPublicInstance().refs;                                                                          // 645\n    delete refs[ref];                                                                                                  // 646\n  },                                                                                                                   // 647\n                                                                                                                       // 648\n  /**                                                                                                                  // 649\n   * Get a text description of the component that can be used to identify it                                           // 650\n   * in error messages.                                                                                                // 651\n   * @return {string} The name or null.                                                                                // 652\n   * @internal                                                                                                         // 653\n   */                                                                                                                  // 654\n  getName: function () {                                                                                               // 655\n    var type = this._currentElement.type;                                                                              // 656\n    var constructor = this._instance && this._instance.constructor;                                                    // 657\n    return type.displayName || constructor && constructor.displayName || type.name || constructor && constructor.name || null;\n  },                                                                                                                   // 659\n                                                                                                                       // 660\n  /**                                                                                                                  // 661\n   * Get the publicly accessible representation of this component - i.e. what                                          // 662\n   * is exposed by refs and returned by render. Can be null for stateless                                              // 663\n   * components.                                                                                                       // 664\n   *                                                                                                                   // 665\n   * @return {ReactComponent} the public component instance.                                                           // 666\n   * @internal                                                                                                         // 667\n   */                                                                                                                  // 668\n  getPublicInstance: function () {                                                                                     // 669\n    var inst = this._instance;                                                                                         // 670\n    if (inst instanceof StatelessComponent) {                                                                          // 671\n      return null;                                                                                                     // 672\n    }                                                                                                                  // 673\n    return inst;                                                                                                       // 674\n  },                                                                                                                   // 675\n                                                                                                                       // 676\n  // Stub                                                                                                              // 677\n  _instantiateReactComponent: null                                                                                     // 678\n                                                                                                                       // 679\n};                                                                                                                     // 680\n                                                                                                                       // 681\nReactPerf.measureMethods(ReactCompositeComponentMixin, 'ReactCompositeComponent', {                                    // 682\n  mountComponent: 'mountComponent',                                                                                    // 683\n  updateComponent: 'updateComponent',                                                                                  // 684\n  _renderValidatedComponent: '_renderValidatedComponent'                                                               // 685\n});                                                                                                                    // 686\n                                                                                                                       // 687\nvar ReactCompositeComponent = {                                                                                        // 688\n                                                                                                                       // 689\n  Mixin: ReactCompositeComponentMixin                                                                                  // 690\n                                                                                                                       // 691\n};                                                                                                                     // 692\n                                                                                                                       // 693\nmodule.exports = ReactCompositeComponent;                                                                              // 694\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactComponentEnvironment.js\":[\"fbjs/lib/invariant\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactComponentEnvironment.js                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2014-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactComponentEnvironment                                                                           // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar invariant = require('fbjs/lib/invariant');                                                                         // 14\n                                                                                                                       // 15\nvar injected = false;                                                                                                  // 16\n                                                                                                                       // 17\nvar ReactComponentEnvironment = {                                                                                      // 18\n                                                                                                                       // 19\n  /**                                                                                                                  // 20\n   * Optionally injectable environment dependent cleanup hook. (server vs.                                             // 21\n   * browser etc). Example: A browser system caches DOM nodes based on component                                       // 22\n   * ID and must remove that cache entry when this instance is unmounted.                                              // 23\n   */                                                                                                                  // 24\n  unmountIDFromEnvironment: null,                                                                                      // 25\n                                                                                                                       // 26\n  /**                                                                                                                  // 27\n   * Optionally injectable hook for swapping out mount images in the middle of                                         // 28\n   * the tree.                                                                                                         // 29\n   */                                                                                                                  // 30\n  replaceNodeWithMarkupByID: null,                                                                                     // 31\n                                                                                                                       // 32\n  /**                                                                                                                  // 33\n   * Optionally injectable hook for processing a queue of child updates. Will                                          // 34\n   * later move into MultiChildComponents.                                                                             // 35\n   */                                                                                                                  // 36\n  processChildrenUpdates: null,                                                                                        // 37\n                                                                                                                       // 38\n  injection: {                                                                                                         // 39\n    injectEnvironment: function (environment) {                                                                        // 40\n      !!injected ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactCompositeComponent: injectEnvironment() can only be called once.') : invariant(false) : undefined;\n      ReactComponentEnvironment.unmountIDFromEnvironment = environment.unmountIDFromEnvironment;                       // 42\n      ReactComponentEnvironment.replaceNodeWithMarkupByID = environment.replaceNodeWithMarkupByID;                     // 43\n      ReactComponentEnvironment.processChildrenUpdates = environment.processChildrenUpdates;                           // 44\n      injected = true;                                                                                                 // 45\n    }                                                                                                                  // 46\n  }                                                                                                                    // 47\n                                                                                                                       // 48\n};                                                                                                                     // 49\n                                                                                                                       // 50\nmodule.exports = ReactComponentEnvironment;                                                                            // 51\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactPropTypeLocations.js\":[\"fbjs/lib/keyMirror\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactPropTypeLocations.js                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactPropTypeLocations                                                                              // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar keyMirror = require('fbjs/lib/keyMirror');                                                                         // 14\n                                                                                                                       // 15\nvar ReactPropTypeLocations = keyMirror({                                                                               // 16\n  prop: null,                                                                                                          // 17\n  context: null,                                                                                                       // 18\n  childContext: null                                                                                                   // 19\n});                                                                                                                    // 20\n                                                                                                                       // 21\nmodule.exports = ReactPropTypeLocations;                                                                               // 22\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactPropTypeLocationNames.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactPropTypeLocationNames.js                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactPropTypeLocationNames                                                                          // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar ReactPropTypeLocationNames = {};                                                                                   // 14\n                                                                                                                       // 15\nif (process.env.NODE_ENV !== 'production') {                                                                           // 16\n  ReactPropTypeLocationNames = {                                                                                       // 17\n    prop: 'prop',                                                                                                      // 18\n    context: 'context',                                                                                                // 19\n    childContext: 'child context'                                                                                      // 20\n  };                                                                                                                   // 21\n}                                                                                                                      // 22\n                                                                                                                       // 23\nmodule.exports = ReactPropTypeLocationNames;                                                                           // 24\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"shouldUpdateReactComponent.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/shouldUpdateReactComponent.js                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule shouldUpdateReactComponent                                                                          // 9\n * @typechecks static-only                                                                                             // 10\n */                                                                                                                    // 11\n                                                                                                                       // 12\n'use strict';                                                                                                          // 13\n                                                                                                                       // 14\n/**                                                                                                                    // 15\n * Given a `prevElement` and `nextElement`, determines if the existing                                                 // 16\n * instance should be updated as opposed to being destroyed or replaced by a new                                       // 17\n * instance. Both arguments are elements. This ensures that this logic can                                             // 18\n * operate on stateless trees without any backing instance.                                                            // 19\n *                                                                                                                     // 20\n * @param {?object} prevElement                                                                                        // 21\n * @param {?object} nextElement                                                                                        // 22\n * @return {boolean} True if the existing instance should be updated.                                                  // 23\n * @protected                                                                                                          // 24\n */                                                                                                                    // 25\nfunction shouldUpdateReactComponent(prevElement, nextElement) {                                                        // 26\n  var prevEmpty = prevElement === null || prevElement === false;                                                       // 27\n  var nextEmpty = nextElement === null || nextElement === false;                                                       // 28\n  if (prevEmpty || nextEmpty) {                                                                                        // 29\n    return prevEmpty === nextEmpty;                                                                                    // 30\n  }                                                                                                                    // 31\n                                                                                                                       // 32\n  var prevType = typeof prevElement;                                                                                   // 33\n  var nextType = typeof nextElement;                                                                                   // 34\n  if (prevType === 'string' || prevType === 'number') {                                                                // 35\n    return nextType === 'string' || nextType === 'number';                                                             // 36\n  } else {                                                                                                             // 37\n    return nextType === 'object' && prevElement.type === nextElement.type && prevElement.key === nextElement.key;      // 38\n  }                                                                                                                    // 39\n  return false;                                                                                                        // 40\n}                                                                                                                      // 41\n                                                                                                                       // 42\nmodule.exports = shouldUpdateReactComponent;                                                                           // 43\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ReactEmptyComponent.js\":[\"./ReactElement\",\"./ReactEmptyComponentRegistry\",\"./ReactReconciler\",\"./Object.assign\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactEmptyComponent.js                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2014-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactEmptyComponent                                                                                 // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar ReactElement = require('./ReactElement');                                                                          // 14\nvar ReactEmptyComponentRegistry = require('./ReactEmptyComponentRegistry');                                            // 15\nvar ReactReconciler = require('./ReactReconciler');                                                                    // 16\n                                                                                                                       // 17\nvar assign = require('./Object.assign');                                                                               // 18\n                                                                                                                       // 19\nvar placeholderElement;                                                                                                // 20\n                                                                                                                       // 21\nvar ReactEmptyComponentInjection = {                                                                                   // 22\n  injectEmptyComponent: function (component) {                                                                         // 23\n    placeholderElement = ReactElement.createElement(component);                                                        // 24\n  }                                                                                                                    // 25\n};                                                                                                                     // 26\n                                                                                                                       // 27\nvar ReactEmptyComponent = function (instantiate) {                                                                     // 28\n  this._currentElement = null;                                                                                         // 29\n  this._rootNodeID = null;                                                                                             // 30\n  this._renderedComponent = instantiate(placeholderElement);                                                           // 31\n};                                                                                                                     // 32\nassign(ReactEmptyComponent.prototype, {                                                                                // 33\n  construct: function (element) {},                                                                                    // 34\n  mountComponent: function (rootID, transaction, context) {                                                            // 35\n    ReactEmptyComponentRegistry.registerNullComponentID(rootID);                                                       // 36\n    this._rootNodeID = rootID;                                                                                         // 37\n    return ReactReconciler.mountComponent(this._renderedComponent, rootID, transaction, context);                      // 38\n  },                                                                                                                   // 39\n  receiveComponent: function () {},                                                                                    // 40\n  unmountComponent: function (rootID, transaction, context) {                                                          // 41\n    ReactReconciler.unmountComponent(this._renderedComponent);                                                         // 42\n    ReactEmptyComponentRegistry.deregisterNullComponentID(this._rootNodeID);                                           // 43\n    this._rootNodeID = null;                                                                                           // 44\n    this._renderedComponent = null;                                                                                    // 45\n  }                                                                                                                    // 46\n});                                                                                                                    // 47\n                                                                                                                       // 48\nReactEmptyComponent.injection = ReactEmptyComponentInjection;                                                          // 49\n                                                                                                                       // 50\nmodule.exports = ReactEmptyComponent;                                                                                  // 51\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactNativeComponent.js\":[\"./Object.assign\",\"fbjs/lib/invariant\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactNativeComponent.js                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2014-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactNativeComponent                                                                                // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar assign = require('./Object.assign');                                                                               // 14\nvar invariant = require('fbjs/lib/invariant');                                                                         // 15\n                                                                                                                       // 16\nvar autoGenerateWrapperClass = null;                                                                                   // 17\nvar genericComponentClass = null;                                                                                      // 18\n// This registry keeps track of wrapper classes around native tags.                                                    // 19\nvar tagToComponentClass = {};                                                                                          // 20\nvar textComponentClass = null;                                                                                         // 21\n                                                                                                                       // 22\nvar ReactNativeComponentInjection = {                                                                                  // 23\n  // This accepts a class that receives the tag string. This is a catch all                                            // 24\n  // that can render any kind of tag.                                                                                  // 25\n  injectGenericComponentClass: function (componentClass) {                                                             // 26\n    genericComponentClass = componentClass;                                                                            // 27\n  },                                                                                                                   // 28\n  // This accepts a text component class that takes the text string to be                                              // 29\n  // rendered as props.                                                                                                // 30\n  injectTextComponentClass: function (componentClass) {                                                                // 31\n    textComponentClass = componentClass;                                                                               // 32\n  },                                                                                                                   // 33\n  // This accepts a keyed object with classes as values. Each key represents a                                         // 34\n  // tag. That particular tag will use this class instead of the generic one.                                          // 35\n  injectComponentClasses: function (componentClasses) {                                                                // 36\n    assign(tagToComponentClass, componentClasses);                                                                     // 37\n  }                                                                                                                    // 38\n};                                                                                                                     // 39\n                                                                                                                       // 40\n/**                                                                                                                    // 41\n * Get a composite component wrapper class for a specific tag.                                                         // 42\n *                                                                                                                     // 43\n * @param {ReactElement} element The tag for which to get the class.                                                   // 44\n * @return {function} The React class constructor function.                                                            // 45\n */                                                                                                                    // 46\nfunction getComponentClassForElement(element) {                                                                        // 47\n  if (typeof element.type === 'function') {                                                                            // 48\n    return element.type;                                                                                               // 49\n  }                                                                                                                    // 50\n  var tag = element.type;                                                                                              // 51\n  var componentClass = tagToComponentClass[tag];                                                                       // 52\n  if (componentClass == null) {                                                                                        // 53\n    tagToComponentClass[tag] = componentClass = autoGenerateWrapperClass(tag);                                         // 54\n  }                                                                                                                    // 55\n  return componentClass;                                                                                               // 56\n}                                                                                                                      // 57\n                                                                                                                       // 58\n/**                                                                                                                    // 59\n * Get a native internal component class for a specific tag.                                                           // 60\n *                                                                                                                     // 61\n * @param {ReactElement} element The element to create.                                                                // 62\n * @return {function} The internal class constructor function.                                                         // 63\n */                                                                                                                    // 64\nfunction createInternalComponent(element) {                                                                            // 65\n  !genericComponentClass ? process.env.NODE_ENV !== 'production' ? invariant(false, 'There is no registered component for the tag %s', element.type) : invariant(false) : undefined;\n  return new genericComponentClass(element.type, element.props);                                                       // 67\n}                                                                                                                      // 68\n                                                                                                                       // 69\n/**                                                                                                                    // 70\n * @param {ReactText} text                                                                                             // 71\n * @return {ReactComponent}                                                                                            // 72\n */                                                                                                                    // 73\nfunction createInstanceForText(text) {                                                                                 // 74\n  return new textComponentClass(text);                                                                                 // 75\n}                                                                                                                      // 76\n                                                                                                                       // 77\n/**                                                                                                                    // 78\n * @param {ReactComponent} component                                                                                   // 79\n * @return {boolean}                                                                                                   // 80\n */                                                                                                                    // 81\nfunction isTextComponent(component) {                                                                                  // 82\n  return component instanceof textComponentClass;                                                                      // 83\n}                                                                                                                      // 84\n                                                                                                                       // 85\nvar ReactNativeComponent = {                                                                                           // 86\n  getComponentClassForElement: getComponentClassForElement,                                                            // 87\n  createInternalComponent: createInternalComponent,                                                                    // 88\n  createInstanceForText: createInstanceForText,                                                                        // 89\n  isTextComponent: isTextComponent,                                                                                    // 90\n  injection: ReactNativeComponentInjection                                                                             // 91\n};                                                                                                                     // 92\n                                                                                                                       // 93\nmodule.exports = ReactNativeComponent;                                                                                 // 94\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"validateDOMNesting.js\":[\"./Object.assign\",\"fbjs/lib/emptyFunction\",\"fbjs/lib/warning\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/validateDOMNesting.js                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2015, Facebook, Inc.                                                                                      // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule validateDOMNesting                                                                                  // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar assign = require('./Object.assign');                                                                               // 14\nvar emptyFunction = require('fbjs/lib/emptyFunction');                                                                 // 15\nvar warning = require('fbjs/lib/warning');                                                                             // 16\n                                                                                                                       // 17\nvar validateDOMNesting = emptyFunction;                                                                                // 18\n                                                                                                                       // 19\nif (process.env.NODE_ENV !== 'production') {                                                                           // 20\n  // This validation code was written based on the HTML5 parsing spec:                                                 // 21\n  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope                                        // 22\n  //                                                                                                                   // 23\n  // Note: this does not catch all invalid nesting, nor does it try to (as it's                                        // 24\n  // not clear what practical benefit doing so provides); instead, we warn only                                        // 25\n  // for cases where the parser will give a parse tree differing from what React                                       // 26\n  // intended. For example, <b><div></div></b> is invalid but we don't warn                                            // 27\n  // because it still parses correctly; we do warn for other cases like nested                                         // 28\n  // <p> tags where the beginning of the second element implicitly closes the                                          // 29\n  // first, causing a confusing mess.                                                                                  // 30\n                                                                                                                       // 31\n  // https://html.spec.whatwg.org/multipage/syntax.html#special                                                        // 32\n  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];\n                                                                                                                       // 34\n  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope                                        // 35\n  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template',                // 36\n                                                                                                                       // 37\n  // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point                                         // 38\n  // TODO: Distinguish by namespace here -- for <title>, including it here                                             // 39\n  // errs on the side of fewer warnings                                                                                // 40\n  'foreignObject', 'desc', 'title'];                                                                                   // 41\n                                                                                                                       // 42\n  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope                                 // 43\n  var buttonScopeTags = inScopeTags.concat(['button']);                                                                // 44\n                                                                                                                       // 45\n  // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags                                      // 46\n  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];                                      // 47\n                                                                                                                       // 48\n  var emptyAncestorInfo = {                                                                                            // 49\n    parentTag: null,                                                                                                   // 50\n                                                                                                                       // 51\n    formTag: null,                                                                                                     // 52\n    aTagInScope: null,                                                                                                 // 53\n    buttonTagInScope: null,                                                                                            // 54\n    nobrTagInScope: null,                                                                                              // 55\n    pTagInButtonScope: null,                                                                                           // 56\n                                                                                                                       // 57\n    listItemTagAutoclosing: null,                                                                                      // 58\n    dlItemTagAutoclosing: null                                                                                         // 59\n  };                                                                                                                   // 60\n                                                                                                                       // 61\n  var updatedAncestorInfo = function (oldInfo, tag, instance) {                                                        // 62\n    var ancestorInfo = assign({}, oldInfo || emptyAncestorInfo);                                                       // 63\n    var info = { tag: tag, instance: instance };                                                                       // 64\n                                                                                                                       // 65\n    if (inScopeTags.indexOf(tag) !== -1) {                                                                             // 66\n      ancestorInfo.aTagInScope = null;                                                                                 // 67\n      ancestorInfo.buttonTagInScope = null;                                                                            // 68\n      ancestorInfo.nobrTagInScope = null;                                                                              // 69\n    }                                                                                                                  // 70\n    if (buttonScopeTags.indexOf(tag) !== -1) {                                                                         // 71\n      ancestorInfo.pTagInButtonScope = null;                                                                           // 72\n    }                                                                                                                  // 73\n                                                                                                                       // 74\n    // See rules for 'li', 'dd', 'dt' start tags in                                                                    // 75\n    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody                                          // 76\n    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {                        // 77\n      ancestorInfo.listItemTagAutoclosing = null;                                                                      // 78\n      ancestorInfo.dlItemTagAutoclosing = null;                                                                        // 79\n    }                                                                                                                  // 80\n                                                                                                                       // 81\n    ancestorInfo.parentTag = info;                                                                                     // 82\n                                                                                                                       // 83\n    if (tag === 'form') {                                                                                              // 84\n      ancestorInfo.formTag = info;                                                                                     // 85\n    }                                                                                                                  // 86\n    if (tag === 'a') {                                                                                                 // 87\n      ancestorInfo.aTagInScope = info;                                                                                 // 88\n    }                                                                                                                  // 89\n    if (tag === 'button') {                                                                                            // 90\n      ancestorInfo.buttonTagInScope = info;                                                                            // 91\n    }                                                                                                                  // 92\n    if (tag === 'nobr') {                                                                                              // 93\n      ancestorInfo.nobrTagInScope = info;                                                                              // 94\n    }                                                                                                                  // 95\n    if (tag === 'p') {                                                                                                 // 96\n      ancestorInfo.pTagInButtonScope = info;                                                                           // 97\n    }                                                                                                                  // 98\n    if (tag === 'li') {                                                                                                // 99\n      ancestorInfo.listItemTagAutoclosing = info;                                                                      // 100\n    }                                                                                                                  // 101\n    if (tag === 'dd' || tag === 'dt') {                                                                                // 102\n      ancestorInfo.dlItemTagAutoclosing = info;                                                                        // 103\n    }                                                                                                                  // 104\n                                                                                                                       // 105\n    return ancestorInfo;                                                                                               // 106\n  };                                                                                                                   // 107\n                                                                                                                       // 108\n  /**                                                                                                                  // 109\n   * Returns whether                                                                                                   // 110\n   */                                                                                                                  // 111\n  var isTagValidWithParent = function (tag, parentTag) {                                                               // 112\n    // First, let's check if we're in an unusual parsing mode...                                                       // 113\n    switch (parentTag) {                                                                                               // 114\n      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect                                      // 115\n      case 'select':                                                                                                   // 116\n        return tag === 'option' || tag === 'optgroup' || tag === '#text';                                              // 117\n      case 'optgroup':                                                                                                 // 118\n        return tag === 'option' || tag === '#text';                                                                    // 119\n      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>                                        // 120\n      // but                                                                                                           // 121\n      case 'option':                                                                                                   // 122\n        return tag === '#text';                                                                                        // 123\n                                                                                                                       // 124\n      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd                                          // 125\n      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption                                     // 126\n      // No special behavior since these rules fall back to \"in body\" mode for                                         // 127\n      // all except special table nodes which cause bad parsing behavior anyway.                                       // 128\n                                                                                                                       // 129\n      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr                                          // 130\n      case 'tr':                                                                                                       // 131\n        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';              // 132\n                                                                                                                       // 133\n      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody                                       // 134\n      case 'tbody':                                                                                                    // 135\n      case 'thead':                                                                                                    // 136\n      case 'tfoot':                                                                                                    // 137\n        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';                              // 138\n                                                                                                                       // 139\n      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup                                    // 140\n      case 'colgroup':                                                                                                 // 141\n        return tag === 'col' || tag === 'template';                                                                    // 142\n                                                                                                                       // 143\n      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable                                       // 144\n      case 'table':                                                                                                    // 145\n        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';\n                                                                                                                       // 147\n      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead                                        // 148\n      case 'head':                                                                                                     // 149\n        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';\n                                                                                                                       // 151\n      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element                                        // 152\n      case 'html':                                                                                                     // 153\n        return tag === 'head' || tag === 'body';                                                                       // 154\n    }                                                                                                                  // 155\n                                                                                                                       // 156\n    // Probably in the \"in body\" parsing mode, so we outlaw only tag combos                                            // 157\n    // where the parsing rules cause implicit opens or closes to be added.                                             // 158\n    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody                                          // 159\n    switch (tag) {                                                                                                     // 160\n      case 'h1':                                                                                                       // 161\n      case 'h2':                                                                                                       // 162\n      case 'h3':                                                                                                       // 163\n      case 'h4':                                                                                                       // 164\n      case 'h5':                                                                                                       // 165\n      case 'h6':                                                                                                       // 166\n        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';\n                                                                                                                       // 168\n      case 'rp':                                                                                                       // 169\n      case 'rt':                                                                                                       // 170\n        return impliedEndTags.indexOf(parentTag) === -1;                                                               // 171\n                                                                                                                       // 172\n      case 'caption':                                                                                                  // 173\n      case 'col':                                                                                                      // 174\n      case 'colgroup':                                                                                                 // 175\n      case 'frame':                                                                                                    // 176\n      case 'head':                                                                                                     // 177\n      case 'tbody':                                                                                                    // 178\n      case 'td':                                                                                                       // 179\n      case 'tfoot':                                                                                                    // 180\n      case 'th':                                                                                                       // 181\n      case 'thead':                                                                                                    // 182\n      case 'tr':                                                                                                       // 183\n        // These tags are only valid with a few parents that have special child                                        // 184\n        // parsing rules -- if we're down here, then none of those matched and                                         // 185\n        // so we allow it only if we don't know what the parent is, as all other                                       // 186\n        // cases are invalid.                                                                                          // 187\n        return parentTag == null;                                                                                      // 188\n    }                                                                                                                  // 189\n                                                                                                                       // 190\n    return true;                                                                                                       // 191\n  };                                                                                                                   // 192\n                                                                                                                       // 193\n  /**                                                                                                                  // 194\n   * Returns whether                                                                                                   // 195\n   */                                                                                                                  // 196\n  var findInvalidAncestorForTag = function (tag, ancestorInfo) {                                                       // 197\n    switch (tag) {                                                                                                     // 198\n      case 'address':                                                                                                  // 199\n      case 'article':                                                                                                  // 200\n      case 'aside':                                                                                                    // 201\n      case 'blockquote':                                                                                               // 202\n      case 'center':                                                                                                   // 203\n      case 'details':                                                                                                  // 204\n      case 'dialog':                                                                                                   // 205\n      case 'dir':                                                                                                      // 206\n      case 'div':                                                                                                      // 207\n      case 'dl':                                                                                                       // 208\n      case 'fieldset':                                                                                                 // 209\n      case 'figcaption':                                                                                               // 210\n      case 'figure':                                                                                                   // 211\n      case 'footer':                                                                                                   // 212\n      case 'header':                                                                                                   // 213\n      case 'hgroup':                                                                                                   // 214\n      case 'main':                                                                                                     // 215\n      case 'menu':                                                                                                     // 216\n      case 'nav':                                                                                                      // 217\n      case 'ol':                                                                                                       // 218\n      case 'p':                                                                                                        // 219\n      case 'section':                                                                                                  // 220\n      case 'summary':                                                                                                  // 221\n      case 'ul':                                                                                                       // 222\n                                                                                                                       // 223\n      case 'pre':                                                                                                      // 224\n      case 'listing':                                                                                                  // 225\n                                                                                                                       // 226\n      case 'table':                                                                                                    // 227\n                                                                                                                       // 228\n      case 'hr':                                                                                                       // 229\n                                                                                                                       // 230\n      case 'xmp':                                                                                                      // 231\n                                                                                                                       // 232\n      case 'h1':                                                                                                       // 233\n      case 'h2':                                                                                                       // 234\n      case 'h3':                                                                                                       // 235\n      case 'h4':                                                                                                       // 236\n      case 'h5':                                                                                                       // 237\n      case 'h6':                                                                                                       // 238\n        return ancestorInfo.pTagInButtonScope;                                                                         // 239\n                                                                                                                       // 240\n      case 'form':                                                                                                     // 241\n        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;                                                 // 242\n                                                                                                                       // 243\n      case 'li':                                                                                                       // 244\n        return ancestorInfo.listItemTagAutoclosing;                                                                    // 245\n                                                                                                                       // 246\n      case 'dd':                                                                                                       // 247\n      case 'dt':                                                                                                       // 248\n        return ancestorInfo.dlItemTagAutoclosing;                                                                      // 249\n                                                                                                                       // 250\n      case 'button':                                                                                                   // 251\n        return ancestorInfo.buttonTagInScope;                                                                          // 252\n                                                                                                                       // 253\n      case 'a':                                                                                                        // 254\n        // Spec says something about storing a list of markers, but it sounds                                          // 255\n        // equivalent to this check.                                                                                   // 256\n        return ancestorInfo.aTagInScope;                                                                               // 257\n                                                                                                                       // 258\n      case 'nobr':                                                                                                     // 259\n        return ancestorInfo.nobrTagInScope;                                                                            // 260\n    }                                                                                                                  // 261\n                                                                                                                       // 262\n    return null;                                                                                                       // 263\n  };                                                                                                                   // 264\n                                                                                                                       // 265\n  /**                                                                                                                  // 266\n   * Given a ReactCompositeComponent instance, return a list of its recursive                                          // 267\n   * owners, starting at the root and ending with the instance itself.                                                 // 268\n   */                                                                                                                  // 269\n  var findOwnerStack = function (instance) {                                                                           // 270\n    if (!instance) {                                                                                                   // 271\n      return [];                                                                                                       // 272\n    }                                                                                                                  // 273\n                                                                                                                       // 274\n    var stack = [];                                                                                                    // 275\n    /*eslint-disable space-after-keywords */                                                                           // 276\n    do {                                                                                                               // 277\n      /*eslint-enable space-after-keywords */                                                                          // 278\n      stack.push(instance);                                                                                            // 279\n    } while (instance = instance._currentElement._owner);                                                              // 280\n    stack.reverse();                                                                                                   // 281\n    return stack;                                                                                                      // 282\n  };                                                                                                                   // 283\n                                                                                                                       // 284\n  var didWarn = {};                                                                                                    // 285\n                                                                                                                       // 286\n  validateDOMNesting = function (childTag, childInstance, ancestorInfo) {                                              // 287\n    ancestorInfo = ancestorInfo || emptyAncestorInfo;                                                                  // 288\n    var parentInfo = ancestorInfo.parentTag;                                                                           // 289\n    var parentTag = parentInfo && parentInfo.tag;                                                                      // 290\n                                                                                                                       // 291\n    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;                                 // 292\n    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);                    // 293\n    var problematic = invalidParent || invalidAncestor;                                                                // 294\n                                                                                                                       // 295\n    if (problematic) {                                                                                                 // 296\n      var ancestorTag = problematic.tag;                                                                               // 297\n      var ancestorInstance = problematic.instance;                                                                     // 298\n                                                                                                                       // 299\n      var childOwner = childInstance && childInstance._currentElement._owner;                                          // 300\n      var ancestorOwner = ancestorInstance && ancestorInstance._currentElement._owner;                                 // 301\n                                                                                                                       // 302\n      var childOwners = findOwnerStack(childOwner);                                                                    // 303\n      var ancestorOwners = findOwnerStack(ancestorOwner);                                                              // 304\n                                                                                                                       // 305\n      var minStackLen = Math.min(childOwners.length, ancestorOwners.length);                                           // 306\n      var i;                                                                                                           // 307\n                                                                                                                       // 308\n      var deepestCommon = -1;                                                                                          // 309\n      for (i = 0; i < minStackLen; i++) {                                                                              // 310\n        if (childOwners[i] === ancestorOwners[i]) {                                                                    // 311\n          deepestCommon = i;                                                                                           // 312\n        } else {                                                                                                       // 313\n          break;                                                                                                       // 314\n        }                                                                                                              // 315\n      }                                                                                                                // 316\n                                                                                                                       // 317\n      var UNKNOWN = '(unknown)';                                                                                       // 318\n      var childOwnerNames = childOwners.slice(deepestCommon + 1).map(function (inst) {                                 // 319\n        return inst.getName() || UNKNOWN;                                                                              // 320\n      });                                                                                                              // 321\n      var ancestorOwnerNames = ancestorOwners.slice(deepestCommon + 1).map(function (inst) {                           // 322\n        return inst.getName() || UNKNOWN;                                                                              // 323\n      });                                                                                                              // 324\n      var ownerInfo = [].concat(                                                                                       // 325\n      // If the parent and child instances have a common owner ancestor, start                                         // 326\n      // with that -- otherwise we just start with the parent's owners.                                                // 327\n      deepestCommon !== -1 ? childOwners[deepestCommon].getName() || UNKNOWN : [], ancestorOwnerNames, ancestorTag,    // 328\n      // If we're warning about an invalid (non-parent) ancestry, add '...'                                            // 329\n      invalidAncestor ? ['...'] : [], childOwnerNames, childTag).join(' > ');                                          // 330\n                                                                                                                       // 331\n      var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + ownerInfo;                            // 332\n      if (didWarn[warnKey]) {                                                                                          // 333\n        return;                                                                                                        // 334\n      }                                                                                                                // 335\n      didWarn[warnKey] = true;                                                                                         // 336\n                                                                                                                       // 337\n      if (invalidParent) {                                                                                             // 338\n        var info = '';                                                                                                 // 339\n        if (ancestorTag === 'table' && childTag === 'tr') {                                                            // 340\n          info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';                  // 341\n        }                                                                                                              // 342\n        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): <%s> cannot appear as a child of <%s>. ' + 'See %s.%s', childTag, ancestorTag, ownerInfo, info) : undefined;\n      } else {                                                                                                         // 344\n        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): <%s> cannot appear as a descendant of ' + '<%s>. See %s.', childTag, ancestorTag, ownerInfo) : undefined;\n      }                                                                                                                // 346\n    }                                                                                                                  // 347\n  };                                                                                                                   // 348\n                                                                                                                       // 349\n  validateDOMNesting.ancestorInfoContextKey = '__validateDOMNesting_ancestorInfo$' + Math.random().toString(36).slice(2);\n                                                                                                                       // 351\n  validateDOMNesting.updatedAncestorInfo = updatedAncestorInfo;                                                        // 352\n                                                                                                                       // 353\n  // For testing                                                                                                       // 354\n  validateDOMNesting.isTagValidInContext = function (tag, ancestorInfo) {                                              // 355\n    ancestorInfo = ancestorInfo || emptyAncestorInfo;                                                                  // 356\n    var parentInfo = ancestorInfo.parentTag;                                                                           // 357\n    var parentTag = parentInfo && parentInfo.tag;                                                                      // 358\n    return isTagValidWithParent(tag, parentTag) && !findInvalidAncestorForTag(tag, ancestorInfo);                      // 359\n  };                                                                                                                   // 360\n}                                                                                                                      // 361\n                                                                                                                       // 362\nmodule.exports = validateDOMNesting;                                                                                   // 363\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactDefaultInjection.js\":[\"./BeforeInputEventPlugin\",\"./ChangeEventPlugin\",\"./ClientReactRootIndex\",\"./DefaultEventPluginOrder\",\"./EnterLeaveEventPlugin\",\"fbjs/lib/ExecutionEnvironment\",\"./HTMLDOMPropertyConfig\",\"./ReactBrowserComponentMixin\",\"./ReactComponentBrowserEnvironment\",\"./ReactDefaultBatchingStrategy\",\"./ReactDOMComponent\",\"./ReactDOMTextComponent\",\"./ReactEventListener\",\"./ReactInjection\",\"./ReactInstanceHandles\",\"./ReactMount\",\"./ReactReconcileTransaction\",\"./SelectEventPlugin\",\"./ServerReactRootIndex\",\"./SimpleEventPlugin\",\"./SVGDOMPropertyConfig\",\"./ReactDefaultPerf\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactDefaultInjection.js                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactDefaultInjection                                                                               // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar BeforeInputEventPlugin = require('./BeforeInputEventPlugin');                                                      // 14\nvar ChangeEventPlugin = require('./ChangeEventPlugin');                                                                // 15\nvar ClientReactRootIndex = require('./ClientReactRootIndex');                                                          // 16\nvar DefaultEventPluginOrder = require('./DefaultEventPluginOrder');                                                    // 17\nvar EnterLeaveEventPlugin = require('./EnterLeaveEventPlugin');                                                        // 18\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');                                                   // 19\nvar HTMLDOMPropertyConfig = require('./HTMLDOMPropertyConfig');                                                        // 20\nvar ReactBrowserComponentMixin = require('./ReactBrowserComponentMixin');                                              // 21\nvar ReactComponentBrowserEnvironment = require('./ReactComponentBrowserEnvironment');                                  // 22\nvar ReactDefaultBatchingStrategy = require('./ReactDefaultBatchingStrategy');                                          // 23\nvar ReactDOMComponent = require('./ReactDOMComponent');                                                                // 24\nvar ReactDOMTextComponent = require('./ReactDOMTextComponent');                                                        // 25\nvar ReactEventListener = require('./ReactEventListener');                                                              // 26\nvar ReactInjection = require('./ReactInjection');                                                                      // 27\nvar ReactInstanceHandles = require('./ReactInstanceHandles');                                                          // 28\nvar ReactMount = require('./ReactMount');                                                                              // 29\nvar ReactReconcileTransaction = require('./ReactReconcileTransaction');                                                // 30\nvar SelectEventPlugin = require('./SelectEventPlugin');                                                                // 31\nvar ServerReactRootIndex = require('./ServerReactRootIndex');                                                          // 32\nvar SimpleEventPlugin = require('./SimpleEventPlugin');                                                                // 33\nvar SVGDOMPropertyConfig = require('./SVGDOMPropertyConfig');                                                          // 34\n                                                                                                                       // 35\nvar alreadyInjected = false;                                                                                           // 36\n                                                                                                                       // 37\nfunction inject() {                                                                                                    // 38\n  if (alreadyInjected) {                                                                                               // 39\n    // TODO: This is currently true because these injections are shared between                                        // 40\n    // the client and the server package. They should be built independently                                           // 41\n    // and not share any injection state. Then this problem will be solved.                                            // 42\n    return;                                                                                                            // 43\n  }                                                                                                                    // 44\n  alreadyInjected = true;                                                                                              // 45\n                                                                                                                       // 46\n  ReactInjection.EventEmitter.injectReactEventListener(ReactEventListener);                                            // 47\n                                                                                                                       // 48\n  /**                                                                                                                  // 49\n   * Inject modules for resolving DOM hierarchy and plugin ordering.                                                   // 50\n   */                                                                                                                  // 51\n  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);                                       // 52\n  ReactInjection.EventPluginHub.injectInstanceHandle(ReactInstanceHandles);                                            // 53\n  ReactInjection.EventPluginHub.injectMount(ReactMount);                                                               // 54\n                                                                                                                       // 55\n  /**                                                                                                                  // 56\n   * Some important event plugins included by default (without having to require                                       // 57\n   * them).                                                                                                            // 58\n   */                                                                                                                  // 59\n  ReactInjection.EventPluginHub.injectEventPluginsByName({                                                             // 60\n    SimpleEventPlugin: SimpleEventPlugin,                                                                              // 61\n    EnterLeaveEventPlugin: EnterLeaveEventPlugin,                                                                      // 62\n    ChangeEventPlugin: ChangeEventPlugin,                                                                              // 63\n    SelectEventPlugin: SelectEventPlugin,                                                                              // 64\n    BeforeInputEventPlugin: BeforeInputEventPlugin                                                                     // 65\n  });                                                                                                                  // 66\n                                                                                                                       // 67\n  ReactInjection.NativeComponent.injectGenericComponentClass(ReactDOMComponent);                                       // 68\n                                                                                                                       // 69\n  ReactInjection.NativeComponent.injectTextComponentClass(ReactDOMTextComponent);                                      // 70\n                                                                                                                       // 71\n  ReactInjection.Class.injectMixin(ReactBrowserComponentMixin);                                                        // 72\n                                                                                                                       // 73\n  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);                                           // 74\n  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);                                            // 75\n                                                                                                                       // 76\n  ReactInjection.EmptyComponent.injectEmptyComponent('noscript');                                                      // 77\n                                                                                                                       // 78\n  ReactInjection.Updates.injectReconcileTransaction(ReactReconcileTransaction);                                        // 79\n  ReactInjection.Updates.injectBatchingStrategy(ReactDefaultBatchingStrategy);                                         // 80\n                                                                                                                       // 81\n  ReactInjection.RootIndex.injectCreateReactRootIndex(ExecutionEnvironment.canUseDOM ? ClientReactRootIndex.createReactRootIndex : ServerReactRootIndex.createReactRootIndex);\n                                                                                                                       // 83\n  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);                                        // 84\n                                                                                                                       // 85\n  if (process.env.NODE_ENV !== 'production') {                                                                         // 86\n    var url = ExecutionEnvironment.canUseDOM && window.location.href || '';                                            // 87\n    if (/[?&]react_perf\\b/.test(url)) {                                                                                // 88\n      var ReactDefaultPerf = require('./ReactDefaultPerf');                                                            // 89\n      ReactDefaultPerf.start();                                                                                        // 90\n    }                                                                                                                  // 91\n  }                                                                                                                    // 92\n}                                                                                                                      // 93\n                                                                                                                       // 94\nmodule.exports = {                                                                                                     // 95\n  inject: inject                                                                                                       // 96\n};                                                                                                                     // 97\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"BeforeInputEventPlugin.js\":[\"./EventConstants\",\"./EventPropagators\",\"fbjs/lib/ExecutionEnvironment\",\"./FallbackCompositionState\",\"./SyntheticCompositionEvent\",\"./SyntheticInputEvent\",\"fbjs/lib/keyOf\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/BeforeInputEventPlugin.js                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015 Facebook, Inc.                                                                                  // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule BeforeInputEventPlugin                                                                              // 9\n * @typechecks static-only                                                                                             // 10\n */                                                                                                                    // 11\n                                                                                                                       // 12\n'use strict';                                                                                                          // 13\n                                                                                                                       // 14\nvar EventConstants = require('./EventConstants');                                                                      // 15\nvar EventPropagators = require('./EventPropagators');                                                                  // 16\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');                                                   // 17\nvar FallbackCompositionState = require('./FallbackCompositionState');                                                  // 18\nvar SyntheticCompositionEvent = require('./SyntheticCompositionEvent');                                                // 19\nvar SyntheticInputEvent = require('./SyntheticInputEvent');                                                            // 20\n                                                                                                                       // 21\nvar keyOf = require('fbjs/lib/keyOf');                                                                                 // 22\n                                                                                                                       // 23\nvar END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space                                                         // 24\nvar START_KEYCODE = 229;                                                                                               // 25\n                                                                                                                       // 26\nvar canUseCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;                           // 27\n                                                                                                                       // 28\nvar documentMode = null;                                                                                               // 29\nif (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {                                                    // 30\n  documentMode = document.documentMode;                                                                                // 31\n}                                                                                                                      // 32\n                                                                                                                       // 33\n// Webkit offers a very useful `textInput` event that can be used to                                                   // 34\n// directly represent `beforeInput`. The IE `textinput` event is not as                                                // 35\n// useful, so we don't use it.                                                                                         // 36\nvar canUseTextInputEvent = ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode && !isPresto();    // 37\n                                                                                                                       // 38\n// In IE9+, we have access to composition events, but the data supplied                                                // 39\n// by the native compositionend event may be incorrect. Japanese ideographic                                           // 40\n// spaces, for instance (\\u3000) are not recorded correctly.                                                           // 41\nvar useFallbackCompositionData = ExecutionEnvironment.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);\n                                                                                                                       // 43\n/**                                                                                                                    // 44\n * Opera <= 12 includes TextEvent in window, but does not fire                                                         // 45\n * text input events. Rely on keypress instead.                                                                        // 46\n */                                                                                                                    // 47\nfunction isPresto() {                                                                                                  // 48\n  var opera = window.opera;                                                                                            // 49\n  return typeof opera === 'object' && typeof opera.version === 'function' && parseInt(opera.version(), 10) <= 12;      // 50\n}                                                                                                                      // 51\n                                                                                                                       // 52\nvar SPACEBAR_CODE = 32;                                                                                                // 53\nvar SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);                                                                // 54\n                                                                                                                       // 55\nvar topLevelTypes = EventConstants.topLevelTypes;                                                                      // 56\n                                                                                                                       // 57\n// Events and their corresponding property names.                                                                      // 58\nvar eventTypes = {                                                                                                     // 59\n  beforeInput: {                                                                                                       // 60\n    phasedRegistrationNames: {                                                                                         // 61\n      bubbled: keyOf({ onBeforeInput: null }),                                                                         // 62\n      captured: keyOf({ onBeforeInputCapture: null })                                                                  // 63\n    },                                                                                                                 // 64\n    dependencies: [topLevelTypes.topCompositionEnd, topLevelTypes.topKeyPress, topLevelTypes.topTextInput, topLevelTypes.topPaste]\n  },                                                                                                                   // 66\n  compositionEnd: {                                                                                                    // 67\n    phasedRegistrationNames: {                                                                                         // 68\n      bubbled: keyOf({ onCompositionEnd: null }),                                                                      // 69\n      captured: keyOf({ onCompositionEndCapture: null })                                                               // 70\n    },                                                                                                                 // 71\n    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionEnd, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]\n  },                                                                                                                   // 73\n  compositionStart: {                                                                                                  // 74\n    phasedRegistrationNames: {                                                                                         // 75\n      bubbled: keyOf({ onCompositionStart: null }),                                                                    // 76\n      captured: keyOf({ onCompositionStartCapture: null })                                                             // 77\n    },                                                                                                                 // 78\n    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionStart, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]\n  },                                                                                                                   // 80\n  compositionUpdate: {                                                                                                 // 81\n    phasedRegistrationNames: {                                                                                         // 82\n      bubbled: keyOf({ onCompositionUpdate: null }),                                                                   // 83\n      captured: keyOf({ onCompositionUpdateCapture: null })                                                            // 84\n    },                                                                                                                 // 85\n    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionUpdate, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]\n  }                                                                                                                    // 87\n};                                                                                                                     // 88\n                                                                                                                       // 89\n// Track whether we've ever handled a keypress on the space key.                                                       // 90\nvar hasSpaceKeypress = false;                                                                                          // 91\n                                                                                                                       // 92\n/**                                                                                                                    // 93\n * Return whether a native keypress event is assumed to be a command.                                                  // 94\n * This is required because Firefox fires `keypress` events for key commands                                           // 95\n * (cut, copy, select-all, etc.) even though no character is inserted.                                                 // 96\n */                                                                                                                    // 97\nfunction isKeypressCommand(nativeEvent) {                                                                              // 98\n  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&                                         // 99\n  // ctrlKey && altKey is equivalent to AltGr, and is not a command.                                                   // 100\n  !(nativeEvent.ctrlKey && nativeEvent.altKey);                                                                        // 101\n}                                                                                                                      // 102\n                                                                                                                       // 103\n/**                                                                                                                    // 104\n * Translate native top level events into event types.                                                                 // 105\n *                                                                                                                     // 106\n * @param {string} topLevelType                                                                                        // 107\n * @return {object}                                                                                                    // 108\n */                                                                                                                    // 109\nfunction getCompositionEventType(topLevelType) {                                                                       // 110\n  switch (topLevelType) {                                                                                              // 111\n    case topLevelTypes.topCompositionStart:                                                                            // 112\n      return eventTypes.compositionStart;                                                                              // 113\n    case topLevelTypes.topCompositionEnd:                                                                              // 114\n      return eventTypes.compositionEnd;                                                                                // 115\n    case topLevelTypes.topCompositionUpdate:                                                                           // 116\n      return eventTypes.compositionUpdate;                                                                             // 117\n  }                                                                                                                    // 118\n}                                                                                                                      // 119\n                                                                                                                       // 120\n/**                                                                                                                    // 121\n * Does our fallback best-guess model think this event signifies that                                                  // 122\n * composition has begun?                                                                                              // 123\n *                                                                                                                     // 124\n * @param {string} topLevelType                                                                                        // 125\n * @param {object} nativeEvent                                                                                         // 126\n * @return {boolean}                                                                                                   // 127\n */                                                                                                                    // 128\nfunction isFallbackCompositionStart(topLevelType, nativeEvent) {                                                       // 129\n  return topLevelType === topLevelTypes.topKeyDown && nativeEvent.keyCode === START_KEYCODE;                           // 130\n}                                                                                                                      // 131\n                                                                                                                       // 132\n/**                                                                                                                    // 133\n * Does our fallback mode think that this event is the end of composition?                                             // 134\n *                                                                                                                     // 135\n * @param {string} topLevelType                                                                                        // 136\n * @param {object} nativeEvent                                                                                         // 137\n * @return {boolean}                                                                                                   // 138\n */                                                                                                                    // 139\nfunction isFallbackCompositionEnd(topLevelType, nativeEvent) {                                                         // 140\n  switch (topLevelType) {                                                                                              // 141\n    case topLevelTypes.topKeyUp:                                                                                       // 142\n      // Command keys insert or clear IME input.                                                                       // 143\n      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;                                                         // 144\n    case topLevelTypes.topKeyDown:                                                                                     // 145\n      // Expect IME keyCode on each keydown. If we get any other                                                       // 146\n      // code we must have exited earlier.                                                                             // 147\n      return nativeEvent.keyCode !== START_KEYCODE;                                                                    // 148\n    case topLevelTypes.topKeyPress:                                                                                    // 149\n    case topLevelTypes.topMouseDown:                                                                                   // 150\n    case topLevelTypes.topBlur:                                                                                        // 151\n      // Events are not possible without cancelling IME.                                                               // 152\n      return true;                                                                                                     // 153\n    default:                                                                                                           // 154\n      return false;                                                                                                    // 155\n  }                                                                                                                    // 156\n}                                                                                                                      // 157\n                                                                                                                       // 158\n/**                                                                                                                    // 159\n * Google Input Tools provides composition data via a CustomEvent,                                                     // 160\n * with the `data` property populated in the `detail` object. If this                                                  // 161\n * is available on the event object, use it. If not, this is a plain                                                   // 162\n * composition event and we have nothing special to extract.                                                           // 163\n *                                                                                                                     // 164\n * @param {object} nativeEvent                                                                                         // 165\n * @return {?string}                                                                                                   // 166\n */                                                                                                                    // 167\nfunction getDataFromCustomEvent(nativeEvent) {                                                                         // 168\n  var detail = nativeEvent.detail;                                                                                     // 169\n  if (typeof detail === 'object' && 'data' in detail) {                                                                // 170\n    return detail.data;                                                                                                // 171\n  }                                                                                                                    // 172\n  return null;                                                                                                         // 173\n}                                                                                                                      // 174\n                                                                                                                       // 175\n// Track the current IME composition fallback object, if any.                                                          // 176\nvar currentComposition = null;                                                                                         // 177\n                                                                                                                       // 178\n/**                                                                                                                    // 179\n * @param {string} topLevelType Record from `EventConstants`.                                                          // 180\n * @param {DOMEventTarget} topLevelTarget The listening component root node.                                           // 181\n * @param {string} topLevelTargetID ID of `topLevelTarget`.                                                            // 182\n * @param {object} nativeEvent Native browser event.                                                                   // 183\n * @return {?object} A SyntheticCompositionEvent.                                                                      // 184\n */                                                                                                                    // 185\nfunction extractCompositionEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {     // 186\n  var eventType;                                                                                                       // 187\n  var fallbackData;                                                                                                    // 188\n                                                                                                                       // 189\n  if (canUseCompositionEvent) {                                                                                        // 190\n    eventType = getCompositionEventType(topLevelType);                                                                 // 191\n  } else if (!currentComposition) {                                                                                    // 192\n    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {                                                       // 193\n      eventType = eventTypes.compositionStart;                                                                         // 194\n    }                                                                                                                  // 195\n  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {                                                    // 196\n    eventType = eventTypes.compositionEnd;                                                                             // 197\n  }                                                                                                                    // 198\n                                                                                                                       // 199\n  if (!eventType) {                                                                                                    // 200\n    return null;                                                                                                       // 201\n  }                                                                                                                    // 202\n                                                                                                                       // 203\n  if (useFallbackCompositionData) {                                                                                    // 204\n    // The current composition is stored statically and must not be                                                    // 205\n    // overwritten while composition continues.                                                                        // 206\n    if (!currentComposition && eventType === eventTypes.compositionStart) {                                            // 207\n      currentComposition = FallbackCompositionState.getPooled(topLevelTarget);                                         // 208\n    } else if (eventType === eventTypes.compositionEnd) {                                                              // 209\n      if (currentComposition) {                                                                                        // 210\n        fallbackData = currentComposition.getData();                                                                   // 211\n      }                                                                                                                // 212\n    }                                                                                                                  // 213\n  }                                                                                                                    // 214\n                                                                                                                       // 215\n  var event = SyntheticCompositionEvent.getPooled(eventType, topLevelTargetID, nativeEvent, nativeEventTarget);        // 216\n                                                                                                                       // 217\n  if (fallbackData) {                                                                                                  // 218\n    // Inject data generated from fallback path into the synthetic event.                                              // 219\n    // This matches the property of native CompositionEventInterface.                                                  // 220\n    event.data = fallbackData;                                                                                         // 221\n  } else {                                                                                                             // 222\n    var customData = getDataFromCustomEvent(nativeEvent);                                                              // 223\n    if (customData !== null) {                                                                                         // 224\n      event.data = customData;                                                                                         // 225\n    }                                                                                                                  // 226\n  }                                                                                                                    // 227\n                                                                                                                       // 228\n  EventPropagators.accumulateTwoPhaseDispatches(event);                                                                // 229\n  return event;                                                                                                        // 230\n}                                                                                                                      // 231\n                                                                                                                       // 232\n/**                                                                                                                    // 233\n * @param {string} topLevelType Record from `EventConstants`.                                                          // 234\n * @param {object} nativeEvent Native browser event.                                                                   // 235\n * @return {?string} The string corresponding to this `beforeInput` event.                                             // 236\n */                                                                                                                    // 237\nfunction getNativeBeforeInputChars(topLevelType, nativeEvent) {                                                        // 238\n  switch (topLevelType) {                                                                                              // 239\n    case topLevelTypes.topCompositionEnd:                                                                              // 240\n      return getDataFromCustomEvent(nativeEvent);                                                                      // 241\n    case topLevelTypes.topKeyPress:                                                                                    // 242\n      /**                                                                                                              // 243\n       * If native `textInput` events are available, our goal is to make                                               // 244\n       * use of them. However, there is a special case: the spacebar key.                                              // 245\n       * In Webkit, preventing default on a spacebar `textInput` event                                                 // 246\n       * cancels character insertion, but it *also* causes the browser                                                 // 247\n       * to fall back to its default spacebar behavior of scrolling the                                                // 248\n       * page.                                                                                                         // 249\n       *                                                                                                               // 250\n       * Tracking at:                                                                                                  // 251\n       * https://code.google.com/p/chromium/issues/detail?id=355103                                                    // 252\n       *                                                                                                               // 253\n       * To avoid this issue, use the keypress event as if no `textInput`                                              // 254\n       * event is available.                                                                                           // 255\n       */                                                                                                              // 256\n      var which = nativeEvent.which;                                                                                   // 257\n      if (which !== SPACEBAR_CODE) {                                                                                   // 258\n        return null;                                                                                                   // 259\n      }                                                                                                                // 260\n                                                                                                                       // 261\n      hasSpaceKeypress = true;                                                                                         // 262\n      return SPACEBAR_CHAR;                                                                                            // 263\n                                                                                                                       // 264\n    case topLevelTypes.topTextInput:                                                                                   // 265\n      // Record the characters to be added to the DOM.                                                                 // 266\n      var chars = nativeEvent.data;                                                                                    // 267\n                                                                                                                       // 268\n      // If it's a spacebar character, assume that we have already handled                                             // 269\n      // it at the keypress level and bail immediately. Android Chrome                                                 // 270\n      // doesn't give us keycodes, so we need to blacklist it.                                                         // 271\n      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {                                                               // 272\n        return null;                                                                                                   // 273\n      }                                                                                                                // 274\n                                                                                                                       // 275\n      return chars;                                                                                                    // 276\n                                                                                                                       // 277\n    default:                                                                                                           // 278\n      // For other native event types, do nothing.                                                                     // 279\n      return null;                                                                                                     // 280\n  }                                                                                                                    // 281\n}                                                                                                                      // 282\n                                                                                                                       // 283\n/**                                                                                                                    // 284\n * For browsers that do not provide the `textInput` event, extract the                                                 // 285\n * appropriate string to use for SyntheticInputEvent.                                                                  // 286\n *                                                                                                                     // 287\n * @param {string} topLevelType Record from `EventConstants`.                                                          // 288\n * @param {object} nativeEvent Native browser event.                                                                   // 289\n * @return {?string} The fallback string for this `beforeInput` event.                                                 // 290\n */                                                                                                                    // 291\nfunction getFallbackBeforeInputChars(topLevelType, nativeEvent) {                                                      // 292\n  // If we are currently composing (IME) and using a fallback to do so,                                                // 293\n  // try to extract the composed characters from the fallback object.                                                  // 294\n  if (currentComposition) {                                                                                            // 295\n    if (topLevelType === topLevelTypes.topCompositionEnd || isFallbackCompositionEnd(topLevelType, nativeEvent)) {     // 296\n      var chars = currentComposition.getData();                                                                        // 297\n      FallbackCompositionState.release(currentComposition);                                                            // 298\n      currentComposition = null;                                                                                       // 299\n      return chars;                                                                                                    // 300\n    }                                                                                                                  // 301\n    return null;                                                                                                       // 302\n  }                                                                                                                    // 303\n                                                                                                                       // 304\n  switch (topLevelType) {                                                                                              // 305\n    case topLevelTypes.topPaste:                                                                                       // 306\n      // If a paste event occurs after a keypress, throw out the input                                                 // 307\n      // chars. Paste events should not lead to BeforeInput events.                                                    // 308\n      return null;                                                                                                     // 309\n    case topLevelTypes.topKeyPress:                                                                                    // 310\n      /**                                                                                                              // 311\n       * As of v27, Firefox may fire keypress events even when no character                                            // 312\n       * will be inserted. A few possibilities:                                                                        // 313\n       *                                                                                                               // 314\n       * - `which` is `0`. Arrow keys, Esc key, etc.                                                                   // 315\n       *                                                                                                               // 316\n       * - `which` is the pressed key code, but no char is available.                                                  // 317\n       *   Ex: 'AltGr + d` in Polish. There is no modified character for                                               // 318\n       *   this key combination and no character is inserted into the                                                  // 319\n       *   document, but FF fires the keypress for char code `100` anyway.                                             // 320\n       *   No `input` event will occur.                                                                                // 321\n       *                                                                                                               // 322\n       * - `which` is the pressed key code, but a command combination is                                               // 323\n       *   being used. Ex: `Cmd+C`. No character is inserted, and no                                                   // 324\n       *   `input` event will occur.                                                                                   // 325\n       */                                                                                                              // 326\n      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {                                                      // 327\n        return String.fromCharCode(nativeEvent.which);                                                                 // 328\n      }                                                                                                                // 329\n      return null;                                                                                                     // 330\n    case topLevelTypes.topCompositionEnd:                                                                              // 331\n      return useFallbackCompositionData ? null : nativeEvent.data;                                                     // 332\n    default:                                                                                                           // 333\n      return null;                                                                                                     // 334\n  }                                                                                                                    // 335\n}                                                                                                                      // 336\n                                                                                                                       // 337\n/**                                                                                                                    // 338\n * Extract a SyntheticInputEvent for `beforeInput`, based on either native                                             // 339\n * `textInput` or fallback behavior.                                                                                   // 340\n *                                                                                                                     // 341\n * @param {string} topLevelType Record from `EventConstants`.                                                          // 342\n * @param {DOMEventTarget} topLevelTarget The listening component root node.                                           // 343\n * @param {string} topLevelTargetID ID of `topLevelTarget`.                                                            // 344\n * @param {object} nativeEvent Native browser event.                                                                   // 345\n * @return {?object} A SyntheticInputEvent.                                                                            // 346\n */                                                                                                                    // 347\nfunction extractBeforeInputEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {     // 348\n  var chars;                                                                                                           // 349\n                                                                                                                       // 350\n  if (canUseTextInputEvent) {                                                                                          // 351\n    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);                                                      // 352\n  } else {                                                                                                             // 353\n    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);                                                    // 354\n  }                                                                                                                    // 355\n                                                                                                                       // 356\n  // If no characters are being inserted, no BeforeInput event should                                                  // 357\n  // be fired.                                                                                                         // 358\n  if (!chars) {                                                                                                        // 359\n    return null;                                                                                                       // 360\n  }                                                                                                                    // 361\n                                                                                                                       // 362\n  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, topLevelTargetID, nativeEvent, nativeEventTarget);\n                                                                                                                       // 364\n  event.data = chars;                                                                                                  // 365\n  EventPropagators.accumulateTwoPhaseDispatches(event);                                                                // 366\n  return event;                                                                                                        // 367\n}                                                                                                                      // 368\n                                                                                                                       // 369\n/**                                                                                                                    // 370\n * Create an `onBeforeInput` event to match                                                                            // 371\n * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.                                       // 372\n *                                                                                                                     // 373\n * This event plugin is based on the native `textInput` event                                                          // 374\n * available in Chrome, Safari, Opera, and IE. This event fires after                                                  // 375\n * `onKeyPress` and `onCompositionEnd`, but before `onInput`.                                                          // 376\n *                                                                                                                     // 377\n * `beforeInput` is spec'd but not implemented in any browsers, and                                                    // 378\n * the `input` event does not provide any useful information about what has                                            // 379\n * actually been added, contrary to the spec. Thus, `textInput` is the best                                            // 380\n * available event to identify the characters that have actually been inserted                                         // 381\n * into the target node.                                                                                               // 382\n *                                                                                                                     // 383\n * This plugin is also responsible for emitting `composition` events, thus                                             // 384\n * allowing us to share composition fallback code for both `beforeInput` and                                           // 385\n * `composition` event types.                                                                                          // 386\n */                                                                                                                    // 387\nvar BeforeInputEventPlugin = {                                                                                         // 388\n                                                                                                                       // 389\n  eventTypes: eventTypes,                                                                                              // 390\n                                                                                                                       // 391\n  /**                                                                                                                  // 392\n   * @param {string} topLevelType Record from `EventConstants`.                                                        // 393\n   * @param {DOMEventTarget} topLevelTarget The listening component root node.                                         // 394\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.                                                          // 395\n   * @param {object} nativeEvent Native browser event.                                                                 // 396\n   * @return {*} An accumulation of synthetic events.                                                                  // 397\n   * @see {EventPluginHub.extractEvents}                                                                               // 398\n   */                                                                                                                  // 399\n  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {           // 400\n    return [extractCompositionEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget), extractBeforeInputEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget)];\n  }                                                                                                                    // 402\n};                                                                                                                     // 403\n                                                                                                                       // 404\nmodule.exports = BeforeInputEventPlugin;                                                                               // 405\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"EventPropagators.js\":[\"./EventConstants\",\"./EventPluginHub\",\"fbjs/lib/warning\",\"./accumulateInto\",\"./forEachAccumulated\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/EventPropagators.js                                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule EventPropagators                                                                                    // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar EventConstants = require('./EventConstants');                                                                      // 14\nvar EventPluginHub = require('./EventPluginHub');                                                                      // 15\n                                                                                                                       // 16\nvar warning = require('fbjs/lib/warning');                                                                             // 17\n                                                                                                                       // 18\nvar accumulateInto = require('./accumulateInto');                                                                      // 19\nvar forEachAccumulated = require('./forEachAccumulated');                                                              // 20\n                                                                                                                       // 21\nvar PropagationPhases = EventConstants.PropagationPhases;                                                              // 22\nvar getListener = EventPluginHub.getListener;                                                                          // 23\n                                                                                                                       // 24\n/**                                                                                                                    // 25\n * Some event types have a notion of different registration names for different                                        // 26\n * \"phases\" of propagation. This finds listeners by a given phase.                                                     // 27\n */                                                                                                                    // 28\nfunction listenerAtPhase(id, event, propagationPhase) {                                                                // 29\n  var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];                               // 30\n  return getListener(id, registrationName);                                                                            // 31\n}                                                                                                                      // 32\n                                                                                                                       // 33\n/**                                                                                                                    // 34\n * Tags a `SyntheticEvent` with dispatched listeners. Creating this function                                           // 35\n * here, allows us to not have to bind or create functions for each event.                                             // 36\n * Mutating the event's members allows us to not have to create a wrapping                                             // 37\n * \"dispatch\" object that pairs the event with the listener.                                                           // 38\n */                                                                                                                    // 39\nfunction accumulateDirectionalDispatches(domID, upwards, event) {                                                      // 40\n  if (process.env.NODE_ENV !== 'production') {                                                                         // 41\n    process.env.NODE_ENV !== 'production' ? warning(domID, 'Dispatching id must not be null') : undefined;             // 42\n  }                                                                                                                    // 43\n  var phase = upwards ? PropagationPhases.bubbled : PropagationPhases.captured;                                        // 44\n  var listener = listenerAtPhase(domID, event, phase);                                                                 // 45\n  if (listener) {                                                                                                      // 46\n    event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);                                     // 47\n    event._dispatchIDs = accumulateInto(event._dispatchIDs, domID);                                                    // 48\n  }                                                                                                                    // 49\n}                                                                                                                      // 50\n                                                                                                                       // 51\n/**                                                                                                                    // 52\n * Collect dispatches (must be entirely collected before dispatching - see unit                                        // 53\n * tests). Lazily allocate the array to conserve memory.  We must loop through                                         // 54\n * each event and perform the traversal for each one. We cannot perform a                                              // 55\n * single traversal for the entire collection of events because each event may                                         // 56\n * have a different target.                                                                                            // 57\n */                                                                                                                    // 58\nfunction accumulateTwoPhaseDispatchesSingle(event) {                                                                   // 59\n  if (event && event.dispatchConfig.phasedRegistrationNames) {                                                         // 60\n    EventPluginHub.injection.getInstanceHandle().traverseTwoPhase(event.dispatchMarker, accumulateDirectionalDispatches, event);\n  }                                                                                                                    // 62\n}                                                                                                                      // 63\n                                                                                                                       // 64\n/**                                                                                                                    // 65\n * Same as `accumulateTwoPhaseDispatchesSingle`, but skips over the targetID.                                          // 66\n */                                                                                                                    // 67\nfunction accumulateTwoPhaseDispatchesSingleSkipTarget(event) {                                                         // 68\n  if (event && event.dispatchConfig.phasedRegistrationNames) {                                                         // 69\n    EventPluginHub.injection.getInstanceHandle().traverseTwoPhaseSkipTarget(event.dispatchMarker, accumulateDirectionalDispatches, event);\n  }                                                                                                                    // 71\n}                                                                                                                      // 72\n                                                                                                                       // 73\n/**                                                                                                                    // 74\n * Accumulates without regard to direction, does not look for phased                                                   // 75\n * registration names. Same as `accumulateDirectDispatchesSingle` but without                                          // 76\n * requiring that the `dispatchMarker` be the same as the dispatched ID.                                               // 77\n */                                                                                                                    // 78\nfunction accumulateDispatches(id, ignoredDirection, event) {                                                           // 79\n  if (event && event.dispatchConfig.registrationName) {                                                                // 80\n    var registrationName = event.dispatchConfig.registrationName;                                                      // 81\n    var listener = getListener(id, registrationName);                                                                  // 82\n    if (listener) {                                                                                                    // 83\n      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);                                   // 84\n      event._dispatchIDs = accumulateInto(event._dispatchIDs, id);                                                     // 85\n    }                                                                                                                  // 86\n  }                                                                                                                    // 87\n}                                                                                                                      // 88\n                                                                                                                       // 89\n/**                                                                                                                    // 90\n * Accumulates dispatches on an `SyntheticEvent`, but only for the                                                     // 91\n * `dispatchMarker`.                                                                                                   // 92\n * @param {SyntheticEvent} event                                                                                       // 93\n */                                                                                                                    // 94\nfunction accumulateDirectDispatchesSingle(event) {                                                                     // 95\n  if (event && event.dispatchConfig.registrationName) {                                                                // 96\n    accumulateDispatches(event.dispatchMarker, null, event);                                                           // 97\n  }                                                                                                                    // 98\n}                                                                                                                      // 99\n                                                                                                                       // 100\nfunction accumulateTwoPhaseDispatches(events) {                                                                        // 101\n  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);                                                      // 102\n}                                                                                                                      // 103\n                                                                                                                       // 104\nfunction accumulateTwoPhaseDispatchesSkipTarget(events) {                                                              // 105\n  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);                                            // 106\n}                                                                                                                      // 107\n                                                                                                                       // 108\nfunction accumulateEnterLeaveDispatches(leave, enter, fromID, toID) {                                                  // 109\n  EventPluginHub.injection.getInstanceHandle().traverseEnterLeave(fromID, toID, accumulateDispatches, leave, enter);   // 110\n}                                                                                                                      // 111\n                                                                                                                       // 112\nfunction accumulateDirectDispatches(events) {                                                                          // 113\n  forEachAccumulated(events, accumulateDirectDispatchesSingle);                                                        // 114\n}                                                                                                                      // 115\n                                                                                                                       // 116\n/**                                                                                                                    // 117\n * A small set of propagation patterns, each of which will accept a small amount                                       // 118\n * of information, and generate a set of \"dispatch ready event objects\" - which                                        // 119\n * are sets of events that have already been annotated with a set of dispatched                                        // 120\n * listener functions/ids. The API is designed this way to discourage these                                            // 121\n * propagation strategies from actually executing the dispatches, since we                                             // 122\n * always want to collect the entire set of dispatches before executing event a                                        // 123\n * single one.                                                                                                         // 124\n *                                                                                                                     // 125\n * @constructor EventPropagators                                                                                       // 126\n */                                                                                                                    // 127\nvar EventPropagators = {                                                                                               // 128\n  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,                                                          // 129\n  accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,                                      // 130\n  accumulateDirectDispatches: accumulateDirectDispatches,                                                              // 131\n  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches                                                       // 132\n};                                                                                                                     // 133\n                                                                                                                       // 134\nmodule.exports = EventPropagators;                                                                                     // 135\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"FallbackCompositionState.js\":[\"./PooledClass\",\"./Object.assign\",\"./getTextContentAccessor\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/FallbackCompositionState.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule FallbackCompositionState                                                                            // 9\n * @typechecks static-only                                                                                             // 10\n */                                                                                                                    // 11\n                                                                                                                       // 12\n'use strict';                                                                                                          // 13\n                                                                                                                       // 14\nvar PooledClass = require('./PooledClass');                                                                            // 15\n                                                                                                                       // 16\nvar assign = require('./Object.assign');                                                                               // 17\nvar getTextContentAccessor = require('./getTextContentAccessor');                                                      // 18\n                                                                                                                       // 19\n/**                                                                                                                    // 20\n * This helper class stores information about text content of a target node,                                           // 21\n * allowing comparison of content before and after a given event.                                                      // 22\n *                                                                                                                     // 23\n * Identify the node where selection currently begins, then observe                                                    // 24\n * both its text content and its current position in the DOM. Since the                                                // 25\n * browser may natively replace the target node during composition, we can                                             // 26\n * use its position to find its replacement.                                                                           // 27\n *                                                                                                                     // 28\n * @param {DOMEventTarget} root                                                                                        // 29\n */                                                                                                                    // 30\nfunction FallbackCompositionState(root) {                                                                              // 31\n  this._root = root;                                                                                                   // 32\n  this._startText = this.getText();                                                                                    // 33\n  this._fallbackText = null;                                                                                           // 34\n}                                                                                                                      // 35\n                                                                                                                       // 36\nassign(FallbackCompositionState.prototype, {                                                                           // 37\n  destructor: function () {                                                                                            // 38\n    this._root = null;                                                                                                 // 39\n    this._startText = null;                                                                                            // 40\n    this._fallbackText = null;                                                                                         // 41\n  },                                                                                                                   // 42\n                                                                                                                       // 43\n  /**                                                                                                                  // 44\n   * Get current text of input.                                                                                        // 45\n   *                                                                                                                   // 46\n   * @return {string}                                                                                                  // 47\n   */                                                                                                                  // 48\n  getText: function () {                                                                                               // 49\n    if ('value' in this._root) {                                                                                       // 50\n      return this._root.value;                                                                                         // 51\n    }                                                                                                                  // 52\n    return this._root[getTextContentAccessor()];                                                                       // 53\n  },                                                                                                                   // 54\n                                                                                                                       // 55\n  /**                                                                                                                  // 56\n   * Determine the differing substring between the initially stored                                                    // 57\n   * text content and the current content.                                                                             // 58\n   *                                                                                                                   // 59\n   * @return {string}                                                                                                  // 60\n   */                                                                                                                  // 61\n  getData: function () {                                                                                               // 62\n    if (this._fallbackText) {                                                                                          // 63\n      return this._fallbackText;                                                                                       // 64\n    }                                                                                                                  // 65\n                                                                                                                       // 66\n    var start;                                                                                                         // 67\n    var startValue = this._startText;                                                                                  // 68\n    var startLength = startValue.length;                                                                               // 69\n    var end;                                                                                                           // 70\n    var endValue = this.getText();                                                                                     // 71\n    var endLength = endValue.length;                                                                                   // 72\n                                                                                                                       // 73\n    for (start = 0; start < startLength; start++) {                                                                    // 74\n      if (startValue[start] !== endValue[start]) {                                                                     // 75\n        break;                                                                                                         // 76\n      }                                                                                                                // 77\n    }                                                                                                                  // 78\n                                                                                                                       // 79\n    var minEnd = startLength - start;                                                                                  // 80\n    for (end = 1; end <= minEnd; end++) {                                                                              // 81\n      if (startValue[startLength - end] !== endValue[endLength - end]) {                                               // 82\n        break;                                                                                                         // 83\n      }                                                                                                                // 84\n    }                                                                                                                  // 85\n                                                                                                                       // 86\n    var sliceTail = end > 1 ? 1 - end : undefined;                                                                     // 87\n    this._fallbackText = endValue.slice(start, sliceTail);                                                             // 88\n    return this._fallbackText;                                                                                         // 89\n  }                                                                                                                    // 90\n});                                                                                                                    // 91\n                                                                                                                       // 92\nPooledClass.addPoolingTo(FallbackCompositionState);                                                                    // 93\n                                                                                                                       // 94\nmodule.exports = FallbackCompositionState;                                                                             // 95\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"getTextContentAccessor.js\":[\"fbjs/lib/ExecutionEnvironment\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/getTextContentAccessor.js                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule getTextContentAccessor                                                                              // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');                                                   // 14\n                                                                                                                       // 15\nvar contentKey = null;                                                                                                 // 16\n                                                                                                                       // 17\n/**                                                                                                                    // 18\n * Gets the key used to access text content on a DOM node.                                                             // 19\n *                                                                                                                     // 20\n * @return {?string} Key used to access text content.                                                                  // 21\n * @internal                                                                                                           // 22\n */                                                                                                                    // 23\nfunction getTextContentAccessor() {                                                                                    // 24\n  if (!contentKey && ExecutionEnvironment.canUseDOM) {                                                                 // 25\n    // Prefer textContent to innerText because many browsers support both but                                          // 26\n    // SVG <text> elements don't support innerText even when <div> does.                                               // 27\n    contentKey = 'textContent' in document.documentElement ? 'textContent' : 'innerText';                              // 28\n  }                                                                                                                    // 29\n  return contentKey;                                                                                                   // 30\n}                                                                                                                      // 31\n                                                                                                                       // 32\nmodule.exports = getTextContentAccessor;                                                                               // 33\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"SyntheticCompositionEvent.js\":[\"./SyntheticEvent\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/SyntheticCompositionEvent.js                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule SyntheticCompositionEvent                                                                           // 9\n * @typechecks static-only                                                                                             // 10\n */                                                                                                                    // 11\n                                                                                                                       // 12\n'use strict';                                                                                                          // 13\n                                                                                                                       // 14\nvar SyntheticEvent = require('./SyntheticEvent');                                                                      // 15\n                                                                                                                       // 16\n/**                                                                                                                    // 17\n * @interface Event                                                                                                    // 18\n * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents                                              // 19\n */                                                                                                                    // 20\nvar CompositionEventInterface = {                                                                                      // 21\n  data: null                                                                                                           // 22\n};                                                                                                                     // 23\n                                                                                                                       // 24\n/**                                                                                                                    // 25\n * @param {object} dispatchConfig Configuration used to dispatch this event.                                           // 26\n * @param {string} dispatchMarker Marker identifying the event target.                                                 // 27\n * @param {object} nativeEvent Native browser event.                                                                   // 28\n * @extends {SyntheticUIEvent}                                                                                         // 29\n */                                                                                                                    // 30\nfunction SyntheticCompositionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {                   // 31\n  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);                           // 32\n}                                                                                                                      // 33\n                                                                                                                       // 34\nSyntheticEvent.augmentClass(SyntheticCompositionEvent, CompositionEventInterface);                                     // 35\n                                                                                                                       // 36\nmodule.exports = SyntheticCompositionEvent;                                                                            // 37\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"SyntheticEvent.js\":[\"./PooledClass\",\"./Object.assign\",\"fbjs/lib/emptyFunction\",\"fbjs/lib/warning\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/SyntheticEvent.js                                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule SyntheticEvent                                                                                      // 9\n * @typechecks static-only                                                                                             // 10\n */                                                                                                                    // 11\n                                                                                                                       // 12\n'use strict';                                                                                                          // 13\n                                                                                                                       // 14\nvar PooledClass = require('./PooledClass');                                                                            // 15\n                                                                                                                       // 16\nvar assign = require('./Object.assign');                                                                               // 17\nvar emptyFunction = require('fbjs/lib/emptyFunction');                                                                 // 18\nvar warning = require('fbjs/lib/warning');                                                                             // 19\n                                                                                                                       // 20\n/**                                                                                                                    // 21\n * @interface Event                                                                                                    // 22\n * @see http://www.w3.org/TR/DOM-Level-3-Events/                                                                       // 23\n */                                                                                                                    // 24\nvar EventInterface = {                                                                                                 // 25\n  type: null,                                                                                                          // 26\n  target: null,                                                                                                        // 27\n  // currentTarget is set when dispatching; no use in copying it here                                                  // 28\n  currentTarget: emptyFunction.thatReturnsNull,                                                                        // 29\n  eventPhase: null,                                                                                                    // 30\n  bubbles: null,                                                                                                       // 31\n  cancelable: null,                                                                                                    // 32\n  timeStamp: function (event) {                                                                                        // 33\n    return event.timeStamp || Date.now();                                                                              // 34\n  },                                                                                                                   // 35\n  defaultPrevented: null,                                                                                              // 36\n  isTrusted: null                                                                                                      // 37\n};                                                                                                                     // 38\n                                                                                                                       // 39\n/**                                                                                                                    // 40\n * Synthetic events are dispatched by event plugins, typically in response to a                                        // 41\n * top-level event delegation handler.                                                                                 // 42\n *                                                                                                                     // 43\n * These systems should generally use pooling to reduce the frequency of garbage                                       // 44\n * collection. The system should check `isPersistent` to determine whether the                                         // 45\n * event should be released into the pool after being dispatched. Users that                                           // 46\n * need a persisted event should invoke `persist`.                                                                     // 47\n *                                                                                                                     // 48\n * Synthetic events (and subclasses) implement the DOM Level 3 Events API by                                           // 49\n * normalizing browser quirks. Subclasses do not necessarily have to implement a                                       // 50\n * DOM interface; custom application-specific events can also subclass this.                                           // 51\n *                                                                                                                     // 52\n * @param {object} dispatchConfig Configuration used to dispatch this event.                                           // 53\n * @param {string} dispatchMarker Marker identifying the event target.                                                 // 54\n * @param {object} nativeEvent Native browser event.                                                                   // 55\n */                                                                                                                    // 56\nfunction SyntheticEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {                              // 57\n  this.dispatchConfig = dispatchConfig;                                                                                // 58\n  this.dispatchMarker = dispatchMarker;                                                                                // 59\n  this.nativeEvent = nativeEvent;                                                                                      // 60\n                                                                                                                       // 61\n  var Interface = this.constructor.Interface;                                                                          // 62\n  for (var propName in Interface) {                                                                                    // 63\n    if (!Interface.hasOwnProperty(propName)) {                                                                         // 64\n      continue;                                                                                                        // 65\n    }                                                                                                                  // 66\n    var normalize = Interface[propName];                                                                               // 67\n    if (normalize) {                                                                                                   // 68\n      this[propName] = normalize(nativeEvent);                                                                         // 69\n    } else {                                                                                                           // 70\n      if (propName === 'target') {                                                                                     // 71\n        this.target = nativeEventTarget;                                                                               // 72\n      } else {                                                                                                         // 73\n        this[propName] = nativeEvent[propName];                                                                        // 74\n      }                                                                                                                // 75\n    }                                                                                                                  // 76\n  }                                                                                                                    // 77\n                                                                                                                       // 78\n  var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;\n  if (defaultPrevented) {                                                                                              // 80\n    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;                                                           // 81\n  } else {                                                                                                             // 82\n    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;                                                          // 83\n  }                                                                                                                    // 84\n  this.isPropagationStopped = emptyFunction.thatReturnsFalse;                                                          // 85\n}                                                                                                                      // 86\n                                                                                                                       // 87\nassign(SyntheticEvent.prototype, {                                                                                     // 88\n                                                                                                                       // 89\n  preventDefault: function () {                                                                                        // 90\n    this.defaultPrevented = true;                                                                                      // 91\n    var event = this.nativeEvent;                                                                                      // 92\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 93\n      process.env.NODE_ENV !== 'production' ? warning(event, 'This synthetic event is reused for performance reasons. If you\\'re ' + 'seeing this, you\\'re calling `preventDefault` on a ' + 'released/nullified synthetic event. This is a no-op. See ' + 'https://fb.me/react-event-pooling for more information.') : undefined;\n    }                                                                                                                  // 95\n    if (!event) {                                                                                                      // 96\n      return;                                                                                                          // 97\n    }                                                                                                                  // 98\n                                                                                                                       // 99\n    if (event.preventDefault) {                                                                                        // 100\n      event.preventDefault();                                                                                          // 101\n    } else {                                                                                                           // 102\n      event.returnValue = false;                                                                                       // 103\n    }                                                                                                                  // 104\n    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;                                                           // 105\n  },                                                                                                                   // 106\n                                                                                                                       // 107\n  stopPropagation: function () {                                                                                       // 108\n    var event = this.nativeEvent;                                                                                      // 109\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 110\n      process.env.NODE_ENV !== 'production' ? warning(event, 'This synthetic event is reused for performance reasons. If you\\'re ' + 'seeing this, you\\'re calling `stopPropagation` on a ' + 'released/nullified synthetic event. This is a no-op. See ' + 'https://fb.me/react-event-pooling for more information.') : undefined;\n    }                                                                                                                  // 112\n    if (!event) {                                                                                                      // 113\n      return;                                                                                                          // 114\n    }                                                                                                                  // 115\n                                                                                                                       // 116\n    if (event.stopPropagation) {                                                                                       // 117\n      event.stopPropagation();                                                                                         // 118\n    } else {                                                                                                           // 119\n      event.cancelBubble = true;                                                                                       // 120\n    }                                                                                                                  // 121\n    this.isPropagationStopped = emptyFunction.thatReturnsTrue;                                                         // 122\n  },                                                                                                                   // 123\n                                                                                                                       // 124\n  /**                                                                                                                  // 125\n   * We release all dispatched `SyntheticEvent`s after each event loop, adding                                         // 126\n   * them back into the pool. This allows a way to hold onto a reference that                                          // 127\n   * won't be added back into the pool.                                                                                // 128\n   */                                                                                                                  // 129\n  persist: function () {                                                                                               // 130\n    this.isPersistent = emptyFunction.thatReturnsTrue;                                                                 // 131\n  },                                                                                                                   // 132\n                                                                                                                       // 133\n  /**                                                                                                                  // 134\n   * Checks if this event should be released back into the pool.                                                       // 135\n   *                                                                                                                   // 136\n   * @return {boolean} True if this should not be released, false otherwise.                                           // 137\n   */                                                                                                                  // 138\n  isPersistent: emptyFunction.thatReturnsFalse,                                                                        // 139\n                                                                                                                       // 140\n  /**                                                                                                                  // 141\n   * `PooledClass` looks for `destructor` on each instance it releases.                                                // 142\n   */                                                                                                                  // 143\n  destructor: function () {                                                                                            // 144\n    var Interface = this.constructor.Interface;                                                                        // 145\n    for (var propName in Interface) {                                                                                  // 146\n      this[propName] = null;                                                                                           // 147\n    }                                                                                                                  // 148\n    this.dispatchConfig = null;                                                                                        // 149\n    this.dispatchMarker = null;                                                                                        // 150\n    this.nativeEvent = null;                                                                                           // 151\n  }                                                                                                                    // 152\n                                                                                                                       // 153\n});                                                                                                                    // 154\n                                                                                                                       // 155\nSyntheticEvent.Interface = EventInterface;                                                                             // 156\n                                                                                                                       // 157\n/**                                                                                                                    // 158\n * Helper to reduce boilerplate when creating subclasses.                                                              // 159\n *                                                                                                                     // 160\n * @param {function} Class                                                                                             // 161\n * @param {?object} Interface                                                                                          // 162\n */                                                                                                                    // 163\nSyntheticEvent.augmentClass = function (Class, Interface) {                                                            // 164\n  var Super = this;                                                                                                    // 165\n                                                                                                                       // 166\n  var prototype = Object.create(Super.prototype);                                                                      // 167\n  assign(prototype, Class.prototype);                                                                                  // 168\n  Class.prototype = prototype;                                                                                         // 169\n  Class.prototype.constructor = Class;                                                                                 // 170\n                                                                                                                       // 171\n  Class.Interface = assign({}, Super.Interface, Interface);                                                            // 172\n  Class.augmentClass = Super.augmentClass;                                                                             // 173\n                                                                                                                       // 174\n  PooledClass.addPoolingTo(Class, PooledClass.fourArgumentPooler);                                                     // 175\n};                                                                                                                     // 176\n                                                                                                                       // 177\nPooledClass.addPoolingTo(SyntheticEvent, PooledClass.fourArgumentPooler);                                              // 178\n                                                                                                                       // 179\nmodule.exports = SyntheticEvent;                                                                                       // 180\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"SyntheticInputEvent.js\":[\"./SyntheticEvent\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/SyntheticInputEvent.js                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule SyntheticInputEvent                                                                                 // 9\n * @typechecks static-only                                                                                             // 10\n */                                                                                                                    // 11\n                                                                                                                       // 12\n'use strict';                                                                                                          // 13\n                                                                                                                       // 14\nvar SyntheticEvent = require('./SyntheticEvent');                                                                      // 15\n                                                                                                                       // 16\n/**                                                                                                                    // 17\n * @interface Event                                                                                                    // 18\n * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105                                                       // 19\n *      /#events-inputevents                                                                                           // 20\n */                                                                                                                    // 21\nvar InputEventInterface = {                                                                                            // 22\n  data: null                                                                                                           // 23\n};                                                                                                                     // 24\n                                                                                                                       // 25\n/**                                                                                                                    // 26\n * @param {object} dispatchConfig Configuration used to dispatch this event.                                           // 27\n * @param {string} dispatchMarker Marker identifying the event target.                                                 // 28\n * @param {object} nativeEvent Native browser event.                                                                   // 29\n * @extends {SyntheticUIEvent}                                                                                         // 30\n */                                                                                                                    // 31\nfunction SyntheticInputEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {                         // 32\n  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);                           // 33\n}                                                                                                                      // 34\n                                                                                                                       // 35\nSyntheticEvent.augmentClass(SyntheticInputEvent, InputEventInterface);                                                 // 36\n                                                                                                                       // 37\nmodule.exports = SyntheticInputEvent;                                                                                  // 38\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ChangeEventPlugin.js\":[\"./EventConstants\",\"./EventPluginHub\",\"./EventPropagators\",\"fbjs/lib/ExecutionEnvironment\",\"./ReactUpdates\",\"./SyntheticEvent\",\"./getEventTarget\",\"./isEventSupported\",\"./isTextInputElement\",\"fbjs/lib/keyOf\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ChangeEventPlugin.js                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ChangeEventPlugin                                                                                   // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar EventConstants = require('./EventConstants');                                                                      // 14\nvar EventPluginHub = require('./EventPluginHub');                                                                      // 15\nvar EventPropagators = require('./EventPropagators');                                                                  // 16\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');                                                   // 17\nvar ReactUpdates = require('./ReactUpdates');                                                                          // 18\nvar SyntheticEvent = require('./SyntheticEvent');                                                                      // 19\n                                                                                                                       // 20\nvar getEventTarget = require('./getEventTarget');                                                                      // 21\nvar isEventSupported = require('./isEventSupported');                                                                  // 22\nvar isTextInputElement = require('./isTextInputElement');                                                              // 23\nvar keyOf = require('fbjs/lib/keyOf');                                                                                 // 24\n                                                                                                                       // 25\nvar topLevelTypes = EventConstants.topLevelTypes;                                                                      // 26\n                                                                                                                       // 27\nvar eventTypes = {                                                                                                     // 28\n  change: {                                                                                                            // 29\n    phasedRegistrationNames: {                                                                                         // 30\n      bubbled: keyOf({ onChange: null }),                                                                              // 31\n      captured: keyOf({ onChangeCapture: null })                                                                       // 32\n    },                                                                                                                 // 33\n    dependencies: [topLevelTypes.topBlur, topLevelTypes.topChange, topLevelTypes.topClick, topLevelTypes.topFocus, topLevelTypes.topInput, topLevelTypes.topKeyDown, topLevelTypes.topKeyUp, topLevelTypes.topSelectionChange]\n  }                                                                                                                    // 35\n};                                                                                                                     // 36\n                                                                                                                       // 37\n/**                                                                                                                    // 38\n * For IE shims                                                                                                        // 39\n */                                                                                                                    // 40\nvar activeElement = null;                                                                                              // 41\nvar activeElementID = null;                                                                                            // 42\nvar activeElementValue = null;                                                                                         // 43\nvar activeElementValueProp = null;                                                                                     // 44\n                                                                                                                       // 45\n/**                                                                                                                    // 46\n * SECTION: handle `change` event                                                                                      // 47\n */                                                                                                                    // 48\nfunction shouldUseChangeEvent(elem) {                                                                                  // 49\n  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();                                                         // 50\n  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';                                        // 51\n}                                                                                                                      // 52\n                                                                                                                       // 53\nvar doesChangeEventBubble = false;                                                                                     // 54\nif (ExecutionEnvironment.canUseDOM) {                                                                                  // 55\n  // See `handleChange` comment below                                                                                  // 56\n  doesChangeEventBubble = isEventSupported('change') && (!('documentMode' in document) || document.documentMode > 8);  // 57\n}                                                                                                                      // 58\n                                                                                                                       // 59\nfunction manualDispatchChangeEvent(nativeEvent) {                                                                      // 60\n  var event = SyntheticEvent.getPooled(eventTypes.change, activeElementID, nativeEvent, getEventTarget(nativeEvent));  // 61\n  EventPropagators.accumulateTwoPhaseDispatches(event);                                                                // 62\n                                                                                                                       // 63\n  // If change and propertychange bubbled, we'd just bind to it like all the                                           // 64\n  // other events and have it go through ReactBrowserEventEmitter. Since it                                            // 65\n  // doesn't, we manually listen for the events and so we have to enqueue and                                          // 66\n  // process the abstract event manually.                                                                              // 67\n  //                                                                                                                   // 68\n  // Batching is necessary here in order to ensure that all event handlers run                                         // 69\n  // before the next rerender (including event handlers attached to ancestor                                           // 70\n  // elements instead of directly on the input). Without this, controlled                                              // 71\n  // components don't work properly in conjunction with event bubbling because                                         // 72\n  // the component is rerendered and the value reverted before all the event                                           // 73\n  // handlers can run. See https://github.com/facebook/react/issues/708.                                               // 74\n  ReactUpdates.batchedUpdates(runEventInBatch, event);                                                                 // 75\n}                                                                                                                      // 76\n                                                                                                                       // 77\nfunction runEventInBatch(event) {                                                                                      // 78\n  EventPluginHub.enqueueEvents(event);                                                                                 // 79\n  EventPluginHub.processEventQueue(false);                                                                             // 80\n}                                                                                                                      // 81\n                                                                                                                       // 82\nfunction startWatchingForChangeEventIE8(target, targetID) {                                                            // 83\n  activeElement = target;                                                                                              // 84\n  activeElementID = targetID;                                                                                          // 85\n  activeElement.attachEvent('onchange', manualDispatchChangeEvent);                                                    // 86\n}                                                                                                                      // 87\n                                                                                                                       // 88\nfunction stopWatchingForChangeEventIE8() {                                                                             // 89\n  if (!activeElement) {                                                                                                // 90\n    return;                                                                                                            // 91\n  }                                                                                                                    // 92\n  activeElement.detachEvent('onchange', manualDispatchChangeEvent);                                                    // 93\n  activeElement = null;                                                                                                // 94\n  activeElementID = null;                                                                                              // 95\n}                                                                                                                      // 96\n                                                                                                                       // 97\nfunction getTargetIDForChangeEvent(topLevelType, topLevelTarget, topLevelTargetID) {                                   // 98\n  if (topLevelType === topLevelTypes.topChange) {                                                                      // 99\n    return topLevelTargetID;                                                                                           // 100\n  }                                                                                                                    // 101\n}                                                                                                                      // 102\nfunction handleEventsForChangeEventIE8(topLevelType, topLevelTarget, topLevelTargetID) {                               // 103\n  if (topLevelType === topLevelTypes.topFocus) {                                                                       // 104\n    // stopWatching() should be a noop here but we call it just in case we                                             // 105\n    // missed a blur event somehow.                                                                                    // 106\n    stopWatchingForChangeEventIE8();                                                                                   // 107\n    startWatchingForChangeEventIE8(topLevelTarget, topLevelTargetID);                                                  // 108\n  } else if (topLevelType === topLevelTypes.topBlur) {                                                                 // 109\n    stopWatchingForChangeEventIE8();                                                                                   // 110\n  }                                                                                                                    // 111\n}                                                                                                                      // 112\n                                                                                                                       // 113\n/**                                                                                                                    // 114\n * SECTION: handle `input` event                                                                                       // 115\n */                                                                                                                    // 116\nvar isInputEventSupported = false;                                                                                     // 117\nif (ExecutionEnvironment.canUseDOM) {                                                                                  // 118\n  // IE9 claims to support the input event but fails to trigger it when                                                // 119\n  // deleting text, so we ignore its input events                                                                      // 120\n  isInputEventSupported = isEventSupported('input') && (!('documentMode' in document) || document.documentMode > 9);   // 121\n}                                                                                                                      // 122\n                                                                                                                       // 123\n/**                                                                                                                    // 124\n * (For old IE.) Replacement getter/setter for the `value` property that gets                                          // 125\n * set on the active element.                                                                                          // 126\n */                                                                                                                    // 127\nvar newValueProp = {                                                                                                   // 128\n  get: function () {                                                                                                   // 129\n    return activeElementValueProp.get.call(this);                                                                      // 130\n  },                                                                                                                   // 131\n  set: function (val) {                                                                                                // 132\n    // Cast to a string so we can do equality checks.                                                                  // 133\n    activeElementValue = '' + val;                                                                                     // 134\n    activeElementValueProp.set.call(this, val);                                                                        // 135\n  }                                                                                                                    // 136\n};                                                                                                                     // 137\n                                                                                                                       // 138\n/**                                                                                                                    // 139\n * (For old IE.) Starts tracking propertychange events on the passed-in element                                        // 140\n * and override the value property so that we can distinguish user events from                                         // 141\n * value changes in JS.                                                                                                // 142\n */                                                                                                                    // 143\nfunction startWatchingForValueChange(target, targetID) {                                                               // 144\n  activeElement = target;                                                                                              // 145\n  activeElementID = targetID;                                                                                          // 146\n  activeElementValue = target.value;                                                                                   // 147\n  activeElementValueProp = Object.getOwnPropertyDescriptor(target.constructor.prototype, 'value');                     // 148\n                                                                                                                       // 149\n  // Not guarded in a canDefineProperty check: IE8 supports defineProperty only                                        // 150\n  // on DOM elements                                                                                                   // 151\n  Object.defineProperty(activeElement, 'value', newValueProp);                                                         // 152\n  activeElement.attachEvent('onpropertychange', handlePropertyChange);                                                 // 153\n}                                                                                                                      // 154\n                                                                                                                       // 155\n/**                                                                                                                    // 156\n * (For old IE.) Removes the event listeners from the currently-tracked element,                                       // 157\n * if any exists.                                                                                                      // 158\n */                                                                                                                    // 159\nfunction stopWatchingForValueChange() {                                                                                // 160\n  if (!activeElement) {                                                                                                // 161\n    return;                                                                                                            // 162\n  }                                                                                                                    // 163\n                                                                                                                       // 164\n  // delete restores the original property definition                                                                  // 165\n  delete activeElement.value;                                                                                          // 166\n  activeElement.detachEvent('onpropertychange', handlePropertyChange);                                                 // 167\n                                                                                                                       // 168\n  activeElement = null;                                                                                                // 169\n  activeElementID = null;                                                                                              // 170\n  activeElementValue = null;                                                                                           // 171\n  activeElementValueProp = null;                                                                                       // 172\n}                                                                                                                      // 173\n                                                                                                                       // 174\n/**                                                                                                                    // 175\n * (For old IE.) Handles a propertychange event, sending a `change` event if                                           // 176\n * the value of the active element has changed.                                                                        // 177\n */                                                                                                                    // 178\nfunction handlePropertyChange(nativeEvent) {                                                                           // 179\n  if (nativeEvent.propertyName !== 'value') {                                                                          // 180\n    return;                                                                                                            // 181\n  }                                                                                                                    // 182\n  var value = nativeEvent.srcElement.value;                                                                            // 183\n  if (value === activeElementValue) {                                                                                  // 184\n    return;                                                                                                            // 185\n  }                                                                                                                    // 186\n  activeElementValue = value;                                                                                          // 187\n                                                                                                                       // 188\n  manualDispatchChangeEvent(nativeEvent);                                                                              // 189\n}                                                                                                                      // 190\n                                                                                                                       // 191\n/**                                                                                                                    // 192\n * If a `change` event should be fired, returns the target's ID.                                                       // 193\n */                                                                                                                    // 194\nfunction getTargetIDForInputEvent(topLevelType, topLevelTarget, topLevelTargetID) {                                    // 195\n  if (topLevelType === topLevelTypes.topInput) {                                                                       // 196\n    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly                                           // 197\n    // what we want so fall through here and trigger an abstract event                                                 // 198\n    return topLevelTargetID;                                                                                           // 199\n  }                                                                                                                    // 200\n}                                                                                                                      // 201\n                                                                                                                       // 202\n// For IE8 and IE9.                                                                                                    // 203\nfunction handleEventsForInputEventIE(topLevelType, topLevelTarget, topLevelTargetID) {                                 // 204\n  if (topLevelType === topLevelTypes.topFocus) {                                                                       // 205\n    // In IE8, we can capture almost all .value changes by adding a                                                    // 206\n    // propertychange handler and looking for events with propertyName                                                 // 207\n    // equal to 'value'                                                                                                // 208\n    // In IE9, propertychange fires for most input events but is buggy and                                             // 209\n    // doesn't fire when text is deleted, but conveniently, selectionchange                                            // 210\n    // appears to fire in all of the remaining cases so we catch those and                                             // 211\n    // forward the event if the value has changed                                                                      // 212\n    // In either case, we don't want to call the event handler if the value                                            // 213\n    // is changed from JS so we redefine a setter for `.value` that updates                                            // 214\n    // our activeElementValue variable, allowing us to ignore those changes                                            // 215\n    //                                                                                                                 // 216\n    // stopWatching() should be a noop here but we call it just in case we                                             // 217\n    // missed a blur event somehow.                                                                                    // 218\n    stopWatchingForValueChange();                                                                                      // 219\n    startWatchingForValueChange(topLevelTarget, topLevelTargetID);                                                     // 220\n  } else if (topLevelType === topLevelTypes.topBlur) {                                                                 // 221\n    stopWatchingForValueChange();                                                                                      // 222\n  }                                                                                                                    // 223\n}                                                                                                                      // 224\n                                                                                                                       // 225\n// For IE8 and IE9.                                                                                                    // 226\nfunction getTargetIDForInputEventIE(topLevelType, topLevelTarget, topLevelTargetID) {                                  // 227\n  if (topLevelType === topLevelTypes.topSelectionChange || topLevelType === topLevelTypes.topKeyUp || topLevelType === topLevelTypes.topKeyDown) {\n    // On the selectionchange event, the target is just document which isn't                                           // 229\n    // helpful for us so just check activeElement instead.                                                             // 230\n    //                                                                                                                 // 231\n    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire                                          // 232\n    // propertychange on the first input event after setting `value` from a                                            // 233\n    // script and fires only keydown, keypress, keyup. Catching keyup usually                                          // 234\n    // gets it and catching keydown lets us fire an event for the first                                                // 235\n    // keystroke if user does a key repeat (it'll be a little delayed: right                                           // 236\n    // before the second keystroke). Other input methods (e.g., paste) seem to                                         // 237\n    // fire selectionchange normally.                                                                                  // 238\n    if (activeElement && activeElement.value !== activeElementValue) {                                                 // 239\n      activeElementValue = activeElement.value;                                                                        // 240\n      return activeElementID;                                                                                          // 241\n    }                                                                                                                  // 242\n  }                                                                                                                    // 243\n}                                                                                                                      // 244\n                                                                                                                       // 245\n/**                                                                                                                    // 246\n * SECTION: handle `click` event                                                                                       // 247\n */                                                                                                                    // 248\nfunction shouldUseClickEvent(elem) {                                                                                   // 249\n  // Use the `click` event to detect changes to checkbox and radio inputs.                                             // 250\n  // This approach works across all browsers, whereas `change` does not fire                                           // 251\n  // until `blur` in IE8.                                                                                              // 252\n  return elem.nodeName && elem.nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');\n}                                                                                                                      // 254\n                                                                                                                       // 255\nfunction getTargetIDForClickEvent(topLevelType, topLevelTarget, topLevelTargetID) {                                    // 256\n  if (topLevelType === topLevelTypes.topClick) {                                                                       // 257\n    return topLevelTargetID;                                                                                           // 258\n  }                                                                                                                    // 259\n}                                                                                                                      // 260\n                                                                                                                       // 261\n/**                                                                                                                    // 262\n * This plugin creates an `onChange` event that normalizes change events                                               // 263\n * across form elements. This event fires at a time when it's possible to                                              // 264\n * change the element's value without seeing a flicker.                                                                // 265\n *                                                                                                                     // 266\n * Supported elements are:                                                                                             // 267\n * - input (see `isTextInputElement`)                                                                                  // 268\n * - textarea                                                                                                          // 269\n * - select                                                                                                            // 270\n */                                                                                                                    // 271\nvar ChangeEventPlugin = {                                                                                              // 272\n                                                                                                                       // 273\n  eventTypes: eventTypes,                                                                                              // 274\n                                                                                                                       // 275\n  /**                                                                                                                  // 276\n   * @param {string} topLevelType Record from `EventConstants`.                                                        // 277\n   * @param {DOMEventTarget} topLevelTarget The listening component root node.                                         // 278\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.                                                          // 279\n   * @param {object} nativeEvent Native browser event.                                                                 // 280\n   * @return {*} An accumulation of synthetic events.                                                                  // 281\n   * @see {EventPluginHub.extractEvents}                                                                               // 282\n   */                                                                                                                  // 283\n  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {           // 284\n                                                                                                                       // 285\n    var getTargetIDFunc, handleEventFunc;                                                                              // 286\n    if (shouldUseChangeEvent(topLevelTarget)) {                                                                        // 287\n      if (doesChangeEventBubble) {                                                                                     // 288\n        getTargetIDFunc = getTargetIDForChangeEvent;                                                                   // 289\n      } else {                                                                                                         // 290\n        handleEventFunc = handleEventsForChangeEventIE8;                                                               // 291\n      }                                                                                                                // 292\n    } else if (isTextInputElement(topLevelTarget)) {                                                                   // 293\n      if (isInputEventSupported) {                                                                                     // 294\n        getTargetIDFunc = getTargetIDForInputEvent;                                                                    // 295\n      } else {                                                                                                         // 296\n        getTargetIDFunc = getTargetIDForInputEventIE;                                                                  // 297\n        handleEventFunc = handleEventsForInputEventIE;                                                                 // 298\n      }                                                                                                                // 299\n    } else if (shouldUseClickEvent(topLevelTarget)) {                                                                  // 300\n      getTargetIDFunc = getTargetIDForClickEvent;                                                                      // 301\n    }                                                                                                                  // 302\n                                                                                                                       // 303\n    if (getTargetIDFunc) {                                                                                             // 304\n      var targetID = getTargetIDFunc(topLevelType, topLevelTarget, topLevelTargetID);                                  // 305\n      if (targetID) {                                                                                                  // 306\n        var event = SyntheticEvent.getPooled(eventTypes.change, targetID, nativeEvent, nativeEventTarget);             // 307\n        event.type = 'change';                                                                                         // 308\n        EventPropagators.accumulateTwoPhaseDispatches(event);                                                          // 309\n        return event;                                                                                                  // 310\n      }                                                                                                                // 311\n    }                                                                                                                  // 312\n                                                                                                                       // 313\n    if (handleEventFunc) {                                                                                             // 314\n      handleEventFunc(topLevelType, topLevelTarget, topLevelTargetID);                                                 // 315\n    }                                                                                                                  // 316\n  }                                                                                                                    // 317\n                                                                                                                       // 318\n};                                                                                                                     // 319\n                                                                                                                       // 320\nmodule.exports = ChangeEventPlugin;                                                                                    // 321\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"getEventTarget.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/getEventTarget.js                                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule getEventTarget                                                                                      // 9\n * @typechecks static-only                                                                                             // 10\n */                                                                                                                    // 11\n                                                                                                                       // 12\n'use strict';                                                                                                          // 13\n                                                                                                                       // 14\n/**                                                                                                                    // 15\n * Gets the target node from a native browser event by accounting for                                                  // 16\n * inconsistencies in browser DOM APIs.                                                                                // 17\n *                                                                                                                     // 18\n * @param {object} nativeEvent Native browser event.                                                                   // 19\n * @return {DOMEventTarget} Target node.                                                                               // 20\n */                                                                                                                    // 21\nfunction getEventTarget(nativeEvent) {                                                                                 // 22\n  var target = nativeEvent.target || nativeEvent.srcElement || window;                                                 // 23\n  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).                                                       // 24\n  // @see http://www.quirksmode.org/js/events_properties.html                                                          // 25\n  return target.nodeType === 3 ? target.parentNode : target;                                                           // 26\n}                                                                                                                      // 27\n                                                                                                                       // 28\nmodule.exports = getEventTarget;                                                                                       // 29\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"isTextInputElement.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/isTextInputElement.js                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule isTextInputElement                                                                                  // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\n/**                                                                                                                    // 14\n * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary     // 15\n */                                                                                                                    // 16\nvar supportedInputTypes = {                                                                                            // 17\n  'color': true,                                                                                                       // 18\n  'date': true,                                                                                                        // 19\n  'datetime': true,                                                                                                    // 20\n  'datetime-local': true,                                                                                              // 21\n  'email': true,                                                                                                       // 22\n  'month': true,                                                                                                       // 23\n  'number': true,                                                                                                      // 24\n  'password': true,                                                                                                    // 25\n  'range': true,                                                                                                       // 26\n  'search': true,                                                                                                      // 27\n  'tel': true,                                                                                                         // 28\n  'text': true,                                                                                                        // 29\n  'time': true,                                                                                                        // 30\n  'url': true,                                                                                                         // 31\n  'week': true                                                                                                         // 32\n};                                                                                                                     // 33\n                                                                                                                       // 34\nfunction isTextInputElement(elem) {                                                                                    // 35\n  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();                                                 // 36\n  return nodeName && (nodeName === 'input' && supportedInputTypes[elem.type] || nodeName === 'textarea');              // 37\n}                                                                                                                      // 38\n                                                                                                                       // 39\nmodule.exports = isTextInputElement;                                                                                   // 40\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ClientReactRootIndex.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ClientReactRootIndex.js                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ClientReactRootIndex                                                                                // 9\n * @typechecks                                                                                                         // 10\n */                                                                                                                    // 11\n                                                                                                                       // 12\n'use strict';                                                                                                          // 13\n                                                                                                                       // 14\nvar nextReactRootIndex = 0;                                                                                            // 15\n                                                                                                                       // 16\nvar ClientReactRootIndex = {                                                                                           // 17\n  createReactRootIndex: function () {                                                                                  // 18\n    return nextReactRootIndex++;                                                                                       // 19\n  }                                                                                                                    // 20\n};                                                                                                                     // 21\n                                                                                                                       // 22\nmodule.exports = ClientReactRootIndex;                                                                                 // 23\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"DefaultEventPluginOrder.js\":[\"fbjs/lib/keyOf\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/DefaultEventPluginOrder.js                                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule DefaultEventPluginOrder                                                                             // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar keyOf = require('fbjs/lib/keyOf');                                                                                 // 14\n                                                                                                                       // 15\n/**                                                                                                                    // 16\n * Module that is injectable into `EventPluginHub`, that specifies a                                                   // 17\n * deterministic ordering of `EventPlugin`s. A convenient way to reason about                                          // 18\n * plugins, without having to package every one of them. This is better than                                           // 19\n * having plugins be ordered in the same order that they are injected because                                          // 20\n * that ordering would be influenced by the packaging order.                                                           // 21\n * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that                                                // 22\n * preventing default on events is convenient in `SimpleEventPlugin` handlers.                                         // 23\n */                                                                                                                    // 24\nvar DefaultEventPluginOrder = [keyOf({ ResponderEventPlugin: null }), keyOf({ SimpleEventPlugin: null }), keyOf({ TapEventPlugin: null }), keyOf({ EnterLeaveEventPlugin: null }), keyOf({ ChangeEventPlugin: null }), keyOf({ SelectEventPlugin: null }), keyOf({ BeforeInputEventPlugin: null })];\n                                                                                                                       // 26\nmodule.exports = DefaultEventPluginOrder;                                                                              // 27\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"EnterLeaveEventPlugin.js\":[\"./EventConstants\",\"./EventPropagators\",\"./SyntheticMouseEvent\",\"./ReactMount\",\"fbjs/lib/keyOf\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/EnterLeaveEventPlugin.js                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule EnterLeaveEventPlugin                                                                               // 9\n * @typechecks static-only                                                                                             // 10\n */                                                                                                                    // 11\n                                                                                                                       // 12\n'use strict';                                                                                                          // 13\n                                                                                                                       // 14\nvar EventConstants = require('./EventConstants');                                                                      // 15\nvar EventPropagators = require('./EventPropagators');                                                                  // 16\nvar SyntheticMouseEvent = require('./SyntheticMouseEvent');                                                            // 17\n                                                                                                                       // 18\nvar ReactMount = require('./ReactMount');                                                                              // 19\nvar keyOf = require('fbjs/lib/keyOf');                                                                                 // 20\n                                                                                                                       // 21\nvar topLevelTypes = EventConstants.topLevelTypes;                                                                      // 22\nvar getFirstReactDOM = ReactMount.getFirstReactDOM;                                                                    // 23\n                                                                                                                       // 24\nvar eventTypes = {                                                                                                     // 25\n  mouseEnter: {                                                                                                        // 26\n    registrationName: keyOf({ onMouseEnter: null }),                                                                   // 27\n    dependencies: [topLevelTypes.topMouseOut, topLevelTypes.topMouseOver]                                              // 28\n  },                                                                                                                   // 29\n  mouseLeave: {                                                                                                        // 30\n    registrationName: keyOf({ onMouseLeave: null }),                                                                   // 31\n    dependencies: [topLevelTypes.topMouseOut, topLevelTypes.topMouseOver]                                              // 32\n  }                                                                                                                    // 33\n};                                                                                                                     // 34\n                                                                                                                       // 35\nvar extractedEvents = [null, null];                                                                                    // 36\n                                                                                                                       // 37\nvar EnterLeaveEventPlugin = {                                                                                          // 38\n                                                                                                                       // 39\n  eventTypes: eventTypes,                                                                                              // 40\n                                                                                                                       // 41\n  /**                                                                                                                  // 42\n   * For almost every interaction we care about, there will be both a top-level                                        // 43\n   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that                                         // 44\n   * we do not extract duplicate events. However, moving the mouse into the                                            // 45\n   * browser from outside will not fire a `mouseout` event. In this case, we use                                       // 46\n   * the `mouseover` top-level event.                                                                                  // 47\n   *                                                                                                                   // 48\n   * @param {string} topLevelType Record from `EventConstants`.                                                        // 49\n   * @param {DOMEventTarget} topLevelTarget The listening component root node.                                         // 50\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.                                                          // 51\n   * @param {object} nativeEvent Native browser event.                                                                 // 52\n   * @return {*} An accumulation of synthetic events.                                                                  // 53\n   * @see {EventPluginHub.extractEvents}                                                                               // 54\n   */                                                                                                                  // 55\n  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {           // 56\n    if (topLevelType === topLevelTypes.topMouseOver && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {       // 57\n      return null;                                                                                                     // 58\n    }                                                                                                                  // 59\n    if (topLevelType !== topLevelTypes.topMouseOut && topLevelType !== topLevelTypes.topMouseOver) {                   // 60\n      // Must not be a mouse in or mouse out - ignoring.                                                               // 61\n      return null;                                                                                                     // 62\n    }                                                                                                                  // 63\n                                                                                                                       // 64\n    var win;                                                                                                           // 65\n    if (topLevelTarget.window === topLevelTarget) {                                                                    // 66\n      // `topLevelTarget` is probably a window object.                                                                 // 67\n      win = topLevelTarget;                                                                                            // 68\n    } else {                                                                                                           // 69\n      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.                                           // 70\n      var doc = topLevelTarget.ownerDocument;                                                                          // 71\n      if (doc) {                                                                                                       // 72\n        win = doc.defaultView || doc.parentWindow;                                                                     // 73\n      } else {                                                                                                         // 74\n        win = window;                                                                                                  // 75\n      }                                                                                                                // 76\n    }                                                                                                                  // 77\n                                                                                                                       // 78\n    var from;                                                                                                          // 79\n    var to;                                                                                                            // 80\n    var fromID = '';                                                                                                   // 81\n    var toID = '';                                                                                                     // 82\n    if (topLevelType === topLevelTypes.topMouseOut) {                                                                  // 83\n      from = topLevelTarget;                                                                                           // 84\n      fromID = topLevelTargetID;                                                                                       // 85\n      to = getFirstReactDOM(nativeEvent.relatedTarget || nativeEvent.toElement);                                       // 86\n      if (to) {                                                                                                        // 87\n        toID = ReactMount.getID(to);                                                                                   // 88\n      } else {                                                                                                         // 89\n        to = win;                                                                                                      // 90\n      }                                                                                                                // 91\n      to = to || win;                                                                                                  // 92\n    } else {                                                                                                           // 93\n      from = win;                                                                                                      // 94\n      to = topLevelTarget;                                                                                             // 95\n      toID = topLevelTargetID;                                                                                         // 96\n    }                                                                                                                  // 97\n                                                                                                                       // 98\n    if (from === to) {                                                                                                 // 99\n      // Nothing pertains to our managed components.                                                                   // 100\n      return null;                                                                                                     // 101\n    }                                                                                                                  // 102\n                                                                                                                       // 103\n    var leave = SyntheticMouseEvent.getPooled(eventTypes.mouseLeave, fromID, nativeEvent, nativeEventTarget);          // 104\n    leave.type = 'mouseleave';                                                                                         // 105\n    leave.target = from;                                                                                               // 106\n    leave.relatedTarget = to;                                                                                          // 107\n                                                                                                                       // 108\n    var enter = SyntheticMouseEvent.getPooled(eventTypes.mouseEnter, toID, nativeEvent, nativeEventTarget);            // 109\n    enter.type = 'mouseenter';                                                                                         // 110\n    enter.target = to;                                                                                                 // 111\n    enter.relatedTarget = from;                                                                                        // 112\n                                                                                                                       // 113\n    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, fromID, toID);                                       // 114\n                                                                                                                       // 115\n    extractedEvents[0] = leave;                                                                                        // 116\n    extractedEvents[1] = enter;                                                                                        // 117\n                                                                                                                       // 118\n    return extractedEvents;                                                                                            // 119\n  }                                                                                                                    // 120\n                                                                                                                       // 121\n};                                                                                                                     // 122\n                                                                                                                       // 123\nmodule.exports = EnterLeaveEventPlugin;                                                                                // 124\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"SyntheticMouseEvent.js\":[\"./SyntheticUIEvent\",\"./ViewportMetrics\",\"./getEventModifierState\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/SyntheticMouseEvent.js                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule SyntheticMouseEvent                                                                                 // 9\n * @typechecks static-only                                                                                             // 10\n */                                                                                                                    // 11\n                                                                                                                       // 12\n'use strict';                                                                                                          // 13\n                                                                                                                       // 14\nvar SyntheticUIEvent = require('./SyntheticUIEvent');                                                                  // 15\nvar ViewportMetrics = require('./ViewportMetrics');                                                                    // 16\n                                                                                                                       // 17\nvar getEventModifierState = require('./getEventModifierState');                                                        // 18\n                                                                                                                       // 19\n/**                                                                                                                    // 20\n * @interface MouseEvent                                                                                               // 21\n * @see http://www.w3.org/TR/DOM-Level-3-Events/                                                                       // 22\n */                                                                                                                    // 23\nvar MouseEventInterface = {                                                                                            // 24\n  screenX: null,                                                                                                       // 25\n  screenY: null,                                                                                                       // 26\n  clientX: null,                                                                                                       // 27\n  clientY: null,                                                                                                       // 28\n  ctrlKey: null,                                                                                                       // 29\n  shiftKey: null,                                                                                                      // 30\n  altKey: null,                                                                                                        // 31\n  metaKey: null,                                                                                                       // 32\n  getModifierState: getEventModifierState,                                                                             // 33\n  button: function (event) {                                                                                           // 34\n    // Webkit, Firefox, IE9+                                                                                           // 35\n    // which:  1 2 3                                                                                                   // 36\n    // button: 0 1 2 (standard)                                                                                        // 37\n    var button = event.button;                                                                                         // 38\n    if ('which' in event) {                                                                                            // 39\n      return button;                                                                                                   // 40\n    }                                                                                                                  // 41\n    // IE<9                                                                                                            // 42\n    // which:  undefined                                                                                               // 43\n    // button: 0 0 0                                                                                                   // 44\n    // button: 1 4 2 (onmouseup)                                                                                       // 45\n    return button === 2 ? 2 : button === 4 ? 1 : 0;                                                                    // 46\n  },                                                                                                                   // 47\n  buttons: null,                                                                                                       // 48\n  relatedTarget: function (event) {                                                                                    // 49\n    return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);      // 50\n  },                                                                                                                   // 51\n  // \"Proprietary\" Interface.                                                                                          // 52\n  pageX: function (event) {                                                                                            // 53\n    return 'pageX' in event ? event.pageX : event.clientX + ViewportMetrics.currentScrollLeft;                         // 54\n  },                                                                                                                   // 55\n  pageY: function (event) {                                                                                            // 56\n    return 'pageY' in event ? event.pageY : event.clientY + ViewportMetrics.currentScrollTop;                          // 57\n  }                                                                                                                    // 58\n};                                                                                                                     // 59\n                                                                                                                       // 60\n/**                                                                                                                    // 61\n * @param {object} dispatchConfig Configuration used to dispatch this event.                                           // 62\n * @param {string} dispatchMarker Marker identifying the event target.                                                 // 63\n * @param {object} nativeEvent Native browser event.                                                                   // 64\n * @extends {SyntheticUIEvent}                                                                                         // 65\n */                                                                                                                    // 66\nfunction SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {                         // 67\n  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);                         // 68\n}                                                                                                                      // 69\n                                                                                                                       // 70\nSyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);                                               // 71\n                                                                                                                       // 72\nmodule.exports = SyntheticMouseEvent;                                                                                  // 73\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"SyntheticUIEvent.js\":[\"./SyntheticEvent\",\"./getEventTarget\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/SyntheticUIEvent.js                                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule SyntheticUIEvent                                                                                    // 9\n * @typechecks static-only                                                                                             // 10\n */                                                                                                                    // 11\n                                                                                                                       // 12\n'use strict';                                                                                                          // 13\n                                                                                                                       // 14\nvar SyntheticEvent = require('./SyntheticEvent');                                                                      // 15\n                                                                                                                       // 16\nvar getEventTarget = require('./getEventTarget');                                                                      // 17\n                                                                                                                       // 18\n/**                                                                                                                    // 19\n * @interface UIEvent                                                                                                  // 20\n * @see http://www.w3.org/TR/DOM-Level-3-Events/                                                                       // 21\n */                                                                                                                    // 22\nvar UIEventInterface = {                                                                                               // 23\n  view: function (event) {                                                                                             // 24\n    if (event.view) {                                                                                                  // 25\n      return event.view;                                                                                               // 26\n    }                                                                                                                  // 27\n                                                                                                                       // 28\n    var target = getEventTarget(event);                                                                                // 29\n    if (target != null && target.window === target) {                                                                  // 30\n      // target is a window object                                                                                     // 31\n      return target;                                                                                                   // 32\n    }                                                                                                                  // 33\n                                                                                                                       // 34\n    var doc = target.ownerDocument;                                                                                    // 35\n    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.                                             // 36\n    if (doc) {                                                                                                         // 37\n      return doc.defaultView || doc.parentWindow;                                                                      // 38\n    } else {                                                                                                           // 39\n      return window;                                                                                                   // 40\n    }                                                                                                                  // 41\n  },                                                                                                                   // 42\n  detail: function (event) {                                                                                           // 43\n    return event.detail || 0;                                                                                          // 44\n  }                                                                                                                    // 45\n};                                                                                                                     // 46\n                                                                                                                       // 47\n/**                                                                                                                    // 48\n * @param {object} dispatchConfig Configuration used to dispatch this event.                                           // 49\n * @param {string} dispatchMarker Marker identifying the event target.                                                 // 50\n * @param {object} nativeEvent Native browser event.                                                                   // 51\n * @extends {SyntheticEvent}                                                                                           // 52\n */                                                                                                                    // 53\nfunction SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {                            // 54\n  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);                           // 55\n}                                                                                                                      // 56\n                                                                                                                       // 57\nSyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);                                                       // 58\n                                                                                                                       // 59\nmodule.exports = SyntheticUIEvent;                                                                                     // 60\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"getEventModifierState.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/getEventModifierState.js                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule getEventModifierState                                                                               // 9\n * @typechecks static-only                                                                                             // 10\n */                                                                                                                    // 11\n                                                                                                                       // 12\n'use strict';                                                                                                          // 13\n                                                                                                                       // 14\n/**                                                                                                                    // 15\n * Translation from modifier key to the associated property in the event.                                              // 16\n * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers                                                        // 17\n */                                                                                                                    // 18\n                                                                                                                       // 19\nvar modifierKeyToProp = {                                                                                              // 20\n  'Alt': 'altKey',                                                                                                     // 21\n  'Control': 'ctrlKey',                                                                                                // 22\n  'Meta': 'metaKey',                                                                                                   // 23\n  'Shift': 'shiftKey'                                                                                                  // 24\n};                                                                                                                     // 25\n                                                                                                                       // 26\n// IE8 does not implement getModifierState so we simply map it to the only                                             // 27\n// modifier keys exposed by the event itself, does not support Lock-keys.                                              // 28\n// Currently, all major browsers except Chrome seems to support Lock-keys.                                             // 29\nfunction modifierStateGetter(keyArg) {                                                                                 // 30\n  var syntheticEvent = this;                                                                                           // 31\n  var nativeEvent = syntheticEvent.nativeEvent;                                                                        // 32\n  if (nativeEvent.getModifierState) {                                                                                  // 33\n    return nativeEvent.getModifierState(keyArg);                                                                       // 34\n  }                                                                                                                    // 35\n  var keyProp = modifierKeyToProp[keyArg];                                                                             // 36\n  return keyProp ? !!nativeEvent[keyProp] : false;                                                                     // 37\n}                                                                                                                      // 38\n                                                                                                                       // 39\nfunction getEventModifierState(nativeEvent) {                                                                          // 40\n  return modifierStateGetter;                                                                                          // 41\n}                                                                                                                      // 42\n                                                                                                                       // 43\nmodule.exports = getEventModifierState;                                                                                // 44\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"HTMLDOMPropertyConfig.js\":[\"./DOMProperty\",\"fbjs/lib/ExecutionEnvironment\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/HTMLDOMPropertyConfig.js                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule HTMLDOMPropertyConfig                                                                               // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar DOMProperty = require('./DOMProperty');                                                                            // 14\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');                                                   // 15\n                                                                                                                       // 16\nvar MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;                                                     // 17\nvar MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;                                                       // 18\nvar HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;                                                       // 19\nvar HAS_SIDE_EFFECTS = DOMProperty.injection.HAS_SIDE_EFFECTS;                                                         // 20\nvar HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;                                                       // 21\nvar HAS_POSITIVE_NUMERIC_VALUE = DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;                                     // 22\nvar HAS_OVERLOADED_BOOLEAN_VALUE = DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;                                 // 23\n                                                                                                                       // 24\nvar hasSVG;                                                                                                            // 25\nif (ExecutionEnvironment.canUseDOM) {                                                                                  // 26\n  var implementation = document.implementation;                                                                        // 27\n  hasSVG = implementation && implementation.hasFeature && implementation.hasFeature('http://www.w3.org/TR/SVG11/feature#BasicStructure', '1.1');\n}                                                                                                                      // 29\n                                                                                                                       // 30\nvar HTMLDOMPropertyConfig = {                                                                                          // 31\n  isCustomAttribute: RegExp.prototype.test.bind(/^(data|aria)-[a-z_][a-z\\d_.\\-]*$/),                                   // 32\n  Properties: {                                                                                                        // 33\n    /**                                                                                                                // 34\n     * Standard Properties                                                                                             // 35\n     */                                                                                                                // 36\n    accept: null,                                                                                                      // 37\n    acceptCharset: null,                                                                                               // 38\n    accessKey: null,                                                                                                   // 39\n    action: null,                                                                                                      // 40\n    allowFullScreen: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,                                                           // 41\n    allowTransparency: MUST_USE_ATTRIBUTE,                                                                             // 42\n    alt: null,                                                                                                         // 43\n    async: HAS_BOOLEAN_VALUE,                                                                                          // 44\n    autoComplete: null,                                                                                                // 45\n    // autoFocus is polyfilled/normalized by AutoFocusUtils                                                            // 46\n    // autoFocus: HAS_BOOLEAN_VALUE,                                                                                   // 47\n    autoPlay: HAS_BOOLEAN_VALUE,                                                                                       // 48\n    capture: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,                                                                   // 49\n    cellPadding: null,                                                                                                 // 50\n    cellSpacing: null,                                                                                                 // 51\n    charSet: MUST_USE_ATTRIBUTE,                                                                                       // 52\n    challenge: MUST_USE_ATTRIBUTE,                                                                                     // 53\n    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,                                                                    // 54\n    classID: MUST_USE_ATTRIBUTE,                                                                                       // 55\n    // To set className on SVG elements, it's necessary to use .setAttribute;                                          // 56\n    // this works on HTML elements too in all browsers except IE8. Conveniently,                                       // 57\n    // IE8 doesn't support SVG and so we can simply use the attribute in                                               // 58\n    // browsers that support SVG and the property in browsers that don't,                                              // 59\n    // regardless of whether the element is HTML or SVG.                                                               // 60\n    className: hasSVG ? MUST_USE_ATTRIBUTE : MUST_USE_PROPERTY,                                                        // 61\n    cols: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,                                                             // 62\n    colSpan: null,                                                                                                     // 63\n    content: null,                                                                                                     // 64\n    contentEditable: null,                                                                                             // 65\n    contextMenu: MUST_USE_ATTRIBUTE,                                                                                   // 66\n    controls: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,                                                                   // 67\n    coords: null,                                                                                                      // 68\n    crossOrigin: null,                                                                                                 // 69\n    data: null, // For `<object />` acts as `src`.                                                                     // 70\n    dateTime: MUST_USE_ATTRIBUTE,                                                                                      // 71\n    'default': HAS_BOOLEAN_VALUE,                                                                                      // 72\n    defer: HAS_BOOLEAN_VALUE,                                                                                          // 73\n    dir: null,                                                                                                         // 74\n    disabled: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,                                                                  // 75\n    download: HAS_OVERLOADED_BOOLEAN_VALUE,                                                                            // 76\n    draggable: null,                                                                                                   // 77\n    encType: null,                                                                                                     // 78\n    form: MUST_USE_ATTRIBUTE,                                                                                          // 79\n    formAction: MUST_USE_ATTRIBUTE,                                                                                    // 80\n    formEncType: MUST_USE_ATTRIBUTE,                                                                                   // 81\n    formMethod: MUST_USE_ATTRIBUTE,                                                                                    // 82\n    formNoValidate: HAS_BOOLEAN_VALUE,                                                                                 // 83\n    formTarget: MUST_USE_ATTRIBUTE,                                                                                    // 84\n    frameBorder: MUST_USE_ATTRIBUTE,                                                                                   // 85\n    headers: null,                                                                                                     // 86\n    height: MUST_USE_ATTRIBUTE,                                                                                        // 87\n    hidden: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,                                                                    // 88\n    high: null,                                                                                                        // 89\n    href: null,                                                                                                        // 90\n    hrefLang: null,                                                                                                    // 91\n    htmlFor: null,                                                                                                     // 92\n    httpEquiv: null,                                                                                                   // 93\n    icon: null,                                                                                                        // 94\n    id: MUST_USE_PROPERTY,                                                                                             // 95\n    inputMode: MUST_USE_ATTRIBUTE,                                                                                     // 96\n    integrity: null,                                                                                                   // 97\n    is: MUST_USE_ATTRIBUTE,                                                                                            // 98\n    keyParams: MUST_USE_ATTRIBUTE,                                                                                     // 99\n    keyType: MUST_USE_ATTRIBUTE,                                                                                       // 100\n    kind: null,                                                                                                        // 101\n    label: null,                                                                                                       // 102\n    lang: null,                                                                                                        // 103\n    list: MUST_USE_ATTRIBUTE,                                                                                          // 104\n    loop: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,                                                                       // 105\n    low: null,                                                                                                         // 106\n    manifest: MUST_USE_ATTRIBUTE,                                                                                      // 107\n    marginHeight: null,                                                                                                // 108\n    marginWidth: null,                                                                                                 // 109\n    max: null,                                                                                                         // 110\n    maxLength: MUST_USE_ATTRIBUTE,                                                                                     // 111\n    media: MUST_USE_ATTRIBUTE,                                                                                         // 112\n    mediaGroup: null,                                                                                                  // 113\n    method: null,                                                                                                      // 114\n    min: null,                                                                                                         // 115\n    minLength: MUST_USE_ATTRIBUTE,                                                                                     // 116\n    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,                                                                   // 117\n    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,                                                                      // 118\n    name: null,                                                                                                        // 119\n    nonce: MUST_USE_ATTRIBUTE,                                                                                         // 120\n    noValidate: HAS_BOOLEAN_VALUE,                                                                                     // 121\n    open: HAS_BOOLEAN_VALUE,                                                                                           // 122\n    optimum: null,                                                                                                     // 123\n    pattern: null,                                                                                                     // 124\n    placeholder: null,                                                                                                 // 125\n    poster: null,                                                                                                      // 126\n    preload: null,                                                                                                     // 127\n    radioGroup: null,                                                                                                  // 128\n    readOnly: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,                                                                   // 129\n    rel: null,                                                                                                         // 130\n    required: HAS_BOOLEAN_VALUE,                                                                                       // 131\n    reversed: HAS_BOOLEAN_VALUE,                                                                                       // 132\n    role: MUST_USE_ATTRIBUTE,                                                                                          // 133\n    rows: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,                                                             // 134\n    rowSpan: null,                                                                                                     // 135\n    sandbox: null,                                                                                                     // 136\n    scope: null,                                                                                                       // 137\n    scoped: HAS_BOOLEAN_VALUE,                                                                                         // 138\n    scrolling: null,                                                                                                   // 139\n    seamless: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,                                                                  // 140\n    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,                                                                   // 141\n    shape: null,                                                                                                       // 142\n    size: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,                                                             // 143\n    sizes: MUST_USE_ATTRIBUTE,                                                                                         // 144\n    span: HAS_POSITIVE_NUMERIC_VALUE,                                                                                  // 145\n    spellCheck: null,                                                                                                  // 146\n    src: null,                                                                                                         // 147\n    srcDoc: MUST_USE_PROPERTY,                                                                                         // 148\n    srcLang: null,                                                                                                     // 149\n    srcSet: MUST_USE_ATTRIBUTE,                                                                                        // 150\n    start: HAS_NUMERIC_VALUE,                                                                                          // 151\n    step: null,                                                                                                        // 152\n    style: null,                                                                                                       // 153\n    summary: null,                                                                                                     // 154\n    tabIndex: null,                                                                                                    // 155\n    target: null,                                                                                                      // 156\n    title: null,                                                                                                       // 157\n    type: null,                                                                                                        // 158\n    useMap: null,                                                                                                      // 159\n    value: MUST_USE_PROPERTY | HAS_SIDE_EFFECTS,                                                                       // 160\n    width: MUST_USE_ATTRIBUTE,                                                                                         // 161\n    wmode: MUST_USE_ATTRIBUTE,                                                                                         // 162\n    wrap: null,                                                                                                        // 163\n                                                                                                                       // 164\n    /**                                                                                                                // 165\n     * RDFa Properties                                                                                                 // 166\n     */                                                                                                                // 167\n    about: MUST_USE_ATTRIBUTE,                                                                                         // 168\n    datatype: MUST_USE_ATTRIBUTE,                                                                                      // 169\n    inlist: MUST_USE_ATTRIBUTE,                                                                                        // 170\n    prefix: MUST_USE_ATTRIBUTE,                                                                                        // 171\n    // property is also supported for OpenGraph in meta tags.                                                          // 172\n    property: MUST_USE_ATTRIBUTE,                                                                                      // 173\n    resource: MUST_USE_ATTRIBUTE,                                                                                      // 174\n    'typeof': MUST_USE_ATTRIBUTE,                                                                                      // 175\n    vocab: MUST_USE_ATTRIBUTE,                                                                                         // 176\n                                                                                                                       // 177\n    /**                                                                                                                // 178\n     * Non-standard Properties                                                                                         // 179\n     */                                                                                                                // 180\n    // autoCapitalize and autoCorrect are supported in Mobile Safari for                                               // 181\n    // keyboard hints.                                                                                                 // 182\n    autoCapitalize: MUST_USE_ATTRIBUTE,                                                                                // 183\n    autoCorrect: MUST_USE_ATTRIBUTE,                                                                                   // 184\n    // autoSave allows WebKit/Blink to persist values of input fields on page reloads                                  // 185\n    autoSave: null,                                                                                                    // 186\n    // color is for Safari mask-icon link                                                                              // 187\n    color: null,                                                                                                       // 188\n    // itemProp, itemScope, itemType are for                                                                           // 189\n    // Microdata support. See http://schema.org/docs/gs.html                                                           // 190\n    itemProp: MUST_USE_ATTRIBUTE,                                                                                      // 191\n    itemScope: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,                                                                 // 192\n    itemType: MUST_USE_ATTRIBUTE,                                                                                      // 193\n    // itemID and itemRef are for Microdata support as well but                                                        // 194\n    // only specified in the the WHATWG spec document. See                                                             // 195\n    // https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api                                         // 196\n    itemID: MUST_USE_ATTRIBUTE,                                                                                        // 197\n    itemRef: MUST_USE_ATTRIBUTE,                                                                                       // 198\n    // results show looking glass icon and recent searches on input                                                    // 199\n    // search fields in WebKit/Blink                                                                                   // 200\n    results: null,                                                                                                     // 201\n    // IE-only attribute that specifies security restrictions on an iframe                                             // 202\n    // as an alternative to the sandbox attribute on IE<10                                                             // 203\n    security: MUST_USE_ATTRIBUTE,                                                                                      // 204\n    // IE-only attribute that controls focus behavior                                                                  // 205\n    unselectable: MUST_USE_ATTRIBUTE                                                                                   // 206\n  },                                                                                                                   // 207\n  DOMAttributeNames: {                                                                                                 // 208\n    acceptCharset: 'accept-charset',                                                                                   // 209\n    className: 'class',                                                                                                // 210\n    htmlFor: 'for',                                                                                                    // 211\n    httpEquiv: 'http-equiv'                                                                                            // 212\n  },                                                                                                                   // 213\n  DOMPropertyNames: {                                                                                                  // 214\n    autoComplete: 'autocomplete',                                                                                      // 215\n    autoFocus: 'autofocus',                                                                                            // 216\n    autoPlay: 'autoplay',                                                                                              // 217\n    autoSave: 'autosave',                                                                                              // 218\n    // `encoding` is equivalent to `enctype`, IE8 lacks an `enctype` setter.                                           // 219\n    // http://www.w3.org/TR/html5/forms.html#dom-fs-encoding                                                           // 220\n    encType: 'encoding',                                                                                               // 221\n    hrefLang: 'hreflang',                                                                                              // 222\n    radioGroup: 'radiogroup',                                                                                          // 223\n    spellCheck: 'spellcheck',                                                                                          // 224\n    srcDoc: 'srcdoc',                                                                                                  // 225\n    srcSet: 'srcset'                                                                                                   // 226\n  }                                                                                                                    // 227\n};                                                                                                                     // 228\n                                                                                                                       // 229\nmodule.exports = HTMLDOMPropertyConfig;                                                                                // 230\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactBrowserComponentMixin.js\":[\"./ReactInstanceMap\",\"./findDOMNode\",\"fbjs/lib/warning\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactBrowserComponentMixin.js                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactBrowserComponentMixin                                                                          // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar ReactInstanceMap = require('./ReactInstanceMap');                                                                  // 14\n                                                                                                                       // 15\nvar findDOMNode = require('./findDOMNode');                                                                            // 16\nvar warning = require('fbjs/lib/warning');                                                                             // 17\n                                                                                                                       // 18\nvar didWarnKey = '_getDOMNodeDidWarn';                                                                                 // 19\n                                                                                                                       // 20\nvar ReactBrowserComponentMixin = {                                                                                     // 21\n  /**                                                                                                                  // 22\n   * Returns the DOM node rendered by this component.                                                                  // 23\n   *                                                                                                                   // 24\n   * @return {DOMElement} The root node of this component.                                                             // 25\n   * @final                                                                                                            // 26\n   * @protected                                                                                                        // 27\n   */                                                                                                                  // 28\n  getDOMNode: function () {                                                                                            // 29\n    process.env.NODE_ENV !== 'production' ? warning(this.constructor[didWarnKey], '%s.getDOMNode(...) is deprecated. Please use ' + 'ReactDOM.findDOMNode(instance) instead.', ReactInstanceMap.get(this).getName() || this.tagName || 'Unknown') : undefined;\n    this.constructor[didWarnKey] = true;                                                                               // 31\n    return findDOMNode(this);                                                                                          // 32\n  }                                                                                                                    // 33\n};                                                                                                                     // 34\n                                                                                                                       // 35\nmodule.exports = ReactBrowserComponentMixin;                                                                           // 36\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"findDOMNode.js\":[\"./ReactCurrentOwner\",\"./ReactInstanceMap\",\"./ReactMount\",\"fbjs/lib/invariant\",\"fbjs/lib/warning\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/findDOMNode.js                                                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule findDOMNode                                                                                         // 9\n * @typechecks static-only                                                                                             // 10\n */                                                                                                                    // 11\n                                                                                                                       // 12\n'use strict';                                                                                                          // 13\n                                                                                                                       // 14\nvar ReactCurrentOwner = require('./ReactCurrentOwner');                                                                // 15\nvar ReactInstanceMap = require('./ReactInstanceMap');                                                                  // 16\nvar ReactMount = require('./ReactMount');                                                                              // 17\n                                                                                                                       // 18\nvar invariant = require('fbjs/lib/invariant');                                                                         // 19\nvar warning = require('fbjs/lib/warning');                                                                             // 20\n                                                                                                                       // 21\n/**                                                                                                                    // 22\n * Returns the DOM node rendered by this element.                                                                      // 23\n *                                                                                                                     // 24\n * @param {ReactComponent|DOMElement} componentOrElement                                                               // 25\n * @return {?DOMElement} The root node of this element.                                                                // 26\n */                                                                                                                    // 27\nfunction findDOMNode(componentOrElement) {                                                                             // 28\n  if (process.env.NODE_ENV !== 'production') {                                                                         // 29\n    var owner = ReactCurrentOwner.current;                                                                             // 30\n    if (owner !== null) {                                                                                              // 31\n      process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing getDOMNode or findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : undefined;\n      owner._warnedAboutRefsInRender = true;                                                                           // 33\n    }                                                                                                                  // 34\n  }                                                                                                                    // 35\n  if (componentOrElement == null) {                                                                                    // 36\n    return null;                                                                                                       // 37\n  }                                                                                                                    // 38\n  if (componentOrElement.nodeType === 1) {                                                                             // 39\n    return componentOrElement;                                                                                         // 40\n  }                                                                                                                    // 41\n  if (ReactInstanceMap.has(componentOrElement)) {                                                                      // 42\n    return ReactMount.getNodeFromInstance(componentOrElement);                                                         // 43\n  }                                                                                                                    // 44\n  !(componentOrElement.render == null || typeof componentOrElement.render !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'findDOMNode was called on an unmounted component.') : invariant(false) : undefined;\n  !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element appears to be neither ReactComponent nor DOMNode (keys: %s)', Object.keys(componentOrElement)) : invariant(false) : undefined;\n}                                                                                                                      // 47\n                                                                                                                       // 48\nmodule.exports = findDOMNode;                                                                                          // 49\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactDefaultBatchingStrategy.js\":[\"./ReactUpdates\",\"./Transaction\",\"./Object.assign\",\"fbjs/lib/emptyFunction\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactDefaultBatchingStrategy.js                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactDefaultBatchingStrategy                                                                        // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar ReactUpdates = require('./ReactUpdates');                                                                          // 14\nvar Transaction = require('./Transaction');                                                                            // 15\n                                                                                                                       // 16\nvar assign = require('./Object.assign');                                                                               // 17\nvar emptyFunction = require('fbjs/lib/emptyFunction');                                                                 // 18\n                                                                                                                       // 19\nvar RESET_BATCHED_UPDATES = {                                                                                          // 20\n  initialize: emptyFunction,                                                                                           // 21\n  close: function () {                                                                                                 // 22\n    ReactDefaultBatchingStrategy.isBatchingUpdates = false;                                                            // 23\n  }                                                                                                                    // 24\n};                                                                                                                     // 25\n                                                                                                                       // 26\nvar FLUSH_BATCHED_UPDATES = {                                                                                          // 27\n  initialize: emptyFunction,                                                                                           // 28\n  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)                                                           // 29\n};                                                                                                                     // 30\n                                                                                                                       // 31\nvar TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];                                             // 32\n                                                                                                                       // 33\nfunction ReactDefaultBatchingStrategyTransaction() {                                                                   // 34\n  this.reinitializeTransaction();                                                                                      // 35\n}                                                                                                                      // 36\n                                                                                                                       // 37\nassign(ReactDefaultBatchingStrategyTransaction.prototype, Transaction.Mixin, {                                         // 38\n  getTransactionWrappers: function () {                                                                                // 39\n    return TRANSACTION_WRAPPERS;                                                                                       // 40\n  }                                                                                                                    // 41\n});                                                                                                                    // 42\n                                                                                                                       // 43\nvar transaction = new ReactDefaultBatchingStrategyTransaction();                                                       // 44\n                                                                                                                       // 45\nvar ReactDefaultBatchingStrategy = {                                                                                   // 46\n  isBatchingUpdates: false,                                                                                            // 47\n                                                                                                                       // 48\n  /**                                                                                                                  // 49\n   * Call the provided function in a context within which calls to `setState`                                          // 50\n   * and friends are batched such that components aren't updated unnecessarily.                                        // 51\n   */                                                                                                                  // 52\n  batchedUpdates: function (callback, a, b, c, d, e) {                                                                 // 53\n    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;                                       // 54\n                                                                                                                       // 55\n    ReactDefaultBatchingStrategy.isBatchingUpdates = true;                                                             // 56\n                                                                                                                       // 57\n    // The code is written this way to avoid extra allocations                                                         // 58\n    if (alreadyBatchingUpdates) {                                                                                      // 59\n      callback(a, b, c, d, e);                                                                                         // 60\n    } else {                                                                                                           // 61\n      transaction.perform(callback, null, a, b, c, d, e);                                                              // 62\n    }                                                                                                                  // 63\n  }                                                                                                                    // 64\n};                                                                                                                     // 65\n                                                                                                                       // 66\nmodule.exports = ReactDefaultBatchingStrategy;                                                                         // 67\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactDOMComponent.js\":[\"./AutoFocusUtils\",\"./CSSPropertyOperations\",\"./DOMProperty\",\"./DOMPropertyOperations\",\"./EventConstants\",\"./ReactBrowserEventEmitter\",\"./ReactComponentBrowserEnvironment\",\"./ReactDOMButton\",\"./ReactDOMInput\",\"./ReactDOMOption\",\"./ReactDOMSelect\",\"./ReactDOMTextarea\",\"./ReactMount\",\"./ReactMultiChild\",\"./ReactPerf\",\"./ReactUpdateQueue\",\"./Object.assign\",\"./canDefineProperty\",\"./escapeTextContentForBrowser\",\"fbjs/lib/invariant\",\"./isEventSupported\",\"fbjs/lib/keyOf\",\"./setInnerHTML\",\"./setTextContent\",\"fbjs/lib/shallowEqual\",\"./validateDOMNesting\",\"fbjs/lib/warning\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactDOMComponent.js                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactDOMComponent                                                                                   // 9\n * @typechecks static-only                                                                                             // 10\n */                                                                                                                    // 11\n                                                                                                                       // 12\n/* global hasOwnProperty:true */                                                                                       // 13\n                                                                                                                       // 14\n'use strict';                                                                                                          // 15\n                                                                                                                       // 16\nvar AutoFocusUtils = require('./AutoFocusUtils');                                                                      // 17\nvar CSSPropertyOperations = require('./CSSPropertyOperations');                                                        // 18\nvar DOMProperty = require('./DOMProperty');                                                                            // 19\nvar DOMPropertyOperations = require('./DOMPropertyOperations');                                                        // 20\nvar EventConstants = require('./EventConstants');                                                                      // 21\nvar ReactBrowserEventEmitter = require('./ReactBrowserEventEmitter');                                                  // 22\nvar ReactComponentBrowserEnvironment = require('./ReactComponentBrowserEnvironment');                                  // 23\nvar ReactDOMButton = require('./ReactDOMButton');                                                                      // 24\nvar ReactDOMInput = require('./ReactDOMInput');                                                                        // 25\nvar ReactDOMOption = require('./ReactDOMOption');                                                                      // 26\nvar ReactDOMSelect = require('./ReactDOMSelect');                                                                      // 27\nvar ReactDOMTextarea = require('./ReactDOMTextarea');                                                                  // 28\nvar ReactMount = require('./ReactMount');                                                                              // 29\nvar ReactMultiChild = require('./ReactMultiChild');                                                                    // 30\nvar ReactPerf = require('./ReactPerf');                                                                                // 31\nvar ReactUpdateQueue = require('./ReactUpdateQueue');                                                                  // 32\n                                                                                                                       // 33\nvar assign = require('./Object.assign');                                                                               // 34\nvar canDefineProperty = require('./canDefineProperty');                                                                // 35\nvar escapeTextContentForBrowser = require('./escapeTextContentForBrowser');                                            // 36\nvar invariant = require('fbjs/lib/invariant');                                                                         // 37\nvar isEventSupported = require('./isEventSupported');                                                                  // 38\nvar keyOf = require('fbjs/lib/keyOf');                                                                                 // 39\nvar setInnerHTML = require('./setInnerHTML');                                                                          // 40\nvar setTextContent = require('./setTextContent');                                                                      // 41\nvar shallowEqual = require('fbjs/lib/shallowEqual');                                                                   // 42\nvar validateDOMNesting = require('./validateDOMNesting');                                                              // 43\nvar warning = require('fbjs/lib/warning');                                                                             // 44\n                                                                                                                       // 45\nvar deleteListener = ReactBrowserEventEmitter.deleteListener;                                                          // 46\nvar listenTo = ReactBrowserEventEmitter.listenTo;                                                                      // 47\nvar registrationNameModules = ReactBrowserEventEmitter.registrationNameModules;                                        // 48\n                                                                                                                       // 49\n// For quickly matching children type, to test if can be treated as content.                                           // 50\nvar CONTENT_TYPES = { 'string': true, 'number': true };                                                                // 51\n                                                                                                                       // 52\nvar CHILDREN = keyOf({ children: null });                                                                              // 53\nvar STYLE = keyOf({ style: null });                                                                                    // 54\nvar HTML = keyOf({ __html: null });                                                                                    // 55\n                                                                                                                       // 56\nvar ELEMENT_NODE_TYPE = 1;                                                                                             // 57\n                                                                                                                       // 58\nfunction getDeclarationErrorAddendum(internalInstance) {                                                               // 59\n  if (internalInstance) {                                                                                              // 60\n    var owner = internalInstance._currentElement._owner || null;                                                       // 61\n    if (owner) {                                                                                                       // 62\n      var name = owner.getName();                                                                                      // 63\n      if (name) {                                                                                                      // 64\n        return ' This DOM node was rendered by `' + name + '`.';                                                       // 65\n      }                                                                                                                // 66\n    }                                                                                                                  // 67\n  }                                                                                                                    // 68\n  return '';                                                                                                           // 69\n}                                                                                                                      // 70\n                                                                                                                       // 71\nvar legacyPropsDescriptor;                                                                                             // 72\nif (process.env.NODE_ENV !== 'production') {                                                                           // 73\n  legacyPropsDescriptor = {                                                                                            // 74\n    props: {                                                                                                           // 75\n      enumerable: false,                                                                                               // 76\n      get: function () {                                                                                               // 77\n        var component = this._reactInternalComponent;                                                                  // 78\n        process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .props of a DOM node; instead, ' + 'recreate the props as `render` did originally or read the DOM ' + 'properties/attributes directly from this node (e.g., ' + 'this.refs.box.className).%s', getDeclarationErrorAddendum(component)) : undefined;\n        return component._currentElement.props;                                                                        // 80\n      }                                                                                                                // 81\n    }                                                                                                                  // 82\n  };                                                                                                                   // 83\n}                                                                                                                      // 84\n                                                                                                                       // 85\nfunction legacyGetDOMNode() {                                                                                          // 86\n  if (process.env.NODE_ENV !== 'production') {                                                                         // 87\n    var component = this._reactInternalComponent;                                                                      // 88\n    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .getDOMNode() of a DOM node; ' + 'instead, use the node directly.%s', getDeclarationErrorAddendum(component)) : undefined;\n  }                                                                                                                    // 90\n  return this;                                                                                                         // 91\n}                                                                                                                      // 92\n                                                                                                                       // 93\nfunction legacyIsMounted() {                                                                                           // 94\n  var component = this._reactInternalComponent;                                                                        // 95\n  if (process.env.NODE_ENV !== 'production') {                                                                         // 96\n    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .isMounted() of a DOM node.%s', getDeclarationErrorAddendum(component)) : undefined;\n  }                                                                                                                    // 98\n  return !!component;                                                                                                  // 99\n}                                                                                                                      // 100\n                                                                                                                       // 101\nfunction legacySetStateEtc() {                                                                                         // 102\n  if (process.env.NODE_ENV !== 'production') {                                                                         // 103\n    var component = this._reactInternalComponent;                                                                      // 104\n    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .setState(), .replaceState(), or ' + '.forceUpdate() of a DOM node. This is a no-op.%s', getDeclarationErrorAddendum(component)) : undefined;\n  }                                                                                                                    // 106\n}                                                                                                                      // 107\n                                                                                                                       // 108\nfunction legacySetProps(partialProps, callback) {                                                                      // 109\n  var component = this._reactInternalComponent;                                                                        // 110\n  if (process.env.NODE_ENV !== 'production') {                                                                         // 111\n    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .setProps() of a DOM node. ' + 'Instead, call ReactDOM.render again at the top level.%s', getDeclarationErrorAddendum(component)) : undefined;\n  }                                                                                                                    // 113\n  if (!component) {                                                                                                    // 114\n    return;                                                                                                            // 115\n  }                                                                                                                    // 116\n  ReactUpdateQueue.enqueueSetPropsInternal(component, partialProps);                                                   // 117\n  if (callback) {                                                                                                      // 118\n    ReactUpdateQueue.enqueueCallbackInternal(component, callback);                                                     // 119\n  }                                                                                                                    // 120\n}                                                                                                                      // 121\n                                                                                                                       // 122\nfunction legacyReplaceProps(partialProps, callback) {                                                                  // 123\n  var component = this._reactInternalComponent;                                                                        // 124\n  if (process.env.NODE_ENV !== 'production') {                                                                         // 125\n    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .replaceProps() of a DOM node. ' + 'Instead, call ReactDOM.render again at the top level.%s', getDeclarationErrorAddendum(component)) : undefined;\n  }                                                                                                                    // 127\n  if (!component) {                                                                                                    // 128\n    return;                                                                                                            // 129\n  }                                                                                                                    // 130\n  ReactUpdateQueue.enqueueReplacePropsInternal(component, partialProps);                                               // 131\n  if (callback) {                                                                                                      // 132\n    ReactUpdateQueue.enqueueCallbackInternal(component, callback);                                                     // 133\n  }                                                                                                                    // 134\n}                                                                                                                      // 135\n                                                                                                                       // 136\nfunction friendlyStringify(obj) {                                                                                      // 137\n  if (typeof obj === 'object') {                                                                                       // 138\n    if (Array.isArray(obj)) {                                                                                          // 139\n      return '[' + obj.map(friendlyStringify).join(', ') + ']';                                                        // 140\n    } else {                                                                                                           // 141\n      var pairs = [];                                                                                                  // 142\n      for (var key in obj) {                                                                                           // 143\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {                                                          // 144\n          var keyEscaped = /^[a-z$_][\\w$_]*$/i.test(key) ? key : JSON.stringify(key);                                  // 145\n          pairs.push(keyEscaped + ': ' + friendlyStringify(obj[key]));                                                 // 146\n        }                                                                                                              // 147\n      }                                                                                                                // 148\n      return '{' + pairs.join(', ') + '}';                                                                             // 149\n    }                                                                                                                  // 150\n  } else if (typeof obj === 'string') {                                                                                // 151\n    return JSON.stringify(obj);                                                                                        // 152\n  } else if (typeof obj === 'function') {                                                                              // 153\n    return '[function object]';                                                                                        // 154\n  }                                                                                                                    // 155\n  // Differs from JSON.stringify in that undefined becauses undefined and that                                         // 156\n  // inf and nan don't become null                                                                                     // 157\n  return String(obj);                                                                                                  // 158\n}                                                                                                                      // 159\n                                                                                                                       // 160\nvar styleMutationWarning = {};                                                                                         // 161\n                                                                                                                       // 162\nfunction checkAndWarnForMutatedStyle(style1, style2, component) {                                                      // 163\n  if (style1 == null || style2 == null) {                                                                              // 164\n    return;                                                                                                            // 165\n  }                                                                                                                    // 166\n  if (shallowEqual(style1, style2)) {                                                                                  // 167\n    return;                                                                                                            // 168\n  }                                                                                                                    // 169\n                                                                                                                       // 170\n  var componentName = component._tag;                                                                                  // 171\n  var owner = component._currentElement._owner;                                                                        // 172\n  var ownerName;                                                                                                       // 173\n  if (owner) {                                                                                                         // 174\n    ownerName = owner.getName();                                                                                       // 175\n  }                                                                                                                    // 176\n                                                                                                                       // 177\n  var hash = ownerName + '|' + componentName;                                                                          // 178\n                                                                                                                       // 179\n  if (styleMutationWarning.hasOwnProperty(hash)) {                                                                     // 180\n    return;                                                                                                            // 181\n  }                                                                                                                    // 182\n                                                                                                                       // 183\n  styleMutationWarning[hash] = true;                                                                                   // 184\n                                                                                                                       // 185\n  process.env.NODE_ENV !== 'production' ? warning(false, '`%s` was passed a style object that has previously been mutated. ' + 'Mutating `style` is deprecated. Consider cloning it beforehand. Check ' + 'the `render` %s. Previous style: %s. Mutated style: %s.', componentName, owner ? 'of `' + ownerName + '`' : 'using <' + componentName + '>', friendlyStringify(style1), friendlyStringify(style2)) : undefined;\n}                                                                                                                      // 187\n                                                                                                                       // 188\n/**                                                                                                                    // 189\n * @param {object} component                                                                                           // 190\n * @param {?object} props                                                                                              // 191\n */                                                                                                                    // 192\nfunction assertValidProps(component, props) {                                                                          // 193\n  if (!props) {                                                                                                        // 194\n    return;                                                                                                            // 195\n  }                                                                                                                    // 196\n  // Note the use of `==` which checks for null or undefined.                                                          // 197\n  if (process.env.NODE_ENV !== 'production') {                                                                         // 198\n    if (voidElementTags[component._tag]) {                                                                             // 199\n      process.env.NODE_ENV !== 'production' ? warning(props.children == null && props.dangerouslySetInnerHTML == null, '%s is a void element tag and must not have `children` or ' + 'use `props.dangerouslySetInnerHTML`.%s', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : undefined;\n    }                                                                                                                  // 201\n  }                                                                                                                    // 202\n  if (props.dangerouslySetInnerHTML != null) {                                                                         // 203\n    !(props.children == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.') : invariant(false) : undefined;\n    !(typeof props.dangerouslySetInnerHTML === 'object' && HTML in props.dangerouslySetInnerHTML) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. ' + 'Please visit https://fb.me/react-invariant-dangerously-set-inner-html ' + 'for more information.') : invariant(false) : undefined;\n  }                                                                                                                    // 206\n  if (process.env.NODE_ENV !== 'production') {                                                                         // 207\n    process.env.NODE_ENV !== 'production' ? warning(props.innerHTML == null, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.') : undefined;\n    process.env.NODE_ENV !== 'production' ? warning(!props.contentEditable || props.children == null, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.') : undefined;\n  }                                                                                                                    // 210\n  !(props.style == null || typeof props.style === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'The `style` prop expects a mapping from style properties to values, ' + 'not a string. For example, style={{marginRight: spacing + \\'em\\'}} when ' + 'using JSX.%s', getDeclarationErrorAddendum(component)) : invariant(false) : undefined;\n}                                                                                                                      // 212\n                                                                                                                       // 213\nfunction enqueuePutListener(id, registrationName, listener, transaction) {                                             // 214\n  if (process.env.NODE_ENV !== 'production') {                                                                         // 215\n    // IE8 has no API for event capturing and the `onScroll` event doesn't                                             // 216\n    // bubble.                                                                                                         // 217\n    process.env.NODE_ENV !== 'production' ? warning(registrationName !== 'onScroll' || isEventSupported('scroll', true), 'This browser doesn\\'t support the `onScroll` event') : undefined;\n  }                                                                                                                    // 219\n  var container = ReactMount.findReactContainerForID(id);                                                              // 220\n  if (container) {                                                                                                     // 221\n    var doc = container.nodeType === ELEMENT_NODE_TYPE ? container.ownerDocument : container;                          // 222\n    listenTo(registrationName, doc);                                                                                   // 223\n  }                                                                                                                    // 224\n  transaction.getReactMountReady().enqueue(putListener, {                                                              // 225\n    id: id,                                                                                                            // 226\n    registrationName: registrationName,                                                                                // 227\n    listener: listener                                                                                                 // 228\n  });                                                                                                                  // 229\n}                                                                                                                      // 230\n                                                                                                                       // 231\nfunction putListener() {                                                                                               // 232\n  var listenerToPut = this;                                                                                            // 233\n  ReactBrowserEventEmitter.putListener(listenerToPut.id, listenerToPut.registrationName, listenerToPut.listener);      // 234\n}                                                                                                                      // 235\n                                                                                                                       // 236\n// There are so many media events, it makes sense to just                                                              // 237\n// maintain a list rather than create a `trapBubbledEvent` for each                                                    // 238\nvar mediaEvents = {                                                                                                    // 239\n  topAbort: 'abort',                                                                                                   // 240\n  topCanPlay: 'canplay',                                                                                               // 241\n  topCanPlayThrough: 'canplaythrough',                                                                                 // 242\n  topDurationChange: 'durationchange',                                                                                 // 243\n  topEmptied: 'emptied',                                                                                               // 244\n  topEncrypted: 'encrypted',                                                                                           // 245\n  topEnded: 'ended',                                                                                                   // 246\n  topError: 'error',                                                                                                   // 247\n  topLoadedData: 'loadeddata',                                                                                         // 248\n  topLoadedMetadata: 'loadedmetadata',                                                                                 // 249\n  topLoadStart: 'loadstart',                                                                                           // 250\n  topPause: 'pause',                                                                                                   // 251\n  topPlay: 'play',                                                                                                     // 252\n  topPlaying: 'playing',                                                                                               // 253\n  topProgress: 'progress',                                                                                             // 254\n  topRateChange: 'ratechange',                                                                                         // 255\n  topSeeked: 'seeked',                                                                                                 // 256\n  topSeeking: 'seeking',                                                                                               // 257\n  topStalled: 'stalled',                                                                                               // 258\n  topSuspend: 'suspend',                                                                                               // 259\n  topTimeUpdate: 'timeupdate',                                                                                         // 260\n  topVolumeChange: 'volumechange',                                                                                     // 261\n  topWaiting: 'waiting'                                                                                                // 262\n};                                                                                                                     // 263\n                                                                                                                       // 264\nfunction trapBubbledEventsLocal() {                                                                                    // 265\n  var inst = this;                                                                                                     // 266\n  // If a component renders to null or if another component fatals and causes                                          // 267\n  // the state of the tree to be corrupted, `node` here can be null.                                                   // 268\n  !inst._rootNodeID ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Must be mounted to trap events') : invariant(false) : undefined;\n  var node = ReactMount.getNode(inst._rootNodeID);                                                                     // 270\n  !node ? process.env.NODE_ENV !== 'production' ? invariant(false, 'trapBubbledEvent(...): Requires node to be rendered.') : invariant(false) : undefined;\n                                                                                                                       // 272\n  switch (inst._tag) {                                                                                                 // 273\n    case 'iframe':                                                                                                     // 274\n      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load', node)];\n      break;                                                                                                           // 276\n    case 'video':                                                                                                      // 277\n    case 'audio':                                                                                                      // 278\n                                                                                                                       // 279\n      inst._wrapperState.listeners = [];                                                                               // 280\n      // create listener for each media event                                                                          // 281\n      for (var event in mediaEvents) {                                                                                 // 282\n        if (mediaEvents.hasOwnProperty(event)) {                                                                       // 283\n          inst._wrapperState.listeners.push(ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes[event], mediaEvents[event], node));\n        }                                                                                                              // 285\n      }                                                                                                                // 286\n                                                                                                                       // 287\n      break;                                                                                                           // 288\n    case 'img':                                                                                                        // 289\n      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topError, 'error', node), ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load', node)];\n      break;                                                                                                           // 291\n    case 'form':                                                                                                       // 292\n      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topReset, 'reset', node), ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topSubmit, 'submit', node)];\n      break;                                                                                                           // 294\n  }                                                                                                                    // 295\n}                                                                                                                      // 296\n                                                                                                                       // 297\nfunction mountReadyInputWrapper() {                                                                                    // 298\n  ReactDOMInput.mountReadyWrapper(this);                                                                               // 299\n}                                                                                                                      // 300\n                                                                                                                       // 301\nfunction postUpdateSelectWrapper() {                                                                                   // 302\n  ReactDOMSelect.postUpdateWrapper(this);                                                                              // 303\n}                                                                                                                      // 304\n                                                                                                                       // 305\n// For HTML, certain tags should omit their close tag. We keep a whitelist for                                         // 306\n// those special cased tags.                                                                                           // 307\n                                                                                                                       // 308\nvar omittedCloseTags = {                                                                                               // 309\n  'area': true,                                                                                                        // 310\n  'base': true,                                                                                                        // 311\n  'br': true,                                                                                                          // 312\n  'col': true,                                                                                                         // 313\n  'embed': true,                                                                                                       // 314\n  'hr': true,                                                                                                          // 315\n  'img': true,                                                                                                         // 316\n  'input': true,                                                                                                       // 317\n  'keygen': true,                                                                                                      // 318\n  'link': true,                                                                                                        // 319\n  'meta': true,                                                                                                        // 320\n  'param': true,                                                                                                       // 321\n  'source': true,                                                                                                      // 322\n  'track': true,                                                                                                       // 323\n  'wbr': true                                                                                                          // 324\n};                                                                                                                     // 325\n                                                                                                                       // 326\n// NOTE: menuitem's close tag should be omitted, but that causes problems.                                             // 327\nvar newlineEatingTags = {                                                                                              // 328\n  'listing': true,                                                                                                     // 329\n  'pre': true,                                                                                                         // 330\n  'textarea': true                                                                                                     // 331\n};                                                                                                                     // 332\n                                                                                                                       // 333\n// For HTML, certain tags cannot have children. This has the same purpose as                                           // 334\n// `omittedCloseTags` except that `menuitem` should still have its closing tag.                                        // 335\n                                                                                                                       // 336\nvar voidElementTags = assign({                                                                                         // 337\n  'menuitem': true                                                                                                     // 338\n}, omittedCloseTags);                                                                                                  // 339\n                                                                                                                       // 340\n// We accept any tag to be rendered but since this gets injected into arbitrary                                        // 341\n// HTML, we want to make sure that it's a safe tag.                                                                    // 342\n// http://www.w3.org/TR/REC-xml/#NT-Name                                                                               // 343\n                                                                                                                       // 344\nvar VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\\.\\-\\d]*$/; // Simplified subset                                              // 345\nvar validatedTagCache = {};                                                                                            // 346\nvar hasOwnProperty = ({}).hasOwnProperty;                                                                              // 347\n                                                                                                                       // 348\nfunction validateDangerousTag(tag) {                                                                                   // 349\n  if (!hasOwnProperty.call(validatedTagCache, tag)) {                                                                  // 350\n    !VALID_TAG_REGEX.test(tag) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Invalid tag: %s', tag) : invariant(false) : undefined;\n    validatedTagCache[tag] = true;                                                                                     // 352\n  }                                                                                                                    // 353\n}                                                                                                                      // 354\n                                                                                                                       // 355\nfunction processChildContextDev(context, inst) {                                                                       // 356\n  // Pass down our tag name to child components for validation purposes                                                // 357\n  context = assign({}, context);                                                                                       // 358\n  var info = context[validateDOMNesting.ancestorInfoContextKey];                                                       // 359\n  context[validateDOMNesting.ancestorInfoContextKey] = validateDOMNesting.updatedAncestorInfo(info, inst._tag, inst);  // 360\n  return context;                                                                                                      // 361\n}                                                                                                                      // 362\n                                                                                                                       // 363\nfunction isCustomComponent(tagName, props) {                                                                           // 364\n  return tagName.indexOf('-') >= 0 || props.is != null;                                                                // 365\n}                                                                                                                      // 366\n                                                                                                                       // 367\n/**                                                                                                                    // 368\n * Creates a new React class that is idempotent and capable of containing other                                        // 369\n * React components. It accepts event listeners and DOM properties that are                                            // 370\n * valid according to `DOMProperty`.                                                                                   // 371\n *                                                                                                                     // 372\n *  - Event listeners: `onClick`, `onMouseDown`, etc.                                                                  // 373\n *  - DOM properties: `className`, `name`, `title`, etc.                                                               // 374\n *                                                                                                                     // 375\n * The `style` property functions differently from the DOM API. It accepts an                                          // 376\n * object mapping of style properties to values.                                                                       // 377\n *                                                                                                                     // 378\n * @constructor ReactDOMComponent                                                                                      // 379\n * @extends ReactMultiChild                                                                                            // 380\n */                                                                                                                    // 381\nfunction ReactDOMComponent(tag) {                                                                                      // 382\n  validateDangerousTag(tag);                                                                                           // 383\n  this._tag = tag.toLowerCase();                                                                                       // 384\n  this._renderedChildren = null;                                                                                       // 385\n  this._previousStyle = null;                                                                                          // 386\n  this._previousStyleCopy = null;                                                                                      // 387\n  this._rootNodeID = null;                                                                                             // 388\n  this._wrapperState = null;                                                                                           // 389\n  this._topLevelWrapper = null;                                                                                        // 390\n  this._nodeWithLegacyProperties = null;                                                                               // 391\n  if (process.env.NODE_ENV !== 'production') {                                                                         // 392\n    this._unprocessedContextDev = null;                                                                                // 393\n    this._processedContextDev = null;                                                                                  // 394\n  }                                                                                                                    // 395\n}                                                                                                                      // 396\n                                                                                                                       // 397\nReactDOMComponent.displayName = 'ReactDOMComponent';                                                                   // 398\n                                                                                                                       // 399\nReactDOMComponent.Mixin = {                                                                                            // 400\n                                                                                                                       // 401\n  construct: function (element) {                                                                                      // 402\n    this._currentElement = element;                                                                                    // 403\n  },                                                                                                                   // 404\n                                                                                                                       // 405\n  /**                                                                                                                  // 406\n   * Generates root tag markup then recurses. This method has side effects and                                         // 407\n   * is not idempotent.                                                                                                // 408\n   *                                                                                                                   // 409\n   * @internal                                                                                                         // 410\n   * @param {string} rootID The root DOM ID for this node.                                                             // 411\n   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction                                    // 412\n   * @param {object} context                                                                                           // 413\n   * @return {string} The computed markup.                                                                             // 414\n   */                                                                                                                  // 415\n  mountComponent: function (rootID, transaction, context) {                                                            // 416\n    this._rootNodeID = rootID;                                                                                         // 417\n                                                                                                                       // 418\n    var props = this._currentElement.props;                                                                            // 419\n                                                                                                                       // 420\n    switch (this._tag) {                                                                                               // 421\n      case 'iframe':                                                                                                   // 422\n      case 'img':                                                                                                      // 423\n      case 'form':                                                                                                     // 424\n      case 'video':                                                                                                    // 425\n      case 'audio':                                                                                                    // 426\n        this._wrapperState = {                                                                                         // 427\n          listeners: null                                                                                              // 428\n        };                                                                                                             // 429\n        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);                                        // 430\n        break;                                                                                                         // 431\n      case 'button':                                                                                                   // 432\n        props = ReactDOMButton.getNativeProps(this, props, context);                                                   // 433\n        break;                                                                                                         // 434\n      case 'input':                                                                                                    // 435\n        ReactDOMInput.mountWrapper(this, props, context);                                                              // 436\n        props = ReactDOMInput.getNativeProps(this, props, context);                                                    // 437\n        break;                                                                                                         // 438\n      case 'option':                                                                                                   // 439\n        ReactDOMOption.mountWrapper(this, props, context);                                                             // 440\n        props = ReactDOMOption.getNativeProps(this, props, context);                                                   // 441\n        break;                                                                                                         // 442\n      case 'select':                                                                                                   // 443\n        ReactDOMSelect.mountWrapper(this, props, context);                                                             // 444\n        props = ReactDOMSelect.getNativeProps(this, props, context);                                                   // 445\n        context = ReactDOMSelect.processChildContext(this, props, context);                                            // 446\n        break;                                                                                                         // 447\n      case 'textarea':                                                                                                 // 448\n        ReactDOMTextarea.mountWrapper(this, props, context);                                                           // 449\n        props = ReactDOMTextarea.getNativeProps(this, props, context);                                                 // 450\n        break;                                                                                                         // 451\n    }                                                                                                                  // 452\n                                                                                                                       // 453\n    assertValidProps(this, props);                                                                                     // 454\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 455\n      if (context[validateDOMNesting.ancestorInfoContextKey]) {                                                        // 456\n        validateDOMNesting(this._tag, this, context[validateDOMNesting.ancestorInfoContextKey]);                       // 457\n      }                                                                                                                // 458\n    }                                                                                                                  // 459\n                                                                                                                       // 460\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 461\n      this._unprocessedContextDev = context;                                                                           // 462\n      this._processedContextDev = processChildContextDev(context, this);                                               // 463\n      context = this._processedContextDev;                                                                             // 464\n    }                                                                                                                  // 465\n                                                                                                                       // 466\n    var mountImage;                                                                                                    // 467\n    if (transaction.useCreateElement) {                                                                                // 468\n      var ownerDocument = context[ReactMount.ownerDocumentContextKey];                                                 // 469\n      var el = ownerDocument.createElement(this._currentElement.type);                                                 // 470\n      DOMPropertyOperations.setAttributeForID(el, this._rootNodeID);                                                   // 471\n      // Populate node cache                                                                                           // 472\n      ReactMount.getID(el);                                                                                            // 473\n      this._updateDOMProperties({}, props, transaction, el);                                                           // 474\n      this._createInitialChildren(transaction, props, context, el);                                                    // 475\n      mountImage = el;                                                                                                 // 476\n    } else {                                                                                                           // 477\n      var tagOpen = this._createOpenTagMarkupAndPutListeners(transaction, props);                                      // 478\n      var tagContent = this._createContentMarkup(transaction, props, context);                                         // 479\n      if (!tagContent && omittedCloseTags[this._tag]) {                                                                // 480\n        mountImage = tagOpen + '/>';                                                                                   // 481\n      } else {                                                                                                         // 482\n        mountImage = tagOpen + '>' + tagContent + '</' + this._currentElement.type + '>';                              // 483\n      }                                                                                                                // 484\n    }                                                                                                                  // 485\n                                                                                                                       // 486\n    switch (this._tag) {                                                                                               // 487\n      case 'input':                                                                                                    // 488\n        transaction.getReactMountReady().enqueue(mountReadyInputWrapper, this);                                        // 489\n      // falls through                                                                                                 // 490\n      case 'button':                                                                                                   // 491\n      case 'select':                                                                                                   // 492\n      case 'textarea':                                                                                                 // 493\n        if (props.autoFocus) {                                                                                         // 494\n          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);                            // 495\n        }                                                                                                              // 496\n        break;                                                                                                         // 497\n    }                                                                                                                  // 498\n                                                                                                                       // 499\n    return mountImage;                                                                                                 // 500\n  },                                                                                                                   // 501\n                                                                                                                       // 502\n  /**                                                                                                                  // 503\n   * Creates markup for the open tag and all attributes.                                                               // 504\n   *                                                                                                                   // 505\n   * This method has side effects because events get registered.                                                       // 506\n   *                                                                                                                   // 507\n   * Iterating over object properties is faster than iterating over arrays.                                            // 508\n   * @see http://jsperf.com/obj-vs-arr-iteration                                                                       // 509\n   *                                                                                                                   // 510\n   * @private                                                                                                          // 511\n   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction                                    // 512\n   * @param {object} props                                                                                             // 513\n   * @return {string} Markup of opening tag.                                                                           // 514\n   */                                                                                                                  // 515\n  _createOpenTagMarkupAndPutListeners: function (transaction, props) {                                                 // 516\n    var ret = '<' + this._currentElement.type;                                                                         // 517\n                                                                                                                       // 518\n    for (var propKey in props) {                                                                                       // 519\n      if (!props.hasOwnProperty(propKey)) {                                                                            // 520\n        continue;                                                                                                      // 521\n      }                                                                                                                // 522\n      var propValue = props[propKey];                                                                                  // 523\n      if (propValue == null) {                                                                                         // 524\n        continue;                                                                                                      // 525\n      }                                                                                                                // 526\n      if (registrationNameModules.hasOwnProperty(propKey)) {                                                           // 527\n        if (propValue) {                                                                                               // 528\n          enqueuePutListener(this._rootNodeID, propKey, propValue, transaction);                                       // 529\n        }                                                                                                              // 530\n      } else {                                                                                                         // 531\n        if (propKey === STYLE) {                                                                                       // 532\n          if (propValue) {                                                                                             // 533\n            if (process.env.NODE_ENV !== 'production') {                                                               // 534\n              // See `_updateDOMProperties`. style block                                                               // 535\n              this._previousStyle = propValue;                                                                         // 536\n            }                                                                                                          // 537\n            propValue = this._previousStyleCopy = assign({}, props.style);                                             // 538\n          }                                                                                                            // 539\n          propValue = CSSPropertyOperations.createMarkupForStyles(propValue);                                          // 540\n        }                                                                                                              // 541\n        var markup = null;                                                                                             // 542\n        if (this._tag != null && isCustomComponent(this._tag, props)) {                                                // 543\n          if (propKey !== CHILDREN) {                                                                                  // 544\n            markup = DOMPropertyOperations.createMarkupForCustomAttribute(propKey, propValue);                         // 545\n          }                                                                                                            // 546\n        } else {                                                                                                       // 547\n          markup = DOMPropertyOperations.createMarkupForProperty(propKey, propValue);                                  // 548\n        }                                                                                                              // 549\n        if (markup) {                                                                                                  // 550\n          ret += ' ' + markup;                                                                                         // 551\n        }                                                                                                              // 552\n      }                                                                                                                // 553\n    }                                                                                                                  // 554\n                                                                                                                       // 555\n    // For static pages, no need to put React ID and checksum. Saves lots of                                           // 556\n    // bytes.                                                                                                          // 557\n    if (transaction.renderToStaticMarkup) {                                                                            // 558\n      return ret;                                                                                                      // 559\n    }                                                                                                                  // 560\n                                                                                                                       // 561\n    var markupForID = DOMPropertyOperations.createMarkupForID(this._rootNodeID);                                       // 562\n    return ret + ' ' + markupForID;                                                                                    // 563\n  },                                                                                                                   // 564\n                                                                                                                       // 565\n  /**                                                                                                                  // 566\n   * Creates markup for the content between the tags.                                                                  // 567\n   *                                                                                                                   // 568\n   * @private                                                                                                          // 569\n   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction                                    // 570\n   * @param {object} props                                                                                             // 571\n   * @param {object} context                                                                                           // 572\n   * @return {string} Content markup.                                                                                  // 573\n   */                                                                                                                  // 574\n  _createContentMarkup: function (transaction, props, context) {                                                       // 575\n    var ret = '';                                                                                                      // 576\n                                                                                                                       // 577\n    // Intentional use of != to avoid catching zero/false.                                                             // 578\n    var innerHTML = props.dangerouslySetInnerHTML;                                                                     // 579\n    if (innerHTML != null) {                                                                                           // 580\n      if (innerHTML.__html != null) {                                                                                  // 581\n        ret = innerHTML.__html;                                                                                        // 582\n      }                                                                                                                // 583\n    } else {                                                                                                           // 584\n      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;                                 // 585\n      var childrenToUse = contentToUse != null ? null : props.children;                                                // 586\n      if (contentToUse != null) {                                                                                      // 587\n        // TODO: Validate that text is allowed as a child of this node                                                 // 588\n        ret = escapeTextContentForBrowser(contentToUse);                                                               // 589\n      } else if (childrenToUse != null) {                                                                              // 590\n        var mountImages = this.mountChildren(childrenToUse, transaction, context);                                     // 591\n        ret = mountImages.join('');                                                                                    // 592\n      }                                                                                                                // 593\n    }                                                                                                                  // 594\n    if (newlineEatingTags[this._tag] && ret.charAt(0) === '\\n') {                                                      // 595\n      // text/html ignores the first character in these tags if it's a newline                                         // 596\n      // Prefer to break application/xml over text/html (for now) by adding                                            // 597\n      // a newline specifically to get eaten by the parser. (Alternately for                                           // 598\n      // textareas, replacing \"^\\n\" with \"\\r\\n\" doesn't get eaten, and the first                                       // 599\n      // \\r is normalized out by HTMLTextAreaElement#value.)                                                           // 600\n      // See: <http://www.w3.org/TR/html-polyglot/#newlines-in-textarea-and-pre>                                       // 601\n      // See: <http://www.w3.org/TR/html5/syntax.html#element-restrictions>                                            // 602\n      // See: <http://www.w3.org/TR/html5/syntax.html#newlines>                                                        // 603\n      // See: Parsing of \"textarea\" \"listing\" and \"pre\" elements                                                       // 604\n      //  from <http://www.w3.org/TR/html5/syntax.html#parsing-main-inbody>                                            // 605\n      return '\\n' + ret;                                                                                               // 606\n    } else {                                                                                                           // 607\n      return ret;                                                                                                      // 608\n    }                                                                                                                  // 609\n  },                                                                                                                   // 610\n                                                                                                                       // 611\n  _createInitialChildren: function (transaction, props, context, el) {                                                 // 612\n    // Intentional use of != to avoid catching zero/false.                                                             // 613\n    var innerHTML = props.dangerouslySetInnerHTML;                                                                     // 614\n    if (innerHTML != null) {                                                                                           // 615\n      if (innerHTML.__html != null) {                                                                                  // 616\n        setInnerHTML(el, innerHTML.__html);                                                                            // 617\n      }                                                                                                                // 618\n    } else {                                                                                                           // 619\n      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;                                 // 620\n      var childrenToUse = contentToUse != null ? null : props.children;                                                // 621\n      if (contentToUse != null) {                                                                                      // 622\n        // TODO: Validate that text is allowed as a child of this node                                                 // 623\n        setTextContent(el, contentToUse);                                                                              // 624\n      } else if (childrenToUse != null) {                                                                              // 625\n        var mountImages = this.mountChildren(childrenToUse, transaction, context);                                     // 626\n        for (var i = 0; i < mountImages.length; i++) {                                                                 // 627\n          el.appendChild(mountImages[i]);                                                                              // 628\n        }                                                                                                              // 629\n      }                                                                                                                // 630\n    }                                                                                                                  // 631\n  },                                                                                                                   // 632\n                                                                                                                       // 633\n  /**                                                                                                                  // 634\n   * Receives a next element and updates the component.                                                                // 635\n   *                                                                                                                   // 636\n   * @internal                                                                                                         // 637\n   * @param {ReactElement} nextElement                                                                                 // 638\n   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction                                    // 639\n   * @param {object} context                                                                                           // 640\n   */                                                                                                                  // 641\n  receiveComponent: function (nextElement, transaction, context) {                                                     // 642\n    var prevElement = this._currentElement;                                                                            // 643\n    this._currentElement = nextElement;                                                                                // 644\n    this.updateComponent(transaction, prevElement, nextElement, context);                                              // 645\n  },                                                                                                                   // 646\n                                                                                                                       // 647\n  /**                                                                                                                  // 648\n   * Updates a native DOM component after it has already been allocated and                                            // 649\n   * attached to the DOM. Reconciles the root DOM node, then recurses.                                                 // 650\n   *                                                                                                                   // 651\n   * @param {ReactReconcileTransaction} transaction                                                                    // 652\n   * @param {ReactElement} prevElement                                                                                 // 653\n   * @param {ReactElement} nextElement                                                                                 // 654\n   * @internal                                                                                                         // 655\n   * @overridable                                                                                                      // 656\n   */                                                                                                                  // 657\n  updateComponent: function (transaction, prevElement, nextElement, context) {                                         // 658\n    var lastProps = prevElement.props;                                                                                 // 659\n    var nextProps = this._currentElement.props;                                                                        // 660\n                                                                                                                       // 661\n    switch (this._tag) {                                                                                               // 662\n      case 'button':                                                                                                   // 663\n        lastProps = ReactDOMButton.getNativeProps(this, lastProps);                                                    // 664\n        nextProps = ReactDOMButton.getNativeProps(this, nextProps);                                                    // 665\n        break;                                                                                                         // 666\n      case 'input':                                                                                                    // 667\n        ReactDOMInput.updateWrapper(this);                                                                             // 668\n        lastProps = ReactDOMInput.getNativeProps(this, lastProps);                                                     // 669\n        nextProps = ReactDOMInput.getNativeProps(this, nextProps);                                                     // 670\n        break;                                                                                                         // 671\n      case 'option':                                                                                                   // 672\n        lastProps = ReactDOMOption.getNativeProps(this, lastProps);                                                    // 673\n        nextProps = ReactDOMOption.getNativeProps(this, nextProps);                                                    // 674\n        break;                                                                                                         // 675\n      case 'select':                                                                                                   // 676\n        lastProps = ReactDOMSelect.getNativeProps(this, lastProps);                                                    // 677\n        nextProps = ReactDOMSelect.getNativeProps(this, nextProps);                                                    // 678\n        break;                                                                                                         // 679\n      case 'textarea':                                                                                                 // 680\n        ReactDOMTextarea.updateWrapper(this);                                                                          // 681\n        lastProps = ReactDOMTextarea.getNativeProps(this, lastProps);                                                  // 682\n        nextProps = ReactDOMTextarea.getNativeProps(this, nextProps);                                                  // 683\n        break;                                                                                                         // 684\n    }                                                                                                                  // 685\n                                                                                                                       // 686\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 687\n      // If the context is reference-equal to the old one, pass down the same                                          // 688\n      // processed object so the update bailout in ReactReconciler behaves                                             // 689\n      // correctly (and identically in dev and prod). See #5005.                                                       // 690\n      if (this._unprocessedContextDev !== context) {                                                                   // 691\n        this._unprocessedContextDev = context;                                                                         // 692\n        this._processedContextDev = processChildContextDev(context, this);                                             // 693\n      }                                                                                                                // 694\n      context = this._processedContextDev;                                                                             // 695\n    }                                                                                                                  // 696\n                                                                                                                       // 697\n    assertValidProps(this, nextProps);                                                                                 // 698\n    this._updateDOMProperties(lastProps, nextProps, transaction, null);                                                // 699\n    this._updateDOMChildren(lastProps, nextProps, transaction, context);                                               // 700\n                                                                                                                       // 701\n    if (!canDefineProperty && this._nodeWithLegacyProperties) {                                                        // 702\n      this._nodeWithLegacyProperties.props = nextProps;                                                                // 703\n    }                                                                                                                  // 704\n                                                                                                                       // 705\n    if (this._tag === 'select') {                                                                                      // 706\n      // <select> value update needs to occur after <option> children                                                  // 707\n      // reconciliation                                                                                                // 708\n      transaction.getReactMountReady().enqueue(postUpdateSelectWrapper, this);                                         // 709\n    }                                                                                                                  // 710\n  },                                                                                                                   // 711\n                                                                                                                       // 712\n  /**                                                                                                                  // 713\n   * Reconciles the properties by detecting differences in property values and                                         // 714\n   * updating the DOM as necessary. This function is probably the single most                                          // 715\n   * critical path for performance optimization.                                                                       // 716\n   *                                                                                                                   // 717\n   * TODO: Benchmark whether checking for changed values in memory actually                                            // 718\n   *       improves performance (especially statically positioned elements).                                           // 719\n   * TODO: Benchmark the effects of putting this at the top since 99% of props                                         // 720\n   *       do not change for a given reconciliation.                                                                   // 721\n   * TODO: Benchmark areas that can be improved with caching.                                                          // 722\n   *                                                                                                                   // 723\n   * @private                                                                                                          // 724\n   * @param {object} lastProps                                                                                         // 725\n   * @param {object} nextProps                                                                                         // 726\n   * @param {ReactReconcileTransaction} transaction                                                                    // 727\n   * @param {?DOMElement} node                                                                                         // 728\n   */                                                                                                                  // 729\n  _updateDOMProperties: function (lastProps, nextProps, transaction, node) {                                           // 730\n    var propKey;                                                                                                       // 731\n    var styleName;                                                                                                     // 732\n    var styleUpdates;                                                                                                  // 733\n    for (propKey in lastProps) {                                                                                       // 734\n      if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey)) {                                   // 735\n        continue;                                                                                                      // 736\n      }                                                                                                                // 737\n      if (propKey === STYLE) {                                                                                         // 738\n        var lastStyle = this._previousStyleCopy;                                                                       // 739\n        for (styleName in lastStyle) {                                                                                 // 740\n          if (lastStyle.hasOwnProperty(styleName)) {                                                                   // 741\n            styleUpdates = styleUpdates || {};                                                                         // 742\n            styleUpdates[styleName] = '';                                                                              // 743\n          }                                                                                                            // 744\n        }                                                                                                              // 745\n        this._previousStyleCopy = null;                                                                                // 746\n      } else if (registrationNameModules.hasOwnProperty(propKey)) {                                                    // 747\n        if (lastProps[propKey]) {                                                                                      // 748\n          // Only call deleteListener if there was a listener previously or                                            // 749\n          // else willDeleteListener gets called when there wasn't actually a                                          // 750\n          // listener (e.g., onClick={null})                                                                           // 751\n          deleteListener(this._rootNodeID, propKey);                                                                   // 752\n        }                                                                                                              // 753\n      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {                          // 754\n        if (!node) {                                                                                                   // 755\n          node = ReactMount.getNode(this._rootNodeID);                                                                 // 756\n        }                                                                                                              // 757\n        DOMPropertyOperations.deleteValueForProperty(node, propKey);                                                   // 758\n      }                                                                                                                // 759\n    }                                                                                                                  // 760\n    for (propKey in nextProps) {                                                                                       // 761\n      var nextProp = nextProps[propKey];                                                                               // 762\n      var lastProp = propKey === STYLE ? this._previousStyleCopy : lastProps[propKey];                                 // 763\n      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp) {                                               // 764\n        continue;                                                                                                      // 765\n      }                                                                                                                // 766\n      if (propKey === STYLE) {                                                                                         // 767\n        if (nextProp) {                                                                                                // 768\n          if (process.env.NODE_ENV !== 'production') {                                                                 // 769\n            checkAndWarnForMutatedStyle(this._previousStyleCopy, this._previousStyle, this);                           // 770\n            this._previousStyle = nextProp;                                                                            // 771\n          }                                                                                                            // 772\n          nextProp = this._previousStyleCopy = assign({}, nextProp);                                                   // 773\n        } else {                                                                                                       // 774\n          this._previousStyleCopy = null;                                                                              // 775\n        }                                                                                                              // 776\n        if (lastProp) {                                                                                                // 777\n          // Unset styles on `lastProp` but not on `nextProp`.                                                         // 778\n          for (styleName in lastProp) {                                                                                // 779\n            if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {            // 780\n              styleUpdates = styleUpdates || {};                                                                       // 781\n              styleUpdates[styleName] = '';                                                                            // 782\n            }                                                                                                          // 783\n          }                                                                                                            // 784\n          // Update styles that changed since `lastProp`.                                                              // 785\n          for (styleName in nextProp) {                                                                                // 786\n            if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {                   // 787\n              styleUpdates = styleUpdates || {};                                                                       // 788\n              styleUpdates[styleName] = nextProp[styleName];                                                           // 789\n            }                                                                                                          // 790\n          }                                                                                                            // 791\n        } else {                                                                                                       // 792\n          // Relies on `updateStylesByID` not mutating `styleUpdates`.                                                 // 793\n          styleUpdates = nextProp;                                                                                     // 794\n        }                                                                                                              // 795\n      } else if (registrationNameModules.hasOwnProperty(propKey)) {                                                    // 796\n        if (nextProp) {                                                                                                // 797\n          enqueuePutListener(this._rootNodeID, propKey, nextProp, transaction);                                        // 798\n        } else if (lastProp) {                                                                                         // 799\n          deleteListener(this._rootNodeID, propKey);                                                                   // 800\n        }                                                                                                              // 801\n      } else if (isCustomComponent(this._tag, nextProps)) {                                                            // 802\n        if (!node) {                                                                                                   // 803\n          node = ReactMount.getNode(this._rootNodeID);                                                                 // 804\n        }                                                                                                              // 805\n        if (propKey === CHILDREN) {                                                                                    // 806\n          nextProp = null;                                                                                             // 807\n        }                                                                                                              // 808\n        DOMPropertyOperations.setValueForAttribute(node, propKey, nextProp);                                           // 809\n      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {                          // 810\n        if (!node) {                                                                                                   // 811\n          node = ReactMount.getNode(this._rootNodeID);                                                                 // 812\n        }                                                                                                              // 813\n        // If we're updating to null or undefined, we should remove the property                                       // 814\n        // from the DOM node instead of inadvertantly setting to a string. This                                        // 815\n        // brings us in line with the same behavior we have on initial render.                                         // 816\n        if (nextProp != null) {                                                                                        // 817\n          DOMPropertyOperations.setValueForProperty(node, propKey, nextProp);                                          // 818\n        } else {                                                                                                       // 819\n          DOMPropertyOperations.deleteValueForProperty(node, propKey);                                                 // 820\n        }                                                                                                              // 821\n      }                                                                                                                // 822\n    }                                                                                                                  // 823\n    if (styleUpdates) {                                                                                                // 824\n      if (!node) {                                                                                                     // 825\n        node = ReactMount.getNode(this._rootNodeID);                                                                   // 826\n      }                                                                                                                // 827\n      CSSPropertyOperations.setValueForStyles(node, styleUpdates);                                                     // 828\n    }                                                                                                                  // 829\n  },                                                                                                                   // 830\n                                                                                                                       // 831\n  /**                                                                                                                  // 832\n   * Reconciles the children with the various properties that affect the                                               // 833\n   * children content.                                                                                                 // 834\n   *                                                                                                                   // 835\n   * @param {object} lastProps                                                                                         // 836\n   * @param {object} nextProps                                                                                         // 837\n   * @param {ReactReconcileTransaction} transaction                                                                    // 838\n   * @param {object} context                                                                                           // 839\n   */                                                                                                                  // 840\n  _updateDOMChildren: function (lastProps, nextProps, transaction, context) {                                          // 841\n    var lastContent = CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;                            // 842\n    var nextContent = CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;                            // 843\n                                                                                                                       // 844\n    var lastHtml = lastProps.dangerouslySetInnerHTML && lastProps.dangerouslySetInnerHTML.__html;                      // 845\n    var nextHtml = nextProps.dangerouslySetInnerHTML && nextProps.dangerouslySetInnerHTML.__html;                      // 846\n                                                                                                                       // 847\n    // Note the use of `!=` which checks for null or undefined.                                                        // 848\n    var lastChildren = lastContent != null ? null : lastProps.children;                                                // 849\n    var nextChildren = nextContent != null ? null : nextProps.children;                                                // 850\n                                                                                                                       // 851\n    // If we're switching from children to content/html or vice versa, remove                                          // 852\n    // the old content                                                                                                 // 853\n    var lastHasContentOrHtml = lastContent != null || lastHtml != null;                                                // 854\n    var nextHasContentOrHtml = nextContent != null || nextHtml != null;                                                // 855\n    if (lastChildren != null && nextChildren == null) {                                                                // 856\n      this.updateChildren(null, transaction, context);                                                                 // 857\n    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {                                                        // 858\n      this.updateTextContent('');                                                                                      // 859\n    }                                                                                                                  // 860\n                                                                                                                       // 861\n    if (nextContent != null) {                                                                                         // 862\n      if (lastContent !== nextContent) {                                                                               // 863\n        this.updateTextContent('' + nextContent);                                                                      // 864\n      }                                                                                                                // 865\n    } else if (nextHtml != null) {                                                                                     // 866\n      if (lastHtml !== nextHtml) {                                                                                     // 867\n        this.updateMarkup('' + nextHtml);                                                                              // 868\n      }                                                                                                                // 869\n    } else if (nextChildren != null) {                                                                                 // 870\n      this.updateChildren(nextChildren, transaction, context);                                                         // 871\n    }                                                                                                                  // 872\n  },                                                                                                                   // 873\n                                                                                                                       // 874\n  /**                                                                                                                  // 875\n   * Destroys all event registrations for this instance. Does not remove from                                          // 876\n   * the DOM. That must be done by the parent.                                                                         // 877\n   *                                                                                                                   // 878\n   * @internal                                                                                                         // 879\n   */                                                                                                                  // 880\n  unmountComponent: function () {                                                                                      // 881\n    switch (this._tag) {                                                                                               // 882\n      case 'iframe':                                                                                                   // 883\n      case 'img':                                                                                                      // 884\n      case 'form':                                                                                                     // 885\n      case 'video':                                                                                                    // 886\n      case 'audio':                                                                                                    // 887\n        var listeners = this._wrapperState.listeners;                                                                  // 888\n        if (listeners) {                                                                                               // 889\n          for (var i = 0; i < listeners.length; i++) {                                                                 // 890\n            listeners[i].remove();                                                                                     // 891\n          }                                                                                                            // 892\n        }                                                                                                              // 893\n        break;                                                                                                         // 894\n      case 'input':                                                                                                    // 895\n        ReactDOMInput.unmountWrapper(this);                                                                            // 896\n        break;                                                                                                         // 897\n      case 'html':                                                                                                     // 898\n      case 'head':                                                                                                     // 899\n      case 'body':                                                                                                     // 900\n        /**                                                                                                            // 901\n         * Components like <html> <head> and <body> can't be removed or added                                          // 902\n         * easily in a cross-browser way, however it's valuable to be able to                                          // 903\n         * take advantage of React's reconciliation for styling and <title>                                            // 904\n         * management. So we just document it and throw in dangerous cases.                                            // 905\n         */                                                                                                            // 906\n        !false ? process.env.NODE_ENV !== 'production' ? invariant(false, '<%s> tried to unmount. Because of cross-browser quirks it is ' + 'impossible to unmount some top-level components (eg <html>, ' + '<head>, and <body>) reliably and efficiently. To fix this, have a ' + 'single top-level component that never unmounts render these ' + 'elements.', this._tag) : invariant(false) : undefined;\n        break;                                                                                                         // 908\n    }                                                                                                                  // 909\n                                                                                                                       // 910\n    this.unmountChildren();                                                                                            // 911\n    ReactBrowserEventEmitter.deleteAllListeners(this._rootNodeID);                                                     // 912\n    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);                                       // 913\n    this._rootNodeID = null;                                                                                           // 914\n    this._wrapperState = null;                                                                                         // 915\n    if (this._nodeWithLegacyProperties) {                                                                              // 916\n      var node = this._nodeWithLegacyProperties;                                                                       // 917\n      node._reactInternalComponent = null;                                                                             // 918\n      this._nodeWithLegacyProperties = null;                                                                           // 919\n    }                                                                                                                  // 920\n  },                                                                                                                   // 921\n                                                                                                                       // 922\n  getPublicInstance: function () {                                                                                     // 923\n    if (!this._nodeWithLegacyProperties) {                                                                             // 924\n      var node = ReactMount.getNode(this._rootNodeID);                                                                 // 925\n                                                                                                                       // 926\n      node._reactInternalComponent = this;                                                                             // 927\n      node.getDOMNode = legacyGetDOMNode;                                                                              // 928\n      node.isMounted = legacyIsMounted;                                                                                // 929\n      node.setState = legacySetStateEtc;                                                                               // 930\n      node.replaceState = legacySetStateEtc;                                                                           // 931\n      node.forceUpdate = legacySetStateEtc;                                                                            // 932\n      node.setProps = legacySetProps;                                                                                  // 933\n      node.replaceProps = legacyReplaceProps;                                                                          // 934\n                                                                                                                       // 935\n      if (process.env.NODE_ENV !== 'production') {                                                                     // 936\n        if (canDefineProperty) {                                                                                       // 937\n          Object.defineProperties(node, legacyPropsDescriptor);                                                        // 938\n        } else {                                                                                                       // 939\n          // updateComponent will update this property on subsequent renders                                           // 940\n          node.props = this._currentElement.props;                                                                     // 941\n        }                                                                                                              // 942\n      } else {                                                                                                         // 943\n        // updateComponent will update this property on subsequent renders                                             // 944\n        node.props = this._currentElement.props;                                                                       // 945\n      }                                                                                                                // 946\n                                                                                                                       // 947\n      this._nodeWithLegacyProperties = node;                                                                           // 948\n    }                                                                                                                  // 949\n    return this._nodeWithLegacyProperties;                                                                             // 950\n  }                                                                                                                    // 951\n                                                                                                                       // 952\n};                                                                                                                     // 953\n                                                                                                                       // 954\nReactPerf.measureMethods(ReactDOMComponent, 'ReactDOMComponent', {                                                     // 955\n  mountComponent: 'mountComponent',                                                                                    // 956\n  updateComponent: 'updateComponent'                                                                                   // 957\n});                                                                                                                    // 958\n                                                                                                                       // 959\nassign(ReactDOMComponent.prototype, ReactDOMComponent.Mixin, ReactMultiChild.Mixin);                                   // 960\n                                                                                                                       // 961\nmodule.exports = ReactDOMComponent;                                                                                    // 962\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"AutoFocusUtils.js\":[\"./ReactMount\",\"./findDOMNode\",\"fbjs/lib/focusNode\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/AutoFocusUtils.js                                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule AutoFocusUtils                                                                                      // 9\n * @typechecks static-only                                                                                             // 10\n */                                                                                                                    // 11\n                                                                                                                       // 12\n'use strict';                                                                                                          // 13\n                                                                                                                       // 14\nvar ReactMount = require('./ReactMount');                                                                              // 15\n                                                                                                                       // 16\nvar findDOMNode = require('./findDOMNode');                                                                            // 17\nvar focusNode = require('fbjs/lib/focusNode');                                                                         // 18\n                                                                                                                       // 19\nvar Mixin = {                                                                                                          // 20\n  componentDidMount: function () {                                                                                     // 21\n    if (this.props.autoFocus) {                                                                                        // 22\n      focusNode(findDOMNode(this));                                                                                    // 23\n    }                                                                                                                  // 24\n  }                                                                                                                    // 25\n};                                                                                                                     // 26\n                                                                                                                       // 27\nvar AutoFocusUtils = {                                                                                                 // 28\n  Mixin: Mixin,                                                                                                        // 29\n                                                                                                                       // 30\n  focusDOMComponent: function () {                                                                                     // 31\n    focusNode(ReactMount.getNode(this._rootNodeID));                                                                   // 32\n  }                                                                                                                    // 33\n};                                                                                                                     // 34\n                                                                                                                       // 35\nmodule.exports = AutoFocusUtils;                                                                                       // 36\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"CSSPropertyOperations.js\":[\"./CSSProperty\",\"fbjs/lib/ExecutionEnvironment\",\"./ReactPerf\",\"fbjs/lib/camelizeStyleName\",\"./dangerousStyleValue\",\"fbjs/lib/hyphenateStyleName\",\"fbjs/lib/memoizeStringOnly\",\"fbjs/lib/warning\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/CSSPropertyOperations.js                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule CSSPropertyOperations                                                                               // 9\n * @typechecks static-only                                                                                             // 10\n */                                                                                                                    // 11\n                                                                                                                       // 12\n'use strict';                                                                                                          // 13\n                                                                                                                       // 14\nvar CSSProperty = require('./CSSProperty');                                                                            // 15\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');                                                   // 16\nvar ReactPerf = require('./ReactPerf');                                                                                // 17\n                                                                                                                       // 18\nvar camelizeStyleName = require('fbjs/lib/camelizeStyleName');                                                         // 19\nvar dangerousStyleValue = require('./dangerousStyleValue');                                                            // 20\nvar hyphenateStyleName = require('fbjs/lib/hyphenateStyleName');                                                       // 21\nvar memoizeStringOnly = require('fbjs/lib/memoizeStringOnly');                                                         // 22\nvar warning = require('fbjs/lib/warning');                                                                             // 23\n                                                                                                                       // 24\nvar processStyleName = memoizeStringOnly(function (styleName) {                                                        // 25\n  return hyphenateStyleName(styleName);                                                                                // 26\n});                                                                                                                    // 27\n                                                                                                                       // 28\nvar hasShorthandPropertyBug = false;                                                                                   // 29\nvar styleFloatAccessor = 'cssFloat';                                                                                   // 30\nif (ExecutionEnvironment.canUseDOM) {                                                                                  // 31\n  var tempStyle = document.createElement('div').style;                                                                 // 32\n  try {                                                                                                                // 33\n    // IE8 throws \"Invalid argument.\" if resetting shorthand style properties.                                         // 34\n    tempStyle.font = '';                                                                                               // 35\n  } catch (e) {                                                                                                        // 36\n    hasShorthandPropertyBug = true;                                                                                    // 37\n  }                                                                                                                    // 38\n  // IE8 only supports accessing cssFloat (standard) as styleFloat                                                     // 39\n  if (document.documentElement.style.cssFloat === undefined) {                                                         // 40\n    styleFloatAccessor = 'styleFloat';                                                                                 // 41\n  }                                                                                                                    // 42\n}                                                                                                                      // 43\n                                                                                                                       // 44\nif (process.env.NODE_ENV !== 'production') {                                                                           // 45\n  // 'msTransform' is correct, but the other prefixes should be capitalized                                            // 46\n  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;                                                          // 47\n                                                                                                                       // 48\n  // style values shouldn't contain a semicolon                                                                        // 49\n  var badStyleValueWithSemicolonPattern = /;\\s*$/;                                                                     // 50\n                                                                                                                       // 51\n  var warnedStyleNames = {};                                                                                           // 52\n  var warnedStyleValues = {};                                                                                          // 53\n                                                                                                                       // 54\n  var warnHyphenatedStyleName = function (name) {                                                                      // 55\n    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {                                             // 56\n      return;                                                                                                          // 57\n    }                                                                                                                  // 58\n                                                                                                                       // 59\n    warnedStyleNames[name] = true;                                                                                     // 60\n    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported style property %s. Did you mean %s?', name, camelizeStyleName(name)) : undefined;\n  };                                                                                                                   // 62\n                                                                                                                       // 63\n  var warnBadVendoredStyleName = function (name) {                                                                     // 64\n    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {                                             // 65\n      return;                                                                                                          // 66\n    }                                                                                                                  // 67\n                                                                                                                       // 68\n    warnedStyleNames[name] = true;                                                                                     // 69\n    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?', name, name.charAt(0).toUpperCase() + name.slice(1)) : undefined;\n  };                                                                                                                   // 71\n                                                                                                                       // 72\n  var warnStyleValueWithSemicolon = function (name, value) {                                                           // 73\n    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {                                         // 74\n      return;                                                                                                          // 75\n    }                                                                                                                  // 76\n                                                                                                                       // 77\n    warnedStyleValues[value] = true;                                                                                   // 78\n    process.env.NODE_ENV !== 'production' ? warning(false, 'Style property values shouldn\\'t contain a semicolon. ' + 'Try \"%s: %s\" instead.', name, value.replace(badStyleValueWithSemicolonPattern, '')) : undefined;\n  };                                                                                                                   // 80\n                                                                                                                       // 81\n  /**                                                                                                                  // 82\n   * @param {string} name                                                                                              // 83\n   * @param {*} value                                                                                                  // 84\n   */                                                                                                                  // 85\n  var warnValidStyle = function (name, value) {                                                                        // 86\n    if (name.indexOf('-') > -1) {                                                                                      // 87\n      warnHyphenatedStyleName(name);                                                                                   // 88\n    } else if (badVendoredStyleNamePattern.test(name)) {                                                               // 89\n      warnBadVendoredStyleName(name);                                                                                  // 90\n    } else if (badStyleValueWithSemicolonPattern.test(value)) {                                                        // 91\n      warnStyleValueWithSemicolon(name, value);                                                                        // 92\n    }                                                                                                                  // 93\n  };                                                                                                                   // 94\n}                                                                                                                      // 95\n                                                                                                                       // 96\n/**                                                                                                                    // 97\n * Operations for dealing with CSS properties.                                                                         // 98\n */                                                                                                                    // 99\nvar CSSPropertyOperations = {                                                                                          // 100\n                                                                                                                       // 101\n  /**                                                                                                                  // 102\n   * Serializes a mapping of style properties for use as inline styles:                                                // 103\n   *                                                                                                                   // 104\n   *   > createMarkupForStyles({width: '200px', height: 0})                                                            // 105\n   *   \"width:200px;height:0;\"                                                                                         // 106\n   *                                                                                                                   // 107\n   * Undefined values are ignored so that declarative programming is easier.                                           // 108\n   * The result should be HTML-escaped before insertion into the DOM.                                                  // 109\n   *                                                                                                                   // 110\n   * @param {object} styles                                                                                            // 111\n   * @return {?string}                                                                                                 // 112\n   */                                                                                                                  // 113\n  createMarkupForStyles: function (styles) {                                                                           // 114\n    var serialized = '';                                                                                               // 115\n    for (var styleName in styles) {                                                                                    // 116\n      if (!styles.hasOwnProperty(styleName)) {                                                                         // 117\n        continue;                                                                                                      // 118\n      }                                                                                                                // 119\n      var styleValue = styles[styleName];                                                                              // 120\n      if (process.env.NODE_ENV !== 'production') {                                                                     // 121\n        warnValidStyle(styleName, styleValue);                                                                         // 122\n      }                                                                                                                // 123\n      if (styleValue != null) {                                                                                        // 124\n        serialized += processStyleName(styleName) + ':';                                                               // 125\n        serialized += dangerousStyleValue(styleName, styleValue) + ';';                                                // 126\n      }                                                                                                                // 127\n    }                                                                                                                  // 128\n    return serialized || null;                                                                                         // 129\n  },                                                                                                                   // 130\n                                                                                                                       // 131\n  /**                                                                                                                  // 132\n   * Sets the value for multiple styles on a node.  If a value is specified as                                         // 133\n   * '' (empty string), the corresponding style property will be unset.                                                // 134\n   *                                                                                                                   // 135\n   * @param {DOMElement} node                                                                                          // 136\n   * @param {object} styles                                                                                            // 137\n   */                                                                                                                  // 138\n  setValueForStyles: function (node, styles) {                                                                         // 139\n    var style = node.style;                                                                                            // 140\n    for (var styleName in styles) {                                                                                    // 141\n      if (!styles.hasOwnProperty(styleName)) {                                                                         // 142\n        continue;                                                                                                      // 143\n      }                                                                                                                // 144\n      if (process.env.NODE_ENV !== 'production') {                                                                     // 145\n        warnValidStyle(styleName, styles[styleName]);                                                                  // 146\n      }                                                                                                                // 147\n      var styleValue = dangerousStyleValue(styleName, styles[styleName]);                                              // 148\n      if (styleName === 'float') {                                                                                     // 149\n        styleName = styleFloatAccessor;                                                                                // 150\n      }                                                                                                                // 151\n      if (styleValue) {                                                                                                // 152\n        style[styleName] = styleValue;                                                                                 // 153\n      } else {                                                                                                         // 154\n        var expansion = hasShorthandPropertyBug && CSSProperty.shorthandPropertyExpansions[styleName];                 // 155\n        if (expansion) {                                                                                               // 156\n          // Shorthand property that IE8 won't like unsetting, so unset each                                           // 157\n          // component to placate it                                                                                   // 158\n          for (var individualStyleName in expansion) {                                                                 // 159\n            style[individualStyleName] = '';                                                                           // 160\n          }                                                                                                            // 161\n        } else {                                                                                                       // 162\n          style[styleName] = '';                                                                                       // 163\n        }                                                                                                              // 164\n      }                                                                                                                // 165\n    }                                                                                                                  // 166\n  }                                                                                                                    // 167\n                                                                                                                       // 168\n};                                                                                                                     // 169\n                                                                                                                       // 170\nReactPerf.measureMethods(CSSPropertyOperations, 'CSSPropertyOperations', {                                             // 171\n  setValueForStyles: 'setValueForStyles'                                                                               // 172\n});                                                                                                                    // 173\n                                                                                                                       // 174\nmodule.exports = CSSPropertyOperations;                                                                                // 175\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"CSSProperty.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/CSSProperty.js                                                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule CSSProperty                                                                                         // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\n/**                                                                                                                    // 14\n * CSS properties which accept numbers but are not in units of \"px\".                                                   // 15\n */                                                                                                                    // 16\nvar isUnitlessNumber = {                                                                                               // 17\n  animationIterationCount: true,                                                                                       // 18\n  boxFlex: true,                                                                                                       // 19\n  boxFlexGroup: true,                                                                                                  // 20\n  boxOrdinalGroup: true,                                                                                               // 21\n  columnCount: true,                                                                                                   // 22\n  flex: true,                                                                                                          // 23\n  flexGrow: true,                                                                                                      // 24\n  flexPositive: true,                                                                                                  // 25\n  flexShrink: true,                                                                                                    // 26\n  flexNegative: true,                                                                                                  // 27\n  flexOrder: true,                                                                                                     // 28\n  fontWeight: true,                                                                                                    // 29\n  lineClamp: true,                                                                                                     // 30\n  lineHeight: true,                                                                                                    // 31\n  opacity: true,                                                                                                       // 32\n  order: true,                                                                                                         // 33\n  orphans: true,                                                                                                       // 34\n  tabSize: true,                                                                                                       // 35\n  widows: true,                                                                                                        // 36\n  zIndex: true,                                                                                                        // 37\n  zoom: true,                                                                                                          // 38\n                                                                                                                       // 39\n  // SVG-related properties                                                                                            // 40\n  fillOpacity: true,                                                                                                   // 41\n  stopOpacity: true,                                                                                                   // 42\n  strokeDashoffset: true,                                                                                              // 43\n  strokeOpacity: true,                                                                                                 // 44\n  strokeWidth: true                                                                                                    // 45\n};                                                                                                                     // 46\n                                                                                                                       // 47\n/**                                                                                                                    // 48\n * @param {string} prefix vendor-specific prefix, eg: Webkit                                                           // 49\n * @param {string} key style name, eg: transitionDuration                                                              // 50\n * @return {string} style name prefixed with `prefix`, properly camelCased, eg:                                        // 51\n * WebkitTransitionDuration                                                                                            // 52\n */                                                                                                                    // 53\nfunction prefixKey(prefix, key) {                                                                                      // 54\n  return prefix + key.charAt(0).toUpperCase() + key.substring(1);                                                      // 55\n}                                                                                                                      // 56\n                                                                                                                       // 57\n/**                                                                                                                    // 58\n * Support style names that may come passed in prefixed by adding permutations                                         // 59\n * of vendor prefixes.                                                                                                 // 60\n */                                                                                                                    // 61\nvar prefixes = ['Webkit', 'ms', 'Moz', 'O'];                                                                           // 62\n                                                                                                                       // 63\n// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an                                        // 64\n// infinite loop, because it iterates over the newly added props too.                                                  // 65\nObject.keys(isUnitlessNumber).forEach(function (prop) {                                                                // 66\n  prefixes.forEach(function (prefix) {                                                                                 // 67\n    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];                                                // 68\n  });                                                                                                                  // 69\n});                                                                                                                    // 70\n                                                                                                                       // 71\n/**                                                                                                                    // 72\n * Most style properties can be unset by doing .style[prop] = '' but IE8                                               // 73\n * doesn't like doing that with shorthand properties so for the properties that                                        // 74\n * IE8 breaks on, which are listed here, we instead unset each of the                                                  // 75\n * individual properties. See http://bugs.jquery.com/ticket/12385.                                                     // 76\n * The 4-value 'clock' properties like margin, padding, border-width seem to                                           // 77\n * behave without any problems. Curiously, list-style works too without any                                            // 78\n * special prodding.                                                                                                   // 79\n */                                                                                                                    // 80\nvar shorthandPropertyExpansions = {                                                                                    // 81\n  background: {                                                                                                        // 82\n    backgroundAttachment: true,                                                                                        // 83\n    backgroundColor: true,                                                                                             // 84\n    backgroundImage: true,                                                                                             // 85\n    backgroundPositionX: true,                                                                                         // 86\n    backgroundPositionY: true,                                                                                         // 87\n    backgroundRepeat: true                                                                                             // 88\n  },                                                                                                                   // 89\n  backgroundPosition: {                                                                                                // 90\n    backgroundPositionX: true,                                                                                         // 91\n    backgroundPositionY: true                                                                                          // 92\n  },                                                                                                                   // 93\n  border: {                                                                                                            // 94\n    borderWidth: true,                                                                                                 // 95\n    borderStyle: true,                                                                                                 // 96\n    borderColor: true                                                                                                  // 97\n  },                                                                                                                   // 98\n  borderBottom: {                                                                                                      // 99\n    borderBottomWidth: true,                                                                                           // 100\n    borderBottomStyle: true,                                                                                           // 101\n    borderBottomColor: true                                                                                            // 102\n  },                                                                                                                   // 103\n  borderLeft: {                                                                                                        // 104\n    borderLeftWidth: true,                                                                                             // 105\n    borderLeftStyle: true,                                                                                             // 106\n    borderLeftColor: true                                                                                              // 107\n  },                                                                                                                   // 108\n  borderRight: {                                                                                                       // 109\n    borderRightWidth: true,                                                                                            // 110\n    borderRightStyle: true,                                                                                            // 111\n    borderRightColor: true                                                                                             // 112\n  },                                                                                                                   // 113\n  borderTop: {                                                                                                         // 114\n    borderTopWidth: true,                                                                                              // 115\n    borderTopStyle: true,                                                                                              // 116\n    borderTopColor: true                                                                                               // 117\n  },                                                                                                                   // 118\n  font: {                                                                                                              // 119\n    fontStyle: true,                                                                                                   // 120\n    fontVariant: true,                                                                                                 // 121\n    fontWeight: true,                                                                                                  // 122\n    fontSize: true,                                                                                                    // 123\n    lineHeight: true,                                                                                                  // 124\n    fontFamily: true                                                                                                   // 125\n  },                                                                                                                   // 126\n  outline: {                                                                                                           // 127\n    outlineWidth: true,                                                                                                // 128\n    outlineStyle: true,                                                                                                // 129\n    outlineColor: true                                                                                                 // 130\n  }                                                                                                                    // 131\n};                                                                                                                     // 132\n                                                                                                                       // 133\nvar CSSProperty = {                                                                                                    // 134\n  isUnitlessNumber: isUnitlessNumber,                                                                                  // 135\n  shorthandPropertyExpansions: shorthandPropertyExpansions                                                             // 136\n};                                                                                                                     // 137\n                                                                                                                       // 138\nmodule.exports = CSSProperty;                                                                                          // 139\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"dangerousStyleValue.js\":[\"./CSSProperty\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/dangerousStyleValue.js                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule dangerousStyleValue                                                                                 // 9\n * @typechecks static-only                                                                                             // 10\n */                                                                                                                    // 11\n                                                                                                                       // 12\n'use strict';                                                                                                          // 13\n                                                                                                                       // 14\nvar CSSProperty = require('./CSSProperty');                                                                            // 15\n                                                                                                                       // 16\nvar isUnitlessNumber = CSSProperty.isUnitlessNumber;                                                                   // 17\n                                                                                                                       // 18\n/**                                                                                                                    // 19\n * Convert a value into the proper css writable value. The style name `name`                                           // 20\n * should be logical (no hyphens), as specified                                                                        // 21\n * in `CSSProperty.isUnitlessNumber`.                                                                                  // 22\n *                                                                                                                     // 23\n * @param {string} name CSS property name such as `topMargin`.                                                         // 24\n * @param {*} value CSS property value such as `10px`.                                                                 // 25\n * @return {string} Normalized style value with dimensions applied.                                                    // 26\n */                                                                                                                    // 27\nfunction dangerousStyleValue(name, value) {                                                                            // 28\n  // Note that we've removed escapeTextForBrowser() calls here since the                                               // 29\n  // whole string will be escaped when the attribute is injected into                                                  // 30\n  // the markup. If you provide unsafe user data here they can inject                                                  // 31\n  // arbitrary CSS which may be problematic (I couldn't repro this):                                                   // 32\n  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet                                                    // 33\n  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/                                                // 34\n  // This is not an XSS hole but instead a potential CSS injection issue                                               // 35\n  // which has lead to a greater discussion about how we're going to                                                   // 36\n  // trust URLs moving forward. See #2115901                                                                           // 37\n                                                                                                                       // 38\n  var isEmpty = value == null || typeof value === 'boolean' || value === '';                                           // 39\n  if (isEmpty) {                                                                                                       // 40\n    return '';                                                                                                         // 41\n  }                                                                                                                    // 42\n                                                                                                                       // 43\n  var isNonNumeric = isNaN(value);                                                                                     // 44\n  if (isNonNumeric || value === 0 || isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {                // 45\n    return '' + value; // cast to string                                                                               // 46\n  }                                                                                                                    // 47\n                                                                                                                       // 48\n  if (typeof value === 'string') {                                                                                     // 49\n    value = value.trim();                                                                                              // 50\n  }                                                                                                                    // 51\n  return value + 'px';                                                                                                 // 52\n}                                                                                                                      // 53\n                                                                                                                       // 54\nmodule.exports = dangerousStyleValue;                                                                                  // 55\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactDOMButton.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactDOMButton.js                                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactDOMButton                                                                                      // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar mouseListenerNames = {                                                                                             // 14\n  onClick: true,                                                                                                       // 15\n  onDoubleClick: true,                                                                                                 // 16\n  onMouseDown: true,                                                                                                   // 17\n  onMouseMove: true,                                                                                                   // 18\n  onMouseUp: true,                                                                                                     // 19\n                                                                                                                       // 20\n  onClickCapture: true,                                                                                                // 21\n  onDoubleClickCapture: true,                                                                                          // 22\n  onMouseDownCapture: true,                                                                                            // 23\n  onMouseMoveCapture: true,                                                                                            // 24\n  onMouseUpCapture: true                                                                                               // 25\n};                                                                                                                     // 26\n                                                                                                                       // 27\n/**                                                                                                                    // 28\n * Implements a <button> native component that does not receive mouse events                                           // 29\n * when `disabled` is set.                                                                                             // 30\n */                                                                                                                    // 31\nvar ReactDOMButton = {                                                                                                 // 32\n  getNativeProps: function (inst, props, context) {                                                                    // 33\n    if (!props.disabled) {                                                                                             // 34\n      return props;                                                                                                    // 35\n    }                                                                                                                  // 36\n                                                                                                                       // 37\n    // Copy the props, except the mouse listeners                                                                      // 38\n    var nativeProps = {};                                                                                              // 39\n    for (var key in props) {                                                                                           // 40\n      if (props.hasOwnProperty(key) && !mouseListenerNames[key]) {                                                     // 41\n        nativeProps[key] = props[key];                                                                                 // 42\n      }                                                                                                                // 43\n    }                                                                                                                  // 44\n                                                                                                                       // 45\n    return nativeProps;                                                                                                // 46\n  }                                                                                                                    // 47\n};                                                                                                                     // 48\n                                                                                                                       // 49\nmodule.exports = ReactDOMButton;                                                                                       // 50\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ReactDOMInput.js\":[\"./ReactDOMIDOperations\",\"./LinkedValueUtils\",\"./ReactMount\",\"./ReactUpdates\",\"./Object.assign\",\"fbjs/lib/invariant\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactDOMInput.js                                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactDOMInput                                                                                       // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar ReactDOMIDOperations = require('./ReactDOMIDOperations');                                                          // 14\nvar LinkedValueUtils = require('./LinkedValueUtils');                                                                  // 15\nvar ReactMount = require('./ReactMount');                                                                              // 16\nvar ReactUpdates = require('./ReactUpdates');                                                                          // 17\n                                                                                                                       // 18\nvar assign = require('./Object.assign');                                                                               // 19\nvar invariant = require('fbjs/lib/invariant');                                                                         // 20\n                                                                                                                       // 21\nvar instancesByReactID = {};                                                                                           // 22\n                                                                                                                       // 23\nfunction forceUpdateIfMounted() {                                                                                      // 24\n  if (this._rootNodeID) {                                                                                              // 25\n    // DOM component is still mounted; update                                                                          // 26\n    ReactDOMInput.updateWrapper(this);                                                                                 // 27\n  }                                                                                                                    // 28\n}                                                                                                                      // 29\n                                                                                                                       // 30\n/**                                                                                                                    // 31\n * Implements an <input> native component that allows setting these optional                                           // 32\n * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.                                                    // 33\n *                                                                                                                     // 34\n * If `checked` or `value` are not supplied (or null/undefined), user actions                                          // 35\n * that affect the checked state or value will trigger updates to the element.                                         // 36\n *                                                                                                                     // 37\n * If they are supplied (and not null/undefined), the rendered element will not                                        // 38\n * trigger updates to the element. Instead, the props must change in order for                                         // 39\n * the rendered element to be updated.                                                                                 // 40\n *                                                                                                                     // 41\n * The rendered element will be initialized as unchecked (or `defaultChecked`)                                         // 42\n * with an empty value (or `defaultValue`).                                                                            // 43\n *                                                                                                                     // 44\n * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html                                             // 45\n */                                                                                                                    // 46\nvar ReactDOMInput = {                                                                                                  // 47\n  getNativeProps: function (inst, props, context) {                                                                    // 48\n    var value = LinkedValueUtils.getValue(props);                                                                      // 49\n    var checked = LinkedValueUtils.getChecked(props);                                                                  // 50\n                                                                                                                       // 51\n    var nativeProps = assign({}, props, {                                                                              // 52\n      defaultChecked: undefined,                                                                                       // 53\n      defaultValue: undefined,                                                                                         // 54\n      value: value != null ? value : inst._wrapperState.initialValue,                                                  // 55\n      checked: checked != null ? checked : inst._wrapperState.initialChecked,                                          // 56\n      onChange: inst._wrapperState.onChange                                                                            // 57\n    });                                                                                                                // 58\n                                                                                                                       // 59\n    return nativeProps;                                                                                                // 60\n  },                                                                                                                   // 61\n                                                                                                                       // 62\n  mountWrapper: function (inst, props) {                                                                               // 63\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 64\n      LinkedValueUtils.checkPropTypes('input', props, inst._currentElement._owner);                                    // 65\n    }                                                                                                                  // 66\n                                                                                                                       // 67\n    var defaultValue = props.defaultValue;                                                                             // 68\n    inst._wrapperState = {                                                                                             // 69\n      initialChecked: props.defaultChecked || false,                                                                   // 70\n      initialValue: defaultValue != null ? defaultValue : null,                                                        // 71\n      onChange: _handleChange.bind(inst)                                                                               // 72\n    };                                                                                                                 // 73\n  },                                                                                                                   // 74\n                                                                                                                       // 75\n  mountReadyWrapper: function (inst) {                                                                                 // 76\n    // Can't be in mountWrapper or else server rendering leaks.                                                        // 77\n    instancesByReactID[inst._rootNodeID] = inst;                                                                       // 78\n  },                                                                                                                   // 79\n                                                                                                                       // 80\n  unmountWrapper: function (inst) {                                                                                    // 81\n    delete instancesByReactID[inst._rootNodeID];                                                                       // 82\n  },                                                                                                                   // 83\n                                                                                                                       // 84\n  updateWrapper: function (inst) {                                                                                     // 85\n    var props = inst._currentElement.props;                                                                            // 86\n                                                                                                                       // 87\n    // TODO: Shouldn't this be getChecked(props)?                                                                      // 88\n    var checked = props.checked;                                                                                       // 89\n    if (checked != null) {                                                                                             // 90\n      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'checked', checked || false);                          // 91\n    }                                                                                                                  // 92\n                                                                                                                       // 93\n    var value = LinkedValueUtils.getValue(props);                                                                      // 94\n    if (value != null) {                                                                                               // 95\n      // Cast `value` to a string to ensure the value is set correctly. While                                          // 96\n      // browsers typically do this as necessary, jsdom doesn't.                                                       // 97\n      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'value', '' + value);                                  // 98\n    }                                                                                                                  // 99\n  }                                                                                                                    // 100\n};                                                                                                                     // 101\n                                                                                                                       // 102\nfunction _handleChange(event) {                                                                                        // 103\n  var props = this._currentElement.props;                                                                              // 104\n                                                                                                                       // 105\n  var returnValue = LinkedValueUtils.executeOnChange(props, event);                                                    // 106\n                                                                                                                       // 107\n  // Here we use asap to wait until all updates have propagated, which                                                 // 108\n  // is important when using controlled components within layers:                                                      // 109\n  // https://github.com/facebook/react/issues/1698                                                                     // 110\n  ReactUpdates.asap(forceUpdateIfMounted, this);                                                                       // 111\n                                                                                                                       // 112\n  var name = props.name;                                                                                               // 113\n  if (props.type === 'radio' && name != null) {                                                                        // 114\n    var rootNode = ReactMount.getNode(this._rootNodeID);                                                               // 115\n    var queryRoot = rootNode;                                                                                          // 116\n                                                                                                                       // 117\n    while (queryRoot.parentNode) {                                                                                     // 118\n      queryRoot = queryRoot.parentNode;                                                                                // 119\n    }                                                                                                                  // 120\n                                                                                                                       // 121\n    // If `rootNode.form` was non-null, then we could try `form.elements`,                                             // 122\n    // but that sometimes behaves strangely in IE8. We could also try using                                            // 123\n    // `form.getElementsByName`, but that will only return direct children                                             // 124\n    // and won't include inputs that use the HTML5 `form=` attribute. Since                                            // 125\n    // the input might not even be in a form, let's just use the global                                                // 126\n    // `querySelectorAll` to ensure we don't miss anything.                                                            // 127\n    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type=\"radio\"]');             // 128\n                                                                                                                       // 129\n    for (var i = 0; i < group.length; i++) {                                                                           // 130\n      var otherNode = group[i];                                                                                        // 131\n      if (otherNode === rootNode || otherNode.form !== rootNode.form) {                                                // 132\n        continue;                                                                                                      // 133\n      }                                                                                                                // 134\n      // This will throw if radio buttons rendered by different copies of React                                        // 135\n      // and the same name are rendered into the same form (same as #1939).                                            // 136\n      // That's probably okay; we don't support it just as we don't support                                            // 137\n      // mixing React with non-React.                                                                                  // 138\n      var otherID = ReactMount.getID(otherNode);                                                                       // 139\n      !otherID ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the ' + 'same `name` is not supported.') : invariant(false) : undefined;\n      var otherInstance = instancesByReactID[otherID];                                                                 // 141\n      !otherInstance ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Unknown radio button ID %s.', otherID) : invariant(false) : undefined;\n      // If this is a controlled radio button group, forcing the input that                                            // 143\n      // was previously checked to update will cause it to be come re-checked                                          // 144\n      // as appropriate.                                                                                               // 145\n      ReactUpdates.asap(forceUpdateIfMounted, otherInstance);                                                          // 146\n    }                                                                                                                  // 147\n  }                                                                                                                    // 148\n                                                                                                                       // 149\n  return returnValue;                                                                                                  // 150\n}                                                                                                                      // 151\n                                                                                                                       // 152\nmodule.exports = ReactDOMInput;                                                                                        // 153\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"LinkedValueUtils.js\":[\"./ReactPropTypes\",\"./ReactPropTypeLocations\",\"fbjs/lib/invariant\",\"fbjs/lib/warning\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/LinkedValueUtils.js                                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule LinkedValueUtils                                                                                    // 9\n * @typechecks static-only                                                                                             // 10\n */                                                                                                                    // 11\n                                                                                                                       // 12\n'use strict';                                                                                                          // 13\n                                                                                                                       // 14\nvar ReactPropTypes = require('./ReactPropTypes');                                                                      // 15\nvar ReactPropTypeLocations = require('./ReactPropTypeLocations');                                                      // 16\n                                                                                                                       // 17\nvar invariant = require('fbjs/lib/invariant');                                                                         // 18\nvar warning = require('fbjs/lib/warning');                                                                             // 19\n                                                                                                                       // 20\nvar hasReadOnlyValue = {                                                                                               // 21\n  'button': true,                                                                                                      // 22\n  'checkbox': true,                                                                                                    // 23\n  'image': true,                                                                                                       // 24\n  'hidden': true,                                                                                                      // 25\n  'radio': true,                                                                                                       // 26\n  'reset': true,                                                                                                       // 27\n  'submit': true                                                                                                       // 28\n};                                                                                                                     // 29\n                                                                                                                       // 30\nfunction _assertSingleLink(inputProps) {                                                                               // 31\n  !(inputProps.checkedLink == null || inputProps.valueLink == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a valueLink. If you want to use ' + 'checkedLink, you probably don\\'t want to use valueLink and vice versa.') : invariant(false) : undefined;\n}                                                                                                                      // 33\nfunction _assertValueLink(inputProps) {                                                                                // 34\n  _assertSingleLink(inputProps);                                                                                       // 35\n  !(inputProps.value == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a valueLink and a value or onChange event. If you want ' + 'to use value or onChange, you probably don\\'t want to use valueLink.') : invariant(false) : undefined;\n}                                                                                                                      // 37\n                                                                                                                       // 38\nfunction _assertCheckedLink(inputProps) {                                                                              // 39\n  _assertSingleLink(inputProps);                                                                                       // 40\n  !(inputProps.checked == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a checked property or onChange event. ' + 'If you want to use checked or onChange, you probably don\\'t want to ' + 'use checkedLink') : invariant(false) : undefined;\n}                                                                                                                      // 42\n                                                                                                                       // 43\nvar propTypes = {                                                                                                      // 44\n  value: function (props, propName, componentName) {                                                                   // 45\n    if (!props[propName] || hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled) {      // 46\n      return null;                                                                                                     // 47\n    }                                                                                                                  // 48\n    return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');\n  },                                                                                                                   // 50\n  checked: function (props, propName, componentName) {                                                                 // 51\n    if (!props[propName] || props.onChange || props.readOnly || props.disabled) {                                      // 52\n      return null;                                                                                                     // 53\n    }                                                                                                                  // 54\n    return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');\n  },                                                                                                                   // 56\n  onChange: ReactPropTypes.func                                                                                        // 57\n};                                                                                                                     // 58\n                                                                                                                       // 59\nvar loggedTypeFailures = {};                                                                                           // 60\nfunction getDeclarationErrorAddendum(owner) {                                                                          // 61\n  if (owner) {                                                                                                         // 62\n    var name = owner.getName();                                                                                        // 63\n    if (name) {                                                                                                        // 64\n      return ' Check the render method of `' + name + '`.';                                                            // 65\n    }                                                                                                                  // 66\n  }                                                                                                                    // 67\n  return '';                                                                                                           // 68\n}                                                                                                                      // 69\n                                                                                                                       // 70\n/**                                                                                                                    // 71\n * Provide a linked `value` attribute for controlled forms. You should not use                                         // 72\n * this outside of the ReactDOM controlled form components.                                                            // 73\n */                                                                                                                    // 74\nvar LinkedValueUtils = {                                                                                               // 75\n  checkPropTypes: function (tagName, props, owner) {                                                                   // 76\n    for (var propName in propTypes) {                                                                                  // 77\n      if (propTypes.hasOwnProperty(propName)) {                                                                        // 78\n        var error = propTypes[propName](props, propName, tagName, ReactPropTypeLocations.prop);                        // 79\n      }                                                                                                                // 80\n      if (error instanceof Error && !(error.message in loggedTypeFailures)) {                                          // 81\n        // Only monitor this failure once because there tends to be a lot of the                                       // 82\n        // same error.                                                                                                 // 83\n        loggedTypeFailures[error.message] = true;                                                                      // 84\n                                                                                                                       // 85\n        var addendum = getDeclarationErrorAddendum(owner);                                                             // 86\n        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed form propType: %s%s', error.message, addendum) : undefined;\n      }                                                                                                                // 88\n    }                                                                                                                  // 89\n  },                                                                                                                   // 90\n                                                                                                                       // 91\n  /**                                                                                                                  // 92\n   * @param {object} inputProps Props for form component                                                               // 93\n   * @return {*} current value of the input either from value prop or link.                                            // 94\n   */                                                                                                                  // 95\n  getValue: function (inputProps) {                                                                                    // 96\n    if (inputProps.valueLink) {                                                                                        // 97\n      _assertValueLink(inputProps);                                                                                    // 98\n      return inputProps.valueLink.value;                                                                               // 99\n    }                                                                                                                  // 100\n    return inputProps.value;                                                                                           // 101\n  },                                                                                                                   // 102\n                                                                                                                       // 103\n  /**                                                                                                                  // 104\n   * @param {object} inputProps Props for form component                                                               // 105\n   * @return {*} current checked status of the input either from checked prop                                          // 106\n   *             or link.                                                                                              // 107\n   */                                                                                                                  // 108\n  getChecked: function (inputProps) {                                                                                  // 109\n    if (inputProps.checkedLink) {                                                                                      // 110\n      _assertCheckedLink(inputProps);                                                                                  // 111\n      return inputProps.checkedLink.value;                                                                             // 112\n    }                                                                                                                  // 113\n    return inputProps.checked;                                                                                         // 114\n  },                                                                                                                   // 115\n                                                                                                                       // 116\n  /**                                                                                                                  // 117\n   * @param {object} inputProps Props for form component                                                               // 118\n   * @param {SyntheticEvent} event change event to handle                                                              // 119\n   */                                                                                                                  // 120\n  executeOnChange: function (inputProps, event) {                                                                      // 121\n    if (inputProps.valueLink) {                                                                                        // 122\n      _assertValueLink(inputProps);                                                                                    // 123\n      return inputProps.valueLink.requestChange(event.target.value);                                                   // 124\n    } else if (inputProps.checkedLink) {                                                                               // 125\n      _assertCheckedLink(inputProps);                                                                                  // 126\n      return inputProps.checkedLink.requestChange(event.target.checked);                                               // 127\n    } else if (inputProps.onChange) {                                                                                  // 128\n      return inputProps.onChange.call(undefined, event);                                                               // 129\n    }                                                                                                                  // 130\n  }                                                                                                                    // 131\n};                                                                                                                     // 132\n                                                                                                                       // 133\nmodule.exports = LinkedValueUtils;                                                                                     // 134\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactPropTypes.js\":[\"./ReactElement\",\"./ReactPropTypeLocationNames\",\"fbjs/lib/emptyFunction\",\"./getIteratorFn\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactPropTypes.js                                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactPropTypes                                                                                      // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar ReactElement = require('./ReactElement');                                                                          // 14\nvar ReactPropTypeLocationNames = require('./ReactPropTypeLocationNames');                                              // 15\n                                                                                                                       // 16\nvar emptyFunction = require('fbjs/lib/emptyFunction');                                                                 // 17\nvar getIteratorFn = require('./getIteratorFn');                                                                        // 18\n                                                                                                                       // 19\n/**                                                                                                                    // 20\n * Collection of methods that allow declaration and validation of props that are                                       // 21\n * supplied to React components. Example usage:                                                                        // 22\n *                                                                                                                     // 23\n *   var Props = require('ReactPropTypes');                                                                            // 24\n *   var MyArticle = React.createClass({                                                                               // 25\n *     propTypes: {                                                                                                    // 26\n *       // An optional string prop named \"description\".                                                               // 27\n *       description: Props.string,                                                                                    // 28\n *                                                                                                                     // 29\n *       // A required enum prop named \"category\".                                                                     // 30\n *       category: Props.oneOf(['News','Photos']).isRequired,                                                          // 31\n *                                                                                                                     // 32\n *       // A prop named \"dialog\" that requires an instance of Dialog.                                                 // 33\n *       dialog: Props.instanceOf(Dialog).isRequired                                                                   // 34\n *     },                                                                                                              // 35\n *     render: function() { ... }                                                                                      // 36\n *   });                                                                                                               // 37\n *                                                                                                                     // 38\n * A more formal specification of how these methods are used:                                                          // 39\n *                                                                                                                     // 40\n *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)                                         // 41\n *   decl := ReactPropTypes.{type}(.isRequired)?                                                                       // 42\n *                                                                                                                     // 43\n * Each and every declaration produces a function with the same signature. This                                        // 44\n * allows the creation of custom validation functions. For example:                                                    // 45\n *                                                                                                                     // 46\n *  var MyLink = React.createClass({                                                                                   // 47\n *    propTypes: {                                                                                                     // 48\n *      // An optional string or URI prop named \"href\".                                                                // 49\n *      href: function(props, propName, componentName) {                                                               // 50\n *        var propValue = props[propName];                                                                             // 51\n *        if (propValue != null && typeof propValue !== 'string' &&                                                    // 52\n *            !(propValue instanceof URI)) {                                                                           // 53\n *          return new Error(                                                                                          // 54\n *            'Expected a string or an URI for ' + propName + ' in ' +                                                 // 55\n *            componentName                                                                                            // 56\n *          );                                                                                                         // 57\n *        }                                                                                                            // 58\n *      }                                                                                                              // 59\n *    },                                                                                                               // 60\n *    render: function() {...}                                                                                         // 61\n *  });                                                                                                                // 62\n *                                                                                                                     // 63\n * @internal                                                                                                           // 64\n */                                                                                                                    // 65\n                                                                                                                       // 66\nvar ANONYMOUS = '<<anonymous>>';                                                                                       // 67\n                                                                                                                       // 68\nvar ReactPropTypes = {                                                                                                 // 69\n  array: createPrimitiveTypeChecker('array'),                                                                          // 70\n  bool: createPrimitiveTypeChecker('boolean'),                                                                         // 71\n  func: createPrimitiveTypeChecker('function'),                                                                        // 72\n  number: createPrimitiveTypeChecker('number'),                                                                        // 73\n  object: createPrimitiveTypeChecker('object'),                                                                        // 74\n  string: createPrimitiveTypeChecker('string'),                                                                        // 75\n                                                                                                                       // 76\n  any: createAnyTypeChecker(),                                                                                         // 77\n  arrayOf: createArrayOfTypeChecker,                                                                                   // 78\n  element: createElementTypeChecker(),                                                                                 // 79\n  instanceOf: createInstanceTypeChecker,                                                                               // 80\n  node: createNodeChecker(),                                                                                           // 81\n  objectOf: createObjectOfTypeChecker,                                                                                 // 82\n  oneOf: createEnumTypeChecker,                                                                                        // 83\n  oneOfType: createUnionTypeChecker,                                                                                   // 84\n  shape: createShapeTypeChecker                                                                                        // 85\n};                                                                                                                     // 86\n                                                                                                                       // 87\nfunction createChainableTypeChecker(validate) {                                                                        // 88\n  function checkType(isRequired, props, propName, componentName, location, propFullName) {                             // 89\n    componentName = componentName || ANONYMOUS;                                                                        // 90\n    propFullName = propFullName || propName;                                                                           // 91\n    if (props[propName] == null) {                                                                                     // 92\n      var locationName = ReactPropTypeLocationNames[location];                                                         // 93\n      if (isRequired) {                                                                                                // 94\n        return new Error('Required ' + locationName + ' `' + propFullName + '` was not specified in ' + ('`' + componentName + '`.'));\n      }                                                                                                                // 96\n      return null;                                                                                                     // 97\n    } else {                                                                                                           // 98\n      return validate(props, propName, componentName, location, propFullName);                                         // 99\n    }                                                                                                                  // 100\n  }                                                                                                                    // 101\n                                                                                                                       // 102\n  var chainedCheckType = checkType.bind(null, false);                                                                  // 103\n  chainedCheckType.isRequired = checkType.bind(null, true);                                                            // 104\n                                                                                                                       // 105\n  return chainedCheckType;                                                                                             // 106\n}                                                                                                                      // 107\n                                                                                                                       // 108\nfunction createPrimitiveTypeChecker(expectedType) {                                                                    // 109\n  function validate(props, propName, componentName, location, propFullName) {                                          // 110\n    var propValue = props[propName];                                                                                   // 111\n    var propType = getPropType(propValue);                                                                             // 112\n    if (propType !== expectedType) {                                                                                   // 113\n      var locationName = ReactPropTypeLocationNames[location];                                                         // 114\n      // `propValue` being instance of, say, date/regexp, pass the 'object'                                            // 115\n      // check, but we can offer a more precise error message here rather than                                         // 116\n      // 'of type `object`'.                                                                                           // 117\n      var preciseType = getPreciseType(propValue);                                                                     // 118\n                                                                                                                       // 119\n      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));\n    }                                                                                                                  // 121\n    return null;                                                                                                       // 122\n  }                                                                                                                    // 123\n  return createChainableTypeChecker(validate);                                                                         // 124\n}                                                                                                                      // 125\n                                                                                                                       // 126\nfunction createAnyTypeChecker() {                                                                                      // 127\n  return createChainableTypeChecker(emptyFunction.thatReturns(null));                                                  // 128\n}                                                                                                                      // 129\n                                                                                                                       // 130\nfunction createArrayOfTypeChecker(typeChecker) {                                                                       // 131\n  function validate(props, propName, componentName, location, propFullName) {                                          // 132\n    var propValue = props[propName];                                                                                   // 133\n    if (!Array.isArray(propValue)) {                                                                                   // 134\n      var locationName = ReactPropTypeLocationNames[location];                                                         // 135\n      var propType = getPropType(propValue);                                                                           // 136\n      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));\n    }                                                                                                                  // 138\n    for (var i = 0; i < propValue.length; i++) {                                                                       // 139\n      var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']');                    // 140\n      if (error instanceof Error) {                                                                                    // 141\n        return error;                                                                                                  // 142\n      }                                                                                                                // 143\n    }                                                                                                                  // 144\n    return null;                                                                                                       // 145\n  }                                                                                                                    // 146\n  return createChainableTypeChecker(validate);                                                                         // 147\n}                                                                                                                      // 148\n                                                                                                                       // 149\nfunction createElementTypeChecker() {                                                                                  // 150\n  function validate(props, propName, componentName, location, propFullName) {                                          // 151\n    if (!ReactElement.isValidElement(props[propName])) {                                                               // 152\n      var locationName = ReactPropTypeLocationNames[location];                                                         // 153\n      return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a single ReactElement.'));\n    }                                                                                                                  // 155\n    return null;                                                                                                       // 156\n  }                                                                                                                    // 157\n  return createChainableTypeChecker(validate);                                                                         // 158\n}                                                                                                                      // 159\n                                                                                                                       // 160\nfunction createInstanceTypeChecker(expectedClass) {                                                                    // 161\n  function validate(props, propName, componentName, location, propFullName) {                                          // 162\n    if (!(props[propName] instanceof expectedClass)) {                                                                 // 163\n      var locationName = ReactPropTypeLocationNames[location];                                                         // 164\n      var expectedClassName = expectedClass.name || ANONYMOUS;                                                         // 165\n      var actualClassName = getClassName(props[propName]);                                                             // 166\n      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));\n    }                                                                                                                  // 168\n    return null;                                                                                                       // 169\n  }                                                                                                                    // 170\n  return createChainableTypeChecker(validate);                                                                         // 171\n}                                                                                                                      // 172\n                                                                                                                       // 173\nfunction createEnumTypeChecker(expectedValues) {                                                                       // 174\n  if (!Array.isArray(expectedValues)) {                                                                                // 175\n    return createChainableTypeChecker(function () {                                                                    // 176\n      return new Error('Invalid argument supplied to oneOf, expected an instance of array.');                          // 177\n    });                                                                                                                // 178\n  }                                                                                                                    // 179\n                                                                                                                       // 180\n  function validate(props, propName, componentName, location, propFullName) {                                          // 181\n    var propValue = props[propName];                                                                                   // 182\n    for (var i = 0; i < expectedValues.length; i++) {                                                                  // 183\n      if (propValue === expectedValues[i]) {                                                                           // 184\n        return null;                                                                                                   // 185\n      }                                                                                                                // 186\n    }                                                                                                                  // 187\n                                                                                                                       // 188\n    var locationName = ReactPropTypeLocationNames[location];                                                           // 189\n    var valuesString = JSON.stringify(expectedValues);                                                                 // 190\n    return new Error('Invalid ' + locationName + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));\n  }                                                                                                                    // 192\n  return createChainableTypeChecker(validate);                                                                         // 193\n}                                                                                                                      // 194\n                                                                                                                       // 195\nfunction createObjectOfTypeChecker(typeChecker) {                                                                      // 196\n  function validate(props, propName, componentName, location, propFullName) {                                          // 197\n    var propValue = props[propName];                                                                                   // 198\n    var propType = getPropType(propValue);                                                                             // 199\n    if (propType !== 'object') {                                                                                       // 200\n      var locationName = ReactPropTypeLocationNames[location];                                                         // 201\n      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));\n    }                                                                                                                  // 203\n    for (var key in propValue) {                                                                                       // 204\n      if (propValue.hasOwnProperty(key)) {                                                                             // 205\n        var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key);                    // 206\n        if (error instanceof Error) {                                                                                  // 207\n          return error;                                                                                                // 208\n        }                                                                                                              // 209\n      }                                                                                                                // 210\n    }                                                                                                                  // 211\n    return null;                                                                                                       // 212\n  }                                                                                                                    // 213\n  return createChainableTypeChecker(validate);                                                                         // 214\n}                                                                                                                      // 215\n                                                                                                                       // 216\nfunction createUnionTypeChecker(arrayOfTypeCheckers) {                                                                 // 217\n  if (!Array.isArray(arrayOfTypeCheckers)) {                                                                           // 218\n    return createChainableTypeChecker(function () {                                                                    // 219\n      return new Error('Invalid argument supplied to oneOfType, expected an instance of array.');                      // 220\n    });                                                                                                                // 221\n  }                                                                                                                    // 222\n                                                                                                                       // 223\n  function validate(props, propName, componentName, location, propFullName) {                                          // 224\n    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {                                                             // 225\n      var checker = arrayOfTypeCheckers[i];                                                                            // 226\n      if (checker(props, propName, componentName, location, propFullName) == null) {                                   // 227\n        return null;                                                                                                   // 228\n      }                                                                                                                // 229\n    }                                                                                                                  // 230\n                                                                                                                       // 231\n    var locationName = ReactPropTypeLocationNames[location];                                                           // 232\n    return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));\n  }                                                                                                                    // 234\n  return createChainableTypeChecker(validate);                                                                         // 235\n}                                                                                                                      // 236\n                                                                                                                       // 237\nfunction createNodeChecker() {                                                                                         // 238\n  function validate(props, propName, componentName, location, propFullName) {                                          // 239\n    if (!isNode(props[propName])) {                                                                                    // 240\n      var locationName = ReactPropTypeLocationNames[location];                                                         // 241\n      return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));\n    }                                                                                                                  // 243\n    return null;                                                                                                       // 244\n  }                                                                                                                    // 245\n  return createChainableTypeChecker(validate);                                                                         // 246\n}                                                                                                                      // 247\n                                                                                                                       // 248\nfunction createShapeTypeChecker(shapeTypes) {                                                                          // 249\n  function validate(props, propName, componentName, location, propFullName) {                                          // 250\n    var propValue = props[propName];                                                                                   // 251\n    var propType = getPropType(propValue);                                                                             // 252\n    if (propType !== 'object') {                                                                                       // 253\n      var locationName = ReactPropTypeLocationNames[location];                                                         // 254\n      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));\n    }                                                                                                                  // 256\n    for (var key in shapeTypes) {                                                                                      // 257\n      var checker = shapeTypes[key];                                                                                   // 258\n      if (!checker) {                                                                                                  // 259\n        continue;                                                                                                      // 260\n      }                                                                                                                // 261\n      var error = checker(propValue, key, componentName, location, propFullName + '.' + key);                          // 262\n      if (error) {                                                                                                     // 263\n        return error;                                                                                                  // 264\n      }                                                                                                                // 265\n    }                                                                                                                  // 266\n    return null;                                                                                                       // 267\n  }                                                                                                                    // 268\n  return createChainableTypeChecker(validate);                                                                         // 269\n}                                                                                                                      // 270\n                                                                                                                       // 271\nfunction isNode(propValue) {                                                                                           // 272\n  switch (typeof propValue) {                                                                                          // 273\n    case 'number':                                                                                                     // 274\n    case 'string':                                                                                                     // 275\n    case 'undefined':                                                                                                  // 276\n      return true;                                                                                                     // 277\n    case 'boolean':                                                                                                    // 278\n      return !propValue;                                                                                               // 279\n    case 'object':                                                                                                     // 280\n      if (Array.isArray(propValue)) {                                                                                  // 281\n        return propValue.every(isNode);                                                                                // 282\n      }                                                                                                                // 283\n      if (propValue === null || ReactElement.isValidElement(propValue)) {                                              // 284\n        return true;                                                                                                   // 285\n      }                                                                                                                // 286\n                                                                                                                       // 287\n      var iteratorFn = getIteratorFn(propValue);                                                                       // 288\n      if (iteratorFn) {                                                                                                // 289\n        var iterator = iteratorFn.call(propValue);                                                                     // 290\n        var step;                                                                                                      // 291\n        if (iteratorFn !== propValue.entries) {                                                                        // 292\n          while (!(step = iterator.next()).done) {                                                                     // 293\n            if (!isNode(step.value)) {                                                                                 // 294\n              return false;                                                                                            // 295\n            }                                                                                                          // 296\n          }                                                                                                            // 297\n        } else {                                                                                                       // 298\n          // Iterator will provide entry [k,v] tuples rather than values.                                              // 299\n          while (!(step = iterator.next()).done) {                                                                     // 300\n            var entry = step.value;                                                                                    // 301\n            if (entry) {                                                                                               // 302\n              if (!isNode(entry[1])) {                                                                                 // 303\n                return false;                                                                                          // 304\n              }                                                                                                        // 305\n            }                                                                                                          // 306\n          }                                                                                                            // 307\n        }                                                                                                              // 308\n      } else {                                                                                                         // 309\n        return false;                                                                                                  // 310\n      }                                                                                                                // 311\n                                                                                                                       // 312\n      return true;                                                                                                     // 313\n    default:                                                                                                           // 314\n      return false;                                                                                                    // 315\n  }                                                                                                                    // 316\n}                                                                                                                      // 317\n                                                                                                                       // 318\n// Equivalent of `typeof` but with special handling for array and regexp.                                              // 319\nfunction getPropType(propValue) {                                                                                      // 320\n  var propType = typeof propValue;                                                                                     // 321\n  if (Array.isArray(propValue)) {                                                                                      // 322\n    return 'array';                                                                                                    // 323\n  }                                                                                                                    // 324\n  if (propValue instanceof RegExp) {                                                                                   // 325\n    // Old webkits (at least until Android 4.0) return 'function' rather than                                          // 326\n    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/                                           // 327\n    // passes PropTypes.object.                                                                                        // 328\n    return 'object';                                                                                                   // 329\n  }                                                                                                                    // 330\n  return propType;                                                                                                     // 331\n}                                                                                                                      // 332\n                                                                                                                       // 333\n// This handles more types than `getPropType`. Only used for error messages.                                           // 334\n// See `createPrimitiveTypeChecker`.                                                                                   // 335\nfunction getPreciseType(propValue) {                                                                                   // 336\n  var propType = getPropType(propValue);                                                                               // 337\n  if (propType === 'object') {                                                                                         // 338\n    if (propValue instanceof Date) {                                                                                   // 339\n      return 'date';                                                                                                   // 340\n    } else if (propValue instanceof RegExp) {                                                                          // 341\n      return 'regexp';                                                                                                 // 342\n    }                                                                                                                  // 343\n  }                                                                                                                    // 344\n  return propType;                                                                                                     // 345\n}                                                                                                                      // 346\n                                                                                                                       // 347\n// Returns class name of the object, if any.                                                                           // 348\nfunction getClassName(propValue) {                                                                                     // 349\n  if (!propValue.constructor || !propValue.constructor.name) {                                                         // 350\n    return '<<anonymous>>';                                                                                            // 351\n  }                                                                                                                    // 352\n  return propValue.constructor.name;                                                                                   // 353\n}                                                                                                                      // 354\n                                                                                                                       // 355\nmodule.exports = ReactPropTypes;                                                                                       // 356\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"getIteratorFn.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/getIteratorFn.js                                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule getIteratorFn                                                                                       // 9\n * @typechecks static-only                                                                                             // 10\n */                                                                                                                    // 11\n                                                                                                                       // 12\n'use strict';                                                                                                          // 13\n                                                                                                                       // 14\n/* global Symbol */                                                                                                    // 15\nvar ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;                                                 // 16\nvar FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.                                                        // 17\n                                                                                                                       // 18\n/**                                                                                                                    // 19\n * Returns the iterator method function contained on the iterable object.                                              // 20\n *                                                                                                                     // 21\n * Be sure to invoke the function with the iterable as context:                                                        // 22\n *                                                                                                                     // 23\n *     var iteratorFn = getIteratorFn(myIterable);                                                                     // 24\n *     if (iteratorFn) {                                                                                               // 25\n *       var iterator = iteratorFn.call(myIterable);                                                                   // 26\n *       ...                                                                                                           // 27\n *     }                                                                                                               // 28\n *                                                                                                                     // 29\n * @param {?object} maybeIterable                                                                                      // 30\n * @return {?function}                                                                                                 // 31\n */                                                                                                                    // 32\nfunction getIteratorFn(maybeIterable) {                                                                                // 33\n  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);\n  if (typeof iteratorFn === 'function') {                                                                              // 35\n    return iteratorFn;                                                                                                 // 36\n  }                                                                                                                    // 37\n}                                                                                                                      // 38\n                                                                                                                       // 39\nmodule.exports = getIteratorFn;                                                                                        // 40\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ReactDOMOption.js\":[\"./ReactChildren\",\"./ReactDOMSelect\",\"./Object.assign\",\"fbjs/lib/warning\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactDOMOption.js                                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactDOMOption                                                                                      // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar ReactChildren = require('./ReactChildren');                                                                        // 14\nvar ReactDOMSelect = require('./ReactDOMSelect');                                                                      // 15\n                                                                                                                       // 16\nvar assign = require('./Object.assign');                                                                               // 17\nvar warning = require('fbjs/lib/warning');                                                                             // 18\n                                                                                                                       // 19\nvar valueContextKey = ReactDOMSelect.valueContextKey;                                                                  // 20\n                                                                                                                       // 21\n/**                                                                                                                    // 22\n * Implements an <option> native component that warns when `selected` is set.                                          // 23\n */                                                                                                                    // 24\nvar ReactDOMOption = {                                                                                                 // 25\n  mountWrapper: function (inst, props, context) {                                                                      // 26\n    // TODO (yungsters): Remove support for `selected` in <option>.                                                    // 27\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 28\n      process.env.NODE_ENV !== 'production' ? warning(props.selected == null, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.') : undefined;\n    }                                                                                                                  // 30\n                                                                                                                       // 31\n    // Look up whether this option is 'selected' via context                                                           // 32\n    var selectValue = context[valueContextKey];                                                                        // 33\n                                                                                                                       // 34\n    // If context key is null (e.g., no specified value or after initial mount)                                        // 35\n    // or missing (e.g., for <datalist>), we don't change props.selected                                               // 36\n    var selected = null;                                                                                               // 37\n    if (selectValue != null) {                                                                                         // 38\n      selected = false;                                                                                                // 39\n      if (Array.isArray(selectValue)) {                                                                                // 40\n        // multiple                                                                                                    // 41\n        for (var i = 0; i < selectValue.length; i++) {                                                                 // 42\n          if ('' + selectValue[i] === '' + props.value) {                                                              // 43\n            selected = true;                                                                                           // 44\n            break;                                                                                                     // 45\n          }                                                                                                            // 46\n        }                                                                                                              // 47\n      } else {                                                                                                         // 48\n        selected = '' + selectValue === '' + props.value;                                                              // 49\n      }                                                                                                                // 50\n    }                                                                                                                  // 51\n                                                                                                                       // 52\n    inst._wrapperState = { selected: selected };                                                                       // 53\n  },                                                                                                                   // 54\n                                                                                                                       // 55\n  getNativeProps: function (inst, props, context) {                                                                    // 56\n    var nativeProps = assign({ selected: undefined, children: undefined }, props);                                     // 57\n                                                                                                                       // 58\n    // Read state only from initial mount because <select> updates value                                               // 59\n    // manually; we need the initial state only for server rendering                                                   // 60\n    if (inst._wrapperState.selected != null) {                                                                         // 61\n      nativeProps.selected = inst._wrapperState.selected;                                                              // 62\n    }                                                                                                                  // 63\n                                                                                                                       // 64\n    var content = '';                                                                                                  // 65\n                                                                                                                       // 66\n    // Flatten children and warn if they aren't strings or numbers;                                                    // 67\n    // invalid types are ignored.                                                                                      // 68\n    ReactChildren.forEach(props.children, function (child) {                                                           // 69\n      if (child == null) {                                                                                             // 70\n        return;                                                                                                        // 71\n      }                                                                                                                // 72\n      if (typeof child === 'string' || typeof child === 'number') {                                                    // 73\n        content += child;                                                                                              // 74\n      } else {                                                                                                         // 75\n        process.env.NODE_ENV !== 'production' ? warning(false, 'Only strings and numbers are supported as <option> children.') : undefined;\n      }                                                                                                                // 77\n    });                                                                                                                // 78\n                                                                                                                       // 79\n    if (content) {                                                                                                     // 80\n      nativeProps.children = content;                                                                                  // 81\n    }                                                                                                                  // 82\n                                                                                                                       // 83\n    return nativeProps;                                                                                                // 84\n  }                                                                                                                    // 85\n                                                                                                                       // 86\n};                                                                                                                     // 87\n                                                                                                                       // 88\nmodule.exports = ReactDOMOption;                                                                                       // 89\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactChildren.js\":[\"./PooledClass\",\"./ReactElement\",\"fbjs/lib/emptyFunction\",\"./traverseAllChildren\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactChildren.js                                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactChildren                                                                                       // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar PooledClass = require('./PooledClass');                                                                            // 14\nvar ReactElement = require('./ReactElement');                                                                          // 15\n                                                                                                                       // 16\nvar emptyFunction = require('fbjs/lib/emptyFunction');                                                                 // 17\nvar traverseAllChildren = require('./traverseAllChildren');                                                            // 18\n                                                                                                                       // 19\nvar twoArgumentPooler = PooledClass.twoArgumentPooler;                                                                 // 20\nvar fourArgumentPooler = PooledClass.fourArgumentPooler;                                                               // 21\n                                                                                                                       // 22\nvar userProvidedKeyEscapeRegex = /\\/(?!\\/)/g;                                                                          // 23\nfunction escapeUserProvidedKey(text) {                                                                                 // 24\n  return ('' + text).replace(userProvidedKeyEscapeRegex, '//');                                                        // 25\n}                                                                                                                      // 26\n                                                                                                                       // 27\n/**                                                                                                                    // 28\n * PooledClass representing the bookkeeping associated with performing a child                                         // 29\n * traversal. Allows avoiding binding callbacks.                                                                       // 30\n *                                                                                                                     // 31\n * @constructor ForEachBookKeeping                                                                                     // 32\n * @param {!function} forEachFunction Function to perform traversal with.                                              // 33\n * @param {?*} forEachContext Context to perform context with.                                                         // 34\n */                                                                                                                    // 35\nfunction ForEachBookKeeping(forEachFunction, forEachContext) {                                                         // 36\n  this.func = forEachFunction;                                                                                         // 37\n  this.context = forEachContext;                                                                                       // 38\n  this.count = 0;                                                                                                      // 39\n}                                                                                                                      // 40\nForEachBookKeeping.prototype.destructor = function () {                                                                // 41\n  this.func = null;                                                                                                    // 42\n  this.context = null;                                                                                                 // 43\n  this.count = 0;                                                                                                      // 44\n};                                                                                                                     // 45\nPooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);                                                       // 46\n                                                                                                                       // 47\nfunction forEachSingleChild(bookKeeping, child, name) {                                                                // 48\n  var func = bookKeeping.func;                                                                                         // 49\n  var context = bookKeeping.context;                                                                                   // 50\n                                                                                                                       // 51\n  func.call(context, child, bookKeeping.count++);                                                                      // 52\n}                                                                                                                      // 53\n                                                                                                                       // 54\n/**                                                                                                                    // 55\n * Iterates through children that are typically specified as `props.children`.                                         // 56\n *                                                                                                                     // 57\n * The provided forEachFunc(child, index) will be called for each                                                      // 58\n * leaf child.                                                                                                         // 59\n *                                                                                                                     // 60\n * @param {?*} children Children tree container.                                                                       // 61\n * @param {function(*, int)} forEachFunc                                                                               // 62\n * @param {*} forEachContext Context for forEachContext.                                                               // 63\n */                                                                                                                    // 64\nfunction forEachChildren(children, forEachFunc, forEachContext) {                                                      // 65\n  if (children == null) {                                                                                              // 66\n    return children;                                                                                                   // 67\n  }                                                                                                                    // 68\n  var traverseContext = ForEachBookKeeping.getPooled(forEachFunc, forEachContext);                                     // 69\n  traverseAllChildren(children, forEachSingleChild, traverseContext);                                                  // 70\n  ForEachBookKeeping.release(traverseContext);                                                                         // 71\n}                                                                                                                      // 72\n                                                                                                                       // 73\n/**                                                                                                                    // 74\n * PooledClass representing the bookkeeping associated with performing a child                                         // 75\n * mapping. Allows avoiding binding callbacks.                                                                         // 76\n *                                                                                                                     // 77\n * @constructor MapBookKeeping                                                                                         // 78\n * @param {!*} mapResult Object containing the ordered map of results.                                                 // 79\n * @param {!function} mapFunction Function to perform mapping with.                                                    // 80\n * @param {?*} mapContext Context to perform mapping with.                                                             // 81\n */                                                                                                                    // 82\nfunction MapBookKeeping(mapResult, keyPrefix, mapFunction, mapContext) {                                               // 83\n  this.result = mapResult;                                                                                             // 84\n  this.keyPrefix = keyPrefix;                                                                                          // 85\n  this.func = mapFunction;                                                                                             // 86\n  this.context = mapContext;                                                                                           // 87\n  this.count = 0;                                                                                                      // 88\n}                                                                                                                      // 89\nMapBookKeeping.prototype.destructor = function () {                                                                    // 90\n  this.result = null;                                                                                                  // 91\n  this.keyPrefix = null;                                                                                               // 92\n  this.func = null;                                                                                                    // 93\n  this.context = null;                                                                                                 // 94\n  this.count = 0;                                                                                                      // 95\n};                                                                                                                     // 96\nPooledClass.addPoolingTo(MapBookKeeping, fourArgumentPooler);                                                          // 97\n                                                                                                                       // 98\nfunction mapSingleChildIntoContext(bookKeeping, child, childKey) {                                                     // 99\n  var result = bookKeeping.result;                                                                                     // 100\n  var keyPrefix = bookKeeping.keyPrefix;                                                                               // 101\n  var func = bookKeeping.func;                                                                                         // 102\n  var context = bookKeeping.context;                                                                                   // 103\n                                                                                                                       // 104\n  var mappedChild = func.call(context, child, bookKeeping.count++);                                                    // 105\n  if (Array.isArray(mappedChild)) {                                                                                    // 106\n    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);                    // 107\n  } else if (mappedChild != null) {                                                                                    // 108\n    if (ReactElement.isValidElement(mappedChild)) {                                                                    // 109\n      mappedChild = ReactElement.cloneAndReplaceKey(mappedChild,                                                       // 110\n      // Keep both the (mapped) and old keys if they differ, just as                                                   // 111\n      // traverseAllChildren used to do for objects as children                                                        // 112\n      keyPrefix + (mappedChild !== child ? escapeUserProvidedKey(mappedChild.key || '') + '/' : '') + childKey);       // 113\n    }                                                                                                                  // 114\n    result.push(mappedChild);                                                                                          // 115\n  }                                                                                                                    // 116\n}                                                                                                                      // 117\n                                                                                                                       // 118\nfunction mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {                                        // 119\n  var escapedPrefix = '';                                                                                              // 120\n  if (prefix != null) {                                                                                                // 121\n    escapedPrefix = escapeUserProvidedKey(prefix) + '/';                                                               // 122\n  }                                                                                                                    // 123\n  var traverseContext = MapBookKeeping.getPooled(array, escapedPrefix, func, context);                                 // 124\n  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);                                           // 125\n  MapBookKeeping.release(traverseContext);                                                                             // 126\n}                                                                                                                      // 127\n                                                                                                                       // 128\n/**                                                                                                                    // 129\n * Maps children that are typically specified as `props.children`.                                                     // 130\n *                                                                                                                     // 131\n * The provided mapFunction(child, key, index) will be called for each                                                 // 132\n * leaf child.                                                                                                         // 133\n *                                                                                                                     // 134\n * @param {?*} children Children tree container.                                                                       // 135\n * @param {function(*, int)} func The map function.                                                                    // 136\n * @param {*} context Context for mapFunction.                                                                         // 137\n * @return {object} Object containing the ordered map of results.                                                      // 138\n */                                                                                                                    // 139\nfunction mapChildren(children, func, context) {                                                                        // 140\n  if (children == null) {                                                                                              // 141\n    return children;                                                                                                   // 142\n  }                                                                                                                    // 143\n  var result = [];                                                                                                     // 144\n  mapIntoWithKeyPrefixInternal(children, result, null, func, context);                                                 // 145\n  return result;                                                                                                       // 146\n}                                                                                                                      // 147\n                                                                                                                       // 148\nfunction forEachSingleChildDummy(traverseContext, child, name) {                                                       // 149\n  return null;                                                                                                         // 150\n}                                                                                                                      // 151\n                                                                                                                       // 152\n/**                                                                                                                    // 153\n * Count the number of children that are typically specified as                                                        // 154\n * `props.children`.                                                                                                   // 155\n *                                                                                                                     // 156\n * @param {?*} children Children tree container.                                                                       // 157\n * @return {number} The number of children.                                                                            // 158\n */                                                                                                                    // 159\nfunction countChildren(children, context) {                                                                            // 160\n  return traverseAllChildren(children, forEachSingleChildDummy, null);                                                 // 161\n}                                                                                                                      // 162\n                                                                                                                       // 163\n/**                                                                                                                    // 164\n * Flatten a children object (typically specified as `props.children`) and                                             // 165\n * return an array with appropriately re-keyed children.                                                               // 166\n */                                                                                                                    // 167\nfunction toArray(children) {                                                                                           // 168\n  var result = [];                                                                                                     // 169\n  mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);                             // 170\n  return result;                                                                                                       // 171\n}                                                                                                                      // 172\n                                                                                                                       // 173\nvar ReactChildren = {                                                                                                  // 174\n  forEach: forEachChildren,                                                                                            // 175\n  map: mapChildren,                                                                                                    // 176\n  mapIntoWithKeyPrefixInternal: mapIntoWithKeyPrefixInternal,                                                          // 177\n  count: countChildren,                                                                                                // 178\n  toArray: toArray                                                                                                     // 179\n};                                                                                                                     // 180\n                                                                                                                       // 181\nmodule.exports = ReactChildren;                                                                                        // 182\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"traverseAllChildren.js\":[\"./ReactCurrentOwner\",\"./ReactElement\",\"./ReactInstanceHandles\",\"./getIteratorFn\",\"fbjs/lib/invariant\",\"fbjs/lib/warning\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/traverseAllChildren.js                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule traverseAllChildren                                                                                 // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar ReactCurrentOwner = require('./ReactCurrentOwner');                                                                // 14\nvar ReactElement = require('./ReactElement');                                                                          // 15\nvar ReactInstanceHandles = require('./ReactInstanceHandles');                                                          // 16\n                                                                                                                       // 17\nvar getIteratorFn = require('./getIteratorFn');                                                                        // 18\nvar invariant = require('fbjs/lib/invariant');                                                                         // 19\nvar warning = require('fbjs/lib/warning');                                                                             // 20\n                                                                                                                       // 21\nvar SEPARATOR = ReactInstanceHandles.SEPARATOR;                                                                        // 22\nvar SUBSEPARATOR = ':';                                                                                                // 23\n                                                                                                                       // 24\n/**                                                                                                                    // 25\n * TODO: Test that a single child and an array with one item have the same key                                         // 26\n * pattern.                                                                                                            // 27\n */                                                                                                                    // 28\n                                                                                                                       // 29\nvar userProvidedKeyEscaperLookup = {                                                                                   // 30\n  '=': '=0',                                                                                                           // 31\n  '.': '=1',                                                                                                           // 32\n  ':': '=2'                                                                                                            // 33\n};                                                                                                                     // 34\n                                                                                                                       // 35\nvar userProvidedKeyEscapeRegex = /[=.:]/g;                                                                             // 36\n                                                                                                                       // 37\nvar didWarnAboutMaps = false;                                                                                          // 38\n                                                                                                                       // 39\nfunction userProvidedKeyEscaper(match) {                                                                               // 40\n  return userProvidedKeyEscaperLookup[match];                                                                          // 41\n}                                                                                                                      // 42\n                                                                                                                       // 43\n/**                                                                                                                    // 44\n * Generate a key string that identifies a component within a set.                                                     // 45\n *                                                                                                                     // 46\n * @param {*} component A component that could contain a manual key.                                                   // 47\n * @param {number} index Index that is used if a manual key is not provided.                                           // 48\n * @return {string}                                                                                                    // 49\n */                                                                                                                    // 50\nfunction getComponentKey(component, index) {                                                                           // 51\n  if (component && component.key != null) {                                                                            // 52\n    // Explicit key                                                                                                    // 53\n    return wrapUserProvidedKey(component.key);                                                                         // 54\n  }                                                                                                                    // 55\n  // Implicit key determined by the index in the set                                                                   // 56\n  return index.toString(36);                                                                                           // 57\n}                                                                                                                      // 58\n                                                                                                                       // 59\n/**                                                                                                                    // 60\n * Escape a component key so that it is safe to use in a reactid.                                                      // 61\n *                                                                                                                     // 62\n * @param {*} text Component key to be escaped.                                                                        // 63\n * @return {string} An escaped string.                                                                                 // 64\n */                                                                                                                    // 65\nfunction escapeUserProvidedKey(text) {                                                                                 // 66\n  return ('' + text).replace(userProvidedKeyEscapeRegex, userProvidedKeyEscaper);                                      // 67\n}                                                                                                                      // 68\n                                                                                                                       // 69\n/**                                                                                                                    // 70\n * Wrap a `key` value explicitly provided by the user to distinguish it from                                           // 71\n * implicitly-generated keys generated by a component's index in its parent.                                           // 72\n *                                                                                                                     // 73\n * @param {string} key Value of a user-provided `key` attribute                                                        // 74\n * @return {string}                                                                                                    // 75\n */                                                                                                                    // 76\nfunction wrapUserProvidedKey(key) {                                                                                    // 77\n  return '$' + escapeUserProvidedKey(key);                                                                             // 78\n}                                                                                                                      // 79\n                                                                                                                       // 80\n/**                                                                                                                    // 81\n * @param {?*} children Children tree container.                                                                       // 82\n * @param {!string} nameSoFar Name of the key path so far.                                                             // 83\n * @param {!function} callback Callback to invoke with each child found.                                               // 84\n * @param {?*} traverseContext Used to pass information throughout the traversal                                       // 85\n * process.                                                                                                            // 86\n * @return {!number} The number of children in this subtree.                                                           // 87\n */                                                                                                                    // 88\nfunction traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {                                     // 89\n  var type = typeof children;                                                                                          // 90\n                                                                                                                       // 91\n  if (type === 'undefined' || type === 'boolean') {                                                                    // 92\n    // All of the above are perceived as null.                                                                         // 93\n    children = null;                                                                                                   // 94\n  }                                                                                                                    // 95\n                                                                                                                       // 96\n  if (children === null || type === 'string' || type === 'number' || ReactElement.isValidElement(children)) {          // 97\n    callback(traverseContext, children,                                                                                // 98\n    // If it's the only child, treat the name as if it was wrapped in an array                                         // 99\n    // so that it's consistent if the number of children grows.                                                        // 100\n    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);                                          // 101\n    return 1;                                                                                                          // 102\n  }                                                                                                                    // 103\n                                                                                                                       // 104\n  var child;                                                                                                           // 105\n  var nextName;                                                                                                        // 106\n  var subtreeCount = 0; // Count of children found in the current subtree.                                             // 107\n  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;                                        // 108\n                                                                                                                       // 109\n  if (Array.isArray(children)) {                                                                                       // 110\n    for (var i = 0; i < children.length; i++) {                                                                        // 111\n      child = children[i];                                                                                             // 112\n      nextName = nextNamePrefix + getComponentKey(child, i);                                                           // 113\n      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);                             // 114\n    }                                                                                                                  // 115\n  } else {                                                                                                             // 116\n    var iteratorFn = getIteratorFn(children);                                                                          // 117\n    if (iteratorFn) {                                                                                                  // 118\n      var iterator = iteratorFn.call(children);                                                                        // 119\n      var step;                                                                                                        // 120\n      if (iteratorFn !== children.entries) {                                                                           // 121\n        var ii = 0;                                                                                                    // 122\n        while (!(step = iterator.next()).done) {                                                                       // 123\n          child = step.value;                                                                                          // 124\n          nextName = nextNamePrefix + getComponentKey(child, ii++);                                                    // 125\n          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);                         // 126\n        }                                                                                                              // 127\n      } else {                                                                                                         // 128\n        if (process.env.NODE_ENV !== 'production') {                                                                   // 129\n          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.') : undefined;\n          didWarnAboutMaps = true;                                                                                     // 131\n        }                                                                                                              // 132\n        // Iterator will provide entry [k,v] tuples rather than values.                                                // 133\n        while (!(step = iterator.next()).done) {                                                                       // 134\n          var entry = step.value;                                                                                      // 135\n          if (entry) {                                                                                                 // 136\n            child = entry[1];                                                                                          // 137\n            nextName = nextNamePrefix + wrapUserProvidedKey(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);      // 138\n            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);                       // 139\n          }                                                                                                            // 140\n        }                                                                                                              // 141\n      }                                                                                                                // 142\n    } else if (type === 'object') {                                                                                    // 143\n      var addendum = '';                                                                                               // 144\n      if (process.env.NODE_ENV !== 'production') {                                                                     // 145\n        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';\n        if (children._isReactElement) {                                                                                // 147\n          addendum = ' It looks like you\\'re using an element created by a different ' + 'version of React. Make sure to use only one copy of React.';\n        }                                                                                                              // 149\n        if (ReactCurrentOwner.current) {                                                                               // 150\n          var name = ReactCurrentOwner.current.getName();                                                              // 151\n          if (name) {                                                                                                  // 152\n            addendum += ' Check the render method of `' + name + '`.';                                                 // 153\n          }                                                                                                            // 154\n        }                                                                                                              // 155\n      }                                                                                                                // 156\n      var childrenString = String(children);                                                                           // 157\n      !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : invariant(false) : undefined;\n    }                                                                                                                  // 159\n  }                                                                                                                    // 160\n                                                                                                                       // 161\n  return subtreeCount;                                                                                                 // 162\n}                                                                                                                      // 163\n                                                                                                                       // 164\n/**                                                                                                                    // 165\n * Traverses children that are typically specified as `props.children`, but                                            // 166\n * might also be specified through attributes:                                                                         // 167\n *                                                                                                                     // 168\n * - `traverseAllChildren(this.props.children, ...)`                                                                   // 169\n * - `traverseAllChildren(this.props.leftPanelChildren, ...)`                                                          // 170\n *                                                                                                                     // 171\n * The `traverseContext` is an optional argument that is passed through the                                            // 172\n * entire traversal. It can be used to store accumulations or anything else that                                       // 173\n * the callback might find relevant.                                                                                   // 174\n *                                                                                                                     // 175\n * @param {?*} children Children tree object.                                                                          // 176\n * @param {!function} callback To invoke upon traversing each child.                                                   // 177\n * @param {?*} traverseContext Context for traversal.                                                                  // 178\n * @return {!number} The number of children in this subtree.                                                           // 179\n */                                                                                                                    // 180\nfunction traverseAllChildren(children, callback, traverseContext) {                                                    // 181\n  if (children == null) {                                                                                              // 182\n    return 0;                                                                                                          // 183\n  }                                                                                                                    // 184\n                                                                                                                       // 185\n  return traverseAllChildrenImpl(children, '', callback, traverseContext);                                             // 186\n}                                                                                                                      // 187\n                                                                                                                       // 188\nmodule.exports = traverseAllChildren;                                                                                  // 189\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactDOMSelect.js\":[\"./LinkedValueUtils\",\"./ReactMount\",\"./ReactUpdates\",\"./Object.assign\",\"fbjs/lib/warning\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactDOMSelect.js                                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactDOMSelect                                                                                      // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar LinkedValueUtils = require('./LinkedValueUtils');                                                                  // 14\nvar ReactMount = require('./ReactMount');                                                                              // 15\nvar ReactUpdates = require('./ReactUpdates');                                                                          // 16\n                                                                                                                       // 17\nvar assign = require('./Object.assign');                                                                               // 18\nvar warning = require('fbjs/lib/warning');                                                                             // 19\n                                                                                                                       // 20\nvar valueContextKey = '__ReactDOMSelect_value$' + Math.random().toString(36).slice(2);                                 // 21\n                                                                                                                       // 22\nfunction updateOptionsIfPendingUpdateAndMounted() {                                                                    // 23\n  if (this._rootNodeID && this._wrapperState.pendingUpdate) {                                                          // 24\n    this._wrapperState.pendingUpdate = false;                                                                          // 25\n                                                                                                                       // 26\n    var props = this._currentElement.props;                                                                            // 27\n    var value = LinkedValueUtils.getValue(props);                                                                      // 28\n                                                                                                                       // 29\n    if (value != null) {                                                                                               // 30\n      updateOptions(this, Boolean(props.multiple), value);                                                             // 31\n    }                                                                                                                  // 32\n  }                                                                                                                    // 33\n}                                                                                                                      // 34\n                                                                                                                       // 35\nfunction getDeclarationErrorAddendum(owner) {                                                                          // 36\n  if (owner) {                                                                                                         // 37\n    var name = owner.getName();                                                                                        // 38\n    if (name) {                                                                                                        // 39\n      return ' Check the render method of `' + name + '`.';                                                            // 40\n    }                                                                                                                  // 41\n  }                                                                                                                    // 42\n  return '';                                                                                                           // 43\n}                                                                                                                      // 44\n                                                                                                                       // 45\nvar valuePropNames = ['value', 'defaultValue'];                                                                        // 46\n                                                                                                                       // 47\n/**                                                                                                                    // 48\n * Validation function for `value` and `defaultValue`.                                                                 // 49\n * @private                                                                                                            // 50\n */                                                                                                                    // 51\nfunction checkSelectPropTypes(inst, props) {                                                                           // 52\n  var owner = inst._currentElement._owner;                                                                             // 53\n  LinkedValueUtils.checkPropTypes('select', props, owner);                                                             // 54\n                                                                                                                       // 55\n  for (var i = 0; i < valuePropNames.length; i++) {                                                                    // 56\n    var propName = valuePropNames[i];                                                                                  // 57\n    if (props[propName] == null) {                                                                                     // 58\n      continue;                                                                                                        // 59\n    }                                                                                                                  // 60\n    if (props.multiple) {                                                                                              // 61\n      process.env.NODE_ENV !== 'production' ? warning(Array.isArray(props[propName]), 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum(owner)) : undefined;\n    } else {                                                                                                           // 63\n      process.env.NODE_ENV !== 'production' ? warning(!Array.isArray(props[propName]), 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum(owner)) : undefined;\n    }                                                                                                                  // 65\n  }                                                                                                                    // 66\n}                                                                                                                      // 67\n                                                                                                                       // 68\n/**                                                                                                                    // 69\n * @param {ReactDOMComponent} inst                                                                                     // 70\n * @param {boolean} multiple                                                                                           // 71\n * @param {*} propValue A stringable (with `multiple`, a list of stringables).                                         // 72\n * @private                                                                                                            // 73\n */                                                                                                                    // 74\nfunction updateOptions(inst, multiple, propValue) {                                                                    // 75\n  var selectedValue, i;                                                                                                // 76\n  var options = ReactMount.getNode(inst._rootNodeID).options;                                                          // 77\n                                                                                                                       // 78\n  if (multiple) {                                                                                                      // 79\n    selectedValue = {};                                                                                                // 80\n    for (i = 0; i < propValue.length; i++) {                                                                           // 81\n      selectedValue['' + propValue[i]] = true;                                                                         // 82\n    }                                                                                                                  // 83\n    for (i = 0; i < options.length; i++) {                                                                             // 84\n      var selected = selectedValue.hasOwnProperty(options[i].value);                                                   // 85\n      if (options[i].selected !== selected) {                                                                          // 86\n        options[i].selected = selected;                                                                                // 87\n      }                                                                                                                // 88\n    }                                                                                                                  // 89\n  } else {                                                                                                             // 90\n    // Do not set `select.value` as exact behavior isn't consistent across all                                         // 91\n    // browsers for all cases.                                                                                         // 92\n    selectedValue = '' + propValue;                                                                                    // 93\n    for (i = 0; i < options.length; i++) {                                                                             // 94\n      if (options[i].value === selectedValue) {                                                                        // 95\n        options[i].selected = true;                                                                                    // 96\n        return;                                                                                                        // 97\n      }                                                                                                                // 98\n    }                                                                                                                  // 99\n    if (options.length) {                                                                                              // 100\n      options[0].selected = true;                                                                                      // 101\n    }                                                                                                                  // 102\n  }                                                                                                                    // 103\n}                                                                                                                      // 104\n                                                                                                                       // 105\n/**                                                                                                                    // 106\n * Implements a <select> native component that allows optionally setting the                                           // 107\n * props `value` and `defaultValue`. If `multiple` is false, the prop must be a                                        // 108\n * stringable. If `multiple` is true, the prop must be an array of stringables.                                        // 109\n *                                                                                                                     // 110\n * If `value` is not supplied (or null/undefined), user actions that change the                                        // 111\n * selected option will trigger updates to the rendered options.                                                       // 112\n *                                                                                                                     // 113\n * If it is supplied (and not null/undefined), the rendered options will not                                           // 114\n * update in response to user actions. Instead, the `value` prop must change in                                        // 115\n * order for the rendered options to update.                                                                           // 116\n *                                                                                                                     // 117\n * If `defaultValue` is provided, any options with the supplied values will be                                         // 118\n * selected.                                                                                                           // 119\n */                                                                                                                    // 120\nvar ReactDOMSelect = {                                                                                                 // 121\n  valueContextKey: valueContextKey,                                                                                    // 122\n                                                                                                                       // 123\n  getNativeProps: function (inst, props, context) {                                                                    // 124\n    return assign({}, props, {                                                                                         // 125\n      onChange: inst._wrapperState.onChange,                                                                           // 126\n      value: undefined                                                                                                 // 127\n    });                                                                                                                // 128\n  },                                                                                                                   // 129\n                                                                                                                       // 130\n  mountWrapper: function (inst, props) {                                                                               // 131\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 132\n      checkSelectPropTypes(inst, props);                                                                               // 133\n    }                                                                                                                  // 134\n                                                                                                                       // 135\n    var value = LinkedValueUtils.getValue(props);                                                                      // 136\n    inst._wrapperState = {                                                                                             // 137\n      pendingUpdate: false,                                                                                            // 138\n      initialValue: value != null ? value : props.defaultValue,                                                        // 139\n      onChange: _handleChange.bind(inst),                                                                              // 140\n      wasMultiple: Boolean(props.multiple)                                                                             // 141\n    };                                                                                                                 // 142\n  },                                                                                                                   // 143\n                                                                                                                       // 144\n  processChildContext: function (inst, props, context) {                                                               // 145\n    // Pass down initial value so initial generated markup has correct                                                 // 146\n    // `selected` attributes                                                                                           // 147\n    var childContext = assign({}, context);                                                                            // 148\n    childContext[valueContextKey] = inst._wrapperState.initialValue;                                                   // 149\n    return childContext;                                                                                               // 150\n  },                                                                                                                   // 151\n                                                                                                                       // 152\n  postUpdateWrapper: function (inst) {                                                                                 // 153\n    var props = inst._currentElement.props;                                                                            // 154\n                                                                                                                       // 155\n    // After the initial mount, we control selected-ness manually so don't pass                                        // 156\n    // the context value down                                                                                          // 157\n    inst._wrapperState.initialValue = undefined;                                                                       // 158\n                                                                                                                       // 159\n    var wasMultiple = inst._wrapperState.wasMultiple;                                                                  // 160\n    inst._wrapperState.wasMultiple = Boolean(props.multiple);                                                          // 161\n                                                                                                                       // 162\n    var value = LinkedValueUtils.getValue(props);                                                                      // 163\n    if (value != null) {                                                                                               // 164\n      inst._wrapperState.pendingUpdate = false;                                                                        // 165\n      updateOptions(inst, Boolean(props.multiple), value);                                                             // 166\n    } else if (wasMultiple !== Boolean(props.multiple)) {                                                              // 167\n      // For simplicity, reapply `defaultValue` if `multiple` is toggled.                                              // 168\n      if (props.defaultValue != null) {                                                                                // 169\n        updateOptions(inst, Boolean(props.multiple), props.defaultValue);                                              // 170\n      } else {                                                                                                         // 171\n        // Revert the select back to its default unselected state.                                                     // 172\n        updateOptions(inst, Boolean(props.multiple), props.multiple ? [] : '');                                        // 173\n      }                                                                                                                // 174\n    }                                                                                                                  // 175\n  }                                                                                                                    // 176\n};                                                                                                                     // 177\n                                                                                                                       // 178\nfunction _handleChange(event) {                                                                                        // 179\n  var props = this._currentElement.props;                                                                              // 180\n  var returnValue = LinkedValueUtils.executeOnChange(props, event);                                                    // 181\n                                                                                                                       // 182\n  this._wrapperState.pendingUpdate = true;                                                                             // 183\n  ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);                                                     // 184\n  return returnValue;                                                                                                  // 185\n}                                                                                                                      // 186\n                                                                                                                       // 187\nmodule.exports = ReactDOMSelect;                                                                                       // 188\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactDOMTextarea.js\":[\"./LinkedValueUtils\",\"./ReactDOMIDOperations\",\"./ReactUpdates\",\"./Object.assign\",\"fbjs/lib/invariant\",\"fbjs/lib/warning\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactDOMTextarea.js                                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactDOMTextarea                                                                                    // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar LinkedValueUtils = require('./LinkedValueUtils');                                                                  // 14\nvar ReactDOMIDOperations = require('./ReactDOMIDOperations');                                                          // 15\nvar ReactUpdates = require('./ReactUpdates');                                                                          // 16\n                                                                                                                       // 17\nvar assign = require('./Object.assign');                                                                               // 18\nvar invariant = require('fbjs/lib/invariant');                                                                         // 19\nvar warning = require('fbjs/lib/warning');                                                                             // 20\n                                                                                                                       // 21\nfunction forceUpdateIfMounted() {                                                                                      // 22\n  if (this._rootNodeID) {                                                                                              // 23\n    // DOM component is still mounted; update                                                                          // 24\n    ReactDOMTextarea.updateWrapper(this);                                                                              // 25\n  }                                                                                                                    // 26\n}                                                                                                                      // 27\n                                                                                                                       // 28\n/**                                                                                                                    // 29\n * Implements a <textarea> native component that allows setting `value`, and                                           // 30\n * `defaultValue`. This differs from the traditional DOM API because value is                                          // 31\n * usually set as PCDATA children.                                                                                     // 32\n *                                                                                                                     // 33\n * If `value` is not supplied (or null/undefined), user actions that affect the                                        // 34\n * value will trigger updates to the element.                                                                          // 35\n *                                                                                                                     // 36\n * If `value` is supplied (and not null/undefined), the rendered element will                                          // 37\n * not trigger updates to the element. Instead, the `value` prop must change in                                        // 38\n * order for the rendered element to be updated.                                                                       // 39\n *                                                                                                                     // 40\n * The rendered element will be initialized with an empty value, the prop                                              // 41\n * `defaultValue` if specified, or the children content (deprecated).                                                  // 42\n */                                                                                                                    // 43\nvar ReactDOMTextarea = {                                                                                               // 44\n  getNativeProps: function (inst, props, context) {                                                                    // 45\n    !(props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : invariant(false) : undefined;\n                                                                                                                       // 47\n    // Always set children to the same thing. In IE9, the selection range will                                         // 48\n    // get reset if `textContent` is mutated.                                                                          // 49\n    var nativeProps = assign({}, props, {                                                                              // 50\n      defaultValue: undefined,                                                                                         // 51\n      value: undefined,                                                                                                // 52\n      children: inst._wrapperState.initialValue,                                                                       // 53\n      onChange: inst._wrapperState.onChange                                                                            // 54\n    });                                                                                                                // 55\n                                                                                                                       // 56\n    return nativeProps;                                                                                                // 57\n  },                                                                                                                   // 58\n                                                                                                                       // 59\n  mountWrapper: function (inst, props) {                                                                               // 60\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 61\n      LinkedValueUtils.checkPropTypes('textarea', props, inst._currentElement._owner);                                 // 62\n    }                                                                                                                  // 63\n                                                                                                                       // 64\n    var defaultValue = props.defaultValue;                                                                             // 65\n    // TODO (yungsters): Remove support for children content in <textarea>.                                            // 66\n    var children = props.children;                                                                                     // 67\n    if (children != null) {                                                                                            // 68\n      if (process.env.NODE_ENV !== 'production') {                                                                     // 69\n        process.env.NODE_ENV !== 'production' ? warning(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.') : undefined;\n      }                                                                                                                // 71\n      !(defaultValue == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : invariant(false) : undefined;\n      if (Array.isArray(children)) {                                                                                   // 73\n        !(children.length <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, '<textarea> can only have at most one child.') : invariant(false) : undefined;\n        children = children[0];                                                                                        // 75\n      }                                                                                                                // 76\n                                                                                                                       // 77\n      defaultValue = '' + children;                                                                                    // 78\n    }                                                                                                                  // 79\n    if (defaultValue == null) {                                                                                        // 80\n      defaultValue = '';                                                                                               // 81\n    }                                                                                                                  // 82\n    var value = LinkedValueUtils.getValue(props);                                                                      // 83\n                                                                                                                       // 84\n    inst._wrapperState = {                                                                                             // 85\n      // We save the initial value so that `ReactDOMComponent` doesn't update                                          // 86\n      // `textContent` (unnecessary since we update value).                                                            // 87\n      // The initial value can be a boolean or object so that's why it's                                               // 88\n      // forced to be a string.                                                                                        // 89\n      initialValue: '' + (value != null ? value : defaultValue),                                                       // 90\n      onChange: _handleChange.bind(inst)                                                                               // 91\n    };                                                                                                                 // 92\n  },                                                                                                                   // 93\n                                                                                                                       // 94\n  updateWrapper: function (inst) {                                                                                     // 95\n    var props = inst._currentElement.props;                                                                            // 96\n    var value = LinkedValueUtils.getValue(props);                                                                      // 97\n    if (value != null) {                                                                                               // 98\n      // Cast `value` to a string to ensure the value is set correctly. While                                          // 99\n      // browsers typically do this as necessary, jsdom doesn't.                                                       // 100\n      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'value', '' + value);                                  // 101\n    }                                                                                                                  // 102\n  }                                                                                                                    // 103\n};                                                                                                                     // 104\n                                                                                                                       // 105\nfunction _handleChange(event) {                                                                                        // 106\n  var props = this._currentElement.props;                                                                              // 107\n  var returnValue = LinkedValueUtils.executeOnChange(props, event);                                                    // 108\n  ReactUpdates.asap(forceUpdateIfMounted, this);                                                                       // 109\n  return returnValue;                                                                                                  // 110\n}                                                                                                                      // 111\n                                                                                                                       // 112\nmodule.exports = ReactDOMTextarea;                                                                                     // 113\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactMultiChild.js\":[\"./ReactComponentEnvironment\",\"./ReactMultiChildUpdateTypes\",\"./ReactCurrentOwner\",\"./ReactReconciler\",\"./ReactChildReconciler\",\"./flattenChildren\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactMultiChild.js                                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactMultiChild                                                                                     // 9\n * @typechecks static-only                                                                                             // 10\n */                                                                                                                    // 11\n                                                                                                                       // 12\n'use strict';                                                                                                          // 13\n                                                                                                                       // 14\nvar ReactComponentEnvironment = require('./ReactComponentEnvironment');                                                // 15\nvar ReactMultiChildUpdateTypes = require('./ReactMultiChildUpdateTypes');                                              // 16\n                                                                                                                       // 17\nvar ReactCurrentOwner = require('./ReactCurrentOwner');                                                                // 18\nvar ReactReconciler = require('./ReactReconciler');                                                                    // 19\nvar ReactChildReconciler = require('./ReactChildReconciler');                                                          // 20\n                                                                                                                       // 21\nvar flattenChildren = require('./flattenChildren');                                                                    // 22\n                                                                                                                       // 23\n/**                                                                                                                    // 24\n * Updating children of a component may trigger recursive updates. The depth is                                        // 25\n * used to batch recursive updates to render markup more efficiently.                                                  // 26\n *                                                                                                                     // 27\n * @type {number}                                                                                                      // 28\n * @private                                                                                                            // 29\n */                                                                                                                    // 30\nvar updateDepth = 0;                                                                                                   // 31\n                                                                                                                       // 32\n/**                                                                                                                    // 33\n * Queue of update configuration objects.                                                                              // 34\n *                                                                                                                     // 35\n * Each object has a `type` property that is in `ReactMultiChildUpdateTypes`.                                          // 36\n *                                                                                                                     // 37\n * @type {array<object>}                                                                                               // 38\n * @private                                                                                                            // 39\n */                                                                                                                    // 40\nvar updateQueue = [];                                                                                                  // 41\n                                                                                                                       // 42\n/**                                                                                                                    // 43\n * Queue of markup to be rendered.                                                                                     // 44\n *                                                                                                                     // 45\n * @type {array<string>}                                                                                               // 46\n * @private                                                                                                            // 47\n */                                                                                                                    // 48\nvar markupQueue = [];                                                                                                  // 49\n                                                                                                                       // 50\n/**                                                                                                                    // 51\n * Enqueues markup to be rendered and inserted at a supplied index.                                                    // 52\n *                                                                                                                     // 53\n * @param {string} parentID ID of the parent component.                                                                // 54\n * @param {string} markup Markup that renders into an element.                                                         // 55\n * @param {number} toIndex Destination index.                                                                          // 56\n * @private                                                                                                            // 57\n */                                                                                                                    // 58\nfunction enqueueInsertMarkup(parentID, markup, toIndex) {                                                              // 59\n  // NOTE: Null values reduce hidden classes.                                                                          // 60\n  updateQueue.push({                                                                                                   // 61\n    parentID: parentID,                                                                                                // 62\n    parentNode: null,                                                                                                  // 63\n    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,                                                                    // 64\n    markupIndex: markupQueue.push(markup) - 1,                                                                         // 65\n    content: null,                                                                                                     // 66\n    fromIndex: null,                                                                                                   // 67\n    toIndex: toIndex                                                                                                   // 68\n  });                                                                                                                  // 69\n}                                                                                                                      // 70\n                                                                                                                       // 71\n/**                                                                                                                    // 72\n * Enqueues moving an existing element to another index.                                                               // 73\n *                                                                                                                     // 74\n * @param {string} parentID ID of the parent component.                                                                // 75\n * @param {number} fromIndex Source index of the existing element.                                                     // 76\n * @param {number} toIndex Destination index of the element.                                                           // 77\n * @private                                                                                                            // 78\n */                                                                                                                    // 79\nfunction enqueueMove(parentID, fromIndex, toIndex) {                                                                   // 80\n  // NOTE: Null values reduce hidden classes.                                                                          // 81\n  updateQueue.push({                                                                                                   // 82\n    parentID: parentID,                                                                                                // 83\n    parentNode: null,                                                                                                  // 84\n    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,                                                                    // 85\n    markupIndex: null,                                                                                                 // 86\n    content: null,                                                                                                     // 87\n    fromIndex: fromIndex,                                                                                              // 88\n    toIndex: toIndex                                                                                                   // 89\n  });                                                                                                                  // 90\n}                                                                                                                      // 91\n                                                                                                                       // 92\n/**                                                                                                                    // 93\n * Enqueues removing an element at an index.                                                                           // 94\n *                                                                                                                     // 95\n * @param {string} parentID ID of the parent component.                                                                // 96\n * @param {number} fromIndex Index of the element to remove.                                                           // 97\n * @private                                                                                                            // 98\n */                                                                                                                    // 99\nfunction enqueueRemove(parentID, fromIndex) {                                                                          // 100\n  // NOTE: Null values reduce hidden classes.                                                                          // 101\n  updateQueue.push({                                                                                                   // 102\n    parentID: parentID,                                                                                                // 103\n    parentNode: null,                                                                                                  // 104\n    type: ReactMultiChildUpdateTypes.REMOVE_NODE,                                                                      // 105\n    markupIndex: null,                                                                                                 // 106\n    content: null,                                                                                                     // 107\n    fromIndex: fromIndex,                                                                                              // 108\n    toIndex: null                                                                                                      // 109\n  });                                                                                                                  // 110\n}                                                                                                                      // 111\n                                                                                                                       // 112\n/**                                                                                                                    // 113\n * Enqueues setting the markup of a node.                                                                              // 114\n *                                                                                                                     // 115\n * @param {string} parentID ID of the parent component.                                                                // 116\n * @param {string} markup Markup that renders into an element.                                                         // 117\n * @private                                                                                                            // 118\n */                                                                                                                    // 119\nfunction enqueueSetMarkup(parentID, markup) {                                                                          // 120\n  // NOTE: Null values reduce hidden classes.                                                                          // 121\n  updateQueue.push({                                                                                                   // 122\n    parentID: parentID,                                                                                                // 123\n    parentNode: null,                                                                                                  // 124\n    type: ReactMultiChildUpdateTypes.SET_MARKUP,                                                                       // 125\n    markupIndex: null,                                                                                                 // 126\n    content: markup,                                                                                                   // 127\n    fromIndex: null,                                                                                                   // 128\n    toIndex: null                                                                                                      // 129\n  });                                                                                                                  // 130\n}                                                                                                                      // 131\n                                                                                                                       // 132\n/**                                                                                                                    // 133\n * Enqueues setting the text content.                                                                                  // 134\n *                                                                                                                     // 135\n * @param {string} parentID ID of the parent component.                                                                // 136\n * @param {string} textContent Text content to set.                                                                    // 137\n * @private                                                                                                            // 138\n */                                                                                                                    // 139\nfunction enqueueTextContent(parentID, textContent) {                                                                   // 140\n  // NOTE: Null values reduce hidden classes.                                                                          // 141\n  updateQueue.push({                                                                                                   // 142\n    parentID: parentID,                                                                                                // 143\n    parentNode: null,                                                                                                  // 144\n    type: ReactMultiChildUpdateTypes.TEXT_CONTENT,                                                                     // 145\n    markupIndex: null,                                                                                                 // 146\n    content: textContent,                                                                                              // 147\n    fromIndex: null,                                                                                                   // 148\n    toIndex: null                                                                                                      // 149\n  });                                                                                                                  // 150\n}                                                                                                                      // 151\n                                                                                                                       // 152\n/**                                                                                                                    // 153\n * Processes any enqueued updates.                                                                                     // 154\n *                                                                                                                     // 155\n * @private                                                                                                            // 156\n */                                                                                                                    // 157\nfunction processQueue() {                                                                                              // 158\n  if (updateQueue.length) {                                                                                            // 159\n    ReactComponentEnvironment.processChildrenUpdates(updateQueue, markupQueue);                                        // 160\n    clearQueue();                                                                                                      // 161\n  }                                                                                                                    // 162\n}                                                                                                                      // 163\n                                                                                                                       // 164\n/**                                                                                                                    // 165\n * Clears any enqueued updates.                                                                                        // 166\n *                                                                                                                     // 167\n * @private                                                                                                            // 168\n */                                                                                                                    // 169\nfunction clearQueue() {                                                                                                // 170\n  updateQueue.length = 0;                                                                                              // 171\n  markupQueue.length = 0;                                                                                              // 172\n}                                                                                                                      // 173\n                                                                                                                       // 174\n/**                                                                                                                    // 175\n * ReactMultiChild are capable of reconciling multiple children.                                                       // 176\n *                                                                                                                     // 177\n * @class ReactMultiChild                                                                                              // 178\n * @internal                                                                                                           // 179\n */                                                                                                                    // 180\nvar ReactMultiChild = {                                                                                                // 181\n                                                                                                                       // 182\n  /**                                                                                                                  // 183\n   * Provides common functionality for components that must reconcile multiple                                         // 184\n   * children. This is used by `ReactDOMComponent` to mount, update, and                                               // 185\n   * unmount child components.                                                                                         // 186\n   *                                                                                                                   // 187\n   * @lends {ReactMultiChild.prototype}                                                                                // 188\n   */                                                                                                                  // 189\n  Mixin: {                                                                                                             // 190\n                                                                                                                       // 191\n    _reconcilerInstantiateChildren: function (nestedChildren, transaction, context) {                                  // 192\n      if (process.env.NODE_ENV !== 'production') {                                                                     // 193\n        if (this._currentElement) {                                                                                    // 194\n          try {                                                                                                        // 195\n            ReactCurrentOwner.current = this._currentElement._owner;                                                   // 196\n            return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);                     // 197\n          } finally {                                                                                                  // 198\n            ReactCurrentOwner.current = null;                                                                          // 199\n          }                                                                                                            // 200\n        }                                                                                                              // 201\n      }                                                                                                                // 202\n      return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);                           // 203\n    },                                                                                                                 // 204\n                                                                                                                       // 205\n    _reconcilerUpdateChildren: function (prevChildren, nextNestedChildrenElements, transaction, context) {             // 206\n      var nextChildren;                                                                                                // 207\n      if (process.env.NODE_ENV !== 'production') {                                                                     // 208\n        if (this._currentElement) {                                                                                    // 209\n          try {                                                                                                        // 210\n            ReactCurrentOwner.current = this._currentElement._owner;                                                   // 211\n            nextChildren = flattenChildren(nextNestedChildrenElements);                                                // 212\n          } finally {                                                                                                  // 213\n            ReactCurrentOwner.current = null;                                                                          // 214\n          }                                                                                                            // 215\n          return ReactChildReconciler.updateChildren(prevChildren, nextChildren, transaction, context);                // 216\n        }                                                                                                              // 217\n      }                                                                                                                // 218\n      nextChildren = flattenChildren(nextNestedChildrenElements);                                                      // 219\n      return ReactChildReconciler.updateChildren(prevChildren, nextChildren, transaction, context);                    // 220\n    },                                                                                                                 // 221\n                                                                                                                       // 222\n    /**                                                                                                                // 223\n     * Generates a \"mount image\" for each of the supplied children. In the case                                        // 224\n     * of `ReactDOMComponent`, a mount image is a string of markup.                                                    // 225\n     *                                                                                                                 // 226\n     * @param {?object} nestedChildren Nested child maps.                                                              // 227\n     * @return {array} An array of mounted representations.                                                            // 228\n     * @internal                                                                                                       // 229\n     */                                                                                                                // 230\n    mountChildren: function (nestedChildren, transaction, context) {                                                   // 231\n      var children = this._reconcilerInstantiateChildren(nestedChildren, transaction, context);                        // 232\n      this._renderedChildren = children;                                                                               // 233\n      var mountImages = [];                                                                                            // 234\n      var index = 0;                                                                                                   // 235\n      for (var name in children) {                                                                                     // 236\n        if (children.hasOwnProperty(name)) {                                                                           // 237\n          var child = children[name];                                                                                  // 238\n          // Inlined for performance, see `ReactInstanceHandles.createReactID`.                                        // 239\n          var rootID = this._rootNodeID + name;                                                                        // 240\n          var mountImage = ReactReconciler.mountComponent(child, rootID, transaction, context);                        // 241\n          child._mountIndex = index++;                                                                                 // 242\n          mountImages.push(mountImage);                                                                                // 243\n        }                                                                                                              // 244\n      }                                                                                                                // 245\n      return mountImages;                                                                                              // 246\n    },                                                                                                                 // 247\n                                                                                                                       // 248\n    /**                                                                                                                // 249\n     * Replaces any rendered children with a text content string.                                                      // 250\n     *                                                                                                                 // 251\n     * @param {string} nextContent String of content.                                                                  // 252\n     * @internal                                                                                                       // 253\n     */                                                                                                                // 254\n    updateTextContent: function (nextContent) {                                                                        // 255\n      updateDepth++;                                                                                                   // 256\n      var errorThrown = true;                                                                                          // 257\n      try {                                                                                                            // 258\n        var prevChildren = this._renderedChildren;                                                                     // 259\n        // Remove any rendered children.                                                                               // 260\n        ReactChildReconciler.unmountChildren(prevChildren);                                                            // 261\n        // TODO: The setTextContent operation should be enough                                                         // 262\n        for (var name in prevChildren) {                                                                               // 263\n          if (prevChildren.hasOwnProperty(name)) {                                                                     // 264\n            this._unmountChild(prevChildren[name]);                                                                    // 265\n          }                                                                                                            // 266\n        }                                                                                                              // 267\n        // Set new text content.                                                                                       // 268\n        this.setTextContent(nextContent);                                                                              // 269\n        errorThrown = false;                                                                                           // 270\n      } finally {                                                                                                      // 271\n        updateDepth--;                                                                                                 // 272\n        if (!updateDepth) {                                                                                            // 273\n          if (errorThrown) {                                                                                           // 274\n            clearQueue();                                                                                              // 275\n          } else {                                                                                                     // 276\n            processQueue();                                                                                            // 277\n          }                                                                                                            // 278\n        }                                                                                                              // 279\n      }                                                                                                                // 280\n    },                                                                                                                 // 281\n                                                                                                                       // 282\n    /**                                                                                                                // 283\n     * Replaces any rendered children with a markup string.                                                            // 284\n     *                                                                                                                 // 285\n     * @param {string} nextMarkup String of markup.                                                                    // 286\n     * @internal                                                                                                       // 287\n     */                                                                                                                // 288\n    updateMarkup: function (nextMarkup) {                                                                              // 289\n      updateDepth++;                                                                                                   // 290\n      var errorThrown = true;                                                                                          // 291\n      try {                                                                                                            // 292\n        var prevChildren = this._renderedChildren;                                                                     // 293\n        // Remove any rendered children.                                                                               // 294\n        ReactChildReconciler.unmountChildren(prevChildren);                                                            // 295\n        for (var name in prevChildren) {                                                                               // 296\n          if (prevChildren.hasOwnProperty(name)) {                                                                     // 297\n            this._unmountChildByName(prevChildren[name], name);                                                        // 298\n          }                                                                                                            // 299\n        }                                                                                                              // 300\n        this.setMarkup(nextMarkup);                                                                                    // 301\n        errorThrown = false;                                                                                           // 302\n      } finally {                                                                                                      // 303\n        updateDepth--;                                                                                                 // 304\n        if (!updateDepth) {                                                                                            // 305\n          if (errorThrown) {                                                                                           // 306\n            clearQueue();                                                                                              // 307\n          } else {                                                                                                     // 308\n            processQueue();                                                                                            // 309\n          }                                                                                                            // 310\n        }                                                                                                              // 311\n      }                                                                                                                // 312\n    },                                                                                                                 // 313\n                                                                                                                       // 314\n    /**                                                                                                                // 315\n     * Updates the rendered children with new children.                                                                // 316\n     *                                                                                                                 // 317\n     * @param {?object} nextNestedChildrenElements Nested child element maps.                                          // 318\n     * @param {ReactReconcileTransaction} transaction                                                                  // 319\n     * @internal                                                                                                       // 320\n     */                                                                                                                // 321\n    updateChildren: function (nextNestedChildrenElements, transaction, context) {                                      // 322\n      updateDepth++;                                                                                                   // 323\n      var errorThrown = true;                                                                                          // 324\n      try {                                                                                                            // 325\n        this._updateChildren(nextNestedChildrenElements, transaction, context);                                        // 326\n        errorThrown = false;                                                                                           // 327\n      } finally {                                                                                                      // 328\n        updateDepth--;                                                                                                 // 329\n        if (!updateDepth) {                                                                                            // 330\n          if (errorThrown) {                                                                                           // 331\n            clearQueue();                                                                                              // 332\n          } else {                                                                                                     // 333\n            processQueue();                                                                                            // 334\n          }                                                                                                            // 335\n        }                                                                                                              // 336\n      }                                                                                                                // 337\n    },                                                                                                                 // 338\n                                                                                                                       // 339\n    /**                                                                                                                // 340\n     * Improve performance by isolating this hot code path from the try/catch                                          // 341\n     * block in `updateChildren`.                                                                                      // 342\n     *                                                                                                                 // 343\n     * @param {?object} nextNestedChildrenElements Nested child element maps.                                          // 344\n     * @param {ReactReconcileTransaction} transaction                                                                  // 345\n     * @final                                                                                                          // 346\n     * @protected                                                                                                      // 347\n     */                                                                                                                // 348\n    _updateChildren: function (nextNestedChildrenElements, transaction, context) {                                     // 349\n      var prevChildren = this._renderedChildren;                                                                       // 350\n      var nextChildren = this._reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, transaction, context);\n      this._renderedChildren = nextChildren;                                                                           // 352\n      if (!nextChildren && !prevChildren) {                                                                            // 353\n        return;                                                                                                        // 354\n      }                                                                                                                // 355\n      var name;                                                                                                        // 356\n      // `nextIndex` will increment for each child in `nextChildren`, but                                              // 357\n      // `lastIndex` will be the last index visited in `prevChildren`.                                                 // 358\n      var lastIndex = 0;                                                                                               // 359\n      var nextIndex = 0;                                                                                               // 360\n      for (name in nextChildren) {                                                                                     // 361\n        if (!nextChildren.hasOwnProperty(name)) {                                                                      // 362\n          continue;                                                                                                    // 363\n        }                                                                                                              // 364\n        var prevChild = prevChildren && prevChildren[name];                                                            // 365\n        var nextChild = nextChildren[name];                                                                            // 366\n        if (prevChild === nextChild) {                                                                                 // 367\n          this.moveChild(prevChild, nextIndex, lastIndex);                                                             // 368\n          lastIndex = Math.max(prevChild._mountIndex, lastIndex);                                                      // 369\n          prevChild._mountIndex = nextIndex;                                                                           // 370\n        } else {                                                                                                       // 371\n          if (prevChild) {                                                                                             // 372\n            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.                                       // 373\n            lastIndex = Math.max(prevChild._mountIndex, lastIndex);                                                    // 374\n            this._unmountChild(prevChild);                                                                             // 375\n          }                                                                                                            // 376\n          // The child must be instantiated before it's mounted.                                                       // 377\n          this._mountChildByNameAtIndex(nextChild, name, nextIndex, transaction, context);                             // 378\n        }                                                                                                              // 379\n        nextIndex++;                                                                                                   // 380\n      }                                                                                                                // 381\n      // Remove children that are no longer present.                                                                   // 382\n      for (name in prevChildren) {                                                                                     // 383\n        if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {               // 384\n          this._unmountChild(prevChildren[name]);                                                                      // 385\n        }                                                                                                              // 386\n      }                                                                                                                // 387\n    },                                                                                                                 // 388\n                                                                                                                       // 389\n    /**                                                                                                                // 390\n     * Unmounts all rendered children. This should be used to clean up children                                        // 391\n     * when this component is unmounted.                                                                               // 392\n     *                                                                                                                 // 393\n     * @internal                                                                                                       // 394\n     */                                                                                                                // 395\n    unmountChildren: function () {                                                                                     // 396\n      var renderedChildren = this._renderedChildren;                                                                   // 397\n      ReactChildReconciler.unmountChildren(renderedChildren);                                                          // 398\n      this._renderedChildren = null;                                                                                   // 399\n    },                                                                                                                 // 400\n                                                                                                                       // 401\n    /**                                                                                                                // 402\n     * Moves a child component to the supplied index.                                                                  // 403\n     *                                                                                                                 // 404\n     * @param {ReactComponent} child Component to move.                                                                // 405\n     * @param {number} toIndex Destination index of the element.                                                       // 406\n     * @param {number} lastIndex Last index visited of the siblings of `child`.                                        // 407\n     * @protected                                                                                                      // 408\n     */                                                                                                                // 409\n    moveChild: function (child, toIndex, lastIndex) {                                                                  // 410\n      // If the index of `child` is less than `lastIndex`, then it needs to                                            // 411\n      // be moved. Otherwise, we do not need to move it because a child will be                                        // 412\n      // inserted or moved before `child`.                                                                             // 413\n      if (child._mountIndex < lastIndex) {                                                                             // 414\n        enqueueMove(this._rootNodeID, child._mountIndex, toIndex);                                                     // 415\n      }                                                                                                                // 416\n    },                                                                                                                 // 417\n                                                                                                                       // 418\n    /**                                                                                                                // 419\n     * Creates a child component.                                                                                      // 420\n     *                                                                                                                 // 421\n     * @param {ReactComponent} child Component to create.                                                              // 422\n     * @param {string} mountImage Markup to insert.                                                                    // 423\n     * @protected                                                                                                      // 424\n     */                                                                                                                // 425\n    createChild: function (child, mountImage) {                                                                        // 426\n      enqueueInsertMarkup(this._rootNodeID, mountImage, child._mountIndex);                                            // 427\n    },                                                                                                                 // 428\n                                                                                                                       // 429\n    /**                                                                                                                // 430\n     * Removes a child component.                                                                                      // 431\n     *                                                                                                                 // 432\n     * @param {ReactComponent} child Child to remove.                                                                  // 433\n     * @protected                                                                                                      // 434\n     */                                                                                                                // 435\n    removeChild: function (child) {                                                                                    // 436\n      enqueueRemove(this._rootNodeID, child._mountIndex);                                                              // 437\n    },                                                                                                                 // 438\n                                                                                                                       // 439\n    /**                                                                                                                // 440\n     * Sets this text content string.                                                                                  // 441\n     *                                                                                                                 // 442\n     * @param {string} textContent Text content to set.                                                                // 443\n     * @protected                                                                                                      // 444\n     */                                                                                                                // 445\n    setTextContent: function (textContent) {                                                                           // 446\n      enqueueTextContent(this._rootNodeID, textContent);                                                               // 447\n    },                                                                                                                 // 448\n                                                                                                                       // 449\n    /**                                                                                                                // 450\n     * Sets this markup string.                                                                                        // 451\n     *                                                                                                                 // 452\n     * @param {string} markup Markup to set.                                                                           // 453\n     * @protected                                                                                                      // 454\n     */                                                                                                                // 455\n    setMarkup: function (markup) {                                                                                     // 456\n      enqueueSetMarkup(this._rootNodeID, markup);                                                                      // 457\n    },                                                                                                                 // 458\n                                                                                                                       // 459\n    /**                                                                                                                // 460\n     * Mounts a child with the supplied name.                                                                          // 461\n     *                                                                                                                 // 462\n     * NOTE: This is part of `updateChildren` and is here for readability.                                             // 463\n     *                                                                                                                 // 464\n     * @param {ReactComponent} child Component to mount.                                                               // 465\n     * @param {string} name Name of the child.                                                                         // 466\n     * @param {number} index Index at which to insert the child.                                                       // 467\n     * @param {ReactReconcileTransaction} transaction                                                                  // 468\n     * @private                                                                                                        // 469\n     */                                                                                                                // 470\n    _mountChildByNameAtIndex: function (child, name, index, transaction, context) {                                    // 471\n      // Inlined for performance, see `ReactInstanceHandles.createReactID`.                                            // 472\n      var rootID = this._rootNodeID + name;                                                                            // 473\n      var mountImage = ReactReconciler.mountComponent(child, rootID, transaction, context);                            // 474\n      child._mountIndex = index;                                                                                       // 475\n      this.createChild(child, mountImage);                                                                             // 476\n    },                                                                                                                 // 477\n                                                                                                                       // 478\n    /**                                                                                                                // 479\n     * Unmounts a rendered child.                                                                                      // 480\n     *                                                                                                                 // 481\n     * NOTE: This is part of `updateChildren` and is here for readability.                                             // 482\n     *                                                                                                                 // 483\n     * @param {ReactComponent} child Component to unmount.                                                             // 484\n     * @private                                                                                                        // 485\n     */                                                                                                                // 486\n    _unmountChild: function (child) {                                                                                  // 487\n      this.removeChild(child);                                                                                         // 488\n      child._mountIndex = null;                                                                                        // 489\n    }                                                                                                                  // 490\n                                                                                                                       // 491\n  }                                                                                                                    // 492\n                                                                                                                       // 493\n};                                                                                                                     // 494\n                                                                                                                       // 495\nmodule.exports = ReactMultiChild;                                                                                      // 496\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactChildReconciler.js\":[\"./ReactReconciler\",\"./instantiateReactComponent\",\"./shouldUpdateReactComponent\",\"./traverseAllChildren\",\"fbjs/lib/warning\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactChildReconciler.js                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2014-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactChildReconciler                                                                                // 9\n * @typechecks static-only                                                                                             // 10\n */                                                                                                                    // 11\n                                                                                                                       // 12\n'use strict';                                                                                                          // 13\n                                                                                                                       // 14\nvar ReactReconciler = require('./ReactReconciler');                                                                    // 15\n                                                                                                                       // 16\nvar instantiateReactComponent = require('./instantiateReactComponent');                                                // 17\nvar shouldUpdateReactComponent = require('./shouldUpdateReactComponent');                                              // 18\nvar traverseAllChildren = require('./traverseAllChildren');                                                            // 19\nvar warning = require('fbjs/lib/warning');                                                                             // 20\n                                                                                                                       // 21\nfunction instantiateChild(childInstances, child, name) {                                                               // 22\n  // We found a component instance.                                                                                    // 23\n  var keyUnique = childInstances[name] === undefined;                                                                  // 24\n  if (process.env.NODE_ENV !== 'production') {                                                                         // 25\n    process.env.NODE_ENV !== 'production' ? warning(keyUnique, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.', name) : undefined;\n  }                                                                                                                    // 27\n  if (child != null && keyUnique) {                                                                                    // 28\n    childInstances[name] = instantiateReactComponent(child, null);                                                     // 29\n  }                                                                                                                    // 30\n}                                                                                                                      // 31\n                                                                                                                       // 32\n/**                                                                                                                    // 33\n * ReactChildReconciler provides helpers for initializing or updating a set of                                         // 34\n * children. Its output is suitable for passing it onto ReactMultiChild which                                          // 35\n * does diffed reordering and insertion.                                                                               // 36\n */                                                                                                                    // 37\nvar ReactChildReconciler = {                                                                                           // 38\n  /**                                                                                                                  // 39\n   * Generates a \"mount image\" for each of the supplied children. In the case                                          // 40\n   * of `ReactDOMComponent`, a mount image is a string of markup.                                                      // 41\n   *                                                                                                                   // 42\n   * @param {?object} nestedChildNodes Nested child maps.                                                              // 43\n   * @return {?object} A set of child instances.                                                                       // 44\n   * @internal                                                                                                         // 45\n   */                                                                                                                  // 46\n  instantiateChildren: function (nestedChildNodes, transaction, context) {                                             // 47\n    if (nestedChildNodes == null) {                                                                                    // 48\n      return null;                                                                                                     // 49\n    }                                                                                                                  // 50\n    var childInstances = {};                                                                                           // 51\n    traverseAllChildren(nestedChildNodes, instantiateChild, childInstances);                                           // 52\n    return childInstances;                                                                                             // 53\n  },                                                                                                                   // 54\n                                                                                                                       // 55\n  /**                                                                                                                  // 56\n   * Updates the rendered children and returns a new set of children.                                                  // 57\n   *                                                                                                                   // 58\n   * @param {?object} prevChildren Previously initialized set of children.                                             // 59\n   * @param {?object} nextChildren Flat child element maps.                                                            // 60\n   * @param {ReactReconcileTransaction} transaction                                                                    // 61\n   * @param {object} context                                                                                           // 62\n   * @return {?object} A new set of child instances.                                                                   // 63\n   * @internal                                                                                                         // 64\n   */                                                                                                                  // 65\n  updateChildren: function (prevChildren, nextChildren, transaction, context) {                                        // 66\n    // We currently don't have a way to track moves here but if we use iterators                                       // 67\n    // instead of for..in we can zip the iterators and check if an item has                                            // 68\n    // moved.                                                                                                          // 69\n    // TODO: If nothing has changed, return the prevChildren object so that we                                         // 70\n    // can quickly bailout if nothing has changed.                                                                     // 71\n    if (!nextChildren && !prevChildren) {                                                                              // 72\n      return null;                                                                                                     // 73\n    }                                                                                                                  // 74\n    var name;                                                                                                          // 75\n    for (name in nextChildren) {                                                                                       // 76\n      if (!nextChildren.hasOwnProperty(name)) {                                                                        // 77\n        continue;                                                                                                      // 78\n      }                                                                                                                // 79\n      var prevChild = prevChildren && prevChildren[name];                                                              // 80\n      var prevElement = prevChild && prevChild._currentElement;                                                        // 81\n      var nextElement = nextChildren[name];                                                                            // 82\n      if (prevChild != null && shouldUpdateReactComponent(prevElement, nextElement)) {                                 // 83\n        ReactReconciler.receiveComponent(prevChild, nextElement, transaction, context);                                // 84\n        nextChildren[name] = prevChild;                                                                                // 85\n      } else {                                                                                                         // 86\n        if (prevChild) {                                                                                               // 87\n          ReactReconciler.unmountComponent(prevChild, name);                                                           // 88\n        }                                                                                                              // 89\n        // The child must be instantiated before it's mounted.                                                         // 90\n        var nextChildInstance = instantiateReactComponent(nextElement, null);                                          // 91\n        nextChildren[name] = nextChildInstance;                                                                        // 92\n      }                                                                                                                // 93\n    }                                                                                                                  // 94\n    // Unmount children that are no longer present.                                                                    // 95\n    for (name in prevChildren) {                                                                                       // 96\n      if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {                 // 97\n        ReactReconciler.unmountComponent(prevChildren[name]);                                                          // 98\n      }                                                                                                                // 99\n    }                                                                                                                  // 100\n    return nextChildren;                                                                                               // 101\n  },                                                                                                                   // 102\n                                                                                                                       // 103\n  /**                                                                                                                  // 104\n   * Unmounts all rendered children. This should be used to clean up children                                          // 105\n   * when this component is unmounted.                                                                                 // 106\n   *                                                                                                                   // 107\n   * @param {?object} renderedChildren Previously initialized set of children.                                         // 108\n   * @internal                                                                                                         // 109\n   */                                                                                                                  // 110\n  unmountChildren: function (renderedChildren) {                                                                       // 111\n    for (var name in renderedChildren) {                                                                               // 112\n      if (renderedChildren.hasOwnProperty(name)) {                                                                     // 113\n        var renderedChild = renderedChildren[name];                                                                    // 114\n        ReactReconciler.unmountComponent(renderedChild);                                                               // 115\n      }                                                                                                                // 116\n    }                                                                                                                  // 117\n  }                                                                                                                    // 118\n                                                                                                                       // 119\n};                                                                                                                     // 120\n                                                                                                                       // 121\nmodule.exports = ReactChildReconciler;                                                                                 // 122\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"flattenChildren.js\":[\"./traverseAllChildren\",\"fbjs/lib/warning\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/flattenChildren.js                                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule flattenChildren                                                                                     // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar traverseAllChildren = require('./traverseAllChildren');                                                            // 14\nvar warning = require('fbjs/lib/warning');                                                                             // 15\n                                                                                                                       // 16\n/**                                                                                                                    // 17\n * @param {function} traverseContext Context passed through traversal.                                                 // 18\n * @param {?ReactComponent} child React child component.                                                               // 19\n * @param {!string} name String name of key path to child.                                                             // 20\n */                                                                                                                    // 21\nfunction flattenSingleChildIntoContext(traverseContext, child, name) {                                                 // 22\n  // We found a component instance.                                                                                    // 23\n  var result = traverseContext;                                                                                        // 24\n  var keyUnique = result[name] === undefined;                                                                          // 25\n  if (process.env.NODE_ENV !== 'production') {                                                                         // 26\n    process.env.NODE_ENV !== 'production' ? warning(keyUnique, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.', name) : undefined;\n  }                                                                                                                    // 28\n  if (keyUnique && child != null) {                                                                                    // 29\n    result[name] = child;                                                                                              // 30\n  }                                                                                                                    // 31\n}                                                                                                                      // 32\n                                                                                                                       // 33\n/**                                                                                                                    // 34\n * Flattens children that are typically specified as `props.children`. Any null                                        // 35\n * children will not be included in the resulting object.                                                              // 36\n * @return {!object} flattened children keyed by name.                                                                 // 37\n */                                                                                                                    // 38\nfunction flattenChildren(children) {                                                                                   // 39\n  if (children == null) {                                                                                              // 40\n    return children;                                                                                                   // 41\n  }                                                                                                                    // 42\n  var result = {};                                                                                                     // 43\n  traverseAllChildren(children, flattenSingleChildIntoContext, result);                                                // 44\n  return result;                                                                                                       // 45\n}                                                                                                                      // 46\n                                                                                                                       // 47\nmodule.exports = flattenChildren;                                                                                      // 48\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactEventListener.js\":[\"fbjs/lib/EventListener\",\"fbjs/lib/ExecutionEnvironment\",\"./PooledClass\",\"./ReactInstanceHandles\",\"./ReactMount\",\"./ReactUpdates\",\"./Object.assign\",\"./getEventTarget\",\"fbjs/lib/getUnboundedScrollPosition\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactEventListener.js                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactEventListener                                                                                  // 9\n * @typechecks static-only                                                                                             // 10\n */                                                                                                                    // 11\n                                                                                                                       // 12\n'use strict';                                                                                                          // 13\n                                                                                                                       // 14\nvar EventListener = require('fbjs/lib/EventListener');                                                                 // 15\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');                                                   // 16\nvar PooledClass = require('./PooledClass');                                                                            // 17\nvar ReactInstanceHandles = require('./ReactInstanceHandles');                                                          // 18\nvar ReactMount = require('./ReactMount');                                                                              // 19\nvar ReactUpdates = require('./ReactUpdates');                                                                          // 20\n                                                                                                                       // 21\nvar assign = require('./Object.assign');                                                                               // 22\nvar getEventTarget = require('./getEventTarget');                                                                      // 23\nvar getUnboundedScrollPosition = require('fbjs/lib/getUnboundedScrollPosition');                                       // 24\n                                                                                                                       // 25\nvar DOCUMENT_FRAGMENT_NODE_TYPE = 11;                                                                                  // 26\n                                                                                                                       // 27\n/**                                                                                                                    // 28\n * Finds the parent React component of `node`.                                                                         // 29\n *                                                                                                                     // 30\n * @param {*} node                                                                                                     // 31\n * @return {?DOMEventTarget} Parent container, or `null` if the specified node                                         // 32\n *                           is not nested.                                                                            // 33\n */                                                                                                                    // 34\nfunction findParent(node) {                                                                                            // 35\n  // TODO: It may be a good idea to cache this to prevent unnecessary DOM                                              // 36\n  // traversal, but caching is difficult to do correctly without using a                                               // 37\n  // mutation observer to listen for all DOM changes.                                                                  // 38\n  var nodeID = ReactMount.getID(node);                                                                                 // 39\n  var rootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);                                                  // 40\n  var container = ReactMount.findReactContainerForID(rootID);                                                          // 41\n  var parent = ReactMount.getFirstReactDOM(container);                                                                 // 42\n  return parent;                                                                                                       // 43\n}                                                                                                                      // 44\n                                                                                                                       // 45\n// Used to store ancestor hierarchy in top level callback                                                              // 46\nfunction TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {                                                      // 47\n  this.topLevelType = topLevelType;                                                                                    // 48\n  this.nativeEvent = nativeEvent;                                                                                      // 49\n  this.ancestors = [];                                                                                                 // 50\n}                                                                                                                      // 51\nassign(TopLevelCallbackBookKeeping.prototype, {                                                                        // 52\n  destructor: function () {                                                                                            // 53\n    this.topLevelType = null;                                                                                          // 54\n    this.nativeEvent = null;                                                                                           // 55\n    this.ancestors.length = 0;                                                                                         // 56\n  }                                                                                                                    // 57\n});                                                                                                                    // 58\nPooledClass.addPoolingTo(TopLevelCallbackBookKeeping, PooledClass.twoArgumentPooler);                                  // 59\n                                                                                                                       // 60\nfunction handleTopLevelImpl(bookKeeping) {                                                                             // 61\n  // TODO: Re-enable event.path handling                                                                               // 62\n  //                                                                                                                   // 63\n  // if (bookKeeping.nativeEvent.path && bookKeeping.nativeEvent.path.length > 1) {                                    // 64\n  //   // New browsers have a path attribute on native events                                                          // 65\n  //   handleTopLevelWithPath(bookKeeping);                                                                            // 66\n  // } else {                                                                                                          // 67\n  //   // Legacy browsers don't have a path attribute on native events                                                 // 68\n  //   handleTopLevelWithoutPath(bookKeeping);                                                                         // 69\n  // }                                                                                                                 // 70\n                                                                                                                       // 71\n  void handleTopLevelWithPath; // temporarily unused                                                                   // 72\n  handleTopLevelWithoutPath(bookKeeping);                                                                              // 73\n}                                                                                                                      // 74\n                                                                                                                       // 75\n// Legacy browsers don't have a path attribute on native events                                                        // 76\nfunction handleTopLevelWithoutPath(bookKeeping) {                                                                      // 77\n  var topLevelTarget = ReactMount.getFirstReactDOM(getEventTarget(bookKeeping.nativeEvent)) || window;                 // 78\n                                                                                                                       // 79\n  // Loop through the hierarchy, in case there's any nested components.                                                // 80\n  // It's important that we build the array of ancestors before calling any                                            // 81\n  // event handlers, because event handlers can modify the DOM, leading to                                             // 82\n  // inconsistencies with ReactMount's node cache. See #1105.                                                          // 83\n  var ancestor = topLevelTarget;                                                                                       // 84\n  while (ancestor) {                                                                                                   // 85\n    bookKeeping.ancestors.push(ancestor);                                                                              // 86\n    ancestor = findParent(ancestor);                                                                                   // 87\n  }                                                                                                                    // 88\n                                                                                                                       // 89\n  for (var i = 0; i < bookKeeping.ancestors.length; i++) {                                                             // 90\n    topLevelTarget = bookKeeping.ancestors[i];                                                                         // 91\n    var topLevelTargetID = ReactMount.getID(topLevelTarget) || '';                                                     // 92\n    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, topLevelTarget, topLevelTargetID, bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));\n  }                                                                                                                    // 94\n}                                                                                                                      // 95\n                                                                                                                       // 96\n// New browsers have a path attribute on native events                                                                 // 97\nfunction handleTopLevelWithPath(bookKeeping) {                                                                         // 98\n  var path = bookKeeping.nativeEvent.path;                                                                             // 99\n  var currentNativeTarget = path[0];                                                                                   // 100\n  var eventsFired = 0;                                                                                                 // 101\n  for (var i = 0; i < path.length; i++) {                                                                              // 102\n    var currentPathElement = path[i];                                                                                  // 103\n    if (currentPathElement.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE) {                                                 // 104\n      currentNativeTarget = path[i + 1];                                                                               // 105\n    }                                                                                                                  // 106\n    // TODO: slow                                                                                                      // 107\n    var reactParent = ReactMount.getFirstReactDOM(currentPathElement);                                                 // 108\n    if (reactParent === currentPathElement) {                                                                          // 109\n      var currentPathElementID = ReactMount.getID(currentPathElement);                                                 // 110\n      var newRootID = ReactInstanceHandles.getReactRootIDFromNodeID(currentPathElementID);                             // 111\n      bookKeeping.ancestors.push(currentPathElement);                                                                  // 112\n                                                                                                                       // 113\n      var topLevelTargetID = ReactMount.getID(currentPathElement) || '';                                               // 114\n      eventsFired++;                                                                                                   // 115\n      ReactEventListener._handleTopLevel(bookKeeping.topLevelType, currentPathElement, topLevelTargetID, bookKeeping.nativeEvent, currentNativeTarget);\n                                                                                                                       // 117\n      // Jump to the root of this React render tree                                                                    // 118\n      while (currentPathElementID !== newRootID) {                                                                     // 119\n        i++;                                                                                                           // 120\n        currentPathElement = path[i];                                                                                  // 121\n        currentPathElementID = ReactMount.getID(currentPathElement);                                                   // 122\n      }                                                                                                                // 123\n    }                                                                                                                  // 124\n  }                                                                                                                    // 125\n  if (eventsFired === 0) {                                                                                             // 126\n    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, window, '', bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));\n  }                                                                                                                    // 128\n}                                                                                                                      // 129\n                                                                                                                       // 130\nfunction scrollValueMonitor(cb) {                                                                                      // 131\n  var scrollPosition = getUnboundedScrollPosition(window);                                                             // 132\n  cb(scrollPosition);                                                                                                  // 133\n}                                                                                                                      // 134\n                                                                                                                       // 135\nvar ReactEventListener = {                                                                                             // 136\n  _enabled: true,                                                                                                      // 137\n  _handleTopLevel: null,                                                                                               // 138\n                                                                                                                       // 139\n  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,                                                       // 140\n                                                                                                                       // 141\n  setHandleTopLevel: function (handleTopLevel) {                                                                       // 142\n    ReactEventListener._handleTopLevel = handleTopLevel;                                                               // 143\n  },                                                                                                                   // 144\n                                                                                                                       // 145\n  setEnabled: function (enabled) {                                                                                     // 146\n    ReactEventListener._enabled = !!enabled;                                                                           // 147\n  },                                                                                                                   // 148\n                                                                                                                       // 149\n  isEnabled: function () {                                                                                             // 150\n    return ReactEventListener._enabled;                                                                                // 151\n  },                                                                                                                   // 152\n                                                                                                                       // 153\n  /**                                                                                                                  // 154\n   * Traps top-level events by using event bubbling.                                                                   // 155\n   *                                                                                                                   // 156\n   * @param {string} topLevelType Record from `EventConstants`.                                                        // 157\n   * @param {string} handlerBaseName Event name (e.g. \"click\").                                                        // 158\n   * @param {object} handle Element on which to attach listener.                                                       // 159\n   * @return {?object} An object with a remove function which will forcefully                                          // 160\n   *                  remove the listener.                                                                             // 161\n   * @internal                                                                                                         // 162\n   */                                                                                                                  // 163\n  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {                                                 // 164\n    var element = handle;                                                                                              // 165\n    if (!element) {                                                                                                    // 166\n      return null;                                                                                                     // 167\n    }                                                                                                                  // 168\n    return EventListener.listen(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));  // 169\n  },                                                                                                                   // 170\n                                                                                                                       // 171\n  /**                                                                                                                  // 172\n   * Traps a top-level event by using event capturing.                                                                 // 173\n   *                                                                                                                   // 174\n   * @param {string} topLevelType Record from `EventConstants`.                                                        // 175\n   * @param {string} handlerBaseName Event name (e.g. \"click\").                                                        // 176\n   * @param {object} handle Element on which to attach listener.                                                       // 177\n   * @return {?object} An object with a remove function which will forcefully                                          // 178\n   *                  remove the listener.                                                                             // 179\n   * @internal                                                                                                         // 180\n   */                                                                                                                  // 181\n  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {                                                // 182\n    var element = handle;                                                                                              // 183\n    if (!element) {                                                                                                    // 184\n      return null;                                                                                                     // 185\n    }                                                                                                                  // 186\n    return EventListener.capture(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));\n  },                                                                                                                   // 188\n                                                                                                                       // 189\n  monitorScrollValue: function (refresh) {                                                                             // 190\n    var callback = scrollValueMonitor.bind(null, refresh);                                                             // 191\n    EventListener.listen(window, 'scroll', callback);                                                                  // 192\n  },                                                                                                                   // 193\n                                                                                                                       // 194\n  dispatchEvent: function (topLevelType, nativeEvent) {                                                                // 195\n    if (!ReactEventListener._enabled) {                                                                                // 196\n      return;                                                                                                          // 197\n    }                                                                                                                  // 198\n                                                                                                                       // 199\n    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(topLevelType, nativeEvent);                                // 200\n    try {                                                                                                              // 201\n      // Event queue being processed in the same cycle allows                                                          // 202\n      // `preventDefault`.                                                                                             // 203\n      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);                                                    // 204\n    } finally {                                                                                                        // 205\n      TopLevelCallbackBookKeeping.release(bookKeeping);                                                                // 206\n    }                                                                                                                  // 207\n  }                                                                                                                    // 208\n};                                                                                                                     // 209\n                                                                                                                       // 210\nmodule.exports = ReactEventListener;                                                                                   // 211\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactInjection.js\":[\"./DOMProperty\",\"./EventPluginHub\",\"./ReactComponentEnvironment\",\"./ReactClass\",\"./ReactEmptyComponent\",\"./ReactBrowserEventEmitter\",\"./ReactNativeComponent\",\"./ReactPerf\",\"./ReactRootIndex\",\"./ReactUpdates\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactInjection.js                                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactInjection                                                                                      // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar DOMProperty = require('./DOMProperty');                                                                            // 14\nvar EventPluginHub = require('./EventPluginHub');                                                                      // 15\nvar ReactComponentEnvironment = require('./ReactComponentEnvironment');                                                // 16\nvar ReactClass = require('./ReactClass');                                                                              // 17\nvar ReactEmptyComponent = require('./ReactEmptyComponent');                                                            // 18\nvar ReactBrowserEventEmitter = require('./ReactBrowserEventEmitter');                                                  // 19\nvar ReactNativeComponent = require('./ReactNativeComponent');                                                          // 20\nvar ReactPerf = require('./ReactPerf');                                                                                // 21\nvar ReactRootIndex = require('./ReactRootIndex');                                                                      // 22\nvar ReactUpdates = require('./ReactUpdates');                                                                          // 23\n                                                                                                                       // 24\nvar ReactInjection = {                                                                                                 // 25\n  Component: ReactComponentEnvironment.injection,                                                                      // 26\n  Class: ReactClass.injection,                                                                                         // 27\n  DOMProperty: DOMProperty.injection,                                                                                  // 28\n  EmptyComponent: ReactEmptyComponent.injection,                                                                       // 29\n  EventPluginHub: EventPluginHub.injection,                                                                            // 30\n  EventEmitter: ReactBrowserEventEmitter.injection,                                                                    // 31\n  NativeComponent: ReactNativeComponent.injection,                                                                     // 32\n  Perf: ReactPerf.injection,                                                                                           // 33\n  RootIndex: ReactRootIndex.injection,                                                                                 // 34\n  Updates: ReactUpdates.injection                                                                                      // 35\n};                                                                                                                     // 36\n                                                                                                                       // 37\nmodule.exports = ReactInjection;                                                                                       // 38\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactClass.js\":[\"./ReactComponent\",\"./ReactElement\",\"./ReactPropTypeLocations\",\"./ReactPropTypeLocationNames\",\"./ReactNoopUpdateQueue\",\"./Object.assign\",\"fbjs/lib/emptyObject\",\"fbjs/lib/invariant\",\"fbjs/lib/keyMirror\",\"fbjs/lib/keyOf\",\"fbjs/lib/warning\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactClass.js                                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactClass                                                                                          // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar ReactComponent = require('./ReactComponent');                                                                      // 14\nvar ReactElement = require('./ReactElement');                                                                          // 15\nvar ReactPropTypeLocations = require('./ReactPropTypeLocations');                                                      // 16\nvar ReactPropTypeLocationNames = require('./ReactPropTypeLocationNames');                                              // 17\nvar ReactNoopUpdateQueue = require('./ReactNoopUpdateQueue');                                                          // 18\n                                                                                                                       // 19\nvar assign = require('./Object.assign');                                                                               // 20\nvar emptyObject = require('fbjs/lib/emptyObject');                                                                     // 21\nvar invariant = require('fbjs/lib/invariant');                                                                         // 22\nvar keyMirror = require('fbjs/lib/keyMirror');                                                                         // 23\nvar keyOf = require('fbjs/lib/keyOf');                                                                                 // 24\nvar warning = require('fbjs/lib/warning');                                                                             // 25\n                                                                                                                       // 26\nvar MIXINS_KEY = keyOf({ mixins: null });                                                                              // 27\n                                                                                                                       // 28\n/**                                                                                                                    // 29\n * Policies that describe methods in `ReactClassInterface`.                                                            // 30\n */                                                                                                                    // 31\nvar SpecPolicy = keyMirror({                                                                                           // 32\n  /**                                                                                                                  // 33\n   * These methods may be defined only once by the class specification or mixin.                                       // 34\n   */                                                                                                                  // 35\n  DEFINE_ONCE: null,                                                                                                   // 36\n  /**                                                                                                                  // 37\n   * These methods may be defined by both the class specification and mixins.                                          // 38\n   * Subsequent definitions will be chained. These methods must return void.                                           // 39\n   */                                                                                                                  // 40\n  DEFINE_MANY: null,                                                                                                   // 41\n  /**                                                                                                                  // 42\n   * These methods are overriding the base class.                                                                      // 43\n   */                                                                                                                  // 44\n  OVERRIDE_BASE: null,                                                                                                 // 45\n  /**                                                                                                                  // 46\n   * These methods are similar to DEFINE_MANY, except we assume they return                                            // 47\n   * objects. We try to merge the keys of the return values of all the mixed in                                        // 48\n   * functions. If there is a key conflict we throw.                                                                   // 49\n   */                                                                                                                  // 50\n  DEFINE_MANY_MERGED: null                                                                                             // 51\n});                                                                                                                    // 52\n                                                                                                                       // 53\nvar injectedMixins = [];                                                                                               // 54\n                                                                                                                       // 55\nvar warnedSetProps = false;                                                                                            // 56\nfunction warnSetProps() {                                                                                              // 57\n  if (!warnedSetProps) {                                                                                               // 58\n    warnedSetProps = true;                                                                                             // 59\n    process.env.NODE_ENV !== 'production' ? warning(false, 'setProps(...) and replaceProps(...) are deprecated. ' + 'Instead, call render again at the top level.') : undefined;\n  }                                                                                                                    // 61\n}                                                                                                                      // 62\n                                                                                                                       // 63\n/**                                                                                                                    // 64\n * Composite components are higher-level components that compose other composite                                       // 65\n * or native components.                                                                                               // 66\n *                                                                                                                     // 67\n * To create a new type of `ReactClass`, pass a specification of                                                       // 68\n * your new class to `React.createClass`. The only requirement of your class                                           // 69\n * specification is that you implement a `render` method.                                                              // 70\n *                                                                                                                     // 71\n *   var MyComponent = React.createClass({                                                                             // 72\n *     render: function() {                                                                                            // 73\n *       return <div>Hello World</div>;                                                                                // 74\n *     }                                                                                                               // 75\n *   });                                                                                                               // 76\n *                                                                                                                     // 77\n * The class specification supports a specific protocol of methods that have                                           // 78\n * special meaning (e.g. `render`). See `ReactClassInterface` for                                                      // 79\n * more the comprehensive protocol. Any other properties and methods in the                                            // 80\n * class specification will be available on the prototype.                                                             // 81\n *                                                                                                                     // 82\n * @interface ReactClassInterface                                                                                      // 83\n * @internal                                                                                                           // 84\n */                                                                                                                    // 85\nvar ReactClassInterface = {                                                                                            // 86\n                                                                                                                       // 87\n  /**                                                                                                                  // 88\n   * An array of Mixin objects to include when defining your component.                                                // 89\n   *                                                                                                                   // 90\n   * @type {array}                                                                                                     // 91\n   * @optional                                                                                                         // 92\n   */                                                                                                                  // 93\n  mixins: SpecPolicy.DEFINE_MANY,                                                                                      // 94\n                                                                                                                       // 95\n  /**                                                                                                                  // 96\n   * An object containing properties and methods that should be defined on                                             // 97\n   * the component's constructor instead of its prototype (static methods).                                            // 98\n   *                                                                                                                   // 99\n   * @type {object}                                                                                                    // 100\n   * @optional                                                                                                         // 101\n   */                                                                                                                  // 102\n  statics: SpecPolicy.DEFINE_MANY,                                                                                     // 103\n                                                                                                                       // 104\n  /**                                                                                                                  // 105\n   * Definition of prop types for this component.                                                                      // 106\n   *                                                                                                                   // 107\n   * @type {object}                                                                                                    // 108\n   * @optional                                                                                                         // 109\n   */                                                                                                                  // 110\n  propTypes: SpecPolicy.DEFINE_MANY,                                                                                   // 111\n                                                                                                                       // 112\n  /**                                                                                                                  // 113\n   * Definition of context types for this component.                                                                   // 114\n   *                                                                                                                   // 115\n   * @type {object}                                                                                                    // 116\n   * @optional                                                                                                         // 117\n   */                                                                                                                  // 118\n  contextTypes: SpecPolicy.DEFINE_MANY,                                                                                // 119\n                                                                                                                       // 120\n  /**                                                                                                                  // 121\n   * Definition of context types this component sets for its children.                                                 // 122\n   *                                                                                                                   // 123\n   * @type {object}                                                                                                    // 124\n   * @optional                                                                                                         // 125\n   */                                                                                                                  // 126\n  childContextTypes: SpecPolicy.DEFINE_MANY,                                                                           // 127\n                                                                                                                       // 128\n  // ==== Definition methods ====                                                                                      // 129\n                                                                                                                       // 130\n  /**                                                                                                                  // 131\n   * Invoked when the component is mounted. Values in the mapping will be set on                                       // 132\n   * `this.props` if that prop is not specified (i.e. using an `in` check).                                            // 133\n   *                                                                                                                   // 134\n   * This method is invoked before `getInitialState` and therefore cannot rely                                         // 135\n   * on `this.state` or use `this.setState`.                                                                           // 136\n   *                                                                                                                   // 137\n   * @return {object}                                                                                                  // 138\n   * @optional                                                                                                         // 139\n   */                                                                                                                  // 140\n  getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,                                                                      // 141\n                                                                                                                       // 142\n  /**                                                                                                                  // 143\n   * Invoked once before the component is mounted. The return value will be used                                       // 144\n   * as the initial value of `this.state`.                                                                             // 145\n   *                                                                                                                   // 146\n   *   getInitialState: function() {                                                                                   // 147\n   *     return {                                                                                                      // 148\n   *       isOn: false,                                                                                                // 149\n   *       fooBaz: new BazFoo()                                                                                        // 150\n   *     }                                                                                                             // 151\n   *   }                                                                                                               // 152\n   *                                                                                                                   // 153\n   * @return {object}                                                                                                  // 154\n   * @optional                                                                                                         // 155\n   */                                                                                                                  // 156\n  getInitialState: SpecPolicy.DEFINE_MANY_MERGED,                                                                      // 157\n                                                                                                                       // 158\n  /**                                                                                                                  // 159\n   * @return {object}                                                                                                  // 160\n   * @optional                                                                                                         // 161\n   */                                                                                                                  // 162\n  getChildContext: SpecPolicy.DEFINE_MANY_MERGED,                                                                      // 163\n                                                                                                                       // 164\n  /**                                                                                                                  // 165\n   * Uses props from `this.props` and state from `this.state` to render the                                            // 166\n   * structure of the component.                                                                                       // 167\n   *                                                                                                                   // 168\n   * No guarantees are made about when or how often this method is invoked, so                                         // 169\n   * it must not have side effects.                                                                                    // 170\n   *                                                                                                                   // 171\n   *   render: function() {                                                                                            // 172\n   *     var name = this.props.name;                                                                                   // 173\n   *     return <div>Hello, {name}!</div>;                                                                             // 174\n   *   }                                                                                                               // 175\n   *                                                                                                                   // 176\n   * @return {ReactComponent}                                                                                          // 177\n   * @nosideeffects                                                                                                    // 178\n   * @required                                                                                                         // 179\n   */                                                                                                                  // 180\n  render: SpecPolicy.DEFINE_ONCE,                                                                                      // 181\n                                                                                                                       // 182\n  // ==== Delegate methods ====                                                                                        // 183\n                                                                                                                       // 184\n  /**                                                                                                                  // 185\n   * Invoked when the component is initially created and about to be mounted.                                          // 186\n   * This may have side effects, but any external subscriptions or data created                                        // 187\n   * by this method must be cleaned up in `componentWillUnmount`.                                                      // 188\n   *                                                                                                                   // 189\n   * @optional                                                                                                         // 190\n   */                                                                                                                  // 191\n  componentWillMount: SpecPolicy.DEFINE_MANY,                                                                          // 192\n                                                                                                                       // 193\n  /**                                                                                                                  // 194\n   * Invoked when the component has been mounted and has a DOM representation.                                         // 195\n   * However, there is no guarantee that the DOM node is in the document.                                              // 196\n   *                                                                                                                   // 197\n   * Use this as an opportunity to operate on the DOM when the component has                                           // 198\n   * been mounted (initialized and rendered) for the first time.                                                       // 199\n   *                                                                                                                   // 200\n   * @param {DOMElement} rootNode DOM element representing the component.                                              // 201\n   * @optional                                                                                                         // 202\n   */                                                                                                                  // 203\n  componentDidMount: SpecPolicy.DEFINE_MANY,                                                                           // 204\n                                                                                                                       // 205\n  /**                                                                                                                  // 206\n   * Invoked before the component receives new props.                                                                  // 207\n   *                                                                                                                   // 208\n   * Use this as an opportunity to react to a prop transition by updating the                                          // 209\n   * state using `this.setState`. Current props are accessed via `this.props`.                                         // 210\n   *                                                                                                                   // 211\n   *   componentWillReceiveProps: function(nextProps, nextContext) {                                                   // 212\n   *     this.setState({                                                                                               // 213\n   *       likesIncreasing: nextProps.likeCount > this.props.likeCount                                                 // 214\n   *     });                                                                                                           // 215\n   *   }                                                                                                               // 216\n   *                                                                                                                   // 217\n   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop                                        // 218\n   * transition may cause a state change, but the opposite is not true. If you                                         // 219\n   * need it, you are probably looking for `componentWillUpdate`.                                                      // 220\n   *                                                                                                                   // 221\n   * @param {object} nextProps                                                                                         // 222\n   * @optional                                                                                                         // 223\n   */                                                                                                                  // 224\n  componentWillReceiveProps: SpecPolicy.DEFINE_MANY,                                                                   // 225\n                                                                                                                       // 226\n  /**                                                                                                                  // 227\n   * Invoked while deciding if the component should be updated as a result of                                          // 228\n   * receiving new props, state and/or context.                                                                        // 229\n   *                                                                                                                   // 230\n   * Use this as an opportunity to `return false` when you're certain that the                                         // 231\n   * transition to the new props/state/context will not require a component                                            // 232\n   * update.                                                                                                           // 233\n   *                                                                                                                   // 234\n   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {                                            // 235\n   *     return !equal(nextProps, this.props) ||                                                                       // 236\n   *       !equal(nextState, this.state) ||                                                                            // 237\n   *       !equal(nextContext, this.context);                                                                          // 238\n   *   }                                                                                                               // 239\n   *                                                                                                                   // 240\n   * @param {object} nextProps                                                                                         // 241\n   * @param {?object} nextState                                                                                        // 242\n   * @param {?object} nextContext                                                                                      // 243\n   * @return {boolean} True if the component should update.                                                            // 244\n   * @optional                                                                                                         // 245\n   */                                                                                                                  // 246\n  shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,                                                                       // 247\n                                                                                                                       // 248\n  /**                                                                                                                  // 249\n   * Invoked when the component is about to update due to a transition from                                            // 250\n   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`                                         // 251\n   * and `nextContext`.                                                                                                // 252\n   *                                                                                                                   // 253\n   * Use this as an opportunity to perform preparation before an update occurs.                                        // 254\n   *                                                                                                                   // 255\n   * NOTE: You **cannot** use `this.setState()` in this method.                                                        // 256\n   *                                                                                                                   // 257\n   * @param {object} nextProps                                                                                         // 258\n   * @param {?object} nextState                                                                                        // 259\n   * @param {?object} nextContext                                                                                      // 260\n   * @param {ReactReconcileTransaction} transaction                                                                    // 261\n   * @optional                                                                                                         // 262\n   */                                                                                                                  // 263\n  componentWillUpdate: SpecPolicy.DEFINE_MANY,                                                                         // 264\n                                                                                                                       // 265\n  /**                                                                                                                  // 266\n   * Invoked when the component's DOM representation has been updated.                                                 // 267\n   *                                                                                                                   // 268\n   * Use this as an opportunity to operate on the DOM when the component has                                           // 269\n   * been updated.                                                                                                     // 270\n   *                                                                                                                   // 271\n   * @param {object} prevProps                                                                                         // 272\n   * @param {?object} prevState                                                                                        // 273\n   * @param {?object} prevContext                                                                                      // 274\n   * @param {DOMElement} rootNode DOM element representing the component.                                              // 275\n   * @optional                                                                                                         // 276\n   */                                                                                                                  // 277\n  componentDidUpdate: SpecPolicy.DEFINE_MANY,                                                                          // 278\n                                                                                                                       // 279\n  /**                                                                                                                  // 280\n   * Invoked when the component is about to be removed from its parent and have                                        // 281\n   * its DOM representation destroyed.                                                                                 // 282\n   *                                                                                                                   // 283\n   * Use this as an opportunity to deallocate any external resources.                                                  // 284\n   *                                                                                                                   // 285\n   * NOTE: There is no `componentDidUnmount` since your component will have been                                       // 286\n   * destroyed by that point.                                                                                          // 287\n   *                                                                                                                   // 288\n   * @optional                                                                                                         // 289\n   */                                                                                                                  // 290\n  componentWillUnmount: SpecPolicy.DEFINE_MANY,                                                                        // 291\n                                                                                                                       // 292\n  // ==== Advanced methods ====                                                                                        // 293\n                                                                                                                       // 294\n  /**                                                                                                                  // 295\n   * Updates the component's currently mounted DOM representation.                                                     // 296\n   *                                                                                                                   // 297\n   * By default, this implements React's rendering and reconciliation algorithm.                                       // 298\n   * Sophisticated clients may wish to override this.                                                                  // 299\n   *                                                                                                                   // 300\n   * @param {ReactReconcileTransaction} transaction                                                                    // 301\n   * @internal                                                                                                         // 302\n   * @overridable                                                                                                      // 303\n   */                                                                                                                  // 304\n  updateComponent: SpecPolicy.OVERRIDE_BASE                                                                            // 305\n                                                                                                                       // 306\n};                                                                                                                     // 307\n                                                                                                                       // 308\n/**                                                                                                                    // 309\n * Mapping from class specification keys to special processing functions.                                              // 310\n *                                                                                                                     // 311\n * Although these are declared like instance properties in the specification                                           // 312\n * when defining classes using `React.createClass`, they are actually static                                           // 313\n * and are accessible on the constructor instead of the prototype. Despite                                             // 314\n * being static, they must be defined outside of the \"statics\" key under                                               // 315\n * which all other static methods are defined.                                                                         // 316\n */                                                                                                                    // 317\nvar RESERVED_SPEC_KEYS = {                                                                                             // 318\n  displayName: function (Constructor, displayName) {                                                                   // 319\n    Constructor.displayName = displayName;                                                                             // 320\n  },                                                                                                                   // 321\n  mixins: function (Constructor, mixins) {                                                                             // 322\n    if (mixins) {                                                                                                      // 323\n      for (var i = 0; i < mixins.length; i++) {                                                                        // 324\n        mixSpecIntoComponent(Constructor, mixins[i]);                                                                  // 325\n      }                                                                                                                // 326\n    }                                                                                                                  // 327\n  },                                                                                                                   // 328\n  childContextTypes: function (Constructor, childContextTypes) {                                                       // 329\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 330\n      validateTypeDef(Constructor, childContextTypes, ReactPropTypeLocations.childContext);                            // 331\n    }                                                                                                                  // 332\n    Constructor.childContextTypes = assign({}, Constructor.childContextTypes, childContextTypes);                      // 333\n  },                                                                                                                   // 334\n  contextTypes: function (Constructor, contextTypes) {                                                                 // 335\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 336\n      validateTypeDef(Constructor, contextTypes, ReactPropTypeLocations.context);                                      // 337\n    }                                                                                                                  // 338\n    Constructor.contextTypes = assign({}, Constructor.contextTypes, contextTypes);                                     // 339\n  },                                                                                                                   // 340\n  /**                                                                                                                  // 341\n   * Special case getDefaultProps which should move into statics but requires                                          // 342\n   * automatic merging.                                                                                                // 343\n   */                                                                                                                  // 344\n  getDefaultProps: function (Constructor, getDefaultProps) {                                                           // 345\n    if (Constructor.getDefaultProps) {                                                                                 // 346\n      Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, getDefaultProps);          // 347\n    } else {                                                                                                           // 348\n      Constructor.getDefaultProps = getDefaultProps;                                                                   // 349\n    }                                                                                                                  // 350\n  },                                                                                                                   // 351\n  propTypes: function (Constructor, propTypes) {                                                                       // 352\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 353\n      validateTypeDef(Constructor, propTypes, ReactPropTypeLocations.prop);                                            // 354\n    }                                                                                                                  // 355\n    Constructor.propTypes = assign({}, Constructor.propTypes, propTypes);                                              // 356\n  },                                                                                                                   // 357\n  statics: function (Constructor, statics) {                                                                           // 358\n    mixStaticSpecIntoComponent(Constructor, statics);                                                                  // 359\n  },                                                                                                                   // 360\n  autobind: function () {} };                                                                                          // 361\n                                                                                                                       // 362\n// noop                                                                                                                // 363\nfunction validateTypeDef(Constructor, typeDef, location) {                                                             // 364\n  for (var propName in typeDef) {                                                                                      // 365\n    if (typeDef.hasOwnProperty(propName)) {                                                                            // 366\n      // use a warning instead of an invariant so components                                                           // 367\n      // don't show up in prod but not in __DEV__                                                                      // 368\n      process.env.NODE_ENV !== 'production' ? warning(typeof typeDef[propName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', Constructor.displayName || 'ReactClass', ReactPropTypeLocationNames[location], propName) : undefined;\n    }                                                                                                                  // 370\n  }                                                                                                                    // 371\n}                                                                                                                      // 372\n                                                                                                                       // 373\nfunction validateMethodOverride(proto, name) {                                                                         // 374\n  var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null;                        // 375\n                                                                                                                       // 376\n  // Disallow overriding of base class methods unless explicitly allowed.                                              // 377\n  if (ReactClassMixin.hasOwnProperty(name)) {                                                                          // 378\n    !(specPolicy === SpecPolicy.OVERRIDE_BASE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to override ' + '`%s` from your class specification. Ensure that your method names ' + 'do not overlap with React methods.', name) : invariant(false) : undefined;\n  }                                                                                                                    // 380\n                                                                                                                       // 381\n  // Disallow defining methods more than once unless explicitly allowed.                                               // 382\n  if (proto.hasOwnProperty(name)) {                                                                                    // 383\n    !(specPolicy === SpecPolicy.DEFINE_MANY || specPolicy === SpecPolicy.DEFINE_MANY_MERGED) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to define ' + '`%s` on your component more than once. This conflict may be due ' + 'to a mixin.', name) : invariant(false) : undefined;\n  }                                                                                                                    // 385\n}                                                                                                                      // 386\n                                                                                                                       // 387\n/**                                                                                                                    // 388\n * Mixin helper which handles policy validation and reserved                                                           // 389\n * specification keys when building React classses.                                                                    // 390\n */                                                                                                                    // 391\nfunction mixSpecIntoComponent(Constructor, spec) {                                                                     // 392\n  if (!spec) {                                                                                                         // 393\n    return;                                                                                                            // 394\n  }                                                                                                                    // 395\n                                                                                                                       // 396\n  !(typeof spec !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\\'re attempting to ' + 'use a component class as a mixin. Instead, just use a regular object.') : invariant(false) : undefined;\n  !!ReactElement.isValidElement(spec) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\\'re attempting to ' + 'use a component as a mixin. Instead, just use a regular object.') : invariant(false) : undefined;\n                                                                                                                       // 399\n  var proto = Constructor.prototype;                                                                                   // 400\n                                                                                                                       // 401\n  // By handling mixins before any other properties, we ensure the same                                                // 402\n  // chaining order is applied to methods with DEFINE_MANY policy, whether                                             // 403\n  // mixins are listed before or after these methods in the spec.                                                      // 404\n  if (spec.hasOwnProperty(MIXINS_KEY)) {                                                                               // 405\n    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);                                                               // 406\n  }                                                                                                                    // 407\n                                                                                                                       // 408\n  for (var name in spec) {                                                                                             // 409\n    if (!spec.hasOwnProperty(name)) {                                                                                  // 410\n      continue;                                                                                                        // 411\n    }                                                                                                                  // 412\n                                                                                                                       // 413\n    if (name === MIXINS_KEY) {                                                                                         // 414\n      // We have already handled mixins in a special case above.                                                       // 415\n      continue;                                                                                                        // 416\n    }                                                                                                                  // 417\n                                                                                                                       // 418\n    var property = spec[name];                                                                                         // 419\n    validateMethodOverride(proto, name);                                                                               // 420\n                                                                                                                       // 421\n    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {                                                                     // 422\n      RESERVED_SPEC_KEYS[name](Constructor, property);                                                                 // 423\n    } else {                                                                                                           // 424\n      // Setup methods on prototype:                                                                                   // 425\n      // The following member methods should not be automatically bound:                                               // 426\n      // 1. Expected ReactClass methods (in the \"interface\").                                                          // 427\n      // 2. Overridden methods (that were mixed in).                                                                   // 428\n      var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);                                               // 429\n      var isAlreadyDefined = proto.hasOwnProperty(name);                                                               // 430\n      var isFunction = typeof property === 'function';                                                                 // 431\n      var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;          // 432\n                                                                                                                       // 433\n      if (shouldAutoBind) {                                                                                            // 434\n        if (!proto.__reactAutoBindMap) {                                                                               // 435\n          proto.__reactAutoBindMap = {};                                                                               // 436\n        }                                                                                                              // 437\n        proto.__reactAutoBindMap[name] = property;                                                                     // 438\n        proto[name] = property;                                                                                        // 439\n      } else {                                                                                                         // 440\n        if (isAlreadyDefined) {                                                                                        // 441\n          var specPolicy = ReactClassInterface[name];                                                                  // 442\n                                                                                                                       // 443\n          // These cases should already be caught by validateMethodOverride.                                           // 444\n          !(isReactClassMethod && (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: Unexpected spec policy %s for key %s ' + 'when mixing in component specs.', specPolicy, name) : invariant(false) : undefined;\n                                                                                                                       // 446\n          // For methods which are defined more than once, call the existing                                           // 447\n          // methods before calling the new property, merging if appropriate.                                          // 448\n          if (specPolicy === SpecPolicy.DEFINE_MANY_MERGED) {                                                          // 449\n            proto[name] = createMergedResultFunction(proto[name], property);                                           // 450\n          } else if (specPolicy === SpecPolicy.DEFINE_MANY) {                                                          // 451\n            proto[name] = createChainedFunction(proto[name], property);                                                // 452\n          }                                                                                                            // 453\n        } else {                                                                                                       // 454\n          proto[name] = property;                                                                                      // 455\n          if (process.env.NODE_ENV !== 'production') {                                                                 // 456\n            // Add verbose displayName to the function, which helps when looking                                       // 457\n            // at profiling tools.                                                                                     // 458\n            if (typeof property === 'function' && spec.displayName) {                                                  // 459\n              proto[name].displayName = spec.displayName + '_' + name;                                                 // 460\n            }                                                                                                          // 461\n          }                                                                                                            // 462\n        }                                                                                                              // 463\n      }                                                                                                                // 464\n    }                                                                                                                  // 465\n  }                                                                                                                    // 466\n}                                                                                                                      // 467\n                                                                                                                       // 468\nfunction mixStaticSpecIntoComponent(Constructor, statics) {                                                            // 469\n  if (!statics) {                                                                                                      // 470\n    return;                                                                                                            // 471\n  }                                                                                                                    // 472\n  for (var name in statics) {                                                                                          // 473\n    var property = statics[name];                                                                                      // 474\n    if (!statics.hasOwnProperty(name)) {                                                                               // 475\n      continue;                                                                                                        // 476\n    }                                                                                                                  // 477\n                                                                                                                       // 478\n    var isReserved = (name in RESERVED_SPEC_KEYS);                                                                     // 479\n    !!isReserved ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define a reserved ' + 'property, `%s`, that shouldn\\'t be on the \"statics\" key. Define it ' + 'as an instance property instead; it will still be accessible on the ' + 'constructor.', name) : invariant(false) : undefined;\n                                                                                                                       // 481\n    var isInherited = (name in Constructor);                                                                           // 482\n    !!isInherited ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define ' + '`%s` on your component more than once. This conflict may be ' + 'due to a mixin.', name) : invariant(false) : undefined;\n    Constructor[name] = property;                                                                                      // 484\n  }                                                                                                                    // 485\n}                                                                                                                      // 486\n                                                                                                                       // 487\n/**                                                                                                                    // 488\n * Merge two objects, but throw if both contain the same key.                                                          // 489\n *                                                                                                                     // 490\n * @param {object} one The first object, which is mutated.                                                             // 491\n * @param {object} two The second object                                                                               // 492\n * @return {object} one after it has been mutated to contain everything in two.                                        // 493\n */                                                                                                                    // 494\nfunction mergeIntoWithNoDuplicateKeys(one, two) {                                                                      // 495\n  !(one && two && typeof one === 'object' && typeof two === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.') : invariant(false) : undefined;\n                                                                                                                       // 497\n  for (var key in two) {                                                                                               // 498\n    if (two.hasOwnProperty(key)) {                                                                                     // 499\n      !(one[key] === undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): ' + 'Tried to merge two objects with the same key: `%s`. This conflict ' + 'may be due to a mixin; in particular, this may be caused by two ' + 'getInitialState() or getDefaultProps() methods returning objects ' + 'with clashing keys.', key) : invariant(false) : undefined;\n      one[key] = two[key];                                                                                             // 501\n    }                                                                                                                  // 502\n  }                                                                                                                    // 503\n  return one;                                                                                                          // 504\n}                                                                                                                      // 505\n                                                                                                                       // 506\n/**                                                                                                                    // 507\n * Creates a function that invokes two functions and merges their return values.                                       // 508\n *                                                                                                                     // 509\n * @param {function} one Function to invoke first.                                                                     // 510\n * @param {function} two Function to invoke second.                                                                    // 511\n * @return {function} Function that invokes the two argument functions.                                                // 512\n * @private                                                                                                            // 513\n */                                                                                                                    // 514\nfunction createMergedResultFunction(one, two) {                                                                        // 515\n  return function mergedResult() {                                                                                     // 516\n    var a = one.apply(this, arguments);                                                                                // 517\n    var b = two.apply(this, arguments);                                                                                // 518\n    if (a == null) {                                                                                                   // 519\n      return b;                                                                                                        // 520\n    } else if (b == null) {                                                                                            // 521\n      return a;                                                                                                        // 522\n    }                                                                                                                  // 523\n    var c = {};                                                                                                        // 524\n    mergeIntoWithNoDuplicateKeys(c, a);                                                                                // 525\n    mergeIntoWithNoDuplicateKeys(c, b);                                                                                // 526\n    return c;                                                                                                          // 527\n  };                                                                                                                   // 528\n}                                                                                                                      // 529\n                                                                                                                       // 530\n/**                                                                                                                    // 531\n * Creates a function that invokes two functions and ignores their return vales.                                       // 532\n *                                                                                                                     // 533\n * @param {function} one Function to invoke first.                                                                     // 534\n * @param {function} two Function to invoke second.                                                                    // 535\n * @return {function} Function that invokes the two argument functions.                                                // 536\n * @private                                                                                                            // 537\n */                                                                                                                    // 538\nfunction createChainedFunction(one, two) {                                                                             // 539\n  return function chainedFunction() {                                                                                  // 540\n    one.apply(this, arguments);                                                                                        // 541\n    two.apply(this, arguments);                                                                                        // 542\n  };                                                                                                                   // 543\n}                                                                                                                      // 544\n                                                                                                                       // 545\n/**                                                                                                                    // 546\n * Binds a method to the component.                                                                                    // 547\n *                                                                                                                     // 548\n * @param {object} component Component whose method is going to be bound.                                              // 549\n * @param {function} method Method to be bound.                                                                        // 550\n * @return {function} The bound method.                                                                                // 551\n */                                                                                                                    // 552\nfunction bindAutoBindMethod(component, method) {                                                                       // 553\n  var boundMethod = method.bind(component);                                                                            // 554\n  if (process.env.NODE_ENV !== 'production') {                                                                         // 555\n    boundMethod.__reactBoundContext = component;                                                                       // 556\n    boundMethod.__reactBoundMethod = method;                                                                           // 557\n    boundMethod.__reactBoundArguments = null;                                                                          // 558\n    var componentName = component.constructor.displayName;                                                             // 559\n    var _bind = boundMethod.bind;                                                                                      // 560\n    /* eslint-disable block-scoped-var, no-undef */                                                                    // 561\n    boundMethod.bind = function (newThis) {                                                                            // 562\n      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {        // 563\n        args[_key - 1] = arguments[_key];                                                                              // 564\n      }                                                                                                                // 565\n                                                                                                                       // 566\n      // User is trying to bind() an autobound method; we effectively will                                             // 567\n      // ignore the value of \"this\" that the user is trying to use, so                                                 // 568\n      // let's warn.                                                                                                   // 569\n      if (newThis !== component && newThis !== null) {                                                                 // 570\n        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): React component methods may only be bound to the ' + 'component instance. See %s', componentName) : undefined;\n      } else if (!args.length) {                                                                                       // 572\n        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See %s', componentName) : undefined;\n        return boundMethod;                                                                                            // 574\n      }                                                                                                                // 575\n      var reboundMethod = _bind.apply(boundMethod, arguments);                                                         // 576\n      reboundMethod.__reactBoundContext = component;                                                                   // 577\n      reboundMethod.__reactBoundMethod = method;                                                                       // 578\n      reboundMethod.__reactBoundArguments = args;                                                                      // 579\n      return reboundMethod;                                                                                            // 580\n      /* eslint-enable */                                                                                              // 581\n    };                                                                                                                 // 582\n  }                                                                                                                    // 583\n  return boundMethod;                                                                                                  // 584\n}                                                                                                                      // 585\n                                                                                                                       // 586\n/**                                                                                                                    // 587\n * Binds all auto-bound methods in a component.                                                                        // 588\n *                                                                                                                     // 589\n * @param {object} component Component whose method is going to be bound.                                              // 590\n */                                                                                                                    // 591\nfunction bindAutoBindMethods(component) {                                                                              // 592\n  for (var autoBindKey in component.__reactAutoBindMap) {                                                              // 593\n    if (component.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {                                                    // 594\n      var method = component.__reactAutoBindMap[autoBindKey];                                                          // 595\n      component[autoBindKey] = bindAutoBindMethod(component, method);                                                  // 596\n    }                                                                                                                  // 597\n  }                                                                                                                    // 598\n}                                                                                                                      // 599\n                                                                                                                       // 600\n/**                                                                                                                    // 601\n * Add more to the ReactClass base class. These are all legacy features and                                            // 602\n * therefore not already part of the modern ReactComponent.                                                            // 603\n */                                                                                                                    // 604\nvar ReactClassMixin = {                                                                                                // 605\n                                                                                                                       // 606\n  /**                                                                                                                  // 607\n   * TODO: This will be deprecated because state should always keep a consistent                                       // 608\n   * type signature and the only use case for this, is to avoid that.                                                  // 609\n   */                                                                                                                  // 610\n  replaceState: function (newState, callback) {                                                                        // 611\n    this.updater.enqueueReplaceState(this, newState);                                                                  // 612\n    if (callback) {                                                                                                    // 613\n      this.updater.enqueueCallback(this, callback);                                                                    // 614\n    }                                                                                                                  // 615\n  },                                                                                                                   // 616\n                                                                                                                       // 617\n  /**                                                                                                                  // 618\n   * Checks whether or not this composite component is mounted.                                                        // 619\n   * @return {boolean} True if mounted, false otherwise.                                                               // 620\n   * @protected                                                                                                        // 621\n   * @final                                                                                                            // 622\n   */                                                                                                                  // 623\n  isMounted: function () {                                                                                             // 624\n    return this.updater.isMounted(this);                                                                               // 625\n  },                                                                                                                   // 626\n                                                                                                                       // 627\n  /**                                                                                                                  // 628\n   * Sets a subset of the props.                                                                                       // 629\n   *                                                                                                                   // 630\n   * @param {object} partialProps Subset of the next props.                                                            // 631\n   * @param {?function} callback Called after props are updated.                                                       // 632\n   * @final                                                                                                            // 633\n   * @public                                                                                                           // 634\n   * @deprecated                                                                                                       // 635\n   */                                                                                                                  // 636\n  setProps: function (partialProps, callback) {                                                                        // 637\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 638\n      warnSetProps();                                                                                                  // 639\n    }                                                                                                                  // 640\n    this.updater.enqueueSetProps(this, partialProps);                                                                  // 641\n    if (callback) {                                                                                                    // 642\n      this.updater.enqueueCallback(this, callback);                                                                    // 643\n    }                                                                                                                  // 644\n  },                                                                                                                   // 645\n                                                                                                                       // 646\n  /**                                                                                                                  // 647\n   * Replace all the props.                                                                                            // 648\n   *                                                                                                                   // 649\n   * @param {object} newProps Subset of the next props.                                                                // 650\n   * @param {?function} callback Called after props are updated.                                                       // 651\n   * @final                                                                                                            // 652\n   * @public                                                                                                           // 653\n   * @deprecated                                                                                                       // 654\n   */                                                                                                                  // 655\n  replaceProps: function (newProps, callback) {                                                                        // 656\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 657\n      warnSetProps();                                                                                                  // 658\n    }                                                                                                                  // 659\n    this.updater.enqueueReplaceProps(this, newProps);                                                                  // 660\n    if (callback) {                                                                                                    // 661\n      this.updater.enqueueCallback(this, callback);                                                                    // 662\n    }                                                                                                                  // 663\n  }                                                                                                                    // 664\n};                                                                                                                     // 665\n                                                                                                                       // 666\nvar ReactClassComponent = function () {};                                                                              // 667\nassign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);                                      // 668\n                                                                                                                       // 669\n/**                                                                                                                    // 670\n * Module for creating composite components.                                                                           // 671\n *                                                                                                                     // 672\n * @class ReactClass                                                                                                   // 673\n */                                                                                                                    // 674\nvar ReactClass = {                                                                                                     // 675\n                                                                                                                       // 676\n  /**                                                                                                                  // 677\n   * Creates a composite component class given a class specification.                                                  // 678\n   *                                                                                                                   // 679\n   * @param {object} spec Class specification (which must define `render`).                                            // 680\n   * @return {function} Component constructor function.                                                                // 681\n   * @public                                                                                                           // 682\n   */                                                                                                                  // 683\n  createClass: function (spec) {                                                                                       // 684\n    var Constructor = function (props, context, updater) {                                                             // 685\n      // This constructor is overridden by mocks. The argument is used                                                 // 686\n      // by mocks to assert on what gets mounted.                                                                      // 687\n                                                                                                                       // 688\n      if (process.env.NODE_ENV !== 'production') {                                                                     // 689\n        process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : undefined;\n      }                                                                                                                // 691\n                                                                                                                       // 692\n      // Wire up auto-binding                                                                                          // 693\n      if (this.__reactAutoBindMap) {                                                                                   // 694\n        bindAutoBindMethods(this);                                                                                     // 695\n      }                                                                                                                // 696\n                                                                                                                       // 697\n      this.props = props;                                                                                              // 698\n      this.context = context;                                                                                          // 699\n      this.refs = emptyObject;                                                                                         // 700\n      this.updater = updater || ReactNoopUpdateQueue;                                                                  // 701\n                                                                                                                       // 702\n      this.state = null;                                                                                               // 703\n                                                                                                                       // 704\n      // ReactClasses doesn't have constructors. Instead, they use the                                                 // 705\n      // getInitialState and componentWillMount methods for initialization.                                            // 706\n                                                                                                                       // 707\n      var initialState = this.getInitialState ? this.getInitialState() : null;                                         // 708\n      if (process.env.NODE_ENV !== 'production') {                                                                     // 709\n        // We allow auto-mocks to proceed as if they're returning null.                                                // 710\n        if (typeof initialState === 'undefined' && this.getInitialState._isMockFunction) {                             // 711\n          // This is probably bad practice. Consider warning here and                                                  // 712\n          // deprecating this convenience.                                                                             // 713\n          initialState = null;                                                                                         // 714\n        }                                                                                                              // 715\n      }                                                                                                                // 716\n      !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : invariant(false) : undefined;\n                                                                                                                       // 718\n      this.state = initialState;                                                                                       // 719\n    };                                                                                                                 // 720\n    Constructor.prototype = new ReactClassComponent();                                                                 // 721\n    Constructor.prototype.constructor = Constructor;                                                                   // 722\n                                                                                                                       // 723\n    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));                                              // 724\n                                                                                                                       // 725\n    mixSpecIntoComponent(Constructor, spec);                                                                           // 726\n                                                                                                                       // 727\n    // Initialize the defaultProps property after all mixins have been merged.                                         // 728\n    if (Constructor.getDefaultProps) {                                                                                 // 729\n      Constructor.defaultProps = Constructor.getDefaultProps();                                                        // 730\n    }                                                                                                                  // 731\n                                                                                                                       // 732\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 733\n      // This is a tag to indicate that the use of these method names is ok,                                           // 734\n      // since it's used with createClass. If it's not, then it's likely a                                             // 735\n      // mistake so we'll warn you to use the static property, property                                                // 736\n      // initializer or constructor respectively.                                                                      // 737\n      if (Constructor.getDefaultProps) {                                                                               // 738\n        Constructor.getDefaultProps.isReactClassApproved = {};                                                         // 739\n      }                                                                                                                // 740\n      if (Constructor.prototype.getInitialState) {                                                                     // 741\n        Constructor.prototype.getInitialState.isReactClassApproved = {};                                               // 742\n      }                                                                                                                // 743\n    }                                                                                                                  // 744\n                                                                                                                       // 745\n    !Constructor.prototype.render ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createClass(...): Class specification must implement a `render` method.') : invariant(false) : undefined;\n                                                                                                                       // 747\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 748\n      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', spec.displayName || 'A component') : undefined;\n      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', spec.displayName || 'A component') : undefined;\n    }                                                                                                                  // 751\n                                                                                                                       // 752\n    // Reduce time spent doing lookups by setting these on the prototype.                                              // 753\n    for (var methodName in ReactClassInterface) {                                                                      // 754\n      if (!Constructor.prototype[methodName]) {                                                                        // 755\n        Constructor.prototype[methodName] = null;                                                                      // 756\n      }                                                                                                                // 757\n    }                                                                                                                  // 758\n                                                                                                                       // 759\n    return Constructor;                                                                                                // 760\n  },                                                                                                                   // 761\n                                                                                                                       // 762\n  injection: {                                                                                                         // 763\n    injectMixin: function (mixin) {                                                                                    // 764\n      injectedMixins.push(mixin);                                                                                      // 765\n    }                                                                                                                  // 766\n  }                                                                                                                    // 767\n                                                                                                                       // 768\n};                                                                                                                     // 769\n                                                                                                                       // 770\nmodule.exports = ReactClass;                                                                                           // 771\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactComponent.js\":[\"./ReactNoopUpdateQueue\",\"./canDefineProperty\",\"fbjs/lib/emptyObject\",\"fbjs/lib/invariant\",\"fbjs/lib/warning\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactComponent.js                                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactComponent                                                                                      // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar ReactNoopUpdateQueue = require('./ReactNoopUpdateQueue');                                                          // 14\n                                                                                                                       // 15\nvar canDefineProperty = require('./canDefineProperty');                                                                // 16\nvar emptyObject = require('fbjs/lib/emptyObject');                                                                     // 17\nvar invariant = require('fbjs/lib/invariant');                                                                         // 18\nvar warning = require('fbjs/lib/warning');                                                                             // 19\n                                                                                                                       // 20\n/**                                                                                                                    // 21\n * Base class helpers for the updating state of a component.                                                           // 22\n */                                                                                                                    // 23\nfunction ReactComponent(props, context, updater) {                                                                     // 24\n  this.props = props;                                                                                                  // 25\n  this.context = context;                                                                                              // 26\n  this.refs = emptyObject;                                                                                             // 27\n  // We initialize the default updater but the real one gets injected by the                                           // 28\n  // renderer.                                                                                                         // 29\n  this.updater = updater || ReactNoopUpdateQueue;                                                                      // 30\n}                                                                                                                      // 31\n                                                                                                                       // 32\nReactComponent.prototype.isReactComponent = {};                                                                        // 33\n                                                                                                                       // 34\n/**                                                                                                                    // 35\n * Sets a subset of the state. Always use this to mutate                                                               // 36\n * state. You should treat `this.state` as immutable.                                                                  // 37\n *                                                                                                                     // 38\n * There is no guarantee that `this.state` will be immediately updated, so                                             // 39\n * accessing `this.state` after calling this method may return the old value.                                          // 40\n *                                                                                                                     // 41\n * There is no guarantee that calls to `setState` will run synchronously,                                              // 42\n * as they may eventually be batched together.  You can provide an optional                                            // 43\n * callback that will be executed when the call to setState is actually                                                // 44\n * completed.                                                                                                          // 45\n *                                                                                                                     // 46\n * When a function is provided to setState, it will be called at some point in                                         // 47\n * the future (not synchronously). It will be called with the up to date                                               // 48\n * component arguments (state, props, context). These values can be different                                          // 49\n * from this.* because your function may be called after receiveProps but before                                       // 50\n * shouldComponentUpdate, and this new state, props, and context will not yet be                                       // 51\n * assigned to this.                                                                                                   // 52\n *                                                                                                                     // 53\n * @param {object|function} partialState Next partial state or function to                                             // 54\n *        produce next partial state to be merged with current state.                                                  // 55\n * @param {?function} callback Called after state is updated.                                                          // 56\n * @final                                                                                                              // 57\n * @protected                                                                                                          // 58\n */                                                                                                                    // 59\nReactComponent.prototype.setState = function (partialState, callback) {                                                // 60\n  !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setState(...): takes an object of state variables to update or a ' + 'function which returns an object of state variables.') : invariant(false) : undefined;\n  if (process.env.NODE_ENV !== 'production') {                                                                         // 62\n    process.env.NODE_ENV !== 'production' ? warning(partialState != null, 'setState(...): You passed an undefined or null state object; ' + 'instead, use forceUpdate().') : undefined;\n  }                                                                                                                    // 64\n  this.updater.enqueueSetState(this, partialState);                                                                    // 65\n  if (callback) {                                                                                                      // 66\n    this.updater.enqueueCallback(this, callback);                                                                      // 67\n  }                                                                                                                    // 68\n};                                                                                                                     // 69\n                                                                                                                       // 70\n/**                                                                                                                    // 71\n * Forces an update. This should only be invoked when it is known with                                                 // 72\n * certainty that we are **not** in a DOM transaction.                                                                 // 73\n *                                                                                                                     // 74\n * You may want to call this when you know that some deeper aspect of the                                              // 75\n * component's state has changed but `setState` was not called.                                                        // 76\n *                                                                                                                     // 77\n * This will not invoke `shouldComponentUpdate`, but it will invoke                                                    // 78\n * `componentWillUpdate` and `componentDidUpdate`.                                                                     // 79\n *                                                                                                                     // 80\n * @param {?function} callback Called after update is complete.                                                        // 81\n * @final                                                                                                              // 82\n * @protected                                                                                                          // 83\n */                                                                                                                    // 84\nReactComponent.prototype.forceUpdate = function (callback) {                                                           // 85\n  this.updater.enqueueForceUpdate(this);                                                                               // 86\n  if (callback) {                                                                                                      // 87\n    this.updater.enqueueCallback(this, callback);                                                                      // 88\n  }                                                                                                                    // 89\n};                                                                                                                     // 90\n                                                                                                                       // 91\n/**                                                                                                                    // 92\n * Deprecated APIs. These APIs used to exist on classic React classes but since                                        // 93\n * we would like to deprecate them, we're not going to move them over to this                                          // 94\n * modern base class. Instead, we define a getter that warns if it's accessed.                                         // 95\n */                                                                                                                    // 96\nif (process.env.NODE_ENV !== 'production') {                                                                           // 97\n  var deprecatedAPIs = {                                                                                               // 98\n    getDOMNode: ['getDOMNode', 'Use ReactDOM.findDOMNode(component) instead.'],                                        // 99\n    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],\n    replaceProps: ['replaceProps', 'Instead, call render again at the top level.'],                                    // 101\n    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).'],\n    setProps: ['setProps', 'Instead, call render again at the top level.']                                             // 103\n  };                                                                                                                   // 104\n  var defineDeprecationWarning = function (methodName, info) {                                                         // 105\n    if (canDefineProperty) {                                                                                           // 106\n      Object.defineProperty(ReactComponent.prototype, methodName, {                                                    // 107\n        get: function () {                                                                                             // 108\n          process.env.NODE_ENV !== 'production' ? warning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]) : undefined;\n          return undefined;                                                                                            // 110\n        }                                                                                                              // 111\n      });                                                                                                              // 112\n    }                                                                                                                  // 113\n  };                                                                                                                   // 114\n  for (var fnName in deprecatedAPIs) {                                                                                 // 115\n    if (deprecatedAPIs.hasOwnProperty(fnName)) {                                                                       // 116\n      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);                                                        // 117\n    }                                                                                                                  // 118\n  }                                                                                                                    // 119\n}                                                                                                                      // 120\n                                                                                                                       // 121\nmodule.exports = ReactComponent;                                                                                       // 122\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactNoopUpdateQueue.js\":[\"fbjs/lib/warning\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactNoopUpdateQueue.js                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2015, Facebook, Inc.                                                                                      // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactNoopUpdateQueue                                                                                // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar warning = require('fbjs/lib/warning');                                                                             // 14\n                                                                                                                       // 15\nfunction warnTDZ(publicInstance, callerName) {                                                                         // 16\n  if (process.env.NODE_ENV !== 'production') {                                                                         // 17\n    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, publicInstance.constructor && publicInstance.constructor.displayName || '') : undefined;\n  }                                                                                                                    // 19\n}                                                                                                                      // 20\n                                                                                                                       // 21\n/**                                                                                                                    // 22\n * This is the abstract API for an update queue.                                                                       // 23\n */                                                                                                                    // 24\nvar ReactNoopUpdateQueue = {                                                                                           // 25\n                                                                                                                       // 26\n  /**                                                                                                                  // 27\n   * Checks whether or not this composite component is mounted.                                                        // 28\n   * @param {ReactClass} publicInstance The instance we want to test.                                                  // 29\n   * @return {boolean} True if mounted, false otherwise.                                                               // 30\n   * @protected                                                                                                        // 31\n   * @final                                                                                                            // 32\n   */                                                                                                                  // 33\n  isMounted: function (publicInstance) {                                                                               // 34\n    return false;                                                                                                      // 35\n  },                                                                                                                   // 36\n                                                                                                                       // 37\n  /**                                                                                                                  // 38\n   * Enqueue a callback that will be executed after all the pending updates                                            // 39\n   * have processed.                                                                                                   // 40\n   *                                                                                                                   // 41\n   * @param {ReactClass} publicInstance The instance to use as `this` context.                                         // 42\n   * @param {?function} callback Called after state is updated.                                                        // 43\n   * @internal                                                                                                         // 44\n   */                                                                                                                  // 45\n  enqueueCallback: function (publicInstance, callback) {},                                                             // 46\n                                                                                                                       // 47\n  /**                                                                                                                  // 48\n   * Forces an update. This should only be invoked when it is known with                                               // 49\n   * certainty that we are **not** in a DOM transaction.                                                               // 50\n   *                                                                                                                   // 51\n   * You may want to call this when you know that some deeper aspect of the                                            // 52\n   * component's state has changed but `setState` was not called.                                                      // 53\n   *                                                                                                                   // 54\n   * This will not invoke `shouldComponentUpdate`, but it will invoke                                                  // 55\n   * `componentWillUpdate` and `componentDidUpdate`.                                                                   // 56\n   *                                                                                                                   // 57\n   * @param {ReactClass} publicInstance The instance that should rerender.                                             // 58\n   * @internal                                                                                                         // 59\n   */                                                                                                                  // 60\n  enqueueForceUpdate: function (publicInstance) {                                                                      // 61\n    warnTDZ(publicInstance, 'forceUpdate');                                                                            // 62\n  },                                                                                                                   // 63\n                                                                                                                       // 64\n  /**                                                                                                                  // 65\n   * Replaces all of the state. Always use this or `setState` to mutate state.                                         // 66\n   * You should treat `this.state` as immutable.                                                                       // 67\n   *                                                                                                                   // 68\n   * There is no guarantee that `this.state` will be immediately updated, so                                           // 69\n   * accessing `this.state` after calling this method may return the old value.                                        // 70\n   *                                                                                                                   // 71\n   * @param {ReactClass} publicInstance The instance that should rerender.                                             // 72\n   * @param {object} completeState Next state.                                                                         // 73\n   * @internal                                                                                                         // 74\n   */                                                                                                                  // 75\n  enqueueReplaceState: function (publicInstance, completeState) {                                                      // 76\n    warnTDZ(publicInstance, 'replaceState');                                                                           // 77\n  },                                                                                                                   // 78\n                                                                                                                       // 79\n  /**                                                                                                                  // 80\n   * Sets a subset of the state. This only exists because _pendingState is                                             // 81\n   * internal. This provides a merging strategy that is not available to deep                                          // 82\n   * properties which is confusing. TODO: Expose pendingState or don't use it                                          // 83\n   * during the merge.                                                                                                 // 84\n   *                                                                                                                   // 85\n   * @param {ReactClass} publicInstance The instance that should rerender.                                             // 86\n   * @param {object} partialState Next partial state to be merged with state.                                          // 87\n   * @internal                                                                                                         // 88\n   */                                                                                                                  // 89\n  enqueueSetState: function (publicInstance, partialState) {                                                           // 90\n    warnTDZ(publicInstance, 'setState');                                                                               // 91\n  },                                                                                                                   // 92\n                                                                                                                       // 93\n  /**                                                                                                                  // 94\n   * Sets a subset of the props.                                                                                       // 95\n   *                                                                                                                   // 96\n   * @param {ReactClass} publicInstance The instance that should rerender.                                             // 97\n   * @param {object} partialProps Subset of the next props.                                                            // 98\n   * @internal                                                                                                         // 99\n   */                                                                                                                  // 100\n  enqueueSetProps: function (publicInstance, partialProps) {                                                           // 101\n    warnTDZ(publicInstance, 'setProps');                                                                               // 102\n  },                                                                                                                   // 103\n                                                                                                                       // 104\n  /**                                                                                                                  // 105\n   * Replaces all of the props.                                                                                        // 106\n   *                                                                                                                   // 107\n   * @param {ReactClass} publicInstance The instance that should rerender.                                             // 108\n   * @param {object} props New props.                                                                                  // 109\n   * @internal                                                                                                         // 110\n   */                                                                                                                  // 111\n  enqueueReplaceProps: function (publicInstance, props) {                                                              // 112\n    warnTDZ(publicInstance, 'replaceProps');                                                                           // 113\n  }                                                                                                                    // 114\n                                                                                                                       // 115\n};                                                                                                                     // 116\n                                                                                                                       // 117\nmodule.exports = ReactNoopUpdateQueue;                                                                                 // 118\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactReconcileTransaction.js\":[\"./CallbackQueue\",\"./PooledClass\",\"./ReactBrowserEventEmitter\",\"./ReactDOMFeatureFlags\",\"./ReactInputSelection\",\"./Transaction\",\"./Object.assign\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactReconcileTransaction.js                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactReconcileTransaction                                                                           // 9\n * @typechecks static-only                                                                                             // 10\n */                                                                                                                    // 11\n                                                                                                                       // 12\n'use strict';                                                                                                          // 13\n                                                                                                                       // 14\nvar CallbackQueue = require('./CallbackQueue');                                                                        // 15\nvar PooledClass = require('./PooledClass');                                                                            // 16\nvar ReactBrowserEventEmitter = require('./ReactBrowserEventEmitter');                                                  // 17\nvar ReactDOMFeatureFlags = require('./ReactDOMFeatureFlags');                                                          // 18\nvar ReactInputSelection = require('./ReactInputSelection');                                                            // 19\nvar Transaction = require('./Transaction');                                                                            // 20\n                                                                                                                       // 21\nvar assign = require('./Object.assign');                                                                               // 22\n                                                                                                                       // 23\n/**                                                                                                                    // 24\n * Ensures that, when possible, the selection range (currently selected text                                           // 25\n * input) is not disturbed by performing the transaction.                                                              // 26\n */                                                                                                                    // 27\nvar SELECTION_RESTORATION = {                                                                                          // 28\n  /**                                                                                                                  // 29\n   * @return {Selection} Selection information.                                                                        // 30\n   */                                                                                                                  // 31\n  initialize: ReactInputSelection.getSelectionInformation,                                                             // 32\n  /**                                                                                                                  // 33\n   * @param {Selection} sel Selection information returned from `initialize`.                                          // 34\n   */                                                                                                                  // 35\n  close: ReactInputSelection.restoreSelection                                                                          // 36\n};                                                                                                                     // 37\n                                                                                                                       // 38\n/**                                                                                                                    // 39\n * Suppresses events (blur/focus) that could be inadvertently dispatched due to                                        // 40\n * high level DOM manipulations (like temporarily removing a text input from the                                       // 41\n * DOM).                                                                                                               // 42\n */                                                                                                                    // 43\nvar EVENT_SUPPRESSION = {                                                                                              // 44\n  /**                                                                                                                  // 45\n   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before                                         // 46\n   * the reconciliation.                                                                                               // 47\n   */                                                                                                                  // 48\n  initialize: function () {                                                                                            // 49\n    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();                                                       // 50\n    ReactBrowserEventEmitter.setEnabled(false);                                                                        // 51\n    return currentlyEnabled;                                                                                           // 52\n  },                                                                                                                   // 53\n                                                                                                                       // 54\n  /**                                                                                                                  // 55\n   * @param {boolean} previouslyEnabled Enabled status of                                                              // 56\n   *   `ReactBrowserEventEmitter` before the reconciliation occurred. `close`                                          // 57\n   *   restores the previous value.                                                                                    // 58\n   */                                                                                                                  // 59\n  close: function (previouslyEnabled) {                                                                                // 60\n    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);                                                            // 61\n  }                                                                                                                    // 62\n};                                                                                                                     // 63\n                                                                                                                       // 64\n/**                                                                                                                    // 65\n * Provides a queue for collecting `componentDidMount` and                                                             // 66\n * `componentDidUpdate` callbacks during the the transaction.                                                          // 67\n */                                                                                                                    // 68\nvar ON_DOM_READY_QUEUEING = {                                                                                          // 69\n  /**                                                                                                                  // 70\n   * Initializes the internal `onDOMReady` queue.                                                                      // 71\n   */                                                                                                                  // 72\n  initialize: function () {                                                                                            // 73\n    this.reactMountReady.reset();                                                                                      // 74\n  },                                                                                                                   // 75\n                                                                                                                       // 76\n  /**                                                                                                                  // 77\n   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.                                               // 78\n   */                                                                                                                  // 79\n  close: function () {                                                                                                 // 80\n    this.reactMountReady.notifyAll();                                                                                  // 81\n  }                                                                                                                    // 82\n};                                                                                                                     // 83\n                                                                                                                       // 84\n/**                                                                                                                    // 85\n * Executed within the scope of the `Transaction` instance. Consider these as                                          // 86\n * being member methods, but with an implied ordering while being isolated from                                        // 87\n * each other.                                                                                                         // 88\n */                                                                                                                    // 89\nvar TRANSACTION_WRAPPERS = [SELECTION_RESTORATION, EVENT_SUPPRESSION, ON_DOM_READY_QUEUEING];                          // 90\n                                                                                                                       // 91\n/**                                                                                                                    // 92\n * Currently:                                                                                                          // 93\n * - The order that these are listed in the transaction is critical:                                                   // 94\n * - Suppresses events.                                                                                                // 95\n * - Restores selection range.                                                                                         // 96\n *                                                                                                                     // 97\n * Future:                                                                                                             // 98\n * - Restore document/overflow scroll positions that were unintentionally                                              // 99\n *   modified via DOM insertions above the top viewport boundary.                                                      // 100\n * - Implement/integrate with customized constraint based layout system and keep                                       // 101\n *   track of which dimensions must be remeasured.                                                                     // 102\n *                                                                                                                     // 103\n * @class ReactReconcileTransaction                                                                                    // 104\n */                                                                                                                    // 105\nfunction ReactReconcileTransaction(forceHTML) {                                                                        // 106\n  this.reinitializeTransaction();                                                                                      // 107\n  // Only server-side rendering really needs this option (see                                                          // 108\n  // `ReactServerRendering`), but server-side uses                                                                     // 109\n  // `ReactServerRenderingTransaction` instead. This option is here so that it's                                       // 110\n  // accessible and defaults to false when `ReactDOMComponent` and                                                     // 111\n  // `ReactTextComponent` checks it in `mountComponent`.`                                                              // 112\n  this.renderToStaticMarkup = false;                                                                                   // 113\n  this.reactMountReady = CallbackQueue.getPooled(null);                                                                // 114\n  this.useCreateElement = !forceHTML && ReactDOMFeatureFlags.useCreateElement;                                         // 115\n}                                                                                                                      // 116\n                                                                                                                       // 117\nvar Mixin = {                                                                                                          // 118\n  /**                                                                                                                  // 119\n   * @see Transaction                                                                                                  // 120\n   * @abstract                                                                                                         // 121\n   * @final                                                                                                            // 122\n   * @return {array<object>} List of operation wrap procedures.                                                        // 123\n   *   TODO: convert to array<TransactionWrapper>                                                                      // 124\n   */                                                                                                                  // 125\n  getTransactionWrappers: function () {                                                                                // 126\n    return TRANSACTION_WRAPPERS;                                                                                       // 127\n  },                                                                                                                   // 128\n                                                                                                                       // 129\n  /**                                                                                                                  // 130\n   * @return {object} The queue to collect `onDOMReady` callbacks with.                                                // 131\n   */                                                                                                                  // 132\n  getReactMountReady: function () {                                                                                    // 133\n    return this.reactMountReady;                                                                                       // 134\n  },                                                                                                                   // 135\n                                                                                                                       // 136\n  /**                                                                                                                  // 137\n   * `PooledClass` looks for this, and will invoke this before allowing this                                           // 138\n   * instance to be reused.                                                                                            // 139\n   */                                                                                                                  // 140\n  destructor: function () {                                                                                            // 141\n    CallbackQueue.release(this.reactMountReady);                                                                       // 142\n    this.reactMountReady = null;                                                                                       // 143\n  }                                                                                                                    // 144\n};                                                                                                                     // 145\n                                                                                                                       // 146\nassign(ReactReconcileTransaction.prototype, Transaction.Mixin, Mixin);                                                 // 147\n                                                                                                                       // 148\nPooledClass.addPoolingTo(ReactReconcileTransaction);                                                                   // 149\n                                                                                                                       // 150\nmodule.exports = ReactReconcileTransaction;                                                                            // 151\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactInputSelection.js\":[\"./ReactDOMSelection\",\"fbjs/lib/containsNode\",\"fbjs/lib/focusNode\",\"fbjs/lib/getActiveElement\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactInputSelection.js                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactInputSelection                                                                                 // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar ReactDOMSelection = require('./ReactDOMSelection');                                                                // 14\n                                                                                                                       // 15\nvar containsNode = require('fbjs/lib/containsNode');                                                                   // 16\nvar focusNode = require('fbjs/lib/focusNode');                                                                         // 17\nvar getActiveElement = require('fbjs/lib/getActiveElement');                                                           // 18\n                                                                                                                       // 19\nfunction isInDocument(node) {                                                                                          // 20\n  return containsNode(document.documentElement, node);                                                                 // 21\n}                                                                                                                      // 22\n                                                                                                                       // 23\n/**                                                                                                                    // 24\n * @ReactInputSelection: React input selection module. Based on Selection.js,                                          // 25\n * but modified to be suitable for react and has a couple of bug fixes (doesn't                                        // 26\n * assume buttons have range selections allowed).                                                                      // 27\n * Input selection module for React.                                                                                   // 28\n */                                                                                                                    // 29\nvar ReactInputSelection = {                                                                                            // 30\n                                                                                                                       // 31\n  hasSelectionCapabilities: function (elem) {                                                                          // 32\n    var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();                                               // 33\n    return nodeName && (nodeName === 'input' && elem.type === 'text' || nodeName === 'textarea' || elem.contentEditable === 'true');\n  },                                                                                                                   // 35\n                                                                                                                       // 36\n  getSelectionInformation: function () {                                                                               // 37\n    var focusedElem = getActiveElement();                                                                              // 38\n    return {                                                                                                           // 39\n      focusedElem: focusedElem,                                                                                        // 40\n      selectionRange: ReactInputSelection.hasSelectionCapabilities(focusedElem) ? ReactInputSelection.getSelection(focusedElem) : null\n    };                                                                                                                 // 42\n  },                                                                                                                   // 43\n                                                                                                                       // 44\n  /**                                                                                                                  // 45\n   * @restoreSelection: If any selection information was potentially lost,                                             // 46\n   * restore it. This is useful when performing operations that could remove dom                                       // 47\n   * nodes and place them back in, resulting in focus being lost.                                                      // 48\n   */                                                                                                                  // 49\n  restoreSelection: function (priorSelectionInformation) {                                                             // 50\n    var curFocusedElem = getActiveElement();                                                                           // 51\n    var priorFocusedElem = priorSelectionInformation.focusedElem;                                                      // 52\n    var priorSelectionRange = priorSelectionInformation.selectionRange;                                                // 53\n    if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {                                       // 54\n      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {                                            // 55\n        ReactInputSelection.setSelection(priorFocusedElem, priorSelectionRange);                                       // 56\n      }                                                                                                                // 57\n      focusNode(priorFocusedElem);                                                                                     // 58\n    }                                                                                                                  // 59\n  },                                                                                                                   // 60\n                                                                                                                       // 61\n  /**                                                                                                                  // 62\n   * @getSelection: Gets the selection bounds of a focused textarea, input or                                          // 63\n   * contentEditable node.                                                                                             // 64\n   * -@input: Look up selection bounds of this input                                                                   // 65\n   * -@return {start: selectionStart, end: selectionEnd}                                                               // 66\n   */                                                                                                                  // 67\n  getSelection: function (input) {                                                                                     // 68\n    var selection;                                                                                                     // 69\n                                                                                                                       // 70\n    if ('selectionStart' in input) {                                                                                   // 71\n      // Modern browser with input or textarea.                                                                        // 72\n      selection = {                                                                                                    // 73\n        start: input.selectionStart,                                                                                   // 74\n        end: input.selectionEnd                                                                                        // 75\n      };                                                                                                               // 76\n    } else if (document.selection && (input.nodeName && input.nodeName.toLowerCase() === 'input')) {                   // 77\n      // IE8 input.                                                                                                    // 78\n      var range = document.selection.createRange();                                                                    // 79\n      // There can only be one selection per document in IE, so it must                                                // 80\n      // be in our element.                                                                                            // 81\n      if (range.parentElement() === input) {                                                                           // 82\n        selection = {                                                                                                  // 83\n          start: -range.moveStart('character', -input.value.length),                                                   // 84\n          end: -range.moveEnd('character', -input.value.length)                                                        // 85\n        };                                                                                                             // 86\n      }                                                                                                                // 87\n    } else {                                                                                                           // 88\n      // Content editable or old IE textarea.                                                                          // 89\n      selection = ReactDOMSelection.getOffsets(input);                                                                 // 90\n    }                                                                                                                  // 91\n                                                                                                                       // 92\n    return selection || { start: 0, end: 0 };                                                                          // 93\n  },                                                                                                                   // 94\n                                                                                                                       // 95\n  /**                                                                                                                  // 96\n   * @setSelection: Sets the selection bounds of a textarea or input and focuses                                       // 97\n   * the input.                                                                                                        // 98\n   * -@input     Set selection bounds of this input or textarea                                                        // 99\n   * -@offsets   Object of same form that is returned from get*                                                        // 100\n   */                                                                                                                  // 101\n  setSelection: function (input, offsets) {                                                                            // 102\n    var start = offsets.start;                                                                                         // 103\n    var end = offsets.end;                                                                                             // 104\n    if (typeof end === 'undefined') {                                                                                  // 105\n      end = start;                                                                                                     // 106\n    }                                                                                                                  // 107\n                                                                                                                       // 108\n    if ('selectionStart' in input) {                                                                                   // 109\n      input.selectionStart = start;                                                                                    // 110\n      input.selectionEnd = Math.min(end, input.value.length);                                                          // 111\n    } else if (document.selection && (input.nodeName && input.nodeName.toLowerCase() === 'input')) {                   // 112\n      var range = input.createTextRange();                                                                             // 113\n      range.collapse(true);                                                                                            // 114\n      range.moveStart('character', start);                                                                             // 115\n      range.moveEnd('character', end - start);                                                                         // 116\n      range.select();                                                                                                  // 117\n    } else {                                                                                                           // 118\n      ReactDOMSelection.setOffsets(input, offsets);                                                                    // 119\n    }                                                                                                                  // 120\n  }                                                                                                                    // 121\n};                                                                                                                     // 122\n                                                                                                                       // 123\nmodule.exports = ReactInputSelection;                                                                                  // 124\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactDOMSelection.js\":[\"fbjs/lib/ExecutionEnvironment\",\"./getNodeForCharacterOffset\",\"./getTextContentAccessor\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactDOMSelection.js                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactDOMSelection                                                                                   // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');                                                   // 14\n                                                                                                                       // 15\nvar getNodeForCharacterOffset = require('./getNodeForCharacterOffset');                                                // 16\nvar getTextContentAccessor = require('./getTextContentAccessor');                                                      // 17\n                                                                                                                       // 18\n/**                                                                                                                    // 19\n * While `isCollapsed` is available on the Selection object and `collapsed`                                            // 20\n * is available on the Range object, IE11 sometimes gets them wrong.                                                   // 21\n * If the anchor/focus nodes and offsets are the same, the range is collapsed.                                         // 22\n */                                                                                                                    // 23\nfunction isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {                                               // 24\n  return anchorNode === focusNode && anchorOffset === focusOffset;                                                     // 25\n}                                                                                                                      // 26\n                                                                                                                       // 27\n/**                                                                                                                    // 28\n * Get the appropriate anchor and focus node/offset pairs for IE.                                                      // 29\n *                                                                                                                     // 30\n * The catch here is that IE's selection API doesn't provide information                                               // 31\n * about whether the selection is forward or backward, so we have to                                                   // 32\n * behave as though it's always forward.                                                                               // 33\n *                                                                                                                     // 34\n * IE text differs from modern selection in that it behaves as though                                                  // 35\n * block elements end with a new line. This means character offsets will                                               // 36\n * differ between the two APIs.                                                                                        // 37\n *                                                                                                                     // 38\n * @param {DOMElement} node                                                                                            // 39\n * @return {object}                                                                                                    // 40\n */                                                                                                                    // 41\nfunction getIEOffsets(node) {                                                                                          // 42\n  var selection = document.selection;                                                                                  // 43\n  var selectedRange = selection.createRange();                                                                         // 44\n  var selectedLength = selectedRange.text.length;                                                                      // 45\n                                                                                                                       // 46\n  // Duplicate selection so we can move range without breaking user selection.                                         // 47\n  var fromStart = selectedRange.duplicate();                                                                           // 48\n  fromStart.moveToElementText(node);                                                                                   // 49\n  fromStart.setEndPoint('EndToStart', selectedRange);                                                                  // 50\n                                                                                                                       // 51\n  var startOffset = fromStart.text.length;                                                                             // 52\n  var endOffset = startOffset + selectedLength;                                                                        // 53\n                                                                                                                       // 54\n  return {                                                                                                             // 55\n    start: startOffset,                                                                                                // 56\n    end: endOffset                                                                                                     // 57\n  };                                                                                                                   // 58\n}                                                                                                                      // 59\n                                                                                                                       // 60\n/**                                                                                                                    // 61\n * @param {DOMElement} node                                                                                            // 62\n * @return {?object}                                                                                                   // 63\n */                                                                                                                    // 64\nfunction getModernOffsets(node) {                                                                                      // 65\n  var selection = window.getSelection && window.getSelection();                                                        // 66\n                                                                                                                       // 67\n  if (!selection || selection.rangeCount === 0) {                                                                      // 68\n    return null;                                                                                                       // 69\n  }                                                                                                                    // 70\n                                                                                                                       // 71\n  var anchorNode = selection.anchorNode;                                                                               // 72\n  var anchorOffset = selection.anchorOffset;                                                                           // 73\n  var focusNode = selection.focusNode;                                                                                 // 74\n  var focusOffset = selection.focusOffset;                                                                             // 75\n                                                                                                                       // 76\n  var currentRange = selection.getRangeAt(0);                                                                          // 77\n                                                                                                                       // 78\n  // In Firefox, range.startContainer and range.endContainer can be \"anonymous                                         // 79\n  // divs\", e.g. the up/down buttons on an <input type=\"number\">. Anonymous                                            // 80\n  // divs do not seem to expose properties, triggering a \"Permission denied                                            // 81\n  // error\" if any of its properties are accessed. The only seemingly possible                                         // 82\n  // way to avoid erroring is to access a property that typically works for                                            // 83\n  // non-anonymous divs and catch any error that may otherwise arise. See                                              // 84\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427                                                               // 85\n  try {                                                                                                                // 86\n    /* eslint-disable no-unused-expressions */                                                                         // 87\n    currentRange.startContainer.nodeType;                                                                              // 88\n    currentRange.endContainer.nodeType;                                                                                // 89\n    /* eslint-enable no-unused-expressions */                                                                          // 90\n  } catch (e) {                                                                                                        // 91\n    return null;                                                                                                       // 92\n  }                                                                                                                    // 93\n                                                                                                                       // 94\n  // If the node and offset values are the same, the selection is collapsed.                                           // 95\n  // `Selection.isCollapsed` is available natively, but IE sometimes gets                                              // 96\n  // this value wrong.                                                                                                 // 97\n  var isSelectionCollapsed = isCollapsed(selection.anchorNode, selection.anchorOffset, selection.focusNode, selection.focusOffset);\n                                                                                                                       // 99\n  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;                                         // 100\n                                                                                                                       // 101\n  var tempRange = currentRange.cloneRange();                                                                           // 102\n  tempRange.selectNodeContents(node);                                                                                  // 103\n  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);                                             // 104\n                                                                                                                       // 105\n  var isTempRangeCollapsed = isCollapsed(tempRange.startContainer, tempRange.startOffset, tempRange.endContainer, tempRange.endOffset);\n                                                                                                                       // 107\n  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;                                                  // 108\n  var end = start + rangeLength;                                                                                       // 109\n                                                                                                                       // 110\n  // Detect whether the selection is backward.                                                                         // 111\n  var detectionRange = document.createRange();                                                                         // 112\n  detectionRange.setStart(anchorNode, anchorOffset);                                                                   // 113\n  detectionRange.setEnd(focusNode, focusOffset);                                                                       // 114\n  var isBackward = detectionRange.collapsed;                                                                           // 115\n                                                                                                                       // 116\n  return {                                                                                                             // 117\n    start: isBackward ? end : start,                                                                                   // 118\n    end: isBackward ? start : end                                                                                      // 119\n  };                                                                                                                   // 120\n}                                                                                                                      // 121\n                                                                                                                       // 122\n/**                                                                                                                    // 123\n * @param {DOMElement|DOMTextNode} node                                                                                // 124\n * @param {object} offsets                                                                                             // 125\n */                                                                                                                    // 126\nfunction setIEOffsets(node, offsets) {                                                                                 // 127\n  var range = document.selection.createRange().duplicate();                                                            // 128\n  var start, end;                                                                                                      // 129\n                                                                                                                       // 130\n  if (typeof offsets.end === 'undefined') {                                                                            // 131\n    start = offsets.start;                                                                                             // 132\n    end = start;                                                                                                       // 133\n  } else if (offsets.start > offsets.end) {                                                                            // 134\n    start = offsets.end;                                                                                               // 135\n    end = offsets.start;                                                                                               // 136\n  } else {                                                                                                             // 137\n    start = offsets.start;                                                                                             // 138\n    end = offsets.end;                                                                                                 // 139\n  }                                                                                                                    // 140\n                                                                                                                       // 141\n  range.moveToElementText(node);                                                                                       // 142\n  range.moveStart('character', start);                                                                                 // 143\n  range.setEndPoint('EndToStart', range);                                                                              // 144\n  range.moveEnd('character', end - start);                                                                             // 145\n  range.select();                                                                                                      // 146\n}                                                                                                                      // 147\n                                                                                                                       // 148\n/**                                                                                                                    // 149\n * In modern non-IE browsers, we can support both forward and backward                                                 // 150\n * selections.                                                                                                         // 151\n *                                                                                                                     // 152\n * Note: IE10+ supports the Selection object, but it does not support                                                  // 153\n * the `extend` method, which means that even in modern IE, it's not possible                                          // 154\n * to programatically create a backward selection. Thus, for all IE                                                    // 155\n * versions, we use the old IE API to create our selections.                                                           // 156\n *                                                                                                                     // 157\n * @param {DOMElement|DOMTextNode} node                                                                                // 158\n * @param {object} offsets                                                                                             // 159\n */                                                                                                                    // 160\nfunction setModernOffsets(node, offsets) {                                                                             // 161\n  if (!window.getSelection) {                                                                                          // 162\n    return;                                                                                                            // 163\n  }                                                                                                                    // 164\n                                                                                                                       // 165\n  var selection = window.getSelection();                                                                               // 166\n  var length = node[getTextContentAccessor()].length;                                                                  // 167\n  var start = Math.min(offsets.start, length);                                                                         // 168\n  var end = typeof offsets.end === 'undefined' ? start : Math.min(offsets.end, length);                                // 169\n                                                                                                                       // 170\n  // IE 11 uses modern selection, but doesn't support the extend method.                                               // 171\n  // Flip backward selections, so we can set with a single range.                                                      // 172\n  if (!selection.extend && start > end) {                                                                              // 173\n    var temp = end;                                                                                                    // 174\n    end = start;                                                                                                       // 175\n    start = temp;                                                                                                      // 176\n  }                                                                                                                    // 177\n                                                                                                                       // 178\n  var startMarker = getNodeForCharacterOffset(node, start);                                                            // 179\n  var endMarker = getNodeForCharacterOffset(node, end);                                                                // 180\n                                                                                                                       // 181\n  if (startMarker && endMarker) {                                                                                      // 182\n    var range = document.createRange();                                                                                // 183\n    range.setStart(startMarker.node, startMarker.offset);                                                              // 184\n    selection.removeAllRanges();                                                                                       // 185\n                                                                                                                       // 186\n    if (start > end) {                                                                                                 // 187\n      selection.addRange(range);                                                                                       // 188\n      selection.extend(endMarker.node, endMarker.offset);                                                              // 189\n    } else {                                                                                                           // 190\n      range.setEnd(endMarker.node, endMarker.offset);                                                                  // 191\n      selection.addRange(range);                                                                                       // 192\n    }                                                                                                                  // 193\n  }                                                                                                                    // 194\n}                                                                                                                      // 195\n                                                                                                                       // 196\nvar useIEOffsets = ExecutionEnvironment.canUseDOM && 'selection' in document && !('getSelection' in window);           // 197\n                                                                                                                       // 198\nvar ReactDOMSelection = {                                                                                              // 199\n  /**                                                                                                                  // 200\n   * @param {DOMElement} node                                                                                          // 201\n   */                                                                                                                  // 202\n  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,                                                          // 203\n                                                                                                                       // 204\n  /**                                                                                                                  // 205\n   * @param {DOMElement|DOMTextNode} node                                                                              // 206\n   * @param {object} offsets                                                                                           // 207\n   */                                                                                                                  // 208\n  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets                                                           // 209\n};                                                                                                                     // 210\n                                                                                                                       // 211\nmodule.exports = ReactDOMSelection;                                                                                    // 212\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"getNodeForCharacterOffset.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/getNodeForCharacterOffset.js                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule getNodeForCharacterOffset                                                                           // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\n/**                                                                                                                    // 14\n * Given any node return the first leaf node without children.                                                         // 15\n *                                                                                                                     // 16\n * @param {DOMElement|DOMTextNode} node                                                                                // 17\n * @return {DOMElement|DOMTextNode}                                                                                    // 18\n */                                                                                                                    // 19\nfunction getLeafNode(node) {                                                                                           // 20\n  while (node && node.firstChild) {                                                                                    // 21\n    node = node.firstChild;                                                                                            // 22\n  }                                                                                                                    // 23\n  return node;                                                                                                         // 24\n}                                                                                                                      // 25\n                                                                                                                       // 26\n/**                                                                                                                    // 27\n * Get the next sibling within a container. This will walk up the                                                      // 28\n * DOM if a node's siblings have been exhausted.                                                                       // 29\n *                                                                                                                     // 30\n * @param {DOMElement|DOMTextNode} node                                                                                // 31\n * @return {?DOMElement|DOMTextNode}                                                                                   // 32\n */                                                                                                                    // 33\nfunction getSiblingNode(node) {                                                                                        // 34\n  while (node) {                                                                                                       // 35\n    if (node.nextSibling) {                                                                                            // 36\n      return node.nextSibling;                                                                                         // 37\n    }                                                                                                                  // 38\n    node = node.parentNode;                                                                                            // 39\n  }                                                                                                                    // 40\n}                                                                                                                      // 41\n                                                                                                                       // 42\n/**                                                                                                                    // 43\n * Get object describing the nodes which contain characters at offset.                                                 // 44\n *                                                                                                                     // 45\n * @param {DOMElement|DOMTextNode} root                                                                                // 46\n * @param {number} offset                                                                                              // 47\n * @return {?object}                                                                                                   // 48\n */                                                                                                                    // 49\nfunction getNodeForCharacterOffset(root, offset) {                                                                     // 50\n  var node = getLeafNode(root);                                                                                        // 51\n  var nodeStart = 0;                                                                                                   // 52\n  var nodeEnd = 0;                                                                                                     // 53\n                                                                                                                       // 54\n  while (node) {                                                                                                       // 55\n    if (node.nodeType === 3) {                                                                                         // 56\n      nodeEnd = nodeStart + node.textContent.length;                                                                   // 57\n                                                                                                                       // 58\n      if (nodeStart <= offset && nodeEnd >= offset) {                                                                  // 59\n        return {                                                                                                       // 60\n          node: node,                                                                                                  // 61\n          offset: offset - nodeStart                                                                                   // 62\n        };                                                                                                             // 63\n      }                                                                                                                // 64\n                                                                                                                       // 65\n      nodeStart = nodeEnd;                                                                                             // 66\n    }                                                                                                                  // 67\n                                                                                                                       // 68\n    node = getLeafNode(getSiblingNode(node));                                                                          // 69\n  }                                                                                                                    // 70\n}                                                                                                                      // 71\n                                                                                                                       // 72\nmodule.exports = getNodeForCharacterOffset;                                                                            // 73\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"SelectEventPlugin.js\":[\"./EventConstants\",\"./EventPropagators\",\"fbjs/lib/ExecutionEnvironment\",\"./ReactInputSelection\",\"./SyntheticEvent\",\"fbjs/lib/getActiveElement\",\"./isTextInputElement\",\"fbjs/lib/keyOf\",\"fbjs/lib/shallowEqual\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/SelectEventPlugin.js                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule SelectEventPlugin                                                                                   // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar EventConstants = require('./EventConstants');                                                                      // 14\nvar EventPropagators = require('./EventPropagators');                                                                  // 15\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');                                                   // 16\nvar ReactInputSelection = require('./ReactInputSelection');                                                            // 17\nvar SyntheticEvent = require('./SyntheticEvent');                                                                      // 18\n                                                                                                                       // 19\nvar getActiveElement = require('fbjs/lib/getActiveElement');                                                           // 20\nvar isTextInputElement = require('./isTextInputElement');                                                              // 21\nvar keyOf = require('fbjs/lib/keyOf');                                                                                 // 22\nvar shallowEqual = require('fbjs/lib/shallowEqual');                                                                   // 23\n                                                                                                                       // 24\nvar topLevelTypes = EventConstants.topLevelTypes;                                                                      // 25\n                                                                                                                       // 26\nvar skipSelectionChangeEvent = ExecutionEnvironment.canUseDOM && 'documentMode' in document && document.documentMode <= 11;\n                                                                                                                       // 28\nvar eventTypes = {                                                                                                     // 29\n  select: {                                                                                                            // 30\n    phasedRegistrationNames: {                                                                                         // 31\n      bubbled: keyOf({ onSelect: null }),                                                                              // 32\n      captured: keyOf({ onSelectCapture: null })                                                                       // 33\n    },                                                                                                                 // 34\n    dependencies: [topLevelTypes.topBlur, topLevelTypes.topContextMenu, topLevelTypes.topFocus, topLevelTypes.topKeyDown, topLevelTypes.topMouseDown, topLevelTypes.topMouseUp, topLevelTypes.topSelectionChange]\n  }                                                                                                                    // 36\n};                                                                                                                     // 37\n                                                                                                                       // 38\nvar activeElement = null;                                                                                              // 39\nvar activeElementID = null;                                                                                            // 40\nvar lastSelection = null;                                                                                              // 41\nvar mouseDown = false;                                                                                                 // 42\n                                                                                                                       // 43\n// Track whether a listener exists for this plugin. If none exist, we do                                               // 44\n// not extract events.                                                                                                 // 45\nvar hasListener = false;                                                                                               // 46\nvar ON_SELECT_KEY = keyOf({ onSelect: null });                                                                         // 47\n                                                                                                                       // 48\n/**                                                                                                                    // 49\n * Get an object which is a unique representation of the current selection.                                            // 50\n *                                                                                                                     // 51\n * The return value will not be consistent across nodes or browsers, but                                               // 52\n * two identical selections on the same node will return identical objects.                                            // 53\n *                                                                                                                     // 54\n * @param {DOMElement} node                                                                                            // 55\n * @return {object}                                                                                                    // 56\n */                                                                                                                    // 57\nfunction getSelection(node) {                                                                                          // 58\n  if ('selectionStart' in node && ReactInputSelection.hasSelectionCapabilities(node)) {                                // 59\n    return {                                                                                                           // 60\n      start: node.selectionStart,                                                                                      // 61\n      end: node.selectionEnd                                                                                           // 62\n    };                                                                                                                 // 63\n  } else if (window.getSelection) {                                                                                    // 64\n    var selection = window.getSelection();                                                                             // 65\n    return {                                                                                                           // 66\n      anchorNode: selection.anchorNode,                                                                                // 67\n      anchorOffset: selection.anchorOffset,                                                                            // 68\n      focusNode: selection.focusNode,                                                                                  // 69\n      focusOffset: selection.focusOffset                                                                               // 70\n    };                                                                                                                 // 71\n  } else if (document.selection) {                                                                                     // 72\n    var range = document.selection.createRange();                                                                      // 73\n    return {                                                                                                           // 74\n      parentElement: range.parentElement(),                                                                            // 75\n      text: range.text,                                                                                                // 76\n      top: range.boundingTop,                                                                                          // 77\n      left: range.boundingLeft                                                                                         // 78\n    };                                                                                                                 // 79\n  }                                                                                                                    // 80\n}                                                                                                                      // 81\n                                                                                                                       // 82\n/**                                                                                                                    // 83\n * Poll selection to see whether it's changed.                                                                         // 84\n *                                                                                                                     // 85\n * @param {object} nativeEvent                                                                                         // 86\n * @return {?SyntheticEvent}                                                                                           // 87\n */                                                                                                                    // 88\nfunction constructSelectEvent(nativeEvent, nativeEventTarget) {                                                        // 89\n  // Ensure we have the right element, and that the user is not dragging a                                             // 90\n  // selection (this matches native `select` event behavior). In HTML5, select                                         // 91\n  // fires only on input and textarea thus if there's no focused element we                                            // 92\n  // won't dispatch.                                                                                                   // 93\n  if (mouseDown || activeElement == null || activeElement !== getActiveElement()) {                                    // 94\n    return null;                                                                                                       // 95\n  }                                                                                                                    // 96\n                                                                                                                       // 97\n  // Only fire when selection has actually changed.                                                                    // 98\n  var currentSelection = getSelection(activeElement);                                                                  // 99\n  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {                                              // 100\n    lastSelection = currentSelection;                                                                                  // 101\n                                                                                                                       // 102\n    var syntheticEvent = SyntheticEvent.getPooled(eventTypes.select, activeElementID, nativeEvent, nativeEventTarget);\n                                                                                                                       // 104\n    syntheticEvent.type = 'select';                                                                                    // 105\n    syntheticEvent.target = activeElement;                                                                             // 106\n                                                                                                                       // 107\n    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);                                                     // 108\n                                                                                                                       // 109\n    return syntheticEvent;                                                                                             // 110\n  }                                                                                                                    // 111\n                                                                                                                       // 112\n  return null;                                                                                                         // 113\n}                                                                                                                      // 114\n                                                                                                                       // 115\n/**                                                                                                                    // 116\n * This plugin creates an `onSelect` event that normalizes select events                                               // 117\n * across form elements.                                                                                               // 118\n *                                                                                                                     // 119\n * Supported elements are:                                                                                             // 120\n * - input (see `isTextInputElement`)                                                                                  // 121\n * - textarea                                                                                                          // 122\n * - contentEditable                                                                                                   // 123\n *                                                                                                                     // 124\n * This differs from native browser implementations in the following ways:                                             // 125\n * - Fires on contentEditable fields as well as inputs.                                                                // 126\n * - Fires for collapsed selection.                                                                                    // 127\n * - Fires after user input.                                                                                           // 128\n */                                                                                                                    // 129\nvar SelectEventPlugin = {                                                                                              // 130\n                                                                                                                       // 131\n  eventTypes: eventTypes,                                                                                              // 132\n                                                                                                                       // 133\n  /**                                                                                                                  // 134\n   * @param {string} topLevelType Record from `EventConstants`.                                                        // 135\n   * @param {DOMEventTarget} topLevelTarget The listening component root node.                                         // 136\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.                                                          // 137\n   * @param {object} nativeEvent Native browser event.                                                                 // 138\n   * @return {*} An accumulation of synthetic events.                                                                  // 139\n   * @see {EventPluginHub.extractEvents}                                                                               // 140\n   */                                                                                                                  // 141\n  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {           // 142\n    if (!hasListener) {                                                                                                // 143\n      return null;                                                                                                     // 144\n    }                                                                                                                  // 145\n                                                                                                                       // 146\n    switch (topLevelType) {                                                                                            // 147\n      // Track the input node that has focus.                                                                          // 148\n      case topLevelTypes.topFocus:                                                                                     // 149\n        if (isTextInputElement(topLevelTarget) || topLevelTarget.contentEditable === 'true') {                         // 150\n          activeElement = topLevelTarget;                                                                              // 151\n          activeElementID = topLevelTargetID;                                                                          // 152\n          lastSelection = null;                                                                                        // 153\n        }                                                                                                              // 154\n        break;                                                                                                         // 155\n      case topLevelTypes.topBlur:                                                                                      // 156\n        activeElement = null;                                                                                          // 157\n        activeElementID = null;                                                                                        // 158\n        lastSelection = null;                                                                                          // 159\n        break;                                                                                                         // 160\n                                                                                                                       // 161\n      // Don't fire the event while the user is dragging. This matches the                                             // 162\n      // semantics of the native select event.                                                                         // 163\n      case topLevelTypes.topMouseDown:                                                                                 // 164\n        mouseDown = true;                                                                                              // 165\n        break;                                                                                                         // 166\n      case topLevelTypes.topContextMenu:                                                                               // 167\n      case topLevelTypes.topMouseUp:                                                                                   // 168\n        mouseDown = false;                                                                                             // 169\n        return constructSelectEvent(nativeEvent, nativeEventTarget);                                                   // 170\n                                                                                                                       // 171\n      // Chrome and IE fire non-standard event when selection is changed (and                                          // 172\n      // sometimes when it hasn't). IE's event fires out of order with respect                                         // 173\n      // to key and input events on deletion, so we discard it.                                                        // 174\n      //                                                                                                               // 175\n      // Firefox doesn't support selectionchange, so check selection status                                            // 176\n      // after each key entry. The selection changes after keydown and before                                          // 177\n      // keyup, but we check on keydown as well in the case of holding down a                                          // 178\n      // key, when multiple keydown events are fired but only one keyup is.                                            // 179\n      // This is also our approach for IE handling, for the reason above.                                              // 180\n      case topLevelTypes.topSelectionChange:                                                                           // 181\n        if (skipSelectionChangeEvent) {                                                                                // 182\n          break;                                                                                                       // 183\n        }                                                                                                              // 184\n      // falls through                                                                                                 // 185\n      case topLevelTypes.topKeyDown:                                                                                   // 186\n      case topLevelTypes.topKeyUp:                                                                                     // 187\n        return constructSelectEvent(nativeEvent, nativeEventTarget);                                                   // 188\n    }                                                                                                                  // 189\n                                                                                                                       // 190\n    return null;                                                                                                       // 191\n  },                                                                                                                   // 192\n                                                                                                                       // 193\n  didPutListener: function (id, registrationName, listener) {                                                          // 194\n    if (registrationName === ON_SELECT_KEY) {                                                                          // 195\n      hasListener = true;                                                                                              // 196\n    }                                                                                                                  // 197\n  }                                                                                                                    // 198\n};                                                                                                                     // 199\n                                                                                                                       // 200\nmodule.exports = SelectEventPlugin;                                                                                    // 201\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ServerReactRootIndex.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ServerReactRootIndex.js                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ServerReactRootIndex                                                                                // 9\n * @typechecks                                                                                                         // 10\n */                                                                                                                    // 11\n                                                                                                                       // 12\n'use strict';                                                                                                          // 13\n                                                                                                                       // 14\n/**                                                                                                                    // 15\n * Size of the reactRoot ID space. We generate random numbers for React root                                           // 16\n * IDs and if there's a collision the events and DOM update system will                                                // 17\n * get confused. In the future we need a way to generate GUIDs but for                                                 // 18\n * now this will work on a smaller scale.                                                                              // 19\n */                                                                                                                    // 20\nvar GLOBAL_MOUNT_POINT_MAX = Math.pow(2, 53);                                                                          // 21\n                                                                                                                       // 22\nvar ServerReactRootIndex = {                                                                                           // 23\n  createReactRootIndex: function () {                                                                                  // 24\n    return Math.ceil(Math.random() * GLOBAL_MOUNT_POINT_MAX);                                                          // 25\n  }                                                                                                                    // 26\n};                                                                                                                     // 27\n                                                                                                                       // 28\nmodule.exports = ServerReactRootIndex;                                                                                 // 29\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"SimpleEventPlugin.js\":[\"./EventConstants\",\"fbjs/lib/EventListener\",\"./EventPropagators\",\"./ReactMount\",\"./SyntheticClipboardEvent\",\"./SyntheticEvent\",\"./SyntheticFocusEvent\",\"./SyntheticKeyboardEvent\",\"./SyntheticMouseEvent\",\"./SyntheticDragEvent\",\"./SyntheticTouchEvent\",\"./SyntheticUIEvent\",\"./SyntheticWheelEvent\",\"fbjs/lib/emptyFunction\",\"./getEventCharCode\",\"fbjs/lib/invariant\",\"fbjs/lib/keyOf\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/SimpleEventPlugin.js                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule SimpleEventPlugin                                                                                   // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar EventConstants = require('./EventConstants');                                                                      // 14\nvar EventListener = require('fbjs/lib/EventListener');                                                                 // 15\nvar EventPropagators = require('./EventPropagators');                                                                  // 16\nvar ReactMount = require('./ReactMount');                                                                              // 17\nvar SyntheticClipboardEvent = require('./SyntheticClipboardEvent');                                                    // 18\nvar SyntheticEvent = require('./SyntheticEvent');                                                                      // 19\nvar SyntheticFocusEvent = require('./SyntheticFocusEvent');                                                            // 20\nvar SyntheticKeyboardEvent = require('./SyntheticKeyboardEvent');                                                      // 21\nvar SyntheticMouseEvent = require('./SyntheticMouseEvent');                                                            // 22\nvar SyntheticDragEvent = require('./SyntheticDragEvent');                                                              // 23\nvar SyntheticTouchEvent = require('./SyntheticTouchEvent');                                                            // 24\nvar SyntheticUIEvent = require('./SyntheticUIEvent');                                                                  // 25\nvar SyntheticWheelEvent = require('./SyntheticWheelEvent');                                                            // 26\n                                                                                                                       // 27\nvar emptyFunction = require('fbjs/lib/emptyFunction');                                                                 // 28\nvar getEventCharCode = require('./getEventCharCode');                                                                  // 29\nvar invariant = require('fbjs/lib/invariant');                                                                         // 30\nvar keyOf = require('fbjs/lib/keyOf');                                                                                 // 31\n                                                                                                                       // 32\nvar topLevelTypes = EventConstants.topLevelTypes;                                                                      // 33\n                                                                                                                       // 34\nvar eventTypes = {                                                                                                     // 35\n  abort: {                                                                                                             // 36\n    phasedRegistrationNames: {                                                                                         // 37\n      bubbled: keyOf({ onAbort: true }),                                                                               // 38\n      captured: keyOf({ onAbortCapture: true })                                                                        // 39\n    }                                                                                                                  // 40\n  },                                                                                                                   // 41\n  blur: {                                                                                                              // 42\n    phasedRegistrationNames: {                                                                                         // 43\n      bubbled: keyOf({ onBlur: true }),                                                                                // 44\n      captured: keyOf({ onBlurCapture: true })                                                                         // 45\n    }                                                                                                                  // 46\n  },                                                                                                                   // 47\n  canPlay: {                                                                                                           // 48\n    phasedRegistrationNames: {                                                                                         // 49\n      bubbled: keyOf({ onCanPlay: true }),                                                                             // 50\n      captured: keyOf({ onCanPlayCapture: true })                                                                      // 51\n    }                                                                                                                  // 52\n  },                                                                                                                   // 53\n  canPlayThrough: {                                                                                                    // 54\n    phasedRegistrationNames: {                                                                                         // 55\n      bubbled: keyOf({ onCanPlayThrough: true }),                                                                      // 56\n      captured: keyOf({ onCanPlayThroughCapture: true })                                                               // 57\n    }                                                                                                                  // 58\n  },                                                                                                                   // 59\n  click: {                                                                                                             // 60\n    phasedRegistrationNames: {                                                                                         // 61\n      bubbled: keyOf({ onClick: true }),                                                                               // 62\n      captured: keyOf({ onClickCapture: true })                                                                        // 63\n    }                                                                                                                  // 64\n  },                                                                                                                   // 65\n  contextMenu: {                                                                                                       // 66\n    phasedRegistrationNames: {                                                                                         // 67\n      bubbled: keyOf({ onContextMenu: true }),                                                                         // 68\n      captured: keyOf({ onContextMenuCapture: true })                                                                  // 69\n    }                                                                                                                  // 70\n  },                                                                                                                   // 71\n  copy: {                                                                                                              // 72\n    phasedRegistrationNames: {                                                                                         // 73\n      bubbled: keyOf({ onCopy: true }),                                                                                // 74\n      captured: keyOf({ onCopyCapture: true })                                                                         // 75\n    }                                                                                                                  // 76\n  },                                                                                                                   // 77\n  cut: {                                                                                                               // 78\n    phasedRegistrationNames: {                                                                                         // 79\n      bubbled: keyOf({ onCut: true }),                                                                                 // 80\n      captured: keyOf({ onCutCapture: true })                                                                          // 81\n    }                                                                                                                  // 82\n  },                                                                                                                   // 83\n  doubleClick: {                                                                                                       // 84\n    phasedRegistrationNames: {                                                                                         // 85\n      bubbled: keyOf({ onDoubleClick: true }),                                                                         // 86\n      captured: keyOf({ onDoubleClickCapture: true })                                                                  // 87\n    }                                                                                                                  // 88\n  },                                                                                                                   // 89\n  drag: {                                                                                                              // 90\n    phasedRegistrationNames: {                                                                                         // 91\n      bubbled: keyOf({ onDrag: true }),                                                                                // 92\n      captured: keyOf({ onDragCapture: true })                                                                         // 93\n    }                                                                                                                  // 94\n  },                                                                                                                   // 95\n  dragEnd: {                                                                                                           // 96\n    phasedRegistrationNames: {                                                                                         // 97\n      bubbled: keyOf({ onDragEnd: true }),                                                                             // 98\n      captured: keyOf({ onDragEndCapture: true })                                                                      // 99\n    }                                                                                                                  // 100\n  },                                                                                                                   // 101\n  dragEnter: {                                                                                                         // 102\n    phasedRegistrationNames: {                                                                                         // 103\n      bubbled: keyOf({ onDragEnter: true }),                                                                           // 104\n      captured: keyOf({ onDragEnterCapture: true })                                                                    // 105\n    }                                                                                                                  // 106\n  },                                                                                                                   // 107\n  dragExit: {                                                                                                          // 108\n    phasedRegistrationNames: {                                                                                         // 109\n      bubbled: keyOf({ onDragExit: true }),                                                                            // 110\n      captured: keyOf({ onDragExitCapture: true })                                                                     // 111\n    }                                                                                                                  // 112\n  },                                                                                                                   // 113\n  dragLeave: {                                                                                                         // 114\n    phasedRegistrationNames: {                                                                                         // 115\n      bubbled: keyOf({ onDragLeave: true }),                                                                           // 116\n      captured: keyOf({ onDragLeaveCapture: true })                                                                    // 117\n    }                                                                                                                  // 118\n  },                                                                                                                   // 119\n  dragOver: {                                                                                                          // 120\n    phasedRegistrationNames: {                                                                                         // 121\n      bubbled: keyOf({ onDragOver: true }),                                                                            // 122\n      captured: keyOf({ onDragOverCapture: true })                                                                     // 123\n    }                                                                                                                  // 124\n  },                                                                                                                   // 125\n  dragStart: {                                                                                                         // 126\n    phasedRegistrationNames: {                                                                                         // 127\n      bubbled: keyOf({ onDragStart: true }),                                                                           // 128\n      captured: keyOf({ onDragStartCapture: true })                                                                    // 129\n    }                                                                                                                  // 130\n  },                                                                                                                   // 131\n  drop: {                                                                                                              // 132\n    phasedRegistrationNames: {                                                                                         // 133\n      bubbled: keyOf({ onDrop: true }),                                                                                // 134\n      captured: keyOf({ onDropCapture: true })                                                                         // 135\n    }                                                                                                                  // 136\n  },                                                                                                                   // 137\n  durationChange: {                                                                                                    // 138\n    phasedRegistrationNames: {                                                                                         // 139\n      bubbled: keyOf({ onDurationChange: true }),                                                                      // 140\n      captured: keyOf({ onDurationChangeCapture: true })                                                               // 141\n    }                                                                                                                  // 142\n  },                                                                                                                   // 143\n  emptied: {                                                                                                           // 144\n    phasedRegistrationNames: {                                                                                         // 145\n      bubbled: keyOf({ onEmptied: true }),                                                                             // 146\n      captured: keyOf({ onEmptiedCapture: true })                                                                      // 147\n    }                                                                                                                  // 148\n  },                                                                                                                   // 149\n  encrypted: {                                                                                                         // 150\n    phasedRegistrationNames: {                                                                                         // 151\n      bubbled: keyOf({ onEncrypted: true }),                                                                           // 152\n      captured: keyOf({ onEncryptedCapture: true })                                                                    // 153\n    }                                                                                                                  // 154\n  },                                                                                                                   // 155\n  ended: {                                                                                                             // 156\n    phasedRegistrationNames: {                                                                                         // 157\n      bubbled: keyOf({ onEnded: true }),                                                                               // 158\n      captured: keyOf({ onEndedCapture: true })                                                                        // 159\n    }                                                                                                                  // 160\n  },                                                                                                                   // 161\n  error: {                                                                                                             // 162\n    phasedRegistrationNames: {                                                                                         // 163\n      bubbled: keyOf({ onError: true }),                                                                               // 164\n      captured: keyOf({ onErrorCapture: true })                                                                        // 165\n    }                                                                                                                  // 166\n  },                                                                                                                   // 167\n  focus: {                                                                                                             // 168\n    phasedRegistrationNames: {                                                                                         // 169\n      bubbled: keyOf({ onFocus: true }),                                                                               // 170\n      captured: keyOf({ onFocusCapture: true })                                                                        // 171\n    }                                                                                                                  // 172\n  },                                                                                                                   // 173\n  input: {                                                                                                             // 174\n    phasedRegistrationNames: {                                                                                         // 175\n      bubbled: keyOf({ onInput: true }),                                                                               // 176\n      captured: keyOf({ onInputCapture: true })                                                                        // 177\n    }                                                                                                                  // 178\n  },                                                                                                                   // 179\n  keyDown: {                                                                                                           // 180\n    phasedRegistrationNames: {                                                                                         // 181\n      bubbled: keyOf({ onKeyDown: true }),                                                                             // 182\n      captured: keyOf({ onKeyDownCapture: true })                                                                      // 183\n    }                                                                                                                  // 184\n  },                                                                                                                   // 185\n  keyPress: {                                                                                                          // 186\n    phasedRegistrationNames: {                                                                                         // 187\n      bubbled: keyOf({ onKeyPress: true }),                                                                            // 188\n      captured: keyOf({ onKeyPressCapture: true })                                                                     // 189\n    }                                                                                                                  // 190\n  },                                                                                                                   // 191\n  keyUp: {                                                                                                             // 192\n    phasedRegistrationNames: {                                                                                         // 193\n      bubbled: keyOf({ onKeyUp: true }),                                                                               // 194\n      captured: keyOf({ onKeyUpCapture: true })                                                                        // 195\n    }                                                                                                                  // 196\n  },                                                                                                                   // 197\n  load: {                                                                                                              // 198\n    phasedRegistrationNames: {                                                                                         // 199\n      bubbled: keyOf({ onLoad: true }),                                                                                // 200\n      captured: keyOf({ onLoadCapture: true })                                                                         // 201\n    }                                                                                                                  // 202\n  },                                                                                                                   // 203\n  loadedData: {                                                                                                        // 204\n    phasedRegistrationNames: {                                                                                         // 205\n      bubbled: keyOf({ onLoadedData: true }),                                                                          // 206\n      captured: keyOf({ onLoadedDataCapture: true })                                                                   // 207\n    }                                                                                                                  // 208\n  },                                                                                                                   // 209\n  loadedMetadata: {                                                                                                    // 210\n    phasedRegistrationNames: {                                                                                         // 211\n      bubbled: keyOf({ onLoadedMetadata: true }),                                                                      // 212\n      captured: keyOf({ onLoadedMetadataCapture: true })                                                               // 213\n    }                                                                                                                  // 214\n  },                                                                                                                   // 215\n  loadStart: {                                                                                                         // 216\n    phasedRegistrationNames: {                                                                                         // 217\n      bubbled: keyOf({ onLoadStart: true }),                                                                           // 218\n      captured: keyOf({ onLoadStartCapture: true })                                                                    // 219\n    }                                                                                                                  // 220\n  },                                                                                                                   // 221\n  // Note: We do not allow listening to mouseOver events. Instead, use the                                             // 222\n  // onMouseEnter/onMouseLeave created by `EnterLeaveEventPlugin`.                                                     // 223\n  mouseDown: {                                                                                                         // 224\n    phasedRegistrationNames: {                                                                                         // 225\n      bubbled: keyOf({ onMouseDown: true }),                                                                           // 226\n      captured: keyOf({ onMouseDownCapture: true })                                                                    // 227\n    }                                                                                                                  // 228\n  },                                                                                                                   // 229\n  mouseMove: {                                                                                                         // 230\n    phasedRegistrationNames: {                                                                                         // 231\n      bubbled: keyOf({ onMouseMove: true }),                                                                           // 232\n      captured: keyOf({ onMouseMoveCapture: true })                                                                    // 233\n    }                                                                                                                  // 234\n  },                                                                                                                   // 235\n  mouseOut: {                                                                                                          // 236\n    phasedRegistrationNames: {                                                                                         // 237\n      bubbled: keyOf({ onMouseOut: true }),                                                                            // 238\n      captured: keyOf({ onMouseOutCapture: true })                                                                     // 239\n    }                                                                                                                  // 240\n  },                                                                                                                   // 241\n  mouseOver: {                                                                                                         // 242\n    phasedRegistrationNames: {                                                                                         // 243\n      bubbled: keyOf({ onMouseOver: true }),                                                                           // 244\n      captured: keyOf({ onMouseOverCapture: true })                                                                    // 245\n    }                                                                                                                  // 246\n  },                                                                                                                   // 247\n  mouseUp: {                                                                                                           // 248\n    phasedRegistrationNames: {                                                                                         // 249\n      bubbled: keyOf({ onMouseUp: true }),                                                                             // 250\n      captured: keyOf({ onMouseUpCapture: true })                                                                      // 251\n    }                                                                                                                  // 252\n  },                                                                                                                   // 253\n  paste: {                                                                                                             // 254\n    phasedRegistrationNames: {                                                                                         // 255\n      bubbled: keyOf({ onPaste: true }),                                                                               // 256\n      captured: keyOf({ onPasteCapture: true })                                                                        // 257\n    }                                                                                                                  // 258\n  },                                                                                                                   // 259\n  pause: {                                                                                                             // 260\n    phasedRegistrationNames: {                                                                                         // 261\n      bubbled: keyOf({ onPause: true }),                                                                               // 262\n      captured: keyOf({ onPauseCapture: true })                                                                        // 263\n    }                                                                                                                  // 264\n  },                                                                                                                   // 265\n  play: {                                                                                                              // 266\n    phasedRegistrationNames: {                                                                                         // 267\n      bubbled: keyOf({ onPlay: true }),                                                                                // 268\n      captured: keyOf({ onPlayCapture: true })                                                                         // 269\n    }                                                                                                                  // 270\n  },                                                                                                                   // 271\n  playing: {                                                                                                           // 272\n    phasedRegistrationNames: {                                                                                         // 273\n      bubbled: keyOf({ onPlaying: true }),                                                                             // 274\n      captured: keyOf({ onPlayingCapture: true })                                                                      // 275\n    }                                                                                                                  // 276\n  },                                                                                                                   // 277\n  progress: {                                                                                                          // 278\n    phasedRegistrationNames: {                                                                                         // 279\n      bubbled: keyOf({ onProgress: true }),                                                                            // 280\n      captured: keyOf({ onProgressCapture: true })                                                                     // 281\n    }                                                                                                                  // 282\n  },                                                                                                                   // 283\n  rateChange: {                                                                                                        // 284\n    phasedRegistrationNames: {                                                                                         // 285\n      bubbled: keyOf({ onRateChange: true }),                                                                          // 286\n      captured: keyOf({ onRateChangeCapture: true })                                                                   // 287\n    }                                                                                                                  // 288\n  },                                                                                                                   // 289\n  reset: {                                                                                                             // 290\n    phasedRegistrationNames: {                                                                                         // 291\n      bubbled: keyOf({ onReset: true }),                                                                               // 292\n      captured: keyOf({ onResetCapture: true })                                                                        // 293\n    }                                                                                                                  // 294\n  },                                                                                                                   // 295\n  scroll: {                                                                                                            // 296\n    phasedRegistrationNames: {                                                                                         // 297\n      bubbled: keyOf({ onScroll: true }),                                                                              // 298\n      captured: keyOf({ onScrollCapture: true })                                                                       // 299\n    }                                                                                                                  // 300\n  },                                                                                                                   // 301\n  seeked: {                                                                                                            // 302\n    phasedRegistrationNames: {                                                                                         // 303\n      bubbled: keyOf({ onSeeked: true }),                                                                              // 304\n      captured: keyOf({ onSeekedCapture: true })                                                                       // 305\n    }                                                                                                                  // 306\n  },                                                                                                                   // 307\n  seeking: {                                                                                                           // 308\n    phasedRegistrationNames: {                                                                                         // 309\n      bubbled: keyOf({ onSeeking: true }),                                                                             // 310\n      captured: keyOf({ onSeekingCapture: true })                                                                      // 311\n    }                                                                                                                  // 312\n  },                                                                                                                   // 313\n  stalled: {                                                                                                           // 314\n    phasedRegistrationNames: {                                                                                         // 315\n      bubbled: keyOf({ onStalled: true }),                                                                             // 316\n      captured: keyOf({ onStalledCapture: true })                                                                      // 317\n    }                                                                                                                  // 318\n  },                                                                                                                   // 319\n  submit: {                                                                                                            // 320\n    phasedRegistrationNames: {                                                                                         // 321\n      bubbled: keyOf({ onSubmit: true }),                                                                              // 322\n      captured: keyOf({ onSubmitCapture: true })                                                                       // 323\n    }                                                                                                                  // 324\n  },                                                                                                                   // 325\n  suspend: {                                                                                                           // 326\n    phasedRegistrationNames: {                                                                                         // 327\n      bubbled: keyOf({ onSuspend: true }),                                                                             // 328\n      captured: keyOf({ onSuspendCapture: true })                                                                      // 329\n    }                                                                                                                  // 330\n  },                                                                                                                   // 331\n  timeUpdate: {                                                                                                        // 332\n    phasedRegistrationNames: {                                                                                         // 333\n      bubbled: keyOf({ onTimeUpdate: true }),                                                                          // 334\n      captured: keyOf({ onTimeUpdateCapture: true })                                                                   // 335\n    }                                                                                                                  // 336\n  },                                                                                                                   // 337\n  touchCancel: {                                                                                                       // 338\n    phasedRegistrationNames: {                                                                                         // 339\n      bubbled: keyOf({ onTouchCancel: true }),                                                                         // 340\n      captured: keyOf({ onTouchCancelCapture: true })                                                                  // 341\n    }                                                                                                                  // 342\n  },                                                                                                                   // 343\n  touchEnd: {                                                                                                          // 344\n    phasedRegistrationNames: {                                                                                         // 345\n      bubbled: keyOf({ onTouchEnd: true }),                                                                            // 346\n      captured: keyOf({ onTouchEndCapture: true })                                                                     // 347\n    }                                                                                                                  // 348\n  },                                                                                                                   // 349\n  touchMove: {                                                                                                         // 350\n    phasedRegistrationNames: {                                                                                         // 351\n      bubbled: keyOf({ onTouchMove: true }),                                                                           // 352\n      captured: keyOf({ onTouchMoveCapture: true })                                                                    // 353\n    }                                                                                                                  // 354\n  },                                                                                                                   // 355\n  touchStart: {                                                                                                        // 356\n    phasedRegistrationNames: {                                                                                         // 357\n      bubbled: keyOf({ onTouchStart: true }),                                                                          // 358\n      captured: keyOf({ onTouchStartCapture: true })                                                                   // 359\n    }                                                                                                                  // 360\n  },                                                                                                                   // 361\n  volumeChange: {                                                                                                      // 362\n    phasedRegistrationNames: {                                                                                         // 363\n      bubbled: keyOf({ onVolumeChange: true }),                                                                        // 364\n      captured: keyOf({ onVolumeChangeCapture: true })                                                                 // 365\n    }                                                                                                                  // 366\n  },                                                                                                                   // 367\n  waiting: {                                                                                                           // 368\n    phasedRegistrationNames: {                                                                                         // 369\n      bubbled: keyOf({ onWaiting: true }),                                                                             // 370\n      captured: keyOf({ onWaitingCapture: true })                                                                      // 371\n    }                                                                                                                  // 372\n  },                                                                                                                   // 373\n  wheel: {                                                                                                             // 374\n    phasedRegistrationNames: {                                                                                         // 375\n      bubbled: keyOf({ onWheel: true }),                                                                               // 376\n      captured: keyOf({ onWheelCapture: true })                                                                        // 377\n    }                                                                                                                  // 378\n  }                                                                                                                    // 379\n};                                                                                                                     // 380\n                                                                                                                       // 381\nvar topLevelEventsToDispatchConfig = {                                                                                 // 382\n  topAbort: eventTypes.abort,                                                                                          // 383\n  topBlur: eventTypes.blur,                                                                                            // 384\n  topCanPlay: eventTypes.canPlay,                                                                                      // 385\n  topCanPlayThrough: eventTypes.canPlayThrough,                                                                        // 386\n  topClick: eventTypes.click,                                                                                          // 387\n  topContextMenu: eventTypes.contextMenu,                                                                              // 388\n  topCopy: eventTypes.copy,                                                                                            // 389\n  topCut: eventTypes.cut,                                                                                              // 390\n  topDoubleClick: eventTypes.doubleClick,                                                                              // 391\n  topDrag: eventTypes.drag,                                                                                            // 392\n  topDragEnd: eventTypes.dragEnd,                                                                                      // 393\n  topDragEnter: eventTypes.dragEnter,                                                                                  // 394\n  topDragExit: eventTypes.dragExit,                                                                                    // 395\n  topDragLeave: eventTypes.dragLeave,                                                                                  // 396\n  topDragOver: eventTypes.dragOver,                                                                                    // 397\n  topDragStart: eventTypes.dragStart,                                                                                  // 398\n  topDrop: eventTypes.drop,                                                                                            // 399\n  topDurationChange: eventTypes.durationChange,                                                                        // 400\n  topEmptied: eventTypes.emptied,                                                                                      // 401\n  topEncrypted: eventTypes.encrypted,                                                                                  // 402\n  topEnded: eventTypes.ended,                                                                                          // 403\n  topError: eventTypes.error,                                                                                          // 404\n  topFocus: eventTypes.focus,                                                                                          // 405\n  topInput: eventTypes.input,                                                                                          // 406\n  topKeyDown: eventTypes.keyDown,                                                                                      // 407\n  topKeyPress: eventTypes.keyPress,                                                                                    // 408\n  topKeyUp: eventTypes.keyUp,                                                                                          // 409\n  topLoad: eventTypes.load,                                                                                            // 410\n  topLoadedData: eventTypes.loadedData,                                                                                // 411\n  topLoadedMetadata: eventTypes.loadedMetadata,                                                                        // 412\n  topLoadStart: eventTypes.loadStart,                                                                                  // 413\n  topMouseDown: eventTypes.mouseDown,                                                                                  // 414\n  topMouseMove: eventTypes.mouseMove,                                                                                  // 415\n  topMouseOut: eventTypes.mouseOut,                                                                                    // 416\n  topMouseOver: eventTypes.mouseOver,                                                                                  // 417\n  topMouseUp: eventTypes.mouseUp,                                                                                      // 418\n  topPaste: eventTypes.paste,                                                                                          // 419\n  topPause: eventTypes.pause,                                                                                          // 420\n  topPlay: eventTypes.play,                                                                                            // 421\n  topPlaying: eventTypes.playing,                                                                                      // 422\n  topProgress: eventTypes.progress,                                                                                    // 423\n  topRateChange: eventTypes.rateChange,                                                                                // 424\n  topReset: eventTypes.reset,                                                                                          // 425\n  topScroll: eventTypes.scroll,                                                                                        // 426\n  topSeeked: eventTypes.seeked,                                                                                        // 427\n  topSeeking: eventTypes.seeking,                                                                                      // 428\n  topStalled: eventTypes.stalled,                                                                                      // 429\n  topSubmit: eventTypes.submit,                                                                                        // 430\n  topSuspend: eventTypes.suspend,                                                                                      // 431\n  topTimeUpdate: eventTypes.timeUpdate,                                                                                // 432\n  topTouchCancel: eventTypes.touchCancel,                                                                              // 433\n  topTouchEnd: eventTypes.touchEnd,                                                                                    // 434\n  topTouchMove: eventTypes.touchMove,                                                                                  // 435\n  topTouchStart: eventTypes.touchStart,                                                                                // 436\n  topVolumeChange: eventTypes.volumeChange,                                                                            // 437\n  topWaiting: eventTypes.waiting,                                                                                      // 438\n  topWheel: eventTypes.wheel                                                                                           // 439\n};                                                                                                                     // 440\n                                                                                                                       // 441\nfor (var type in topLevelEventsToDispatchConfig) {                                                                     // 442\n  topLevelEventsToDispatchConfig[type].dependencies = [type];                                                          // 443\n}                                                                                                                      // 444\n                                                                                                                       // 445\nvar ON_CLICK_KEY = keyOf({ onClick: null });                                                                           // 446\nvar onClickListeners = {};                                                                                             // 447\n                                                                                                                       // 448\nvar SimpleEventPlugin = {                                                                                              // 449\n                                                                                                                       // 450\n  eventTypes: eventTypes,                                                                                              // 451\n                                                                                                                       // 452\n  /**                                                                                                                  // 453\n   * @param {string} topLevelType Record from `EventConstants`.                                                        // 454\n   * @param {DOMEventTarget} topLevelTarget The listening component root node.                                         // 455\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.                                                          // 456\n   * @param {object} nativeEvent Native browser event.                                                                 // 457\n   * @return {*} An accumulation of synthetic events.                                                                  // 458\n   * @see {EventPluginHub.extractEvents}                                                                               // 459\n   */                                                                                                                  // 460\n  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {           // 461\n    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];                                                 // 462\n    if (!dispatchConfig) {                                                                                             // 463\n      return null;                                                                                                     // 464\n    }                                                                                                                  // 465\n    var EventConstructor;                                                                                              // 466\n    switch (topLevelType) {                                                                                            // 467\n      case topLevelTypes.topAbort:                                                                                     // 468\n      case topLevelTypes.topCanPlay:                                                                                   // 469\n      case topLevelTypes.topCanPlayThrough:                                                                            // 470\n      case topLevelTypes.topDurationChange:                                                                            // 471\n      case topLevelTypes.topEmptied:                                                                                   // 472\n      case topLevelTypes.topEncrypted:                                                                                 // 473\n      case topLevelTypes.topEnded:                                                                                     // 474\n      case topLevelTypes.topError:                                                                                     // 475\n      case topLevelTypes.topInput:                                                                                     // 476\n      case topLevelTypes.topLoad:                                                                                      // 477\n      case topLevelTypes.topLoadedData:                                                                                // 478\n      case topLevelTypes.topLoadedMetadata:                                                                            // 479\n      case topLevelTypes.topLoadStart:                                                                                 // 480\n      case topLevelTypes.topPause:                                                                                     // 481\n      case topLevelTypes.topPlay:                                                                                      // 482\n      case topLevelTypes.topPlaying:                                                                                   // 483\n      case topLevelTypes.topProgress:                                                                                  // 484\n      case topLevelTypes.topRateChange:                                                                                // 485\n      case topLevelTypes.topReset:                                                                                     // 486\n      case topLevelTypes.topSeeked:                                                                                    // 487\n      case topLevelTypes.topSeeking:                                                                                   // 488\n      case topLevelTypes.topStalled:                                                                                   // 489\n      case topLevelTypes.topSubmit:                                                                                    // 490\n      case topLevelTypes.topSuspend:                                                                                   // 491\n      case topLevelTypes.topTimeUpdate:                                                                                // 492\n      case topLevelTypes.topVolumeChange:                                                                              // 493\n      case topLevelTypes.topWaiting:                                                                                   // 494\n        // HTML Events                                                                                                 // 495\n        // @see http://www.w3.org/TR/html5/index.html#events-0                                                         // 496\n        EventConstructor = SyntheticEvent;                                                                             // 497\n        break;                                                                                                         // 498\n      case topLevelTypes.topKeyPress:                                                                                  // 499\n        // FireFox creates a keypress event for function keys too. This removes                                        // 500\n        // the unwanted keypress events. Enter is however both printable and                                           // 501\n        // non-printable. One would expect Tab to be as well (but it isn't).                                           // 502\n        if (getEventCharCode(nativeEvent) === 0) {                                                                     // 503\n          return null;                                                                                                 // 504\n        }                                                                                                              // 505\n      /* falls through */                                                                                              // 506\n      case topLevelTypes.topKeyDown:                                                                                   // 507\n      case topLevelTypes.topKeyUp:                                                                                     // 508\n        EventConstructor = SyntheticKeyboardEvent;                                                                     // 509\n        break;                                                                                                         // 510\n      case topLevelTypes.topBlur:                                                                                      // 511\n      case topLevelTypes.topFocus:                                                                                     // 512\n        EventConstructor = SyntheticFocusEvent;                                                                        // 513\n        break;                                                                                                         // 514\n      case topLevelTypes.topClick:                                                                                     // 515\n        // Firefox creates a click event on right mouse clicks. This removes the                                       // 516\n        // unwanted click events.                                                                                      // 517\n        if (nativeEvent.button === 2) {                                                                                // 518\n          return null;                                                                                                 // 519\n        }                                                                                                              // 520\n      /* falls through */                                                                                              // 521\n      case topLevelTypes.topContextMenu:                                                                               // 522\n      case topLevelTypes.topDoubleClick:                                                                               // 523\n      case topLevelTypes.topMouseDown:                                                                                 // 524\n      case topLevelTypes.topMouseMove:                                                                                 // 525\n      case topLevelTypes.topMouseOut:                                                                                  // 526\n      case topLevelTypes.topMouseOver:                                                                                 // 527\n      case topLevelTypes.topMouseUp:                                                                                   // 528\n        EventConstructor = SyntheticMouseEvent;                                                                        // 529\n        break;                                                                                                         // 530\n      case topLevelTypes.topDrag:                                                                                      // 531\n      case topLevelTypes.topDragEnd:                                                                                   // 532\n      case topLevelTypes.topDragEnter:                                                                                 // 533\n      case topLevelTypes.topDragExit:                                                                                  // 534\n      case topLevelTypes.topDragLeave:                                                                                 // 535\n      case topLevelTypes.topDragOver:                                                                                  // 536\n      case topLevelTypes.topDragStart:                                                                                 // 537\n      case topLevelTypes.topDrop:                                                                                      // 538\n        EventConstructor = SyntheticDragEvent;                                                                         // 539\n        break;                                                                                                         // 540\n      case topLevelTypes.topTouchCancel:                                                                               // 541\n      case topLevelTypes.topTouchEnd:                                                                                  // 542\n      case topLevelTypes.topTouchMove:                                                                                 // 543\n      case topLevelTypes.topTouchStart:                                                                                // 544\n        EventConstructor = SyntheticTouchEvent;                                                                        // 545\n        break;                                                                                                         // 546\n      case topLevelTypes.topScroll:                                                                                    // 547\n        EventConstructor = SyntheticUIEvent;                                                                           // 548\n        break;                                                                                                         // 549\n      case topLevelTypes.topWheel:                                                                                     // 550\n        EventConstructor = SyntheticWheelEvent;                                                                        // 551\n        break;                                                                                                         // 552\n      case topLevelTypes.topCopy:                                                                                      // 553\n      case topLevelTypes.topCut:                                                                                       // 554\n      case topLevelTypes.topPaste:                                                                                     // 555\n        EventConstructor = SyntheticClipboardEvent;                                                                    // 556\n        break;                                                                                                         // 557\n    }                                                                                                                  // 558\n    !EventConstructor ? process.env.NODE_ENV !== 'production' ? invariant(false, 'SimpleEventPlugin: Unhandled event type, `%s`.', topLevelType) : invariant(false) : undefined;\n    var event = EventConstructor.getPooled(dispatchConfig, topLevelTargetID, nativeEvent, nativeEventTarget);          // 560\n    EventPropagators.accumulateTwoPhaseDispatches(event);                                                              // 561\n    return event;                                                                                                      // 562\n  },                                                                                                                   // 563\n                                                                                                                       // 564\n  didPutListener: function (id, registrationName, listener) {                                                          // 565\n    // Mobile Safari does not fire properly bubble click events on                                                     // 566\n    // non-interactive elements, which means delegated click listeners do not                                          // 567\n    // fire. The workaround for this bug involves attaching an empty click                                             // 568\n    // listener on the target node.                                                                                    // 569\n    if (registrationName === ON_CLICK_KEY) {                                                                           // 570\n      var node = ReactMount.getNode(id);                                                                               // 571\n      if (!onClickListeners[id]) {                                                                                     // 572\n        onClickListeners[id] = EventListener.listen(node, 'click', emptyFunction);                                     // 573\n      }                                                                                                                // 574\n    }                                                                                                                  // 575\n  },                                                                                                                   // 576\n                                                                                                                       // 577\n  willDeleteListener: function (id, registrationName) {                                                                // 578\n    if (registrationName === ON_CLICK_KEY) {                                                                           // 579\n      onClickListeners[id].remove();                                                                                   // 580\n      delete onClickListeners[id];                                                                                     // 581\n    }                                                                                                                  // 582\n  }                                                                                                                    // 583\n                                                                                                                       // 584\n};                                                                                                                     // 585\n                                                                                                                       // 586\nmodule.exports = SimpleEventPlugin;                                                                                    // 587\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"SyntheticClipboardEvent.js\":[\"./SyntheticEvent\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/SyntheticClipboardEvent.js                                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule SyntheticClipboardEvent                                                                             // 9\n * @typechecks static-only                                                                                             // 10\n */                                                                                                                    // 11\n                                                                                                                       // 12\n'use strict';                                                                                                          // 13\n                                                                                                                       // 14\nvar SyntheticEvent = require('./SyntheticEvent');                                                                      // 15\n                                                                                                                       // 16\n/**                                                                                                                    // 17\n * @interface Event                                                                                                    // 18\n * @see http://www.w3.org/TR/clipboard-apis/                                                                           // 19\n */                                                                                                                    // 20\nvar ClipboardEventInterface = {                                                                                        // 21\n  clipboardData: function (event) {                                                                                    // 22\n    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;                                      // 23\n  }                                                                                                                    // 24\n};                                                                                                                     // 25\n                                                                                                                       // 26\n/**                                                                                                                    // 27\n * @param {object} dispatchConfig Configuration used to dispatch this event.                                           // 28\n * @param {string} dispatchMarker Marker identifying the event target.                                                 // 29\n * @param {object} nativeEvent Native browser event.                                                                   // 30\n * @extends {SyntheticUIEvent}                                                                                         // 31\n */                                                                                                                    // 32\nfunction SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {                     // 33\n  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);                           // 34\n}                                                                                                                      // 35\n                                                                                                                       // 36\nSyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);                                         // 37\n                                                                                                                       // 38\nmodule.exports = SyntheticClipboardEvent;                                                                              // 39\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"SyntheticFocusEvent.js\":[\"./SyntheticUIEvent\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/SyntheticFocusEvent.js                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule SyntheticFocusEvent                                                                                 // 9\n * @typechecks static-only                                                                                             // 10\n */                                                                                                                    // 11\n                                                                                                                       // 12\n'use strict';                                                                                                          // 13\n                                                                                                                       // 14\nvar SyntheticUIEvent = require('./SyntheticUIEvent');                                                                  // 15\n                                                                                                                       // 16\n/**                                                                                                                    // 17\n * @interface FocusEvent                                                                                               // 18\n * @see http://www.w3.org/TR/DOM-Level-3-Events/                                                                       // 19\n */                                                                                                                    // 20\nvar FocusEventInterface = {                                                                                            // 21\n  relatedTarget: null                                                                                                  // 22\n};                                                                                                                     // 23\n                                                                                                                       // 24\n/**                                                                                                                    // 25\n * @param {object} dispatchConfig Configuration used to dispatch this event.                                           // 26\n * @param {string} dispatchMarker Marker identifying the event target.                                                 // 27\n * @param {object} nativeEvent Native browser event.                                                                   // 28\n * @extends {SyntheticUIEvent}                                                                                         // 29\n */                                                                                                                    // 30\nfunction SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {                         // 31\n  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);                         // 32\n}                                                                                                                      // 33\n                                                                                                                       // 34\nSyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);                                               // 35\n                                                                                                                       // 36\nmodule.exports = SyntheticFocusEvent;                                                                                  // 37\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"SyntheticKeyboardEvent.js\":[\"./SyntheticUIEvent\",\"./getEventCharCode\",\"./getEventKey\",\"./getEventModifierState\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/SyntheticKeyboardEvent.js                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule SyntheticKeyboardEvent                                                                              // 9\n * @typechecks static-only                                                                                             // 10\n */                                                                                                                    // 11\n                                                                                                                       // 12\n'use strict';                                                                                                          // 13\n                                                                                                                       // 14\nvar SyntheticUIEvent = require('./SyntheticUIEvent');                                                                  // 15\n                                                                                                                       // 16\nvar getEventCharCode = require('./getEventCharCode');                                                                  // 17\nvar getEventKey = require('./getEventKey');                                                                            // 18\nvar getEventModifierState = require('./getEventModifierState');                                                        // 19\n                                                                                                                       // 20\n/**                                                                                                                    // 21\n * @interface KeyboardEvent                                                                                            // 22\n * @see http://www.w3.org/TR/DOM-Level-3-Events/                                                                       // 23\n */                                                                                                                    // 24\nvar KeyboardEventInterface = {                                                                                         // 25\n  key: getEventKey,                                                                                                    // 26\n  location: null,                                                                                                      // 27\n  ctrlKey: null,                                                                                                       // 28\n  shiftKey: null,                                                                                                      // 29\n  altKey: null,                                                                                                        // 30\n  metaKey: null,                                                                                                       // 31\n  repeat: null,                                                                                                        // 32\n  locale: null,                                                                                                        // 33\n  getModifierState: getEventModifierState,                                                                             // 34\n  // Legacy Interface                                                                                                  // 35\n  charCode: function (event) {                                                                                         // 36\n    // `charCode` is the result of a KeyPress event and represents the value of                                        // 37\n    // the actual printable character.                                                                                 // 38\n                                                                                                                       // 39\n    // KeyPress is deprecated, but its replacement is not yet final and not                                            // 40\n    // implemented in any major browser. Only KeyPress has charCode.                                                   // 41\n    if (event.type === 'keypress') {                                                                                   // 42\n      return getEventCharCode(event);                                                                                  // 43\n    }                                                                                                                  // 44\n    return 0;                                                                                                          // 45\n  },                                                                                                                   // 46\n  keyCode: function (event) {                                                                                          // 47\n    // `keyCode` is the result of a KeyDown/Up event and represents the value of                                       // 48\n    // physical keyboard key.                                                                                          // 49\n                                                                                                                       // 50\n    // The actual meaning of the value depends on the users' keyboard layout                                           // 51\n    // which cannot be detected. Assuming that it is a US keyboard layout                                              // 52\n    // provides a surprisingly accurate mapping for US and European users.                                             // 53\n    // Due to this, it is left to the user to implement at this time.                                                  // 54\n    if (event.type === 'keydown' || event.type === 'keyup') {                                                          // 55\n      return event.keyCode;                                                                                            // 56\n    }                                                                                                                  // 57\n    return 0;                                                                                                          // 58\n  },                                                                                                                   // 59\n  which: function (event) {                                                                                            // 60\n    // `which` is an alias for either `keyCode` or `charCode` depending on the                                         // 61\n    // type of the event.                                                                                              // 62\n    if (event.type === 'keypress') {                                                                                   // 63\n      return getEventCharCode(event);                                                                                  // 64\n    }                                                                                                                  // 65\n    if (event.type === 'keydown' || event.type === 'keyup') {                                                          // 66\n      return event.keyCode;                                                                                            // 67\n    }                                                                                                                  // 68\n    return 0;                                                                                                          // 69\n  }                                                                                                                    // 70\n};                                                                                                                     // 71\n                                                                                                                       // 72\n/**                                                                                                                    // 73\n * @param {object} dispatchConfig Configuration used to dispatch this event.                                           // 74\n * @param {string} dispatchMarker Marker identifying the event target.                                                 // 75\n * @param {object} nativeEvent Native browser event.                                                                   // 76\n * @extends {SyntheticUIEvent}                                                                                         // 77\n */                                                                                                                    // 78\nfunction SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {                      // 79\n  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);                         // 80\n}                                                                                                                      // 81\n                                                                                                                       // 82\nSyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);                                         // 83\n                                                                                                                       // 84\nmodule.exports = SyntheticKeyboardEvent;                                                                               // 85\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"getEventCharCode.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/getEventCharCode.js                                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule getEventCharCode                                                                                    // 9\n * @typechecks static-only                                                                                             // 10\n */                                                                                                                    // 11\n                                                                                                                       // 12\n'use strict';                                                                                                          // 13\n                                                                                                                       // 14\n/**                                                                                                                    // 15\n * `charCode` represents the actual \"character code\" and is safe to use with                                           // 16\n * `String.fromCharCode`. As such, only keys that correspond to printable                                              // 17\n * characters produce a valid `charCode`, the only exception to this is Enter.                                         // 18\n * The Tab-key is considered non-printable and does not have a `charCode`,                                             // 19\n * presumably because it does not produce a tab-character in browsers.                                                 // 20\n *                                                                                                                     // 21\n * @param {object} nativeEvent Native browser event.                                                                   // 22\n * @return {number} Normalized `charCode` property.                                                                    // 23\n */                                                                                                                    // 24\nfunction getEventCharCode(nativeEvent) {                                                                               // 25\n  var charCode;                                                                                                        // 26\n  var keyCode = nativeEvent.keyCode;                                                                                   // 27\n                                                                                                                       // 28\n  if ('charCode' in nativeEvent) {                                                                                     // 29\n    charCode = nativeEvent.charCode;                                                                                   // 30\n                                                                                                                       // 31\n    // FF does not set `charCode` for the Enter-key, check against `keyCode`.                                          // 32\n    if (charCode === 0 && keyCode === 13) {                                                                            // 33\n      charCode = 13;                                                                                                   // 34\n    }                                                                                                                  // 35\n  } else {                                                                                                             // 36\n    // IE8 does not implement `charCode`, but `keyCode` has the correct value.                                         // 37\n    charCode = keyCode;                                                                                                // 38\n  }                                                                                                                    // 39\n                                                                                                                       // 40\n  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.                                       // 41\n  // Must not discard the (non-)printable Enter-key.                                                                   // 42\n  if (charCode >= 32 || charCode === 13) {                                                                             // 43\n    return charCode;                                                                                                   // 44\n  }                                                                                                                    // 45\n                                                                                                                       // 46\n  return 0;                                                                                                            // 47\n}                                                                                                                      // 48\n                                                                                                                       // 49\nmodule.exports = getEventCharCode;                                                                                     // 50\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"getEventKey.js\":[\"./getEventCharCode\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/getEventKey.js                                                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule getEventKey                                                                                         // 9\n * @typechecks static-only                                                                                             // 10\n */                                                                                                                    // 11\n                                                                                                                       // 12\n'use strict';                                                                                                          // 13\n                                                                                                                       // 14\nvar getEventCharCode = require('./getEventCharCode');                                                                  // 15\n                                                                                                                       // 16\n/**                                                                                                                    // 17\n * Normalization of deprecated HTML5 `key` values                                                                      // 18\n * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names                                       // 19\n */                                                                                                                    // 20\nvar normalizeKey = {                                                                                                   // 21\n  'Esc': 'Escape',                                                                                                     // 22\n  'Spacebar': ' ',                                                                                                     // 23\n  'Left': 'ArrowLeft',                                                                                                 // 24\n  'Up': 'ArrowUp',                                                                                                     // 25\n  'Right': 'ArrowRight',                                                                                               // 26\n  'Down': 'ArrowDown',                                                                                                 // 27\n  'Del': 'Delete',                                                                                                     // 28\n  'Win': 'OS',                                                                                                         // 29\n  'Menu': 'ContextMenu',                                                                                               // 30\n  'Apps': 'ContextMenu',                                                                                               // 31\n  'Scroll': 'ScrollLock',                                                                                              // 32\n  'MozPrintableKey': 'Unidentified'                                                                                    // 33\n};                                                                                                                     // 34\n                                                                                                                       // 35\n/**                                                                                                                    // 36\n * Translation from legacy `keyCode` to HTML5 `key`                                                                    // 37\n * Only special keys supported, all others depend on keyboard layout or browser                                        // 38\n * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names                                       // 39\n */                                                                                                                    // 40\nvar translateToKey = {                                                                                                 // 41\n  8: 'Backspace',                                                                                                      // 42\n  9: 'Tab',                                                                                                            // 43\n  12: 'Clear',                                                                                                         // 44\n  13: 'Enter',                                                                                                         // 45\n  16: 'Shift',                                                                                                         // 46\n  17: 'Control',                                                                                                       // 47\n  18: 'Alt',                                                                                                           // 48\n  19: 'Pause',                                                                                                         // 49\n  20: 'CapsLock',                                                                                                      // 50\n  27: 'Escape',                                                                                                        // 51\n  32: ' ',                                                                                                             // 52\n  33: 'PageUp',                                                                                                        // 53\n  34: 'PageDown',                                                                                                      // 54\n  35: 'End',                                                                                                           // 55\n  36: 'Home',                                                                                                          // 56\n  37: 'ArrowLeft',                                                                                                     // 57\n  38: 'ArrowUp',                                                                                                       // 58\n  39: 'ArrowRight',                                                                                                    // 59\n  40: 'ArrowDown',                                                                                                     // 60\n  45: 'Insert',                                                                                                        // 61\n  46: 'Delete',                                                                                                        // 62\n  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',                                                    // 63\n  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',                                                 // 64\n  144: 'NumLock',                                                                                                      // 65\n  145: 'ScrollLock',                                                                                                   // 66\n  224: 'Meta'                                                                                                          // 67\n};                                                                                                                     // 68\n                                                                                                                       // 69\n/**                                                                                                                    // 70\n * @param {object} nativeEvent Native browser event.                                                                   // 71\n * @return {string} Normalized `key` property.                                                                         // 72\n */                                                                                                                    // 73\nfunction getEventKey(nativeEvent) {                                                                                    // 74\n  if (nativeEvent.key) {                                                                                               // 75\n    // Normalize inconsistent values reported by browsers due to                                                       // 76\n    // implementations of a working draft specification.                                                               // 77\n                                                                                                                       // 78\n    // FireFox implements `key` but returns `MozPrintableKey` for all                                                  // 79\n    // printable characters (normalized to `Unidentified`), ignore it.                                                 // 80\n    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;                                                        // 81\n    if (key !== 'Unidentified') {                                                                                      // 82\n      return key;                                                                                                      // 83\n    }                                                                                                                  // 84\n  }                                                                                                                    // 85\n                                                                                                                       // 86\n  // Browser does not implement `key`, polyfill as much of it as we can.                                               // 87\n  if (nativeEvent.type === 'keypress') {                                                                               // 88\n    var charCode = getEventCharCode(nativeEvent);                                                                      // 89\n                                                                                                                       // 90\n    // The enter-key is technically both printable and non-printable and can                                           // 91\n    // thus be captured by `keypress`, no other non-printable key should.                                              // 92\n    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);                                                  // 93\n  }                                                                                                                    // 94\n  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {                                                // 95\n    // While user keyboard layout determines the actual meaning of each                                                // 96\n    // `keyCode` value, almost all function keys have a universal value.                                               // 97\n    return translateToKey[nativeEvent.keyCode] || 'Unidentified';                                                      // 98\n  }                                                                                                                    // 99\n  return '';                                                                                                           // 100\n}                                                                                                                      // 101\n                                                                                                                       // 102\nmodule.exports = getEventKey;                                                                                          // 103\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"SyntheticDragEvent.js\":[\"./SyntheticMouseEvent\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/SyntheticDragEvent.js                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule SyntheticDragEvent                                                                                  // 9\n * @typechecks static-only                                                                                             // 10\n */                                                                                                                    // 11\n                                                                                                                       // 12\n'use strict';                                                                                                          // 13\n                                                                                                                       // 14\nvar SyntheticMouseEvent = require('./SyntheticMouseEvent');                                                            // 15\n                                                                                                                       // 16\n/**                                                                                                                    // 17\n * @interface DragEvent                                                                                                // 18\n * @see http://www.w3.org/TR/DOM-Level-3-Events/                                                                       // 19\n */                                                                                                                    // 20\nvar DragEventInterface = {                                                                                             // 21\n  dataTransfer: null                                                                                                   // 22\n};                                                                                                                     // 23\n                                                                                                                       // 24\n/**                                                                                                                    // 25\n * @param {object} dispatchConfig Configuration used to dispatch this event.                                           // 26\n * @param {string} dispatchMarker Marker identifying the event target.                                                 // 27\n * @param {object} nativeEvent Native browser event.                                                                   // 28\n * @extends {SyntheticUIEvent}                                                                                         // 29\n */                                                                                                                    // 30\nfunction SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {                          // 31\n  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);                      // 32\n}                                                                                                                      // 33\n                                                                                                                       // 34\nSyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);                                              // 35\n                                                                                                                       // 36\nmodule.exports = SyntheticDragEvent;                                                                                   // 37\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"SyntheticTouchEvent.js\":[\"./SyntheticUIEvent\",\"./getEventModifierState\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/SyntheticTouchEvent.js                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule SyntheticTouchEvent                                                                                 // 9\n * @typechecks static-only                                                                                             // 10\n */                                                                                                                    // 11\n                                                                                                                       // 12\n'use strict';                                                                                                          // 13\n                                                                                                                       // 14\nvar SyntheticUIEvent = require('./SyntheticUIEvent');                                                                  // 15\n                                                                                                                       // 16\nvar getEventModifierState = require('./getEventModifierState');                                                        // 17\n                                                                                                                       // 18\n/**                                                                                                                    // 19\n * @interface TouchEvent                                                                                               // 20\n * @see http://www.w3.org/TR/touch-events/                                                                             // 21\n */                                                                                                                    // 22\nvar TouchEventInterface = {                                                                                            // 23\n  touches: null,                                                                                                       // 24\n  targetTouches: null,                                                                                                 // 25\n  changedTouches: null,                                                                                                // 26\n  altKey: null,                                                                                                        // 27\n  metaKey: null,                                                                                                       // 28\n  ctrlKey: null,                                                                                                       // 29\n  shiftKey: null,                                                                                                      // 30\n  getModifierState: getEventModifierState                                                                              // 31\n};                                                                                                                     // 32\n                                                                                                                       // 33\n/**                                                                                                                    // 34\n * @param {object} dispatchConfig Configuration used to dispatch this event.                                           // 35\n * @param {string} dispatchMarker Marker identifying the event target.                                                 // 36\n * @param {object} nativeEvent Native browser event.                                                                   // 37\n * @extends {SyntheticUIEvent}                                                                                         // 38\n */                                                                                                                    // 39\nfunction SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {                         // 40\n  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);                         // 41\n}                                                                                                                      // 42\n                                                                                                                       // 43\nSyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);                                               // 44\n                                                                                                                       // 45\nmodule.exports = SyntheticTouchEvent;                                                                                  // 46\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"SyntheticWheelEvent.js\":[\"./SyntheticMouseEvent\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/SyntheticWheelEvent.js                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule SyntheticWheelEvent                                                                                 // 9\n * @typechecks static-only                                                                                             // 10\n */                                                                                                                    // 11\n                                                                                                                       // 12\n'use strict';                                                                                                          // 13\n                                                                                                                       // 14\nvar SyntheticMouseEvent = require('./SyntheticMouseEvent');                                                            // 15\n                                                                                                                       // 16\n/**                                                                                                                    // 17\n * @interface WheelEvent                                                                                               // 18\n * @see http://www.w3.org/TR/DOM-Level-3-Events/                                                                       // 19\n */                                                                                                                    // 20\nvar WheelEventInterface = {                                                                                            // 21\n  deltaX: function (event) {                                                                                           // 22\n    return 'deltaX' in event ? event.deltaX :                                                                          // 23\n    // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).                                         // 24\n    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;                                                                   // 25\n  },                                                                                                                   // 26\n  deltaY: function (event) {                                                                                           // 27\n    return 'deltaY' in event ? event.deltaY :                                                                          // 28\n    // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).                                          // 29\n    'wheelDeltaY' in event ? -event.wheelDeltaY :                                                                      // 30\n    // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).                                             // 31\n    'wheelDelta' in event ? -event.wheelDelta : 0;                                                                     // 32\n  },                                                                                                                   // 33\n  deltaZ: null,                                                                                                        // 34\n                                                                                                                       // 35\n  // Browsers without \"deltaMode\" is reporting in raw wheel delta where one                                            // 36\n  // notch on the scroll is always +/- 120, roughly equivalent to pixels.                                              // 37\n  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or                                              // 38\n  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.                                                // 39\n  deltaMode: null                                                                                                      // 40\n};                                                                                                                     // 41\n                                                                                                                       // 42\n/**                                                                                                                    // 43\n * @param {object} dispatchConfig Configuration used to dispatch this event.                                           // 44\n * @param {string} dispatchMarker Marker identifying the event target.                                                 // 45\n * @param {object} nativeEvent Native browser event.                                                                   // 46\n * @extends {SyntheticMouseEvent}                                                                                      // 47\n */                                                                                                                    // 48\nfunction SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {                         // 49\n  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);                      // 50\n}                                                                                                                      // 51\n                                                                                                                       // 52\nSyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);                                            // 53\n                                                                                                                       // 54\nmodule.exports = SyntheticWheelEvent;                                                                                  // 55\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"SVGDOMPropertyConfig.js\":[\"./DOMProperty\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/SVGDOMPropertyConfig.js                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule SVGDOMPropertyConfig                                                                                // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar DOMProperty = require('./DOMProperty');                                                                            // 14\n                                                                                                                       // 15\nvar MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;                                                     // 16\n                                                                                                                       // 17\nvar NS = {                                                                                                             // 18\n  xlink: 'http://www.w3.org/1999/xlink',                                                                               // 19\n  xml: 'http://www.w3.org/XML/1998/namespace'                                                                          // 20\n};                                                                                                                     // 21\n                                                                                                                       // 22\nvar SVGDOMPropertyConfig = {                                                                                           // 23\n  Properties: {                                                                                                        // 24\n    clipPath: MUST_USE_ATTRIBUTE,                                                                                      // 25\n    cx: MUST_USE_ATTRIBUTE,                                                                                            // 26\n    cy: MUST_USE_ATTRIBUTE,                                                                                            // 27\n    d: MUST_USE_ATTRIBUTE,                                                                                             // 28\n    dx: MUST_USE_ATTRIBUTE,                                                                                            // 29\n    dy: MUST_USE_ATTRIBUTE,                                                                                            // 30\n    fill: MUST_USE_ATTRIBUTE,                                                                                          // 31\n    fillOpacity: MUST_USE_ATTRIBUTE,                                                                                   // 32\n    fontFamily: MUST_USE_ATTRIBUTE,                                                                                    // 33\n    fontSize: MUST_USE_ATTRIBUTE,                                                                                      // 34\n    fx: MUST_USE_ATTRIBUTE,                                                                                            // 35\n    fy: MUST_USE_ATTRIBUTE,                                                                                            // 36\n    gradientTransform: MUST_USE_ATTRIBUTE,                                                                             // 37\n    gradientUnits: MUST_USE_ATTRIBUTE,                                                                                 // 38\n    markerEnd: MUST_USE_ATTRIBUTE,                                                                                     // 39\n    markerMid: MUST_USE_ATTRIBUTE,                                                                                     // 40\n    markerStart: MUST_USE_ATTRIBUTE,                                                                                   // 41\n    offset: MUST_USE_ATTRIBUTE,                                                                                        // 42\n    opacity: MUST_USE_ATTRIBUTE,                                                                                       // 43\n    patternContentUnits: MUST_USE_ATTRIBUTE,                                                                           // 44\n    patternUnits: MUST_USE_ATTRIBUTE,                                                                                  // 45\n    points: MUST_USE_ATTRIBUTE,                                                                                        // 46\n    preserveAspectRatio: MUST_USE_ATTRIBUTE,                                                                           // 47\n    r: MUST_USE_ATTRIBUTE,                                                                                             // 48\n    rx: MUST_USE_ATTRIBUTE,                                                                                            // 49\n    ry: MUST_USE_ATTRIBUTE,                                                                                            // 50\n    spreadMethod: MUST_USE_ATTRIBUTE,                                                                                  // 51\n    stopColor: MUST_USE_ATTRIBUTE,                                                                                     // 52\n    stopOpacity: MUST_USE_ATTRIBUTE,                                                                                   // 53\n    stroke: MUST_USE_ATTRIBUTE,                                                                                        // 54\n    strokeDasharray: MUST_USE_ATTRIBUTE,                                                                               // 55\n    strokeLinecap: MUST_USE_ATTRIBUTE,                                                                                 // 56\n    strokeOpacity: MUST_USE_ATTRIBUTE,                                                                                 // 57\n    strokeWidth: MUST_USE_ATTRIBUTE,                                                                                   // 58\n    textAnchor: MUST_USE_ATTRIBUTE,                                                                                    // 59\n    transform: MUST_USE_ATTRIBUTE,                                                                                     // 60\n    version: MUST_USE_ATTRIBUTE,                                                                                       // 61\n    viewBox: MUST_USE_ATTRIBUTE,                                                                                       // 62\n    x1: MUST_USE_ATTRIBUTE,                                                                                            // 63\n    x2: MUST_USE_ATTRIBUTE,                                                                                            // 64\n    x: MUST_USE_ATTRIBUTE,                                                                                             // 65\n    xlinkActuate: MUST_USE_ATTRIBUTE,                                                                                  // 66\n    xlinkArcrole: MUST_USE_ATTRIBUTE,                                                                                  // 67\n    xlinkHref: MUST_USE_ATTRIBUTE,                                                                                     // 68\n    xlinkRole: MUST_USE_ATTRIBUTE,                                                                                     // 69\n    xlinkShow: MUST_USE_ATTRIBUTE,                                                                                     // 70\n    xlinkTitle: MUST_USE_ATTRIBUTE,                                                                                    // 71\n    xlinkType: MUST_USE_ATTRIBUTE,                                                                                     // 72\n    xmlBase: MUST_USE_ATTRIBUTE,                                                                                       // 73\n    xmlLang: MUST_USE_ATTRIBUTE,                                                                                       // 74\n    xmlSpace: MUST_USE_ATTRIBUTE,                                                                                      // 75\n    y1: MUST_USE_ATTRIBUTE,                                                                                            // 76\n    y2: MUST_USE_ATTRIBUTE,                                                                                            // 77\n    y: MUST_USE_ATTRIBUTE                                                                                              // 78\n  },                                                                                                                   // 79\n  DOMAttributeNamespaces: {                                                                                            // 80\n    xlinkActuate: NS.xlink,                                                                                            // 81\n    xlinkArcrole: NS.xlink,                                                                                            // 82\n    xlinkHref: NS.xlink,                                                                                               // 83\n    xlinkRole: NS.xlink,                                                                                               // 84\n    xlinkShow: NS.xlink,                                                                                               // 85\n    xlinkTitle: NS.xlink,                                                                                              // 86\n    xlinkType: NS.xlink,                                                                                               // 87\n    xmlBase: NS.xml,                                                                                                   // 88\n    xmlLang: NS.xml,                                                                                                   // 89\n    xmlSpace: NS.xml                                                                                                   // 90\n  },                                                                                                                   // 91\n  DOMAttributeNames: {                                                                                                 // 92\n    clipPath: 'clip-path',                                                                                             // 93\n    fillOpacity: 'fill-opacity',                                                                                       // 94\n    fontFamily: 'font-family',                                                                                         // 95\n    fontSize: 'font-size',                                                                                             // 96\n    gradientTransform: 'gradientTransform',                                                                            // 97\n    gradientUnits: 'gradientUnits',                                                                                    // 98\n    markerEnd: 'marker-end',                                                                                           // 99\n    markerMid: 'marker-mid',                                                                                           // 100\n    markerStart: 'marker-start',                                                                                       // 101\n    patternContentUnits: 'patternContentUnits',                                                                        // 102\n    patternUnits: 'patternUnits',                                                                                      // 103\n    preserveAspectRatio: 'preserveAspectRatio',                                                                        // 104\n    spreadMethod: 'spreadMethod',                                                                                      // 105\n    stopColor: 'stop-color',                                                                                           // 106\n    stopOpacity: 'stop-opacity',                                                                                       // 107\n    strokeDasharray: 'stroke-dasharray',                                                                               // 108\n    strokeLinecap: 'stroke-linecap',                                                                                   // 109\n    strokeOpacity: 'stroke-opacity',                                                                                   // 110\n    strokeWidth: 'stroke-width',                                                                                       // 111\n    textAnchor: 'text-anchor',                                                                                         // 112\n    viewBox: 'viewBox',                                                                                                // 113\n    xlinkActuate: 'xlink:actuate',                                                                                     // 114\n    xlinkArcrole: 'xlink:arcrole',                                                                                     // 115\n    xlinkHref: 'xlink:href',                                                                                           // 116\n    xlinkRole: 'xlink:role',                                                                                           // 117\n    xlinkShow: 'xlink:show',                                                                                           // 118\n    xlinkTitle: 'xlink:title',                                                                                         // 119\n    xlinkType: 'xlink:type',                                                                                           // 120\n    xmlBase: 'xml:base',                                                                                               // 121\n    xmlLang: 'xml:lang',                                                                                               // 122\n    xmlSpace: 'xml:space'                                                                                              // 123\n  }                                                                                                                    // 124\n};                                                                                                                     // 125\n                                                                                                                       // 126\nmodule.exports = SVGDOMPropertyConfig;                                                                                 // 127\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactDefaultPerf.js\":[\"./DOMProperty\",\"./ReactDefaultPerfAnalysis\",\"./ReactMount\",\"./ReactPerf\",\"fbjs/lib/performanceNow\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactDefaultPerf.js                                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactDefaultPerf                                                                                    // 9\n * @typechecks static-only                                                                                             // 10\n */                                                                                                                    // 11\n                                                                                                                       // 12\n'use strict';                                                                                                          // 13\n                                                                                                                       // 14\nvar DOMProperty = require('./DOMProperty');                                                                            // 15\nvar ReactDefaultPerfAnalysis = require('./ReactDefaultPerfAnalysis');                                                  // 16\nvar ReactMount = require('./ReactMount');                                                                              // 17\nvar ReactPerf = require('./ReactPerf');                                                                                // 18\n                                                                                                                       // 19\nvar performanceNow = require('fbjs/lib/performanceNow');                                                               // 20\n                                                                                                                       // 21\nfunction roundFloat(val) {                                                                                             // 22\n  return Math.floor(val * 100) / 100;                                                                                  // 23\n}                                                                                                                      // 24\n                                                                                                                       // 25\nfunction addValue(obj, key, val) {                                                                                     // 26\n  obj[key] = (obj[key] || 0) + val;                                                                                    // 27\n}                                                                                                                      // 28\n                                                                                                                       // 29\nvar ReactDefaultPerf = {                                                                                               // 30\n  _allMeasurements: [], // last item in the list is the current one                                                    // 31\n  _mountStack: [0],                                                                                                    // 32\n  _injected: false,                                                                                                    // 33\n                                                                                                                       // 34\n  start: function () {                                                                                                 // 35\n    if (!ReactDefaultPerf._injected) {                                                                                 // 36\n      ReactPerf.injection.injectMeasure(ReactDefaultPerf.measure);                                                     // 37\n    }                                                                                                                  // 38\n                                                                                                                       // 39\n    ReactDefaultPerf._allMeasurements.length = 0;                                                                      // 40\n    ReactPerf.enableMeasure = true;                                                                                    // 41\n  },                                                                                                                   // 42\n                                                                                                                       // 43\n  stop: function () {                                                                                                  // 44\n    ReactPerf.enableMeasure = false;                                                                                   // 45\n  },                                                                                                                   // 46\n                                                                                                                       // 47\n  getLastMeasurements: function () {                                                                                   // 48\n    return ReactDefaultPerf._allMeasurements;                                                                          // 49\n  },                                                                                                                   // 50\n                                                                                                                       // 51\n  printExclusive: function (measurements) {                                                                            // 52\n    measurements = measurements || ReactDefaultPerf._allMeasurements;                                                  // 53\n    var summary = ReactDefaultPerfAnalysis.getExclusiveSummary(measurements);                                          // 54\n    console.table(summary.map(function (item) {                                                                        // 55\n      return {                                                                                                         // 56\n        'Component class name': item.componentName,                                                                    // 57\n        'Total inclusive time (ms)': roundFloat(item.inclusive),                                                       // 58\n        'Exclusive mount time (ms)': roundFloat(item.exclusive),                                                       // 59\n        'Exclusive render time (ms)': roundFloat(item.render),                                                         // 60\n        'Mount time per instance (ms)': roundFloat(item.exclusive / item.count),                                       // 61\n        'Render time per instance (ms)': roundFloat(item.render / item.count),                                         // 62\n        'Instances': item.count                                                                                        // 63\n      };                                                                                                               // 64\n    }));                                                                                                               // 65\n    // TODO: ReactDefaultPerfAnalysis.getTotalTime() does not return the correct                                       // 66\n    // number.                                                                                                         // 67\n  },                                                                                                                   // 68\n                                                                                                                       // 69\n  printInclusive: function (measurements) {                                                                            // 70\n    measurements = measurements || ReactDefaultPerf._allMeasurements;                                                  // 71\n    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements);                                          // 72\n    console.table(summary.map(function (item) {                                                                        // 73\n      return {                                                                                                         // 74\n        'Owner > component': item.componentName,                                                                       // 75\n        'Inclusive time (ms)': roundFloat(item.time),                                                                  // 76\n        'Instances': item.count                                                                                        // 77\n      };                                                                                                               // 78\n    }));                                                                                                               // 79\n    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');                // 80\n  },                                                                                                                   // 81\n                                                                                                                       // 82\n  getMeasurementsSummaryMap: function (measurements) {                                                                 // 83\n    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements, true);                                    // 84\n    return summary.map(function (item) {                                                                               // 85\n      return {                                                                                                         // 86\n        'Owner > component': item.componentName,                                                                       // 87\n        'Wasted time (ms)': item.time,                                                                                 // 88\n        'Instances': item.count                                                                                        // 89\n      };                                                                                                               // 90\n    });                                                                                                                // 91\n  },                                                                                                                   // 92\n                                                                                                                       // 93\n  printWasted: function (measurements) {                                                                               // 94\n    measurements = measurements || ReactDefaultPerf._allMeasurements;                                                  // 95\n    console.table(ReactDefaultPerf.getMeasurementsSummaryMap(measurements));                                           // 96\n    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');                // 97\n  },                                                                                                                   // 98\n                                                                                                                       // 99\n  printDOM: function (measurements) {                                                                                  // 100\n    measurements = measurements || ReactDefaultPerf._allMeasurements;                                                  // 101\n    var summary = ReactDefaultPerfAnalysis.getDOMSummary(measurements);                                                // 102\n    console.table(summary.map(function (item) {                                                                        // 103\n      var result = {};                                                                                                 // 104\n      result[DOMProperty.ID_ATTRIBUTE_NAME] = item.id;                                                                 // 105\n      result.type = item.type;                                                                                         // 106\n      result.args = JSON.stringify(item.args);                                                                         // 107\n      return result;                                                                                                   // 108\n    }));                                                                                                               // 109\n    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');                // 110\n  },                                                                                                                   // 111\n                                                                                                                       // 112\n  _recordWrite: function (id, fnName, totalTime, args) {                                                               // 113\n    // TODO: totalTime isn't that useful since it doesn't count paints/reflows                                         // 114\n    var writes = ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1].writes;               // 115\n    writes[id] = writes[id] || [];                                                                                     // 116\n    writes[id].push({                                                                                                  // 117\n      type: fnName,                                                                                                    // 118\n      time: totalTime,                                                                                                 // 119\n      args: args                                                                                                       // 120\n    });                                                                                                                // 121\n  },                                                                                                                   // 122\n                                                                                                                       // 123\n  measure: function (moduleName, fnName, func) {                                                                       // 124\n    return function () {                                                                                               // 125\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {                           // 126\n        args[_key] = arguments[_key];                                                                                  // 127\n      }                                                                                                                // 128\n                                                                                                                       // 129\n      var totalTime;                                                                                                   // 130\n      var rv;                                                                                                          // 131\n      var start;                                                                                                       // 132\n                                                                                                                       // 133\n      if (fnName === '_renderNewRootComponent' || fnName === 'flushBatchedUpdates') {                                  // 134\n        // A \"measurement\" is a set of metrics recorded for each flush. We want                                        // 135\n        // to group the metrics for a given flush together so we can look at the                                       // 136\n        // components that rendered and the DOM operations that actually                                               // 137\n        // happened to determine the amount of \"wasted work\" performed.                                                // 138\n        ReactDefaultPerf._allMeasurements.push({                                                                       // 139\n          exclusive: {},                                                                                               // 140\n          inclusive: {},                                                                                               // 141\n          render: {},                                                                                                  // 142\n          counts: {},                                                                                                  // 143\n          writes: {},                                                                                                  // 144\n          displayNames: {},                                                                                            // 145\n          totalTime: 0,                                                                                                // 146\n          created: {}                                                                                                  // 147\n        });                                                                                                            // 148\n        start = performanceNow();                                                                                      // 149\n        rv = func.apply(this, args);                                                                                   // 150\n        ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1].totalTime = performanceNow() - start;\n        return rv;                                                                                                     // 152\n      } else if (fnName === '_mountImageIntoNode' || moduleName === 'ReactBrowserEventEmitter' || moduleName === 'ReactDOMIDOperations' || moduleName === 'CSSPropertyOperations' || moduleName === 'DOMChildrenOperations' || moduleName === 'DOMPropertyOperations') {\n        start = performanceNow();                                                                                      // 154\n        rv = func.apply(this, args);                                                                                   // 155\n        totalTime = performanceNow() - start;                                                                          // 156\n                                                                                                                       // 157\n        if (fnName === '_mountImageIntoNode') {                                                                        // 158\n          var mountID = ReactMount.getID(args[1]);                                                                     // 159\n          ReactDefaultPerf._recordWrite(mountID, fnName, totalTime, args[0]);                                          // 160\n        } else if (fnName === 'dangerouslyProcessChildrenUpdates') {                                                   // 161\n          // special format                                                                                            // 162\n          args[0].forEach(function (update) {                                                                          // 163\n            var writeArgs = {};                                                                                        // 164\n            if (update.fromIndex !== null) {                                                                           // 165\n              writeArgs.fromIndex = update.fromIndex;                                                                  // 166\n            }                                                                                                          // 167\n            if (update.toIndex !== null) {                                                                             // 168\n              writeArgs.toIndex = update.toIndex;                                                                      // 169\n            }                                                                                                          // 170\n            if (update.textContent !== null) {                                                                         // 171\n              writeArgs.textContent = update.textContent;                                                              // 172\n            }                                                                                                          // 173\n            if (update.markupIndex !== null) {                                                                         // 174\n              writeArgs.markup = args[1][update.markupIndex];                                                          // 175\n            }                                                                                                          // 176\n            ReactDefaultPerf._recordWrite(update.parentID, update.type, totalTime, writeArgs);                         // 177\n          });                                                                                                          // 178\n        } else {                                                                                                       // 179\n          // basic format                                                                                              // 180\n          var id = args[0];                                                                                            // 181\n          if (typeof id === 'object') {                                                                                // 182\n            id = ReactMount.getID(args[0]);                                                                            // 183\n          }                                                                                                            // 184\n          ReactDefaultPerf._recordWrite(id, fnName, totalTime, Array.prototype.slice.call(args, 1));                   // 185\n        }                                                                                                              // 186\n        return rv;                                                                                                     // 187\n      } else if (moduleName === 'ReactCompositeComponent' && (fnName === 'mountComponent' || fnName === 'updateComponent' || // TODO: receiveComponent()?\n      fnName === '_renderValidatedComponent')) {                                                                       // 189\n                                                                                                                       // 190\n        if (this._currentElement.type === ReactMount.TopLevelWrapper) {                                                // 191\n          return func.apply(this, args);                                                                               // 192\n        }                                                                                                              // 193\n                                                                                                                       // 194\n        var rootNodeID = fnName === 'mountComponent' ? args[0] : this._rootNodeID;                                     // 195\n        var isRender = fnName === '_renderValidatedComponent';                                                         // 196\n        var isMount = fnName === 'mountComponent';                                                                     // 197\n                                                                                                                       // 198\n        var mountStack = ReactDefaultPerf._mountStack;                                                                 // 199\n        var entry = ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1];                   // 200\n                                                                                                                       // 201\n        if (isRender) {                                                                                                // 202\n          addValue(entry.counts, rootNodeID, 1);                                                                       // 203\n        } else if (isMount) {                                                                                          // 204\n          entry.created[rootNodeID] = true;                                                                            // 205\n          mountStack.push(0);                                                                                          // 206\n        }                                                                                                              // 207\n                                                                                                                       // 208\n        start = performanceNow();                                                                                      // 209\n        rv = func.apply(this, args);                                                                                   // 210\n        totalTime = performanceNow() - start;                                                                          // 211\n                                                                                                                       // 212\n        if (isRender) {                                                                                                // 213\n          addValue(entry.render, rootNodeID, totalTime);                                                               // 214\n        } else if (isMount) {                                                                                          // 215\n          var subMountTime = mountStack.pop();                                                                         // 216\n          mountStack[mountStack.length - 1] += totalTime;                                                              // 217\n          addValue(entry.exclusive, rootNodeID, totalTime - subMountTime);                                             // 218\n          addValue(entry.inclusive, rootNodeID, totalTime);                                                            // 219\n        } else {                                                                                                       // 220\n          addValue(entry.inclusive, rootNodeID, totalTime);                                                            // 221\n        }                                                                                                              // 222\n                                                                                                                       // 223\n        entry.displayNames[rootNodeID] = {                                                                             // 224\n          current: this.getName(),                                                                                     // 225\n          owner: this._currentElement._owner ? this._currentElement._owner.getName() : '<root>'                        // 226\n        };                                                                                                             // 227\n                                                                                                                       // 228\n        return rv;                                                                                                     // 229\n      } else {                                                                                                         // 230\n        return func.apply(this, args);                                                                                 // 231\n      }                                                                                                                // 232\n    };                                                                                                                 // 233\n  }                                                                                                                    // 234\n};                                                                                                                     // 235\n                                                                                                                       // 236\nmodule.exports = ReactDefaultPerf;                                                                                     // 237\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactDefaultPerfAnalysis.js\":[\"./Object.assign\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactDefaultPerfAnalysis.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactDefaultPerfAnalysis                                                                            // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar assign = require('./Object.assign');                                                                               // 14\n                                                                                                                       // 15\n// Don't try to save users less than 1.2ms (a number I made up)                                                        // 16\nvar DONT_CARE_THRESHOLD = 1.2;                                                                                         // 17\nvar DOM_OPERATION_TYPES = {                                                                                            // 18\n  '_mountImageIntoNode': 'set innerHTML',                                                                              // 19\n  INSERT_MARKUP: 'set innerHTML',                                                                                      // 20\n  MOVE_EXISTING: 'move',                                                                                               // 21\n  REMOVE_NODE: 'remove',                                                                                               // 22\n  SET_MARKUP: 'set innerHTML',                                                                                         // 23\n  TEXT_CONTENT: 'set textContent',                                                                                     // 24\n  'setValueForProperty': 'update attribute',                                                                           // 25\n  'setValueForAttribute': 'update attribute',                                                                          // 26\n  'deleteValueForProperty': 'remove attribute',                                                                        // 27\n  'setValueForStyles': 'update styles',                                                                                // 28\n  'replaceNodeWithMarkup': 'replace',                                                                                  // 29\n  'updateTextContent': 'set textContent'                                                                               // 30\n};                                                                                                                     // 31\n                                                                                                                       // 32\nfunction getTotalTime(measurements) {                                                                                  // 33\n  // TODO: return number of DOM ops? could be misleading.                                                              // 34\n  // TODO: measure dropped frames after reconcile?                                                                     // 35\n  // TODO: log total time of each reconcile and the top-level component                                                // 36\n  // class that triggered it.                                                                                          // 37\n  var totalTime = 0;                                                                                                   // 38\n  for (var i = 0; i < measurements.length; i++) {                                                                      // 39\n    var measurement = measurements[i];                                                                                 // 40\n    totalTime += measurement.totalTime;                                                                                // 41\n  }                                                                                                                    // 42\n  return totalTime;                                                                                                    // 43\n}                                                                                                                      // 44\n                                                                                                                       // 45\nfunction getDOMSummary(measurements) {                                                                                 // 46\n  var items = [];                                                                                                      // 47\n  measurements.forEach(function (measurement) {                                                                        // 48\n    Object.keys(measurement.writes).forEach(function (id) {                                                            // 49\n      measurement.writes[id].forEach(function (write) {                                                                // 50\n        items.push({                                                                                                   // 51\n          id: id,                                                                                                      // 52\n          type: DOM_OPERATION_TYPES[write.type] || write.type,                                                         // 53\n          args: write.args                                                                                             // 54\n        });                                                                                                            // 55\n      });                                                                                                              // 56\n    });                                                                                                                // 57\n  });                                                                                                                  // 58\n  return items;                                                                                                        // 59\n}                                                                                                                      // 60\n                                                                                                                       // 61\nfunction getExclusiveSummary(measurements) {                                                                           // 62\n  var candidates = {};                                                                                                 // 63\n  var displayName;                                                                                                     // 64\n                                                                                                                       // 65\n  for (var i = 0; i < measurements.length; i++) {                                                                      // 66\n    var measurement = measurements[i];                                                                                 // 67\n    var allIDs = assign({}, measurement.exclusive, measurement.inclusive);                                             // 68\n                                                                                                                       // 69\n    for (var id in allIDs) {                                                                                           // 70\n      displayName = measurement.displayNames[id].current;                                                              // 71\n                                                                                                                       // 72\n      candidates[displayName] = candidates[displayName] || {                                                           // 73\n        componentName: displayName,                                                                                    // 74\n        inclusive: 0,                                                                                                  // 75\n        exclusive: 0,                                                                                                  // 76\n        render: 0,                                                                                                     // 77\n        count: 0                                                                                                       // 78\n      };                                                                                                               // 79\n      if (measurement.render[id]) {                                                                                    // 80\n        candidates[displayName].render += measurement.render[id];                                                      // 81\n      }                                                                                                                // 82\n      if (measurement.exclusive[id]) {                                                                                 // 83\n        candidates[displayName].exclusive += measurement.exclusive[id];                                                // 84\n      }                                                                                                                // 85\n      if (measurement.inclusive[id]) {                                                                                 // 86\n        candidates[displayName].inclusive += measurement.inclusive[id];                                                // 87\n      }                                                                                                                // 88\n      if (measurement.counts[id]) {                                                                                    // 89\n        candidates[displayName].count += measurement.counts[id];                                                       // 90\n      }                                                                                                                // 91\n    }                                                                                                                  // 92\n  }                                                                                                                    // 93\n                                                                                                                       // 94\n  // Now make a sorted array with the results.                                                                         // 95\n  var arr = [];                                                                                                        // 96\n  for (displayName in candidates) {                                                                                    // 97\n    if (candidates[displayName].exclusive >= DONT_CARE_THRESHOLD) {                                                    // 98\n      arr.push(candidates[displayName]);                                                                               // 99\n    }                                                                                                                  // 100\n  }                                                                                                                    // 101\n                                                                                                                       // 102\n  arr.sort(function (a, b) {                                                                                           // 103\n    return b.exclusive - a.exclusive;                                                                                  // 104\n  });                                                                                                                  // 105\n                                                                                                                       // 106\n  return arr;                                                                                                          // 107\n}                                                                                                                      // 108\n                                                                                                                       // 109\nfunction getInclusiveSummary(measurements, onlyClean) {                                                                // 110\n  var candidates = {};                                                                                                 // 111\n  var inclusiveKey;                                                                                                    // 112\n                                                                                                                       // 113\n  for (var i = 0; i < measurements.length; i++) {                                                                      // 114\n    var measurement = measurements[i];                                                                                 // 115\n    var allIDs = assign({}, measurement.exclusive, measurement.inclusive);                                             // 116\n    var cleanComponents;                                                                                               // 117\n                                                                                                                       // 118\n    if (onlyClean) {                                                                                                   // 119\n      cleanComponents = getUnchangedComponents(measurement);                                                           // 120\n    }                                                                                                                  // 121\n                                                                                                                       // 122\n    for (var id in allIDs) {                                                                                           // 123\n      if (onlyClean && !cleanComponents[id]) {                                                                         // 124\n        continue;                                                                                                      // 125\n      }                                                                                                                // 126\n                                                                                                                       // 127\n      var displayName = measurement.displayNames[id];                                                                  // 128\n                                                                                                                       // 129\n      // Inclusive time is not useful for many components without knowing where                                        // 130\n      // they are instantiated. So we aggregate inclusive time with both the                                           // 131\n      // owner and current displayName as the key.                                                                     // 132\n      inclusiveKey = displayName.owner + ' > ' + displayName.current;                                                  // 133\n                                                                                                                       // 134\n      candidates[inclusiveKey] = candidates[inclusiveKey] || {                                                         // 135\n        componentName: inclusiveKey,                                                                                   // 136\n        time: 0,                                                                                                       // 137\n        count: 0                                                                                                       // 138\n      };                                                                                                               // 139\n                                                                                                                       // 140\n      if (measurement.inclusive[id]) {                                                                                 // 141\n        candidates[inclusiveKey].time += measurement.inclusive[id];                                                    // 142\n      }                                                                                                                // 143\n      if (measurement.counts[id]) {                                                                                    // 144\n        candidates[inclusiveKey].count += measurement.counts[id];                                                      // 145\n      }                                                                                                                // 146\n    }                                                                                                                  // 147\n  }                                                                                                                    // 148\n                                                                                                                       // 149\n  // Now make a sorted array with the results.                                                                         // 150\n  var arr = [];                                                                                                        // 151\n  for (inclusiveKey in candidates) {                                                                                   // 152\n    if (candidates[inclusiveKey].time >= DONT_CARE_THRESHOLD) {                                                        // 153\n      arr.push(candidates[inclusiveKey]);                                                                              // 154\n    }                                                                                                                  // 155\n  }                                                                                                                    // 156\n                                                                                                                       // 157\n  arr.sort(function (a, b) {                                                                                           // 158\n    return b.time - a.time;                                                                                            // 159\n  });                                                                                                                  // 160\n                                                                                                                       // 161\n  return arr;                                                                                                          // 162\n}                                                                                                                      // 163\n                                                                                                                       // 164\nfunction getUnchangedComponents(measurement) {                                                                         // 165\n  // For a given reconcile, look at which components did not actually                                                  // 166\n  // render anything to the DOM and return a mapping of their ID to                                                    // 167\n  // the amount of time it took to render the entire subtree.                                                          // 168\n  var cleanComponents = {};                                                                                            // 169\n  var dirtyLeafIDs = Object.keys(measurement.writes);                                                                  // 170\n  var allIDs = assign({}, measurement.exclusive, measurement.inclusive);                                               // 171\n                                                                                                                       // 172\n  for (var id in allIDs) {                                                                                             // 173\n    var isDirty = false;                                                                                               // 174\n    // For each component that rendered, see if a component that triggered                                             // 175\n    // a DOM op is in its subtree.                                                                                     // 176\n    for (var i = 0; i < dirtyLeafIDs.length; i++) {                                                                    // 177\n      if (dirtyLeafIDs[i].indexOf(id) === 0) {                                                                         // 178\n        isDirty = true;                                                                                                // 179\n        break;                                                                                                         // 180\n      }                                                                                                                // 181\n    }                                                                                                                  // 182\n    // check if component newly created                                                                                // 183\n    if (measurement.created[id]) {                                                                                     // 184\n      isDirty = true;                                                                                                  // 185\n    }                                                                                                                  // 186\n    if (!isDirty && measurement.counts[id] > 0) {                                                                      // 187\n      cleanComponents[id] = true;                                                                                      // 188\n    }                                                                                                                  // 189\n  }                                                                                                                    // 190\n  return cleanComponents;                                                                                              // 191\n}                                                                                                                      // 192\n                                                                                                                       // 193\nvar ReactDefaultPerfAnalysis = {                                                                                       // 194\n  getExclusiveSummary: getExclusiveSummary,                                                                            // 195\n  getInclusiveSummary: getInclusiveSummary,                                                                            // 196\n  getDOMSummary: getDOMSummary,                                                                                        // 197\n  getTotalTime: getTotalTime                                                                                           // 198\n};                                                                                                                     // 199\n                                                                                                                       // 200\nmodule.exports = ReactDefaultPerfAnalysis;                                                                             // 201\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactVersion.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactVersion.js                                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactVersion                                                                                        // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nmodule.exports = '0.14.7';                                                                                             // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"renderSubtreeIntoContainer.js\":[\"./ReactMount\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/renderSubtreeIntoContainer.js                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n* @providesModule renderSubtreeIntoContainer                                                                           // 9\n*/                                                                                                                     // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar ReactMount = require('./ReactMount');                                                                              // 14\n                                                                                                                       // 15\nmodule.exports = ReactMount.renderSubtreeIntoContainer;                                                                // 16\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactDOMServer.js\":[\"./ReactDefaultInjection\",\"./ReactServerRendering\",\"./ReactVersion\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactDOMServer.js                                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactDOMServer                                                                                      // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar ReactDefaultInjection = require('./ReactDefaultInjection');                                                        // 14\nvar ReactServerRendering = require('./ReactServerRendering');                                                          // 15\nvar ReactVersion = require('./ReactVersion');                                                                          // 16\n                                                                                                                       // 17\nReactDefaultInjection.inject();                                                                                        // 18\n                                                                                                                       // 19\nvar ReactDOMServer = {                                                                                                 // 20\n  renderToString: ReactServerRendering.renderToString,                                                                 // 21\n  renderToStaticMarkup: ReactServerRendering.renderToStaticMarkup,                                                     // 22\n  version: ReactVersion                                                                                                // 23\n};                                                                                                                     // 24\n                                                                                                                       // 25\nmodule.exports = ReactDOMServer;                                                                                       // 26\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactServerRendering.js\":[\"./ReactDefaultBatchingStrategy\",\"./ReactElement\",\"./ReactInstanceHandles\",\"./ReactMarkupChecksum\",\"./ReactServerBatchingStrategy\",\"./ReactServerRenderingTransaction\",\"./ReactUpdates\",\"fbjs/lib/emptyObject\",\"./instantiateReactComponent\",\"fbjs/lib/invariant\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactServerRendering.js                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @typechecks static-only                                                                                             // 9\n * @providesModule ReactServerRendering                                                                                // 10\n */                                                                                                                    // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar ReactDefaultBatchingStrategy = require('./ReactDefaultBatchingStrategy');                                          // 14\nvar ReactElement = require('./ReactElement');                                                                          // 15\nvar ReactInstanceHandles = require('./ReactInstanceHandles');                                                          // 16\nvar ReactMarkupChecksum = require('./ReactMarkupChecksum');                                                            // 17\nvar ReactServerBatchingStrategy = require('./ReactServerBatchingStrategy');                                            // 18\nvar ReactServerRenderingTransaction = require('./ReactServerRenderingTransaction');                                    // 19\nvar ReactUpdates = require('./ReactUpdates');                                                                          // 20\n                                                                                                                       // 21\nvar emptyObject = require('fbjs/lib/emptyObject');                                                                     // 22\nvar instantiateReactComponent = require('./instantiateReactComponent');                                                // 23\nvar invariant = require('fbjs/lib/invariant');                                                                         // 24\n                                                                                                                       // 25\n/**                                                                                                                    // 26\n * @param {ReactElement} element                                                                                       // 27\n * @return {string} the HTML markup                                                                                    // 28\n */                                                                                                                    // 29\nfunction renderToString(element) {                                                                                     // 30\n  !ReactElement.isValidElement(element) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'renderToString(): You must pass a valid ReactElement.') : invariant(false) : undefined;\n                                                                                                                       // 32\n  var transaction;                                                                                                     // 33\n  try {                                                                                                                // 34\n    ReactUpdates.injection.injectBatchingStrategy(ReactServerBatchingStrategy);                                        // 35\n                                                                                                                       // 36\n    var id = ReactInstanceHandles.createReactRootID();                                                                 // 37\n    transaction = ReactServerRenderingTransaction.getPooled(false);                                                    // 38\n                                                                                                                       // 39\n    return transaction.perform(function () {                                                                           // 40\n      var componentInstance = instantiateReactComponent(element, null);                                                // 41\n      var markup = componentInstance.mountComponent(id, transaction, emptyObject);                                     // 42\n      return ReactMarkupChecksum.addChecksumToMarkup(markup);                                                          // 43\n    }, null);                                                                                                          // 44\n  } finally {                                                                                                          // 45\n    ReactServerRenderingTransaction.release(transaction);                                                              // 46\n    // Revert to the DOM batching strategy since these two renderers                                                   // 47\n    // currently share these stateful modules.                                                                         // 48\n    ReactUpdates.injection.injectBatchingStrategy(ReactDefaultBatchingStrategy);                                       // 49\n  }                                                                                                                    // 50\n}                                                                                                                      // 51\n                                                                                                                       // 52\n/**                                                                                                                    // 53\n * @param {ReactElement} element                                                                                       // 54\n * @return {string} the HTML markup, without the extra React ID and checksum                                           // 55\n * (for generating static pages)                                                                                       // 56\n */                                                                                                                    // 57\nfunction renderToStaticMarkup(element) {                                                                               // 58\n  !ReactElement.isValidElement(element) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'renderToStaticMarkup(): You must pass a valid ReactElement.') : invariant(false) : undefined;\n                                                                                                                       // 60\n  var transaction;                                                                                                     // 61\n  try {                                                                                                                // 62\n    ReactUpdates.injection.injectBatchingStrategy(ReactServerBatchingStrategy);                                        // 63\n                                                                                                                       // 64\n    var id = ReactInstanceHandles.createReactRootID();                                                                 // 65\n    transaction = ReactServerRenderingTransaction.getPooled(true);                                                     // 66\n                                                                                                                       // 67\n    return transaction.perform(function () {                                                                           // 68\n      var componentInstance = instantiateReactComponent(element, null);                                                // 69\n      return componentInstance.mountComponent(id, transaction, emptyObject);                                           // 70\n    }, null);                                                                                                          // 71\n  } finally {                                                                                                          // 72\n    ReactServerRenderingTransaction.release(transaction);                                                              // 73\n    // Revert to the DOM batching strategy since these two renderers                                                   // 74\n    // currently share these stateful modules.                                                                         // 75\n    ReactUpdates.injection.injectBatchingStrategy(ReactDefaultBatchingStrategy);                                       // 76\n  }                                                                                                                    // 77\n}                                                                                                                      // 78\n                                                                                                                       // 79\nmodule.exports = {                                                                                                     // 80\n  renderToString: renderToString,                                                                                      // 81\n  renderToStaticMarkup: renderToStaticMarkup                                                                           // 82\n};                                                                                                                     // 83\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactServerBatchingStrategy.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactServerBatchingStrategy.js                                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2014-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactServerBatchingStrategy                                                                         // 9\n * @typechecks                                                                                                         // 10\n */                                                                                                                    // 11\n                                                                                                                       // 12\n'use strict';                                                                                                          // 13\n                                                                                                                       // 14\nvar ReactServerBatchingStrategy = {                                                                                    // 15\n  isBatchingUpdates: false,                                                                                            // 16\n  batchedUpdates: function (callback) {                                                                                // 17\n    // Don't do anything here. During the server rendering we don't want to                                            // 18\n    // schedule any updates. We will simply ignore them.                                                               // 19\n  }                                                                                                                    // 20\n};                                                                                                                     // 21\n                                                                                                                       // 22\nmodule.exports = ReactServerBatchingStrategy;                                                                          // 23\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ReactServerRenderingTransaction.js\":[\"./PooledClass\",\"./CallbackQueue\",\"./Transaction\",\"./Object.assign\",\"fbjs/lib/emptyFunction\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactServerRenderingTransaction.js                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2014-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactServerRenderingTransaction                                                                     // 9\n * @typechecks                                                                                                         // 10\n */                                                                                                                    // 11\n                                                                                                                       // 12\n'use strict';                                                                                                          // 13\n                                                                                                                       // 14\nvar PooledClass = require('./PooledClass');                                                                            // 15\nvar CallbackQueue = require('./CallbackQueue');                                                                        // 16\nvar Transaction = require('./Transaction');                                                                            // 17\n                                                                                                                       // 18\nvar assign = require('./Object.assign');                                                                               // 19\nvar emptyFunction = require('fbjs/lib/emptyFunction');                                                                 // 20\n                                                                                                                       // 21\n/**                                                                                                                    // 22\n * Provides a `CallbackQueue` queue for collecting `onDOMReady` callbacks                                              // 23\n * during the performing of the transaction.                                                                           // 24\n */                                                                                                                    // 25\nvar ON_DOM_READY_QUEUEING = {                                                                                          // 26\n  /**                                                                                                                  // 27\n   * Initializes the internal `onDOMReady` queue.                                                                      // 28\n   */                                                                                                                  // 29\n  initialize: function () {                                                                                            // 30\n    this.reactMountReady.reset();                                                                                      // 31\n  },                                                                                                                   // 32\n                                                                                                                       // 33\n  close: emptyFunction                                                                                                 // 34\n};                                                                                                                     // 35\n                                                                                                                       // 36\n/**                                                                                                                    // 37\n * Executed within the scope of the `Transaction` instance. Consider these as                                          // 38\n * being member methods, but with an implied ordering while being isolated from                                        // 39\n * each other.                                                                                                         // 40\n */                                                                                                                    // 41\nvar TRANSACTION_WRAPPERS = [ON_DOM_READY_QUEUEING];                                                                    // 42\n                                                                                                                       // 43\n/**                                                                                                                    // 44\n * @class ReactServerRenderingTransaction                                                                              // 45\n * @param {boolean} renderToStaticMarkup                                                                               // 46\n */                                                                                                                    // 47\nfunction ReactServerRenderingTransaction(renderToStaticMarkup) {                                                       // 48\n  this.reinitializeTransaction();                                                                                      // 49\n  this.renderToStaticMarkup = renderToStaticMarkup;                                                                    // 50\n  this.reactMountReady = CallbackQueue.getPooled(null);                                                                // 51\n  this.useCreateElement = false;                                                                                       // 52\n}                                                                                                                      // 53\n                                                                                                                       // 54\nvar Mixin = {                                                                                                          // 55\n  /**                                                                                                                  // 56\n   * @see Transaction                                                                                                  // 57\n   * @abstract                                                                                                         // 58\n   * @final                                                                                                            // 59\n   * @return {array} Empty list of operation wrap procedures.                                                          // 60\n   */                                                                                                                  // 61\n  getTransactionWrappers: function () {                                                                                // 62\n    return TRANSACTION_WRAPPERS;                                                                                       // 63\n  },                                                                                                                   // 64\n                                                                                                                       // 65\n  /**                                                                                                                  // 66\n   * @return {object} The queue to collect `onDOMReady` callbacks with.                                                // 67\n   */                                                                                                                  // 68\n  getReactMountReady: function () {                                                                                    // 69\n    return this.reactMountReady;                                                                                       // 70\n  },                                                                                                                   // 71\n                                                                                                                       // 72\n  /**                                                                                                                  // 73\n   * `PooledClass` looks for this, and will invoke this before allowing this                                           // 74\n   * instance to be reused.                                                                                            // 75\n   */                                                                                                                  // 76\n  destructor: function () {                                                                                            // 77\n    CallbackQueue.release(this.reactMountReady);                                                                       // 78\n    this.reactMountReady = null;                                                                                       // 79\n  }                                                                                                                    // 80\n};                                                                                                                     // 81\n                                                                                                                       // 82\nassign(ReactServerRenderingTransaction.prototype, Transaction.Mixin, Mixin);                                           // 83\n                                                                                                                       // 84\nPooledClass.addPoolingTo(ReactServerRenderingTransaction);                                                             // 85\n                                                                                                                       // 86\nmodule.exports = ReactServerRenderingTransaction;                                                                      // 87\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactIsomorphic.js\":[\"./ReactChildren\",\"./ReactComponent\",\"./ReactClass\",\"./ReactDOMFactories\",\"./ReactElement\",\"./ReactElementValidator\",\"./ReactPropTypes\",\"./ReactVersion\",\"./Object.assign\",\"./onlyChild\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactIsomorphic.js                                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactIsomorphic                                                                                     // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar ReactChildren = require('./ReactChildren');                                                                        // 14\nvar ReactComponent = require('./ReactComponent');                                                                      // 15\nvar ReactClass = require('./ReactClass');                                                                              // 16\nvar ReactDOMFactories = require('./ReactDOMFactories');                                                                // 17\nvar ReactElement = require('./ReactElement');                                                                          // 18\nvar ReactElementValidator = require('./ReactElementValidator');                                                        // 19\nvar ReactPropTypes = require('./ReactPropTypes');                                                                      // 20\nvar ReactVersion = require('./ReactVersion');                                                                          // 21\n                                                                                                                       // 22\nvar assign = require('./Object.assign');                                                                               // 23\nvar onlyChild = require('./onlyChild');                                                                                // 24\n                                                                                                                       // 25\nvar createElement = ReactElement.createElement;                                                                        // 26\nvar createFactory = ReactElement.createFactory;                                                                        // 27\nvar cloneElement = ReactElement.cloneElement;                                                                          // 28\n                                                                                                                       // 29\nif (process.env.NODE_ENV !== 'production') {                                                                           // 30\n  createElement = ReactElementValidator.createElement;                                                                 // 31\n  createFactory = ReactElementValidator.createFactory;                                                                 // 32\n  cloneElement = ReactElementValidator.cloneElement;                                                                   // 33\n}                                                                                                                      // 34\n                                                                                                                       // 35\nvar React = {                                                                                                          // 36\n                                                                                                                       // 37\n  // Modern                                                                                                            // 38\n                                                                                                                       // 39\n  Children: {                                                                                                          // 40\n    map: ReactChildren.map,                                                                                            // 41\n    forEach: ReactChildren.forEach,                                                                                    // 42\n    count: ReactChildren.count,                                                                                        // 43\n    toArray: ReactChildren.toArray,                                                                                    // 44\n    only: onlyChild                                                                                                    // 45\n  },                                                                                                                   // 46\n                                                                                                                       // 47\n  Component: ReactComponent,                                                                                           // 48\n                                                                                                                       // 49\n  createElement: createElement,                                                                                        // 50\n  cloneElement: cloneElement,                                                                                          // 51\n  isValidElement: ReactElement.isValidElement,                                                                         // 52\n                                                                                                                       // 53\n  // Classic                                                                                                           // 54\n                                                                                                                       // 55\n  PropTypes: ReactPropTypes,                                                                                           // 56\n  createClass: ReactClass.createClass,                                                                                 // 57\n  createFactory: createFactory,                                                                                        // 58\n  createMixin: function (mixin) {                                                                                      // 59\n    // Currently a noop. Will be used to validate and trace mixins.                                                    // 60\n    return mixin;                                                                                                      // 61\n  },                                                                                                                   // 62\n                                                                                                                       // 63\n  // This looks DOM specific but these are actually isomorphic helpers                                                 // 64\n  // since they are just generating DOM strings.                                                                       // 65\n  DOM: ReactDOMFactories,                                                                                              // 66\n                                                                                                                       // 67\n  version: ReactVersion,                                                                                               // 68\n                                                                                                                       // 69\n  // Hook for JSX spread, don't use this for anything else.                                                            // 70\n  __spread: assign                                                                                                     // 71\n};                                                                                                                     // 72\n                                                                                                                       // 73\nmodule.exports = React;                                                                                                // 74\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactDOMFactories.js\":[\"./ReactElement\",\"./ReactElementValidator\",\"fbjs/lib/mapObject\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactDOMFactories.js                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactDOMFactories                                                                                   // 9\n * @typechecks static-only                                                                                             // 10\n */                                                                                                                    // 11\n                                                                                                                       // 12\n'use strict';                                                                                                          // 13\n                                                                                                                       // 14\nvar ReactElement = require('./ReactElement');                                                                          // 15\nvar ReactElementValidator = require('./ReactElementValidator');                                                        // 16\n                                                                                                                       // 17\nvar mapObject = require('fbjs/lib/mapObject');                                                                         // 18\n                                                                                                                       // 19\n/**                                                                                                                    // 20\n * Create a factory that creates HTML tag elements.                                                                    // 21\n *                                                                                                                     // 22\n * @param {string} tag Tag name (e.g. `div`).                                                                          // 23\n * @private                                                                                                            // 24\n */                                                                                                                    // 25\nfunction createDOMFactory(tag) {                                                                                       // 26\n  if (process.env.NODE_ENV !== 'production') {                                                                         // 27\n    return ReactElementValidator.createFactory(tag);                                                                   // 28\n  }                                                                                                                    // 29\n  return ReactElement.createFactory(tag);                                                                              // 30\n}                                                                                                                      // 31\n                                                                                                                       // 32\n/**                                                                                                                    // 33\n * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.                                          // 34\n * This is also accessible via `React.DOM`.                                                                            // 35\n *                                                                                                                     // 36\n * @public                                                                                                             // 37\n */                                                                                                                    // 38\nvar ReactDOMFactories = mapObject({                                                                                    // 39\n  a: 'a',                                                                                                              // 40\n  abbr: 'abbr',                                                                                                        // 41\n  address: 'address',                                                                                                  // 42\n  area: 'area',                                                                                                        // 43\n  article: 'article',                                                                                                  // 44\n  aside: 'aside',                                                                                                      // 45\n  audio: 'audio',                                                                                                      // 46\n  b: 'b',                                                                                                              // 47\n  base: 'base',                                                                                                        // 48\n  bdi: 'bdi',                                                                                                          // 49\n  bdo: 'bdo',                                                                                                          // 50\n  big: 'big',                                                                                                          // 51\n  blockquote: 'blockquote',                                                                                            // 52\n  body: 'body',                                                                                                        // 53\n  br: 'br',                                                                                                            // 54\n  button: 'button',                                                                                                    // 55\n  canvas: 'canvas',                                                                                                    // 56\n  caption: 'caption',                                                                                                  // 57\n  cite: 'cite',                                                                                                        // 58\n  code: 'code',                                                                                                        // 59\n  col: 'col',                                                                                                          // 60\n  colgroup: 'colgroup',                                                                                                // 61\n  data: 'data',                                                                                                        // 62\n  datalist: 'datalist',                                                                                                // 63\n  dd: 'dd',                                                                                                            // 64\n  del: 'del',                                                                                                          // 65\n  details: 'details',                                                                                                  // 66\n  dfn: 'dfn',                                                                                                          // 67\n  dialog: 'dialog',                                                                                                    // 68\n  div: 'div',                                                                                                          // 69\n  dl: 'dl',                                                                                                            // 70\n  dt: 'dt',                                                                                                            // 71\n  em: 'em',                                                                                                            // 72\n  embed: 'embed',                                                                                                      // 73\n  fieldset: 'fieldset',                                                                                                // 74\n  figcaption: 'figcaption',                                                                                            // 75\n  figure: 'figure',                                                                                                    // 76\n  footer: 'footer',                                                                                                    // 77\n  form: 'form',                                                                                                        // 78\n  h1: 'h1',                                                                                                            // 79\n  h2: 'h2',                                                                                                            // 80\n  h3: 'h3',                                                                                                            // 81\n  h4: 'h4',                                                                                                            // 82\n  h5: 'h5',                                                                                                            // 83\n  h6: 'h6',                                                                                                            // 84\n  head: 'head',                                                                                                        // 85\n  header: 'header',                                                                                                    // 86\n  hgroup: 'hgroup',                                                                                                    // 87\n  hr: 'hr',                                                                                                            // 88\n  html: 'html',                                                                                                        // 89\n  i: 'i',                                                                                                              // 90\n  iframe: 'iframe',                                                                                                    // 91\n  img: 'img',                                                                                                          // 92\n  input: 'input',                                                                                                      // 93\n  ins: 'ins',                                                                                                          // 94\n  kbd: 'kbd',                                                                                                          // 95\n  keygen: 'keygen',                                                                                                    // 96\n  label: 'label',                                                                                                      // 97\n  legend: 'legend',                                                                                                    // 98\n  li: 'li',                                                                                                            // 99\n  link: 'link',                                                                                                        // 100\n  main: 'main',                                                                                                        // 101\n  map: 'map',                                                                                                          // 102\n  mark: 'mark',                                                                                                        // 103\n  menu: 'menu',                                                                                                        // 104\n  menuitem: 'menuitem',                                                                                                // 105\n  meta: 'meta',                                                                                                        // 106\n  meter: 'meter',                                                                                                      // 107\n  nav: 'nav',                                                                                                          // 108\n  noscript: 'noscript',                                                                                                // 109\n  object: 'object',                                                                                                    // 110\n  ol: 'ol',                                                                                                            // 111\n  optgroup: 'optgroup',                                                                                                // 112\n  option: 'option',                                                                                                    // 113\n  output: 'output',                                                                                                    // 114\n  p: 'p',                                                                                                              // 115\n  param: 'param',                                                                                                      // 116\n  picture: 'picture',                                                                                                  // 117\n  pre: 'pre',                                                                                                          // 118\n  progress: 'progress',                                                                                                // 119\n  q: 'q',                                                                                                              // 120\n  rp: 'rp',                                                                                                            // 121\n  rt: 'rt',                                                                                                            // 122\n  ruby: 'ruby',                                                                                                        // 123\n  s: 's',                                                                                                              // 124\n  samp: 'samp',                                                                                                        // 125\n  script: 'script',                                                                                                    // 126\n  section: 'section',                                                                                                  // 127\n  select: 'select',                                                                                                    // 128\n  small: 'small',                                                                                                      // 129\n  source: 'source',                                                                                                    // 130\n  span: 'span',                                                                                                        // 131\n  strong: 'strong',                                                                                                    // 132\n  style: 'style',                                                                                                      // 133\n  sub: 'sub',                                                                                                          // 134\n  summary: 'summary',                                                                                                  // 135\n  sup: 'sup',                                                                                                          // 136\n  table: 'table',                                                                                                      // 137\n  tbody: 'tbody',                                                                                                      // 138\n  td: 'td',                                                                                                            // 139\n  textarea: 'textarea',                                                                                                // 140\n  tfoot: 'tfoot',                                                                                                      // 141\n  th: 'th',                                                                                                            // 142\n  thead: 'thead',                                                                                                      // 143\n  time: 'time',                                                                                                        // 144\n  title: 'title',                                                                                                      // 145\n  tr: 'tr',                                                                                                            // 146\n  track: 'track',                                                                                                      // 147\n  u: 'u',                                                                                                              // 148\n  ul: 'ul',                                                                                                            // 149\n  'var': 'var',                                                                                                        // 150\n  video: 'video',                                                                                                      // 151\n  wbr: 'wbr',                                                                                                          // 152\n                                                                                                                       // 153\n  // SVG                                                                                                               // 154\n  circle: 'circle',                                                                                                    // 155\n  clipPath: 'clipPath',                                                                                                // 156\n  defs: 'defs',                                                                                                        // 157\n  ellipse: 'ellipse',                                                                                                  // 158\n  g: 'g',                                                                                                              // 159\n  image: 'image',                                                                                                      // 160\n  line: 'line',                                                                                                        // 161\n  linearGradient: 'linearGradient',                                                                                    // 162\n  mask: 'mask',                                                                                                        // 163\n  path: 'path',                                                                                                        // 164\n  pattern: 'pattern',                                                                                                  // 165\n  polygon: 'polygon',                                                                                                  // 166\n  polyline: 'polyline',                                                                                                // 167\n  radialGradient: 'radialGradient',                                                                                    // 168\n  rect: 'rect',                                                                                                        // 169\n  stop: 'stop',                                                                                                        // 170\n  svg: 'svg',                                                                                                          // 171\n  text: 'text',                                                                                                        // 172\n  tspan: 'tspan'                                                                                                       // 173\n                                                                                                                       // 174\n}, createDOMFactory);                                                                                                  // 175\n                                                                                                                       // 176\nmodule.exports = ReactDOMFactories;                                                                                    // 177\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactElementValidator.js\":[\"./ReactElement\",\"./ReactPropTypeLocations\",\"./ReactPropTypeLocationNames\",\"./ReactCurrentOwner\",\"./canDefineProperty\",\"./getIteratorFn\",\"fbjs/lib/invariant\",\"fbjs/lib/warning\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/ReactElementValidator.js                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2014-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ReactElementValidator                                                                               // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n/**                                                                                                                    // 12\n * ReactElementValidator provides a wrapper around a element factory                                                   // 13\n * which validates the props passed to the element. This is intended to be                                             // 14\n * used only in DEV and could be replaced by a static type checker for languages                                       // 15\n * that support it.                                                                                                    // 16\n */                                                                                                                    // 17\n                                                                                                                       // 18\n'use strict';                                                                                                          // 19\n                                                                                                                       // 20\nvar ReactElement = require('./ReactElement');                                                                          // 21\nvar ReactPropTypeLocations = require('./ReactPropTypeLocations');                                                      // 22\nvar ReactPropTypeLocationNames = require('./ReactPropTypeLocationNames');                                              // 23\nvar ReactCurrentOwner = require('./ReactCurrentOwner');                                                                // 24\n                                                                                                                       // 25\nvar canDefineProperty = require('./canDefineProperty');                                                                // 26\nvar getIteratorFn = require('./getIteratorFn');                                                                        // 27\nvar invariant = require('fbjs/lib/invariant');                                                                         // 28\nvar warning = require('fbjs/lib/warning');                                                                             // 29\n                                                                                                                       // 30\nfunction getDeclarationErrorAddendum() {                                                                               // 31\n  if (ReactCurrentOwner.current) {                                                                                     // 32\n    var name = ReactCurrentOwner.current.getName();                                                                    // 33\n    if (name) {                                                                                                        // 34\n      return ' Check the render method of `' + name + '`.';                                                            // 35\n    }                                                                                                                  // 36\n  }                                                                                                                    // 37\n  return '';                                                                                                           // 38\n}                                                                                                                      // 39\n                                                                                                                       // 40\n/**                                                                                                                    // 41\n * Warn if there's no key explicitly set on dynamic arrays of children or                                              // 42\n * object keys are not valid. This allows us to keep track of children between                                         // 43\n * updates.                                                                                                            // 44\n */                                                                                                                    // 45\nvar ownerHasKeyUseWarning = {};                                                                                        // 46\n                                                                                                                       // 47\nvar loggedTypeFailures = {};                                                                                           // 48\n                                                                                                                       // 49\n/**                                                                                                                    // 50\n * Warn if the element doesn't have an explicit key assigned to it.                                                    // 51\n * This element is in an array. The array could grow and shrink or be                                                  // 52\n * reordered. All children that haven't already been validated are required to                                         // 53\n * have a \"key\" property assigned to it.                                                                               // 54\n *                                                                                                                     // 55\n * @internal                                                                                                           // 56\n * @param {ReactElement} element Element that requires a key.                                                          // 57\n * @param {*} parentType element's parent's type.                                                                      // 58\n */                                                                                                                    // 59\nfunction validateExplicitKey(element, parentType) {                                                                    // 60\n  if (!element._store || element._store.validated || element.key != null) {                                            // 61\n    return;                                                                                                            // 62\n  }                                                                                                                    // 63\n  element._store.validated = true;                                                                                     // 64\n                                                                                                                       // 65\n  var addenda = getAddendaForKeyUse('uniqueKey', element, parentType);                                                 // 66\n  if (addenda === null) {                                                                                              // 67\n    // we already showed the warning                                                                                   // 68\n    return;                                                                                                            // 69\n  }                                                                                                                    // 70\n  process.env.NODE_ENV !== 'production' ? warning(false, 'Each child in an array or iterator should have a unique \"key\" prop.' + '%s%s%s', addenda.parentOrOwner || '', addenda.childOwner || '', addenda.url || '') : undefined;\n}                                                                                                                      // 72\n                                                                                                                       // 73\n/**                                                                                                                    // 74\n * Shared warning and monitoring code for the key warnings.                                                            // 75\n *                                                                                                                     // 76\n * @internal                                                                                                           // 77\n * @param {string} messageType A key used for de-duping warnings.                                                      // 78\n * @param {ReactElement} element Component that requires a key.                                                        // 79\n * @param {*} parentType element's parent's type.                                                                      // 80\n * @returns {?object} A set of addenda to use in the warning message, or null                                          // 81\n * if the warning has already been shown before (and shouldn't be shown again).                                        // 82\n */                                                                                                                    // 83\nfunction getAddendaForKeyUse(messageType, element, parentType) {                                                       // 84\n  var addendum = getDeclarationErrorAddendum();                                                                        // 85\n  if (!addendum) {                                                                                                     // 86\n    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;          // 87\n    if (parentName) {                                                                                                  // 88\n      addendum = ' Check the top-level render call using <' + parentName + '>.';                                       // 89\n    }                                                                                                                  // 90\n  }                                                                                                                    // 91\n                                                                                                                       // 92\n  var memoizer = ownerHasKeyUseWarning[messageType] || (ownerHasKeyUseWarning[messageType] = {});                      // 93\n  if (memoizer[addendum]) {                                                                                            // 94\n    return null;                                                                                                       // 95\n  }                                                                                                                    // 96\n  memoizer[addendum] = true;                                                                                           // 97\n                                                                                                                       // 98\n  var addenda = {                                                                                                      // 99\n    parentOrOwner: addendum,                                                                                           // 100\n    url: ' See https://fb.me/react-warning-keys for more information.',                                                // 101\n    childOwner: null                                                                                                   // 102\n  };                                                                                                                   // 103\n                                                                                                                       // 104\n  // Usually the current owner is the offender, but if it accepts children as a                                        // 105\n  // property, it may be the creator of the child that's responsible for                                               // 106\n  // assigning it a key.                                                                                               // 107\n  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {                                     // 108\n    // Give the component that originally created this child.                                                          // 109\n    addenda.childOwner = ' It was passed a child from ' + element._owner.getName() + '.';                              // 110\n  }                                                                                                                    // 111\n                                                                                                                       // 112\n  return addenda;                                                                                                      // 113\n}                                                                                                                      // 114\n                                                                                                                       // 115\n/**                                                                                                                    // 116\n * Ensure that every element either is passed in a static location, in an                                              // 117\n * array with an explicit keys property defined, or in an object literal                                               // 118\n * with valid key property.                                                                                            // 119\n *                                                                                                                     // 120\n * @internal                                                                                                           // 121\n * @param {ReactNode} node Statically passed child of any type.                                                        // 122\n * @param {*} parentType node's parent's type.                                                                         // 123\n */                                                                                                                    // 124\nfunction validateChildKeys(node, parentType) {                                                                         // 125\n  if (typeof node !== 'object') {                                                                                      // 126\n    return;                                                                                                            // 127\n  }                                                                                                                    // 128\n  if (Array.isArray(node)) {                                                                                           // 129\n    for (var i = 0; i < node.length; i++) {                                                                            // 130\n      var child = node[i];                                                                                             // 131\n      if (ReactElement.isValidElement(child)) {                                                                        // 132\n        validateExplicitKey(child, parentType);                                                                        // 133\n      }                                                                                                                // 134\n    }                                                                                                                  // 135\n  } else if (ReactElement.isValidElement(node)) {                                                                      // 136\n    // This element was passed in a valid location.                                                                    // 137\n    if (node._store) {                                                                                                 // 138\n      node._store.validated = true;                                                                                    // 139\n    }                                                                                                                  // 140\n  } else if (node) {                                                                                                   // 141\n    var iteratorFn = getIteratorFn(node);                                                                              // 142\n    // Entry iterators provide implicit keys.                                                                          // 143\n    if (iteratorFn) {                                                                                                  // 144\n      if (iteratorFn !== node.entries) {                                                                               // 145\n        var iterator = iteratorFn.call(node);                                                                          // 146\n        var step;                                                                                                      // 147\n        while (!(step = iterator.next()).done) {                                                                       // 148\n          if (ReactElement.isValidElement(step.value)) {                                                               // 149\n            validateExplicitKey(step.value, parentType);                                                               // 150\n          }                                                                                                            // 151\n        }                                                                                                              // 152\n      }                                                                                                                // 153\n    }                                                                                                                  // 154\n  }                                                                                                                    // 155\n}                                                                                                                      // 156\n                                                                                                                       // 157\n/**                                                                                                                    // 158\n * Assert that the props are valid                                                                                     // 159\n *                                                                                                                     // 160\n * @param {string} componentName Name of the component for error messages.                                             // 161\n * @param {object} propTypes Map of prop name to a ReactPropType                                                       // 162\n * @param {object} props                                                                                               // 163\n * @param {string} location e.g. \"prop\", \"context\", \"child context\"                                                    // 164\n * @private                                                                                                            // 165\n */                                                                                                                    // 166\nfunction checkPropTypes(componentName, propTypes, props, location) {                                                   // 167\n  for (var propName in propTypes) {                                                                                    // 168\n    if (propTypes.hasOwnProperty(propName)) {                                                                          // 169\n      var error;                                                                                                       // 170\n      // Prop type validation may throw. In case they do, we don't want to                                             // 171\n      // fail the render phase where it didn't fail before. So we log it.                                              // 172\n      // After these have been cleaned up, we'll let them throw.                                                       // 173\n      try {                                                                                                            // 174\n        // This is intentionally an invariant that gets caught. It's the same                                          // 175\n        // behavior as without this statement except with a better message.                                            // 176\n        !(typeof propTypes[propName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], propName) : invariant(false) : undefined;\n        error = propTypes[propName](props, propName, componentName, location);                                         // 178\n      } catch (ex) {                                                                                                   // 179\n        error = ex;                                                                                                    // 180\n      }                                                                                                                // 181\n      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], propName, typeof error) : undefined;\n      if (error instanceof Error && !(error.message in loggedTypeFailures)) {                                          // 183\n        // Only monitor this failure once because there tends to be a lot of the                                       // 184\n        // same error.                                                                                                 // 185\n        loggedTypeFailures[error.message] = true;                                                                      // 186\n                                                                                                                       // 187\n        var addendum = getDeclarationErrorAddendum();                                                                  // 188\n        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed propType: %s%s', error.message, addendum) : undefined;\n      }                                                                                                                // 190\n    }                                                                                                                  // 191\n  }                                                                                                                    // 192\n}                                                                                                                      // 193\n                                                                                                                       // 194\n/**                                                                                                                    // 195\n * Given an element, validate that its props follow the propTypes definition,                                          // 196\n * provided by the type.                                                                                               // 197\n *                                                                                                                     // 198\n * @param {ReactElement} element                                                                                       // 199\n */                                                                                                                    // 200\nfunction validatePropTypes(element) {                                                                                  // 201\n  var componentClass = element.type;                                                                                   // 202\n  if (typeof componentClass !== 'function') {                                                                          // 203\n    return;                                                                                                            // 204\n  }                                                                                                                    // 205\n  var name = componentClass.displayName || componentClass.name;                                                        // 206\n  if (componentClass.propTypes) {                                                                                      // 207\n    checkPropTypes(name, componentClass.propTypes, element.props, ReactPropTypeLocations.prop);                        // 208\n  }                                                                                                                    // 209\n  if (typeof componentClass.getDefaultProps === 'function') {                                                          // 210\n    process.env.NODE_ENV !== 'production' ? warning(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : undefined;\n  }                                                                                                                    // 212\n}                                                                                                                      // 213\n                                                                                                                       // 214\nvar ReactElementValidator = {                                                                                          // 215\n                                                                                                                       // 216\n  createElement: function (type, props, children) {                                                                    // 217\n    var validType = typeof type === 'string' || typeof type === 'function';                                            // 218\n    // We warn in this case but don't throw. We expect the element creation to                                         // 219\n    // succeed and there will likely be errors in render.                                                              // 220\n    process.env.NODE_ENV !== 'production' ? warning(validType, 'React.createElement: type should not be null, undefined, boolean, or ' + 'number. It should be a string (for DOM elements) or a ReactClass ' + '(for composite components).%s', getDeclarationErrorAddendum()) : undefined;\n                                                                                                                       // 222\n    var element = ReactElement.createElement.apply(this, arguments);                                                   // 223\n                                                                                                                       // 224\n    // The result can be nullish if a mock or a custom function is used.                                               // 225\n    // TODO: Drop this when these are no longer allowed as the type argument.                                          // 226\n    if (element == null) {                                                                                             // 227\n      return element;                                                                                                  // 228\n    }                                                                                                                  // 229\n                                                                                                                       // 230\n    // Skip key warning if the type isn't valid since our key validation logic                                         // 231\n    // doesn't expect a non-string/function type and can throw confusing errors.                                       // 232\n    // We don't want exception behavior to differ between dev and prod.                                                // 233\n    // (Rendering will throw with a helpful message and as soon as the type is                                         // 234\n    // fixed, the key warnings will appear.)                                                                           // 235\n    if (validType) {                                                                                                   // 236\n      for (var i = 2; i < arguments.length; i++) {                                                                     // 237\n        validateChildKeys(arguments[i], type);                                                                         // 238\n      }                                                                                                                // 239\n    }                                                                                                                  // 240\n                                                                                                                       // 241\n    validatePropTypes(element);                                                                                        // 242\n                                                                                                                       // 243\n    return element;                                                                                                    // 244\n  },                                                                                                                   // 245\n                                                                                                                       // 246\n  createFactory: function (type) {                                                                                     // 247\n    var validatedFactory = ReactElementValidator.createElement.bind(null, type);                                       // 248\n    // Legacy hook TODO: Warn if this is accessed                                                                      // 249\n    validatedFactory.type = type;                                                                                      // 250\n                                                                                                                       // 251\n    if (process.env.NODE_ENV !== 'production') {                                                                       // 252\n      if (canDefineProperty) {                                                                                         // 253\n        Object.defineProperty(validatedFactory, 'type', {                                                              // 254\n          enumerable: false,                                                                                           // 255\n          get: function () {                                                                                           // 256\n            process.env.NODE_ENV !== 'production' ? warning(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.') : undefined;\n            Object.defineProperty(this, 'type', {                                                                      // 258\n              value: type                                                                                              // 259\n            });                                                                                                        // 260\n            return type;                                                                                               // 261\n          }                                                                                                            // 262\n        });                                                                                                            // 263\n      }                                                                                                                // 264\n    }                                                                                                                  // 265\n                                                                                                                       // 266\n    return validatedFactory;                                                                                           // 267\n  },                                                                                                                   // 268\n                                                                                                                       // 269\n  cloneElement: function (element, props, children) {                                                                  // 270\n    var newElement = ReactElement.cloneElement.apply(this, arguments);                                                 // 271\n    for (var i = 2; i < arguments.length; i++) {                                                                       // 272\n      validateChildKeys(arguments[i], newElement.type);                                                                // 273\n    }                                                                                                                  // 274\n    validatePropTypes(newElement);                                                                                     // 275\n    return newElement;                                                                                                 // 276\n  }                                                                                                                    // 277\n                                                                                                                       // 278\n};                                                                                                                     // 279\n                                                                                                                       // 280\nmodule.exports = ReactElementValidator;                                                                                // 281\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"onlyChild.js\":[\"./ReactElement\",\"fbjs/lib/invariant\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/onlyChild.js                                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule onlyChild                                                                                           // 9\n */                                                                                                                    // 10\n'use strict';                                                                                                          // 11\n                                                                                                                       // 12\nvar ReactElement = require('./ReactElement');                                                                          // 13\n                                                                                                                       // 14\nvar invariant = require('fbjs/lib/invariant');                                                                         // 15\n                                                                                                                       // 16\n/**                                                                                                                    // 17\n * Returns the first child in a collection of children and verifies that there                                         // 18\n * is only one child in the collection. The current implementation of this                                             // 19\n * function assumes that a single child gets passed without a wrapper, but the                                         // 20\n * purpose of this helper function is to abstract away the particular structure                                        // 21\n * of children.                                                                                                        // 22\n *                                                                                                                     // 23\n * @param {?object} children Child collection structure.                                                               // 24\n * @return {ReactComponent} The first and only `ReactComponent` contained in the                                       // 25\n * structure.                                                                                                          // 26\n */                                                                                                                    // 27\nfunction onlyChild(children) {                                                                                         // 28\n  !ReactElement.isValidElement(children) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'onlyChild must be passed a children with exactly one child.') : invariant(false) : undefined;\n  return children;                                                                                                     // 30\n}                                                                                                                      // 31\n                                                                                                                       // 32\nmodule.exports = onlyChild;                                                                                            // 33\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"deprecated.js\":[\"./Object.assign\",\"fbjs/lib/warning\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/lib/deprecated.js                                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule deprecated                                                                                          // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar assign = require('./Object.assign');                                                                               // 14\nvar warning = require('fbjs/lib/warning');                                                                             // 15\n                                                                                                                       // 16\n/**                                                                                                                    // 17\n * This will log a single deprecation notice per function and forward the call                                         // 18\n * on to the new API.                                                                                                  // 19\n *                                                                                                                     // 20\n * @param {string} fnName The name of the function                                                                     // 21\n * @param {string} newModule The module that fn will exist in                                                          // 22\n * @param {string} newPackage The module that fn will exist in                                                         // 23\n * @param {*} ctx The context this forwarded call should run in                                                        // 24\n * @param {function} fn The function to forward on to                                                                  // 25\n * @return {function} The function that will warn once and then call fn                                                // 26\n */                                                                                                                    // 27\nfunction deprecated(fnName, newModule, newPackage, ctx, fn) {                                                          // 28\n  var warned = false;                                                                                                  // 29\n  if (process.env.NODE_ENV !== 'production') {                                                                         // 30\n    var newFn = function () {                                                                                          // 31\n      process.env.NODE_ENV !== 'production' ? warning(warned,                                                          // 32\n      // Require examples in this string must be split to prevent React's                                              // 33\n      // build tools from mistaking them for real requires.                                                            // 34\n      // Otherwise the build tools will attempt to build a '%s' module.                                                // 35\n      'React.%s is deprecated. Please use %s.%s from require' + '(\\'%s\\') ' + 'instead.', fnName, newModule, fnName, newPackage) : undefined;\n      warned = true;                                                                                                   // 37\n      return fn.apply(ctx, arguments);                                                                                 // 38\n    };                                                                                                                 // 39\n    // We need to make sure all properties of the original fn are copied over.                                         // 40\n    // In particular, this is needed to support PropTypes                                                              // 41\n    return assign(newFn, fn);                                                                                          // 42\n  }                                                                                                                    // 43\n                                                                                                                       // 44\n  return fn;                                                                                                           // 45\n}                                                                                                                      // 46\n                                                                                                                       // 47\nmodule.exports = deprecated;                                                                                           // 48\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"node_modules\":{\"fbjs\":{\"lib\":{\"ExecutionEnvironment.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/node_modules/fbjs/lib/ExecutionEnvironment.js                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule ExecutionEnvironment                                                                                // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);                 // 14\n                                                                                                                       // 15\n/**                                                                                                                    // 16\n * Simple, lightweight module assisting with the detection and context of                                              // 17\n * Worker. Helps avoid circular dependencies and allows code to reason about                                           // 18\n * whether or not they are in a Worker, even if they never include the main                                            // 19\n * `ReactWorker` dependency.                                                                                           // 20\n */                                                                                                                    // 21\nvar ExecutionEnvironment = {                                                                                           // 22\n                                                                                                                       // 23\n  canUseDOM: canUseDOM,                                                                                                // 24\n                                                                                                                       // 25\n  canUseWorkers: typeof Worker !== 'undefined',                                                                        // 26\n                                                                                                                       // 27\n  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),                                // 28\n                                                                                                                       // 29\n  canUseViewport: canUseDOM && !!window.screen,                                                                        // 30\n                                                                                                                       // 31\n  isInWorker: !canUseDOM // For now, this is true - might change in the future.                                        // 32\n                                                                                                                       // 33\n};                                                                                                                     // 34\n                                                                                                                       // 35\nmodule.exports = ExecutionEnvironment;                                                                                 // 36\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"createNodesFromMarkup.js\":[\"./ExecutionEnvironment\",\"./createArrayFromMixed\",\"./getMarkupWrap\",\"./invariant\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/node_modules/fbjs/lib/createNodesFromMarkup.js                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule createNodesFromMarkup                                                                               // 9\n * @typechecks                                                                                                         // 10\n */                                                                                                                    // 11\n                                                                                                                       // 12\n/*eslint-disable fb-www/unsafe-html*/                                                                                  // 13\n                                                                                                                       // 14\n'use strict';                                                                                                          // 15\n                                                                                                                       // 16\nvar ExecutionEnvironment = require('./ExecutionEnvironment');                                                          // 17\n                                                                                                                       // 18\nvar createArrayFromMixed = require('./createArrayFromMixed');                                                          // 19\nvar getMarkupWrap = require('./getMarkupWrap');                                                                        // 20\nvar invariant = require('./invariant');                                                                                // 21\n                                                                                                                       // 22\n/**                                                                                                                    // 23\n * Dummy container used to render all markup.                                                                          // 24\n */                                                                                                                    // 25\nvar dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;                                 // 26\n                                                                                                                       // 27\n/**                                                                                                                    // 28\n * Pattern used by `getNodeName`.                                                                                      // 29\n */                                                                                                                    // 30\nvar nodeNamePattern = /^\\s*<(\\w+)/;                                                                                    // 31\n                                                                                                                       // 32\n/**                                                                                                                    // 33\n * Extracts the `nodeName` of the first element in a string of markup.                                                 // 34\n *                                                                                                                     // 35\n * @param {string} markup String of markup.                                                                            // 36\n * @return {?string} Node name of the supplied markup.                                                                 // 37\n */                                                                                                                    // 38\nfunction getNodeName(markup) {                                                                                         // 39\n  var nodeNameMatch = markup.match(nodeNamePattern);                                                                   // 40\n  return nodeNameMatch && nodeNameMatch[1].toLowerCase();                                                              // 41\n}                                                                                                                      // 42\n                                                                                                                       // 43\n/**                                                                                                                    // 44\n * Creates an array containing the nodes rendered from the supplied markup. The                                        // 45\n * optionally supplied `handleScript` function will be invoked once for each                                           // 46\n * <script> element that is rendered. If no `handleScript` function is supplied,                                       // 47\n * an exception is thrown if any <script> elements are rendered.                                                       // 48\n *                                                                                                                     // 49\n * @param {string} markup A string of valid HTML markup.                                                               // 50\n * @param {?function} handleScript Invoked once for each rendered <script>.                                            // 51\n * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.                                                 // 52\n */                                                                                                                    // 53\nfunction createNodesFromMarkup(markup, handleScript) {                                                                 // 54\n  var node = dummyNode;                                                                                                // 55\n  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup dummy not initialized') : invariant(false) : undefined;\n  var nodeName = getNodeName(markup);                                                                                  // 57\n                                                                                                                       // 58\n  var wrap = nodeName && getMarkupWrap(nodeName);                                                                      // 59\n  if (wrap) {                                                                                                          // 60\n    node.innerHTML = wrap[1] + markup + wrap[2];                                                                       // 61\n                                                                                                                       // 62\n    var wrapDepth = wrap[0];                                                                                           // 63\n    while (wrapDepth--) {                                                                                              // 64\n      node = node.lastChild;                                                                                           // 65\n    }                                                                                                                  // 66\n  } else {                                                                                                             // 67\n    node.innerHTML = markup;                                                                                           // 68\n  }                                                                                                                    // 69\n                                                                                                                       // 70\n  var scripts = node.getElementsByTagName('script');                                                                   // 71\n  if (scripts.length) {                                                                                                // 72\n    !handleScript ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup(...): Unexpected <script> element rendered.') : invariant(false) : undefined;\n    createArrayFromMixed(scripts).forEach(handleScript);                                                               // 74\n  }                                                                                                                    // 75\n                                                                                                                       // 76\n  var nodes = createArrayFromMixed(node.childNodes);                                                                   // 77\n  while (node.lastChild) {                                                                                             // 78\n    node.removeChild(node.lastChild);                                                                                  // 79\n  }                                                                                                                    // 80\n  return nodes;                                                                                                        // 81\n}                                                                                                                      // 82\n                                                                                                                       // 83\nmodule.exports = createNodesFromMarkup;                                                                                // 84\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"createArrayFromMixed.js\":[\"./toArray\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/node_modules/fbjs/lib/createArrayFromMixed.js                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule createArrayFromMixed                                                                                // 9\n * @typechecks                                                                                                         // 10\n */                                                                                                                    // 11\n                                                                                                                       // 12\n'use strict';                                                                                                          // 13\n                                                                                                                       // 14\nvar toArray = require('./toArray');                                                                                    // 15\n                                                                                                                       // 16\n/**                                                                                                                    // 17\n * Perform a heuristic test to determine if an object is \"array-like\".                                                 // 18\n *                                                                                                                     // 19\n *   A monk asked Joshu, a Zen master, \"Has a dog Buddha nature?\"                                                      // 20\n *   Joshu replied: \"Mu.\"                                                                                              // 21\n *                                                                                                                     // 22\n * This function determines if its argument has \"array nature\": it returns                                             // 23\n * true if the argument is an actual array, an `arguments' object, or an                                               // 24\n * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).                                               // 25\n *                                                                                                                     // 26\n * It will return false for other array-like objects like Filelist.                                                    // 27\n *                                                                                                                     // 28\n * @param {*} obj                                                                                                      // 29\n * @return {boolean}                                                                                                   // 30\n */                                                                                                                    // 31\nfunction hasArrayNature(obj) {                                                                                         // 32\n  return(                                                                                                              // 33\n    // not null/false                                                                                                  // 34\n    !!obj && (                                                                                                         // 35\n    // arrays are objects, NodeLists are functions in Safari                                                           // 36\n    typeof obj == 'object' || typeof obj == 'function') &&                                                             // 37\n    // quacks like an array                                                                                            // 38\n    'length' in obj &&                                                                                                 // 39\n    // not window                                                                                                      // 40\n    !('setInterval' in obj) &&                                                                                         // 41\n    // no DOM node should be considered an array-like                                                                  // 42\n    // a 'select' element has 'length' and 'item' properties on IE8                                                    // 43\n    typeof obj.nodeType != 'number' && (                                                                               // 44\n    // a real array                                                                                                    // 45\n    Array.isArray(obj) ||                                                                                              // 46\n    // arguments                                                                                                       // 47\n    'callee' in obj ||                                                                                                 // 48\n    // HTMLCollection/NodeList                                                                                         // 49\n    'item' in obj)                                                                                                     // 50\n  );                                                                                                                   // 51\n}                                                                                                                      // 52\n                                                                                                                       // 53\n/**                                                                                                                    // 54\n * Ensure that the argument is an array by wrapping it in an array if it is not.                                       // 55\n * Creates a copy of the argument if it is already an array.                                                           // 56\n *                                                                                                                     // 57\n * This is mostly useful idiomatically:                                                                                // 58\n *                                                                                                                     // 59\n *   var createArrayFromMixed = require('createArrayFromMixed');                                                       // 60\n *                                                                                                                     // 61\n *   function takesOneOrMoreThings(things) {                                                                           // 62\n *     things = createArrayFromMixed(things);                                                                          // 63\n *     ...                                                                                                             // 64\n *   }                                                                                                                 // 65\n *                                                                                                                     // 66\n * This allows you to treat `things' as an array, but accept scalars in the API.                                       // 67\n *                                                                                                                     // 68\n * If you need to convert an array-like object, like `arguments`, into an array                                        // 69\n * use toArray instead.                                                                                                // 70\n *                                                                                                                     // 71\n * @param {*} obj                                                                                                      // 72\n * @return {array}                                                                                                     // 73\n */                                                                                                                    // 74\nfunction createArrayFromMixed(obj) {                                                                                   // 75\n  if (!hasArrayNature(obj)) {                                                                                          // 76\n    return [obj];                                                                                                      // 77\n  } else if (Array.isArray(obj)) {                                                                                     // 78\n    return obj.slice();                                                                                                // 79\n  } else {                                                                                                             // 80\n    return toArray(obj);                                                                                               // 81\n  }                                                                                                                    // 82\n}                                                                                                                      // 83\n                                                                                                                       // 84\nmodule.exports = createArrayFromMixed;                                                                                 // 85\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"toArray.js\":[\"./invariant\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/node_modules/fbjs/lib/toArray.js                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule toArray                                                                                             // 9\n * @typechecks                                                                                                         // 10\n */                                                                                                                    // 11\n                                                                                                                       // 12\n'use strict';                                                                                                          // 13\n                                                                                                                       // 14\nvar invariant = require('./invariant');                                                                                // 15\n                                                                                                                       // 16\n/**                                                                                                                    // 17\n * Convert array-like objects to arrays.                                                                               // 18\n *                                                                                                                     // 19\n * This API assumes the caller knows the contents of the data type. For less                                           // 20\n * well defined inputs use createArrayFromMixed.                                                                       // 21\n *                                                                                                                     // 22\n * @param {object|function|filelist} obj                                                                               // 23\n * @return {array}                                                                                                     // 24\n */                                                                                                                    // 25\nfunction toArray(obj) {                                                                                                // 26\n  var length = obj.length;                                                                                             // 27\n                                                                                                                       // 28\n  // Some browse builtin objects can report typeof 'function' (e.g. NodeList in                                        // 29\n  // old versions of Safari).                                                                                          // 30\n  !(!Array.isArray(obj) && (typeof obj === 'object' || typeof obj === 'function')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Array-like object expected') : invariant(false) : undefined;\n                                                                                                                       // 32\n  !(typeof length === 'number') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object needs a length property') : invariant(false) : undefined;\n                                                                                                                       // 34\n  !(length === 0 || length - 1 in obj) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object should have keys for indices') : invariant(false) : undefined;\n                                                                                                                       // 36\n  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs                                           // 37\n  // without method will throw during the slice call and skip straight to the                                          // 38\n  // fallback.                                                                                                         // 39\n  if (obj.hasOwnProperty) {                                                                                            // 40\n    try {                                                                                                              // 41\n      return Array.prototype.slice.call(obj);                                                                          // 42\n    } catch (e) {                                                                                                      // 43\n      // IE < 9 does not support Array#slice on collections objects                                                    // 44\n    }                                                                                                                  // 45\n  }                                                                                                                    // 46\n                                                                                                                       // 47\n  // Fall back to copying key by key. This assumes all keys have a value,                                              // 48\n  // so will not preserve sparsely populated inputs.                                                                   // 49\n  var ret = Array(length);                                                                                             // 50\n  for (var ii = 0; ii < length; ii++) {                                                                                // 51\n    ret[ii] = obj[ii];                                                                                                 // 52\n  }                                                                                                                    // 53\n  return ret;                                                                                                          // 54\n}                                                                                                                      // 55\n                                                                                                                       // 56\nmodule.exports = toArray;                                                                                              // 57\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"invariant.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/node_modules/fbjs/lib/invariant.js                                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule invariant                                                                                           // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\n/**                                                                                                                    // 14\n * Use invariant() to assert state which your program assumes to be true.                                              // 15\n *                                                                                                                     // 16\n * Provide sprintf-style format (only %s is supported) and arguments                                                   // 17\n * to provide information about what broke and what you were                                                           // 18\n * expecting.                                                                                                          // 19\n *                                                                                                                     // 20\n * The invariant message will be stripped in production, but the invariant                                             // 21\n * will remain to ensure logic does not differ in production.                                                          // 22\n */                                                                                                                    // 23\n                                                                                                                       // 24\nfunction invariant(condition, format, a, b, c, d, e, f) {                                                              // 25\n  if (process.env.NODE_ENV !== 'production') {                                                                         // 26\n    if (format === undefined) {                                                                                        // 27\n      throw new Error('invariant requires an error message argument');                                                 // 28\n    }                                                                                                                  // 29\n  }                                                                                                                    // 30\n                                                                                                                       // 31\n  if (!condition) {                                                                                                    // 32\n    var error;                                                                                                         // 33\n    if (format === undefined) {                                                                                        // 34\n      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');\n    } else {                                                                                                           // 36\n      var args = [a, b, c, d, e, f];                                                                                   // 37\n      var argIndex = 0;                                                                                                // 38\n      error = new Error(format.replace(/%s/g, function () {                                                            // 39\n        return args[argIndex++];                                                                                       // 40\n      }));                                                                                                             // 41\n      error.name = 'Invariant Violation';                                                                              // 42\n    }                                                                                                                  // 43\n                                                                                                                       // 44\n    error.framesToPop = 1; // we don't care about invariant's own frame                                                // 45\n    throw error;                                                                                                       // 46\n  }                                                                                                                    // 47\n}                                                                                                                      // 48\n                                                                                                                       // 49\nmodule.exports = invariant;                                                                                            // 50\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"getMarkupWrap.js\":[\"./ExecutionEnvironment\",\"./invariant\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/node_modules/fbjs/lib/getMarkupWrap.js                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule getMarkupWrap                                                                                       // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n/*eslint-disable fb-www/unsafe-html */                                                                                 // 12\n                                                                                                                       // 13\n'use strict';                                                                                                          // 14\n                                                                                                                       // 15\nvar ExecutionEnvironment = require('./ExecutionEnvironment');                                                          // 16\n                                                                                                                       // 17\nvar invariant = require('./invariant');                                                                                // 18\n                                                                                                                       // 19\n/**                                                                                                                    // 20\n * Dummy container used to detect which wraps are necessary.                                                           // 21\n */                                                                                                                    // 22\nvar dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;                                 // 23\n                                                                                                                       // 24\n/**                                                                                                                    // 25\n * Some browsers cannot use `innerHTML` to render certain elements standalone,                                         // 26\n * so we wrap them, render the wrapped nodes, then extract the desired node.                                           // 27\n *                                                                                                                     // 28\n * In IE8, certain elements cannot render alone, so wrap all elements ('*').                                           // 29\n */                                                                                                                    // 30\n                                                                                                                       // 31\nvar shouldWrap = {};                                                                                                   // 32\n                                                                                                                       // 33\nvar selectWrap = [1, '<select multiple=\"true\">', '</select>'];                                                         // 34\nvar tableWrap = [1, '<table>', '</table>'];                                                                            // 35\nvar trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];                                                       // 36\n                                                                                                                       // 37\nvar svgWrap = [1, '<svg xmlns=\"http://www.w3.org/2000/svg\">', '</svg>'];                                               // 38\n                                                                                                                       // 39\nvar markupWrap = {                                                                                                     // 40\n  '*': [1, '?<div>', '</div>'],                                                                                        // 41\n                                                                                                                       // 42\n  'area': [1, '<map>', '</map>'],                                                                                      // 43\n  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],                                               // 44\n  'legend': [1, '<fieldset>', '</fieldset>'],                                                                          // 45\n  'param': [1, '<object>', '</object>'],                                                                               // 46\n  'tr': [2, '<table><tbody>', '</tbody></table>'],                                                                     // 47\n                                                                                                                       // 48\n  'optgroup': selectWrap,                                                                                              // 49\n  'option': selectWrap,                                                                                                // 50\n                                                                                                                       // 51\n  'caption': tableWrap,                                                                                                // 52\n  'colgroup': tableWrap,                                                                                               // 53\n  'tbody': tableWrap,                                                                                                  // 54\n  'tfoot': tableWrap,                                                                                                  // 55\n  'thead': tableWrap,                                                                                                  // 56\n                                                                                                                       // 57\n  'td': trWrap,                                                                                                        // 58\n  'th': trWrap                                                                                                         // 59\n};                                                                                                                     // 60\n                                                                                                                       // 61\n// Initialize the SVG elements since we know they'll always need to be wrapped                                         // 62\n// consistently. If they are created inside a <div> they will be initialized in                                        // 63\n// the wrong namespace (and will not display).                                                                         // 64\nvar svgElements = ['circle', 'clipPath', 'defs', 'ellipse', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'text', 'tspan'];\nsvgElements.forEach(function (nodeName) {                                                                              // 66\n  markupWrap[nodeName] = svgWrap;                                                                                      // 67\n  shouldWrap[nodeName] = true;                                                                                         // 68\n});                                                                                                                    // 69\n                                                                                                                       // 70\n/**                                                                                                                    // 71\n * Gets the markup wrap configuration for the supplied `nodeName`.                                                     // 72\n *                                                                                                                     // 73\n * NOTE: This lazily detects which wraps are necessary for the current browser.                                        // 74\n *                                                                                                                     // 75\n * @param {string} nodeName Lowercase `nodeName`.                                                                      // 76\n * @return {?array} Markup wrap configuration, if applicable.                                                          // 77\n */                                                                                                                    // 78\nfunction getMarkupWrap(nodeName) {                                                                                     // 79\n  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Markup wrapping node not initialized') : invariant(false) : undefined;\n  if (!markupWrap.hasOwnProperty(nodeName)) {                                                                          // 81\n    nodeName = '*';                                                                                                    // 82\n  }                                                                                                                    // 83\n  if (!shouldWrap.hasOwnProperty(nodeName)) {                                                                          // 84\n    if (nodeName === '*') {                                                                                            // 85\n      dummyNode.innerHTML = '<link />';                                                                                // 86\n    } else {                                                                                                           // 87\n      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';                                                   // 88\n    }                                                                                                                  // 89\n    shouldWrap[nodeName] = !dummyNode.firstChild;                                                                      // 90\n  }                                                                                                                    // 91\n  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;                                                           // 92\n}                                                                                                                      // 93\n                                                                                                                       // 94\nmodule.exports = getMarkupWrap;                                                                                        // 95\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"emptyFunction.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/node_modules/fbjs/lib/emptyFunction.js                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule emptyFunction                                                                                       // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n\"use strict\";                                                                                                          // 12\n                                                                                                                       // 13\nfunction makeEmptyFunction(arg) {                                                                                      // 14\n  return function () {                                                                                                 // 15\n    return arg;                                                                                                        // 16\n  };                                                                                                                   // 17\n}                                                                                                                      // 18\n                                                                                                                       // 19\n/**                                                                                                                    // 20\n * This function accepts and discards inputs; it has no side effects. This is                                          // 21\n * primarily useful idiomatically for overridable function endpoints which                                             // 22\n * always need to be callable, since JS lacks a null-call idiom ala Cocoa.                                             // 23\n */                                                                                                                    // 24\nfunction emptyFunction() {}                                                                                            // 25\n                                                                                                                       // 26\nemptyFunction.thatReturns = makeEmptyFunction;                                                                         // 27\nemptyFunction.thatReturnsFalse = makeEmptyFunction(false);                                                             // 28\nemptyFunction.thatReturnsTrue = makeEmptyFunction(true);                                                               // 29\nemptyFunction.thatReturnsNull = makeEmptyFunction(null);                                                               // 30\nemptyFunction.thatReturnsThis = function () {                                                                          // 31\n  return this;                                                                                                         // 32\n};                                                                                                                     // 33\nemptyFunction.thatReturnsArgument = function (arg) {                                                                   // 34\n  return arg;                                                                                                          // 35\n};                                                                                                                     // 36\n                                                                                                                       // 37\nmodule.exports = emptyFunction;                                                                                        // 38\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"keyMirror.js\":[\"./invariant\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/node_modules/fbjs/lib/keyMirror.js                                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule keyMirror                                                                                           // 9\n * @typechecks static-only                                                                                             // 10\n */                                                                                                                    // 11\n                                                                                                                       // 12\n'use strict';                                                                                                          // 13\n                                                                                                                       // 14\nvar invariant = require('./invariant');                                                                                // 15\n                                                                                                                       // 16\n/**                                                                                                                    // 17\n * Constructs an enumeration with keys equal to their value.                                                           // 18\n *                                                                                                                     // 19\n * For example:                                                                                                        // 20\n *                                                                                                                     // 21\n *   var COLORS = keyMirror({blue: null, red: null});                                                                  // 22\n *   var myColor = COLORS.blue;                                                                                        // 23\n *   var isColorValid = !!COLORS[myColor];                                                                             // 24\n *                                                                                                                     // 25\n * The last line could not be performed if the values of the generated enum were                                       // 26\n * not equal to their keys.                                                                                            // 27\n *                                                                                                                     // 28\n *   Input:  {key1: val1, key2: val2}                                                                                  // 29\n *   Output: {key1: key1, key2: key2}                                                                                  // 30\n *                                                                                                                     // 31\n * @param {object} obj                                                                                                 // 32\n * @return {object}                                                                                                    // 33\n */                                                                                                                    // 34\nvar keyMirror = function (obj) {                                                                                       // 35\n  var ret = {};                                                                                                        // 36\n  var key;                                                                                                             // 37\n  !(obj instanceof Object && !Array.isArray(obj)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'keyMirror(...): Argument must be an object.') : invariant(false) : undefined;\n  for (key in obj) {                                                                                                   // 39\n    if (!obj.hasOwnProperty(key)) {                                                                                    // 40\n      continue;                                                                                                        // 41\n    }                                                                                                                  // 42\n    ret[key] = key;                                                                                                    // 43\n  }                                                                                                                    // 44\n  return ret;                                                                                                          // 45\n};                                                                                                                     // 46\n                                                                                                                       // 47\nmodule.exports = keyMirror;                                                                                            // 48\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"warning.js\":[\"./emptyFunction\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/node_modules/fbjs/lib/warning.js                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2014-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule warning                                                                                             // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar emptyFunction = require('./emptyFunction');                                                                        // 14\n                                                                                                                       // 15\n/**                                                                                                                    // 16\n * Similar to invariant but only logs a warning if the condition is not met.                                           // 17\n * This can be used to log issues in development environments in critical                                              // 18\n * paths. Removing the logging code for production environments will keep the                                          // 19\n * same logic and follow the same code paths.                                                                          // 20\n */                                                                                                                    // 21\n                                                                                                                       // 22\nvar warning = emptyFunction;                                                                                           // 23\n                                                                                                                       // 24\nif (process.env.NODE_ENV !== 'production') {                                                                           // 25\n  warning = function (condition, format) {                                                                             // 26\n    for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {          // 27\n      args[_key - 2] = arguments[_key];                                                                                // 28\n    }                                                                                                                  // 29\n                                                                                                                       // 30\n    if (format === undefined) {                                                                                        // 31\n      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');               // 32\n    }                                                                                                                  // 33\n                                                                                                                       // 34\n    if (format.indexOf('Failed Composite propType: ') === 0) {                                                         // 35\n      return; // Ignore CompositeComponent proptype check.                                                             // 36\n    }                                                                                                                  // 37\n                                                                                                                       // 38\n    if (!condition) {                                                                                                  // 39\n      var argIndex = 0;                                                                                                // 40\n      var message = 'Warning: ' + format.replace(/%s/g, function () {                                                  // 41\n        return args[argIndex++];                                                                                       // 42\n      });                                                                                                              // 43\n      if (typeof console !== 'undefined') {                                                                            // 44\n        console.error(message);                                                                                        // 45\n      }                                                                                                                // 46\n      try {                                                                                                            // 47\n        // --- Welcome to debugging React ---                                                                          // 48\n        // This error was thrown as a convenience so that you can use this stack                                       // 49\n        // to find the callsite that caused this warning to fire.                                                      // 50\n        throw new Error(message);                                                                                      // 51\n      } catch (x) {}                                                                                                   // 52\n    }                                                                                                                  // 53\n  };                                                                                                                   // 54\n}                                                                                                                      // 55\n                                                                                                                       // 56\nmodule.exports = warning;                                                                                              // 57\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"emptyObject.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/node_modules/fbjs/lib/emptyObject.js                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule emptyObject                                                                                         // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar emptyObject = {};                                                                                                  // 14\n                                                                                                                       // 15\nif (process.env.NODE_ENV !== 'production') {                                                                           // 16\n  Object.freeze(emptyObject);                                                                                          // 17\n}                                                                                                                      // 18\n                                                                                                                       // 19\nmodule.exports = emptyObject;                                                                                          // 20\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"containsNode.js\":[\"./isTextNode\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/node_modules/fbjs/lib/containsNode.js                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule containsNode                                                                                        // 9\n * @typechecks                                                                                                         // 10\n */                                                                                                                    // 11\n                                                                                                                       // 12\n'use strict';                                                                                                          // 13\n                                                                                                                       // 14\nvar isTextNode = require('./isTextNode');                                                                              // 15\n                                                                                                                       // 16\n/*eslint-disable no-bitwise */                                                                                         // 17\n                                                                                                                       // 18\n/**                                                                                                                    // 19\n * Checks if a given DOM node contains or is another DOM node.                                                         // 20\n *                                                                                                                     // 21\n * @param {?DOMNode} outerNode Outer DOM node.                                                                         // 22\n * @param {?DOMNode} innerNode Inner DOM node.                                                                         // 23\n * @return {boolean} True if `outerNode` contains or is `innerNode`.                                                   // 24\n */                                                                                                                    // 25\nfunction containsNode(_x, _x2) {                                                                                       // 26\n  var _again = true;                                                                                                   // 27\n                                                                                                                       // 28\n  _function: while (_again) {                                                                                          // 29\n    var outerNode = _x,                                                                                                // 30\n        innerNode = _x2;                                                                                               // 31\n    _again = false;                                                                                                    // 32\n                                                                                                                       // 33\n    if (!outerNode || !innerNode) {                                                                                    // 34\n      return false;                                                                                                    // 35\n    } else if (outerNode === innerNode) {                                                                              // 36\n      return true;                                                                                                     // 37\n    } else if (isTextNode(outerNode)) {                                                                                // 38\n      return false;                                                                                                    // 39\n    } else if (isTextNode(innerNode)) {                                                                                // 40\n      _x = outerNode;                                                                                                  // 41\n      _x2 = innerNode.parentNode;                                                                                      // 42\n      _again = true;                                                                                                   // 43\n      continue _function;                                                                                              // 44\n    } else if (outerNode.contains) {                                                                                   // 45\n      return outerNode.contains(innerNode);                                                                            // 46\n    } else if (outerNode.compareDocumentPosition) {                                                                    // 47\n      return !!(outerNode.compareDocumentPosition(innerNode) & 16);                                                    // 48\n    } else {                                                                                                           // 49\n      return false;                                                                                                    // 50\n    }                                                                                                                  // 51\n  }                                                                                                                    // 52\n}                                                                                                                      // 53\n                                                                                                                       // 54\nmodule.exports = containsNode;                                                                                         // 55\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"isTextNode.js\":[\"./isNode\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/node_modules/fbjs/lib/isTextNode.js                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule isTextNode                                                                                          // 9\n * @typechecks                                                                                                         // 10\n */                                                                                                                    // 11\n                                                                                                                       // 12\n'use strict';                                                                                                          // 13\n                                                                                                                       // 14\nvar isNode = require('./isNode');                                                                                      // 15\n                                                                                                                       // 16\n/**                                                                                                                    // 17\n * @param {*} object The object to check.                                                                              // 18\n * @return {boolean} Whether or not the object is a DOM text node.                                                     // 19\n */                                                                                                                    // 20\nfunction isTextNode(object) {                                                                                          // 21\n  return isNode(object) && object.nodeType == 3;                                                                       // 22\n}                                                                                                                      // 23\n                                                                                                                       // 24\nmodule.exports = isTextNode;                                                                                           // 25\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"isNode.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/node_modules/fbjs/lib/isNode.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule isNode                                                                                              // 9\n * @typechecks                                                                                                         // 10\n */                                                                                                                    // 11\n                                                                                                                       // 12\n/**                                                                                                                    // 13\n * @param {*} object The object to check.                                                                              // 14\n * @return {boolean} Whether or not the object is a DOM node.                                                          // 15\n */                                                                                                                    // 16\n'use strict';                                                                                                          // 17\n                                                                                                                       // 18\nfunction isNode(object) {                                                                                              // 19\n  return !!(object && (typeof Node === 'function' ? object instanceof Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));\n}                                                                                                                      // 21\n                                                                                                                       // 22\nmodule.exports = isNode;                                                                                               // 23\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"keyOf.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/node_modules/fbjs/lib/keyOf.js                                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule keyOf                                                                                               // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n/**                                                                                                                    // 12\n * Allows extraction of a minified key. Let's the build system minify keys                                             // 13\n * without losing the ability to dynamically use key strings as values                                                 // 14\n * themselves. Pass in an object with a single key/val pair and it will return                                         // 15\n * you the string key of that single record. Suppose you want to grab the                                              // 16\n * value for a key 'className' inside of an object. Key/val minification may                                           // 17\n * have aliased that key to be 'xa12'. keyOf({className: null}) will return                                            // 18\n * 'xa12' in that case. Resolve keys you want to use once at startup time, then                                        // 19\n * reuse those resolutions.                                                                                            // 20\n */                                                                                                                    // 21\n\"use strict\";                                                                                                          // 22\n                                                                                                                       // 23\nvar keyOf = function (oneKeyObj) {                                                                                     // 24\n  var key;                                                                                                             // 25\n  for (key in oneKeyObj) {                                                                                             // 26\n    if (!oneKeyObj.hasOwnProperty(key)) {                                                                              // 27\n      continue;                                                                                                        // 28\n    }                                                                                                                  // 29\n    return key;                                                                                                        // 30\n  }                                                                                                                    // 31\n  return null;                                                                                                         // 32\n};                                                                                                                     // 33\n                                                                                                                       // 34\nmodule.exports = keyOf;                                                                                                // 35\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"focusNode.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/node_modules/fbjs/lib/focusNode.js                                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule focusNode                                                                                           // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\n/**                                                                                                                    // 14\n * @param {DOMElement} node input/textarea to focus                                                                    // 15\n */                                                                                                                    // 16\nfunction focusNode(node) {                                                                                             // 17\n  // IE8 can throw \"Can't move focus to the control because it is invisible,                                           // 18\n  // not enabled, or of a type that does not accept the focus.\" for all kinds of                                       // 19\n  // reasons that are too expensive and fragile to test.                                                               // 20\n  try {                                                                                                                // 21\n    node.focus();                                                                                                      // 22\n  } catch (e) {}                                                                                                       // 23\n}                                                                                                                      // 24\n                                                                                                                       // 25\nmodule.exports = focusNode;                                                                                            // 26\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"camelizeStyleName.js\":[\"./camelize\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/node_modules/fbjs/lib/camelizeStyleName.js                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule camelizeStyleName                                                                                   // 9\n * @typechecks                                                                                                         // 10\n */                                                                                                                    // 11\n                                                                                                                       // 12\n'use strict';                                                                                                          // 13\n                                                                                                                       // 14\nvar camelize = require('./camelize');                                                                                  // 15\n                                                                                                                       // 16\nvar msPattern = /^-ms-/;                                                                                               // 17\n                                                                                                                       // 18\n/**                                                                                                                    // 19\n * Camelcases a hyphenated CSS property name, for example:                                                             // 20\n *                                                                                                                     // 21\n *   > camelizeStyleName('background-color')                                                                           // 22\n *   < \"backgroundColor\"                                                                                               // 23\n *   > camelizeStyleName('-moz-transition')                                                                            // 24\n *   < \"MozTransition\"                                                                                                 // 25\n *   > camelizeStyleName('-ms-transition')                                                                             // 26\n *   < \"msTransition\"                                                                                                  // 27\n *                                                                                                                     // 28\n * As Andi Smith suggests                                                                                              // 29\n * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix                                        // 30\n * is converted to lowercase `ms`.                                                                                     // 31\n *                                                                                                                     // 32\n * @param {string} string                                                                                              // 33\n * @return {string}                                                                                                    // 34\n */                                                                                                                    // 35\nfunction camelizeStyleName(string) {                                                                                   // 36\n  return camelize(string.replace(msPattern, 'ms-'));                                                                   // 37\n}                                                                                                                      // 38\n                                                                                                                       // 39\nmodule.exports = camelizeStyleName;                                                                                    // 40\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"camelize.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/node_modules/fbjs/lib/camelize.js                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule camelize                                                                                            // 9\n * @typechecks                                                                                                         // 10\n */                                                                                                                    // 11\n                                                                                                                       // 12\n\"use strict\";                                                                                                          // 13\n                                                                                                                       // 14\nvar _hyphenPattern = /-(.)/g;                                                                                          // 15\n                                                                                                                       // 16\n/**                                                                                                                    // 17\n * Camelcases a hyphenated string, for example:                                                                        // 18\n *                                                                                                                     // 19\n *   > camelize('background-color')                                                                                    // 20\n *   < \"backgroundColor\"                                                                                               // 21\n *                                                                                                                     // 22\n * @param {string} string                                                                                              // 23\n * @return {string}                                                                                                    // 24\n */                                                                                                                    // 25\nfunction camelize(string) {                                                                                            // 26\n  return string.replace(_hyphenPattern, function (_, character) {                                                      // 27\n    return character.toUpperCase();                                                                                    // 28\n  });                                                                                                                  // 29\n}                                                                                                                      // 30\n                                                                                                                       // 31\nmodule.exports = camelize;                                                                                             // 32\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"hyphenateStyleName.js\":[\"./hyphenate\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/node_modules/fbjs/lib/hyphenateStyleName.js                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule hyphenateStyleName                                                                                  // 9\n * @typechecks                                                                                                         // 10\n */                                                                                                                    // 11\n                                                                                                                       // 12\n'use strict';                                                                                                          // 13\n                                                                                                                       // 14\nvar hyphenate = require('./hyphenate');                                                                                // 15\n                                                                                                                       // 16\nvar msPattern = /^ms-/;                                                                                                // 17\n                                                                                                                       // 18\n/**                                                                                                                    // 19\n * Hyphenates a camelcased CSS property name, for example:                                                             // 20\n *                                                                                                                     // 21\n *   > hyphenateStyleName('backgroundColor')                                                                           // 22\n *   < \"background-color\"                                                                                              // 23\n *   > hyphenateStyleName('MozTransition')                                                                             // 24\n *   < \"-moz-transition\"                                                                                               // 25\n *   > hyphenateStyleName('msTransition')                                                                              // 26\n *   < \"-ms-transition\"                                                                                                // 27\n *                                                                                                                     // 28\n * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix                                         // 29\n * is converted to `-ms-`.                                                                                             // 30\n *                                                                                                                     // 31\n * @param {string} string                                                                                              // 32\n * @return {string}                                                                                                    // 33\n */                                                                                                                    // 34\nfunction hyphenateStyleName(string) {                                                                                  // 35\n  return hyphenate(string).replace(msPattern, '-ms-');                                                                 // 36\n}                                                                                                                      // 37\n                                                                                                                       // 38\nmodule.exports = hyphenateStyleName;                                                                                   // 39\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"hyphenate.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/node_modules/fbjs/lib/hyphenate.js                                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule hyphenate                                                                                           // 9\n * @typechecks                                                                                                         // 10\n */                                                                                                                    // 11\n                                                                                                                       // 12\n'use strict';                                                                                                          // 13\n                                                                                                                       // 14\nvar _uppercasePattern = /([A-Z])/g;                                                                                    // 15\n                                                                                                                       // 16\n/**                                                                                                                    // 17\n * Hyphenates a camelcased string, for example:                                                                        // 18\n *                                                                                                                     // 19\n *   > hyphenate('backgroundColor')                                                                                    // 20\n *   < \"background-color\"                                                                                              // 21\n *                                                                                                                     // 22\n * For CSS style names, use `hyphenateStyleName` instead which works properly                                          // 23\n * with all vendor prefixes, including `ms`.                                                                           // 24\n *                                                                                                                     // 25\n * @param {string} string                                                                                              // 26\n * @return {string}                                                                                                    // 27\n */                                                                                                                    // 28\nfunction hyphenate(string) {                                                                                           // 29\n  return string.replace(_uppercasePattern, '-$1').toLowerCase();                                                       // 30\n}                                                                                                                      // 31\n                                                                                                                       // 32\nmodule.exports = hyphenate;                                                                                            // 33\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"memoizeStringOnly.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/node_modules/fbjs/lib/memoizeStringOnly.js                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule memoizeStringOnly                                                                                   // 9\n * @typechecks static-only                                                                                             // 10\n */                                                                                                                    // 11\n                                                                                                                       // 12\n'use strict';                                                                                                          // 13\n                                                                                                                       // 14\n/**                                                                                                                    // 15\n * Memoizes the return value of a function that accepts one string argument.                                           // 16\n *                                                                                                                     // 17\n * @param {function} callback                                                                                          // 18\n * @return {function}                                                                                                  // 19\n */                                                                                                                    // 20\nfunction memoizeStringOnly(callback) {                                                                                 // 21\n  var cache = {};                                                                                                      // 22\n  return function (string) {                                                                                           // 23\n    if (!cache.hasOwnProperty(string)) {                                                                               // 24\n      cache[string] = callback.call(this, string);                                                                     // 25\n    }                                                                                                                  // 26\n    return cache[string];                                                                                              // 27\n  };                                                                                                                   // 28\n}                                                                                                                      // 29\n                                                                                                                       // 30\nmodule.exports = memoizeStringOnly;                                                                                    // 31\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"shallowEqual.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/node_modules/fbjs/lib/shallowEqual.js                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule shallowEqual                                                                                        // 9\n * @typechecks                                                                                                         // 10\n *                                                                                                                     // 11\n */                                                                                                                    // 12\n                                                                                                                       // 13\n'use strict';                                                                                                          // 14\n                                                                                                                       // 15\nvar hasOwnProperty = Object.prototype.hasOwnProperty;                                                                  // 16\n                                                                                                                       // 17\n/**                                                                                                                    // 18\n * Performs equality by iterating through keys on an object and returning false                                        // 19\n * when any key has values which are not strictly equal between the arguments.                                         // 20\n * Returns true when the values of all keys are strictly equal.                                                        // 21\n */                                                                                                                    // 22\nfunction shallowEqual(objA, objB) {                                                                                    // 23\n  if (objA === objB) {                                                                                                 // 24\n    return true;                                                                                                       // 25\n  }                                                                                                                    // 26\n                                                                                                                       // 27\n  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {                        // 28\n    return false;                                                                                                      // 29\n  }                                                                                                                    // 30\n                                                                                                                       // 31\n  var keysA = Object.keys(objA);                                                                                       // 32\n  var keysB = Object.keys(objB);                                                                                       // 33\n                                                                                                                       // 34\n  if (keysA.length !== keysB.length) {                                                                                 // 35\n    return false;                                                                                                      // 36\n  }                                                                                                                    // 37\n                                                                                                                       // 38\n  // Test for A's keys different from B.                                                                               // 39\n  var bHasOwnProperty = hasOwnProperty.bind(objB);                                                                     // 40\n  for (var i = 0; i < keysA.length; i++) {                                                                             // 41\n    if (!bHasOwnProperty(keysA[i]) || objA[keysA[i]] !== objB[keysA[i]]) {                                             // 42\n      return false;                                                                                                    // 43\n    }                                                                                                                  // 44\n  }                                                                                                                    // 45\n                                                                                                                       // 46\n  return true;                                                                                                         // 47\n}                                                                                                                      // 48\n                                                                                                                       // 49\nmodule.exports = shallowEqual;                                                                                         // 50\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"EventListener.js\":[\"./emptyFunction\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/node_modules/fbjs/lib/EventListener.js                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n *                                                                                                                     // 3\n * Licensed under the Apache License, Version 2.0 (the \"License\");                                                     // 4\n * you may not use this file except in compliance with the License.                                                    // 5\n * You may obtain a copy of the License at                                                                             // 6\n *                                                                                                                     // 7\n * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 8\n *                                                                                                                     // 9\n * Unless required by applicable law or agreed to in writing, software                                                 // 10\n * distributed under the License is distributed on an \"AS IS\" BASIS,                                                   // 11\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 12\n * See the License for the specific language governing permissions and                                                 // 13\n * limitations under the License.                                                                                      // 14\n *                                                                                                                     // 15\n * @providesModule EventListener                                                                                       // 16\n * @typechecks                                                                                                         // 17\n */                                                                                                                    // 18\n                                                                                                                       // 19\n'use strict';                                                                                                          // 20\n                                                                                                                       // 21\nvar emptyFunction = require('./emptyFunction');                                                                        // 22\n                                                                                                                       // 23\n/**                                                                                                                    // 24\n * Upstream version of event listener. Does not take into account specific                                             // 25\n * nature of platform.                                                                                                 // 26\n */                                                                                                                    // 27\nvar EventListener = {                                                                                                  // 28\n  /**                                                                                                                  // 29\n   * Listen to DOM events during the bubble phase.                                                                     // 30\n   *                                                                                                                   // 31\n   * @param {DOMEventTarget} target DOM element to register listener on.                                               // 32\n   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.                                                // 33\n   * @param {function} callback Callback function.                                                                     // 34\n   * @return {object} Object with a `remove` method.                                                                   // 35\n   */                                                                                                                  // 36\n  listen: function (target, eventType, callback) {                                                                     // 37\n    if (target.addEventListener) {                                                                                     // 38\n      target.addEventListener(eventType, callback, false);                                                             // 39\n      return {                                                                                                         // 40\n        remove: function () {                                                                                          // 41\n          target.removeEventListener(eventType, callback, false);                                                      // 42\n        }                                                                                                              // 43\n      };                                                                                                               // 44\n    } else if (target.attachEvent) {                                                                                   // 45\n      target.attachEvent('on' + eventType, callback);                                                                  // 46\n      return {                                                                                                         // 47\n        remove: function () {                                                                                          // 48\n          target.detachEvent('on' + eventType, callback);                                                              // 49\n        }                                                                                                              // 50\n      };                                                                                                               // 51\n    }                                                                                                                  // 52\n  },                                                                                                                   // 53\n                                                                                                                       // 54\n  /**                                                                                                                  // 55\n   * Listen to DOM events during the capture phase.                                                                    // 56\n   *                                                                                                                   // 57\n   * @param {DOMEventTarget} target DOM element to register listener on.                                               // 58\n   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.                                                // 59\n   * @param {function} callback Callback function.                                                                     // 60\n   * @return {object} Object with a `remove` method.                                                                   // 61\n   */                                                                                                                  // 62\n  capture: function (target, eventType, callback) {                                                                    // 63\n    if (target.addEventListener) {                                                                                     // 64\n      target.addEventListener(eventType, callback, true);                                                              // 65\n      return {                                                                                                         // 66\n        remove: function () {                                                                                          // 67\n          target.removeEventListener(eventType, callback, true);                                                       // 68\n        }                                                                                                              // 69\n      };                                                                                                               // 70\n    } else {                                                                                                           // 71\n      if (process.env.NODE_ENV !== 'production') {                                                                     // 72\n        console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');\n      }                                                                                                                // 74\n      return {                                                                                                         // 75\n        remove: emptyFunction                                                                                          // 76\n      };                                                                                                               // 77\n    }                                                                                                                  // 78\n  },                                                                                                                   // 79\n                                                                                                                       // 80\n  registerDefault: function () {}                                                                                      // 81\n};                                                                                                                     // 82\n                                                                                                                       // 83\nmodule.exports = EventListener;                                                                                        // 84\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"getUnboundedScrollPosition.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/node_modules/fbjs/lib/getUnboundedScrollPosition.js                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule getUnboundedScrollPosition                                                                          // 9\n * @typechecks                                                                                                         // 10\n */                                                                                                                    // 11\n                                                                                                                       // 12\n'use strict';                                                                                                          // 13\n                                                                                                                       // 14\n/**                                                                                                                    // 15\n * Gets the scroll position of the supplied element or window.                                                         // 16\n *                                                                                                                     // 17\n * The return values are unbounded, unlike `getScrollPosition`. This means they                                        // 18\n * may be negative or exceed the element boundaries (which is possible using                                           // 19\n * inertial scrolling).                                                                                                // 20\n *                                                                                                                     // 21\n * @param {DOMWindow|DOMElement} scrollable                                                                            // 22\n * @return {object} Map with `x` and `y` keys.                                                                         // 23\n */                                                                                                                    // 24\nfunction getUnboundedScrollPosition(scrollable) {                                                                      // 25\n  if (scrollable === window) {                                                                                         // 26\n    return {                                                                                                           // 27\n      x: window.pageXOffset || document.documentElement.scrollLeft,                                                    // 28\n      y: window.pageYOffset || document.documentElement.scrollTop                                                      // 29\n    };                                                                                                                 // 30\n  }                                                                                                                    // 31\n  return {                                                                                                             // 32\n    x: scrollable.scrollLeft,                                                                                          // 33\n    y: scrollable.scrollTop                                                                                            // 34\n  };                                                                                                                   // 35\n}                                                                                                                      // 36\n                                                                                                                       // 37\nmodule.exports = getUnboundedScrollPosition;                                                                           // 38\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"getActiveElement.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/node_modules/fbjs/lib/getActiveElement.js                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule getActiveElement                                                                                    // 9\n * @typechecks                                                                                                         // 10\n */                                                                                                                    // 11\n                                                                                                                       // 12\n/* eslint-disable fb-www/typeof-undefined */                                                                           // 13\n                                                                                                                       // 14\n/**                                                                                                                    // 15\n * Same as document.activeElement but wraps in a try-catch block. In IE it is                                          // 16\n * not safe to call document.activeElement if there is nothing focused.                                                // 17\n *                                                                                                                     // 18\n * The activeElement will be null only if the document or document body is not                                         // 19\n * yet defined.                                                                                                        // 20\n */                                                                                                                    // 21\n'use strict';                                                                                                          // 22\n                                                                                                                       // 23\nfunction getActiveElement() /*?DOMElement*/{                                                                           // 24\n  if (typeof document === 'undefined') {                                                                               // 25\n    return null;                                                                                                       // 26\n  }                                                                                                                    // 27\n  try {                                                                                                                // 28\n    return document.activeElement || document.body;                                                                    // 29\n  } catch (e) {                                                                                                        // 30\n    return document.body;                                                                                              // 31\n  }                                                                                                                    // 32\n}                                                                                                                      // 33\n                                                                                                                       // 34\nmodule.exports = getActiveElement;                                                                                     // 35\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"performanceNow.js\":[\"./performance\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/node_modules/fbjs/lib/performanceNow.js                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule performanceNow                                                                                      // 9\n * @typechecks                                                                                                         // 10\n */                                                                                                                    // 11\n                                                                                                                       // 12\n'use strict';                                                                                                          // 13\n                                                                                                                       // 14\nvar performance = require('./performance');                                                                            // 15\n                                                                                                                       // 16\nvar performanceNow;                                                                                                    // 17\n                                                                                                                       // 18\n/**                                                                                                                    // 19\n * Detect if we can use `window.performance.now()` and gracefully fallback to                                          // 20\n * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now                                           // 21\n * because of Facebook's testing infrastructure.                                                                       // 22\n */                                                                                                                    // 23\nif (performance.now) {                                                                                                 // 24\n  performanceNow = function () {                                                                                       // 25\n    return performance.now();                                                                                          // 26\n  };                                                                                                                   // 27\n} else {                                                                                                               // 28\n  performanceNow = function () {                                                                                       // 29\n    return Date.now();                                                                                                 // 30\n  };                                                                                                                   // 31\n}                                                                                                                      // 32\n                                                                                                                       // 33\nmodule.exports = performanceNow;                                                                                       // 34\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"performance.js\":[\"./ExecutionEnvironment\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/node_modules/fbjs/lib/performance.js                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule performance                                                                                         // 9\n * @typechecks                                                                                                         // 10\n */                                                                                                                    // 11\n                                                                                                                       // 12\n'use strict';                                                                                                          // 13\n                                                                                                                       // 14\nvar ExecutionEnvironment = require('./ExecutionEnvironment');                                                          // 15\n                                                                                                                       // 16\nvar performance;                                                                                                       // 17\n                                                                                                                       // 18\nif (ExecutionEnvironment.canUseDOM) {                                                                                  // 19\n  performance = window.performance || window.msPerformance || window.webkitPerformance;                                // 20\n}                                                                                                                      // 21\n                                                                                                                       // 22\nmodule.exports = performance || {};                                                                                    // 23\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"mapObject.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react/node_modules/fbjs/lib/mapObject.js                                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7\n *                                                                                                                     // 8\n * @providesModule mapObject                                                                                           // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n'use strict';                                                                                                          // 12\n                                                                                                                       // 13\nvar hasOwnProperty = Object.prototype.hasOwnProperty;                                                                  // 14\n                                                                                                                       // 15\n/**                                                                                                                    // 16\n * Executes the provided `callback` once for each enumerable own property in the                                       // 17\n * object and constructs a new object from the results. The `callback` is                                              // 18\n * invoked with three arguments:                                                                                       // 19\n *                                                                                                                     // 20\n *  - the property value                                                                                               // 21\n *  - the property name                                                                                                // 22\n *  - the object being traversed                                                                                       // 23\n *                                                                                                                     // 24\n * Properties that are added after the call to `mapObject` will not be visited                                         // 25\n * by `callback`. If the values of existing properties are changed, the value                                          // 26\n * passed to `callback` will be the value at the time `mapObject` visits them.                                         // 27\n * Properties that are deleted before being visited are not visited.                                                   // 28\n *                                                                                                                     // 29\n * @grep function objectMap()                                                                                          // 30\n * @grep function objMap()                                                                                             // 31\n *                                                                                                                     // 32\n * @param {?object} object                                                                                             // 33\n * @param {function} callback                                                                                          // 34\n * @param {*} context                                                                                                  // 35\n * @return {?object}                                                                                                   // 36\n */                                                                                                                    // 37\nfunction mapObject(object, callback, context) {                                                                        // 38\n  if (!object) {                                                                                                       // 39\n    return null;                                                                                                       // 40\n  }                                                                                                                    // 41\n  var result = {};                                                                                                     // 42\n  for (var name in object) {                                                                                           // 43\n    if (hasOwnProperty.call(object, name)) {                                                                           // 44\n      result[name] = callback.call(context, object[name], name, object);                                               // 45\n    }                                                                                                                  // 46\n  }                                                                                                                    // 47\n  return result;                                                                                                       // 48\n}                                                                                                                      // 49\n                                                                                                                       // 50\nmodule.exports = mapObject;                                                                                            // 51\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}},\"reflux\":{\"package.json\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/reflux/package.json                                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"reflux\";                                                                                               // 1\nexports.main = \"src/index.js\";                                                                                         // 2\n                                                                                                                       // 3\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"src\":{\"index.js\":[\"reflux-core\",\"./connect\",\"./connectFilter\",\"./ListenerMixin\",\"./listenTo\",\"./listenToMany\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/reflux/src/index.js                                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar Reflux = require('reflux-core');                                                                                   // 1\n                                                                                                                       // 2\nReflux.connect = require('./connect');                                                                                 // 3\n                                                                                                                       // 4\nReflux.connectFilter = require('./connectFilter');                                                                     // 5\n                                                                                                                       // 6\nReflux.ListenerMixin = require('./ListenerMixin');                                                                     // 7\n                                                                                                                       // 8\nReflux.listenTo = require('./listenTo');                                                                               // 9\n                                                                                                                       // 10\nReflux.listenToMany = require('./listenToMany');                                                                       // 11\n                                                                                                                       // 12\nmodule.exports = Reflux;                                                                                               // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"connect.js\":[\"reflux-core/lib/ListenerMethods\",\"./ListenerMixin\",\"reflux-core/lib/utils\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/reflux/src/connect.js                                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar ListenerMethods = require('reflux-core/lib/ListenerMethods'),                                                      // 1\n    ListenerMixin = require('./ListenerMixin'),                                                                        // 2\n    _ = require('reflux-core/lib/utils');                                                                              // 3\n                                                                                                                       // 4\nmodule.exports = function(listenable,key){                                                                             // 5\n    return {                                                                                                           // 6\n        getInitialState: function(){                                                                                   // 7\n            if (!_.isFunction(listenable.getInitialState)) {                                                           // 8\n                return {};                                                                                             // 9\n            } else if (key === undefined) {                                                                            // 10\n                return listenable.getInitialState();                                                                   // 11\n            } else {                                                                                                   // 12\n                return _.object([key],[listenable.getInitialState()]);                                                 // 13\n            }                                                                                                          // 14\n        },                                                                                                             // 15\n        componentDidMount: function(){                                                                                 // 16\n            _.extend(this,ListenerMethods);                                                                            // 17\n            var me = this, cb = (key === undefined ? this.setState : function(v){                                      // 18\n                if (typeof me.isMounted === \"undefined\" || me.isMounted() === true) {                                  // 19\n                    me.setState(_.object([key],[v]));                                                                  // 20\n                }                                                                                                      // 21\n            });                                                                                                        // 22\n            this.listenTo(listenable,cb);                                                                              // 23\n        },                                                                                                             // 24\n        componentWillUnmount: ListenerMixin.componentWillUnmount                                                       // 25\n    };                                                                                                                 // 26\n};                                                                                                                     // 27\n                                                                                                                       // 28\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ListenerMixin.js\":[\"reflux-core/lib/utils\",\"reflux-core/lib/ListenerMethods\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/reflux/src/ListenerMixin.js                                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _ = require('reflux-core/lib/utils'),                                                                              // 1\n    ListenerMethods = require('reflux-core/lib/ListenerMethods');                                                      // 2\n                                                                                                                       // 3\n/**                                                                                                                    // 4\n * A module meant to be consumed as a mixin by a React component. Supplies the methods from                            // 5\n * `ListenerMethods` mixin and takes care of teardown of subscriptions.                                                // 6\n * Note that if you're using the `connect` mixin you don't need this mixin, as connect will                            // 7\n * import everything this mixin contains!                                                                              // 8\n */                                                                                                                    // 9\nmodule.exports = _.extend({                                                                                            // 10\n                                                                                                                       // 11\n    /**                                                                                                                // 12\n     * Cleans up all listener previously registered.                                                                   // 13\n     */                                                                                                                // 14\n    componentWillUnmount: ListenerMethods.stopListeningToAll                                                           // 15\n                                                                                                                       // 16\n}, ListenerMethods);                                                                                                   // 17\n                                                                                                                       // 18\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"connectFilter.js\":[\"reflux-core/lib/ListenerMethods\",\"./ListenerMixin\",\"reflux-core/lib/utils\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/reflux/src/connectFilter.js                                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar ListenerMethods = require('reflux-core/lib/ListenerMethods'),                                                      // 1\n    ListenerMixin = require('./ListenerMixin'),                                                                        // 2\n    _ = require('reflux-core/lib/utils');                                                                              // 3\n                                                                                                                       // 4\nmodule.exports = function(listenable, key, filterFunc) {                                                               // 5\n    filterFunc = _.isFunction(key) ? key : filterFunc;                                                                 // 6\n    return {                                                                                                           // 7\n        getInitialState: function() {                                                                                  // 8\n            if (!_.isFunction(listenable.getInitialState)) {                                                           // 9\n                return {};                                                                                             // 10\n            } else if (_.isFunction(key)) {                                                                            // 11\n                return filterFunc.call(this, listenable.getInitialState());                                            // 12\n            } else {                                                                                                   // 13\n                // Filter initial payload from store.                                                                  // 14\n                var result = filterFunc.call(this, listenable.getInitialState());                                      // 15\n                if (typeof(result) !== \"undefined\") {                                                                  // 16\n                    return _.object([key], [result]);                                                                  // 17\n                } else {                                                                                               // 18\n                    return {};                                                                                         // 19\n                }                                                                                                      // 20\n            }                                                                                                          // 21\n        },                                                                                                             // 22\n        componentDidMount: function() {                                                                                // 23\n            _.extend(this, ListenerMethods);                                                                           // 24\n            var me = this;                                                                                             // 25\n            var cb = function(value) {                                                                                 // 26\n                if (_.isFunction(key)) {                                                                               // 27\n                    me.setState(filterFunc.call(me, value));                                                           // 28\n                } else {                                                                                               // 29\n                    var result = filterFunc.call(me, value);                                                           // 30\n                    me.setState(_.object([key], [result]));                                                            // 31\n                }                                                                                                      // 32\n            };                                                                                                         // 33\n                                                                                                                       // 34\n            this.listenTo(listenable, cb);                                                                             // 35\n        },                                                                                                             // 36\n        componentWillUnmount: ListenerMixin.componentWillUnmount                                                       // 37\n    };                                                                                                                 // 38\n};                                                                                                                     // 39\n                                                                                                                       // 40\n                                                                                                                       // 41\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"listenTo.js\":[\"reflux-core/lib/ListenerMethods\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/reflux/src/listenTo.js                                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar ListenerMethods = require('reflux-core/lib/ListenerMethods');                                                      // 1\n                                                                                                                       // 2\n/**                                                                                                                    // 3\n * A mixin factory for a React component. Meant as a more convenient way of using the `ListenerMixin`,                 // 4\n * without having to manually set listeners in the `componentDidMount` method.                                         // 5\n *                                                                                                                     // 6\n * @param {Action|Store} listenable An Action or Store that should be                                                  // 7\n *  listened to.                                                                                                       // 8\n * @param {Function|String} callback The callback to register as event handler                                         // 9\n * @param {Function|String} defaultCallback The callback to register as default handler                                // 10\n * @returns {Object} An object to be used as a mixin, which sets up the listener for the given listenable.             // 11\n */                                                                                                                    // 12\nmodule.exports = function(listenable,callback,initial){                                                                // 13\n    return {                                                                                                           // 14\n        /**                                                                                                            // 15\n         * Set up the mixin before the initial rendering occurs. Import methods from `ListenerMethods`                 // 16\n         * and then make the call to `listenTo` with the arguments provided to the factory function                    // 17\n         */                                                                                                            // 18\n        componentDidMount: function() {                                                                                // 19\n            for(var m in ListenerMethods){                                                                             // 20\n                if (this[m] !== ListenerMethods[m]){                                                                   // 21\n                    if (this[m]){                                                                                      // 22\n                        throw \"Can't have other property '\"+m+\"' when using Reflux.listenTo!\";                         // 23\n                    }                                                                                                  // 24\n                    this[m] = ListenerMethods[m];                                                                      // 25\n                }                                                                                                      // 26\n            }                                                                                                          // 27\n            this.listenTo(listenable,callback,initial);                                                                // 28\n        },                                                                                                             // 29\n        /**                                                                                                            // 30\n         * Cleans up all listener previously registered.                                                               // 31\n         */                                                                                                            // 32\n        componentWillUnmount: ListenerMethods.stopListeningToAll                                                       // 33\n    };                                                                                                                 // 34\n};                                                                                                                     // 35\n                                                                                                                       // 36\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"listenToMany.js\":[\"reflux-core/lib/ListenerMethods\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/reflux/src/listenToMany.js                                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar ListenerMethods = require('reflux-core/lib/ListenerMethods');                                                      // 1\n                                                                                                                       // 2\n/**                                                                                                                    // 3\n * A mixin factory for a React component. Meant as a more convenient way of using the `listenerMixin`,                 // 4\n * without having to manually set listeners in the `componentDidMount` method. This version is used                    // 5\n * to automatically set up a `listenToMany` call.                                                                      // 6\n *                                                                                                                     // 7\n * @param {Object} listenables An object of listenables                                                                // 8\n * @returns {Object} An object to be used as a mixin, which sets up the listeners for the given listenables.           // 9\n */                                                                                                                    // 10\nmodule.exports = function(listenables){                                                                                // 11\n    return {                                                                                                           // 12\n        /**                                                                                                            // 13\n         * Set up the mixin before the initial rendering occurs. Import methods from `ListenerMethods`                 // 14\n         * and then make the call to `listenTo` with the arguments provided to the factory function                    // 15\n         */                                                                                                            // 16\n        componentDidMount: function() {                                                                                // 17\n            for(var m in ListenerMethods){                                                                             // 18\n                if (this[m] !== ListenerMethods[m]){                                                                   // 19\n                    if (this[m]){                                                                                      // 20\n                        throw \"Can't have other property '\"+m+\"' when using Reflux.listenToMany!\";                     // 21\n                    }                                                                                                  // 22\n                    this[m] = ListenerMethods[m];                                                                      // 23\n                }                                                                                                      // 24\n            }                                                                                                          // 25\n            this.listenToMany(listenables);                                                                            // 26\n        },                                                                                                             // 27\n        /**                                                                                                            // 28\n         * Cleans up all listener previously registered.                                                               // 29\n         */                                                                                                            // 30\n        componentWillUnmount: ListenerMethods.stopListeningToAll                                                       // 31\n    };                                                                                                                 // 32\n};                                                                                                                     // 33\n                                                                                                                       // 34\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"node_modules\":{\"reflux-core\":{\"package.json\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/reflux/node_modules/reflux-core/package.json                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"reflux-core\";                                                                                          // 1\nexports.main = \"lib/index.js\";                                                                                         // 2\n                                                                                                                       // 3\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"lib\":{\"index.js\":[\"./ActionMethods\",\"./ListenerMethods\",\"./PublisherMethods\",\"./StoreMethods\",\"./createAction\",\"./createStore\",\"./joins\",\"./utils\",\"./Keep\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/reflux/node_modules/reflux-core/lib/index.js                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n\"use strict\";                                                                                                          // 1\n                                                                                                                       // 2\nObject.defineProperty(exports, \"__esModule\", {                                                                         // 3\n    value: true                                                                                                        // 4\n});                                                                                                                    // 5\nvar Reflux = {                                                                                                         // 6\n    version: {                                                                                                         // 7\n        \"reflux-core\": \"0.3.0\"                                                                                         // 8\n    }                                                                                                                  // 9\n};                                                                                                                     // 10\n                                                                                                                       // 11\nReflux.ActionMethods = require(\"./ActionMethods\");                                                                     // 12\n                                                                                                                       // 13\nReflux.ListenerMethods = require(\"./ListenerMethods\");                                                                 // 14\n                                                                                                                       // 15\nReflux.PublisherMethods = require(\"./PublisherMethods\");                                                               // 16\n                                                                                                                       // 17\nReflux.StoreMethods = require(\"./StoreMethods\");                                                                       // 18\n                                                                                                                       // 19\nReflux.createAction = require(\"./createAction\");                                                                       // 20\n                                                                                                                       // 21\nReflux.createStore = require(\"./createStore\");                                                                         // 22\n                                                                                                                       // 23\nvar maker = require(\"./joins\").staticJoinCreator;                                                                      // 24\n                                                                                                                       // 25\nReflux.joinTrailing = Reflux.all = maker(\"last\"); // Reflux.all alias for backward compatibility                       // 26\n                                                                                                                       // 27\nReflux.joinLeading = maker(\"first\");                                                                                   // 28\n                                                                                                                       // 29\nReflux.joinStrict = maker(\"strict\");                                                                                   // 30\n                                                                                                                       // 31\nReflux.joinConcat = maker(\"all\");                                                                                      // 32\n                                                                                                                       // 33\nvar _ = Reflux.utils = require(\"./utils\");                                                                             // 34\n                                                                                                                       // 35\nReflux.EventEmitter = _.EventEmitter;                                                                                  // 36\n                                                                                                                       // 37\nReflux.Promise = _.Promise;                                                                                            // 38\n                                                                                                                       // 39\n/**                                                                                                                    // 40\n * Convenience function for creating a set of actions                                                                  // 41\n *                                                                                                                     // 42\n * @param definitions the definitions for the actions to be created                                                    // 43\n * @returns an object with actions of corresponding action names                                                       // 44\n */                                                                                                                    // 45\nReflux.createActions = (function () {                                                                                  // 46\n    var reducer = function reducer(definitions, actions) {                                                             // 47\n        Object.keys(definitions).forEach(function (actionName) {                                                       // 48\n            var val = definitions[actionName];                                                                         // 49\n            actions[actionName] = Reflux.createAction(val);                                                            // 50\n        });                                                                                                            // 51\n    };                                                                                                                 // 52\n                                                                                                                       // 53\n    return function (definitions) {                                                                                    // 54\n        var actions = {};                                                                                              // 55\n        if (definitions instanceof Array) {                                                                            // 56\n            definitions.forEach(function (val) {                                                                       // 57\n                if (_.isObject(val)) {                                                                                 // 58\n                    reducer(val, actions);                                                                             // 59\n                } else {                                                                                               // 60\n                    actions[val] = Reflux.createAction(val);                                                           // 61\n                }                                                                                                      // 62\n            });                                                                                                        // 63\n        } else {                                                                                                       // 64\n            reducer(definitions, actions);                                                                             // 65\n        }                                                                                                              // 66\n        return actions;                                                                                                // 67\n    };                                                                                                                 // 68\n})();                                                                                                                  // 69\n                                                                                                                       // 70\n/**                                                                                                                    // 71\n * Sets the eventmitter that Reflux uses                                                                               // 72\n */                                                                                                                    // 73\nReflux.setEventEmitter = function (ctx) {                                                                              // 74\n    Reflux.EventEmitter = _.EventEmitter = ctx;                                                                        // 75\n};                                                                                                                     // 76\n                                                                                                                       // 77\n/**                                                                                                                    // 78\n * Sets the method used for deferring actions and stores                                                               // 79\n */                                                                                                                    // 80\nReflux.nextTick = function (nextTick) {                                                                                // 81\n    _.nextTick = nextTick;                                                                                             // 82\n};                                                                                                                     // 83\n                                                                                                                       // 84\nReflux.use = function (pluginCb) {                                                                                     // 85\n    pluginCb(Reflux);                                                                                                  // 86\n};                                                                                                                     // 87\n                                                                                                                       // 88\n/**                                                                                                                    // 89\n * Provides the set of created actions and stores for introspection                                                    // 90\n */                                                                                                                    // 91\n/*eslint-disable no-underscore-dangle*/                                                                                // 92\nReflux.__keep = require(\"./Keep\");                                                                                     // 93\n/*eslint-enable no-underscore-dangle*/                                                                                 // 94\n                                                                                                                       // 95\n/**                                                                                                                    // 96\n * Warn if Function.prototype.bind not available                                                                       // 97\n */                                                                                                                    // 98\nif (!Function.prototype.bind) {                                                                                        // 99\n    console.error(\"Function.prototype.bind not available. \" + \"ES5 shim required. \" + \"https://github.com/spoike/refluxjs#es5\");\n}                                                                                                                      // 101\n                                                                                                                       // 102\nexports[\"default\"] = Reflux;                                                                                           // 103\nmodule.exports = exports[\"default\"];                                                                                   // 104\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ActionMethods.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/reflux/node_modules/reflux-core/lib/ActionMethods.js                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * A module of methods that you want to include in all actions.                                                        // 2\n * This module is consumed by `createAction`.                                                                          // 3\n */                                                                                                                    // 4\n\"use strict\";                                                                                                          // 5\n                                                                                                                       // 6\nmodule.exports = {};                                                                                                   // 7\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ListenerMethods.js\":[\"./utils\",\"./joins\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/reflux/node_modules/reflux-core/lib/ListenerMethods.js                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n\"use strict\";                                                                                                          // 1\n                                                                                                                       // 2\nvar _ = require(\"./utils\"),                                                                                            // 3\n    maker = require(\"./joins\").instanceJoinCreator;                                                                    // 4\n                                                                                                                       // 5\n/**                                                                                                                    // 6\n * Extract child listenables from a parent from their                                                                  // 7\n * children property and return them in a keyed Object                                                                 // 8\n *                                                                                                                     // 9\n * @param {Object} listenable The parent listenable                                                                    // 10\n */                                                                                                                    // 11\nvar mapChildListenables = function mapChildListenables(listenable) {                                                   // 12\n    var i = 0,                                                                                                         // 13\n        children = {},                                                                                                 // 14\n        childName;                                                                                                     // 15\n    for (; i < (listenable.children || []).length; ++i) {                                                              // 16\n        childName = listenable.children[i];                                                                            // 17\n        if (listenable[childName]) {                                                                                   // 18\n            children[childName] = listenable[childName];                                                               // 19\n        }                                                                                                              // 20\n    }                                                                                                                  // 21\n    return children;                                                                                                   // 22\n};                                                                                                                     // 23\n                                                                                                                       // 24\n/**                                                                                                                    // 25\n * Make a flat dictionary of all listenables including their                                                           // 26\n * possible children (recursively), concatenating names in camelCase.                                                  // 27\n *                                                                                                                     // 28\n * @param {Object} listenables The top-level listenables                                                               // 29\n */                                                                                                                    // 30\nvar flattenListenables = function flattenListenables(listenables) {                                                    // 31\n    var flattened = {};                                                                                                // 32\n    for (var key in listenables) {                                                                                     // 33\n        var listenable = listenables[key];                                                                             // 34\n        var childMap = mapChildListenables(listenable);                                                                // 35\n                                                                                                                       // 36\n        // recursively flatten children                                                                                // 37\n        var children = flattenListenables(childMap);                                                                   // 38\n                                                                                                                       // 39\n        // add the primary listenable and chilren                                                                      // 40\n        flattened[key] = listenable;                                                                                   // 41\n        for (var childKey in children) {                                                                               // 42\n            var childListenable = children[childKey];                                                                  // 43\n            flattened[key + _.capitalize(childKey)] = childListenable;                                                 // 44\n        }                                                                                                              // 45\n    }                                                                                                                  // 46\n                                                                                                                       // 47\n    return flattened;                                                                                                  // 48\n};                                                                                                                     // 49\n                                                                                                                       // 50\n/**                                                                                                                    // 51\n * A module of methods related to listening.                                                                           // 52\n */                                                                                                                    // 53\nmodule.exports = {                                                                                                     // 54\n                                                                                                                       // 55\n    /**                                                                                                                // 56\n     * An internal utility function used by `validateListening`                                                        // 57\n     *                                                                                                                 // 58\n     * @param {Action|Store} listenable The listenable we want to search for                                           // 59\n     * @returns {Boolean} The result of a recursive search among `this.subscriptions`                                  // 60\n     */                                                                                                                // 61\n    hasListener: function hasListener(listenable) {                                                                    // 62\n        var i = 0,                                                                                                     // 63\n            j,                                                                                                         // 64\n            listener,                                                                                                  // 65\n            listenables;                                                                                               // 66\n        for (; i < (this.subscriptions || []).length; ++i) {                                                           // 67\n            listenables = [].concat(this.subscriptions[i].listenable);                                                 // 68\n            for (j = 0; j < listenables.length; j++) {                                                                 // 69\n                listener = listenables[j];                                                                             // 70\n                if (listener === listenable || listener.hasListener && listener.hasListener(listenable)) {             // 71\n                    return true;                                                                                       // 72\n                }                                                                                                      // 73\n            }                                                                                                          // 74\n        }                                                                                                              // 75\n        return false;                                                                                                  // 76\n    },                                                                                                                 // 77\n                                                                                                                       // 78\n    /**                                                                                                                // 79\n     * A convenience method that listens to all listenables in the given object.                                       // 80\n     *                                                                                                                 // 81\n     * @param {Object} listenables An object of listenables. Keys will be used as callback method names.               // 82\n     */                                                                                                                // 83\n    listenToMany: function listenToMany(listenables) {                                                                 // 84\n        var allListenables = flattenListenables(listenables);                                                          // 85\n        for (var key in allListenables) {                                                                              // 86\n            var cbname = _.callbackName(key),                                                                          // 87\n                localname = this[cbname] ? cbname : this[key] ? key : undefined;                                       // 88\n            if (localname) {                                                                                           // 89\n                this.listenTo(allListenables[key], localname, this[cbname + \"Default\"] || this[localname + \"Default\"] || localname);\n            }                                                                                                          // 91\n        }                                                                                                              // 92\n    },                                                                                                                 // 93\n                                                                                                                       // 94\n    /**                                                                                                                // 95\n     * Checks if the current context can listen to the supplied listenable                                             // 96\n     *                                                                                                                 // 97\n     * @param {Action|Store} listenable An Action or Store that should be                                              // 98\n     *  listened to.                                                                                                   // 99\n     * @returns {String|Undefined} An error message, or undefined if there was no problem.                             // 100\n     */                                                                                                                // 101\n    validateListening: function validateListening(listenable) {                                                        // 102\n        if (listenable === this) {                                                                                     // 103\n            return \"Listener is not able to listen to itself\";                                                         // 104\n        }                                                                                                              // 105\n        if (!_.isFunction(listenable.listen)) {                                                                        // 106\n            return listenable + \" is missing a listen method\";                                                         // 107\n        }                                                                                                              // 108\n        if (listenable.hasListener && listenable.hasListener(this)) {                                                  // 109\n            return \"Listener cannot listen to this listenable because of circular loop\";                               // 110\n        }                                                                                                              // 111\n    },                                                                                                                 // 112\n                                                                                                                       // 113\n    /**                                                                                                                // 114\n     * Sets up a subscription to the given listenable for the context object                                           // 115\n     *                                                                                                                 // 116\n     * @param {Action|Store} listenable An Action or Store that should be                                              // 117\n     *  listened to.                                                                                                   // 118\n     * @param {Function|String} callback The callback to register as event handler                                     // 119\n     * @param {Function|String} defaultCallback The callback to register as default handler                            // 120\n     * @returns {Object} A subscription obj where `stop` is an unsub function and `listenable` is the object being listened to\n     */                                                                                                                // 122\n    listenTo: function listenTo(listenable, callback, defaultCallback) {                                               // 123\n        var desub,                                                                                                     // 124\n            unsubscriber,                                                                                              // 125\n            subscriptionobj,                                                                                           // 126\n            subs = this.subscriptions = this.subscriptions || [];                                                      // 127\n        _.throwIf(this.validateListening(listenable));                                                                 // 128\n        this.fetchInitialState(listenable, defaultCallback);                                                           // 129\n        desub = listenable.listen(this[callback] || callback, this);                                                   // 130\n        unsubscriber = function () {                                                                                   // 131\n            var index = subs.indexOf(subscriptionobj);                                                                 // 132\n            _.throwIf(index === -1, \"Tried to remove listen already gone from subscriptions list!\");                   // 133\n            subs.splice(index, 1);                                                                                     // 134\n            desub();                                                                                                   // 135\n        };                                                                                                             // 136\n        subscriptionobj = {                                                                                            // 137\n            stop: unsubscriber,                                                                                        // 138\n            listenable: listenable                                                                                     // 139\n        };                                                                                                             // 140\n        subs.push(subscriptionobj);                                                                                    // 141\n        return subscriptionobj;                                                                                        // 142\n    },                                                                                                                 // 143\n                                                                                                                       // 144\n    /**                                                                                                                // 145\n     * Stops listening to a single listenable                                                                          // 146\n     *                                                                                                                 // 147\n     * @param {Action|Store} listenable The action or store we no longer want to listen to                             // 148\n     * @returns {Boolean} True if a subscription was found and removed, otherwise false.                               // 149\n     */                                                                                                                // 150\n    stopListeningTo: function stopListeningTo(listenable) {                                                            // 151\n        var sub,                                                                                                       // 152\n            i = 0,                                                                                                     // 153\n            subs = this.subscriptions || [];                                                                           // 154\n        for (; i < subs.length; i++) {                                                                                 // 155\n            sub = subs[i];                                                                                             // 156\n            if (sub.listenable === listenable) {                                                                       // 157\n                sub.stop();                                                                                            // 158\n                _.throwIf(subs.indexOf(sub) !== -1, \"Failed to remove listen from subscriptions list!\");               // 159\n                return true;                                                                                           // 160\n            }                                                                                                          // 161\n        }                                                                                                              // 162\n        return false;                                                                                                  // 163\n    },                                                                                                                 // 164\n                                                                                                                       // 165\n    /**                                                                                                                // 166\n     * Stops all subscriptions and empties subscriptions array                                                         // 167\n     */                                                                                                                // 168\n    stopListeningToAll: function stopListeningToAll() {                                                                // 169\n        var remaining,                                                                                                 // 170\n            subs = this.subscriptions || [];                                                                           // 171\n        while (remaining = subs.length) {                                                                              // 172\n            subs[0].stop();                                                                                            // 173\n            _.throwIf(subs.length !== remaining - 1, \"Failed to remove listen from subscriptions list!\");              // 174\n        }                                                                                                              // 175\n    },                                                                                                                 // 176\n                                                                                                                       // 177\n    /**                                                                                                                // 178\n     * Used in `listenTo`. Fetches initial data from a publisher if it has a `getInitialState` method.                 // 179\n     * @param {Action|Store} listenable The publisher we want to get initial state from                                // 180\n     * @param {Function|String} defaultCallback The method to receive the data                                         // 181\n     */                                                                                                                // 182\n    fetchInitialState: function fetchInitialState(listenable, defaultCallback) {                                       // 183\n        defaultCallback = defaultCallback && this[defaultCallback] || defaultCallback;                                 // 184\n        var me = this;                                                                                                 // 185\n        if (_.isFunction(defaultCallback) && _.isFunction(listenable.getInitialState)) {                               // 186\n            var data = listenable.getInitialState();                                                                   // 187\n            if (data && _.isFunction(data.then)) {                                                                     // 188\n                data.then(function () {                                                                                // 189\n                    defaultCallback.apply(me, arguments);                                                              // 190\n                });                                                                                                    // 191\n            } else {                                                                                                   // 192\n                defaultCallback.call(this, data);                                                                      // 193\n            }                                                                                                          // 194\n        }                                                                                                              // 195\n    },                                                                                                                 // 196\n                                                                                                                       // 197\n    /**                                                                                                                // 198\n     * The callback will be called once all listenables have triggered at least once.                                  // 199\n     * It will be invoked with the last emission from each listenable.                                                 // 200\n     * @param {...Publishers} publishers Publishers that should be tracked.                                            // 201\n     * @param {Function|String} callback The method to call when all publishers have emitted                           // 202\n     * @returns {Object} A subscription obj where `stop` is an unsub function and `listenable` is an array of listenables\n     */                                                                                                                // 204\n    joinTrailing: maker(\"last\"),                                                                                       // 205\n                                                                                                                       // 206\n    /**                                                                                                                // 207\n     * The callback will be called once all listenables have triggered at least once.                                  // 208\n     * It will be invoked with the first emission from each listenable.                                                // 209\n     * @param {...Publishers} publishers Publishers that should be tracked.                                            // 210\n     * @param {Function|String} callback The method to call when all publishers have emitted                           // 211\n     * @returns {Object} A subscription obj where `stop` is an unsub function and `listenable` is an array of listenables\n     */                                                                                                                // 213\n    joinLeading: maker(\"first\"),                                                                                       // 214\n                                                                                                                       // 215\n    /**                                                                                                                // 216\n     * The callback will be called once all listenables have triggered at least once.                                  // 217\n     * It will be invoked with all emission from each listenable.                                                      // 218\n     * @param {...Publishers} publishers Publishers that should be tracked.                                            // 219\n     * @param {Function|String} callback The method to call when all publishers have emitted                           // 220\n     * @returns {Object} A subscription obj where `stop` is an unsub function and `listenable` is an array of listenables\n     */                                                                                                                // 222\n    joinConcat: maker(\"all\"),                                                                                          // 223\n                                                                                                                       // 224\n    /**                                                                                                                // 225\n     * The callback will be called once all listenables have triggered.                                                // 226\n     * If a callback triggers twice before that happens, an error is thrown.                                           // 227\n     * @param {...Publishers} publishers Publishers that should be tracked.                                            // 228\n     * @param {Function|String} callback The method to call when all publishers have emitted                           // 229\n     * @returns {Object} A subscription obj where `stop` is an unsub function and `listenable` is an array of listenables\n     */                                                                                                                // 231\n    joinStrict: maker(\"strict\")                                                                                        // 232\n};                                                                                                                     // 233\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"utils.js\":[\"eventemitter3\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/reflux/node_modules/reflux-core/lib/utils.js                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n\"use strict\";                                                                                                          // 1\n                                                                                                                       // 2\nObject.defineProperty(exports, \"__esModule\", {                                                                         // 3\n    value: true                                                                                                        // 4\n});                                                                                                                    // 5\nexports.capitalize = capitalize;                                                                                       // 6\nexports.callbackName = callbackName;                                                                                   // 7\nexports.isObject = isObject;                                                                                           // 8\nexports.extend = extend;                                                                                               // 9\nexports.isFunction = isFunction;                                                                                       // 10\nexports.object = object;                                                                                               // 11\nexports.isArguments = isArguments;                                                                                     // 12\nexports.throwIf = throwIf;                                                                                             // 13\n                                                                                                                       // 14\nfunction capitalize(string) {                                                                                          // 15\n    return string.charAt(0).toUpperCase() + string.slice(1);                                                           // 16\n}                                                                                                                      // 17\n                                                                                                                       // 18\nfunction callbackName(string, prefix) {                                                                                // 19\n    prefix = prefix || \"on\";                                                                                           // 20\n    return prefix + exports.capitalize(string);                                                                        // 21\n}                                                                                                                      // 22\n                                                                                                                       // 23\n/*                                                                                                                     // 24\n * isObject, extend, isFunction, isArguments are taken from undescore/lodash in                                        // 25\n * order to remove the dependency                                                                                      // 26\n */                                                                                                                    // 27\n                                                                                                                       // 28\nfunction isObject(obj) {                                                                                               // 29\n    var type = typeof obj;                                                                                             // 30\n    return type === \"function\" || type === \"object\" && !!obj;                                                          // 31\n}                                                                                                                      // 32\n                                                                                                                       // 33\nfunction extend(obj) {                                                                                                 // 34\n    if (!isObject(obj)) {                                                                                              // 35\n        return obj;                                                                                                    // 36\n    }                                                                                                                  // 37\n    var source, prop;                                                                                                  // 38\n    for (var i = 1, length = arguments.length; i < length; i++) {                                                      // 39\n        source = arguments[i];                                                                                         // 40\n        for (prop in source) {                                                                                         // 41\n            if (Object.getOwnPropertyDescriptor && Object.defineProperty) {                                            // 42\n                var propertyDescriptor = Object.getOwnPropertyDescriptor(source, prop);                                // 43\n                Object.defineProperty(obj, prop, propertyDescriptor);                                                  // 44\n            } else {                                                                                                   // 45\n                obj[prop] = source[prop];                                                                              // 46\n            }                                                                                                          // 47\n        }                                                                                                              // 48\n    }                                                                                                                  // 49\n    return obj;                                                                                                        // 50\n}                                                                                                                      // 51\n                                                                                                                       // 52\nfunction isFunction(value) {                                                                                           // 53\n    return typeof value === \"function\";                                                                                // 54\n}                                                                                                                      // 55\n                                                                                                                       // 56\nexports.EventEmitter = require(\"eventemitter3\");                                                                       // 57\n                                                                                                                       // 58\nexports.nextTick = function (callback) {                                                                               // 59\n    setTimeout(callback, 0);                                                                                           // 60\n};                                                                                                                     // 61\n                                                                                                                       // 62\nfunction object(keys, vals) {                                                                                          // 63\n    var o = {},                                                                                                        // 64\n        i = 0;                                                                                                         // 65\n    for (; i < keys.length; i++) {                                                                                     // 66\n        o[keys[i]] = vals[i];                                                                                          // 67\n    }                                                                                                                  // 68\n    return o;                                                                                                          // 69\n}                                                                                                                      // 70\n                                                                                                                       // 71\nfunction isArguments(value) {                                                                                          // 72\n    return typeof value === \"object\" && \"callee\" in value && typeof value.length === \"number\";                         // 73\n}                                                                                                                      // 74\n                                                                                                                       // 75\nfunction throwIf(val, msg) {                                                                                           // 76\n    if (val) {                                                                                                         // 77\n        throw Error(msg || val);                                                                                       // 78\n    }                                                                                                                  // 79\n}                                                                                                                      // 80\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"joins.js\":[\"./createStore\",\"./utils\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/reflux/node_modules/reflux-core/lib/joins.js                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Internal module used to create static and instance join methods                                                     // 2\n */                                                                                                                    // 3\n                                                                                                                       // 4\n\"use strict\";                                                                                                          // 5\n                                                                                                                       // 6\nvar createStore = require(\"./createStore\"),                                                                            // 7\n    _ = require(\"./utils\");                                                                                            // 8\n                                                                                                                       // 9\nvar slice = Array.prototype.slice,                                                                                     // 10\n    strategyMethodNames = {                                                                                            // 11\n    strict: \"joinStrict\",                                                                                              // 12\n    first: \"joinLeading\",                                                                                              // 13\n    last: \"joinTrailing\",                                                                                              // 14\n    all: \"joinConcat\"                                                                                                  // 15\n};                                                                                                                     // 16\n                                                                                                                       // 17\n/**                                                                                                                    // 18\n * Used in `index.js` to create the static join methods                                                                // 19\n * @param {String} strategy Which strategy to use when tracking listenable trigger arguments                           // 20\n * @returns {Function} A static function which returns a store with a join listen on the given listenables using the given strategy\n */                                                                                                                    // 22\nexports.staticJoinCreator = function (strategy) {                                                                      // 23\n    return function () /* listenables... */{                                                                           // 24\n        var listenables = slice.call(arguments);                                                                       // 25\n        return createStore({                                                                                           // 26\n            init: function init() {                                                                                    // 27\n                this[strategyMethodNames[strategy]].apply(this, listenables.concat(\"triggerAsync\"));                   // 28\n            }                                                                                                          // 29\n        });                                                                                                            // 30\n    };                                                                                                                 // 31\n};                                                                                                                     // 32\n                                                                                                                       // 33\n/**                                                                                                                    // 34\n * Used in `ListenerMethods.js` to create the instance join methods                                                    // 35\n * @param {String} strategy Which strategy to use when tracking listenable trigger arguments                           // 36\n * @returns {Function} An instance method which sets up a join listen on the given listenables using the given strategy\n */                                                                                                                    // 38\nexports.instanceJoinCreator = function (strategy) {                                                                    // 39\n    return function () /* listenables..., callback*/{                                                                  // 40\n        _.throwIf(arguments.length < 2, \"Cannot create a join with less than 2 listenables!\");                         // 41\n        var listenables = slice.call(arguments),                                                                       // 42\n            callback = listenables.pop(),                                                                              // 43\n            numberOfListenables = listenables.length,                                                                  // 44\n            join = {                                                                                                   // 45\n            numberOfListenables: numberOfListenables,                                                                  // 46\n            callback: this[callback] || callback,                                                                      // 47\n            listener: this,                                                                                            // 48\n            strategy: strategy                                                                                         // 49\n        },                                                                                                             // 50\n            i,                                                                                                         // 51\n            cancels = [],                                                                                              // 52\n            subobj;                                                                                                    // 53\n        for (i = 0; i < numberOfListenables; i++) {                                                                    // 54\n            _.throwIf(this.validateListening(listenables[i]));                                                         // 55\n        }                                                                                                              // 56\n        for (i = 0; i < numberOfListenables; i++) {                                                                    // 57\n            cancels.push(listenables[i].listen(newListener(i, join), this));                                           // 58\n        }                                                                                                              // 59\n        reset(join);                                                                                                   // 60\n        subobj = { listenable: listenables };                                                                          // 61\n        subobj.stop = makeStopper(subobj, cancels, this);                                                              // 62\n        this.subscriptions = (this.subscriptions || []).concat(subobj);                                                // 63\n        return subobj;                                                                                                 // 64\n    };                                                                                                                 // 65\n};                                                                                                                     // 66\n                                                                                                                       // 67\n// ---- internal join functions ----                                                                                   // 68\n                                                                                                                       // 69\nfunction makeStopper(subobj, cancels, context) {                                                                       // 70\n    return function () {                                                                                               // 71\n        var i,                                                                                                         // 72\n            subs = context.subscriptions,                                                                              // 73\n            index = subs ? subs.indexOf(subobj) : -1;                                                                  // 74\n        _.throwIf(index === -1, \"Tried to remove join already gone from subscriptions list!\");                         // 75\n        for (i = 0; i < cancels.length; i++) {                                                                         // 76\n            cancels[i]();                                                                                              // 77\n        }                                                                                                              // 78\n        subs.splice(index, 1);                                                                                         // 79\n    };                                                                                                                 // 80\n}                                                                                                                      // 81\n                                                                                                                       // 82\nfunction reset(join) {                                                                                                 // 83\n    join.listenablesEmitted = new Array(join.numberOfListenables);                                                     // 84\n    join.args = new Array(join.numberOfListenables);                                                                   // 85\n}                                                                                                                      // 86\n                                                                                                                       // 87\nfunction newListener(i, join) {                                                                                        // 88\n    return function () {                                                                                               // 89\n        var callargs = slice.call(arguments);                                                                          // 90\n        if (join.listenablesEmitted[i]) {                                                                              // 91\n            switch (join.strategy) {                                                                                   // 92\n                case \"strict\":                                                                                         // 93\n                    throw new Error(\"Strict join failed because listener triggered twice.\");                           // 94\n                case \"last\":                                                                                           // 95\n                    join.args[i] = callargs;break;                                                                     // 96\n                case \"all\":                                                                                            // 97\n                    join.args[i].push(callargs);                                                                       // 98\n            }                                                                                                          // 99\n        } else {                                                                                                       // 100\n            join.listenablesEmitted[i] = true;                                                                         // 101\n            join.args[i] = join.strategy === \"all\" ? [callargs] : callargs;                                            // 102\n        }                                                                                                              // 103\n        emitIfAllListenablesEmitted(join);                                                                             // 104\n    };                                                                                                                 // 105\n}                                                                                                                      // 106\n                                                                                                                       // 107\nfunction emitIfAllListenablesEmitted(join) {                                                                           // 108\n    for (var i = 0; i < join.numberOfListenables; i++) {                                                               // 109\n        if (!join.listenablesEmitted[i]) {                                                                             // 110\n            return;                                                                                                    // 111\n        }                                                                                                              // 112\n    }                                                                                                                  // 113\n    join.callback.apply(join.listener, join.args);                                                                     // 114\n    reset(join);                                                                                                       // 115\n}                                                                                                                      // 116\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"createStore.js\":[\"./utils\",\"./Keep\",\"./mixer\",\"./bindMethods\",\"./StoreMethods\",\"./PublisherMethods\",\"./ListenerMethods\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/reflux/node_modules/reflux-core/lib/createStore.js                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n\"use strict\";                                                                                                          // 1\n                                                                                                                       // 2\nvar _ = require(\"./utils\"),                                                                                            // 3\n    Keep = require(\"./Keep\"),                                                                                          // 4\n    mixer = require(\"./mixer\"),                                                                                        // 5\n    bindMethods = require(\"./bindMethods\");                                                                            // 6\n                                                                                                                       // 7\nvar allowed = { preEmit: 1, shouldEmit: 1 };                                                                           // 8\n                                                                                                                       // 9\n/**                                                                                                                    // 10\n * Creates an event emitting Data Store. It is mixed in with functions                                                 // 11\n * from the `ListenerMethods` and `PublisherMethods` mixins. `preEmit`                                                 // 12\n * and `shouldEmit` may be overridden in the definition object.                                                        // 13\n *                                                                                                                     // 14\n * @param {Object} definition The data store object definition                                                         // 15\n * @returns {Store} A data store instance                                                                              // 16\n */                                                                                                                    // 17\nmodule.exports = function (definition) {                                                                               // 18\n                                                                                                                       // 19\n    var StoreMethods = require(\"./StoreMethods\"),                                                                      // 20\n        PublisherMethods = require(\"./PublisherMethods\"),                                                              // 21\n        ListenerMethods = require(\"./ListenerMethods\");                                                                // 22\n                                                                                                                       // 23\n    definition = definition || {};                                                                                     // 24\n                                                                                                                       // 25\n    for (var a in StoreMethods) {                                                                                      // 26\n        if (!allowed[a] && (PublisherMethods[a] || ListenerMethods[a])) {                                              // 27\n            throw new Error(\"Cannot override API method \" + a + \" in Reflux.StoreMethods. Use another method name or override it on Reflux.PublisherMethods / Reflux.ListenerMethods instead.\");\n        }                                                                                                              // 29\n    }                                                                                                                  // 30\n                                                                                                                       // 31\n    for (var d in definition) {                                                                                        // 32\n        if (!allowed[d] && (PublisherMethods[d] || ListenerMethods[d])) {                                              // 33\n            throw new Error(\"Cannot override API method \" + d + \" in store creation. Use another method name or override it on Reflux.PublisherMethods / Reflux.ListenerMethods instead.\");\n        }                                                                                                              // 35\n    }                                                                                                                  // 36\n                                                                                                                       // 37\n    definition = mixer(definition);                                                                                    // 38\n                                                                                                                       // 39\n    function Store() {                                                                                                 // 40\n        var i = 0,                                                                                                     // 41\n            arr;                                                                                                       // 42\n        this.subscriptions = [];                                                                                       // 43\n        this.emitter = new _.EventEmitter();                                                                           // 44\n        this.eventLabel = \"change\";                                                                                    // 45\n        bindMethods(this, definition);                                                                                 // 46\n        if (this.init && _.isFunction(this.init)) {                                                                    // 47\n            this.init();                                                                                               // 48\n        }                                                                                                              // 49\n        if (this.listenables) {                                                                                        // 50\n            arr = [].concat(this.listenables);                                                                         // 51\n            for (; i < arr.length; i++) {                                                                              // 52\n                this.listenToMany(arr[i]);                                                                             // 53\n            }                                                                                                          // 54\n        }                                                                                                              // 55\n    }                                                                                                                  // 56\n                                                                                                                       // 57\n    _.extend(Store.prototype, ListenerMethods, PublisherMethods, StoreMethods, definition);                            // 58\n                                                                                                                       // 59\n    var store = new Store();                                                                                           // 60\n    Keep.createdStores.push(store);                                                                                    // 61\n                                                                                                                       // 62\n    return store;                                                                                                      // 63\n};                                                                                                                     // 64\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"Keep.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/reflux/node_modules/reflux-core/lib/Keep.js                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n\"use strict\";                                                                                                          // 1\n                                                                                                                       // 2\nexports.createdStores = [];                                                                                            // 3\n                                                                                                                       // 4\nexports.createdActions = [];                                                                                           // 5\n                                                                                                                       // 6\nexports.reset = function () {                                                                                          // 7\n    while (exports.createdStores.length) {                                                                             // 8\n        exports.createdStores.pop();                                                                                   // 9\n    }                                                                                                                  // 10\n    while (exports.createdActions.length) {                                                                            // 11\n        exports.createdActions.pop();                                                                                  // 12\n    }                                                                                                                  // 13\n};                                                                                                                     // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"mixer.js\":[\"./utils\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/reflux/node_modules/reflux-core/lib/mixer.js                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n\"use strict\";                                                                                                          // 1\n                                                                                                                       // 2\nvar _ = require(\"./utils\");                                                                                            // 3\n                                                                                                                       // 4\nmodule.exports = function mix(def) {                                                                                   // 5\n    var composed = {                                                                                                   // 6\n        init: [],                                                                                                      // 7\n        preEmit: [],                                                                                                   // 8\n        shouldEmit: []                                                                                                 // 9\n    };                                                                                                                 // 10\n                                                                                                                       // 11\n    var updated = (function mixDef(mixin) {                                                                            // 12\n        var mixed = {};                                                                                                // 13\n        if (mixin.mixins) {                                                                                            // 14\n            mixin.mixins.forEach(function (subMixin) {                                                                 // 15\n                _.extend(mixed, mixDef(subMixin));                                                                     // 16\n            });                                                                                                        // 17\n        }                                                                                                              // 18\n        _.extend(mixed, mixin);                                                                                        // 19\n        Object.keys(composed).forEach(function (composable) {                                                          // 20\n            if (mixin.hasOwnProperty(composable)) {                                                                    // 21\n                composed[composable].push(mixin[composable]);                                                          // 22\n            }                                                                                                          // 23\n        });                                                                                                            // 24\n        return mixed;                                                                                                  // 25\n    })(def);                                                                                                           // 26\n                                                                                                                       // 27\n    if (composed.init.length > 1) {                                                                                    // 28\n        updated.init = function () {                                                                                   // 29\n            var args = arguments;                                                                                      // 30\n            composed.init.forEach(function (init) {                                                                    // 31\n                init.apply(this, args);                                                                                // 32\n            }, this);                                                                                                  // 33\n        };                                                                                                             // 34\n    }                                                                                                                  // 35\n    if (composed.preEmit.length > 1) {                                                                                 // 36\n        updated.preEmit = function () {                                                                                // 37\n            return composed.preEmit.reduce((function (args, preEmit) {                                                 // 38\n                var newValue = preEmit.apply(this, args);                                                              // 39\n                return newValue === undefined ? args : [newValue];                                                     // 40\n            }).bind(this), arguments);                                                                                 // 41\n        };                                                                                                             // 42\n    }                                                                                                                  // 43\n    if (composed.shouldEmit.length > 1) {                                                                              // 44\n        updated.shouldEmit = function () {                                                                             // 45\n            var args = arguments;                                                                                      // 46\n            return !composed.shouldEmit.some(function (shouldEmit) {                                                   // 47\n                return !shouldEmit.apply(this, args);                                                                  // 48\n            }, this);                                                                                                  // 49\n        };                                                                                                             // 50\n    }                                                                                                                  // 51\n    Object.keys(composed).forEach(function (composable) {                                                              // 52\n        if (composed[composable].length === 1) {                                                                       // 53\n            updated[composable] = composed[composable][0];                                                             // 54\n        }                                                                                                              // 55\n    });                                                                                                                // 56\n                                                                                                                       // 57\n    return updated;                                                                                                    // 58\n};                                                                                                                     // 59\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"bindMethods.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/reflux/node_modules/reflux-core/lib/bindMethods.js                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n\"use strict\";                                                                                                          // 1\n                                                                                                                       // 2\nmodule.exports = function (store, definition) {                                                                        // 3\n    for (var name in definition) {                                                                                     // 4\n        if (Object.getOwnPropertyDescriptor && Object.defineProperty) {                                                // 5\n            var propertyDescriptor = Object.getOwnPropertyDescriptor(definition, name);                                // 6\n                                                                                                                       // 7\n            if (!propertyDescriptor.value || typeof propertyDescriptor.value !== \"function\" || !definition.hasOwnProperty(name)) {\n                continue;                                                                                              // 9\n            }                                                                                                          // 10\n                                                                                                                       // 11\n            store[name] = definition[name].bind(store);                                                                // 12\n        } else {                                                                                                       // 13\n            var property = definition[name];                                                                           // 14\n                                                                                                                       // 15\n            if (typeof property !== \"function\" || !definition.hasOwnProperty(name)) {                                  // 16\n                continue;                                                                                              // 17\n            }                                                                                                          // 18\n                                                                                                                       // 19\n            store[name] = property.bind(store);                                                                        // 20\n        }                                                                                                              // 21\n    }                                                                                                                  // 22\n                                                                                                                       // 23\n    return store;                                                                                                      // 24\n};                                                                                                                     // 25\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"StoreMethods.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/reflux/node_modules/reflux-core/lib/StoreMethods.js                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * A module of methods that you want to include in all stores.                                                         // 2\n * This module is consumed by `createStore`.                                                                           // 3\n */                                                                                                                    // 4\n\"use strict\";                                                                                                          // 5\n                                                                                                                       // 6\nmodule.exports = {};                                                                                                   // 7\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"PublisherMethods.js\":[\"./utils\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/reflux/node_modules/reflux-core/lib/PublisherMethods.js                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n\"use strict\";                                                                                                          // 1\n                                                                                                                       // 2\nvar _ = require(\"./utils\");                                                                                            // 3\n                                                                                                                       // 4\n/**                                                                                                                    // 5\n * A module of methods for object that you want to be able to listen to.                                               // 6\n * This module is consumed by `createStore` and `createAction`                                                         // 7\n */                                                                                                                    // 8\nmodule.exports = {                                                                                                     // 9\n                                                                                                                       // 10\n    /**                                                                                                                // 11\n     * Hook used by the publisher that is invoked before emitting                                                      // 12\n     * and before `shouldEmit`. The arguments are the ones that the action                                             // 13\n     * is invoked with. If this function returns something other than                                                  // 14\n     * undefined, that will be passed on as arguments for shouldEmit and                                               // 15\n     * emission.                                                                                                       // 16\n     */                                                                                                                // 17\n    preEmit: function preEmit() {},                                                                                    // 18\n                                                                                                                       // 19\n    /**                                                                                                                // 20\n     * Hook used by the publisher after `preEmit` to determine if the                                                  // 21\n     * event should be emitted with given arguments. This may be overridden                                            // 22\n     * in your application, default implementation always returns true.                                                // 23\n     *                                                                                                                 // 24\n     * @returns {Boolean} true if event should be emitted                                                              // 25\n     */                                                                                                                // 26\n    shouldEmit: function shouldEmit() {                                                                                // 27\n        return true;                                                                                                   // 28\n    },                                                                                                                 // 29\n                                                                                                                       // 30\n    /**                                                                                                                // 31\n     * Subscribes the given callback for action triggered                                                              // 32\n     *                                                                                                                 // 33\n     * @param {Function} callback The callback to register as event handler                                            // 34\n     * @param {Mixed} [optional] bindContext The context to bind the callback with                                     // 35\n     * @returns {Function} Callback that unsubscribes the registered event handler                                     // 36\n     */                                                                                                                // 37\n    listen: function listen(callback, bindContext) {                                                                   // 38\n        bindContext = bindContext || this;                                                                             // 39\n        var eventHandler = function eventHandler(args) {                                                               // 40\n            if (aborted) {                                                                                             // 41\n                return;                                                                                                // 42\n            }                                                                                                          // 43\n            callback.apply(bindContext, args);                                                                         // 44\n        },                                                                                                             // 45\n            me = this,                                                                                                 // 46\n            aborted = false;                                                                                           // 47\n        this.emitter.addListener(this.eventLabel, eventHandler);                                                       // 48\n        return function () {                                                                                           // 49\n            aborted = true;                                                                                            // 50\n            me.emitter.removeListener(me.eventLabel, eventHandler);                                                    // 51\n        };                                                                                                             // 52\n    },                                                                                                                 // 53\n                                                                                                                       // 54\n    /**                                                                                                                // 55\n     * Publishes an event using `this.emitter` (if `shouldEmit` agrees)                                                // 56\n     */                                                                                                                // 57\n    trigger: function trigger() {                                                                                      // 58\n        var args = arguments,                                                                                          // 59\n            pre = this.preEmit.apply(this, args);                                                                      // 60\n        args = pre === undefined ? args : _.isArguments(pre) ? pre : [].concat(pre);                                   // 61\n        if (this.shouldEmit.apply(this, args)) {                                                                       // 62\n            this.emitter.emit(this.eventLabel, args);                                                                  // 63\n        }                                                                                                              // 64\n    },                                                                                                                 // 65\n                                                                                                                       // 66\n    /**                                                                                                                // 67\n     * Tries to publish the event on the next tick                                                                     // 68\n     */                                                                                                                // 69\n    triggerAsync: function triggerAsync() {                                                                            // 70\n        var args = arguments,                                                                                          // 71\n            me = this;                                                                                                 // 72\n        _.nextTick(function () {                                                                                       // 73\n            me.trigger.apply(me, args);                                                                                // 74\n        });                                                                                                            // 75\n    },                                                                                                                 // 76\n                                                                                                                       // 77\n    /**                                                                                                                // 78\n     * Wraps the trigger mechanism with a deferral function.                                                           // 79\n     *                                                                                                                 // 80\n     * @param {Function} callback the deferral function,                                                               // 81\n     *        first argument is the resolving function and the                                                         // 82\n     *        rest are the arguments provided from the previous                                                        // 83\n     *        trigger invocation                                                                                       // 84\n     */                                                                                                                // 85\n    deferWith: function deferWith(callback) {                                                                          // 86\n        var oldTrigger = this.trigger,                                                                                 // 87\n            ctx = this,                                                                                                // 88\n            resolver = function resolver() {                                                                           // 89\n            oldTrigger.apply(ctx, arguments);                                                                          // 90\n        };                                                                                                             // 91\n        this.trigger = function () {                                                                                   // 92\n            callback.apply(ctx, [resolver].concat([].splice.call(arguments, 0)));                                      // 93\n        };                                                                                                             // 94\n    }                                                                                                                  // 95\n                                                                                                                       // 96\n};                                                                                                                     // 97\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"createAction.js\":[\"./utils\",\"./ActionMethods\",\"./PublisherMethods\",\"./Keep\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/reflux/node_modules/reflux-core/lib/createAction.js                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n\"use strict\";                                                                                                          // 1\n                                                                                                                       // 2\nvar _ = require(\"./utils\"),                                                                                            // 3\n    ActionMethods = require(\"./ActionMethods\"),                                                                        // 4\n    PublisherMethods = require(\"./PublisherMethods\"),                                                                  // 5\n    Keep = require(\"./Keep\");                                                                                          // 6\n                                                                                                                       // 7\nvar allowed = { preEmit: 1, shouldEmit: 1 };                                                                           // 8\n                                                                                                                       // 9\n/**                                                                                                                    // 10\n * Creates an action functor object. It is mixed in with functions                                                     // 11\n * from the `PublisherMethods` mixin. `preEmit` and `shouldEmit` may                                                   // 12\n * be overridden in the definition object.                                                                             // 13\n *                                                                                                                     // 14\n * @param {Object} definition The action object definition                                                             // 15\n */                                                                                                                    // 16\nvar createAction = function createAction(definition) {                                                                 // 17\n                                                                                                                       // 18\n    definition = definition || {};                                                                                     // 19\n    if (!_.isObject(definition)) {                                                                                     // 20\n        definition = { actionName: definition };                                                                       // 21\n    }                                                                                                                  // 22\n                                                                                                                       // 23\n    for (var a in ActionMethods) {                                                                                     // 24\n        if (!allowed[a] && PublisherMethods[a]) {                                                                      // 25\n            throw new Error(\"Cannot override API method \" + a + \" in Reflux.ActionMethods. Use another method name or override it on Reflux.PublisherMethods instead.\");\n        }                                                                                                              // 27\n    }                                                                                                                  // 28\n                                                                                                                       // 29\n    for (var d in definition) {                                                                                        // 30\n        if (!allowed[d] && PublisherMethods[d]) {                                                                      // 31\n            throw new Error(\"Cannot override API method \" + d + \" in action creation. Use another method name or override it on Reflux.PublisherMethods instead.\");\n        }                                                                                                              // 33\n    }                                                                                                                  // 34\n                                                                                                                       // 35\n    definition.children = definition.children || [];                                                                   // 36\n    if (definition.asyncResult) {                                                                                      // 37\n        definition.children = definition.children.concat([\"completed\", \"failed\"]);                                     // 38\n    }                                                                                                                  // 39\n                                                                                                                       // 40\n    var i = 0,                                                                                                         // 41\n        childActions = {};                                                                                             // 42\n    for (; i < definition.children.length; i++) {                                                                      // 43\n        var name = definition.children[i];                                                                             // 44\n        childActions[name] = createAction(name);                                                                       // 45\n    }                                                                                                                  // 46\n                                                                                                                       // 47\n    var context = _.extend({                                                                                           // 48\n        eventLabel: \"action\",                                                                                          // 49\n        emitter: new _.EventEmitter(),                                                                                 // 50\n        _isAction: true                                                                                                // 51\n    }, PublisherMethods, ActionMethods, definition);                                                                   // 52\n                                                                                                                       // 53\n    var functor = function functor() {                                                                                 // 54\n        var triggerType = functor.sync ? \"trigger\" : \"triggerAsync\";                                                   // 55\n        return functor[triggerType].apply(functor, arguments);                                                         // 56\n    };                                                                                                                 // 57\n                                                                                                                       // 58\n    _.extend(functor, childActions, context);                                                                          // 59\n                                                                                                                       // 60\n    Keep.createdActions.push(functor);                                                                                 // 61\n                                                                                                                       // 62\n    return functor;                                                                                                    // 63\n};                                                                                                                     // 64\n                                                                                                                       // 65\nmodule.exports = createAction;                                                                                         // 66\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]}},\"eventemitter3\":{\"package.json\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/reflux/node_modules/eventemitter3/package.json                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"eventemitter3\";                                                                                        // 1\nexports.main = \"index.js\";                                                                                             // 2\n                                                                                                                       // 3\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/reflux/node_modules/eventemitter3/index.js                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n'use strict';                                                                                                          // 1\n                                                                                                                       // 2\n//                                                                                                                     // 3\n// We store our EE objects in a plain object whose properties are event names.                                         // 4\n// If `Object.create(null)` is not supported we prefix the event names with a                                          // 5\n// `~` to make sure that the built-in object properties are not overridden or                                          // 6\n// used as an attack vector.                                                                                           // 7\n// We also assume that `Object.create(null)` is available when the event name                                          // 8\n// is an ES6 Symbol.                                                                                                   // 9\n//                                                                                                                     // 10\nvar prefix = typeof Object.create !== 'function' ? '~' : false;                                                        // 11\n                                                                                                                       // 12\n/**                                                                                                                    // 13\n * Representation of a single EventEmitter function.                                                                   // 14\n *                                                                                                                     // 15\n * @param {Function} fn Event handler to be called.                                                                    // 16\n * @param {Mixed} context Context for function execution.                                                              // 17\n * @param {Boolean} once Only emit once                                                                                // 18\n * @api private                                                                                                        // 19\n */                                                                                                                    // 20\nfunction EE(fn, context, once) {                                                                                       // 21\n  this.fn = fn;                                                                                                        // 22\n  this.context = context;                                                                                              // 23\n  this.once = once || false;                                                                                           // 24\n}                                                                                                                      // 25\n                                                                                                                       // 26\n/**                                                                                                                    // 27\n * Minimal EventEmitter interface that is molded against the Node.js                                                   // 28\n * EventEmitter interface.                                                                                             // 29\n *                                                                                                                     // 30\n * @constructor                                                                                                        // 31\n * @api public                                                                                                         // 32\n */                                                                                                                    // 33\nfunction EventEmitter() { /* Nothing to set */ }                                                                       // 34\n                                                                                                                       // 35\n/**                                                                                                                    // 36\n * Holds the assigned EventEmitters by name.                                                                           // 37\n *                                                                                                                     // 38\n * @type {Object}                                                                                                      // 39\n * @private                                                                                                            // 40\n */                                                                                                                    // 41\nEventEmitter.prototype._events = undefined;                                                                            // 42\n                                                                                                                       // 43\n/**                                                                                                                    // 44\n * Return a list of assigned event listeners.                                                                          // 45\n *                                                                                                                     // 46\n * @param {String} event The events that should be listed.                                                             // 47\n * @param {Boolean} exists We only need to know if there are listeners.                                                // 48\n * @returns {Array|Boolean}                                                                                            // 49\n * @api public                                                                                                         // 50\n */                                                                                                                    // 51\nEventEmitter.prototype.listeners = function listeners(event, exists) {                                                 // 52\n  var evt = prefix ? prefix + event : event                                                                            // 53\n    , available = this._events && this._events[evt];                                                                   // 54\n                                                                                                                       // 55\n  if (exists) return !!available;                                                                                      // 56\n  if (!available) return [];                                                                                           // 57\n  if (available.fn) return [available.fn];                                                                             // 58\n                                                                                                                       // 59\n  for (var i = 0, l = available.length, ee = new Array(l); i < l; i++) {                                               // 60\n    ee[i] = available[i].fn;                                                                                           // 61\n  }                                                                                                                    // 62\n                                                                                                                       // 63\n  return ee;                                                                                                           // 64\n};                                                                                                                     // 65\n                                                                                                                       // 66\n/**                                                                                                                    // 67\n * Emit an event to all registered event listeners.                                                                    // 68\n *                                                                                                                     // 69\n * @param {String} event The name of the event.                                                                        // 70\n * @returns {Boolean} Indication if we've emitted an event.                                                            // 71\n * @api public                                                                                                         // 72\n */                                                                                                                    // 73\nEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {                                               // 74\n  var evt = prefix ? prefix + event : event;                                                                           // 75\n                                                                                                                       // 76\n  if (!this._events || !this._events[evt]) return false;                                                               // 77\n                                                                                                                       // 78\n  var listeners = this._events[evt]                                                                                    // 79\n    , len = arguments.length                                                                                           // 80\n    , args                                                                                                             // 81\n    , i;                                                                                                               // 82\n                                                                                                                       // 83\n  if ('function' === typeof listeners.fn) {                                                                            // 84\n    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);                                     // 85\n                                                                                                                       // 86\n    switch (len) {                                                                                                     // 87\n      case 1: return listeners.fn.call(listeners.context), true;                                                       // 88\n      case 2: return listeners.fn.call(listeners.context, a1), true;                                                   // 89\n      case 3: return listeners.fn.call(listeners.context, a1, a2), true;                                               // 90\n      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;                                           // 91\n      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;                                       // 92\n      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;                                   // 93\n    }                                                                                                                  // 94\n                                                                                                                       // 95\n    for (i = 1, args = new Array(len -1); i < len; i++) {                                                              // 96\n      args[i - 1] = arguments[i];                                                                                      // 97\n    }                                                                                                                  // 98\n                                                                                                                       // 99\n    listeners.fn.apply(listeners.context, args);                                                                       // 100\n  } else {                                                                                                             // 101\n    var length = listeners.length                                                                                      // 102\n      , j;                                                                                                             // 103\n                                                                                                                       // 104\n    for (i = 0; i < length; i++) {                                                                                     // 105\n      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);                             // 106\n                                                                                                                       // 107\n      switch (len) {                                                                                                   // 108\n        case 1: listeners[i].fn.call(listeners[i].context); break;                                                     // 109\n        case 2: listeners[i].fn.call(listeners[i].context, a1); break;                                                 // 110\n        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;                                             // 111\n        default:                                                                                                       // 112\n          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {                                             // 113\n            args[j - 1] = arguments[j];                                                                                // 114\n          }                                                                                                            // 115\n                                                                                                                       // 116\n          listeners[i].fn.apply(listeners[i].context, args);                                                           // 117\n      }                                                                                                                // 118\n    }                                                                                                                  // 119\n  }                                                                                                                    // 120\n                                                                                                                       // 121\n  return true;                                                                                                         // 122\n};                                                                                                                     // 123\n                                                                                                                       // 124\n/**                                                                                                                    // 125\n * Register a new EventListener for the given event.                                                                   // 126\n *                                                                                                                     // 127\n * @param {String} event Name of the event.                                                                            // 128\n * @param {Functon} fn Callback function.                                                                              // 129\n * @param {Mixed} context The context of the function.                                                                 // 130\n * @api public                                                                                                         // 131\n */                                                                                                                    // 132\nEventEmitter.prototype.on = function on(event, fn, context) {                                                          // 133\n  var listener = new EE(fn, context || this)                                                                           // 134\n    , evt = prefix ? prefix + event : event;                                                                           // 135\n                                                                                                                       // 136\n  if (!this._events) this._events = prefix ? {} : Object.create(null);                                                 // 137\n  if (!this._events[evt]) this._events[evt] = listener;                                                                // 138\n  else {                                                                                                               // 139\n    if (!this._events[evt].fn) this._events[evt].push(listener);                                                       // 140\n    else this._events[evt] = [                                                                                         // 141\n      this._events[evt], listener                                                                                      // 142\n    ];                                                                                                                 // 143\n  }                                                                                                                    // 144\n                                                                                                                       // 145\n  return this;                                                                                                         // 146\n};                                                                                                                     // 147\n                                                                                                                       // 148\n/**                                                                                                                    // 149\n * Add an EventListener that's only called once.                                                                       // 150\n *                                                                                                                     // 151\n * @param {String} event Name of the event.                                                                            // 152\n * @param {Function} fn Callback function.                                                                             // 153\n * @param {Mixed} context The context of the function.                                                                 // 154\n * @api public                                                                                                         // 155\n */                                                                                                                    // 156\nEventEmitter.prototype.once = function once(event, fn, context) {                                                      // 157\n  var listener = new EE(fn, context || this, true)                                                                     // 158\n    , evt = prefix ? prefix + event : event;                                                                           // 159\n                                                                                                                       // 160\n  if (!this._events) this._events = prefix ? {} : Object.create(null);                                                 // 161\n  if (!this._events[evt]) this._events[evt] = listener;                                                                // 162\n  else {                                                                                                               // 163\n    if (!this._events[evt].fn) this._events[evt].push(listener);                                                       // 164\n    else this._events[evt] = [                                                                                         // 165\n      this._events[evt], listener                                                                                      // 166\n    ];                                                                                                                 // 167\n  }                                                                                                                    // 168\n                                                                                                                       // 169\n  return this;                                                                                                         // 170\n};                                                                                                                     // 171\n                                                                                                                       // 172\n/**                                                                                                                    // 173\n * Remove event listeners.                                                                                             // 174\n *                                                                                                                     // 175\n * @param {String} event The event we want to remove.                                                                  // 176\n * @param {Function} fn The listener that we need to find.                                                             // 177\n * @param {Mixed} context Only remove listeners matching this context.                                                 // 178\n * @param {Boolean} once Only remove once listeners.                                                                   // 179\n * @api public                                                                                                         // 180\n */                                                                                                                    // 181\nEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {                            // 182\n  var evt = prefix ? prefix + event : event;                                                                           // 183\n                                                                                                                       // 184\n  if (!this._events || !this._events[evt]) return this;                                                                // 185\n                                                                                                                       // 186\n  var listeners = this._events[evt]                                                                                    // 187\n    , events = [];                                                                                                     // 188\n                                                                                                                       // 189\n  if (fn) {                                                                                                            // 190\n    if (listeners.fn) {                                                                                                // 191\n      if (                                                                                                             // 192\n           listeners.fn !== fn                                                                                         // 193\n        || (once && !listeners.once)                                                                                   // 194\n        || (context && listeners.context !== context)                                                                  // 195\n      ) {                                                                                                              // 196\n        events.push(listeners);                                                                                        // 197\n      }                                                                                                                // 198\n    } else {                                                                                                           // 199\n      for (var i = 0, length = listeners.length; i < length; i++) {                                                    // 200\n        if (                                                                                                           // 201\n             listeners[i].fn !== fn                                                                                    // 202\n          || (once && !listeners[i].once)                                                                              // 203\n          || (context && listeners[i].context !== context)                                                             // 204\n        ) {                                                                                                            // 205\n          events.push(listeners[i]);                                                                                   // 206\n        }                                                                                                              // 207\n      }                                                                                                                // 208\n    }                                                                                                                  // 209\n  }                                                                                                                    // 210\n                                                                                                                       // 211\n  //                                                                                                                   // 212\n  // Reset the array, or remove it completely if we have no more listeners.                                            // 213\n  //                                                                                                                   // 214\n  if (events.length) {                                                                                                 // 215\n    this._events[evt] = events.length === 1 ? events[0] : events;                                                      // 216\n  } else {                                                                                                             // 217\n    delete this._events[evt];                                                                                          // 218\n  }                                                                                                                    // 219\n                                                                                                                       // 220\n  return this;                                                                                                         // 221\n};                                                                                                                     // 222\n                                                                                                                       // 223\n/**                                                                                                                    // 224\n * Remove all listeners or only the listeners for the specified event.                                                 // 225\n *                                                                                                                     // 226\n * @param {String} event The event want to remove all listeners for.                                                   // 227\n * @api public                                                                                                         // 228\n */                                                                                                                    // 229\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {                                       // 230\n  if (!this._events) return this;                                                                                      // 231\n                                                                                                                       // 232\n  if (event) delete this._events[prefix ? prefix + event : event];                                                     // 233\n  else this._events = prefix ? {} : Object.create(null);                                                               // 234\n                                                                                                                       // 235\n  return this;                                                                                                         // 236\n};                                                                                                                     // 237\n                                                                                                                       // 238\n//                                                                                                                     // 239\n// Alias methods names because people roll like that.                                                                  // 240\n//                                                                                                                     // 241\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;                                                    // 242\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;                                                        // 243\n                                                                                                                       // 244\n//                                                                                                                     // 245\n// This function doesn't apply anymore.                                                                                // 246\n//                                                                                                                     // 247\nEventEmitter.prototype.setMaxListeners = function setMaxListeners() {                                                  // 248\n  return this;                                                                                                         // 249\n};                                                                                                                     // 250\n                                                                                                                       // 251\n//                                                                                                                     // 252\n// Expose the prefix.                                                                                                  // 253\n//                                                                                                                     // 254\nEventEmitter.prefixed = prefix;                                                                                        // 255\n                                                                                                                       // 256\n//                                                                                                                     // 257\n// Expose the module.                                                                                                  // 258\n//                                                                                                                     // 259\nif ('undefined' !== typeof module) {                                                                                   // 260\n  module.exports = EventEmitter;                                                                                       // 261\n}                                                                                                                      // 262\n                                                                                                                       // 263\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}},\"underscore\":{\"package.json\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/underscore/package.json                                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"underscore\";                                                                                           // 1\nexports.main = \"underscore.js\";                                                                                        // 2\n                                                                                                                       // 3\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"underscore.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/underscore/underscore.js                                                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n//     Underscore.js 1.8.3                                                                                             // 1\n//     http://underscorejs.org                                                                                         // 2\n//     (c) 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors                              // 3\n//     Underscore may be freely distributed under the MIT license.                                                     // 4\n                                                                                                                       // 5\n(function() {                                                                                                          // 6\n                                                                                                                       // 7\n  // Baseline setup                                                                                                    // 8\n  // --------------                                                                                                    // 9\n                                                                                                                       // 10\n  // Establish the root object, `window` in the browser, or `exports` on the server.                                   // 11\n  var root = this;                                                                                                     // 12\n                                                                                                                       // 13\n  // Save the previous value of the `_` variable.                                                                      // 14\n  var previousUnderscore = root._;                                                                                     // 15\n                                                                                                                       // 16\n  // Save bytes in the minified (but not gzipped) version:                                                             // 17\n  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;                       // 18\n                                                                                                                       // 19\n  // Create quick reference variables for speed access to core prototypes.                                             // 20\n  var                                                                                                                  // 21\n    push             = ArrayProto.push,                                                                                // 22\n    slice            = ArrayProto.slice,                                                                               // 23\n    toString         = ObjProto.toString,                                                                              // 24\n    hasOwnProperty   = ObjProto.hasOwnProperty;                                                                        // 25\n                                                                                                                       // 26\n  // All **ECMAScript 5** native function implementations that we hope to use                                          // 27\n  // are declared here.                                                                                                // 28\n  var                                                                                                                  // 29\n    nativeIsArray      = Array.isArray,                                                                                // 30\n    nativeKeys         = Object.keys,                                                                                  // 31\n    nativeBind         = FuncProto.bind,                                                                               // 32\n    nativeCreate       = Object.create;                                                                                // 33\n                                                                                                                       // 34\n  // Naked function reference for surrogate-prototype-swapping.                                                        // 35\n  var Ctor = function(){};                                                                                             // 36\n                                                                                                                       // 37\n  // Create a safe reference to the Underscore object for use below.                                                   // 38\n  var _ = function(obj) {                                                                                              // 39\n    if (obj instanceof _) return obj;                                                                                  // 40\n    if (!(this instanceof _)) return new _(obj);                                                                       // 41\n    this._wrapped = obj;                                                                                               // 42\n  };                                                                                                                   // 43\n                                                                                                                       // 44\n  // Export the Underscore object for **Node.js**, with                                                                // 45\n  // backwards-compatibility for the old `require()` API. If we're in                                                  // 46\n  // the browser, add `_` as a global object.                                                                          // 47\n  if (typeof exports !== 'undefined') {                                                                                // 48\n    if (typeof module !== 'undefined' && module.exports) {                                                             // 49\n      exports = module.exports = _;                                                                                    // 50\n    }                                                                                                                  // 51\n    exports._ = _;                                                                                                     // 52\n  } else {                                                                                                             // 53\n    root._ = _;                                                                                                        // 54\n  }                                                                                                                    // 55\n                                                                                                                       // 56\n  // Current version.                                                                                                  // 57\n  _.VERSION = '1.8.3';                                                                                                 // 58\n                                                                                                                       // 59\n  // Internal function that returns an efficient (for current engines) version                                         // 60\n  // of the passed-in callback, to be repeatedly applied in other Underscore                                           // 61\n  // functions.                                                                                                        // 62\n  var optimizeCb = function(func, context, argCount) {                                                                 // 63\n    if (context === void 0) return func;                                                                               // 64\n    switch (argCount == null ? 3 : argCount) {                                                                         // 65\n      case 1: return function(value) {                                                                                 // 66\n        return func.call(context, value);                                                                              // 67\n      };                                                                                                               // 68\n      case 2: return function(value, other) {                                                                          // 69\n        return func.call(context, value, other);                                                                       // 70\n      };                                                                                                               // 71\n      case 3: return function(value, index, collection) {                                                              // 72\n        return func.call(context, value, index, collection);                                                           // 73\n      };                                                                                                               // 74\n      case 4: return function(accumulator, value, index, collection) {                                                 // 75\n        return func.call(context, accumulator, value, index, collection);                                              // 76\n      };                                                                                                               // 77\n    }                                                                                                                  // 78\n    return function() {                                                                                                // 79\n      return func.apply(context, arguments);                                                                           // 80\n    };                                                                                                                 // 81\n  };                                                                                                                   // 82\n                                                                                                                       // 83\n  // A mostly-internal function to generate callbacks that can be applied                                              // 84\n  // to each element in a collection, returning the desired result — either                                            // 85\n  // identity, an arbitrary callback, a property matcher, or a property accessor.                                      // 86\n  var cb = function(value, context, argCount) {                                                                        // 87\n    if (value == null) return _.identity;                                                                              // 88\n    if (_.isFunction(value)) return optimizeCb(value, context, argCount);                                              // 89\n    if (_.isObject(value)) return _.matcher(value);                                                                    // 90\n    return _.property(value);                                                                                          // 91\n  };                                                                                                                   // 92\n  _.iteratee = function(value, context) {                                                                              // 93\n    return cb(value, context, Infinity);                                                                               // 94\n  };                                                                                                                   // 95\n                                                                                                                       // 96\n  // An internal function for creating assigner functions.                                                             // 97\n  var createAssigner = function(keysFunc, undefinedOnly) {                                                             // 98\n    return function(obj) {                                                                                             // 99\n      var length = arguments.length;                                                                                   // 100\n      if (length < 2 || obj == null) return obj;                                                                       // 101\n      for (var index = 1; index < length; index++) {                                                                   // 102\n        var source = arguments[index],                                                                                 // 103\n            keys = keysFunc(source),                                                                                   // 104\n            l = keys.length;                                                                                           // 105\n        for (var i = 0; i < l; i++) {                                                                                  // 106\n          var key = keys[i];                                                                                           // 107\n          if (!undefinedOnly || obj[key] === void 0) obj[key] = source[key];                                           // 108\n        }                                                                                                              // 109\n      }                                                                                                                // 110\n      return obj;                                                                                                      // 111\n    };                                                                                                                 // 112\n  };                                                                                                                   // 113\n                                                                                                                       // 114\n  // An internal function for creating a new object that inherits from another.                                        // 115\n  var baseCreate = function(prototype) {                                                                               // 116\n    if (!_.isObject(prototype)) return {};                                                                             // 117\n    if (nativeCreate) return nativeCreate(prototype);                                                                  // 118\n    Ctor.prototype = prototype;                                                                                        // 119\n    var result = new Ctor;                                                                                             // 120\n    Ctor.prototype = null;                                                                                             // 121\n    return result;                                                                                                     // 122\n  };                                                                                                                   // 123\n                                                                                                                       // 124\n  var property = function(key) {                                                                                       // 125\n    return function(obj) {                                                                                             // 126\n      return obj == null ? void 0 : obj[key];                                                                          // 127\n    };                                                                                                                 // 128\n  };                                                                                                                   // 129\n                                                                                                                       // 130\n  // Helper for collection methods to determine whether a collection                                                   // 131\n  // should be iterated as an array or as an object                                                                    // 132\n  // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength                                        // 133\n  // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094                                                                // 134\n  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;                                                                           // 135\n  var getLength = property('length');                                                                                  // 136\n  var isArrayLike = function(collection) {                                                                             // 137\n    var length = getLength(collection);                                                                                // 138\n    return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;                                      // 139\n  };                                                                                                                   // 140\n                                                                                                                       // 141\n  // Collection Functions                                                                                              // 142\n  // --------------------                                                                                              // 143\n                                                                                                                       // 144\n  // The cornerstone, an `each` implementation, aka `forEach`.                                                         // 145\n  // Handles raw objects in addition to array-likes. Treats all                                                        // 146\n  // sparse array-likes as if they were dense.                                                                         // 147\n  _.each = _.forEach = function(obj, iteratee, context) {                                                              // 148\n    iteratee = optimizeCb(iteratee, context);                                                                          // 149\n    var i, length;                                                                                                     // 150\n    if (isArrayLike(obj)) {                                                                                            // 151\n      for (i = 0, length = obj.length; i < length; i++) {                                                              // 152\n        iteratee(obj[i], i, obj);                                                                                      // 153\n      }                                                                                                                // 154\n    } else {                                                                                                           // 155\n      var keys = _.keys(obj);                                                                                          // 156\n      for (i = 0, length = keys.length; i < length; i++) {                                                             // 157\n        iteratee(obj[keys[i]], keys[i], obj);                                                                          // 158\n      }                                                                                                                // 159\n    }                                                                                                                  // 160\n    return obj;                                                                                                        // 161\n  };                                                                                                                   // 162\n                                                                                                                       // 163\n  // Return the results of applying the iteratee to each element.                                                      // 164\n  _.map = _.collect = function(obj, iteratee, context) {                                                               // 165\n    iteratee = cb(iteratee, context);                                                                                  // 166\n    var keys = !isArrayLike(obj) && _.keys(obj),                                                                       // 167\n        length = (keys || obj).length,                                                                                 // 168\n        results = Array(length);                                                                                       // 169\n    for (var index = 0; index < length; index++) {                                                                     // 170\n      var currentKey = keys ? keys[index] : index;                                                                     // 171\n      results[index] = iteratee(obj[currentKey], currentKey, obj);                                                     // 172\n    }                                                                                                                  // 173\n    return results;                                                                                                    // 174\n  };                                                                                                                   // 175\n                                                                                                                       // 176\n  // Create a reducing function iterating left or right.                                                               // 177\n  function createReduce(dir) {                                                                                         // 178\n    // Optimized iterator function as using arguments.length                                                           // 179\n    // in the main function will deoptimize the, see #1991.                                                            // 180\n    function iterator(obj, iteratee, memo, keys, index, length) {                                                      // 181\n      for (; index >= 0 && index < length; index += dir) {                                                             // 182\n        var currentKey = keys ? keys[index] : index;                                                                   // 183\n        memo = iteratee(memo, obj[currentKey], currentKey, obj);                                                       // 184\n      }                                                                                                                // 185\n      return memo;                                                                                                     // 186\n    }                                                                                                                  // 187\n                                                                                                                       // 188\n    return function(obj, iteratee, memo, context) {                                                                    // 189\n      iteratee = optimizeCb(iteratee, context, 4);                                                                     // 190\n      var keys = !isArrayLike(obj) && _.keys(obj),                                                                     // 191\n          length = (keys || obj).length,                                                                               // 192\n          index = dir > 0 ? 0 : length - 1;                                                                            // 193\n      // Determine the initial value if none is provided.                                                              // 194\n      if (arguments.length < 3) {                                                                                      // 195\n        memo = obj[keys ? keys[index] : index];                                                                        // 196\n        index += dir;                                                                                                  // 197\n      }                                                                                                                // 198\n      return iterator(obj, iteratee, memo, keys, index, length);                                                       // 199\n    };                                                                                                                 // 200\n  }                                                                                                                    // 201\n                                                                                                                       // 202\n  // **Reduce** builds up a single result from a list of values, aka `inject`,                                         // 203\n  // or `foldl`.                                                                                                       // 204\n  _.reduce = _.foldl = _.inject = createReduce(1);                                                                     // 205\n                                                                                                                       // 206\n  // The right-associative version of reduce, also known as `foldr`.                                                   // 207\n  _.reduceRight = _.foldr = createReduce(-1);                                                                          // 208\n                                                                                                                       // 209\n  // Return the first value which passes a truth test. Aliased as `detect`.                                            // 210\n  _.find = _.detect = function(obj, predicate, context) {                                                              // 211\n    var key;                                                                                                           // 212\n    if (isArrayLike(obj)) {                                                                                            // 213\n      key = _.findIndex(obj, predicate, context);                                                                      // 214\n    } else {                                                                                                           // 215\n      key = _.findKey(obj, predicate, context);                                                                        // 216\n    }                                                                                                                  // 217\n    if (key !== void 0 && key !== -1) return obj[key];                                                                 // 218\n  };                                                                                                                   // 219\n                                                                                                                       // 220\n  // Return all the elements that pass a truth test.                                                                   // 221\n  // Aliased as `select`.                                                                                              // 222\n  _.filter = _.select = function(obj, predicate, context) {                                                            // 223\n    var results = [];                                                                                                  // 224\n    predicate = cb(predicate, context);                                                                                // 225\n    _.each(obj, function(value, index, list) {                                                                         // 226\n      if (predicate(value, index, list)) results.push(value);                                                          // 227\n    });                                                                                                                // 228\n    return results;                                                                                                    // 229\n  };                                                                                                                   // 230\n                                                                                                                       // 231\n  // Return all the elements for which a truth test fails.                                                             // 232\n  _.reject = function(obj, predicate, context) {                                                                       // 233\n    return _.filter(obj, _.negate(cb(predicate)), context);                                                            // 234\n  };                                                                                                                   // 235\n                                                                                                                       // 236\n  // Determine whether all of the elements match a truth test.                                                         // 237\n  // Aliased as `all`.                                                                                                 // 238\n  _.every = _.all = function(obj, predicate, context) {                                                                // 239\n    predicate = cb(predicate, context);                                                                                // 240\n    var keys = !isArrayLike(obj) && _.keys(obj),                                                                       // 241\n        length = (keys || obj).length;                                                                                 // 242\n    for (var index = 0; index < length; index++) {                                                                     // 243\n      var currentKey = keys ? keys[index] : index;                                                                     // 244\n      if (!predicate(obj[currentKey], currentKey, obj)) return false;                                                  // 245\n    }                                                                                                                  // 246\n    return true;                                                                                                       // 247\n  };                                                                                                                   // 248\n                                                                                                                       // 249\n  // Determine if at least one element in the object matches a truth test.                                             // 250\n  // Aliased as `any`.                                                                                                 // 251\n  _.some = _.any = function(obj, predicate, context) {                                                                 // 252\n    predicate = cb(predicate, context);                                                                                // 253\n    var keys = !isArrayLike(obj) && _.keys(obj),                                                                       // 254\n        length = (keys || obj).length;                                                                                 // 255\n    for (var index = 0; index < length; index++) {                                                                     // 256\n      var currentKey = keys ? keys[index] : index;                                                                     // 257\n      if (predicate(obj[currentKey], currentKey, obj)) return true;                                                    // 258\n    }                                                                                                                  // 259\n    return false;                                                                                                      // 260\n  };                                                                                                                   // 261\n                                                                                                                       // 262\n  // Determine if the array or object contains a given item (using `===`).                                             // 263\n  // Aliased as `includes` and `include`.                                                                              // 264\n  _.contains = _.includes = _.include = function(obj, item, fromIndex, guard) {                                        // 265\n    if (!isArrayLike(obj)) obj = _.values(obj);                                                                        // 266\n    if (typeof fromIndex != 'number' || guard) fromIndex = 0;                                                          // 267\n    return _.indexOf(obj, item, fromIndex) >= 0;                                                                       // 268\n  };                                                                                                                   // 269\n                                                                                                                       // 270\n  // Invoke a method (with arguments) on every item in a collection.                                                   // 271\n  _.invoke = function(obj, method) {                                                                                   // 272\n    var args = slice.call(arguments, 2);                                                                               // 273\n    var isFunc = _.isFunction(method);                                                                                 // 274\n    return _.map(obj, function(value) {                                                                                // 275\n      var func = isFunc ? method : value[method];                                                                      // 276\n      return func == null ? func : func.apply(value, args);                                                            // 277\n    });                                                                                                                // 278\n  };                                                                                                                   // 279\n                                                                                                                       // 280\n  // Convenience version of a common use case of `map`: fetching a property.                                           // 281\n  _.pluck = function(obj, key) {                                                                                       // 282\n    return _.map(obj, _.property(key));                                                                                // 283\n  };                                                                                                                   // 284\n                                                                                                                       // 285\n  // Convenience version of a common use case of `filter`: selecting only objects                                      // 286\n  // containing specific `key:value` pairs.                                                                            // 287\n  _.where = function(obj, attrs) {                                                                                     // 288\n    return _.filter(obj, _.matcher(attrs));                                                                            // 289\n  };                                                                                                                   // 290\n                                                                                                                       // 291\n  // Convenience version of a common use case of `find`: getting the first object                                      // 292\n  // containing specific `key:value` pairs.                                                                            // 293\n  _.findWhere = function(obj, attrs) {                                                                                 // 294\n    return _.find(obj, _.matcher(attrs));                                                                              // 295\n  };                                                                                                                   // 296\n                                                                                                                       // 297\n  // Return the maximum element (or element-based computation).                                                        // 298\n  _.max = function(obj, iteratee, context) {                                                                           // 299\n    var result = -Infinity, lastComputed = -Infinity,                                                                  // 300\n        value, computed;                                                                                               // 301\n    if (iteratee == null && obj != null) {                                                                             // 302\n      obj = isArrayLike(obj) ? obj : _.values(obj);                                                                    // 303\n      for (var i = 0, length = obj.length; i < length; i++) {                                                          // 304\n        value = obj[i];                                                                                                // 305\n        if (value > result) {                                                                                          // 306\n          result = value;                                                                                              // 307\n        }                                                                                                              // 308\n      }                                                                                                                // 309\n    } else {                                                                                                           // 310\n      iteratee = cb(iteratee, context);                                                                                // 311\n      _.each(obj, function(value, index, list) {                                                                       // 312\n        computed = iteratee(value, index, list);                                                                       // 313\n        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {                               // 314\n          result = value;                                                                                              // 315\n          lastComputed = computed;                                                                                     // 316\n        }                                                                                                              // 317\n      });                                                                                                              // 318\n    }                                                                                                                  // 319\n    return result;                                                                                                     // 320\n  };                                                                                                                   // 321\n                                                                                                                       // 322\n  // Return the minimum element (or element-based computation).                                                        // 323\n  _.min = function(obj, iteratee, context) {                                                                           // 324\n    var result = Infinity, lastComputed = Infinity,                                                                    // 325\n        value, computed;                                                                                               // 326\n    if (iteratee == null && obj != null) {                                                                             // 327\n      obj = isArrayLike(obj) ? obj : _.values(obj);                                                                    // 328\n      for (var i = 0, length = obj.length; i < length; i++) {                                                          // 329\n        value = obj[i];                                                                                                // 330\n        if (value < result) {                                                                                          // 331\n          result = value;                                                                                              // 332\n        }                                                                                                              // 333\n      }                                                                                                                // 334\n    } else {                                                                                                           // 335\n      iteratee = cb(iteratee, context);                                                                                // 336\n      _.each(obj, function(value, index, list) {                                                                       // 337\n        computed = iteratee(value, index, list);                                                                       // 338\n        if (computed < lastComputed || computed === Infinity && result === Infinity) {                                 // 339\n          result = value;                                                                                              // 340\n          lastComputed = computed;                                                                                     // 341\n        }                                                                                                              // 342\n      });                                                                                                              // 343\n    }                                                                                                                  // 344\n    return result;                                                                                                     // 345\n  };                                                                                                                   // 346\n                                                                                                                       // 347\n  // Shuffle a collection, using the modern version of the                                                             // 348\n  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).                                        // 349\n  _.shuffle = function(obj) {                                                                                          // 350\n    var set = isArrayLike(obj) ? obj : _.values(obj);                                                                  // 351\n    var length = set.length;                                                                                           // 352\n    var shuffled = Array(length);                                                                                      // 353\n    for (var index = 0, rand; index < length; index++) {                                                               // 354\n      rand = _.random(0, index);                                                                                       // 355\n      if (rand !== index) shuffled[index] = shuffled[rand];                                                            // 356\n      shuffled[rand] = set[index];                                                                                     // 357\n    }                                                                                                                  // 358\n    return shuffled;                                                                                                   // 359\n  };                                                                                                                   // 360\n                                                                                                                       // 361\n  // Sample **n** random values from a collection.                                                                     // 362\n  // If **n** is not specified, returns a single random element.                                                       // 363\n  // The internal `guard` argument allows it to work with `map`.                                                       // 364\n  _.sample = function(obj, n, guard) {                                                                                 // 365\n    if (n == null || guard) {                                                                                          // 366\n      if (!isArrayLike(obj)) obj = _.values(obj);                                                                      // 367\n      return obj[_.random(obj.length - 1)];                                                                            // 368\n    }                                                                                                                  // 369\n    return _.shuffle(obj).slice(0, Math.max(0, n));                                                                    // 370\n  };                                                                                                                   // 371\n                                                                                                                       // 372\n  // Sort the object's values by a criterion produced by an iteratee.                                                  // 373\n  _.sortBy = function(obj, iteratee, context) {                                                                        // 374\n    iteratee = cb(iteratee, context);                                                                                  // 375\n    return _.pluck(_.map(obj, function(value, index, list) {                                                           // 376\n      return {                                                                                                         // 377\n        value: value,                                                                                                  // 378\n        index: index,                                                                                                  // 379\n        criteria: iteratee(value, index, list)                                                                         // 380\n      };                                                                                                               // 381\n    }).sort(function(left, right) {                                                                                    // 382\n      var a = left.criteria;                                                                                           // 383\n      var b = right.criteria;                                                                                          // 384\n      if (a !== b) {                                                                                                   // 385\n        if (a > b || a === void 0) return 1;                                                                           // 386\n        if (a < b || b === void 0) return -1;                                                                          // 387\n      }                                                                                                                // 388\n      return left.index - right.index;                                                                                 // 389\n    }), 'value');                                                                                                      // 390\n  };                                                                                                                   // 391\n                                                                                                                       // 392\n  // An internal function used for aggregate \"group by\" operations.                                                    // 393\n  var group = function(behavior) {                                                                                     // 394\n    return function(obj, iteratee, context) {                                                                          // 395\n      var result = {};                                                                                                 // 396\n      iteratee = cb(iteratee, context);                                                                                // 397\n      _.each(obj, function(value, index) {                                                                             // 398\n        var key = iteratee(value, index, obj);                                                                         // 399\n        behavior(result, value, key);                                                                                  // 400\n      });                                                                                                              // 401\n      return result;                                                                                                   // 402\n    };                                                                                                                 // 403\n  };                                                                                                                   // 404\n                                                                                                                       // 405\n  // Groups the object's values by a criterion. Pass either a string attribute                                         // 406\n  // to group by, or a function that returns the criterion.                                                            // 407\n  _.groupBy = group(function(result, value, key) {                                                                     // 408\n    if (_.has(result, key)) result[key].push(value); else result[key] = [value];                                       // 409\n  });                                                                                                                  // 410\n                                                                                                                       // 411\n  // Indexes the object's values by a criterion, similar to `groupBy`, but for                                         // 412\n  // when you know that your index values will be unique.                                                              // 413\n  _.indexBy = group(function(result, value, key) {                                                                     // 414\n    result[key] = value;                                                                                               // 415\n  });                                                                                                                  // 416\n                                                                                                                       // 417\n  // Counts instances of an object that group by a certain criterion. Pass                                             // 418\n  // either a string attribute to count by, or a function that returns the                                             // 419\n  // criterion.                                                                                                        // 420\n  _.countBy = group(function(result, value, key) {                                                                     // 421\n    if (_.has(result, key)) result[key]++; else result[key] = 1;                                                       // 422\n  });                                                                                                                  // 423\n                                                                                                                       // 424\n  // Safely create a real, live array from anything iterable.                                                          // 425\n  _.toArray = function(obj) {                                                                                          // 426\n    if (!obj) return [];                                                                                               // 427\n    if (_.isArray(obj)) return slice.call(obj);                                                                        // 428\n    if (isArrayLike(obj)) return _.map(obj, _.identity);                                                               // 429\n    return _.values(obj);                                                                                              // 430\n  };                                                                                                                   // 431\n                                                                                                                       // 432\n  // Return the number of elements in an object.                                                                       // 433\n  _.size = function(obj) {                                                                                             // 434\n    if (obj == null) return 0;                                                                                         // 435\n    return isArrayLike(obj) ? obj.length : _.keys(obj).length;                                                         // 436\n  };                                                                                                                   // 437\n                                                                                                                       // 438\n  // Split a collection into two arrays: one whose elements all satisfy the given                                      // 439\n  // predicate, and one whose elements all do not satisfy the predicate.                                               // 440\n  _.partition = function(obj, predicate, context) {                                                                    // 441\n    predicate = cb(predicate, context);                                                                                // 442\n    var pass = [], fail = [];                                                                                          // 443\n    _.each(obj, function(value, key, obj) {                                                                            // 444\n      (predicate(value, key, obj) ? pass : fail).push(value);                                                          // 445\n    });                                                                                                                // 446\n    return [pass, fail];                                                                                               // 447\n  };                                                                                                                   // 448\n                                                                                                                       // 449\n  // Array Functions                                                                                                   // 450\n  // ---------------                                                                                                   // 451\n                                                                                                                       // 452\n  // Get the first element of an array. Passing **n** will return the first N                                          // 453\n  // values in the array. Aliased as `head` and `take`. The **guard** check                                            // 454\n  // allows it to work with `_.map`.                                                                                   // 455\n  _.first = _.head = _.take = function(array, n, guard) {                                                              // 456\n    if (array == null) return void 0;                                                                                  // 457\n    if (n == null || guard) return array[0];                                                                           // 458\n    return _.initial(array, array.length - n);                                                                         // 459\n  };                                                                                                                   // 460\n                                                                                                                       // 461\n  // Returns everything but the last entry of the array. Especially useful on                                          // 462\n  // the arguments object. Passing **n** will return all the values in                                                 // 463\n  // the array, excluding the last N.                                                                                  // 464\n  _.initial = function(array, n, guard) {                                                                              // 465\n    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));                             // 466\n  };                                                                                                                   // 467\n                                                                                                                       // 468\n  // Get the last element of an array. Passing **n** will return the last N                                            // 469\n  // values in the array.                                                                                              // 470\n  _.last = function(array, n, guard) {                                                                                 // 471\n    if (array == null) return void 0;                                                                                  // 472\n    if (n == null || guard) return array[array.length - 1];                                                            // 473\n    return _.rest(array, Math.max(0, array.length - n));                                                               // 474\n  };                                                                                                                   // 475\n                                                                                                                       // 476\n  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.                                // 477\n  // Especially useful on the arguments object. Passing an **n** will return                                           // 478\n  // the rest N values in the array.                                                                                   // 479\n  _.rest = _.tail = _.drop = function(array, n, guard) {                                                               // 480\n    return slice.call(array, n == null || guard ? 1 : n);                                                              // 481\n  };                                                                                                                   // 482\n                                                                                                                       // 483\n  // Trim out all falsy values from an array.                                                                          // 484\n  _.compact = function(array) {                                                                                        // 485\n    return _.filter(array, _.identity);                                                                                // 486\n  };                                                                                                                   // 487\n                                                                                                                       // 488\n  // Internal implementation of a recursive `flatten` function.                                                        // 489\n  var flatten = function(input, shallow, strict, startIndex) {                                                         // 490\n    var output = [], idx = 0;                                                                                          // 491\n    for (var i = startIndex || 0, length = getLength(input); i < length; i++) {                                        // 492\n      var value = input[i];                                                                                            // 493\n      if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {                                          // 494\n        //flatten current level of array or arguments object                                                           // 495\n        if (!shallow) value = flatten(value, shallow, strict);                                                         // 496\n        var j = 0, len = value.length;                                                                                 // 497\n        output.length += len;                                                                                          // 498\n        while (j < len) {                                                                                              // 499\n          output[idx++] = value[j++];                                                                                  // 500\n        }                                                                                                              // 501\n      } else if (!strict) {                                                                                            // 502\n        output[idx++] = value;                                                                                         // 503\n      }                                                                                                                // 504\n    }                                                                                                                  // 505\n    return output;                                                                                                     // 506\n  };                                                                                                                   // 507\n                                                                                                                       // 508\n  // Flatten out an array, either recursively (by default), or just one level.                                         // 509\n  _.flatten = function(array, shallow) {                                                                               // 510\n    return flatten(array, shallow, false);                                                                             // 511\n  };                                                                                                                   // 512\n                                                                                                                       // 513\n  // Return a version of the array that does not contain the specified value(s).                                       // 514\n  _.without = function(array) {                                                                                        // 515\n    return _.difference(array, slice.call(arguments, 1));                                                              // 516\n  };                                                                                                                   // 517\n                                                                                                                       // 518\n  // Produce a duplicate-free version of the array. If the array has already                                           // 519\n  // been sorted, you have the option of using a faster algorithm.                                                     // 520\n  // Aliased as `unique`.                                                                                              // 521\n  _.uniq = _.unique = function(array, isSorted, iteratee, context) {                                                   // 522\n    if (!_.isBoolean(isSorted)) {                                                                                      // 523\n      context = iteratee;                                                                                              // 524\n      iteratee = isSorted;                                                                                             // 525\n      isSorted = false;                                                                                                // 526\n    }                                                                                                                  // 527\n    if (iteratee != null) iteratee = cb(iteratee, context);                                                            // 528\n    var result = [];                                                                                                   // 529\n    var seen = [];                                                                                                     // 530\n    for (var i = 0, length = getLength(array); i < length; i++) {                                                      // 531\n      var value = array[i],                                                                                            // 532\n          computed = iteratee ? iteratee(value, i, array) : value;                                                     // 533\n      if (isSorted) {                                                                                                  // 534\n        if (!i || seen !== computed) result.push(value);                                                               // 535\n        seen = computed;                                                                                               // 536\n      } else if (iteratee) {                                                                                           // 537\n        if (!_.contains(seen, computed)) {                                                                             // 538\n          seen.push(computed);                                                                                         // 539\n          result.push(value);                                                                                          // 540\n        }                                                                                                              // 541\n      } else if (!_.contains(result, value)) {                                                                         // 542\n        result.push(value);                                                                                            // 543\n      }                                                                                                                // 544\n    }                                                                                                                  // 545\n    return result;                                                                                                     // 546\n  };                                                                                                                   // 547\n                                                                                                                       // 548\n  // Produce an array that contains the union: each distinct element from all of                                       // 549\n  // the passed-in arrays.                                                                                             // 550\n  _.union = function() {                                                                                               // 551\n    return _.uniq(flatten(arguments, true, true));                                                                     // 552\n  };                                                                                                                   // 553\n                                                                                                                       // 554\n  // Produce an array that contains every item shared between all the                                                  // 555\n  // passed-in arrays.                                                                                                 // 556\n  _.intersection = function(array) {                                                                                   // 557\n    var result = [];                                                                                                   // 558\n    var argsLength = arguments.length;                                                                                 // 559\n    for (var i = 0, length = getLength(array); i < length; i++) {                                                      // 560\n      var item = array[i];                                                                                             // 561\n      if (_.contains(result, item)) continue;                                                                          // 562\n      for (var j = 1; j < argsLength; j++) {                                                                           // 563\n        if (!_.contains(arguments[j], item)) break;                                                                    // 564\n      }                                                                                                                // 565\n      if (j === argsLength) result.push(item);                                                                         // 566\n    }                                                                                                                  // 567\n    return result;                                                                                                     // 568\n  };                                                                                                                   // 569\n                                                                                                                       // 570\n  // Take the difference between one array and a number of other arrays.                                               // 571\n  // Only the elements present in just the first array will remain.                                                    // 572\n  _.difference = function(array) {                                                                                     // 573\n    var rest = flatten(arguments, true, true, 1);                                                                      // 574\n    return _.filter(array, function(value){                                                                            // 575\n      return !_.contains(rest, value);                                                                                 // 576\n    });                                                                                                                // 577\n  };                                                                                                                   // 578\n                                                                                                                       // 579\n  // Zip together multiple lists into a single array -- elements that share                                            // 580\n  // an index go together.                                                                                             // 581\n  _.zip = function() {                                                                                                 // 582\n    return _.unzip(arguments);                                                                                         // 583\n  };                                                                                                                   // 584\n                                                                                                                       // 585\n  // Complement of _.zip. Unzip accepts an array of arrays and groups                                                  // 586\n  // each array's elements on shared indices                                                                           // 587\n  _.unzip = function(array) {                                                                                          // 588\n    var length = array && _.max(array, getLength).length || 0;                                                         // 589\n    var result = Array(length);                                                                                        // 590\n                                                                                                                       // 591\n    for (var index = 0; index < length; index++) {                                                                     // 592\n      result[index] = _.pluck(array, index);                                                                           // 593\n    }                                                                                                                  // 594\n    return result;                                                                                                     // 595\n  };                                                                                                                   // 596\n                                                                                                                       // 597\n  // Converts lists into objects. Pass either a single array of `[key, value]`                                         // 598\n  // pairs, or two parallel arrays of the same length -- one of keys, and one of                                       // 599\n  // the corresponding values.                                                                                         // 600\n  _.object = function(list, values) {                                                                                  // 601\n    var result = {};                                                                                                   // 602\n    for (var i = 0, length = getLength(list); i < length; i++) {                                                       // 603\n      if (values) {                                                                                                    // 604\n        result[list[i]] = values[i];                                                                                   // 605\n      } else {                                                                                                         // 606\n        result[list[i][0]] = list[i][1];                                                                               // 607\n      }                                                                                                                // 608\n    }                                                                                                                  // 609\n    return result;                                                                                                     // 610\n  };                                                                                                                   // 611\n                                                                                                                       // 612\n  // Generator function to create the findIndex and findLastIndex functions                                            // 613\n  function createPredicateIndexFinder(dir) {                                                                           // 614\n    return function(array, predicate, context) {                                                                       // 615\n      predicate = cb(predicate, context);                                                                              // 616\n      var length = getLength(array);                                                                                   // 617\n      var index = dir > 0 ? 0 : length - 1;                                                                            // 618\n      for (; index >= 0 && index < length; index += dir) {                                                             // 619\n        if (predicate(array[index], index, array)) return index;                                                       // 620\n      }                                                                                                                // 621\n      return -1;                                                                                                       // 622\n    };                                                                                                                 // 623\n  }                                                                                                                    // 624\n                                                                                                                       // 625\n  // Returns the first index on an array-like that passes a predicate test                                             // 626\n  _.findIndex = createPredicateIndexFinder(1);                                                                         // 627\n  _.findLastIndex = createPredicateIndexFinder(-1);                                                                    // 628\n                                                                                                                       // 629\n  // Use a comparator function to figure out the smallest index at which                                               // 630\n  // an object should be inserted so as to maintain order. Uses binary search.                                         // 631\n  _.sortedIndex = function(array, obj, iteratee, context) {                                                            // 632\n    iteratee = cb(iteratee, context, 1);                                                                               // 633\n    var value = iteratee(obj);                                                                                         // 634\n    var low = 0, high = getLength(array);                                                                              // 635\n    while (low < high) {                                                                                               // 636\n      var mid = Math.floor((low + high) / 2);                                                                          // 637\n      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;                                                // 638\n    }                                                                                                                  // 639\n    return low;                                                                                                        // 640\n  };                                                                                                                   // 641\n                                                                                                                       // 642\n  // Generator function to create the indexOf and lastIndexOf functions                                                // 643\n  function createIndexFinder(dir, predicateFind, sortedIndex) {                                                        // 644\n    return function(array, item, idx) {                                                                                // 645\n      var i = 0, length = getLength(array);                                                                            // 646\n      if (typeof idx == 'number') {                                                                                    // 647\n        if (dir > 0) {                                                                                                 // 648\n            i = idx >= 0 ? idx : Math.max(idx + length, i);                                                            // 649\n        } else {                                                                                                       // 650\n            length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;                                          // 651\n        }                                                                                                              // 652\n      } else if (sortedIndex && idx && length) {                                                                       // 653\n        idx = sortedIndex(array, item);                                                                                // 654\n        return array[idx] === item ? idx : -1;                                                                         // 655\n      }                                                                                                                // 656\n      if (item !== item) {                                                                                             // 657\n        idx = predicateFind(slice.call(array, i, length), _.isNaN);                                                    // 658\n        return idx >= 0 ? idx + i : -1;                                                                                // 659\n      }                                                                                                                // 660\n      for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {                                     // 661\n        if (array[idx] === item) return idx;                                                                           // 662\n      }                                                                                                                // 663\n      return -1;                                                                                                       // 664\n    };                                                                                                                 // 665\n  }                                                                                                                    // 666\n                                                                                                                       // 667\n  // Return the position of the first occurrence of an item in an array,                                               // 668\n  // or -1 if the item is not included in the array.                                                                   // 669\n  // If the array is large and already in sort order, pass `true`                                                      // 670\n  // for **isSorted** to use binary search.                                                                            // 671\n  _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);                                                        // 672\n  _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);                                                              // 673\n                                                                                                                       // 674\n  // Generate an integer Array containing an arithmetic progression. A port of                                         // 675\n  // the native Python `range()` function. See                                                                         // 676\n  // [the Python documentation](http://docs.python.org/library/functions.html#range).                                  // 677\n  _.range = function(start, stop, step) {                                                                              // 678\n    if (stop == null) {                                                                                                // 679\n      stop = start || 0;                                                                                               // 680\n      start = 0;                                                                                                       // 681\n    }                                                                                                                  // 682\n    step = step || 1;                                                                                                  // 683\n                                                                                                                       // 684\n    var length = Math.max(Math.ceil((stop - start) / step), 0);                                                        // 685\n    var range = Array(length);                                                                                         // 686\n                                                                                                                       // 687\n    for (var idx = 0; idx < length; idx++, start += step) {                                                            // 688\n      range[idx] = start;                                                                                              // 689\n    }                                                                                                                  // 690\n                                                                                                                       // 691\n    return range;                                                                                                      // 692\n  };                                                                                                                   // 693\n                                                                                                                       // 694\n  // Function (ahem) Functions                                                                                         // 695\n  // ------------------                                                                                                // 696\n                                                                                                                       // 697\n  // Determines whether to execute a function as a constructor                                                         // 698\n  // or a normal function with the provided arguments                                                                  // 699\n  var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {                                  // 700\n    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);                                // 701\n    var self = baseCreate(sourceFunc.prototype);                                                                       // 702\n    var result = sourceFunc.apply(self, args);                                                                         // 703\n    if (_.isObject(result)) return result;                                                                             // 704\n    return self;                                                                                                       // 705\n  };                                                                                                                   // 706\n                                                                                                                       // 707\n  // Create a function bound to a given object (assigning `this`, and arguments,                                       // 708\n  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if                                            // 709\n  // available.                                                                                                        // 710\n  _.bind = function(func, context) {                                                                                   // 711\n    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));               // 712\n    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');                                 // 713\n    var args = slice.call(arguments, 2);                                                                               // 714\n    var bound = function() {                                                                                           // 715\n      return executeBound(func, bound, context, this, args.concat(slice.call(arguments)));                             // 716\n    };                                                                                                                 // 717\n    return bound;                                                                                                      // 718\n  };                                                                                                                   // 719\n                                                                                                                       // 720\n  // Partially apply a function by creating a version that has had some of its                                         // 721\n  // arguments pre-filled, without changing its dynamic `this` context. _ acts                                         // 722\n  // as a placeholder, allowing any combination of arguments to be pre-filled.                                         // 723\n  _.partial = function(func) {                                                                                         // 724\n    var boundArgs = slice.call(arguments, 1);                                                                          // 725\n    var bound = function() {                                                                                           // 726\n      var position = 0, length = boundArgs.length;                                                                     // 727\n      var args = Array(length);                                                                                        // 728\n      for (var i = 0; i < length; i++) {                                                                               // 729\n        args[i] = boundArgs[i] === _ ? arguments[position++] : boundArgs[i];                                           // 730\n      }                                                                                                                // 731\n      while (position < arguments.length) args.push(arguments[position++]);                                            // 732\n      return executeBound(func, bound, this, this, args);                                                              // 733\n    };                                                                                                                 // 734\n    return bound;                                                                                                      // 735\n  };                                                                                                                   // 736\n                                                                                                                       // 737\n  // Bind a number of an object's methods to that object. Remaining arguments                                          // 738\n  // are the method names to be bound. Useful for ensuring that all callbacks                                          // 739\n  // defined on an object belong to it.                                                                                // 740\n  _.bindAll = function(obj) {                                                                                          // 741\n    var i, length = arguments.length, key;                                                                             // 742\n    if (length <= 1) throw new Error('bindAll must be passed function names');                                         // 743\n    for (i = 1; i < length; i++) {                                                                                     // 744\n      key = arguments[i];                                                                                              // 745\n      obj[key] = _.bind(obj[key], obj);                                                                                // 746\n    }                                                                                                                  // 747\n    return obj;                                                                                                        // 748\n  };                                                                                                                   // 749\n                                                                                                                       // 750\n  // Memoize an expensive function by storing its results.                                                             // 751\n  _.memoize = function(func, hasher) {                                                                                 // 752\n    var memoize = function(key) {                                                                                      // 753\n      var cache = memoize.cache;                                                                                       // 754\n      var address = '' + (hasher ? hasher.apply(this, arguments) : key);                                               // 755\n      if (!_.has(cache, address)) cache[address] = func.apply(this, arguments);                                        // 756\n      return cache[address];                                                                                           // 757\n    };                                                                                                                 // 758\n    memoize.cache = {};                                                                                                // 759\n    return memoize;                                                                                                    // 760\n  };                                                                                                                   // 761\n                                                                                                                       // 762\n  // Delays a function for the given number of milliseconds, and then calls                                            // 763\n  // it with the arguments supplied.                                                                                   // 764\n  _.delay = function(func, wait) {                                                                                     // 765\n    var args = slice.call(arguments, 2);                                                                               // 766\n    return setTimeout(function(){                                                                                      // 767\n      return func.apply(null, args);                                                                                   // 768\n    }, wait);                                                                                                          // 769\n  };                                                                                                                   // 770\n                                                                                                                       // 771\n  // Defers a function, scheduling it to run after the current call stack has                                          // 772\n  // cleared.                                                                                                          // 773\n  _.defer = _.partial(_.delay, _, 1);                                                                                  // 774\n                                                                                                                       // 775\n  // Returns a function, that, when invoked, will only be triggered at most once                                       // 776\n  // during a given window of time. Normally, the throttled function will run                                          // 777\n  // as much as it can, without ever going more than once per `wait` duration;                                         // 778\n  // but if you'd like to disable the execution on the leading edge, pass                                              // 779\n  // `{leading: false}`. To disable execution on the trailing edge, ditto.                                             // 780\n  _.throttle = function(func, wait, options) {                                                                         // 781\n    var context, args, result;                                                                                         // 782\n    var timeout = null;                                                                                                // 783\n    var previous = 0;                                                                                                  // 784\n    if (!options) options = {};                                                                                        // 785\n    var later = function() {                                                                                           // 786\n      previous = options.leading === false ? 0 : _.now();                                                              // 787\n      timeout = null;                                                                                                  // 788\n      result = func.apply(context, args);                                                                              // 789\n      if (!timeout) context = args = null;                                                                             // 790\n    };                                                                                                                 // 791\n    return function() {                                                                                                // 792\n      var now = _.now();                                                                                               // 793\n      if (!previous && options.leading === false) previous = now;                                                      // 794\n      var remaining = wait - (now - previous);                                                                         // 795\n      context = this;                                                                                                  // 796\n      args = arguments;                                                                                                // 797\n      if (remaining <= 0 || remaining > wait) {                                                                        // 798\n        if (timeout) {                                                                                                 // 799\n          clearTimeout(timeout);                                                                                       // 800\n          timeout = null;                                                                                              // 801\n        }                                                                                                              // 802\n        previous = now;                                                                                                // 803\n        result = func.apply(context, args);                                                                            // 804\n        if (!timeout) context = args = null;                                                                           // 805\n      } else if (!timeout && options.trailing !== false) {                                                             // 806\n        timeout = setTimeout(later, remaining);                                                                        // 807\n      }                                                                                                                // 808\n      return result;                                                                                                   // 809\n    };                                                                                                                 // 810\n  };                                                                                                                   // 811\n                                                                                                                       // 812\n  // Returns a function, that, as long as it continues to be invoked, will not                                         // 813\n  // be triggered. The function will be called after it stops being called for                                         // 814\n  // N milliseconds. If `immediate` is passed, trigger the function on the                                             // 815\n  // leading edge, instead of the trailing.                                                                            // 816\n  _.debounce = function(func, wait, immediate) {                                                                       // 817\n    var timeout, args, context, timestamp, result;                                                                     // 818\n                                                                                                                       // 819\n    var later = function() {                                                                                           // 820\n      var last = _.now() - timestamp;                                                                                  // 821\n                                                                                                                       // 822\n      if (last < wait && last >= 0) {                                                                                  // 823\n        timeout = setTimeout(later, wait - last);                                                                      // 824\n      } else {                                                                                                         // 825\n        timeout = null;                                                                                                // 826\n        if (!immediate) {                                                                                              // 827\n          result = func.apply(context, args);                                                                          // 828\n          if (!timeout) context = args = null;                                                                         // 829\n        }                                                                                                              // 830\n      }                                                                                                                // 831\n    };                                                                                                                 // 832\n                                                                                                                       // 833\n    return function() {                                                                                                // 834\n      context = this;                                                                                                  // 835\n      args = arguments;                                                                                                // 836\n      timestamp = _.now();                                                                                             // 837\n      var callNow = immediate && !timeout;                                                                             // 838\n      if (!timeout) timeout = setTimeout(later, wait);                                                                 // 839\n      if (callNow) {                                                                                                   // 840\n        result = func.apply(context, args);                                                                            // 841\n        context = args = null;                                                                                         // 842\n      }                                                                                                                // 843\n                                                                                                                       // 844\n      return result;                                                                                                   // 845\n    };                                                                                                                 // 846\n  };                                                                                                                   // 847\n                                                                                                                       // 848\n  // Returns the first function passed as an argument to the second,                                                   // 849\n  // allowing you to adjust arguments, run code before and after, and                                                  // 850\n  // conditionally execute the original function.                                                                      // 851\n  _.wrap = function(func, wrapper) {                                                                                   // 852\n    return _.partial(wrapper, func);                                                                                   // 853\n  };                                                                                                                   // 854\n                                                                                                                       // 855\n  // Returns a negated version of the passed-in predicate.                                                             // 856\n  _.negate = function(predicate) {                                                                                     // 857\n    return function() {                                                                                                // 858\n      return !predicate.apply(this, arguments);                                                                        // 859\n    };                                                                                                                 // 860\n  };                                                                                                                   // 861\n                                                                                                                       // 862\n  // Returns a function that is the composition of a list of functions, each                                           // 863\n  // consuming the return value of the function that follows.                                                          // 864\n  _.compose = function() {                                                                                             // 865\n    var args = arguments;                                                                                              // 866\n    var start = args.length - 1;                                                                                       // 867\n    return function() {                                                                                                // 868\n      var i = start;                                                                                                   // 869\n      var result = args[start].apply(this, arguments);                                                                 // 870\n      while (i--) result = args[i].call(this, result);                                                                 // 871\n      return result;                                                                                                   // 872\n    };                                                                                                                 // 873\n  };                                                                                                                   // 874\n                                                                                                                       // 875\n  // Returns a function that will only be executed on and after the Nth call.                                          // 876\n  _.after = function(times, func) {                                                                                    // 877\n    return function() {                                                                                                // 878\n      if (--times < 1) {                                                                                               // 879\n        return func.apply(this, arguments);                                                                            // 880\n      }                                                                                                                // 881\n    };                                                                                                                 // 882\n  };                                                                                                                   // 883\n                                                                                                                       // 884\n  // Returns a function that will only be executed up to (but not including) the Nth call.                             // 885\n  _.before = function(times, func) {                                                                                   // 886\n    var memo;                                                                                                          // 887\n    return function() {                                                                                                // 888\n      if (--times > 0) {                                                                                               // 889\n        memo = func.apply(this, arguments);                                                                            // 890\n      }                                                                                                                // 891\n      if (times <= 1) func = null;                                                                                     // 892\n      return memo;                                                                                                     // 893\n    };                                                                                                                 // 894\n  };                                                                                                                   // 895\n                                                                                                                       // 896\n  // Returns a function that will be executed at most one time, no matter how                                          // 897\n  // often you call it. Useful for lazy initialization.                                                                // 898\n  _.once = _.partial(_.before, 2);                                                                                     // 899\n                                                                                                                       // 900\n  // Object Functions                                                                                                  // 901\n  // ----------------                                                                                                  // 902\n                                                                                                                       // 903\n  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.                                        // 904\n  var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');                                                 // 905\n  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',                                                    // 906\n                      'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];                                     // 907\n                                                                                                                       // 908\n  function collectNonEnumProps(obj, keys) {                                                                            // 909\n    var nonEnumIdx = nonEnumerableProps.length;                                                                        // 910\n    var constructor = obj.constructor;                                                                                 // 911\n    var proto = (_.isFunction(constructor) && constructor.prototype) || ObjProto;                                      // 912\n                                                                                                                       // 913\n    // Constructor is a special case.                                                                                  // 914\n    var prop = 'constructor';                                                                                          // 915\n    if (_.has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);                                                  // 916\n                                                                                                                       // 917\n    while (nonEnumIdx--) {                                                                                             // 918\n      prop = nonEnumerableProps[nonEnumIdx];                                                                           // 919\n      if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {                                       // 920\n        keys.push(prop);                                                                                               // 921\n      }                                                                                                                // 922\n    }                                                                                                                  // 923\n  }                                                                                                                    // 924\n                                                                                                                       // 925\n  // Retrieve the names of an object's own properties.                                                                 // 926\n  // Delegates to **ECMAScript 5**'s native `Object.keys`                                                              // 927\n  _.keys = function(obj) {                                                                                             // 928\n    if (!_.isObject(obj)) return [];                                                                                   // 929\n    if (nativeKeys) return nativeKeys(obj);                                                                            // 930\n    var keys = [];                                                                                                     // 931\n    for (var key in obj) if (_.has(obj, key)) keys.push(key);                                                          // 932\n    // Ahem, IE < 9.                                                                                                   // 933\n    if (hasEnumBug) collectNonEnumProps(obj, keys);                                                                    // 934\n    return keys;                                                                                                       // 935\n  };                                                                                                                   // 936\n                                                                                                                       // 937\n  // Retrieve all the property names of an object.                                                                     // 938\n  _.allKeys = function(obj) {                                                                                          // 939\n    if (!_.isObject(obj)) return [];                                                                                   // 940\n    var keys = [];                                                                                                     // 941\n    for (var key in obj) keys.push(key);                                                                               // 942\n    // Ahem, IE < 9.                                                                                                   // 943\n    if (hasEnumBug) collectNonEnumProps(obj, keys);                                                                    // 944\n    return keys;                                                                                                       // 945\n  };                                                                                                                   // 946\n                                                                                                                       // 947\n  // Retrieve the values of an object's properties.                                                                    // 948\n  _.values = function(obj) {                                                                                           // 949\n    var keys = _.keys(obj);                                                                                            // 950\n    var length = keys.length;                                                                                          // 951\n    var values = Array(length);                                                                                        // 952\n    for (var i = 0; i < length; i++) {                                                                                 // 953\n      values[i] = obj[keys[i]];                                                                                        // 954\n    }                                                                                                                  // 955\n    return values;                                                                                                     // 956\n  };                                                                                                                   // 957\n                                                                                                                       // 958\n  // Returns the results of applying the iteratee to each element of the object                                        // 959\n  // In contrast to _.map it returns an object                                                                         // 960\n  _.mapObject = function(obj, iteratee, context) {                                                                     // 961\n    iteratee = cb(iteratee, context);                                                                                  // 962\n    var keys =  _.keys(obj),                                                                                           // 963\n          length = keys.length,                                                                                        // 964\n          results = {},                                                                                                // 965\n          currentKey;                                                                                                  // 966\n      for (var index = 0; index < length; index++) {                                                                   // 967\n        currentKey = keys[index];                                                                                      // 968\n        results[currentKey] = iteratee(obj[currentKey], currentKey, obj);                                              // 969\n      }                                                                                                                // 970\n      return results;                                                                                                  // 971\n  };                                                                                                                   // 972\n                                                                                                                       // 973\n  // Convert an object into a list of `[key, value]` pairs.                                                            // 974\n  _.pairs = function(obj) {                                                                                            // 975\n    var keys = _.keys(obj);                                                                                            // 976\n    var length = keys.length;                                                                                          // 977\n    var pairs = Array(length);                                                                                         // 978\n    for (var i = 0; i < length; i++) {                                                                                 // 979\n      pairs[i] = [keys[i], obj[keys[i]]];                                                                              // 980\n    }                                                                                                                  // 981\n    return pairs;                                                                                                      // 982\n  };                                                                                                                   // 983\n                                                                                                                       // 984\n  // Invert the keys and values of an object. The values must be serializable.                                         // 985\n  _.invert = function(obj) {                                                                                           // 986\n    var result = {};                                                                                                   // 987\n    var keys = _.keys(obj);                                                                                            // 988\n    for (var i = 0, length = keys.length; i < length; i++) {                                                           // 989\n      result[obj[keys[i]]] = keys[i];                                                                                  // 990\n    }                                                                                                                  // 991\n    return result;                                                                                                     // 992\n  };                                                                                                                   // 993\n                                                                                                                       // 994\n  // Return a sorted list of the function names available on the object.                                               // 995\n  // Aliased as `methods`                                                                                              // 996\n  _.functions = _.methods = function(obj) {                                                                            // 997\n    var names = [];                                                                                                    // 998\n    for (var key in obj) {                                                                                             // 999\n      if (_.isFunction(obj[key])) names.push(key);                                                                     // 1000\n    }                                                                                                                  // 1001\n    return names.sort();                                                                                               // 1002\n  };                                                                                                                   // 1003\n                                                                                                                       // 1004\n  // Extend a given object with all the properties in passed-in object(s).                                             // 1005\n  _.extend = createAssigner(_.allKeys);                                                                                // 1006\n                                                                                                                       // 1007\n  // Assigns a given object with all the own properties in the passed-in object(s)                                     // 1008\n  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)                        // 1009\n  _.extendOwn = _.assign = createAssigner(_.keys);                                                                     // 1010\n                                                                                                                       // 1011\n  // Returns the first key on an object that passes a predicate test                                                   // 1012\n  _.findKey = function(obj, predicate, context) {                                                                      // 1013\n    predicate = cb(predicate, context);                                                                                // 1014\n    var keys = _.keys(obj), key;                                                                                       // 1015\n    for (var i = 0, length = keys.length; i < length; i++) {                                                           // 1016\n      key = keys[i];                                                                                                   // 1017\n      if (predicate(obj[key], key, obj)) return key;                                                                   // 1018\n    }                                                                                                                  // 1019\n  };                                                                                                                   // 1020\n                                                                                                                       // 1021\n  // Return a copy of the object only containing the whitelisted properties.                                           // 1022\n  _.pick = function(object, oiteratee, context) {                                                                      // 1023\n    var result = {}, obj = object, iteratee, keys;                                                                     // 1024\n    if (obj == null) return result;                                                                                    // 1025\n    if (_.isFunction(oiteratee)) {                                                                                     // 1026\n      keys = _.allKeys(obj);                                                                                           // 1027\n      iteratee = optimizeCb(oiteratee, context);                                                                       // 1028\n    } else {                                                                                                           // 1029\n      keys = flatten(arguments, false, false, 1);                                                                      // 1030\n      iteratee = function(value, key, obj) { return key in obj; };                                                     // 1031\n      obj = Object(obj);                                                                                               // 1032\n    }                                                                                                                  // 1033\n    for (var i = 0, length = keys.length; i < length; i++) {                                                           // 1034\n      var key = keys[i];                                                                                               // 1035\n      var value = obj[key];                                                                                            // 1036\n      if (iteratee(value, key, obj)) result[key] = value;                                                              // 1037\n    }                                                                                                                  // 1038\n    return result;                                                                                                     // 1039\n  };                                                                                                                   // 1040\n                                                                                                                       // 1041\n   // Return a copy of the object without the blacklisted properties.                                                  // 1042\n  _.omit = function(obj, iteratee, context) {                                                                          // 1043\n    if (_.isFunction(iteratee)) {                                                                                      // 1044\n      iteratee = _.negate(iteratee);                                                                                   // 1045\n    } else {                                                                                                           // 1046\n      var keys = _.map(flatten(arguments, false, false, 1), String);                                                   // 1047\n      iteratee = function(value, key) {                                                                                // 1048\n        return !_.contains(keys, key);                                                                                 // 1049\n      };                                                                                                               // 1050\n    }                                                                                                                  // 1051\n    return _.pick(obj, iteratee, context);                                                                             // 1052\n  };                                                                                                                   // 1053\n                                                                                                                       // 1054\n  // Fill in a given object with default properties.                                                                   // 1055\n  _.defaults = createAssigner(_.allKeys, true);                                                                        // 1056\n                                                                                                                       // 1057\n  // Creates an object that inherits from the given prototype object.                                                  // 1058\n  // If additional properties are provided then they will be added to the                                              // 1059\n  // created object.                                                                                                   // 1060\n  _.create = function(prototype, props) {                                                                              // 1061\n    var result = baseCreate(prototype);                                                                                // 1062\n    if (props) _.extendOwn(result, props);                                                                             // 1063\n    return result;                                                                                                     // 1064\n  };                                                                                                                   // 1065\n                                                                                                                       // 1066\n  // Create a (shallow-cloned) duplicate of an object.                                                                 // 1067\n  _.clone = function(obj) {                                                                                            // 1068\n    if (!_.isObject(obj)) return obj;                                                                                  // 1069\n    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);                                                           // 1070\n  };                                                                                                                   // 1071\n                                                                                                                       // 1072\n  // Invokes interceptor with the obj, and then returns obj.                                                           // 1073\n  // The primary purpose of this method is to \"tap into\" a method chain, in                                            // 1074\n  // order to perform operations on intermediate results within the chain.                                             // 1075\n  _.tap = function(obj, interceptor) {                                                                                 // 1076\n    interceptor(obj);                                                                                                  // 1077\n    return obj;                                                                                                        // 1078\n  };                                                                                                                   // 1079\n                                                                                                                       // 1080\n  // Returns whether an object has a given set of `key:value` pairs.                                                   // 1081\n  _.isMatch = function(object, attrs) {                                                                                // 1082\n    var keys = _.keys(attrs), length = keys.length;                                                                    // 1083\n    if (object == null) return !length;                                                                                // 1084\n    var obj = Object(object);                                                                                          // 1085\n    for (var i = 0; i < length; i++) {                                                                                 // 1086\n      var key = keys[i];                                                                                               // 1087\n      if (attrs[key] !== obj[key] || !(key in obj)) return false;                                                      // 1088\n    }                                                                                                                  // 1089\n    return true;                                                                                                       // 1090\n  };                                                                                                                   // 1091\n                                                                                                                       // 1092\n                                                                                                                       // 1093\n  // Internal recursive comparison function for `isEqual`.                                                             // 1094\n  var eq = function(a, b, aStack, bStack) {                                                                            // 1095\n    // Identical objects are equal. `0 === -0`, but they aren't identical.                                             // 1096\n    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).                         // 1097\n    if (a === b) return a !== 0 || 1 / a === 1 / b;                                                                    // 1098\n    // A strict comparison is necessary because `null == undefined`.                                                   // 1099\n    if (a == null || b == null) return a === b;                                                                        // 1100\n    // Unwrap any wrapped objects.                                                                                     // 1101\n    if (a instanceof _) a = a._wrapped;                                                                                // 1102\n    if (b instanceof _) b = b._wrapped;                                                                                // 1103\n    // Compare `[[Class]]` names.                                                                                      // 1104\n    var className = toString.call(a);                                                                                  // 1105\n    if (className !== toString.call(b)) return false;                                                                  // 1106\n    switch (className) {                                                                                               // 1107\n      // Strings, numbers, regular expressions, dates, and booleans are compared by value.                             // 1108\n      case '[object RegExp]':                                                                                          // 1109\n      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')                                    // 1110\n      case '[object String]':                                                                                          // 1111\n        // Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is                           // 1112\n        // equivalent to `new String(\"5\")`.                                                                            // 1113\n        return '' + a === '' + b;                                                                                      // 1114\n      case '[object Number]':                                                                                          // 1115\n        // `NaN`s are equivalent, but non-reflexive.                                                                   // 1116\n        // Object(NaN) is equivalent to NaN                                                                            // 1117\n        if (+a !== +a) return +b !== +b;                                                                               // 1118\n        // An `egal` comparison is performed for other numeric values.                                                 // 1119\n        return +a === 0 ? 1 / +a === 1 / b : +a === +b;                                                                // 1120\n      case '[object Date]':                                                                                            // 1121\n      case '[object Boolean]':                                                                                         // 1122\n        // Coerce dates and booleans to numeric primitive values. Dates are compared by their                          // 1123\n        // millisecond representations. Note that invalid dates with millisecond representations                       // 1124\n        // of `NaN` are not equivalent.                                                                                // 1125\n        return +a === +b;                                                                                              // 1126\n    }                                                                                                                  // 1127\n                                                                                                                       // 1128\n    var areArrays = className === '[object Array]';                                                                    // 1129\n    if (!areArrays) {                                                                                                  // 1130\n      if (typeof a != 'object' || typeof b != 'object') return false;                                                  // 1131\n                                                                                                                       // 1132\n      // Objects with different constructors are not equivalent, but `Object`s or `Array`s                             // 1133\n      // from different frames are.                                                                                    // 1134\n      var aCtor = a.constructor, bCtor = b.constructor;                                                                // 1135\n      if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&                                        // 1136\n                               _.isFunction(bCtor) && bCtor instanceof bCtor)                                          // 1137\n                          && ('constructor' in a && 'constructor' in b)) {                                             // 1138\n        return false;                                                                                                  // 1139\n      }                                                                                                                // 1140\n    }                                                                                                                  // 1141\n    // Assume equality for cyclic structures. The algorithm for detecting cyclic                                       // 1142\n    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.                                     // 1143\n                                                                                                                       // 1144\n    // Initializing stack of traversed objects.                                                                        // 1145\n    // It's done here since we only need them for objects and arrays comparison.                                       // 1146\n    aStack = aStack || [];                                                                                             // 1147\n    bStack = bStack || [];                                                                                             // 1148\n    var length = aStack.length;                                                                                        // 1149\n    while (length--) {                                                                                                 // 1150\n      // Linear search. Performance is inversely proportional to the number of                                         // 1151\n      // unique nested structures.                                                                                     // 1152\n      if (aStack[length] === a) return bStack[length] === b;                                                           // 1153\n    }                                                                                                                  // 1154\n                                                                                                                       // 1155\n    // Add the first object to the stack of traversed objects.                                                         // 1156\n    aStack.push(a);                                                                                                    // 1157\n    bStack.push(b);                                                                                                    // 1158\n                                                                                                                       // 1159\n    // Recursively compare objects and arrays.                                                                         // 1160\n    if (areArrays) {                                                                                                   // 1161\n      // Compare array lengths to determine if a deep comparison is necessary.                                         // 1162\n      length = a.length;                                                                                               // 1163\n      if (length !== b.length) return false;                                                                           // 1164\n      // Deep compare the contents, ignoring non-numeric properties.                                                   // 1165\n      while (length--) {                                                                                               // 1166\n        if (!eq(a[length], b[length], aStack, bStack)) return false;                                                   // 1167\n      }                                                                                                                // 1168\n    } else {                                                                                                           // 1169\n      // Deep compare objects.                                                                                         // 1170\n      var keys = _.keys(a), key;                                                                                       // 1171\n      length = keys.length;                                                                                            // 1172\n      // Ensure that both objects contain the same number of properties before comparing deep equality.                // 1173\n      if (_.keys(b).length !== length) return false;                                                                   // 1174\n      while (length--) {                                                                                               // 1175\n        // Deep compare each member                                                                                    // 1176\n        key = keys[length];                                                                                            // 1177\n        if (!(_.has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;                                      // 1178\n      }                                                                                                                // 1179\n    }                                                                                                                  // 1180\n    // Remove the first object from the stack of traversed objects.                                                    // 1181\n    aStack.pop();                                                                                                      // 1182\n    bStack.pop();                                                                                                      // 1183\n    return true;                                                                                                       // 1184\n  };                                                                                                                   // 1185\n                                                                                                                       // 1186\n  // Perform a deep comparison to check if two objects are equal.                                                      // 1187\n  _.isEqual = function(a, b) {                                                                                         // 1188\n    return eq(a, b);                                                                                                   // 1189\n  };                                                                                                                   // 1190\n                                                                                                                       // 1191\n  // Is a given array, string, or object empty?                                                                        // 1192\n  // An \"empty\" object has no enumerable own-properties.                                                               // 1193\n  _.isEmpty = function(obj) {                                                                                          // 1194\n    if (obj == null) return true;                                                                                      // 1195\n    if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;        // 1196\n    return _.keys(obj).length === 0;                                                                                   // 1197\n  };                                                                                                                   // 1198\n                                                                                                                       // 1199\n  // Is a given value a DOM element?                                                                                   // 1200\n  _.isElement = function(obj) {                                                                                        // 1201\n    return !!(obj && obj.nodeType === 1);                                                                              // 1202\n  };                                                                                                                   // 1203\n                                                                                                                       // 1204\n  // Is a given value an array?                                                                                        // 1205\n  // Delegates to ECMA5's native Array.isArray                                                                         // 1206\n  _.isArray = nativeIsArray || function(obj) {                                                                         // 1207\n    return toString.call(obj) === '[object Array]';                                                                    // 1208\n  };                                                                                                                   // 1209\n                                                                                                                       // 1210\n  // Is a given variable an object?                                                                                    // 1211\n  _.isObject = function(obj) {                                                                                         // 1212\n    var type = typeof obj;                                                                                             // 1213\n    return type === 'function' || type === 'object' && !!obj;                                                          // 1214\n  };                                                                                                                   // 1215\n                                                                                                                       // 1216\n  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError.                  // 1217\n  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error'], function(name) {                    // 1218\n    _['is' + name] = function(obj) {                                                                                   // 1219\n      return toString.call(obj) === '[object ' + name + ']';                                                           // 1220\n    };                                                                                                                 // 1221\n  });                                                                                                                  // 1222\n                                                                                                                       // 1223\n  // Define a fallback version of the method in browsers (ahem, IE < 9), where                                         // 1224\n  // there isn't any inspectable \"Arguments\" type.                                                                     // 1225\n  if (!_.isArguments(arguments)) {                                                                                     // 1226\n    _.isArguments = function(obj) {                                                                                    // 1227\n      return _.has(obj, 'callee');                                                                                     // 1228\n    };                                                                                                                 // 1229\n  }                                                                                                                    // 1230\n                                                                                                                       // 1231\n  // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,                                     // 1232\n  // IE 11 (#1621), and in Safari 8 (#1929).                                                                           // 1233\n  if (typeof /./ != 'function' && typeof Int8Array != 'object') {                                                      // 1234\n    _.isFunction = function(obj) {                                                                                     // 1235\n      return typeof obj == 'function' || false;                                                                        // 1236\n    };                                                                                                                 // 1237\n  }                                                                                                                    // 1238\n                                                                                                                       // 1239\n  // Is a given object a finite number?                                                                                // 1240\n  _.isFinite = function(obj) {                                                                                         // 1241\n    return isFinite(obj) && !isNaN(parseFloat(obj));                                                                   // 1242\n  };                                                                                                                   // 1243\n                                                                                                                       // 1244\n  // Is the given value `NaN`? (NaN is the only number which does not equal itself).                                   // 1245\n  _.isNaN = function(obj) {                                                                                            // 1246\n    return _.isNumber(obj) && obj !== +obj;                                                                            // 1247\n  };                                                                                                                   // 1248\n                                                                                                                       // 1249\n  // Is a given value a boolean?                                                                                       // 1250\n  _.isBoolean = function(obj) {                                                                                        // 1251\n    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';                                 // 1252\n  };                                                                                                                   // 1253\n                                                                                                                       // 1254\n  // Is a given value equal to null?                                                                                   // 1255\n  _.isNull = function(obj) {                                                                                           // 1256\n    return obj === null;                                                                                               // 1257\n  };                                                                                                                   // 1258\n                                                                                                                       // 1259\n  // Is a given variable undefined?                                                                                    // 1260\n  _.isUndefined = function(obj) {                                                                                      // 1261\n    return obj === void 0;                                                                                             // 1262\n  };                                                                                                                   // 1263\n                                                                                                                       // 1264\n  // Shortcut function for checking if an object has a given property directly                                         // 1265\n  // on itself (in other words, not on a prototype).                                                                   // 1266\n  _.has = function(obj, key) {                                                                                         // 1267\n    return obj != null && hasOwnProperty.call(obj, key);                                                               // 1268\n  };                                                                                                                   // 1269\n                                                                                                                       // 1270\n  // Utility Functions                                                                                                 // 1271\n  // -----------------                                                                                                 // 1272\n                                                                                                                       // 1273\n  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its                                         // 1274\n  // previous owner. Returns a reference to the Underscore object.                                                     // 1275\n  _.noConflict = function() {                                                                                          // 1276\n    root._ = previousUnderscore;                                                                                       // 1277\n    return this;                                                                                                       // 1278\n  };                                                                                                                   // 1279\n                                                                                                                       // 1280\n  // Keep the identity function around for default iteratees.                                                          // 1281\n  _.identity = function(value) {                                                                                       // 1282\n    return value;                                                                                                      // 1283\n  };                                                                                                                   // 1284\n                                                                                                                       // 1285\n  // Predicate-generating functions. Often useful outside of Underscore.                                               // 1286\n  _.constant = function(value) {                                                                                       // 1287\n    return function() {                                                                                                // 1288\n      return value;                                                                                                    // 1289\n    };                                                                                                                 // 1290\n  };                                                                                                                   // 1291\n                                                                                                                       // 1292\n  _.noop = function(){};                                                                                               // 1293\n                                                                                                                       // 1294\n  _.property = property;                                                                                               // 1295\n                                                                                                                       // 1296\n  // Generates a function for a given object that returns a given property.                                            // 1297\n  _.propertyOf = function(obj) {                                                                                       // 1298\n    return obj == null ? function(){} : function(key) {                                                                // 1299\n      return obj[key];                                                                                                 // 1300\n    };                                                                                                                 // 1301\n  };                                                                                                                   // 1302\n                                                                                                                       // 1303\n  // Returns a predicate for checking whether an object has a given set of                                             // 1304\n  // `key:value` pairs.                                                                                                // 1305\n  _.matcher = _.matches = function(attrs) {                                                                            // 1306\n    attrs = _.extendOwn({}, attrs);                                                                                    // 1307\n    return function(obj) {                                                                                             // 1308\n      return _.isMatch(obj, attrs);                                                                                    // 1309\n    };                                                                                                                 // 1310\n  };                                                                                                                   // 1311\n                                                                                                                       // 1312\n  // Run a function **n** times.                                                                                       // 1313\n  _.times = function(n, iteratee, context) {                                                                           // 1314\n    var accum = Array(Math.max(0, n));                                                                                 // 1315\n    iteratee = optimizeCb(iteratee, context, 1);                                                                       // 1316\n    for (var i = 0; i < n; i++) accum[i] = iteratee(i);                                                                // 1317\n    return accum;                                                                                                      // 1318\n  };                                                                                                                   // 1319\n                                                                                                                       // 1320\n  // Return a random integer between min and max (inclusive).                                                          // 1321\n  _.random = function(min, max) {                                                                                      // 1322\n    if (max == null) {                                                                                                 // 1323\n      max = min;                                                                                                       // 1324\n      min = 0;                                                                                                         // 1325\n    }                                                                                                                  // 1326\n    return min + Math.floor(Math.random() * (max - min + 1));                                                          // 1327\n  };                                                                                                                   // 1328\n                                                                                                                       // 1329\n  // A (possibly faster) way to get the current timestamp as an integer.                                               // 1330\n  _.now = Date.now || function() {                                                                                     // 1331\n    return new Date().getTime();                                                                                       // 1332\n  };                                                                                                                   // 1333\n                                                                                                                       // 1334\n   // List of HTML entities for escaping.                                                                              // 1335\n  var escapeMap = {                                                                                                    // 1336\n    '&': '&amp;',                                                                                                      // 1337\n    '<': '&lt;',                                                                                                       // 1338\n    '>': '&gt;',                                                                                                       // 1339\n    '\"': '&quot;',                                                                                                     // 1340\n    \"'\": '&#x27;',                                                                                                     // 1341\n    '`': '&#x60;'                                                                                                      // 1342\n  };                                                                                                                   // 1343\n  var unescapeMap = _.invert(escapeMap);                                                                               // 1344\n                                                                                                                       // 1345\n  // Functions for escaping and unescaping strings to/from HTML interpolation.                                         // 1346\n  var createEscaper = function(map) {                                                                                  // 1347\n    var escaper = function(match) {                                                                                    // 1348\n      return map[match];                                                                                               // 1349\n    };                                                                                                                 // 1350\n    // Regexes for identifying a key that needs to be escaped                                                          // 1351\n    var source = '(?:' + _.keys(map).join('|') + ')';                                                                  // 1352\n    var testRegexp = RegExp(source);                                                                                   // 1353\n    var replaceRegexp = RegExp(source, 'g');                                                                           // 1354\n    return function(string) {                                                                                          // 1355\n      string = string == null ? '' : '' + string;                                                                      // 1356\n      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;                                // 1357\n    };                                                                                                                 // 1358\n  };                                                                                                                   // 1359\n  _.escape = createEscaper(escapeMap);                                                                                 // 1360\n  _.unescape = createEscaper(unescapeMap);                                                                             // 1361\n                                                                                                                       // 1362\n  // If the value of the named `property` is a function then invoke it with the                                        // 1363\n  // `object` as context; otherwise, return it.                                                                        // 1364\n  _.result = function(object, property, fallback) {                                                                    // 1365\n    var value = object == null ? void 0 : object[property];                                                            // 1366\n    if (value === void 0) {                                                                                            // 1367\n      value = fallback;                                                                                                // 1368\n    }                                                                                                                  // 1369\n    return _.isFunction(value) ? value.call(object) : value;                                                           // 1370\n  };                                                                                                                   // 1371\n                                                                                                                       // 1372\n  // Generate a unique integer id (unique within the entire client session).                                           // 1373\n  // Useful for temporary DOM ids.                                                                                     // 1374\n  var idCounter = 0;                                                                                                   // 1375\n  _.uniqueId = function(prefix) {                                                                                      // 1376\n    var id = ++idCounter + '';                                                                                         // 1377\n    return prefix ? prefix + id : id;                                                                                  // 1378\n  };                                                                                                                   // 1379\n                                                                                                                       // 1380\n  // By default, Underscore uses ERB-style template delimiters, change the                                             // 1381\n  // following template settings to use alternative delimiters.                                                        // 1382\n  _.templateSettings = {                                                                                               // 1383\n    evaluate    : /<%([\\s\\S]+?)%>/g,                                                                                   // 1384\n    interpolate : /<%=([\\s\\S]+?)%>/g,                                                                                  // 1385\n    escape      : /<%-([\\s\\S]+?)%>/g                                                                                   // 1386\n  };                                                                                                                   // 1387\n                                                                                                                       // 1388\n  // When customizing `templateSettings`, if you don't want to define an                                               // 1389\n  // interpolation, evaluation or escaping regex, we need one that is                                                  // 1390\n  // guaranteed not to match.                                                                                          // 1391\n  var noMatch = /(.)^/;                                                                                                // 1392\n                                                                                                                       // 1393\n  // Certain characters need to be escaped so that they can be put into a                                              // 1394\n  // string literal.                                                                                                   // 1395\n  var escapes = {                                                                                                      // 1396\n    \"'\":      \"'\",                                                                                                     // 1397\n    '\\\\':     '\\\\',                                                                                                    // 1398\n    '\\r':     'r',                                                                                                     // 1399\n    '\\n':     'n',                                                                                                     // 1400\n    '\\u2028': 'u2028',                                                                                                 // 1401\n    '\\u2029': 'u2029'                                                                                                  // 1402\n  };                                                                                                                   // 1403\n                                                                                                                       // 1404\n  var escaper = /\\\\|'|\\r|\\n|\\u2028|\\u2029/g;                                                                           // 1405\n                                                                                                                       // 1406\n  var escapeChar = function(match) {                                                                                   // 1407\n    return '\\\\' + escapes[match];                                                                                      // 1408\n  };                                                                                                                   // 1409\n                                                                                                                       // 1410\n  // JavaScript micro-templating, similar to John Resig's implementation.                                              // 1411\n  // Underscore templating handles arbitrary delimiters, preserves whitespace,                                         // 1412\n  // and correctly escapes quotes within interpolated code.                                                            // 1413\n  // NB: `oldSettings` only exists for backwards compatibility.                                                        // 1414\n  _.template = function(text, settings, oldSettings) {                                                                 // 1415\n    if (!settings && oldSettings) settings = oldSettings;                                                              // 1416\n    settings = _.defaults({}, settings, _.templateSettings);                                                           // 1417\n                                                                                                                       // 1418\n    // Combine delimiters into one regular expression via alternation.                                                 // 1419\n    var matcher = RegExp([                                                                                             // 1420\n      (settings.escape || noMatch).source,                                                                             // 1421\n      (settings.interpolate || noMatch).source,                                                                        // 1422\n      (settings.evaluate || noMatch).source                                                                            // 1423\n    ].join('|') + '|$', 'g');                                                                                          // 1424\n                                                                                                                       // 1425\n    // Compile the template source, escaping string literals appropriately.                                            // 1426\n    var index = 0;                                                                                                     // 1427\n    var source = \"__p+='\";                                                                                             // 1428\n    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {                                     // 1429\n      source += text.slice(index, offset).replace(escaper, escapeChar);                                                // 1430\n      index = offset + match.length;                                                                                   // 1431\n                                                                                                                       // 1432\n      if (escape) {                                                                                                    // 1433\n        source += \"'+\\n((__t=(\" + escape + \"))==null?'':_.escape(__t))+\\n'\";                                           // 1434\n      } else if (interpolate) {                                                                                        // 1435\n        source += \"'+\\n((__t=(\" + interpolate + \"))==null?'':__t)+\\n'\";                                                // 1436\n      } else if (evaluate) {                                                                                           // 1437\n        source += \"';\\n\" + evaluate + \"\\n__p+='\";                                                                      // 1438\n      }                                                                                                                // 1439\n                                                                                                                       // 1440\n      // Adobe VMs need the match returned to produce the correct offest.                                              // 1441\n      return match;                                                                                                    // 1442\n    });                                                                                                                // 1443\n    source += \"';\\n\";                                                                                                  // 1444\n                                                                                                                       // 1445\n    // If a variable is not specified, place data values in local scope.                                               // 1446\n    if (!settings.variable) source = 'with(obj||{}){\\n' + source + '}\\n';                                              // 1447\n                                                                                                                       // 1448\n    source = \"var __t,__p='',__j=Array.prototype.join,\" +                                                              // 1449\n      \"print=function(){__p+=__j.call(arguments,'');};\\n\" +                                                            // 1450\n      source + 'return __p;\\n';                                                                                        // 1451\n                                                                                                                       // 1452\n    try {                                                                                                              // 1453\n      var render = new Function(settings.variable || 'obj', '_', source);                                              // 1454\n    } catch (e) {                                                                                                      // 1455\n      e.source = source;                                                                                               // 1456\n      throw e;                                                                                                         // 1457\n    }                                                                                                                  // 1458\n                                                                                                                       // 1459\n    var template = function(data) {                                                                                    // 1460\n      return render.call(this, data, _);                                                                               // 1461\n    };                                                                                                                 // 1462\n                                                                                                                       // 1463\n    // Provide the compiled source as a convenience for precompilation.                                                // 1464\n    var argument = settings.variable || 'obj';                                                                         // 1465\n    template.source = 'function(' + argument + '){\\n' + source + '}';                                                  // 1466\n                                                                                                                       // 1467\n    return template;                                                                                                   // 1468\n  };                                                                                                                   // 1469\n                                                                                                                       // 1470\n  // Add a \"chain\" function. Start chaining a wrapped Underscore object.                                               // 1471\n  _.chain = function(obj) {                                                                                            // 1472\n    var instance = _(obj);                                                                                             // 1473\n    instance._chain = true;                                                                                            // 1474\n    return instance;                                                                                                   // 1475\n  };                                                                                                                   // 1476\n                                                                                                                       // 1477\n  // OOP                                                                                                               // 1478\n  // ---------------                                                                                                   // 1479\n  // If Underscore is called as a function, it returns a wrapped object that                                           // 1480\n  // can be used OO-style. This wrapper holds altered versions of all the                                              // 1481\n  // underscore functions. Wrapped objects may be chained.                                                             // 1482\n                                                                                                                       // 1483\n  // Helper function to continue chaining intermediate results.                                                        // 1484\n  var result = function(instance, obj) {                                                                               // 1485\n    return instance._chain ? _(obj).chain() : obj;                                                                     // 1486\n  };                                                                                                                   // 1487\n                                                                                                                       // 1488\n  // Add your own custom functions to the Underscore object.                                                           // 1489\n  _.mixin = function(obj) {                                                                                            // 1490\n    _.each(_.functions(obj), function(name) {                                                                          // 1491\n      var func = _[name] = obj[name];                                                                                  // 1492\n      _.prototype[name] = function() {                                                                                 // 1493\n        var args = [this._wrapped];                                                                                    // 1494\n        push.apply(args, arguments);                                                                                   // 1495\n        return result(this, func.apply(_, args));                                                                      // 1496\n      };                                                                                                               // 1497\n    });                                                                                                                // 1498\n  };                                                                                                                   // 1499\n                                                                                                                       // 1500\n  // Add all of the Underscore functions to the wrapper object.                                                        // 1501\n  _.mixin(_);                                                                                                          // 1502\n                                                                                                                       // 1503\n  // Add all mutator Array functions to the wrapper.                                                                   // 1504\n  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {                            // 1505\n    var method = ArrayProto[name];                                                                                     // 1506\n    _.prototype[name] = function() {                                                                                   // 1507\n      var obj = this._wrapped;                                                                                         // 1508\n      method.apply(obj, arguments);                                                                                    // 1509\n      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];                                  // 1510\n      return result(this, obj);                                                                                        // 1511\n    };                                                                                                                 // 1512\n  });                                                                                                                  // 1513\n                                                                                                                       // 1514\n  // Add all accessor Array functions to the wrapper.                                                                  // 1515\n  _.each(['concat', 'join', 'slice'], function(name) {                                                                 // 1516\n    var method = ArrayProto[name];                                                                                     // 1517\n    _.prototype[name] = function() {                                                                                   // 1518\n      return result(this, method.apply(this._wrapped, arguments));                                                     // 1519\n    };                                                                                                                 // 1520\n  });                                                                                                                  // 1521\n                                                                                                                       // 1522\n  // Extracts the result from a wrapped and chained object.                                                            // 1523\n  _.prototype.value = function() {                                                                                     // 1524\n    return this._wrapped;                                                                                              // 1525\n  };                                                                                                                   // 1526\n                                                                                                                       // 1527\n  // Provide unwrapping proxy for some methods used in engine operations                                               // 1528\n  // such as arithmetic and JSON stringification.                                                                      // 1529\n  _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;                                                        // 1530\n                                                                                                                       // 1531\n  _.prototype.toString = function() {                                                                                  // 1532\n    return '' + this._wrapped;                                                                                         // 1533\n  };                                                                                                                   // 1534\n                                                                                                                       // 1535\n  // AMD registration happens at the end for compatibility with AMD loaders                                            // 1536\n  // that may not enforce next-turn semantics on modules. Even though general                                          // 1537\n  // practice for AMD registration is to be anonymous, underscore registers                                            // 1538\n  // as a named module because, like jQuery, it is a base library that is                                              // 1539\n  // popular enough to be bundled in a third party lib, but not be part of                                             // 1540\n  // an AMD load request. Those cases could generate an error when an                                                  // 1541\n  // anonymous define() is called outside of a loader request.                                                         // 1542\n  if (typeof define === 'function' && define.amd) {                                                                    // 1543\n    define('underscore', [], function() {                                                                              // 1544\n      return _;                                                                                                        // 1545\n    });                                                                                                                // 1546\n  }                                                                                                                    // 1547\n}.call(this));                                                                                                         // 1548\n                                                                                                                       // 1549\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"react-dom\":{\"package.json\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/package.json                                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"react-dom\";                                                                                            // 1\nexports.main = \"index.js\";                                                                                             // 2\n                                                                                                                       // 3\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":[\"react/lib/ReactDOM\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/react-dom/index.js                                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n'use strict';                                                                                                          // 1\n                                                                                                                       // 2\nmodule.exports = require('react/lib/ReactDOM');                                                                        // 3\n                                                                                                                       // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]}}});\nrequire(\"./client/index.html\");\nrequire(\"./client/components/game/home/home.jsx\");\nrequire(\"./client/components/game/program_list_item/program_list_item.jsx\");\nrequire(\"./client/components/game/setup/setup.jsx\");\nrequire(\"./client/builders/definition/builder.js\");\nrequire(\"./client/containers/game/game.jsx\");\nrequire(\"./client/rules/definition/rule.js\");\nrequire(\"./client/strategies/definition/strategy.js\");\nrequire(\"./client/builders/company-builder.js\");\nrequire(\"./client/builders/goal-builder.js\");\nrequire(\"./client/builders/industry-builder.js\");\nrequire(\"./client/data/companyNames.js\");\nrequire(\"./client/data/goals.js\");\nrequire(\"./client/data/industries.js\");\nrequire(\"./client/models/company.js\");\nrequire(\"./client/models/game.js\");\nrequire(\"./client/models/goal.js\");\nrequire(\"./client/models/industry.js\");\nrequire(\"./client/rules/action-points-rule.js\");\nrequire(\"./client/rules/market-size-rule.js\");\nrequire(\"./client/rules/material-costs-rule.js\");\nrequire(\"./client/rules/production-cap-rule.js\");\nrequire(\"./client/rules/quarter-cash-flow-rule.js\");\nrequire(\"./client/rules/quarter-costs-rule.js\");\nrequire(\"./client/rules/quarter-sales-rule.js\");\nrequire(\"./client/stores/game-store.js\");\nrequire(\"./client/stores/scene-store.jsx\");\nrequire(\"./client/strategies/point-distribution-strategy.js\");\nrequire(\"./client/strategies/quarter-customer-perception-strategy.js\");\nrequire(\"./client/strategies/random-company-building-strategy.js\");\nrequire(\"./client/utils/random.js\");\nrequire(\"./client/utils/templating.js\");\nrequire(\"./client/index.jsx\");","servePath":"/app.js","sourceMap":{"version":3,"sources":["/client/template.index.js","/client/components/game/home/home.jsx","/client/components/game/program_list_item/program_list_item.jsx","/client/components/game/setup/setup.jsx","/client/builders/definition/builder.js","/client/builders/company-builder.js","/client/builders/goal-builder.js","/client/builders/industry-builder.js","/client/containers/game/game.jsx","/client/rules/definition/rule.js","/client/rules/action-points-rule.js","/client/rules/market-size-rule.js","/client/rules/material-costs-rule.js","/client/rules/production-cap-rule.js","/client/rules/quarter-cash-flow-rule.js","/client/rules/quarter-costs-rule.js","/client/rules/quarter-sales-rule.js","/client/strategies/definition/strategy.js","/client/strategies/point-distribution-strategy.js","/client/strategies/quarter-customer-perception-strategy.js","/client/strategies/random-company-building-strategy.js","/client/data/companyNames.js","/client/data/goals.js","/client/data/industries.js","/client/models/company.js","/client/models/game.js","/client/models/goal.js","/client/models/industry.js","/client/stores/game-store.js","/client/stores/scene-store.jsx","/client/utils/random.js","/client/utils/templating.js","/client/index.jsx","node_modules/react/package.json","node_modules/react/react.js","node_modules/react/lib/React.js","node_modules/react/lib/ReactDOM.js","node_modules/react/lib/ReactCurrentOwner.js","node_modules/react/lib/ReactDOMTextComponent.js","node_modules/react/lib/DOMChildrenOperations.js","node_modules/react/lib/Danger.js","node_modules/react/lib/ReactMultiChildUpdateTypes.js","node_modules/react/lib/ReactPerf.js","node_modules/react/lib/setInnerHTML.js","node_modules/react/lib/setTextContent.js","node_modules/react/lib/escapeTextContentForBrowser.js","node_modules/react/lib/DOMPropertyOperations.js","node_modules/react/lib/DOMProperty.js","node_modules/react/lib/quoteAttributeValueForBrowser.js","node_modules/react/lib/ReactComponentBrowserEnvironment.js","node_modules/react/lib/ReactDOMIDOperations.js","node_modules/react/lib/ReactMount.js","node_modules/react/lib/ReactBrowserEventEmitter.js","node_modules/react/lib/EventConstants.js","node_modules/react/lib/EventPluginHub.js","node_modules/react/lib/EventPluginRegistry.js","node_modules/react/lib/EventPluginUtils.js","node_modules/react/lib/ReactErrorUtils.js","node_modules/react/lib/accumulateInto.js","node_modules/react/lib/forEachAccumulated.js","node_modules/react/lib/ReactEventEmitterMixin.js","node_modules/react/lib/ViewportMetrics.js","node_modules/react/lib/Object.assign.js","node_modules/react/lib/isEventSupported.js","node_modules/react/lib/ReactDOMFeatureFlags.js","node_modules/react/lib/ReactElement.js","node_modules/react/lib/canDefineProperty.js","node_modules/react/lib/ReactEmptyComponentRegistry.js","node_modules/react/lib/ReactInstanceHandles.js","node_modules/react/lib/ReactRootIndex.js","node_modules/react/lib/ReactInstanceMap.js","node_modules/react/lib/ReactMarkupChecksum.js","node_modules/react/lib/adler32.js","node_modules/react/lib/ReactReconciler.js","node_modules/react/lib/ReactRef.js","node_modules/react/lib/ReactOwner.js","node_modules/react/lib/ReactUpdateQueue.js","node_modules/react/lib/ReactUpdates.js","node_modules/react/lib/CallbackQueue.js","node_modules/react/lib/PooledClass.js","node_modules/react/lib/Transaction.js","node_modules/react/lib/instantiateReactComponent.js","node_modules/react/lib/ReactCompositeComponent.js","node_modules/react/lib/ReactComponentEnvironment.js","node_modules/react/lib/ReactPropTypeLocations.js","node_modules/react/lib/ReactPropTypeLocationNames.js","node_modules/react/lib/shouldUpdateReactComponent.js","node_modules/react/lib/ReactEmptyComponent.js","node_modules/react/lib/ReactNativeComponent.js","node_modules/react/lib/validateDOMNesting.js","node_modules/react/lib/ReactDefaultInjection.js","node_modules/react/lib/BeforeInputEventPlugin.js","node_modules/react/lib/EventPropagators.js","node_modules/react/lib/FallbackCompositionState.js","node_modules/react/lib/getTextContentAccessor.js","node_modules/react/lib/SyntheticCompositionEvent.js","node_modules/react/lib/SyntheticEvent.js","node_modules/react/lib/SyntheticInputEvent.js","node_modules/react/lib/ChangeEventPlugin.js","node_modules/react/lib/getEventTarget.js","node_modules/react/lib/isTextInputElement.js","node_modules/react/lib/ClientReactRootIndex.js","node_modules/react/lib/DefaultEventPluginOrder.js","node_modules/react/lib/EnterLeaveEventPlugin.js","node_modules/react/lib/SyntheticMouseEvent.js","node_modules/react/lib/SyntheticUIEvent.js","node_modules/react/lib/getEventModifierState.js","node_modules/react/lib/HTMLDOMPropertyConfig.js","node_modules/react/lib/ReactBrowserComponentMixin.js","node_modules/react/lib/findDOMNode.js","node_modules/react/lib/ReactDefaultBatchingStrategy.js","node_modules/react/lib/ReactDOMComponent.js","node_modules/react/lib/AutoFocusUtils.js","node_modules/react/lib/CSSPropertyOperations.js","node_modules/react/lib/CSSProperty.js","node_modules/react/lib/dangerousStyleValue.js","node_modules/react/lib/ReactDOMButton.js","node_modules/react/lib/ReactDOMInput.js","node_modules/react/lib/LinkedValueUtils.js","node_modules/react/lib/ReactPropTypes.js","node_modules/react/lib/getIteratorFn.js","node_modules/react/lib/ReactDOMOption.js","node_modules/react/lib/ReactChildren.js","node_modules/react/lib/traverseAllChildren.js","node_modules/react/lib/ReactDOMSelect.js","node_modules/react/lib/ReactDOMTextarea.js","node_modules/react/lib/ReactMultiChild.js","node_modules/react/lib/ReactChildReconciler.js","node_modules/react/lib/flattenChildren.js","node_modules/react/lib/ReactEventListener.js","node_modules/react/lib/ReactInjection.js","node_modules/react/lib/ReactClass.js","node_modules/react/lib/ReactComponent.js","node_modules/react/lib/ReactNoopUpdateQueue.js","node_modules/react/lib/ReactReconcileTransaction.js","node_modules/react/lib/ReactInputSelection.js","node_modules/react/lib/ReactDOMSelection.js","node_modules/react/lib/getNodeForCharacterOffset.js","node_modules/react/lib/SelectEventPlugin.js","node_modules/react/lib/ServerReactRootIndex.js","node_modules/react/lib/SimpleEventPlugin.js","node_modules/react/lib/SyntheticClipboardEvent.js","node_modules/react/lib/SyntheticFocusEvent.js","node_modules/react/lib/SyntheticKeyboardEvent.js","node_modules/react/lib/getEventCharCode.js","node_modules/react/lib/getEventKey.js","node_modules/react/lib/SyntheticDragEvent.js","node_modules/react/lib/SyntheticTouchEvent.js","node_modules/react/lib/SyntheticWheelEvent.js","node_modules/react/lib/SVGDOMPropertyConfig.js","node_modules/react/lib/ReactDefaultPerf.js","node_modules/react/lib/ReactDefaultPerfAnalysis.js","node_modules/react/lib/ReactVersion.js","node_modules/react/lib/renderSubtreeIntoContainer.js","node_modules/react/lib/ReactDOMServer.js","node_modules/react/lib/ReactServerRendering.js","node_modules/react/lib/ReactServerBatchingStrategy.js","node_modules/react/lib/ReactServerRenderingTransaction.js","node_modules/react/lib/ReactIsomorphic.js","node_modules/react/lib/ReactDOMFactories.js","node_modules/react/lib/ReactElementValidator.js","node_modules/react/lib/onlyChild.js","node_modules/react/lib/deprecated.js","node_modules/react/node_modules/fbjs/lib/ExecutionEnvironment.js","node_modules/react/node_modules/fbjs/lib/createNodesFromMarkup.js","node_modules/react/node_modules/fbjs/lib/createArrayFromMixed.js","node_modules/react/node_modules/fbjs/lib/toArray.js","node_modules/react/node_modules/fbjs/lib/invariant.js","node_modules/react/node_modules/fbjs/lib/getMarkupWrap.js","node_modules/react/node_modules/fbjs/lib/emptyFunction.js","node_modules/react/node_modules/fbjs/lib/keyMirror.js","node_modules/react/node_modules/fbjs/lib/warning.js","node_modules/react/node_modules/fbjs/lib/emptyObject.js","node_modules/react/node_modules/fbjs/lib/containsNode.js","node_modules/react/node_modules/fbjs/lib/isTextNode.js","node_modules/react/node_modules/fbjs/lib/isNode.js","node_modules/react/node_modules/fbjs/lib/keyOf.js","node_modules/react/node_modules/fbjs/lib/focusNode.js","node_modules/react/node_modules/fbjs/lib/camelizeStyleName.js","node_modules/react/node_modules/fbjs/lib/camelize.js","node_modules/react/node_modules/fbjs/lib/hyphenateStyleName.js","node_modules/react/node_modules/fbjs/lib/hyphenate.js","node_modules/react/node_modules/fbjs/lib/memoizeStringOnly.js","node_modules/react/node_modules/fbjs/lib/shallowEqual.js","node_modules/react/node_modules/fbjs/lib/EventListener.js","node_modules/react/node_modules/fbjs/lib/getUnboundedScrollPosition.js","node_modules/react/node_modules/fbjs/lib/getActiveElement.js","node_modules/react/node_modules/fbjs/lib/performanceNow.js","node_modules/react/node_modules/fbjs/lib/performance.js","node_modules/react/node_modules/fbjs/lib/mapObject.js","node_modules/reflux/package.json","node_modules/reflux/src/index.js","node_modules/reflux/src/connect.js","node_modules/reflux/src/ListenerMixin.js","node_modules/reflux/src/connectFilter.js","node_modules/reflux/src/listenTo.js","node_modules/reflux/src/listenToMany.js","node_modules/reflux/node_modules/reflux-core/package.json","node_modules/reflux/node_modules/reflux-core/lib/index.js","node_modules/reflux/node_modules/reflux-core/lib/ActionMethods.js","node_modules/reflux/node_modules/reflux-core/lib/ListenerMethods.js","node_modules/reflux/node_modules/reflux-core/lib/utils.js","node_modules/reflux/node_modules/reflux-core/lib/joins.js","node_modules/reflux/node_modules/reflux-core/lib/createStore.js","node_modules/reflux/node_modules/reflux-core/lib/Keep.js","node_modules/reflux/node_modules/reflux-core/lib/mixer.js","node_modules/reflux/node_modules/reflux-core/lib/bindMethods.js","node_modules/reflux/node_modules/reflux-core/lib/StoreMethods.js","node_modules/reflux/node_modules/reflux-core/lib/PublisherMethods.js","node_modules/reflux/node_modules/reflux-core/lib/createAction.js","node_modules/reflux/node_modules/eventemitter3/package.json","node_modules/reflux/node_modules/eventemitter3/index.js","node_modules/underscore/package.json","node_modules/underscore/underscore.js","node_modules/react-dom/package.json","node_modules/react-dom/index.js"],"names":[],"mappings":";;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA,2H;;;;;;;;;;;;;qBCNkB,OAAO;;;;6BACP,oBAAoB;;;;mCACX,iCAAiC;;qBAE7C,mBAAM,WAAW,CAAC;;;AAC/B,YAAU,YAAC,CAAC,EAAE;AACZ,KAAC,CAAC,cAAc,EAAE,CAAC;;AAEnB,sCAAa,UAAU,CAAC,kEAAS,CAAC,CAAC;GACpC;;AAED,QAAM,cAAG;AACP,WACE;;QAAK,WAAW,EAAC,EAAE;MACjB;;;;OAAuB;MACvB;;UAAQ,OAAO,EAAE,IAAI,CAAC,UAAW;;OAAc;KAC3C,CACN;GACH;CACF,CAAC;;;;;;;;;;;;;;qBCnBiB,OAAO;;;;mCACC,iCAAiC;;qBAE7C,mBAAM,WAAW,CAAC;;;AAC/B,cAAU,YAAC,CAAC,EAAE;AACZ,SAAC,CAAC,cAAc,EAAE,CAAC;;AAEnB,0CAAa,UAAU,CAAC,iCAAC,eAAe,OAAG,CAAC,CAAC;KAC9C;;AAEC,UAAM,cAAG;AACL,eACI;;cAAM,KAAK,EAAG,iBAAiB;YAC3B;;;;aAAU;YACV;;kBAAQ,OAAO,EAAE,IAAI,CAAC,UAAW;;aAAc;SAC7C,CACR;KACL;CACJ,CAAC;;;;;;;;;;;;;;;;;qBCfgB,OAAO;;;;sBACN,QAAQ;;;;+BACU,4BAA4B;;qBAElD,mBAAM,WAAW,CAAC;;;AAC/B,QAAM,EAAE,CAAE,oBAAO,OAAO,6BAAY,MAAM,CAAC,CAAE;;AAE7C,iBAAe,YAAC,CAAC,EAAE;AACjB,KAAC,CAAC,cAAc,EAAE,CAAC;;AAEnB,iCAAY,MAAM,EAAE,CAAC;GACtB;;AAED,aAAW,YAAC,CAAC,EAAE;AACb,KAAC,CAAC,cAAc,EAAE,CAAC;;;GAGpB;;AAED,QAAM,cAAG;AACP,WACE;;;MACE;;;QAAK,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI;OAAM;MAC/B;;;;QAAqB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO;OAAK;MACjD;;;;QAAc,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ;OAAK;MAC3C;;;;QAAa,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI;OAAK;MAC/C;;;;QAAwB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,iBAAiB;OAAK;MAC9D;;;;QAA0B,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,oBAAoB;OAAK;MACnE;;;;QAAoC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,mBAAmB;OAAK;MAC5E;;;;QAAS,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI;OAAK;MACvC;;UAAQ,OAAO,EAAE,IAAI,CAAC,eAAgB;;OAAmB;MACzD;;UAAQ,OAAO,EAAE,IAAI,CAAC,WAAY;;OAAe;KAC7C,CACN;GACH;CACF,CAAC;;;;;;;;;;;;;;;;;;;;;;;IC7BmB,OAAO;WAAP,OAAO;sCAAP,OAAO;;;AAAP,SAAO,WAC1B,KAAK;AAAA,qBAAG,EAAE;;;;;SADS,OAAO;;;qBAAP,OAAO;;;;;;;;;;;;;;iCCTO,sBAAsB;;;;6BACtB,mBAAmB;;;;;;;;;;;IAQjC,cAAc;wBAAd,cAAc;;AACtB,WADQ,cAAc,GACnB;sCADK,cAAc;;AAE/B,uBAAO,CAAC;;AAER,QAAI,CAAC,OAAO,GAAG,EAAE,CAAC;AAClB,QAAI,CAAC,OAAO,CAAC,IAAI,GAAG,cAAc,CAAC;AACnC,QAAI,CAAC,OAAO,CAAC,OAAO,GAAG,QAAQ,CAAC;AAChC,QAAI,CAAC,OAAO,CAAC,QAAQ,GAAG,EAAE,CAAC;AAC3B,QAAI,CAAC,OAAO,CAAC,IAAI,GAAG,EAAE,CAAC;AACvB,QAAI,CAAC,OAAO,CAAC,iBAAiB,GAAG,KAAK,CAAC;AACvC,QAAI,CAAC,OAAO,CAAC,iBAAiB,GAAG,CAAC,CAAC;AACnC,QAAI,CAAC,OAAO,CAAC,wBAAwB,GAAG,GAAG,CAAC;AAC5C,QAAI,CAAC,OAAO,CAAC,YAAY,GAAG,CAAC,CAAC;AAC9B,QAAI,CAAC,OAAO,CAAC,mBAAmB,GAAG,GAAG,CAAC;AACvC,QAAI,CAAC,OAAO,CAAC,oBAAoB,GAAG,GAAG,CAAC;GACzC;;AAfkB,gBAAc,WAiBjC,OAAO;AAAA,qBAAC,IAAI,EAAE;AACZ,UAAI,CAAC,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC;KAC1B;;;;;AAnBkB,gBAAc,WAqBjC,UAAU;AAAA,wBAAC,OAAO,EAAE;AAClB,UAAI,CAAC,OAAO,CAAC,OAAO,GAAG,OAAO,CAAC;KAChC;;;;;AAvBkB,gBAAc,WAyBjC,WAAW;AAAA,yBAAE,QAAQ,EAAG;;AAEtB,UAAI,CAAC,OAAO,CAAC,QAAQ,GAAG,QAAQ,CAAC;KAClC;;;;;AA5BkB,gBAAc,WA8BjC,OAAO;AAAA,qBAAE,IAAI,EAAG;;AAEd,UAAI,CAAC,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC;KAC1B;;;;;AAjCkB,gBAAc,WAmCjC,oBAAoB;AAAA,kCAAE,iBAAiB,EAAG;AACxC,UAAI,CAAC,OAAO,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;KACpD;;;;;AArCkB,gBAAc,WAuCjC,oBAAoB;AAAA,kCAAE,iBAAiB,EAAG;AACxC,UAAI,CAAC,OAAO,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;KACpD;;;;;AAzCkB,gBAAc,WA2CjC,2BAA2B;AAAA,yCAAE,wBAAwB,EAAG;AACtD,UAAI,CAAC,OAAO,CAAC,wBAAwB,GAAG,wBAAwB,CAAC;KAClE;;;;;AA7CkB,gBAAc,WA+CjC,eAAe;AAAA,6BAAE,YAAY,EAAG;AAC9B,UAAI,CAAC,OAAO,CAAC,YAAY,GAAG,YAAY,CAAC;KAC1C;;;;;AAjDkB,gBAAc,WAmDjC,sBAAsB;AAAA,oCAAE,mBAAmB,EAAG;AAC5C,UAAI,CAAC,OAAO,CAAC,mBAAmB,GAAG,mBAAmB,CAAC;KACxD;;;;;AArDkB,gBAAc,WAuDjC,uBAAuB;AAAA,qCAAE,oBAAoB,EAAG;AAC9C,UAAI,CAAC,OAAO,CAAC,oBAAoB,GAAG,oBAAoB,CAAC;KAC1D;;;;;;;;;;AAzDkB,gBAAc,WA+DjC,KAAK;AAAA,qBAAG;AACN,aAAO,+BAAY,IAAI,CAAC,OAAO,CAAC,CAAC;KAClC;;;;;SAjEkB,cAAc;;;qBAAd,cAAc;;;;;;;;;;;;;;iCCTf,sBAAsB;;;;0BACzB,gBAAgB;;;;0BACnB,YAAY;;;;;;;;;;;IAQL,WAAW;wBAAX,WAAW;;AACnB,WADQ,WAAW,GAChB;sCADK,WAAW;;AAE5B,uBAAO,CAAC;;AAER,QAAI,CAAC,OAAO,GAAG,EAAE,CAAC;AAClB,QAAI,CAAC,IAAI,GAAG,cAAc,CAAC;AAC3B,QAAI,CAAC,WAAW,GAAG,qBAAqB,CAAC;AACzC,QAAI,CAAC,KAAK,GAAG,EAAE,CAAC;GACjB;;AARkB,aAAW,WAU9B,OAAO;AAAA,qBAAE,IAAI,EAAG;AACd,UAAI,CAAC,IAAI,GAAG,IAAI,CAAC;KAClB;;;;;AAZkB,aAAW,WAc9B,cAAc;AAAA,4BAAE,WAAW,EAAG;AAC5B,UAAI,CAAC,WAAW,GAAG,WAAW,CAAC;KAChC;;;;;AAhBkB,aAAW,WAkB9B,QAAQ;AAAA,sBAAE,KAAK,EAAG;AAChB,UAAI,CAAC,KAAK,GAAG,KAAK,CAAC;KACpB;;;;;AApBkB,aAAW,WAsB9B,OAAO;AAAA,qBAAE,QAAQ,EAAE,YAAY,EAAG;AAChC,UAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,YAAY,CAAC;KACrC;;;;;AAxBkB,aAAW,WA0B9B,UAAU;AAAA,wBAAE,QAAQ,EAAG;AACrB,aAAO,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;KAC7B;;;;;AA5BkB,aAAW,WA8B9B,cAAc;AAAA,4BAAE,OAAO,EAAG;AACxB,UAAI,CAAC,OAAO,GAAG,wBAAE,MAAM,CAAE,IAAI,CAAC,OAAO,EAAE,OAAO,CAAE,CAAC;KAClD;;;;;;;;;;AAhCkB,aAAW,WAsC9B,KAAK;AAAA,qBAAG;AACN,aAAO,4BAAU,IAAI,CAAC,OAAO,CAAE,CAAC;KACjC;;;;;SAxCkB,WAAW;;;qBAAX,WAAW;;;;;;;;;;;;;;iCCVZ,sBAAsB;;;;8BACrB,oBAAoB;;;;0BAC3B,YAAY;;;;;;;;;;;IAQL,eAAe;wBAAf,eAAe;;AACvB,WADQ,eAAe,GACpB;sCADK,eAAe;;AAEhC,uBAAO,CAAC;;AAER,QAAI,CAAC,OAAO,GAAG,EAAE,CAAC;AAClB,QAAI,CAAC,OAAO,CAAC,wBAAwB,GAAG,CAAC,CAAC;AAC1C,QAAI,CAAC,OAAO,CAAC,qBAAqB,GAAG,CAAC,CAAC;AACvC,QAAI,CAAC,OAAO,CAAC,qBAAqB,GAAG,CAAC,CAAC;AACvC,QAAI,CAAC,OAAO,CAAC,qBAAqB,GAAG,CAAC,CAAC;AACvC,QAAI,CAAC,OAAO,CAAC,uBAAuB,GAAG,CAAC,CAAC;AACzC,QAAI,CAAC,OAAO,CAAC,oBAAoB,GAAG,CAAC,CAAC;AACtC,QAAI,CAAC,OAAO,CAAC,YAAY,GAAG,CAAC,CAAC;AAC9B,QAAI,CAAC,OAAO,CAAC,QAAQ,GAAG,EAAE,CAAC;GAC5B;;AAbkB,iBAAe,WAelC,2BAA2B;AAAA,yCAAE,SAAS,EAAG;AACvC,UAAI,CAAC,OAAO,CAAC,wBAAwB,GAAG,SAAS,CAAC;KACnD;;;;;AAjBkB,iBAAe,WAmBlC,wBAAwB;AAAA,sCAAE,OAAO,EAAG;AAClC,UAAI,CAAC,OAAO,CAAC,qBAAqB,GAAG,OAAO,CAAC;KAC9C;;;;;AArBkB,iBAAe,WAuBlC,wBAAwB;AAAA,sCAAE,OAAO,EAAG;AAClC,UAAI,CAAC,OAAO,CAAC,qBAAqB,GAAG,OAAO,CAAC;KAC9C;;;;;AAzBkB,iBAAe,WA2BlC,wBAAwB;AAAA,sCAAE,IAAI,EAAG;AAC/B,UAAI,CAAC,OAAO,CAAC,qBAAqB,GAAG,IAAI,CAAC;KAC3C;;;;;AA7BkB,iBAAe,WA+BlC,0BAA0B;AAAA,wCAAE,MAAM,EAAG;AACnC,UAAI,CAAC,OAAO,CAAC,uBAAuB,GAAG,MAAM,CAAC;KAC/C;;;;;AAjCkB,iBAAe,WAmClC,uBAAuB;AAAA,qCAAE,KAAK,EAAG;AAC/B,UAAI,CAAC,OAAO,CAAC,oBAAoB,GAAG,KAAK,CAAC;KAC3C;;;;;AArCkB,iBAAe,WAuClC,eAAe;AAAA,6BAAE,YAAY,EAAG;AAC9B,UAAI,CAAC,OAAO,CAAC,YAAY,GAAG,YAAY,CAAC;KAC1C;;;;;AAzCkB,iBAAe,WA2ClC,UAAU;AAAA,wBAAE,OAAO,EAAG;AACpB,UAAI,CAAC,OAAO,CAAC,OAAO,GAAG,OAAO,CAAC;KAChC;;;;;AA7CkB,iBAAe,WA+ClC,cAAc;AAAA,4BAAE,OAAO,EAAG;AACxB,UAAI,CAAC,OAAO,GAAG,wBAAE,MAAM,CAAE,IAAI,CAAC,OAAO,EAAE,OAAO,CAAE,CAAC;KAClD;;;;;;;;;;AAjDkB,iBAAe,WAuDlC,KAAK;AAAA,qBAAG;AACN,aAAO,gCAAc,IAAI,CAAC,OAAO,CAAE,CAAC;KACrC;;;;;SAzDkB,eAAe;;;qBAAf,eAAe;;;;;;;;;;;;;;qBCVlB,OAAO;;;;sBACN,QAAQ;;;;mCACA,8BAA8B;;qBAE1C,mBAAM,WAAW,CAAC;;;AAC/B,QAAM,EAAE,CAAE,oBAAO,OAAO,kCAAa,OAAO,CAAC,CAAE;;AAE/C,QAAM,cAAG;AACP,WAAO,gCAAW,QAAQ,EAAE,CAAC;GAC9B;CACF,CAAC;;;;;;;;;;;;;;;;;;;;;;ICFmB,IAAI;WAAJ,IAAI;sCAAJ,IAAI;;;AAAJ,MAAI,WACvB,SAAS;AAAA,yBAAG,EAAE;;;;;SADK,IAAI;;;qBAAJ,IAAI;;;;;;;;;;;;;;8BCRK,mBAAmB;;;;IAE5B,gBAAgB;wBAAhB,gBAAgB;;AACxB,WADQ,gBAAgB,GACrB;sCADK,gBAAgB;;AAEjC,oBAAO,CAAC;;AAER,QAAI,CAAC,gBAAgB,GAAG,EAAE,CAAC;GAC5B;;AALkB,kBAAgB,WAOnC,SAAS;AAAA,uBAAC,mBAAmB,EAAE;AAC7B,aAAO,mBAAmB,GAAG,IAAI,CAAC,gBAAgB,CAAC;KACpD;;;;;SATkB,gBAAgB;;;qBAAhB,gBAAgB;;;;;;;;;;;;;;8BCFpB,mBAAmB;;;;IAEf,cAAc;wBAAd,cAAc;;WAAd,cAAc;sCAAd,cAAc;;;;;AAAd,gBAAc,WACjC,SAAS;AAAA,uBAAC,wBAAwB,EAAE,qBAAqB,EAAE;AACzD,aAAO,wBAAwB,GAAG,qBAAqB,CAAC;KACzD;;;;;SAHkB,cAAc;;;qBAAd,cAAc;;;;;;;;;;;;;;8BCFlB,mBAAmB;;;;IAEf,iBAAiB;wBAAjB,iBAAiB;;WAAjB,iBAAiB;sCAAjB,iBAAiB;;;;;AAAjB,mBAAiB,WACpC,SAAS;AAAA,uBAAC,oBAAoB,EAAE,aAAa,EAAE;AAC7C,aAAO,oBAAoB,GAAG,aAAa,CAAC;KAC7C;;;;;SAHkB,iBAAiB;;;qBAAjB,iBAAiB;;;;;;;;;;;;;;8BCFrB,mBAAmB;;;;IAEf,iBAAiB;wBAAjB,iBAAiB;;WAAjB,iBAAiB;sCAAjB,iBAAiB;;;;;AAAjB,mBAAiB,WACpC,SAAS;AAAA,uBACL,wBAAwB,EACxB,iBAAiB,EACjB,wBAAwB,EACxB,iBAAiB,EACjB,uBAAuB,EACzB;AACA,aAAO,IAAI,CAAC,GAAG,CACb,wBAAwB,GAAG,iBAAiB,EAC5C,wBAAwB,GAAG,uBAAuB,GAAG,iBAAiB,CACvE,CAAC;KACH;;;;;SAZkB,iBAAiB;;;qBAAjB,iBAAiB;;;;;;;;;;;;;;8BCFrB,mBAAmB;;;;IAEf,mBAAmB;wBAAnB,mBAAmB;;WAAnB,mBAAmB;sCAAnB,mBAAmB;;;;;AAAnB,qBAAmB,WACtC,SAAS;AAAA,uBAAC,KAAK,EAAE,KAAK,EAAE;AACtB,aAAO,KAAK,GAAG,KAAK,CAAC;KACtB;;;;;SAHkB,mBAAmB;;;qBAAnB,mBAAmB;;;;;;;;;;;;;;8BCFvB,mBAAmB;;;;;;;;IAKf,gBAAgB;wBAAhB,gBAAgB;;WAAhB,gBAAgB;sCAAhB,gBAAgB;;;;;AAAhB,kBAAgB,WACnC,SAAS;AAAA,uBACL,cAAc,EACd,iBAAiB,EACjB,wBAAwB,EACxB,aAAa,EACb,YAAY,EACd;AACA,UAAI,WAAW,GAAG,cAAc,GAAG,iBAAiB,CAAC;AACrD,UAAI,oBAAoB,GAAI,GAAG,GAAG,MAAM,CAAC,wBAAwB,CAAC,GAAI,aAAa,CAAC;;AAEpF,aAAO,WAAW,GAAG,oBAAoB,GAAG,YAAY,CAAC;KAC1D;;;;;SAZkB,gBAAgB;;;qBAAhB,gBAAgB;;;;;;;;;;;;;;8BCLL,mBAAmB;;;;IAE9B,gBAAgB;wBAAhB,gBAAgB;;WAAhB,gBAAgB;sCAAhB,gBAAgB;;;;;AAAhB,kBAAgB,WACnC,SAAS;AAAA,uBACH,6BAA6B,EAC7B,mBAAmB,EACnB,uBAAuB,EACvB,wBAAwB,EACxB,iBAAiB,EACrB;AACA,aAAO,IAAI,CAAC,GAAG,CACb,6BAA6B,GAAG,mBAAmB,EACnD,uBAAuB,GAAG,wBAAwB,GAAG,iBAAiB,CACvE,CAAC;KACH;;;;;SAZkB,gBAAgB;;;qBAAhB,gBAAgB;;;;;;;;;;;;;;;;;;;;;;;ICOhB,QAAQ;WAAR,QAAQ;sCAAR,QAAQ;;;AAAR,UAAQ,WAC3B,OAAO;AAAA,uBAAG,EAAE;;;;;SADO,QAAQ;;;qBAAR,QAAQ;;;;;;;;;;;;;;kCCTR,uBAAuB;;;;IAEvB,yBAAyB;wBAAzB,yBAAyB;;AACjC,WADQ,yBAAyB,CAC/B,YAAY,EAAE,SAAS,EAAG;sCADpB,yBAAyB;;AAE1C,wBAAO,CAAC;;AAER,QAAI,CAAC,YAAY,GAAG,YAAY,CAAC;AACjC,QAAI,CAAC,SAAS,GAAG,SAAS,CAAC;GAC5B;;;;AANkB,2BAAyB,WAS5C,OAAO;AAAA,uBAAG;AACR,UAAI,IAAI,GAAG,EAAE,CAAC;;AAEd,WAAM,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC,EAAE,EAAG;AAC5C,YAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,SAAS,GAAG,MAAM,CAAE,IAAI,CAAC,YAAY,CAAE,CAAC;OACxD;;AAED,aAAO,IAAI,CAAC;KACb;;;;;SAjBkB,yBAAyB;;;qBAAzB,yBAAyB;;;;;;;;;;;;;;kCCFzB,uBAAuB;;;;IAEvB,iCAAiC;wBAAjC,iCAAiC;;AACzC,WADQ,iCAAiC,CACxC,iBAAiB,EAAE,YAAY,EAAE;sCAD1B,iCAAiC;;AAElD,wBAAO,CAAC;;AAER,QAAI,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;AAC3C,QAAI,CAAC,YAAY,GAAG,YAAY,CAAC;;AAEjC,QAAI,CAAC,eAAe,GAAG,CACrB,EAAC,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG,EAAE,GAAG,EAAC,EAChC,EAAC,GAAG,EAAE,OAAO,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAC,EAClC,EAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAC,EAC9B,EAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAC,EAC9B,EAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAC,EAC9B,EAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAC,EAC9B,EAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAC,EAC9B,EAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAC,EAC9B,EAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,MAAM,EAAG,GAAG,EAAE,GAAG,EAAC,EAClC,EAAC,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,MAAM,CAAC,SAAS,EAAE,GAAG,EAAE,CAAC,EAAC,CACxC,CAAC;GACH;;AAnBkB,mCAAiC,WAqBpD,OAAO;AAAA,uBAAG;AACR,UAAI,WAAW,GAAG,CAAC,CAAC;;AAEpB,UAAI,IAAI,CAAC,iBAAiB,GAAG,CAAC,EAAE;AAC9B,mBAAW,GAAG,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,iBAAiB,CAAC;OAC1D;;AAED,UAAI,SAAS,GAAG,WAAW,CAAC;;AAE5B,aAAO,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,UAAU,MAAM,EAAE;AACnD,YAAI,IAAI,GAAG,KAAK,CAAC;;AAEjB,YAAI,MAAM,CAAC,GAAG,IAAI,SAAS,IAAI,MAAM,CAAC,GAAG,GAAG,SAAS,EAAE;AACrD,cAAI,GAAG,IAAI,CAAC;SACb;;AAED,eAAO,IAAI,CAAC;OACb,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;KACX;;;;;SAvCkB,iCAAiC;;;qBAAjC,iCAAiC;;;;;;;;;;;;;;kCCFjC,uBAAuB;;;;yBACtB,eAAe;;;;8BACV,oBAAoB;;;;gCAClB,sBAAsB;;;;yCACb,+BAA+B;;;;2BAC9C,iBAAiB;;;;+BACZ,qBAAqB;;;;IAE5B,6BAA6B;wBAA7B,6BAA6B;;AACrC,WADQ,6BAA6B,CACnC,cAAc,EAAE,eAAe,EAAE,WAAW,EAAG;sCADzC,6BAA6B;;AAE9C,wBAAO,CAAC;;AAER,QAAI,CAAC,cAAc,GAAG,cAAc,CAAC;AACrC,QAAI,CAAC,eAAe,GAAG,eAAe,CAAC;AACvC,QAAI,CAAC,WAAW,GAAG,WAAW,CAAC;;AAE/B,QAAI,CAAC,QAAQ,yBAAY,CAAC;AAC1B,QAAI,CAAC,YAAY,8BAAiB,CAAC;AACnC,QAAI,CAAC,gBAAgB,gCAAmB,CAAC;;AAEzC,QAAI,CAAC,cAAc,GAAG,IAAI,CAAC;AAC3B,QAAI,CAAC,yBAAyB,GAAG,2CAA+B,CAAC,EAAE,IAAI,CAAC,cAAc,CAAE,CAAC;GAC1F;;AAdkB,+BAA6B,WAgBhD,cAAc;AAAA,8BAAG;AACf,UAAI,QAAQ,GAAG,yBAAW,IAAI,CAAE,IAAI,CAAC,YAAY,CAAE,CAAC;;AAEpD,aAAO,QAAQ,CAAC;KACjB;;;;;AApBkB,+BAA6B,WAsBhD,SAAS;AAAA,yBAAG;AACV,UAAI,IAAI,GAAG,yBAAW,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;;AAE1C,aAAO,IAAI,CAAC;KACb;;;;;AA1BkB,+BAA6B,WA4BhD,iBAAiB;AAAA,+BAAC,YAAY,EAAE;AAC9B,UAAI,OAAO,GAAG,yBAAW,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;AACrD,UAAI,WAAW,GAAG,6BAAgB,UAAU,CAAC,OAAO,EAAE;AACpD,YAAI,EAAE,YAAY;OACnB,CAAC,CAAC;;AAEH,aAAO,WAAW,CAAC;KACpB;;;;;AAnCkB,+BAA6B,WAqChD,OAAO;AAAA,uBAAG;;;AAGR,UAAI,eAAe,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;AAC5C,UAAI,WAAW,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;AACnC,UAAI,WAAW,GAAG,IAAI,CAAC,iBAAiB,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;;AAE/D,UAAI,MAAM,GAAG,IAAI,CAAC,yBAAyB,CAAC,OAAO,EAAE,CAAC;;;AAGtD,UAAI,iBAAiB,GAAG,IAAI,CAAC,KAAK,CAAE,MAAM,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,cAAc,CAAE,GAAG,KAAK,CAAC;;AAEnF,UAAI,iBAAiB,GAAG,IAAI,CAAC,KAAK,CAAE,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,cAAc,GAAG,CAAC,CAAE,CAAC;;AAE9E,UAAI,wBAAwB,GAAG,IAAI,CAAC,KAAK,CAAE,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,cAAc,GAAG,CAAC,CAAE,GAAG,EAAE,CAAC;;AAE1F,UAAI,mBAAmB,GAAG,IAAI,CAAC,KAAK,CAAE,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,cAAc,GAAG,CAAC,CAAE,GAAG,EAAE,CAAC;;AAErF,UAAI,oBAAoB,GAAG,IAAI,CAAC,KAAK,CAAE,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,cAAc,GAAG,CAAC,CAAE,GAAG,EAAE,CAAC;;;AAGtF,UAAI,CAAC,WAAW,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;;AAE7C,UAAI,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC;;;AAGpC,UAAI,CAAC,eAAe,CAAC,cAAc,CAAC,eAAe,CAAC,CAAC;;AAErD,UAAI,QAAQ,GAAG,IAAI,CAAC,eAAe,CAAC,KAAK,EAAE,CAAC;;;AAG5C,UAAI,CAAC,cAAc,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;AAClC,UAAI,CAAC,cAAc,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;AAC1C,UAAI,CAAC,cAAc,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;AACzC,UAAI,CAAC,cAAc,CAAC,oBAAoB,CAAC,iBAAiB,CAAC,CAAC;AAC5D,UAAI,CAAC,cAAc,CAAC,oBAAoB,CAAC,iBAAiB,CAAC,CAAC;AAC5D,UAAI,CAAC,cAAc,CAAC,2BAA2B,CAAC,wBAAwB,CAAC,CAAC;AAC1E,UAAI,CAAC,cAAc,CAAC,sBAAsB,CAAC,mBAAmB,CAAC,CAAC;AAChE,UAAI,CAAC,cAAc,CAAC,uBAAuB,CAAC,oBAAoB,CAAC,CAAC;;AAElE,aAAO,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,CAAC;KACpC;;;;;SA9EkB,6BAA6B;;;qBAA7B,6BAA6B;;;;;;;;;;;;;qBCRnC,CACb,mBAAmB,EACnB,aAAa,CACd;;;;;;;;;;;;;qBCHc,CACb;AACE,MAAI,EAAE,4BAA4B;AAClC,aAAW,EAAE,2DAA2D;AACxE,OAAK,EAAE,CAAE;AACP,aAAS,EAAE,cAAc;AACzB,YAAQ,YAAE,aAAa,EAAG;AACxB,UAAI,OAAO,GAAG,KAAK,CAAC;AACpB,UAAK,aAAa,GAAG,QAAQ,EAAG;AAC9B,eAAO,GAAG,IAAI,CAAC;OAChB;;AAED,aAAO,OAAO,CAAC;KAChB;GACF,CAAE;CACJ,CACF;;;;;;;;;;;;;qBChBc,CACb;AACE,MAAI,EAAE,UAAU;AAChB,0BAAwB,EAAE,UAAU;AACpC,uBAAqB,EAAE,GAAG;AAC1B,uBAAqB,EAAE,MAAM;AAC7B,uBAAqB,EAAE,MAAM;AAC7B,yBAAuB,EAAE,IAAI;AAC7B,sBAAoB,EAAE,GAAG;AACzB,cAAY,EAAE,CAAC;AACf,UAAQ,EAAE,8DAA8D;CACzE,CACF;;;;;;;;;;;;;;qCCZ4B,6BAA6B;;;;sCAC5B,8BAA8B;;;;sCAC9B,8BAA8B;;;;qCAC/B,6BAA6B;;;;qCAC7B,6BAA6B;;;;wCAC1B,iCAAiC;;;;IAE5C,OAAO;AACf,aADQ,OAAO,CACd,OAAO,EAAE;0CADF,OAAO;;AAExB,YAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;AACzB,YAAI,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC;AAC/B,YAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC;AACjC,YAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;AACzB,YAAI,CAAC,iBAAiB,GAAG,OAAO,CAAC,iBAAiB,CAAC;AACnD,YAAI,CAAC,iBAAiB,GAAG,OAAO,CAAC,iBAAiB,CAAC;AACnD,YAAI,CAAC,wBAAwB,GAAG,OAAO,CAAC,wBAAwB,CAAC;AACjE,YAAI,CAAC,YAAY,GAAG,OAAO,CAAC,YAAY,CAAC;AACzC,YAAI,CAAC,mBAAmB,GAAG,OAAO,CAAC,mBAAmB,CAAC;AACvD,YAAI,CAAC,oBAAoB,GAAG,OAAO,CAAC,oBAAoB,CAAC;;AAEzD,YAAI,CAAC,gBAAgB,GAAG,wCAAsB,CAAC;AAC/C,YAAI,CAAC,iBAAiB,GAAG,yCAAuB,CAAC;AACjD,YAAI,CAAC,iBAAiB,GAAG,yCAAuB,CAAC;AACjD,YAAI,CAAC,SAAS,GAAG,wCAAsB,CAAC;AACxC,YAAI,CAAC,SAAS,GAAG,wCAAsB,CAAC;AACxC,YAAI,CAAC,YAAY,GAAG,2CAAyB,CAAC;KAC/C;;AAnBkB,WAAO,WAqB1B,UAAU;AAAA,8BAAG;;;SAGZ;;;;;AAxBkB,WAAO,WA0B1B,oBAAoB;AAAA,wCAAG;AACrB,gBAAI,YAAY,GAAG,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAC9C,IAAI,CAAC,mBAAmB,CAC3B,CAAC;AACF,gBAAI,aAAa,GAAG,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAChD,IAAI,CAAC,QAAQ,CAAC,wBAAwB,EACtC,IAAI,CAAC,iBAAiB,EACtB,IAAI,CAAC,wBAAwB,EAC7B,IAAI,CAAC,iBAAiB,EACtB,IAAI,CAAC,QAAQ,CAAC,uBAAuB,CACxC,CAAC;AACF,gBAAI,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,SAAS,CAChC,IAAI,CAAC,iBAAiB,EACtB,IAAI,CAAC,QAAQ,CAAC,oBAAoB,EAAE,CAAC,mBAAmB,EACxD,IAAI,CAAC,QAAQ,CAAC,uBAAuB,EACrC,IAAI,CAAC,wBAAwB,EAC7B,IAAI,CAAC,iBAAiB,CACzB,CAAC;AACF,gBAAI,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,SAAS,CAChC,IAAI,CAAC,QAAQ,CAAC,qBAAqB,EACnC,IAAI,CAAC,iBAAiB,EACtB,IAAI,CAAC,wBAAwB,EAC7B,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAC5B,IAAI,CAAC,QAAQ,CAAC,oBAAoB,EAClC,aAAa,CAChB,EACD,IAAI,CAAC,YAAY,CACpB,CAAC;AACF,gBAAI,QAAQ,GAAG,IAAI,CAAC,YAAY,CAAC,SAAS,CACtC,KAAK,EACL,KAAK,CACR,CAAC;;;AAGF,mBAAO,EAAC,YAAY,EAAZ,YAAY,EAAE,aAAa,EAAb,aAAa,EAAE,KAAK,EAAL,KAAK,EAAE,KAAK,EAAL,KAAK,EAAE,QAAQ,EAAR,QAAQ,EAAC,CAAC;SAC9D;;;;;WA7DkB,OAAO;;;qBAAP,OAAO;;;;;;;;;;;;;;sCCPc,6BAA6B;;;;uCAC5B,8BAA8B;;;;mCAClC,0BAA0B;;;;uDAG1D,gDAAgD;;;;IAElC,IAAI;AACZ,WADQ,IAAI,GACT;sCADK,IAAI;;AAErB,QAAI,CAAC,OAAO,GAAG,IAAI,CAAC;AACpB,QAAI,CAAC,cAAc,sCAAiB,CAAC;AACrC,QAAI,CAAC,eAAe,uCAAkB,CAAC;AACvC,QAAI,CAAC,WAAW,mCAAc,CAAC;AAC/B,QAAI,CAAC,uBAAuB,uDAAgC,CAAC;GAC9D;;AAPkB,MAAI,WASvB,IAAI;AAAA,oBAAG;AACL,UAAI,OAAO,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;;AAEnC,UAAI,CAAC,OAAO,GAAG,OAAO,CAAC;KACxB;;;;;AAbkB,MAAI,WAevB,aAAa;AAAA,6BAAG;AACd,UAAI,QAAQ,GAAG,IAAI,IAAI,CAAC,uBAAuB,CAC3C,IAAI,IAAI,CAAC,cAAc,EAAE,EACzB,IAAI,IAAI,CAAC,eAAe,EAAE,EAC1B,IAAI,IAAI,CAAC,WAAW,EAAE,CACzB,CAAC;AACF,aAAO,QAAQ,CAAC,OAAO,EAAE,CAAC;KAC3B;;;;;SAtBkB,IAAI;;;qBAAJ,IAAI;;;;;;;;;;;;;;ICPJ,IAAI;AACZ,WADQ,IAAI,CACX,OAAO,EAAE;sCADF,IAAI;;AAErB,QAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;AACzB,QAAI,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW,CAAC;AACvC,QAAI,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC;GAC5B;;SALkB,IAAI;;;qBAAJ,IAAI;;;;;;;;;;;;;;mCCAE,2BAA2B;;;;IAEjC,QAAQ;AAChB,WADQ,QAAQ,CACf,OAAO,EAAE;sCADF,QAAQ;;AAEzB,QAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;AACzB,QAAI,CAAC,wBAAwB,GAAG,OAAO,CAAC,wBAAwB,CAAC;AACjE,QAAI,CAAC,qBAAqB,GAAG,OAAO,CAAC,qBAAqB,CAAC;AAC3D,QAAI,CAAC,qBAAqB,GAAG,OAAO,CAAC,qBAAqB,CAAC;AAC3D,QAAI,CAAC,qBAAqB,GAAG,OAAO,CAAC,qBAAqB,CAAC;AAC3D,QAAI,CAAC,uBAAuB,GAAG,OAAO,CAAC,uBAAuB,CAAC;AAC/D,QAAI,CAAC,oBAAoB,GAAG,OAAO,CAAC,oBAAoB,CAAC;AACzD,QAAI,CAAC,YAAY,GAAG,OAAO,CAAC,YAAY,CAAC;AACzC,QAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC;;AAEjC,QAAI,CAAC,cAAc,GAAG,sCAAoB,CAAC;GAC5C;;AAbkB,UAAQ,WAe3B,oBAAoB;AAAA,oCAAG;AACrB,UAAI,UAAU,GAAG,IAAI,CAAC,cAAc,CAAC,SAAS,CAC1C,IAAI,CAAC,wBAAwB,EAC7B,IAAI,CAAC,qBAAqB,CAC7B,CAAC;;AAEF,aAAO;AACL,2BAAmB,EAAE,UAAU;OAChC,CAAC;KACH;;;;;SAxBkB,QAAQ;;;qBAAR,QAAQ;;;;;;;;;;;;;;sBCFV,QAAQ;;;;0BACb,YAAY;;;;0BACM,gBAAgB;;;;AAEhD,IAAI,WAAW,GAAG,oBAAO,aAAa,CAAC,CACrC,QAAQ,CACT,CAAC,CAAC;;AAEH,IAAI,SAAS,GAAG,oBAAO,WAAW,CAAC;AACjC,aAAW,EAAE,CAAE,WAAW,CAAE;;AAE5B,MAAI,cAAG;AACL,QAAI,CAAC,OAAO,EAAE,CAAC;GAChB;;AAED,SAAO,cAAG;AACR,QAAI,CAAC,KAAK,GAAG,6BAAU,CAAC;AACxB,QAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;GACnB;;AAED,QAAM,cAAG;AACP,QAAI,CAAC,OAAO,EAAE,CAAC;AACf,QAAI,CAAC,OAAO,CAAC,IAAI,CAAC,eAAe,EAAE,CAAC,CAAC;GACtC;;AAED,iBAAe,cAAG;AAChB,QAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC;;AAEtB,QAAI,KAAK,GAAG,wBAAE,MAAM,CAChB,EAAE,EACF,IAAI,CAAC,OAAO,EACZ,IAAI,CAAC,OAAO,CAAC,oBAAoB,EAAE,CACtC,CAAC;;;AAGF,WAAO,KAAK,CAAC;GACd;CACF,CAAC,CAAC;;QAEK,WAAW,GAAX,WAAW;QAAE,SAAS,GAAT,SAAS,4F;;;;;;;;;;;;;qBCvCZ,OAAO;;;;sBACN,QAAQ;;;;yCACG,kCAAkC;;;;AAEhE,IAAI,YAAY,GAAG,oBAAO,aAAa,CAAC,CACtC,YAAY,CACb,CAAC,CAAC;;AAEH,IAAI,UAAU,GAAG,oBAAO,WAAW,CAAC;AAClC,aAAW,EAAE,CAAE,YAAY,CAAE;;AAE7B,MAAI,cAAG;AACL,QAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;AACrB,QAAI,CAAC,MAAM,GAAG,IAAI,CAAC;GACpB;;AAED,YAAU,YAAC,KAAK,EAAE;AAChB,QAAI,CAAC,MAAM,GAAG,KAAK,CAAC;AACpB,QAAI,CAAC,QAAQ,GAAG,KAAK,CAAC,WAAW,CAAC;AAClC,QAAI,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;GAC7B;;AAED,iBAAe,cAAG;AAChB,QAAI,IAAI,CAAC,MAAM,KAAK,IAAI,EAAE;AACxB,UAAI,IAAI,GAAG,8EAAQ,CAAC;AACpB,UAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC;AACjC,UAAI,CAAC,MAAM,GAAG,IAAI,CAAC;KACpB;;AAED,WAAO;AACL,aAAO,EAAE,IAAI,CAAC,QAAQ;KACvB,CAAC;GACH;;AAED,UAAQ,cAAG;AACT,WAAO,IAAI,CAAC,MAAM,CAAC;GACpB;CACF,CAAC,CAAC;;qBAEY,EAAC,YAAY,EAAZ,YAAY,EAAE,UAAU,EAAV,UAAU,EAAC;;;;;;;;;;;;;qBCvC1B;AACb,MAAI,YAAE,GAAG,EAAG;AACV,QAAK,EAAG,GAAG,YAAY,KAAK,CAAE,EAAG;AAC/B,YAAM,IAAI,KAAK,CAAE,gDAAgD,CAAE,CAAC;KACrE;;AAED,QAAK,GAAG,CAAC,MAAM,KAAK,CAAC,EAAG;AACtB,aAAO,IAAI,CAAC;KACb;;AAED,WAAO,GAAG,CAAC,IAAI,CAAC,KAAK,CAAE,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,CAAC,MAAM,CAAE,CAAC,CAAC;GACtD;CACF;;;;;;;;;;;;;qBCZc;AACb,YAAU,YAAE,QAAQ,EAAE,IAAI,EAAG;AAC3B,QAAI,QAAQ,GAAG,QAAQ,CAAC;AACxB,SAAM,IAAI,GAAG,qCAAI,IAAI,GAAG;AACtB,UAAK,IAAI,CAAC,cAAc,CAAE,GAAG,CAAE,EAAG;AAChC,YAAI,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;;AAEtB,YAAI,KAAK,GAAG,IAAI,MAAM,CAAE,UAAU,GAAG,GAAG,GAAG,UAAU,EAAE,GAAG,CAAE,CAAC;;AAE7D,gBAAQ,GAAG,QAAQ,CAAC,OAAO,CAAE,KAAK,EAAE,KAAK,CAAE,CAAC;OAC7C;KACF;;AAED,WAAO,QAAQ,CAAC;GACjB;CACF;;;;;;;;;;;;qBCfiB,OAAO;;;;wBACJ,WAAW;;;;qCACF,4BAA4B;;;;mEACjB,2DAA2D;;;;AACpG,MAAM,CAAC,OAAO,CAAC,YAAY;AACzB,wBAAS,MAAM,CAAE,wGAAmB,EAAE,QAAQ,CAAC,cAAc,CAAC,eAAe,CAAC,CAAC,CAAC;CACjF,CAAC,CAAC,sH;;;;;;;;;;;ACNH;AACA;AACA,2H;;;;;;;;;;;ACFA;AACA;AACA;AACA,2H;;;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AC3FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6H;;;;;;;;;;;AC9HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6H;;;;;;;;;;;AChhJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AC/FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACzFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACrhzOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACxj1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6H;;;;;;;;;;;ACntzMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AC5EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AC1DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AC3DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACjtPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AC/CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6H;;;;;;;;;;;AC7SA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACzhttrrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AClDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AClhGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6H;;;;;;;;;;;ACptIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AC9FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACpnLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACrhUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6H;;;;;;;;;;;AC3HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACxEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AC3DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6H;;;;;;;;;;;ACrOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AClj8BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6H;;;;;;;;;;;AC9KA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6H;;;;;;;;;;;AC1IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACjxrnWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACxFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6H;;;;;;;;;;;ACrhezHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AC/CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6H;;;;;;;;;;;AClNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACrlwzrtnNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACxxkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACpFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACjtGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACtxMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AClFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACtFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACzhxRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AC/CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACnFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACpFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AC9FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AC/CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACnFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AClDA;AACA;AACA,2H;;;;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACjCA;AACA;AACA,2H;;;;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6H;;;;;;;;;;;ACvGA;AACA;AACA;AACA;AACA;AACA;AACA,2H;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6H;;;;;;;;;;;ACxOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AC/EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6H;;;;;;;;;;;ACnHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AC/DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AC1DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA,2H;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AChGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;ACjEA;AACA;AACA,2H;;;;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6H;;;;;;;;;;;ACtgDA;AACA;AACA,2H;;;;;;;;;;;ACFA;AACA;AACA;AACA,2H","file":"/app.js","sourcesContent":["\nTemplate.body.addContent((function() {\n  var view = this;\n  return HTML.Raw('<div id=\"render-target\"></div>');\n}));\nMeteor.startup(Template.body.renderToDocument);\n","import React from 'react';\nimport Setup from '../setup/setup.jsx';\nimport {SceneActions} from '../../../stores/scene-store.jsx';\n\nexport default React.createClass({\n  handlePlay(e) {\n    e.preventDefault();\n\n    SceneActions.transition(<Setup />);\n  },\n\n  render() {\n    return (\n      <div bem_element=\"\">\n        <h1>Game Name Here</h1>\n        <button onClick={this.handlePlay}>Play</button>\n      </div>\n    );\n  }\n});\n","﻿import React from 'react';\nimport {SceneActions} from '../../../stores/scene-store.jsx';\n\nexport default React.createClass({\n  handlePlay(e) {\n    e.preventDefault();\n\n    SceneActions.transition(<ProgramListItem />);\n  },\n\n    render() {\n        return (\n            <div  style = \" padding: 20px;\">\n                <h1>z</h1>\n                <button onClick={this.handlePlay}>Play</button>\n            </div>\n        );\n    }\n});","/**\n * GameSetup View\n */\nimport React from 'react';\nimport Reflux from 'reflux';\nimport {GameStore, GameActions} from '../../../stores/game-store';\n\nexport default React.createClass({\n  mixins: [ Reflux.connect(GameStore, 'game') ],\n\n  handleRandomize(e) {\n    e.preventDefault();\n\n    GameActions.create();\n  },\n\n  handleStart(e) {\n    e.preventDefault();\n\n    // TODO change view state!\n  },\n\n  render() {\n    return (\n      <div>\n        <h2>{this.state.game.name}</h2>\n        <p>Starting Capital {this.state.game.capital}</p>\n        <p>Cash Flow {this.state.game.cashFlow}</p>\n        <p>Industry {this.state.game.industry.name}</p>\n        <p>Number of Factories {this.state.game.numberOfFactories}</p>\n        <p>Customer Satisfaction {this.state.game.customerSatisfaction}</p>\n        <p>Board of Directors Satisfaction {this.state.game.companySatisfaction}</p>\n        <p>Goal {this.state.game.goal.name}</p>\n        <button onClick={this.handleRandomize}>Randomize</button>\n        <button onClick={this.handleStart}>Start</button>\n      </div>\n    );\n  }\n});\n","/**\n * Builders should have a build method\n *\n * The builder pattern is an object creation software\n * design pattern. The intention is to allow for lazy\n * creation of an object.\n *\n * @type {Builder}\n */\nexport default class Builder {\n  build() {}\n}\n","import { default as Builder } from './definition/builder';\nimport { default as Company } from '../models/company';\n\n/**\n * The Company Builder allows you to lazily build\n * companies.\n *\n * @type {Builder}\n */\nexport default class CompanyBuilder extends Builder {\n  constructor() {\n    super();\n\n    this.options = {};\n    this.options.name = 'Default Name';\n    this.options.capital = 10000000;\n    this.options.industry = {}; // TODO a real default\n    this.options.goal = {}; // TODO a real default\n    this.options.marketPenetration = 0.001;\n    this.options.numberOfFactories = 1;\n    this.options.averageFactoryEfficiency = 0.8;\n    this.options.programCosts = 0;\n    this.options.companySatisfaction = 0.5;\n    this.options.customerSatisfaction = 0.5;\n  }\n\n  setName(name) {\n    this.options.name = name;\n  }\n\n  setCapital(capital) {\n    this.options.capital = capital;\n  }\n\n  setIndustry( industry ) {\n    // TODO check typeof industry\n    this.options.industry = industry;\n  }\n\n  setGoal( goal ) {\n    // TODO check typeof goal\n    this.options.goal = goal;\n  }\n\n  setMarketPenetration( marketPenetration ) {\n    this.options.marketPenetration = marketPenetration;\n  }\n\n  setNumberOfFactories( numberOfFactories ) {\n    this.options.numberOfFactories = numberOfFactories;\n  }\n\n  setAverageFactoryEfficiency( averageFactoryEfficiency ) {\n    this.options.averageFactoryEfficiency = averageFactoryEfficiency;\n  }\n\n  setProgramCosts( programCosts ) {\n    this.options.programCosts = programCosts;\n  }\n\n  setCompanySatisfaction( companySatisfaction ) {\n    this.options.companySatisfaction = companySatisfaction;\n  }\n\n  setCustomerSatisfaction( customerSatisfaction ) {\n    this.options.customerSatisfaction = customerSatisfaction;\n  }\n\n  /**\n   * @override\n   * @return {Company}\n   */\n  build() {\n    return new Company(this.options);\n  }\n}\n","import Builder from './definition/builder';\nimport Goal from '../models/goal';\nimport _ from 'underscore';\n\n/**\n * The Goal Builder allows you to lazily build\n * goals.\n *\n * @type {Builder}\n */\nexport default class GoalBuilder extends Builder {\n  constructor() {\n    super();\n\n    this.options = {};\n    this.name = 'Default Name';\n    this.description = 'Default Description';\n    this.hooks = {};\n  }\n\n  setName( name ) {\n    this.name = name;\n  }\n\n  setDescription( description ) {\n    this.description = description;\n  }\n\n  setHooks( hooks ) {\n    this.hooks = hooks;\n  }\n\n  addHook( hookName, hookCallback ) {\n    this.hooks[hookName] = hookCallback;\n  }\n\n  removeHook( hookName ) {\n    delete this.hooks[hookName];\n  }\n\n  setFromOptions( options ) {\n    this.options = _.extend( this.options, options );\n  }\n\n  /**\n   * @override\n   * @return {Goal}\n   */\n  build() {\n    return new Goal( this.options );\n  }\n}\n","import Builder from './definition/builder';\nimport Industry from '../models/industry';\nimport _ from 'underscore';\n\n/**\n * The Industry Builder allows you to lazily build\n * industries.\n *\n * @type {Builder}\n */\nexport default class IndustryBuilder extends Builder {\n  constructor() {\n    super();\n\n    this.options = {};\n    this.options.potentialSalesPerQuarter = 0;\n    this.options.initialRevenuePerSale = 0;\n    this.options.initialCostPerFactory = 0;\n    this.options.quarterCostPerFactory = 0;\n    this.options.maximumOutputPerFactory = 0;\n    this.options.materialCostsPerSale = 0;\n    this.options.wastePerSale = 1;\n    this.options.comments = '';\n  }\n\n  setPotentialSalesPerQuarter( potential ) {\n    this.options.potentialSalesPerQuarter = potential;\n  }\n\n  setInitialRevenuePerSale( initial ) {\n    this.options.initialRevenuePerSale = initial;\n  }\n\n  setInitialCostPerFactory( initial ) {\n    this.options.initialCostPerFactory = initial;\n  }\n\n  setQuarterCostPerFactory( cost ) {\n    this.options.quarterCostPerFactory = cost;\n  }\n\n  setMaximumOutputPerFactory( output ) {\n    this.options.maximumOutputPerFactory = output;\n  }\n\n  setMaterialCostsPerSale( costs ) {\n    this.options.materialCostsPerSale = costs;\n  }\n\n  setWastePerSale( wastePerSale ) {\n    this.options.wastePerSale = wastePerSale;\n  }\n\n  setComment( comment ) {\n    this.options.comment = comment;\n  }\n\n  setFromOptions( options ) {\n    this.options = _.extend( this.options, options );\n  }\n\n  /**\n   * @override\n   * @return {Industry}\n   */\n  build() {\n    return new Industry( this.options );\n  }\n}\n","import React from 'react';\nimport Reflux from 'reflux';\nimport { SceneStore } from '../../stores/scene-store.jsx';\n\nexport default React.createClass({\n  mixins: [ Reflux.connect(SceneStore, 'scene') ],\n\n  render() {\n    return SceneStore.getScene();\n  }\n});\n","/**\n * Rules should have a calculate method\n *\n * Rules are used to encapsulate very specific calculations\n *\n * Similar to strategies, except they ONLY perform\n * basic calculations\n */\nexport default class Rule {\n  calculate() {}\n}\n","import {default as Rule} from './definition/rule';\n\nexport default class ActionPointsRule extends Rule {\n  constructor() {\n    super();\n\n    this.baseActionPoints = 50;\n  }\n\n  calculate(companySatisfaction) {\n    return companySatisfaction * this.baseActionPoints;\n  }\n}\n","import Rule from './definition/rule';\n\nexport default class MarketSizeRule extends Rule {\n  calculate(potentialSalesPerQuarter, initialRevenuePerSale) {\n    return potentialSalesPerQuarter * initialRevenuePerSale;\n  }\n}\n","import Rule from './definition/rule';\n\nexport default class MaterialCostsRule extends Rule {\n  calculate(materialCostsPerSale, productionCap) {\n    return materialCostsPerSale * productionCap;\n  }\n}\n","import Rule from './definition/rule';\n\nexport default class ProductionCapRule extends Rule {\n  calculate(\n      potentialSalesPerQuarter,\n      marketPenetration,\n      averageFactoryEfficiency,\n      numberOfFactories,\n      maximumOutputPerFactory\n  ) {\n    return Math.min(\n      potentialSalesPerQuarter * marketPenetration,\n      averageFactoryEfficiency * maximumOutputPerFactory * numberOfFactories\n    );\n  }\n}\n","import Rule from './definition/rule';\n\nexport default class QuarterCashFlowRule extends Rule {\n  calculate(sales, costs) {\n    return sales - costs;\n  }\n}\n","import Rule from './definition/rule';\n\n/**\n * Calculates the total costs for the company\n */\nexport default class QuarterCostsRule extends Rule {\n  calculate(\n      costPerFactory,\n      numberOfFactories,\n      averageFactoryEfficiency,\n      materialCosts,\n      programCosts\n  ) {\n    var factoryCost = costPerFactory * numberOfFactories;\n    var factoryMaterialCosts = (1.0 / Number(averageFactoryEfficiency)) * materialCosts;\n\n    return factoryCost + factoryMaterialCosts + programCosts;\n  }\n}\n","import { default as Rule } from './definition/rule';\n\nexport default class QuarterSalesRule extends Rule {\n  calculate(\n        percentageOfMarketPenetration,\n        marketSizeInDollars,\n        maximumOutputPerFactory,\n        averageFactoryEffeciency,\n        numberOfFactories\n  ) {\n    return Math.min(\n      percentageOfMarketPenetration * marketSizeInDollars,\n      maximumOutputPerFactory * averageFactoryEffeciency * numberOfFactories\n    );\n  }\n}\n","/**\n * Stategies should have an execute method\n *\n * The strategy pattern (also known as the policy pattern)\n * is a software design pattern that enables an algorithm's\n * behavior to be selected at runtime.\n *\n * @type {Strategy}\n */\nexport default class Strategy {\n  execute() {}\n}\n","import Strategy from './definition/strategy';\n\nexport default class PointDistributionStrategy extends Strategy {\n  constructor( numberOfBins, maxPoints ) {\n    super();\n\n    this.numberOfBins = numberOfBins;\n    this.maxPoints = maxPoints;\n  }\n\n  // TODO actually implement a good algorithm here\n  execute() {\n    let bins = [];\n\n    for ( let i = 0; i < this.numberOfBins; i++ ) {\n      bins[i] = this.maxPoints / Number( this.numberOfBins );\n    }\n\n    return bins;\n  }\n}\n","import Strategy from './definition/strategy';\n\nexport default class QuarterCustomerPerceptionStrategy extends Strategy {\n  constructor(numberOfItemsMade, factoryWaste) {\n    super();\n\n    this.numberOfItemsMade = numberOfItemsMade;\n    this.factoryWaste = factoryWaste;\n\n    this.mapOfPerception = [\n      {min: 0, max: 0.00001, out: 1.0},\n      {min: 0.00001, max: 0.1, out: 0.9},\n      {min: 0.1, max: 0.2, out: 0.8},\n      {min: 0.2, max: 0.3, out: 0.7},\n      {min: 0.3, max: 0.4, out: 0.6},\n      {min: 0.4, max: 0.5, out: 0.5},\n      {min: 0.5, max: 0.6, out: 0.4},\n      {min: 0.6, max: 0.8, out: 0.3},\n      {min: 0.8, max: 0.9999 , out: 0.1},\n      {min: 1, max: Number.MAX_VALUE, out: 0}\n    ];\n  }\n\n  execute() {\n    let factoryRate = 0;\n\n    if (this.numberOfItemsMade > 0) {\n      factoryRate = this.factoryWaste / this.numberOfItemsMade;\n    }\n\n    let wasteRate = factoryRate;\n\n    return this.mapOfPerception.filter(function (mapper) {\n      var keep = false;\n\n      if (mapper.min <= wasteRate && mapper.max > wasteRate) {\n        keep = true;\n      }\n\n      return keep;\n    })[0].out;\n  }\n}\n","import Strategy from './definition/strategy';\nimport dataGoals from '../data/goals';\nimport dataIndustries from '../data/industries';\nimport dataCompanyNames from '../data/companyNames';\nimport PointDistributionStrategy from './point-distribution-strategy';\nimport RandomUtil from '../utils/random';\nimport TemplatingUtils from '../utils/templating';\n\nexport default class RandomCompanyBuildingStrategy extends Strategy {\n  constructor( companyBuilder, industryBuilder, goalBuilder ) {\n    super();\n\n    this.companyBuilder = companyBuilder;\n    this.industryBuilder = industryBuilder;\n    this.goalBuilder = goalBuilder;\n\n    this.goalData = dataGoals;\n    this.industryData = dataIndustries;\n    this.companyNamesData = dataCompanyNames;\n\n    this.numberOfPoints = 25.0;\n    this.pointDistributionStrategy = new PointDistributionStrategy( 5, this.numberOfPoints );\n  }\n\n  pickAnIndustry() {\n    let industry = RandomUtil.pick( this.industryData );\n\n    return industry;\n  }\n\n  pickAGoal() {\n    let goal = RandomUtil.pick(this.goalData);\n\n    return goal;\n  }\n\n  createCompanyName(industryName) {\n    let rawName = RandomUtil.pick(this.companyNamesData);\n    let companyName = TemplatingUtils.templatize(rawName, {\n      name: industryName\n    });\n\n    return companyName;\n  }\n\n  execute() {\n    // TODO create a system of 25 \"points\" to distribute amoung these different initial settings\n    // Sort of to weight them so that you never have an AMAZING start state\n    let industryOptions = this.pickAnIndustry();\n    let goalOptions = this.pickAGoal();\n    let companyName = this.createCompanyName(industryOptions.name);\n\n    let points = this.pointDistributionStrategy.execute();\n\n    /* should be between (0.001 and 0.0001] */\n    let marketPenetration = Math.floor( points[0] * 10 / this.numberOfPoints ) / 10000;\n    /* Between [1 to 3) */\n    let numberOfFactories = Math.floor( points[1] * 3 / this.numberOfPoints + 1 );\n    /* Between 0.1 to 0.4 */\n    let averageFactoryEfficiency = Math.floor( points[2] * 4 / this.numberOfPoints + 1 ) / 10;\n    /* Between .3 and .7 */\n    let companySatisfaction = Math.floor( points[3] * 3 / this.numberOfPoints + 4 ) / 10;\n    /* Between .3 and .7 */\n    let customerSatisfaction = Math.floor( points[4] * 3 / this.numberOfPoints + 4 ) / 10;\n\n    // Build the goal\n    this.goalBuilder.setFromOptions(goalOptions);\n\n    let goal = this.goalBuilder.build();\n\n    // Build the industry\n    this.industryBuilder.setFromOptions(industryOptions);\n\n    let industry = this.industryBuilder.build();\n\n    // Build the company\n    this.companyBuilder.setGoal(goal);\n    this.companyBuilder.setIndustry(industry);\n    this.companyBuilder.setName(companyName);\n    this.companyBuilder.setMarketPenetration(marketPenetration);\n    this.companyBuilder.setNumberOfFactories(numberOfFactories);\n    this.companyBuilder.setAverageFactoryEfficiency(averageFactoryEfficiency);\n    this.companyBuilder.setCompanySatisfaction(companySatisfaction);\n    this.companyBuilder.setCustomerSatisfaction(customerSatisfaction);\n\n    return this.companyBuilder.build();\n  }\n}\n","export default [\n  'Benny\\'s {{name}}',\n  '{{name}} Co'\n];\n","export default [\n  {\n    name: 'Reach $10,000,000 in funds',\n    description: 'Accumulate a total of $10,000,000 in your available funds',\n    hooks: [ {\n      subscribe: 'funds-change',\n      callback( newFundAmount ) {\n        let success = false;\n        if ( newFundAmount > 10000000 ) {\n          success = true;\n        }\n\n        return success;\n      }\n    } ]\n  }\n];\n","export default [\n  {\n    name: 'Beverage',\n    potentialSalesPerQuarter: 2242000000,\n    initialRevenuePerSale: 0.7,\n    initialCostPerFactory: 500000,\n    quarterCostPerFactory: 200000,\n    maximumOutputPerFactory: 5000,\n    materialCostsPerSale: 0.1,\n    wastePerSale: 1,\n    comments: '1% market share at $1 a sale nets $22.42 million in revenue.'\n  }\n];\n","import ActionPointsRule from '../rules/action-points-rule';\nimport ProductionCapRule from '../rules/production-cap-rule';\nimport MaterialCostsRule from '../rules/material-costs-rule';\nimport QuarterSalesRule from '../rules/quarter-sales-rule';\nimport QuarterCostsRule from '../rules/quarter-costs-rule';\nimport QuarterCashFlowRule from '../rules/quarter-cash-flow-rule';\n\nexport default class Company {\n  constructor(options) {\n    this.name = options.name;\n    this.capital = options.capital;\n    this.industry = options.industry;\n    this.goal = options.goal;\n    this.marketPenetration = options.marketPenetration;\n    this.numberOfFactories = options.numberOfFactories;\n    this.averageFactoryEfficiency = options.averageFactoryEfficiency;\n    this.programCosts = options.programCosts;\n    this.companySatisfaction = options.companySatisfaction;\n    this.customerSatisfaction = options.customerSatisfaction;\n\n    this.actionPointsRule = new ActionPointsRule();\n    this.productionCapRule = new ProductionCapRule();\n    this.materialCostsRule = new MaterialCostsRule();\n    this.salesRule = new QuarterSalesRule();\n    this.costsRule = new QuarterCostsRule();\n    this.cashFlowRule = new QuarterCashFlowRule();\n  }\n\n  addFactory() {\n    // TODO descrease cash\n    // TODO add a factory\n  }\n\n  getCalculatedMetrics() {\n    let actionPoints = this.actionPointsRule.calculate(\n        this.companySatisfaction\n    );\n    let productionCap = this.productionCapRule.calculate(\n        this.industry.potentialSalesPerQuarter,\n        this.marketPenetration,\n        this.averageFactoryEfficiency,\n        this.numberOfFactories,\n        this.industry.maximumOutputPerFactory\n    );\n    let sales = this.salesRule.calculate(\n        this.marketPenetration,\n        this.industry.getCalculatedMetrics().marketSizeInDollars,\n        this.industry.maximumOutputPerFactory,\n        this.averageFactoryEfficiency,\n        this.numberOfFactories\n    );\n    let costs = this.costsRule.calculate(\n        this.industry.quarterCostPerFactory,\n        this.numberOfFactories,\n        this.averageFactoryEfficiency,\n        this.materialCostsRule.calculate(\n            this.industry.materialCostsPerSale,\n            productionCap\n        ),\n        this.programCosts\n    );\n    let cashFlow = this.cashFlowRule.calculate(\n        sales,\n        costs\n    );\n    // TODO calculate waste\n\n    return {actionPoints, productionCap, sales, costs, cashFlow};\n  }\n}\n","import { default as CompanyBuilder } from '../builders/company-builder';\nimport { default as IndustryBuilder } from '../builders/industry-builder';\nimport { default as GoalBuilder } from '../builders/goal-builder';\nimport {\n  default as RandomCompanyBuildingStrategy\n} from '../strategies/random-company-building-strategy';\n\nexport default class Game {\n  constructor() {\n    this.company = null;\n    this.companyBuilder = CompanyBuilder;\n    this.industryBuilder = IndustryBuilder;\n    this.goalBuilder = GoalBuilder;\n    this.companyBuildingStrategy = RandomCompanyBuildingStrategy;\n  }\n\n  init() {\n    let company = this.createCompany();\n\n    this.company = company;\n  }\n\n  createCompany() {\n    let strategy = new this.companyBuildingStrategy(\n        new this.companyBuilder(),\n        new this.industryBuilder(),\n        new this.goalBuilder()\n    );\n    return strategy.execute();\n  }\n}\n","export default class Goal {\n  constructor(options) {\n    this.name = options.name;\n    this.description = options.description;\n    this.hooks = options.hooks;\n  }\n}\n","import MarketSizeRule from '../rules/market-size-rule';\n\nexport default class Industry {\n  constructor(options) {\n    this.name = options.name;\n    this.potentialSalesPerQuarter = options.potentialSalesPerQuarter;\n    this.initialRevenuePerSale = options.initialRevenuePerSale;\n    this.initialCostPerFactory = options.initialCostPerFactory;\n    this.quarterCostPerFactory = options.quarterCostPerFactory;\n    this.maximumOutputPerFactory = options.maximumOutputPerFactory;\n    this.materialCostsPerSale = options.materialCostsPerSale;\n    this.wastePerSale = options.wastePerSale;\n    this.comments = options.comments;\n\n    this.marketSizeRule = new MarketSizeRule();\n  }\n\n  getCalculatedMetrics() {\n    let marketSize = this.marketSizeRule.calculate(\n        this.potentialSalesPerQuarter,\n        this.initialRevenuePerSale\n    );\n\n    return {\n      marketSizeInDollars: marketSize\n    };\n  }\n}\n","import Reflux from 'reflux';\nimport _ from 'underscore';\nimport { default as Game } from '../models/game';\n\nvar GameActions = Reflux.createActions([\n  'create'\n]);\n\nvar GameStore = Reflux.createStore({\n  listenables: [ GameActions ],\n\n  init() {\n    this._create();\n  },\n\n  _create() {\n    this._game = new Game();\n    this._game.init();\n  },\n\n  create() {\n    this._create();\n    this.trigger(this.getInitialState());\n  },\n\n  getInitialState() {\n    let game = this._game;\n\n    let state = _.extend(\n        {},\n        game.company,\n        game.company.getCalculatedMetrics()\n    );\n    // TODO wrap in a debug utility\n    // console.log(state);\n    return state;\n  }\n});\n\nexport {GameActions, GameStore};\n","import React from 'react';\nimport Reflux from 'reflux';\nimport {default as Home} from '../components/game/home/home.jsx';\n\nvar SceneActions = Reflux.createActions([\n  'transition'\n]);\n\nvar SceneStore = Reflux.createStore({\n  listenables: [ SceneActions ],\n\n  init() {\n    this._sceneId = null;\n    this._scene = null;\n  },\n\n  transition(scene) {\n    this._scene = scene;\n    this._sceneId = scene._rootNodeId;\n    this.trigger(this._sceneId);\n  },\n\n  getInitialState() {\n    if (this._scene === null) {\n      let home = <Home />;\n      this._sceneId = home._rootNodeID;\n      this._scene = home;\n    }\n\n    return {\n      sceneId: this._sceneId\n    };\n  },\n\n  getScene() {\n    return this._scene;\n  }\n});\n\nexport default {SceneActions, SceneStore};\n","export default {\n  pick( arr ) {\n    if ( !( arr instanceof Array ) ) {\n      throw new Error( 'You must provide an array to Utils.Random.pick' );\n    }\n\n    if ( arr.length === 0 ) {\n      return null;\n    }\n\n    return arr[Math.floor( Math.random() * arr.length )];\n  }\n};\n","export default {\n  templatize( template, data ) {\n    let rendered = template;\n    for ( let key in data ) {\n      if ( data.hasOwnProperty( key ) ) {\n        let value = data[key];\n\n        var regex = new RegExp( '{{(\\s)*?' + key + '(\\s)*?}}', 'g' );\n\n        rendered = rendered.replace( regex, value );\n      }\n    }\n\n    return rendered;\n  }\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {default as Game} from './containers/game/game.jsx';\nimport {default as ProgramListItem} from './components/game/program_list_item/program_list_item.jsx';\nMeteor.startup(function () {\n  ReactDOM.render( <ProgramListItem />, document.getElementById('render-target'));\n});\n","exports.name = \"react\";\nexports.main = \"react.js\";\n","'use strict';\n\nmodule.exports = require('./lib/React');\n","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule React\n */\n\n'use strict';\n\nvar ReactDOM = require('./ReactDOM');\nvar ReactDOMServer = require('./ReactDOMServer');\nvar ReactIsomorphic = require('./ReactIsomorphic');\n\nvar assign = require('./Object.assign');\nvar deprecated = require('./deprecated');\n\n// `version` will be added here by ReactIsomorphic.\nvar React = {};\n\nassign(React, ReactIsomorphic);\n\nassign(React, {\n  // ReactDOM\n  findDOMNode: deprecated('findDOMNode', 'ReactDOM', 'react-dom', ReactDOM, ReactDOM.findDOMNode),\n  render: deprecated('render', 'ReactDOM', 'react-dom', ReactDOM, ReactDOM.render),\n  unmountComponentAtNode: deprecated('unmountComponentAtNode', 'ReactDOM', 'react-dom', ReactDOM, ReactDOM.unmountComponentAtNode),\n\n  // ReactDOMServer\n  renderToString: deprecated('renderToString', 'ReactDOMServer', 'react-dom/server', ReactDOMServer, ReactDOMServer.renderToString),\n  renderToStaticMarkup: deprecated('renderToStaticMarkup', 'ReactDOMServer', 'react-dom/server', ReactDOMServer, ReactDOMServer.renderToStaticMarkup)\n});\n\nReact.__SECRET_DOM_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactDOM;\nReact.__SECRET_DOM_SERVER_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactDOMServer;\n\nmodule.exports = React;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOM\n */\n\n/* globals __REACT_DEVTOOLS_GLOBAL_HOOK__*/\n\n'use strict';\n\nvar ReactCurrentOwner = require('./ReactCurrentOwner');\nvar ReactDOMTextComponent = require('./ReactDOMTextComponent');\nvar ReactDefaultInjection = require('./ReactDefaultInjection');\nvar ReactInstanceHandles = require('./ReactInstanceHandles');\nvar ReactMount = require('./ReactMount');\nvar ReactPerf = require('./ReactPerf');\nvar ReactReconciler = require('./ReactReconciler');\nvar ReactUpdates = require('./ReactUpdates');\nvar ReactVersion = require('./ReactVersion');\n\nvar findDOMNode = require('./findDOMNode');\nvar renderSubtreeIntoContainer = require('./renderSubtreeIntoContainer');\nvar warning = require('fbjs/lib/warning');\n\nReactDefaultInjection.inject();\n\nvar render = ReactPerf.measure('React', 'render', ReactMount.render);\n\nvar React = {\n  findDOMNode: findDOMNode,\n  render: render,\n  unmountComponentAtNode: ReactMount.unmountComponentAtNode,\n  version: ReactVersion,\n\n  /* eslint-disable camelcase */\n  unstable_batchedUpdates: ReactUpdates.batchedUpdates,\n  unstable_renderSubtreeIntoContainer: renderSubtreeIntoContainer\n};\n\n// Inject the runtime into a devtools global hook regardless of browser.\n// Allows for debugging when the hook is injected on the page.\n/* eslint-enable camelcase */\nif (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {\n  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({\n    CurrentOwner: ReactCurrentOwner,\n    InstanceHandles: ReactInstanceHandles,\n    Mount: ReactMount,\n    Reconciler: ReactReconciler,\n    TextComponent: ReactDOMTextComponent\n  });\n}\n\nif (process.env.NODE_ENV !== 'production') {\n  var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\n  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {\n\n    // First check if devtools is not installed\n    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {\n      // If we're in Chrome or Firefox, provide a download link if not installed.\n      if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {\n        console.debug('Download the React DevTools for a better development experience: ' + 'https://fb.me/react-devtools');\n      }\n    }\n\n    // If we're in IE8, check to see if we are in compatibility mode and provide\n    // information on preventing compatibility mode\n    var ieCompatibilityMode = document.documentMode && document.documentMode < 8;\n\n    process.env.NODE_ENV !== 'production' ? warning(!ieCompatibilityMode, 'Internet Explorer is running in compatibility mode; please add the ' + 'following tag to your HTML to prevent this from happening: ' + '<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />') : undefined;\n\n    var expectedFeatures = [\n    // shims\n    Array.isArray, Array.prototype.every, Array.prototype.forEach, Array.prototype.indexOf, Array.prototype.map, Date.now, Function.prototype.bind, Object.keys, String.prototype.split, String.prototype.trim,\n\n    // shams\n    Object.create, Object.freeze];\n\n    for (var i = 0; i < expectedFeatures.length; i++) {\n      if (!expectedFeatures[i]) {\n        console.error('One or more ES5 shim/shams expected by React are not available: ' + 'https://fb.me/react-warning-polyfills');\n        break;\n      }\n    }\n  }\n}\n\nmodule.exports = React;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactCurrentOwner\n */\n\n'use strict';\n\n/**\n * Keeps track of the current owner.\n *\n * The current owner is the component who should own any components that are\n * currently being constructed.\n */\nvar ReactCurrentOwner = {\n\n  /**\n   * @internal\n   * @type {ReactComponent}\n   */\n  current: null\n\n};\n\nmodule.exports = ReactCurrentOwner;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMTextComponent\n * @typechecks static-only\n */\n\n'use strict';\n\nvar DOMChildrenOperations = require('./DOMChildrenOperations');\nvar DOMPropertyOperations = require('./DOMPropertyOperations');\nvar ReactComponentBrowserEnvironment = require('./ReactComponentBrowserEnvironment');\nvar ReactMount = require('./ReactMount');\n\nvar assign = require('./Object.assign');\nvar escapeTextContentForBrowser = require('./escapeTextContentForBrowser');\nvar setTextContent = require('./setTextContent');\nvar validateDOMNesting = require('./validateDOMNesting');\n\n/**\n * Text nodes violate a couple assumptions that React makes about components:\n *\n *  - When mounting text into the DOM, adjacent text nodes are merged.\n *  - Text nodes cannot be assigned a React root ID.\n *\n * This component is used to wrap strings in elements so that they can undergo\n * the same reconciliation that is applied to elements.\n *\n * TODO: Investigate representing React components in the DOM with text nodes.\n *\n * @class ReactDOMTextComponent\n * @extends ReactComponent\n * @internal\n */\nvar ReactDOMTextComponent = function (props) {\n  // This constructor and its argument is currently used by mocks.\n};\n\nassign(ReactDOMTextComponent.prototype, {\n\n  /**\n   * @param {ReactText} text\n   * @internal\n   */\n  construct: function (text) {\n    // TODO: This is really a ReactText (ReactNode), not a ReactElement\n    this._currentElement = text;\n    this._stringText = '' + text;\n\n    // Properties\n    this._rootNodeID = null;\n    this._mountIndex = 0;\n  },\n\n  /**\n   * Creates the markup for this text node. This node is not intended to have\n   * any features besides containing text content.\n   *\n   * @param {string} rootID DOM ID of the root node.\n   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction\n   * @return {string} Markup for this text node.\n   * @internal\n   */\n  mountComponent: function (rootID, transaction, context) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (context[validateDOMNesting.ancestorInfoContextKey]) {\n        validateDOMNesting('span', null, context[validateDOMNesting.ancestorInfoContextKey]);\n      }\n    }\n\n    this._rootNodeID = rootID;\n    if (transaction.useCreateElement) {\n      var ownerDocument = context[ReactMount.ownerDocumentContextKey];\n      var el = ownerDocument.createElement('span');\n      DOMPropertyOperations.setAttributeForID(el, rootID);\n      // Populate node cache\n      ReactMount.getID(el);\n      setTextContent(el, this._stringText);\n      return el;\n    } else {\n      var escapedText = escapeTextContentForBrowser(this._stringText);\n\n      if (transaction.renderToStaticMarkup) {\n        // Normally we'd wrap this in a `span` for the reasons stated above, but\n        // since this is a situation where React won't take over (static pages),\n        // we can simply return the text as it is.\n        return escapedText;\n      }\n\n      return '<span ' + DOMPropertyOperations.createMarkupForID(rootID) + '>' + escapedText + '</span>';\n    }\n  },\n\n  /**\n   * Updates this component by updating the text content.\n   *\n   * @param {ReactText} nextText The next text content\n   * @param {ReactReconcileTransaction} transaction\n   * @internal\n   */\n  receiveComponent: function (nextText, transaction) {\n    if (nextText !== this._currentElement) {\n      this._currentElement = nextText;\n      var nextStringText = '' + nextText;\n      if (nextStringText !== this._stringText) {\n        // TODO: Save this as pending props and use performUpdateIfNecessary\n        // and/or updateComponent to do the actual update for consistency with\n        // other component types?\n        this._stringText = nextStringText;\n        var node = ReactMount.getNode(this._rootNodeID);\n        DOMChildrenOperations.updateTextContent(node, nextStringText);\n      }\n    }\n  },\n\n  unmountComponent: function () {\n    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);\n  }\n\n});\n\nmodule.exports = ReactDOMTextComponent;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule DOMChildrenOperations\n * @typechecks static-only\n */\n\n'use strict';\n\nvar Danger = require('./Danger');\nvar ReactMultiChildUpdateTypes = require('./ReactMultiChildUpdateTypes');\nvar ReactPerf = require('./ReactPerf');\n\nvar setInnerHTML = require('./setInnerHTML');\nvar setTextContent = require('./setTextContent');\nvar invariant = require('fbjs/lib/invariant');\n\n/**\n * Inserts `childNode` as a child of `parentNode` at the `index`.\n *\n * @param {DOMElement} parentNode Parent node in which to insert.\n * @param {DOMElement} childNode Child node to insert.\n * @param {number} index Index at which to insert the child.\n * @internal\n */\nfunction insertChildAt(parentNode, childNode, index) {\n  // By exploiting arrays returning `undefined` for an undefined index, we can\n  // rely exclusively on `insertBefore(node, null)` instead of also using\n  // `appendChild(node)`. However, using `undefined` is not allowed by all\n  // browsers so we must replace it with `null`.\n\n  // fix render order error in safari\n  // IE8 will throw error when index out of list size.\n  var beforeChild = index >= parentNode.childNodes.length ? null : parentNode.childNodes.item(index);\n\n  parentNode.insertBefore(childNode, beforeChild);\n}\n\n/**\n * Operations for updating with DOM children.\n */\nvar DOMChildrenOperations = {\n\n  dangerouslyReplaceNodeWithMarkup: Danger.dangerouslyReplaceNodeWithMarkup,\n\n  updateTextContent: setTextContent,\n\n  /**\n   * Updates a component's children by processing a series of updates. The\n   * update configurations are each expected to have a `parentNode` property.\n   *\n   * @param {array<object>} updates List of update configurations.\n   * @param {array<string>} markupList List of markup strings.\n   * @internal\n   */\n  processUpdates: function (updates, markupList) {\n    var update;\n    // Mapping from parent IDs to initial child orderings.\n    var initialChildren = null;\n    // List of children that will be moved or removed.\n    var updatedChildren = null;\n\n    for (var i = 0; i < updates.length; i++) {\n      update = updates[i];\n      if (update.type === ReactMultiChildUpdateTypes.MOVE_EXISTING || update.type === ReactMultiChildUpdateTypes.REMOVE_NODE) {\n        var updatedIndex = update.fromIndex;\n        var updatedChild = update.parentNode.childNodes[updatedIndex];\n        var parentID = update.parentID;\n\n        !updatedChild ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processUpdates(): Unable to find child %s of element. This ' + 'probably means the DOM was unexpectedly mutated (e.g., by the ' + 'browser), usually due to forgetting a <tbody> when using tables, ' + 'nesting tags like <form>, <p>, or <a>, or using non-SVG elements ' + 'in an <svg> parent. Try inspecting the child nodes of the element ' + 'with React ID `%s`.', updatedIndex, parentID) : invariant(false) : undefined;\n\n        initialChildren = initialChildren || {};\n        initialChildren[parentID] = initialChildren[parentID] || [];\n        initialChildren[parentID][updatedIndex] = updatedChild;\n\n        updatedChildren = updatedChildren || [];\n        updatedChildren.push(updatedChild);\n      }\n    }\n\n    var renderedMarkup;\n    // markupList is either a list of markup or just a list of elements\n    if (markupList.length && typeof markupList[0] === 'string') {\n      renderedMarkup = Danger.dangerouslyRenderMarkup(markupList);\n    } else {\n      renderedMarkup = markupList;\n    }\n\n    // Remove updated children first so that `toIndex` is consistent.\n    if (updatedChildren) {\n      for (var j = 0; j < updatedChildren.length; j++) {\n        updatedChildren[j].parentNode.removeChild(updatedChildren[j]);\n      }\n    }\n\n    for (var k = 0; k < updates.length; k++) {\n      update = updates[k];\n      switch (update.type) {\n        case ReactMultiChildUpdateTypes.INSERT_MARKUP:\n          insertChildAt(update.parentNode, renderedMarkup[update.markupIndex], update.toIndex);\n          break;\n        case ReactMultiChildUpdateTypes.MOVE_EXISTING:\n          insertChildAt(update.parentNode, initialChildren[update.parentID][update.fromIndex], update.toIndex);\n          break;\n        case ReactMultiChildUpdateTypes.SET_MARKUP:\n          setInnerHTML(update.parentNode, update.content);\n          break;\n        case ReactMultiChildUpdateTypes.TEXT_CONTENT:\n          setTextContent(update.parentNode, update.content);\n          break;\n        case ReactMultiChildUpdateTypes.REMOVE_NODE:\n          // Already removed by the for-loop above.\n          break;\n      }\n    }\n  }\n\n};\n\nReactPerf.measureMethods(DOMChildrenOperations, 'DOMChildrenOperations', {\n  updateTextContent: 'updateTextContent'\n});\n\nmodule.exports = DOMChildrenOperations;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule Danger\n * @typechecks static-only\n */\n\n'use strict';\n\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\n\nvar createNodesFromMarkup = require('fbjs/lib/createNodesFromMarkup');\nvar emptyFunction = require('fbjs/lib/emptyFunction');\nvar getMarkupWrap = require('fbjs/lib/getMarkupWrap');\nvar invariant = require('fbjs/lib/invariant');\n\nvar OPEN_TAG_NAME_EXP = /^(<[^ \\/>]+)/;\nvar RESULT_INDEX_ATTR = 'data-danger-index';\n\n/**\n * Extracts the `nodeName` from a string of markup.\n *\n * NOTE: Extracting the `nodeName` does not require a regular expression match\n * because we make assumptions about React-generated markup (i.e. there are no\n * spaces surrounding the opening tag and there is at least one attribute).\n *\n * @param {string} markup String of markup.\n * @return {string} Node name of the supplied markup.\n * @see http://jsperf.com/extract-nodename\n */\nfunction getNodeName(markup) {\n  return markup.substring(1, markup.indexOf(' '));\n}\n\nvar Danger = {\n\n  /**\n   * Renders markup into an array of nodes. The markup is expected to render\n   * into a list of root nodes. Also, the length of `resultList` and\n   * `markupList` should be the same.\n   *\n   * @param {array<string>} markupList List of markup strings to render.\n   * @return {array<DOMElement>} List of rendered nodes.\n   * @internal\n   */\n  dangerouslyRenderMarkup: function (markupList) {\n    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyRenderMarkup(...): Cannot render markup in a worker ' + 'thread. Make sure `window` and `document` are available globally ' + 'before requiring React when unit testing or use ' + 'ReactDOMServer.renderToString for server rendering.') : invariant(false) : undefined;\n    var nodeName;\n    var markupByNodeName = {};\n    // Group markup by `nodeName` if a wrap is necessary, else by '*'.\n    for (var i = 0; i < markupList.length; i++) {\n      !markupList[i] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyRenderMarkup(...): Missing markup.') : invariant(false) : undefined;\n      nodeName = getNodeName(markupList[i]);\n      nodeName = getMarkupWrap(nodeName) ? nodeName : '*';\n      markupByNodeName[nodeName] = markupByNodeName[nodeName] || [];\n      markupByNodeName[nodeName][i] = markupList[i];\n    }\n    var resultList = [];\n    var resultListAssignmentCount = 0;\n    for (nodeName in markupByNodeName) {\n      if (!markupByNodeName.hasOwnProperty(nodeName)) {\n        continue;\n      }\n      var markupListByNodeName = markupByNodeName[nodeName];\n\n      // This for-in loop skips the holes of the sparse array. The order of\n      // iteration should follow the order of assignment, which happens to match\n      // numerical index order, but we don't rely on that.\n      var resultIndex;\n      for (resultIndex in markupListByNodeName) {\n        if (markupListByNodeName.hasOwnProperty(resultIndex)) {\n          var markup = markupListByNodeName[resultIndex];\n\n          // Push the requested markup with an additional RESULT_INDEX_ATTR\n          // attribute.  If the markup does not start with a < character, it\n          // will be discarded below (with an appropriate console.error).\n          markupListByNodeName[resultIndex] = markup.replace(OPEN_TAG_NAME_EXP,\n          // This index will be parsed back out below.\n          '$1 ' + RESULT_INDEX_ATTR + '=\"' + resultIndex + '\" ');\n        }\n      }\n\n      // Render each group of markup with similar wrapping `nodeName`.\n      var renderNodes = createNodesFromMarkup(markupListByNodeName.join(''), emptyFunction // Do nothing special with <script> tags.\n      );\n\n      for (var j = 0; j < renderNodes.length; ++j) {\n        var renderNode = renderNodes[j];\n        if (renderNode.hasAttribute && renderNode.hasAttribute(RESULT_INDEX_ATTR)) {\n\n          resultIndex = +renderNode.getAttribute(RESULT_INDEX_ATTR);\n          renderNode.removeAttribute(RESULT_INDEX_ATTR);\n\n          !!resultList.hasOwnProperty(resultIndex) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Assigning to an already-occupied result index.') : invariant(false) : undefined;\n\n          resultList[resultIndex] = renderNode;\n\n          // This should match resultList.length and markupList.length when\n          // we're done.\n          resultListAssignmentCount += 1;\n        } else if (process.env.NODE_ENV !== 'production') {\n          console.error('Danger: Discarding unexpected node:', renderNode);\n        }\n      }\n    }\n\n    // Although resultList was populated out of order, it should now be a dense\n    // array.\n    !(resultListAssignmentCount === resultList.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Did not assign to every index of resultList.') : invariant(false) : undefined;\n\n    !(resultList.length === markupList.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Expected markup to render %s nodes, but rendered %s.', markupList.length, resultList.length) : invariant(false) : undefined;\n\n    return resultList;\n  },\n\n  /**\n   * Replaces a node with a string of markup at its current position within its\n   * parent. The markup must render into a single root node.\n   *\n   * @param {DOMElement} oldChild Child node to replace.\n   * @param {string} markup Markup to render in place of the child node.\n   * @internal\n   */\n  dangerouslyReplaceNodeWithMarkup: function (oldChild, markup) {\n    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a ' + 'worker thread. Make sure `window` and `document` are available ' + 'globally before requiring React when unit testing or use ' + 'ReactDOMServer.renderToString() for server rendering.') : invariant(false) : undefined;\n    !markup ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : invariant(false) : undefined;\n    !(oldChild.tagName.toLowerCase() !== 'html') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the ' + '<html> node. This is because browser quirks make this unreliable ' + 'and/or slow. If you want to render to the root you must use ' + 'server rendering. See ReactDOMServer.renderToString().') : invariant(false) : undefined;\n\n    var newChild;\n    if (typeof markup === 'string') {\n      newChild = createNodesFromMarkup(markup, emptyFunction)[0];\n    } else {\n      newChild = markup;\n    }\n    oldChild.parentNode.replaceChild(newChild, oldChild);\n  }\n\n};\n\nmodule.exports = Danger;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactMultiChildUpdateTypes\n */\n\n'use strict';\n\nvar keyMirror = require('fbjs/lib/keyMirror');\n\n/**\n * When a component's children are updated, a series of update configuration\n * objects are created in order to batch and serialize the required changes.\n *\n * Enumerates all the possible types of update configurations.\n *\n * @internal\n */\nvar ReactMultiChildUpdateTypes = keyMirror({\n  INSERT_MARKUP: null,\n  MOVE_EXISTING: null,\n  REMOVE_NODE: null,\n  SET_MARKUP: null,\n  TEXT_CONTENT: null\n});\n\nmodule.exports = ReactMultiChildUpdateTypes;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactPerf\n * @typechecks static-only\n */\n\n'use strict';\n\n/**\n * ReactPerf is a general AOP system designed to measure performance. This\n * module only has the hooks: see ReactDefaultPerf for the analysis tool.\n */\nvar ReactPerf = {\n  /**\n   * Boolean to enable/disable measurement. Set to false by default to prevent\n   * accidental logging and perf loss.\n   */\n  enableMeasure: false,\n\n  /**\n   * Holds onto the measure function in use. By default, don't measure\n   * anything, but we'll override this if we inject a measure function.\n   */\n  storedMeasure: _noMeasure,\n\n  /**\n   * @param {object} object\n   * @param {string} objectName\n   * @param {object<string>} methodNames\n   */\n  measureMethods: function (object, objectName, methodNames) {\n    if (process.env.NODE_ENV !== 'production') {\n      for (var key in methodNames) {\n        if (!methodNames.hasOwnProperty(key)) {\n          continue;\n        }\n        object[key] = ReactPerf.measure(objectName, methodNames[key], object[key]);\n      }\n    }\n  },\n\n  /**\n   * Use this to wrap methods you want to measure. Zero overhead in production.\n   *\n   * @param {string} objName\n   * @param {string} fnName\n   * @param {function} func\n   * @return {function}\n   */\n  measure: function (objName, fnName, func) {\n    if (process.env.NODE_ENV !== 'production') {\n      var measuredFunc = null;\n      var wrapper = function () {\n        if (ReactPerf.enableMeasure) {\n          if (!measuredFunc) {\n            measuredFunc = ReactPerf.storedMeasure(objName, fnName, func);\n          }\n          return measuredFunc.apply(this, arguments);\n        }\n        return func.apply(this, arguments);\n      };\n      wrapper.displayName = objName + '_' + fnName;\n      return wrapper;\n    }\n    return func;\n  },\n\n  injection: {\n    /**\n     * @param {function} measure\n     */\n    injectMeasure: function (measure) {\n      ReactPerf.storedMeasure = measure;\n    }\n  }\n};\n\n/**\n * Simply passes through the measured function, without measuring it.\n *\n * @param {string} objName\n * @param {string} fnName\n * @param {function} func\n * @return {function}\n */\nfunction _noMeasure(objName, fnName, func) {\n  return func;\n}\n\nmodule.exports = ReactPerf;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule setInnerHTML\n */\n\n/* globals MSApp */\n\n'use strict';\n\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\n\nvar WHITESPACE_TEST = /^[ \\r\\n\\t\\f]/;\nvar NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \\r\\n\\t\\f\\/>]/;\n\n/**\n * Set the innerHTML property of a node, ensuring that whitespace is preserved\n * even in IE8.\n *\n * @param {DOMElement} node\n * @param {string} html\n * @internal\n */\nvar setInnerHTML = function (node, html) {\n  node.innerHTML = html;\n};\n\n// Win8 apps: Allow all html to be inserted\nif (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {\n  setInnerHTML = function (node, html) {\n    MSApp.execUnsafeLocalFunction(function () {\n      node.innerHTML = html;\n    });\n  };\n}\n\nif (ExecutionEnvironment.canUseDOM) {\n  // IE8: When updating a just created node with innerHTML only leading\n  // whitespace is removed. When updating an existing node with innerHTML\n  // whitespace in root TextNodes is also collapsed.\n  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html\n\n  // Feature detection; only IE8 is known to behave improperly like this.\n  var testElement = document.createElement('div');\n  testElement.innerHTML = ' ';\n  if (testElement.innerHTML === '') {\n    setInnerHTML = function (node, html) {\n      // Magic theory: IE8 supposedly differentiates between added and updated\n      // nodes when processing innerHTML, innerHTML on updated nodes suffers\n      // from worse whitespace behavior. Re-adding a node like this triggers\n      // the initial and more favorable whitespace behavior.\n      // TODO: What to do on a detached node?\n      if (node.parentNode) {\n        node.parentNode.replaceChild(node, node);\n      }\n\n      // We also implement a workaround for non-visible tags disappearing into\n      // thin air on IE8, this only happens if there is no visible text\n      // in-front of the non-visible tags. Piggyback on the whitespace fix\n      // and simply check if any non-visible tags appear in the source.\n      if (WHITESPACE_TEST.test(html) || html[0] === '<' && NONVISIBLE_TEST.test(html)) {\n        // Recover leading whitespace by temporarily prepending any character.\n        // \\uFEFF has the potential advantage of being zero-width/invisible.\n        // UglifyJS drops U+FEFF chars when parsing, so use String.fromCharCode\n        // in hopes that this is preserved even if \"\\uFEFF\" is transformed to\n        // the actual Unicode character (by Babel, for example).\n        // https://github.com/mishoo/UglifyJS2/blob/v2.4.20/lib/parse.js#L216\n        node.innerHTML = String.fromCharCode(0xFEFF) + html;\n\n        // deleteData leaves an empty `TextNode` which offsets the index of all\n        // children. Definitely want to avoid this.\n        var textNode = node.firstChild;\n        if (textNode.data.length === 1) {\n          node.removeChild(textNode);\n        } else {\n          textNode.deleteData(0, 1);\n        }\n      } else {\n        node.innerHTML = html;\n      }\n    };\n  }\n}\n\nmodule.exports = setInnerHTML;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule setTextContent\n */\n\n'use strict';\n\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\nvar escapeTextContentForBrowser = require('./escapeTextContentForBrowser');\nvar setInnerHTML = require('./setInnerHTML');\n\n/**\n * Set the textContent property of a node, ensuring that whitespace is preserved\n * even in IE8. innerText is a poor substitute for textContent and, among many\n * issues, inserts <br> instead of the literal newline chars. innerHTML behaves\n * as it should.\n *\n * @param {DOMElement} node\n * @param {string} text\n * @internal\n */\nvar setTextContent = function (node, text) {\n  node.textContent = text;\n};\n\nif (ExecutionEnvironment.canUseDOM) {\n  if (!('textContent' in document.documentElement)) {\n    setTextContent = function (node, text) {\n      setInnerHTML(node, escapeTextContentForBrowser(text));\n    };\n  }\n}\n\nmodule.exports = setTextContent;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule escapeTextContentForBrowser\n */\n\n'use strict';\n\nvar ESCAPE_LOOKUP = {\n  '&': '&amp;',\n  '>': '&gt;',\n  '<': '&lt;',\n  '\"': '&quot;',\n  '\\'': '&#x27;'\n};\n\nvar ESCAPE_REGEX = /[&><\"']/g;\n\nfunction escaper(match) {\n  return ESCAPE_LOOKUP[match];\n}\n\n/**\n * Escapes text to prevent scripting attacks.\n *\n * @param {*} text Text value to escape.\n * @return {string} An escaped string.\n */\nfunction escapeTextContentForBrowser(text) {\n  return ('' + text).replace(ESCAPE_REGEX, escaper);\n}\n\nmodule.exports = escapeTextContentForBrowser;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule DOMPropertyOperations\n * @typechecks static-only\n */\n\n'use strict';\n\nvar DOMProperty = require('./DOMProperty');\nvar ReactPerf = require('./ReactPerf');\n\nvar quoteAttributeValueForBrowser = require('./quoteAttributeValueForBrowser');\nvar warning = require('fbjs/lib/warning');\n\n// Simplified subset\nvar VALID_ATTRIBUTE_NAME_REGEX = /^[a-zA-Z_][\\w\\.\\-]*$/;\nvar illegalAttributeNameCache = {};\nvar validatedAttributeNameCache = {};\n\nfunction isAttributeNameSafe(attributeName) {\n  if (validatedAttributeNameCache.hasOwnProperty(attributeName)) {\n    return true;\n  }\n  if (illegalAttributeNameCache.hasOwnProperty(attributeName)) {\n    return false;\n  }\n  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {\n    validatedAttributeNameCache[attributeName] = true;\n    return true;\n  }\n  illegalAttributeNameCache[attributeName] = true;\n  process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid attribute name: `%s`', attributeName) : undefined;\n  return false;\n}\n\nfunction shouldIgnoreValue(propertyInfo, value) {\n  return value == null || propertyInfo.hasBooleanValue && !value || propertyInfo.hasNumericValue && isNaN(value) || propertyInfo.hasPositiveNumericValue && value < 1 || propertyInfo.hasOverloadedBooleanValue && value === false;\n}\n\nif (process.env.NODE_ENV !== 'production') {\n  var reactProps = {\n    children: true,\n    dangerouslySetInnerHTML: true,\n    key: true,\n    ref: true\n  };\n  var warnedProperties = {};\n\n  var warnUnknownProperty = function (name) {\n    if (reactProps.hasOwnProperty(name) && reactProps[name] || warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {\n      return;\n    }\n\n    warnedProperties[name] = true;\n    var lowerCasedName = name.toLowerCase();\n\n    // data-* attributes should be lowercase; suggest the lowercase version\n    var standardName = DOMProperty.isCustomAttribute(lowerCasedName) ? lowerCasedName : DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;\n\n    // For now, only warn when we have a suggested correction. This prevents\n    // logging too much when using transferPropsTo.\n    process.env.NODE_ENV !== 'production' ? warning(standardName == null, 'Unknown DOM property %s. Did you mean %s?', name, standardName) : undefined;\n  };\n}\n\n/**\n * Operations for dealing with DOM properties.\n */\nvar DOMPropertyOperations = {\n\n  /**\n   * Creates markup for the ID property.\n   *\n   * @param {string} id Unescaped ID.\n   * @return {string} Markup string.\n   */\n  createMarkupForID: function (id) {\n    return DOMProperty.ID_ATTRIBUTE_NAME + '=' + quoteAttributeValueForBrowser(id);\n  },\n\n  setAttributeForID: function (node, id) {\n    node.setAttribute(DOMProperty.ID_ATTRIBUTE_NAME, id);\n  },\n\n  /**\n   * Creates markup for a property.\n   *\n   * @param {string} name\n   * @param {*} value\n   * @return {?string} Markup string, or null if the property was invalid.\n   */\n  createMarkupForProperty: function (name, value) {\n    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;\n    if (propertyInfo) {\n      if (shouldIgnoreValue(propertyInfo, value)) {\n        return '';\n      }\n      var attributeName = propertyInfo.attributeName;\n      if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {\n        return attributeName + '=\"\"';\n      }\n      return attributeName + '=' + quoteAttributeValueForBrowser(value);\n    } else if (DOMProperty.isCustomAttribute(name)) {\n      if (value == null) {\n        return '';\n      }\n      return name + '=' + quoteAttributeValueForBrowser(value);\n    } else if (process.env.NODE_ENV !== 'production') {\n      warnUnknownProperty(name);\n    }\n    return null;\n  },\n\n  /**\n   * Creates markup for a custom property.\n   *\n   * @param {string} name\n   * @param {*} value\n   * @return {string} Markup string, or empty string if the property was invalid.\n   */\n  createMarkupForCustomAttribute: function (name, value) {\n    if (!isAttributeNameSafe(name) || value == null) {\n      return '';\n    }\n    return name + '=' + quoteAttributeValueForBrowser(value);\n  },\n\n  /**\n   * Sets the value for a property on a node.\n   *\n   * @param {DOMElement} node\n   * @param {string} name\n   * @param {*} value\n   */\n  setValueForProperty: function (node, name, value) {\n    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;\n    if (propertyInfo) {\n      var mutationMethod = propertyInfo.mutationMethod;\n      if (mutationMethod) {\n        mutationMethod(node, value);\n      } else if (shouldIgnoreValue(propertyInfo, value)) {\n        this.deleteValueForProperty(node, name);\n      } else if (propertyInfo.mustUseAttribute) {\n        var attributeName = propertyInfo.attributeName;\n        var namespace = propertyInfo.attributeNamespace;\n        // `setAttribute` with objects becomes only `[object]` in IE8/9,\n        // ('' + value) makes it output the correct toString()-value.\n        if (namespace) {\n          node.setAttributeNS(namespace, attributeName, '' + value);\n        } else if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {\n          node.setAttribute(attributeName, '');\n        } else {\n          node.setAttribute(attributeName, '' + value);\n        }\n      } else {\n        var propName = propertyInfo.propertyName;\n        // Must explicitly cast values for HAS_SIDE_EFFECTS-properties to the\n        // property type before comparing; only `value` does and is string.\n        if (!propertyInfo.hasSideEffects || '' + node[propName] !== '' + value) {\n          // Contrary to `setAttribute`, object properties are properly\n          // `toString`ed by IE8/9.\n          node[propName] = value;\n        }\n      }\n    } else if (DOMProperty.isCustomAttribute(name)) {\n      DOMPropertyOperations.setValueForAttribute(node, name, value);\n    } else if (process.env.NODE_ENV !== 'production') {\n      warnUnknownProperty(name);\n    }\n  },\n\n  setValueForAttribute: function (node, name, value) {\n    if (!isAttributeNameSafe(name)) {\n      return;\n    }\n    if (value == null) {\n      node.removeAttribute(name);\n    } else {\n      node.setAttribute(name, '' + value);\n    }\n  },\n\n  /**\n   * Deletes the value for a property on a node.\n   *\n   * @param {DOMElement} node\n   * @param {string} name\n   */\n  deleteValueForProperty: function (node, name) {\n    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;\n    if (propertyInfo) {\n      var mutationMethod = propertyInfo.mutationMethod;\n      if (mutationMethod) {\n        mutationMethod(node, undefined);\n      } else if (propertyInfo.mustUseAttribute) {\n        node.removeAttribute(propertyInfo.attributeName);\n      } else {\n        var propName = propertyInfo.propertyName;\n        var defaultValue = DOMProperty.getDefaultValueForProperty(node.nodeName, propName);\n        if (!propertyInfo.hasSideEffects || '' + node[propName] !== defaultValue) {\n          node[propName] = defaultValue;\n        }\n      }\n    } else if (DOMProperty.isCustomAttribute(name)) {\n      node.removeAttribute(name);\n    } else if (process.env.NODE_ENV !== 'production') {\n      warnUnknownProperty(name);\n    }\n  }\n\n};\n\nReactPerf.measureMethods(DOMPropertyOperations, 'DOMPropertyOperations', {\n  setValueForProperty: 'setValueForProperty',\n  setValueForAttribute: 'setValueForAttribute',\n  deleteValueForProperty: 'deleteValueForProperty'\n});\n\nmodule.exports = DOMPropertyOperations;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule DOMProperty\n * @typechecks static-only\n */\n\n'use strict';\n\nvar invariant = require('fbjs/lib/invariant');\n\nfunction checkMask(value, bitmask) {\n  return (value & bitmask) === bitmask;\n}\n\nvar DOMPropertyInjection = {\n  /**\n   * Mapping from normalized, camelcased property names to a configuration that\n   * specifies how the associated DOM property should be accessed or rendered.\n   */\n  MUST_USE_ATTRIBUTE: 0x1,\n  MUST_USE_PROPERTY: 0x2,\n  HAS_SIDE_EFFECTS: 0x4,\n  HAS_BOOLEAN_VALUE: 0x8,\n  HAS_NUMERIC_VALUE: 0x10,\n  HAS_POSITIVE_NUMERIC_VALUE: 0x20 | 0x10,\n  HAS_OVERLOADED_BOOLEAN_VALUE: 0x40,\n\n  /**\n   * Inject some specialized knowledge about the DOM. This takes a config object\n   * with the following properties:\n   *\n   * isCustomAttribute: function that given an attribute name will return true\n   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*\n   * attributes where it's impossible to enumerate all of the possible\n   * attribute names,\n   *\n   * Properties: object mapping DOM property name to one of the\n   * DOMPropertyInjection constants or null. If your attribute isn't in here,\n   * it won't get written to the DOM.\n   *\n   * DOMAttributeNames: object mapping React attribute name to the DOM\n   * attribute name. Attribute names not specified use the **lowercase**\n   * normalized name.\n   *\n   * DOMAttributeNamespaces: object mapping React attribute name to the DOM\n   * attribute namespace URL. (Attribute names not specified use no namespace.)\n   *\n   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.\n   * Property names not specified use the normalized name.\n   *\n   * DOMMutationMethods: Properties that require special mutation methods. If\n   * `value` is undefined, the mutation method should unset the property.\n   *\n   * @param {object} domPropertyConfig the config as described above.\n   */\n  injectDOMPropertyConfig: function (domPropertyConfig) {\n    var Injection = DOMPropertyInjection;\n    var Properties = domPropertyConfig.Properties || {};\n    var DOMAttributeNamespaces = domPropertyConfig.DOMAttributeNamespaces || {};\n    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};\n    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};\n    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};\n\n    if (domPropertyConfig.isCustomAttribute) {\n      DOMProperty._isCustomAttributeFunctions.push(domPropertyConfig.isCustomAttribute);\n    }\n\n    for (var propName in Properties) {\n      !!DOMProperty.properties.hasOwnProperty(propName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'injectDOMPropertyConfig(...): You\\'re trying to inject DOM property ' + '\\'%s\\' which has already been injected. You may be accidentally ' + 'injecting the same DOM property config twice, or you may be ' + 'injecting two configs that have conflicting property names.', propName) : invariant(false) : undefined;\n\n      var lowerCased = propName.toLowerCase();\n      var propConfig = Properties[propName];\n\n      var propertyInfo = {\n        attributeName: lowerCased,\n        attributeNamespace: null,\n        propertyName: propName,\n        mutationMethod: null,\n\n        mustUseAttribute: checkMask(propConfig, Injection.MUST_USE_ATTRIBUTE),\n        mustUseProperty: checkMask(propConfig, Injection.MUST_USE_PROPERTY),\n        hasSideEffects: checkMask(propConfig, Injection.HAS_SIDE_EFFECTS),\n        hasBooleanValue: checkMask(propConfig, Injection.HAS_BOOLEAN_VALUE),\n        hasNumericValue: checkMask(propConfig, Injection.HAS_NUMERIC_VALUE),\n        hasPositiveNumericValue: checkMask(propConfig, Injection.HAS_POSITIVE_NUMERIC_VALUE),\n        hasOverloadedBooleanValue: checkMask(propConfig, Injection.HAS_OVERLOADED_BOOLEAN_VALUE)\n      };\n\n      !(!propertyInfo.mustUseAttribute || !propertyInfo.mustUseProperty) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Cannot require using both attribute and property: %s', propName) : invariant(false) : undefined;\n      !(propertyInfo.mustUseProperty || !propertyInfo.hasSideEffects) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Properties that have side effects must use property: %s', propName) : invariant(false) : undefined;\n      !(propertyInfo.hasBooleanValue + propertyInfo.hasNumericValue + propertyInfo.hasOverloadedBooleanValue <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Value can be one of boolean, overloaded boolean, or ' + 'numeric value, but not a combination: %s', propName) : invariant(false) : undefined;\n\n      if (process.env.NODE_ENV !== 'production') {\n        DOMProperty.getPossibleStandardName[lowerCased] = propName;\n      }\n\n      if (DOMAttributeNames.hasOwnProperty(propName)) {\n        var attributeName = DOMAttributeNames[propName];\n        propertyInfo.attributeName = attributeName;\n        if (process.env.NODE_ENV !== 'production') {\n          DOMProperty.getPossibleStandardName[attributeName] = propName;\n        }\n      }\n\n      if (DOMAttributeNamespaces.hasOwnProperty(propName)) {\n        propertyInfo.attributeNamespace = DOMAttributeNamespaces[propName];\n      }\n\n      if (DOMPropertyNames.hasOwnProperty(propName)) {\n        propertyInfo.propertyName = DOMPropertyNames[propName];\n      }\n\n      if (DOMMutationMethods.hasOwnProperty(propName)) {\n        propertyInfo.mutationMethod = DOMMutationMethods[propName];\n      }\n\n      DOMProperty.properties[propName] = propertyInfo;\n    }\n  }\n};\nvar defaultValueCache = {};\n\n/**\n * DOMProperty exports lookup objects that can be used like functions:\n *\n *   > DOMProperty.isValid['id']\n *   true\n *   > DOMProperty.isValid['foobar']\n *   undefined\n *\n * Although this may be confusing, it performs better in general.\n *\n * @see http://jsperf.com/key-exists\n * @see http://jsperf.com/key-missing\n */\nvar DOMProperty = {\n\n  ID_ATTRIBUTE_NAME: 'data-reactid',\n\n  /**\n   * Map from property \"standard name\" to an object with info about how to set\n   * the property in the DOM. Each object contains:\n   *\n   * attributeName:\n   *   Used when rendering markup or with `*Attribute()`.\n   * attributeNamespace\n   * propertyName:\n   *   Used on DOM node instances. (This includes properties that mutate due to\n   *   external factors.)\n   * mutationMethod:\n   *   If non-null, used instead of the property or `setAttribute()` after\n   *   initial render.\n   * mustUseAttribute:\n   *   Whether the property must be accessed and mutated using `*Attribute()`.\n   *   (This includes anything that fails `<propName> in <element>`.)\n   * mustUseProperty:\n   *   Whether the property must be accessed and mutated as an object property.\n   * hasSideEffects:\n   *   Whether or not setting a value causes side effects such as triggering\n   *   resources to be loaded or text selection changes. If true, we read from\n   *   the DOM before updating to ensure that the value is only set if it has\n   *   changed.\n   * hasBooleanValue:\n   *   Whether the property should be removed when set to a falsey value.\n   * hasNumericValue:\n   *   Whether the property must be numeric or parse as a numeric and should be\n   *   removed when set to a falsey value.\n   * hasPositiveNumericValue:\n   *   Whether the property must be positive numeric or parse as a positive\n   *   numeric and should be removed when set to a falsey value.\n   * hasOverloadedBooleanValue:\n   *   Whether the property can be used as a flag as well as with a value.\n   *   Removed when strictly equal to false; present without a value when\n   *   strictly equal to true; present with a value otherwise.\n   */\n  properties: {},\n\n  /**\n   * Mapping from lowercase property names to the properly cased version, used\n   * to warn in the case of missing properties. Available only in __DEV__.\n   * @type {Object}\n   */\n  getPossibleStandardName: process.env.NODE_ENV !== 'production' ? {} : null,\n\n  /**\n   * All of the isCustomAttribute() functions that have been injected.\n   */\n  _isCustomAttributeFunctions: [],\n\n  /**\n   * Checks whether a property name is a custom attribute.\n   * @method\n   */\n  isCustomAttribute: function (attributeName) {\n    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {\n      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];\n      if (isCustomAttributeFn(attributeName)) {\n        return true;\n      }\n    }\n    return false;\n  },\n\n  /**\n   * Returns the default property value for a DOM property (i.e., not an\n   * attribute). Most default values are '' or false, but not all. Worse yet,\n   * some (in particular, `type`) vary depending on the type of element.\n   *\n   * TODO: Is it better to grab all the possible properties when creating an\n   * element to avoid having to create the same element twice?\n   */\n  getDefaultValueForProperty: function (nodeName, prop) {\n    var nodeDefaults = defaultValueCache[nodeName];\n    var testElement;\n    if (!nodeDefaults) {\n      defaultValueCache[nodeName] = nodeDefaults = {};\n    }\n    if (!(prop in nodeDefaults)) {\n      testElement = document.createElement(nodeName);\n      nodeDefaults[prop] = testElement[prop];\n    }\n    return nodeDefaults[prop];\n  },\n\n  injection: DOMPropertyInjection\n};\n\nmodule.exports = DOMProperty;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule quoteAttributeValueForBrowser\n */\n\n'use strict';\n\nvar escapeTextContentForBrowser = require('./escapeTextContentForBrowser');\n\n/**\n * Escapes attribute value to prevent scripting attacks.\n *\n * @param {*} value Value to escape.\n * @return {string} An escaped string.\n */\nfunction quoteAttributeValueForBrowser(value) {\n  return '\"' + escapeTextContentForBrowser(value) + '\"';\n}\n\nmodule.exports = quoteAttributeValueForBrowser;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactComponentBrowserEnvironment\n */\n\n'use strict';\n\nvar ReactDOMIDOperations = require('./ReactDOMIDOperations');\nvar ReactMount = require('./ReactMount');\n\n/**\n * Abstracts away all functionality of the reconciler that requires knowledge of\n * the browser context. TODO: These callers should be refactored to avoid the\n * need for this injection.\n */\nvar ReactComponentBrowserEnvironment = {\n\n  processChildrenUpdates: ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,\n\n  replaceNodeWithMarkupByID: ReactDOMIDOperations.dangerouslyReplaceNodeWithMarkupByID,\n\n  /**\n   * If a particular environment requires that some resources be cleaned up,\n   * specify this in the injected Mixin. In the DOM, we would likely want to\n   * purge any cached node ID lookups.\n   *\n   * @private\n   */\n  unmountIDFromEnvironment: function (rootNodeID) {\n    ReactMount.purgeID(rootNodeID);\n  }\n\n};\n\nmodule.exports = ReactComponentBrowserEnvironment;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMIDOperations\n * @typechecks static-only\n */\n\n'use strict';\n\nvar DOMChildrenOperations = require('./DOMChildrenOperations');\nvar DOMPropertyOperations = require('./DOMPropertyOperations');\nvar ReactMount = require('./ReactMount');\nvar ReactPerf = require('./ReactPerf');\n\nvar invariant = require('fbjs/lib/invariant');\n\n/**\n * Errors for properties that should not be updated with `updatePropertyByID()`.\n *\n * @type {object}\n * @private\n */\nvar INVALID_PROPERTY_ERRORS = {\n  dangerouslySetInnerHTML: '`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.',\n  style: '`style` must be set using `updateStylesByID()`.'\n};\n\n/**\n * Operations used to process updates to DOM nodes.\n */\nvar ReactDOMIDOperations = {\n\n  /**\n   * Updates a DOM node with new property values. This should only be used to\n   * update DOM properties in `DOMProperty`.\n   *\n   * @param {string} id ID of the node to update.\n   * @param {string} name A valid property name, see `DOMProperty`.\n   * @param {*} value New value of the property.\n   * @internal\n   */\n  updatePropertyByID: function (id, name, value) {\n    var node = ReactMount.getNode(id);\n    !!INVALID_PROPERTY_ERRORS.hasOwnProperty(name) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updatePropertyByID(...): %s', INVALID_PROPERTY_ERRORS[name]) : invariant(false) : undefined;\n\n    // If we're updating to null or undefined, we should remove the property\n    // from the DOM node instead of inadvertantly setting to a string. This\n    // brings us in line with the same behavior we have on initial render.\n    if (value != null) {\n      DOMPropertyOperations.setValueForProperty(node, name, value);\n    } else {\n      DOMPropertyOperations.deleteValueForProperty(node, name);\n    }\n  },\n\n  /**\n   * Replaces a DOM node that exists in the document with markup.\n   *\n   * @param {string} id ID of child to be replaced.\n   * @param {string} markup Dangerous markup to inject in place of child.\n   * @internal\n   * @see {Danger.dangerouslyReplaceNodeWithMarkup}\n   */\n  dangerouslyReplaceNodeWithMarkupByID: function (id, markup) {\n    var node = ReactMount.getNode(id);\n    DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup(node, markup);\n  },\n\n  /**\n   * Updates a component's children by processing a series of updates.\n   *\n   * @param {array<object>} updates List of update configurations.\n   * @param {array<string>} markup List of markup strings.\n   * @internal\n   */\n  dangerouslyProcessChildrenUpdates: function (updates, markup) {\n    for (var i = 0; i < updates.length; i++) {\n      updates[i].parentNode = ReactMount.getNode(updates[i].parentID);\n    }\n    DOMChildrenOperations.processUpdates(updates, markup);\n  }\n};\n\nReactPerf.measureMethods(ReactDOMIDOperations, 'ReactDOMIDOperations', {\n  dangerouslyReplaceNodeWithMarkupByID: 'dangerouslyReplaceNodeWithMarkupByID',\n  dangerouslyProcessChildrenUpdates: 'dangerouslyProcessChildrenUpdates'\n});\n\nmodule.exports = ReactDOMIDOperations;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactMount\n */\n\n'use strict';\n\nvar DOMProperty = require('./DOMProperty');\nvar ReactBrowserEventEmitter = require('./ReactBrowserEventEmitter');\nvar ReactCurrentOwner = require('./ReactCurrentOwner');\nvar ReactDOMFeatureFlags = require('./ReactDOMFeatureFlags');\nvar ReactElement = require('./ReactElement');\nvar ReactEmptyComponentRegistry = require('./ReactEmptyComponentRegistry');\nvar ReactInstanceHandles = require('./ReactInstanceHandles');\nvar ReactInstanceMap = require('./ReactInstanceMap');\nvar ReactMarkupChecksum = require('./ReactMarkupChecksum');\nvar ReactPerf = require('./ReactPerf');\nvar ReactReconciler = require('./ReactReconciler');\nvar ReactUpdateQueue = require('./ReactUpdateQueue');\nvar ReactUpdates = require('./ReactUpdates');\n\nvar assign = require('./Object.assign');\nvar emptyObject = require('fbjs/lib/emptyObject');\nvar containsNode = require('fbjs/lib/containsNode');\nvar instantiateReactComponent = require('./instantiateReactComponent');\nvar invariant = require('fbjs/lib/invariant');\nvar setInnerHTML = require('./setInnerHTML');\nvar shouldUpdateReactComponent = require('./shouldUpdateReactComponent');\nvar validateDOMNesting = require('./validateDOMNesting');\nvar warning = require('fbjs/lib/warning');\n\nvar ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;\nvar nodeCache = {};\n\nvar ELEMENT_NODE_TYPE = 1;\nvar DOC_NODE_TYPE = 9;\nvar DOCUMENT_FRAGMENT_NODE_TYPE = 11;\n\nvar ownerDocumentContextKey = '__ReactMount_ownerDocument$' + Math.random().toString(36).slice(2);\n\n/** Mapping from reactRootID to React component instance. */\nvar instancesByReactRootID = {};\n\n/** Mapping from reactRootID to `container` nodes. */\nvar containersByReactRootID = {};\n\nif (process.env.NODE_ENV !== 'production') {\n  /** __DEV__-only mapping from reactRootID to root elements. */\n  var rootElementsByReactRootID = {};\n}\n\n// Used to store breadth-first search state in findComponentRoot.\nvar findComponentRootReusableArray = [];\n\n/**\n * Finds the index of the first character\n * that's not common between the two given strings.\n *\n * @return {number} the index of the character where the strings diverge\n */\nfunction firstDifferenceIndex(string1, string2) {\n  var minLen = Math.min(string1.length, string2.length);\n  for (var i = 0; i < minLen; i++) {\n    if (string1.charAt(i) !== string2.charAt(i)) {\n      return i;\n    }\n  }\n  return string1.length === string2.length ? -1 : minLen;\n}\n\n/**\n * @param {DOMElement|DOMDocument} container DOM element that may contain\n * a React component\n * @return {?*} DOM element that may have the reactRoot ID, or null.\n */\nfunction getReactRootElementInContainer(container) {\n  if (!container) {\n    return null;\n  }\n\n  if (container.nodeType === DOC_NODE_TYPE) {\n    return container.documentElement;\n  } else {\n    return container.firstChild;\n  }\n}\n\n/**\n * @param {DOMElement} container DOM element that may contain a React component.\n * @return {?string} A \"reactRoot\" ID, if a React component is rendered.\n */\nfunction getReactRootID(container) {\n  var rootElement = getReactRootElementInContainer(container);\n  return rootElement && ReactMount.getID(rootElement);\n}\n\n/**\n * Accessing node[ATTR_NAME] or calling getAttribute(ATTR_NAME) on a form\n * element can return its control whose name or ID equals ATTR_NAME. All\n * DOM nodes support `getAttributeNode` but this can also get called on\n * other objects so just return '' if we're given something other than a\n * DOM node (such as window).\n *\n * @param {?DOMElement|DOMWindow|DOMDocument|DOMTextNode} node DOM node.\n * @return {string} ID of the supplied `domNode`.\n */\nfunction getID(node) {\n  var id = internalGetID(node);\n  if (id) {\n    if (nodeCache.hasOwnProperty(id)) {\n      var cached = nodeCache[id];\n      if (cached !== node) {\n        !!isValid(cached, id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactMount: Two valid but unequal nodes with the same `%s`: %s', ATTR_NAME, id) : invariant(false) : undefined;\n\n        nodeCache[id] = node;\n      }\n    } else {\n      nodeCache[id] = node;\n    }\n  }\n\n  return id;\n}\n\nfunction internalGetID(node) {\n  // If node is something like a window, document, or text node, none of\n  // which support attributes or a .getAttribute method, gracefully return\n  // the empty string, as if the attribute were missing.\n  return node && node.getAttribute && node.getAttribute(ATTR_NAME) || '';\n}\n\n/**\n * Sets the React-specific ID of the given node.\n *\n * @param {DOMElement} node The DOM node whose ID will be set.\n * @param {string} id The value of the ID attribute.\n */\nfunction setID(node, id) {\n  var oldID = internalGetID(node);\n  if (oldID !== id) {\n    delete nodeCache[oldID];\n  }\n  node.setAttribute(ATTR_NAME, id);\n  nodeCache[id] = node;\n}\n\n/**\n * Finds the node with the supplied React-generated DOM ID.\n *\n * @param {string} id A React-generated DOM ID.\n * @return {DOMElement} DOM node with the suppled `id`.\n * @internal\n */\nfunction getNode(id) {\n  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {\n    nodeCache[id] = ReactMount.findReactNodeByID(id);\n  }\n  return nodeCache[id];\n}\n\n/**\n * Finds the node with the supplied public React instance.\n *\n * @param {*} instance A public React instance.\n * @return {?DOMElement} DOM node with the suppled `id`.\n * @internal\n */\nfunction getNodeFromInstance(instance) {\n  var id = ReactInstanceMap.get(instance)._rootNodeID;\n  if (ReactEmptyComponentRegistry.isNullComponentID(id)) {\n    return null;\n  }\n  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {\n    nodeCache[id] = ReactMount.findReactNodeByID(id);\n  }\n  return nodeCache[id];\n}\n\n/**\n * A node is \"valid\" if it is contained by a currently mounted container.\n *\n * This means that the node does not have to be contained by a document in\n * order to be considered valid.\n *\n * @param {?DOMElement} node The candidate DOM node.\n * @param {string} id The expected ID of the node.\n * @return {boolean} Whether the node is contained by a mounted container.\n */\nfunction isValid(node, id) {\n  if (node) {\n    !(internalGetID(node) === id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactMount: Unexpected modification of `%s`', ATTR_NAME) : invariant(false) : undefined;\n\n    var container = ReactMount.findReactContainerForID(id);\n    if (container && containsNode(container, node)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\n/**\n * Causes the cache to forget about one React-specific ID.\n *\n * @param {string} id The ID to forget.\n */\nfunction purgeID(id) {\n  delete nodeCache[id];\n}\n\nvar deepestNodeSoFar = null;\nfunction findDeepestCachedAncestorImpl(ancestorID) {\n  var ancestor = nodeCache[ancestorID];\n  if (ancestor && isValid(ancestor, ancestorID)) {\n    deepestNodeSoFar = ancestor;\n  } else {\n    // This node isn't populated in the cache, so presumably none of its\n    // descendants are. Break out of the loop.\n    return false;\n  }\n}\n\n/**\n * Return the deepest cached node whose ID is a prefix of `targetID`.\n */\nfunction findDeepestCachedAncestor(targetID) {\n  deepestNodeSoFar = null;\n  ReactInstanceHandles.traverseAncestors(targetID, findDeepestCachedAncestorImpl);\n\n  var foundNode = deepestNodeSoFar;\n  deepestNodeSoFar = null;\n  return foundNode;\n}\n\n/**\n * Mounts this component and inserts it into the DOM.\n *\n * @param {ReactComponent} componentInstance The instance to mount.\n * @param {string} rootID DOM ID of the root node.\n * @param {DOMElement} container DOM element to mount into.\n * @param {ReactReconcileTransaction} transaction\n * @param {boolean} shouldReuseMarkup If true, do not insert markup\n */\nfunction mountComponentIntoNode(componentInstance, rootID, container, transaction, shouldReuseMarkup, context) {\n  if (ReactDOMFeatureFlags.useCreateElement) {\n    context = assign({}, context);\n    if (container.nodeType === DOC_NODE_TYPE) {\n      context[ownerDocumentContextKey] = container;\n    } else {\n      context[ownerDocumentContextKey] = container.ownerDocument;\n    }\n  }\n  if (process.env.NODE_ENV !== 'production') {\n    if (context === emptyObject) {\n      context = {};\n    }\n    var tag = container.nodeName.toLowerCase();\n    context[validateDOMNesting.ancestorInfoContextKey] = validateDOMNesting.updatedAncestorInfo(null, tag, null);\n  }\n  var markup = ReactReconciler.mountComponent(componentInstance, rootID, transaction, context);\n  componentInstance._renderedComponent._topLevelWrapper = componentInstance;\n  ReactMount._mountImageIntoNode(markup, container, shouldReuseMarkup, transaction);\n}\n\n/**\n * Batched mount.\n *\n * @param {ReactComponent} componentInstance The instance to mount.\n * @param {string} rootID DOM ID of the root node.\n * @param {DOMElement} container DOM element to mount into.\n * @param {boolean} shouldReuseMarkup If true, do not insert markup\n */\nfunction batchedMountComponentIntoNode(componentInstance, rootID, container, shouldReuseMarkup, context) {\n  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled(\n  /* forceHTML */shouldReuseMarkup);\n  transaction.perform(mountComponentIntoNode, null, componentInstance, rootID, container, transaction, shouldReuseMarkup, context);\n  ReactUpdates.ReactReconcileTransaction.release(transaction);\n}\n\n/**\n * Unmounts a component and removes it from the DOM.\n *\n * @param {ReactComponent} instance React component instance.\n * @param {DOMElement} container DOM element to unmount from.\n * @final\n * @internal\n * @see {ReactMount.unmountComponentAtNode}\n */\nfunction unmountComponentFromNode(instance, container) {\n  ReactReconciler.unmountComponent(instance);\n\n  if (container.nodeType === DOC_NODE_TYPE) {\n    container = container.documentElement;\n  }\n\n  // http://jsperf.com/emptying-a-node\n  while (container.lastChild) {\n    container.removeChild(container.lastChild);\n  }\n}\n\n/**\n * True if the supplied DOM node has a direct React-rendered child that is\n * not a React root element. Useful for warning in `render`,\n * `unmountComponentAtNode`, etc.\n *\n * @param {?DOMElement} node The candidate DOM node.\n * @return {boolean} True if the DOM element contains a direct child that was\n * rendered by React but is not a root element.\n * @internal\n */\nfunction hasNonRootReactChild(node) {\n  var reactRootID = getReactRootID(node);\n  return reactRootID ? reactRootID !== ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID) : false;\n}\n\n/**\n * Returns the first (deepest) ancestor of a node which is rendered by this copy\n * of React.\n */\nfunction findFirstReactDOMImpl(node) {\n  // This node might be from another React instance, so we make sure not to\n  // examine the node cache here\n  for (; node && node.parentNode !== node; node = node.parentNode) {\n    if (node.nodeType !== 1) {\n      // Not a DOMElement, therefore not a React component\n      continue;\n    }\n    var nodeID = internalGetID(node);\n    if (!nodeID) {\n      continue;\n    }\n    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);\n\n    // If containersByReactRootID contains the container we find by crawling up\n    // the tree, we know that this instance of React rendered the node.\n    // nb. isValid's strategy (with containsNode) does not work because render\n    // trees may be nested and we don't want a false positive in that case.\n    var current = node;\n    var lastID;\n    do {\n      lastID = internalGetID(current);\n      current = current.parentNode;\n      if (current == null) {\n        // The passed-in node has been detached from the container it was\n        // originally rendered into.\n        return null;\n      }\n    } while (lastID !== reactRootID);\n\n    if (current === containersByReactRootID[reactRootID]) {\n      return node;\n    }\n  }\n  return null;\n}\n\n/**\n * Temporary (?) hack so that we can store all top-level pending updates on\n * composites instead of having to worry about different types of components\n * here.\n */\nvar TopLevelWrapper = function () {};\nTopLevelWrapper.prototype.isReactComponent = {};\nif (process.env.NODE_ENV !== 'production') {\n  TopLevelWrapper.displayName = 'TopLevelWrapper';\n}\nTopLevelWrapper.prototype.render = function () {\n  // this.props is actually a ReactElement\n  return this.props;\n};\n\n/**\n * Mounting is the process of initializing a React component by creating its\n * representative DOM elements and inserting them into a supplied `container`.\n * Any prior content inside `container` is destroyed in the process.\n *\n *   ReactMount.render(\n *     component,\n *     document.getElementById('container')\n *   );\n *\n *   <div id=\"container\">                   <-- Supplied `container`.\n *     <div data-reactid=\".3\">              <-- Rendered reactRoot of React\n *       // ...                                 component.\n *     </div>\n *   </div>\n *\n * Inside of `container`, the first element rendered is the \"reactRoot\".\n */\nvar ReactMount = {\n\n  TopLevelWrapper: TopLevelWrapper,\n\n  /** Exposed for debugging purposes **/\n  _instancesByReactRootID: instancesByReactRootID,\n\n  /**\n   * This is a hook provided to support rendering React components while\n   * ensuring that the apparent scroll position of its `container` does not\n   * change.\n   *\n   * @param {DOMElement} container The `container` being rendered into.\n   * @param {function} renderCallback This must be called once to do the render.\n   */\n  scrollMonitor: function (container, renderCallback) {\n    renderCallback();\n  },\n\n  /**\n   * Take a component that's already mounted into the DOM and replace its props\n   * @param {ReactComponent} prevComponent component instance already in the DOM\n   * @param {ReactElement} nextElement component instance to render\n   * @param {DOMElement} container container to render into\n   * @param {?function} callback function triggered on completion\n   */\n  _updateRootComponent: function (prevComponent, nextElement, container, callback) {\n    ReactMount.scrollMonitor(container, function () {\n      ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement);\n      if (callback) {\n        ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);\n      }\n    });\n\n    if (process.env.NODE_ENV !== 'production') {\n      // Record the root element in case it later gets transplanted.\n      rootElementsByReactRootID[getReactRootID(container)] = getReactRootElementInContainer(container);\n    }\n\n    return prevComponent;\n  },\n\n  /**\n   * Register a component into the instance map and starts scroll value\n   * monitoring\n   * @param {ReactComponent} nextComponent component instance to render\n   * @param {DOMElement} container container to render into\n   * @return {string} reactRoot ID prefix\n   */\n  _registerComponent: function (nextComponent, container) {\n    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '_registerComponent(...): Target container is not a DOM element.') : invariant(false) : undefined;\n\n    ReactBrowserEventEmitter.ensureScrollValueMonitoring();\n\n    var reactRootID = ReactMount.registerContainer(container);\n    instancesByReactRootID[reactRootID] = nextComponent;\n    return reactRootID;\n  },\n\n  /**\n   * Render a new component into the DOM.\n   * @param {ReactElement} nextElement element to render\n   * @param {DOMElement} container container to render into\n   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion\n   * @return {ReactComponent} nextComponent\n   */\n  _renderNewRootComponent: function (nextElement, container, shouldReuseMarkup, context) {\n    // Various parts of our code (such as ReactCompositeComponent's\n    // _renderValidatedComponent) assume that calls to render aren't nested;\n    // verify that that's the case.\n    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '_renderNewRootComponent(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from ' + 'render is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : undefined;\n\n    var componentInstance = instantiateReactComponent(nextElement, null);\n    var reactRootID = ReactMount._registerComponent(componentInstance, container);\n\n    // The initial render is synchronous but any updates that happen during\n    // rendering, in componentWillMount or componentDidMount, will be batched\n    // according to the current batching strategy.\n\n    ReactUpdates.batchedUpdates(batchedMountComponentIntoNode, componentInstance, reactRootID, container, shouldReuseMarkup, context);\n\n    if (process.env.NODE_ENV !== 'production') {\n      // Record the root element in case it later gets transplanted.\n      rootElementsByReactRootID[reactRootID] = getReactRootElementInContainer(container);\n    }\n\n    return componentInstance;\n  },\n\n  /**\n   * Renders a React component into the DOM in the supplied `container`.\n   *\n   * If the React component was previously rendered into `container`, this will\n   * perform an update on it and only mutate the DOM as necessary to reflect the\n   * latest React component.\n   *\n   * @param {ReactComponent} parentComponent The conceptual parent of this render tree.\n   * @param {ReactElement} nextElement Component element to render.\n   * @param {DOMElement} container DOM element to render into.\n   * @param {?function} callback function triggered on completion\n   * @return {ReactComponent} Component instance rendered in `container`.\n   */\n  renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {\n    !(parentComponent != null && parentComponent._reactInternalInstance != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'parentComponent must be a valid React Component') : invariant(false) : undefined;\n    return ReactMount._renderSubtreeIntoContainer(parentComponent, nextElement, container, callback);\n  },\n\n  _renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {\n    !ReactElement.isValidElement(nextElement) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOM.render(): Invalid component element.%s', typeof nextElement === 'string' ? ' Instead of passing an element string, make sure to instantiate ' + 'it by passing it to React.createElement.' : typeof nextElement === 'function' ? ' Instead of passing a component class, make sure to instantiate ' + 'it by passing it to React.createElement.' :\n    // Check if it quacks like an element\n    nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : invariant(false) : undefined;\n\n    process.env.NODE_ENV !== 'production' ? warning(!container || !container.tagName || container.tagName.toUpperCase() !== 'BODY', 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.') : undefined;\n\n    var nextWrappedElement = new ReactElement(TopLevelWrapper, null, null, null, null, null, nextElement);\n\n    var prevComponent = instancesByReactRootID[getReactRootID(container)];\n\n    if (prevComponent) {\n      var prevWrappedElement = prevComponent._currentElement;\n      var prevElement = prevWrappedElement.props;\n      if (shouldUpdateReactComponent(prevElement, nextElement)) {\n        var publicInst = prevComponent._renderedComponent.getPublicInstance();\n        var updatedCallback = callback && function () {\n          callback.call(publicInst);\n        };\n        ReactMount._updateRootComponent(prevComponent, nextWrappedElement, container, updatedCallback);\n        return publicInst;\n      } else {\n        ReactMount.unmountComponentAtNode(container);\n      }\n    }\n\n    var reactRootElement = getReactRootElementInContainer(container);\n    var containerHasReactMarkup = reactRootElement && !!internalGetID(reactRootElement);\n    var containerHasNonRootReactChild = hasNonRootReactChild(container);\n\n    if (process.env.NODE_ENV !== 'production') {\n      process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.') : undefined;\n\n      if (!containerHasReactMarkup || reactRootElement.nextSibling) {\n        var rootElementSibling = reactRootElement;\n        while (rootElementSibling) {\n          if (internalGetID(rootElementSibling)) {\n            process.env.NODE_ENV !== 'production' ? warning(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.') : undefined;\n            break;\n          }\n          rootElementSibling = rootElementSibling.nextSibling;\n        }\n      }\n    }\n\n    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent && !containerHasNonRootReactChild;\n    var component = ReactMount._renderNewRootComponent(nextWrappedElement, container, shouldReuseMarkup, parentComponent != null ? parentComponent._reactInternalInstance._processChildContext(parentComponent._reactInternalInstance._context) : emptyObject)._renderedComponent.getPublicInstance();\n    if (callback) {\n      callback.call(component);\n    }\n    return component;\n  },\n\n  /**\n   * Renders a React component into the DOM in the supplied `container`.\n   *\n   * If the React component was previously rendered into `container`, this will\n   * perform an update on it and only mutate the DOM as necessary to reflect the\n   * latest React component.\n   *\n   * @param {ReactElement} nextElement Component element to render.\n   * @param {DOMElement} container DOM element to render into.\n   * @param {?function} callback function triggered on completion\n   * @return {ReactComponent} Component instance rendered in `container`.\n   */\n  render: function (nextElement, container, callback) {\n    return ReactMount._renderSubtreeIntoContainer(null, nextElement, container, callback);\n  },\n\n  /**\n   * Registers a container node into which React components will be rendered.\n   * This also creates the \"reactRoot\" ID that will be assigned to the element\n   * rendered within.\n   *\n   * @param {DOMElement} container DOM element to register as a container.\n   * @return {string} The \"reactRoot\" ID of elements rendered within.\n   */\n  registerContainer: function (container) {\n    var reactRootID = getReactRootID(container);\n    if (reactRootID) {\n      // If one exists, make sure it is a valid \"reactRoot\" ID.\n      reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID);\n    }\n    if (!reactRootID) {\n      // No valid \"reactRoot\" ID found, create one.\n      reactRootID = ReactInstanceHandles.createReactRootID();\n    }\n    containersByReactRootID[reactRootID] = container;\n    return reactRootID;\n  },\n\n  /**\n   * Unmounts and destroys the React component rendered in the `container`.\n   *\n   * @param {DOMElement} container DOM element containing a React component.\n   * @return {boolean} True if a component was found in and unmounted from\n   *                   `container`\n   */\n  unmountComponentAtNode: function (container) {\n    // Various parts of our code (such as ReactCompositeComponent's\n    // _renderValidatedComponent) assume that calls to render aren't nested;\n    // verify that that's the case. (Strictly speaking, unmounting won't cause a\n    // render but we still don't expect to be in a render call here.)\n    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, 'unmountComponentAtNode(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from render ' + 'is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : undefined;\n\n    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : invariant(false) : undefined;\n\n    var reactRootID = getReactRootID(container);\n    var component = instancesByReactRootID[reactRootID];\n    if (!component) {\n      // Check if the node being unmounted was rendered by React, but isn't a\n      // root node.\n      var containerHasNonRootReactChild = hasNonRootReactChild(container);\n\n      // Check if the container itself is a React root node.\n      var containerID = internalGetID(container);\n      var isContainerReactRoot = containerID && containerID === ReactInstanceHandles.getReactRootIDFromNodeID(containerID);\n\n      if (process.env.NODE_ENV !== 'production') {\n        process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'unmountComponentAtNode(): The node you\\'re attempting to unmount ' + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.') : undefined;\n      }\n\n      return false;\n    }\n    ReactUpdates.batchedUpdates(unmountComponentFromNode, component, container);\n    delete instancesByReactRootID[reactRootID];\n    delete containersByReactRootID[reactRootID];\n    if (process.env.NODE_ENV !== 'production') {\n      delete rootElementsByReactRootID[reactRootID];\n    }\n    return true;\n  },\n\n  /**\n   * Finds the container DOM element that contains React component to which the\n   * supplied DOM `id` belongs.\n   *\n   * @param {string} id The ID of an element rendered by a React component.\n   * @return {?DOMElement} DOM element that contains the `id`.\n   */\n  findReactContainerForID: function (id) {\n    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(id);\n    var container = containersByReactRootID[reactRootID];\n\n    if (process.env.NODE_ENV !== 'production') {\n      var rootElement = rootElementsByReactRootID[reactRootID];\n      if (rootElement && rootElement.parentNode !== container) {\n        process.env.NODE_ENV !== 'production' ? warning(\n        // Call internalGetID here because getID calls isValid which calls\n        // findReactContainerForID (this function).\n        internalGetID(rootElement) === reactRootID, 'ReactMount: Root element ID differed from reactRootID.') : undefined;\n        var containerChild = container.firstChild;\n        if (containerChild && reactRootID === internalGetID(containerChild)) {\n          // If the container has a new child with the same ID as the old\n          // root element, then rootElementsByReactRootID[reactRootID] is\n          // just stale and needs to be updated. The case that deserves a\n          // warning is when the container is empty.\n          rootElementsByReactRootID[reactRootID] = containerChild;\n        } else {\n          process.env.NODE_ENV !== 'production' ? warning(false, 'ReactMount: Root element has been removed from its original ' + 'container. New container: %s', rootElement.parentNode) : undefined;\n        }\n      }\n    }\n\n    return container;\n  },\n\n  /**\n   * Finds an element rendered by React with the supplied ID.\n   *\n   * @param {string} id ID of a DOM node in the React component.\n   * @return {DOMElement} Root DOM node of the React component.\n   */\n  findReactNodeByID: function (id) {\n    var reactRoot = ReactMount.findReactContainerForID(id);\n    return ReactMount.findComponentRoot(reactRoot, id);\n  },\n\n  /**\n   * Traverses up the ancestors of the supplied node to find a node that is a\n   * DOM representation of a React component rendered by this copy of React.\n   *\n   * @param {*} node\n   * @return {?DOMEventTarget}\n   * @internal\n   */\n  getFirstReactDOM: function (node) {\n    return findFirstReactDOMImpl(node);\n  },\n\n  /**\n   * Finds a node with the supplied `targetID` inside of the supplied\n   * `ancestorNode`.  Exploits the ID naming scheme to perform the search\n   * quickly.\n   *\n   * @param {DOMEventTarget} ancestorNode Search from this root.\n   * @pararm {string} targetID ID of the DOM representation of the component.\n   * @return {DOMEventTarget} DOM node with the supplied `targetID`.\n   * @internal\n   */\n  findComponentRoot: function (ancestorNode, targetID) {\n    var firstChildren = findComponentRootReusableArray;\n    var childIndex = 0;\n\n    var deepestAncestor = findDeepestCachedAncestor(targetID) || ancestorNode;\n\n    if (process.env.NODE_ENV !== 'production') {\n      // This will throw on the next line; give an early warning\n      process.env.NODE_ENV !== 'production' ? warning(deepestAncestor != null, 'React can\\'t find the root component node for data-reactid value ' + '`%s`. If you\\'re seeing this message, it probably means that ' + 'you\\'ve loaded two copies of React on the page. At this time, only ' + 'a single copy of React can be loaded at a time.', targetID) : undefined;\n    }\n\n    firstChildren[0] = deepestAncestor.firstChild;\n    firstChildren.length = 1;\n\n    while (childIndex < firstChildren.length) {\n      var child = firstChildren[childIndex++];\n      var targetChild;\n\n      while (child) {\n        var childID = ReactMount.getID(child);\n        if (childID) {\n          // Even if we find the node we're looking for, we finish looping\n          // through its siblings to ensure they're cached so that we don't have\n          // to revisit this node again. Otherwise, we make n^2 calls to getID\n          // when visiting the many children of a single node in order.\n\n          if (targetID === childID) {\n            targetChild = child;\n          } else if (ReactInstanceHandles.isAncestorIDOf(childID, targetID)) {\n            // If we find a child whose ID is an ancestor of the given ID,\n            // then we can be sure that we only want to search the subtree\n            // rooted at this child, so we can throw out the rest of the\n            // search state.\n            firstChildren.length = childIndex = 0;\n            firstChildren.push(child.firstChild);\n          }\n        } else {\n          // If this child had no ID, then there's a chance that it was\n          // injected automatically by the browser, as when a `<table>`\n          // element sprouts an extra `<tbody>` child as a side effect of\n          // `.innerHTML` parsing. Optimistically continue down this\n          // branch, but not before examining the other siblings.\n          firstChildren.push(child.firstChild);\n        }\n\n        child = child.nextSibling;\n      }\n\n      if (targetChild) {\n        // Emptying firstChildren/findComponentRootReusableArray is\n        // not necessary for correctness, but it helps the GC reclaim\n        // any nodes that were left at the end of the search.\n        firstChildren.length = 0;\n\n        return targetChild;\n      }\n    }\n\n    firstChildren.length = 0;\n\n    !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'findComponentRoot(..., %s): Unable to find element. This probably ' + 'means the DOM was unexpectedly mutated (e.g., by the browser), ' + 'usually due to forgetting a <tbody> when using tables, nesting tags ' + 'like <form>, <p>, or <a>, or using non-SVG elements in an <svg> ' + 'parent. ' + 'Try inspecting the child nodes of the element with React ID `%s`.', targetID, ReactMount.getID(ancestorNode)) : invariant(false) : undefined;\n  },\n\n  _mountImageIntoNode: function (markup, container, shouldReuseMarkup, transaction) {\n    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mountComponentIntoNode(...): Target container is not valid.') : invariant(false) : undefined;\n\n    if (shouldReuseMarkup) {\n      var rootElement = getReactRootElementInContainer(container);\n      if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {\n        return;\n      } else {\n        var checksum = rootElement.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);\n        rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);\n\n        var rootMarkup = rootElement.outerHTML;\n        rootElement.setAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME, checksum);\n\n        var normalizedMarkup = markup;\n        if (process.env.NODE_ENV !== 'production') {\n          // because rootMarkup is retrieved from the DOM, various normalizations\n          // will have occurred which will not be present in `markup`. Here,\n          // insert markup into a <div> or <iframe> depending on the container\n          // type to perform the same normalizations before comparing.\n          var normalizer;\n          if (container.nodeType === ELEMENT_NODE_TYPE) {\n            normalizer = document.createElement('div');\n            normalizer.innerHTML = markup;\n            normalizedMarkup = normalizer.innerHTML;\n          } else {\n            normalizer = document.createElement('iframe');\n            document.body.appendChild(normalizer);\n            normalizer.contentDocument.write(markup);\n            normalizedMarkup = normalizer.contentDocument.documentElement.outerHTML;\n            document.body.removeChild(normalizer);\n          }\n        }\n\n        var diffIndex = firstDifferenceIndex(normalizedMarkup, rootMarkup);\n        var difference = ' (client) ' + normalizedMarkup.substring(diffIndex - 20, diffIndex + 20) + '\\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);\n\n        !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\\'re trying to render a component to the document using ' + 'server rendering but the checksum was invalid. This usually ' + 'means you rendered a different component type or props on ' + 'the client from the one on the server, or your render() ' + 'methods are impure. React cannot handle this case due to ' + 'cross-browser quirks by rendering at the document root. You ' + 'should look for environment dependent code in your components ' + 'and ensure the props are the same client and server side:\\n%s', difference) : invariant(false) : undefined;\n\n        if (process.env.NODE_ENV !== 'production') {\n          process.env.NODE_ENV !== 'production' ? warning(false, 'React attempted to reuse markup in a container but the ' + 'checksum was invalid. This generally means that you are ' + 'using server rendering and the markup generated on the ' + 'server was not what the client was expecting. React injected ' + 'new markup to compensate which works but you have lost many ' + 'of the benefits of server rendering. Instead, figure out ' + 'why the markup being generated is different on the client ' + 'or server:\\n%s', difference) : undefined;\n        }\n      }\n    }\n\n    !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\\'re trying to render a component to the document but ' + 'you didn\\'t use server rendering. We can\\'t do this ' + 'without using server rendering due to cross-browser quirks. ' + 'See ReactDOMServer.renderToString() for server rendering.') : invariant(false) : undefined;\n\n    if (transaction.useCreateElement) {\n      while (container.lastChild) {\n        container.removeChild(container.lastChild);\n      }\n      container.appendChild(markup);\n    } else {\n      setInnerHTML(container, markup);\n    }\n  },\n\n  ownerDocumentContextKey: ownerDocumentContextKey,\n\n  /**\n   * React ID utilities.\n   */\n\n  getReactRootID: getReactRootID,\n\n  getID: getID,\n\n  setID: setID,\n\n  getNode: getNode,\n\n  getNodeFromInstance: getNodeFromInstance,\n\n  isValid: isValid,\n\n  purgeID: purgeID\n};\n\nReactPerf.measureMethods(ReactMount, 'ReactMount', {\n  _renderNewRootComponent: '_renderNewRootComponent',\n  _mountImageIntoNode: '_mountImageIntoNode'\n});\n\nmodule.exports = ReactMount;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactBrowserEventEmitter\n * @typechecks static-only\n */\n\n'use strict';\n\nvar EventConstants = require('./EventConstants');\nvar EventPluginHub = require('./EventPluginHub');\nvar EventPluginRegistry = require('./EventPluginRegistry');\nvar ReactEventEmitterMixin = require('./ReactEventEmitterMixin');\nvar ReactPerf = require('./ReactPerf');\nvar ViewportMetrics = require('./ViewportMetrics');\n\nvar assign = require('./Object.assign');\nvar isEventSupported = require('./isEventSupported');\n\n/**\n * Summary of `ReactBrowserEventEmitter` event handling:\n *\n *  - Top-level delegation is used to trap most native browser events. This\n *    may only occur in the main thread and is the responsibility of\n *    ReactEventListener, which is injected and can therefore support pluggable\n *    event sources. This is the only work that occurs in the main thread.\n *\n *  - We normalize and de-duplicate events to account for browser quirks. This\n *    may be done in the worker thread.\n *\n *  - Forward these native events (with the associated top-level type used to\n *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want\n *    to extract any synthetic events.\n *\n *  - The `EventPluginHub` will then process each event by annotating them with\n *    \"dispatches\", a sequence of listeners and IDs that care about that event.\n *\n *  - The `EventPluginHub` then dispatches the events.\n *\n * Overview of React and the event system:\n *\n * +------------+    .\n * |    DOM     |    .\n * +------------+    .\n *       |           .\n *       v           .\n * +------------+    .\n * | ReactEvent |    .\n * |  Listener  |    .\n * +------------+    .                         +-----------+\n *       |           .               +--------+|SimpleEvent|\n *       |           .               |         |Plugin     |\n * +-----|------+    .               v         +-----------+\n * |     |      |    .    +--------------+                    +------------+\n * |     +-----------.--->|EventPluginHub|                    |    Event   |\n * |            |    .    |              |     +-----------+  | Propagators|\n * | ReactEvent |    .    |              |     |TapEvent   |  |------------|\n * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|\n * |            |    .    |              |     +-----------+  |  utilities |\n * |     +-----------.--->|              |                    +------------+\n * |     |      |    .    +--------------+\n * +-----|------+    .                ^        +-----------+\n *       |           .                |        |Enter/Leave|\n *       +           .                +-------+|Plugin     |\n * +-------------+   .                         +-----------+\n * | application |   .\n * |-------------|   .\n * |             |   .\n * |             |   .\n * +-------------+   .\n *                   .\n *    React Core     .  General Purpose Event Plugin System\n */\n\nvar alreadyListeningTo = {};\nvar isMonitoringScrollValue = false;\nvar reactTopListenersCounter = 0;\n\n// For events like 'submit' which don't consistently bubble (which we trap at a\n// lower node than `document`), binding at `document` would cause duplicate\n// events so we don't include them here\nvar topEventMapping = {\n  topAbort: 'abort',\n  topBlur: 'blur',\n  topCanPlay: 'canplay',\n  topCanPlayThrough: 'canplaythrough',\n  topChange: 'change',\n  topClick: 'click',\n  topCompositionEnd: 'compositionend',\n  topCompositionStart: 'compositionstart',\n  topCompositionUpdate: 'compositionupdate',\n  topContextMenu: 'contextmenu',\n  topCopy: 'copy',\n  topCut: 'cut',\n  topDoubleClick: 'dblclick',\n  topDrag: 'drag',\n  topDragEnd: 'dragend',\n  topDragEnter: 'dragenter',\n  topDragExit: 'dragexit',\n  topDragLeave: 'dragleave',\n  topDragOver: 'dragover',\n  topDragStart: 'dragstart',\n  topDrop: 'drop',\n  topDurationChange: 'durationchange',\n  topEmptied: 'emptied',\n  topEncrypted: 'encrypted',\n  topEnded: 'ended',\n  topError: 'error',\n  topFocus: 'focus',\n  topInput: 'input',\n  topKeyDown: 'keydown',\n  topKeyPress: 'keypress',\n  topKeyUp: 'keyup',\n  topLoadedData: 'loadeddata',\n  topLoadedMetadata: 'loadedmetadata',\n  topLoadStart: 'loadstart',\n  topMouseDown: 'mousedown',\n  topMouseMove: 'mousemove',\n  topMouseOut: 'mouseout',\n  topMouseOver: 'mouseover',\n  topMouseUp: 'mouseup',\n  topPaste: 'paste',\n  topPause: 'pause',\n  topPlay: 'play',\n  topPlaying: 'playing',\n  topProgress: 'progress',\n  topRateChange: 'ratechange',\n  topScroll: 'scroll',\n  topSeeked: 'seeked',\n  topSeeking: 'seeking',\n  topSelectionChange: 'selectionchange',\n  topStalled: 'stalled',\n  topSuspend: 'suspend',\n  topTextInput: 'textInput',\n  topTimeUpdate: 'timeupdate',\n  topTouchCancel: 'touchcancel',\n  topTouchEnd: 'touchend',\n  topTouchMove: 'touchmove',\n  topTouchStart: 'touchstart',\n  topVolumeChange: 'volumechange',\n  topWaiting: 'waiting',\n  topWheel: 'wheel'\n};\n\n/**\n * To ensure no conflicts with other potential React instances on the page\n */\nvar topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);\n\nfunction getListeningForDocument(mountAt) {\n  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`\n  // directly.\n  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {\n    mountAt[topListenersIDKey] = reactTopListenersCounter++;\n    alreadyListeningTo[mountAt[topListenersIDKey]] = {};\n  }\n  return alreadyListeningTo[mountAt[topListenersIDKey]];\n}\n\n/**\n * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For\n * example:\n *\n *   ReactBrowserEventEmitter.putListener('myID', 'onClick', myFunction);\n *\n * This would allocate a \"registration\" of `('onClick', myFunction)` on 'myID'.\n *\n * @internal\n */\nvar ReactBrowserEventEmitter = assign({}, ReactEventEmitterMixin, {\n\n  /**\n   * Injectable event backend\n   */\n  ReactEventListener: null,\n\n  injection: {\n    /**\n     * @param {object} ReactEventListener\n     */\n    injectReactEventListener: function (ReactEventListener) {\n      ReactEventListener.setHandleTopLevel(ReactBrowserEventEmitter.handleTopLevel);\n      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;\n    }\n  },\n\n  /**\n   * Sets whether or not any created callbacks should be enabled.\n   *\n   * @param {boolean} enabled True if callbacks should be enabled.\n   */\n  setEnabled: function (enabled) {\n    if (ReactBrowserEventEmitter.ReactEventListener) {\n      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);\n    }\n  },\n\n  /**\n   * @return {boolean} True if callbacks are enabled.\n   */\n  isEnabled: function () {\n    return !!(ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled());\n  },\n\n  /**\n   * We listen for bubbled touch events on the document object.\n   *\n   * Firefox v8.01 (and possibly others) exhibited strange behavior when\n   * mounting `onmousemove` events at some node that was not the document\n   * element. The symptoms were that if your mouse is not moving over something\n   * contained within that mount point (for example on the background) the\n   * top-level listeners for `onmousemove` won't be called. However, if you\n   * register the `mousemove` on the document object, then it will of course\n   * catch all `mousemove`s. This along with iOS quirks, justifies restricting\n   * top-level listeners to the document object only, at least for these\n   * movement types of events and possibly all events.\n   *\n   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html\n   *\n   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but\n   * they bubble to document.\n   *\n   * @param {string} registrationName Name of listener (e.g. `onClick`).\n   * @param {object} contentDocumentHandle Document which owns the container\n   */\n  listenTo: function (registrationName, contentDocumentHandle) {\n    var mountAt = contentDocumentHandle;\n    var isListening = getListeningForDocument(mountAt);\n    var dependencies = EventPluginRegistry.registrationNameDependencies[registrationName];\n\n    var topLevelTypes = EventConstants.topLevelTypes;\n    for (var i = 0; i < dependencies.length; i++) {\n      var dependency = dependencies[i];\n      if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {\n        if (dependency === topLevelTypes.topWheel) {\n          if (isEventSupported('wheel')) {\n            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'wheel', mountAt);\n          } else if (isEventSupported('mousewheel')) {\n            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'mousewheel', mountAt);\n          } else {\n            // Firefox needs to capture a different mouse scroll event.\n            // @see http://www.quirksmode.org/dom/events/tests/scroll.html\n            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'DOMMouseScroll', mountAt);\n          }\n        } else if (dependency === topLevelTypes.topScroll) {\n\n          if (isEventSupported('scroll', true)) {\n            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topScroll, 'scroll', mountAt);\n          } else {\n            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topScroll, 'scroll', ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE);\n          }\n        } else if (dependency === topLevelTypes.topFocus || dependency === topLevelTypes.topBlur) {\n\n          if (isEventSupported('focus', true)) {\n            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topFocus, 'focus', mountAt);\n            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topBlur, 'blur', mountAt);\n          } else if (isEventSupported('focusin')) {\n            // IE has `focusin` and `focusout` events which bubble.\n            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html\n            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topFocus, 'focusin', mountAt);\n            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topBlur, 'focusout', mountAt);\n          }\n\n          // to make sure blur and focus event listeners are only attached once\n          isListening[topLevelTypes.topBlur] = true;\n          isListening[topLevelTypes.topFocus] = true;\n        } else if (topEventMapping.hasOwnProperty(dependency)) {\n          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(dependency, topEventMapping[dependency], mountAt);\n        }\n\n        isListening[dependency] = true;\n      }\n    }\n  },\n\n  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {\n    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelType, handlerBaseName, handle);\n  },\n\n  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {\n    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelType, handlerBaseName, handle);\n  },\n\n  /**\n   * Listens to window scroll and resize events. We cache scroll values so that\n   * application code can access them without triggering reflows.\n   *\n   * NOTE: Scroll events do not bubble.\n   *\n   * @see http://www.quirksmode.org/dom/events/scroll.html\n   */\n  ensureScrollValueMonitoring: function () {\n    if (!isMonitoringScrollValue) {\n      var refresh = ViewportMetrics.refreshScrollValues;\n      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);\n      isMonitoringScrollValue = true;\n    }\n  },\n\n  eventNameDispatchConfigs: EventPluginHub.eventNameDispatchConfigs,\n\n  registrationNameModules: EventPluginHub.registrationNameModules,\n\n  putListener: EventPluginHub.putListener,\n\n  getListener: EventPluginHub.getListener,\n\n  deleteListener: EventPluginHub.deleteListener,\n\n  deleteAllListeners: EventPluginHub.deleteAllListeners\n\n});\n\nReactPerf.measureMethods(ReactBrowserEventEmitter, 'ReactBrowserEventEmitter', {\n  putListener: 'putListener',\n  deleteListener: 'deleteListener'\n});\n\nmodule.exports = ReactBrowserEventEmitter;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule EventConstants\n */\n\n'use strict';\n\nvar keyMirror = require('fbjs/lib/keyMirror');\n\nvar PropagationPhases = keyMirror({ bubbled: null, captured: null });\n\n/**\n * Types of raw signals from the browser caught at the top level.\n */\nvar topLevelTypes = keyMirror({\n  topAbort: null,\n  topBlur: null,\n  topCanPlay: null,\n  topCanPlayThrough: null,\n  topChange: null,\n  topClick: null,\n  topCompositionEnd: null,\n  topCompositionStart: null,\n  topCompositionUpdate: null,\n  topContextMenu: null,\n  topCopy: null,\n  topCut: null,\n  topDoubleClick: null,\n  topDrag: null,\n  topDragEnd: null,\n  topDragEnter: null,\n  topDragExit: null,\n  topDragLeave: null,\n  topDragOver: null,\n  topDragStart: null,\n  topDrop: null,\n  topDurationChange: null,\n  topEmptied: null,\n  topEncrypted: null,\n  topEnded: null,\n  topError: null,\n  topFocus: null,\n  topInput: null,\n  topKeyDown: null,\n  topKeyPress: null,\n  topKeyUp: null,\n  topLoad: null,\n  topLoadedData: null,\n  topLoadedMetadata: null,\n  topLoadStart: null,\n  topMouseDown: null,\n  topMouseMove: null,\n  topMouseOut: null,\n  topMouseOver: null,\n  topMouseUp: null,\n  topPaste: null,\n  topPause: null,\n  topPlay: null,\n  topPlaying: null,\n  topProgress: null,\n  topRateChange: null,\n  topReset: null,\n  topScroll: null,\n  topSeeked: null,\n  topSeeking: null,\n  topSelectionChange: null,\n  topStalled: null,\n  topSubmit: null,\n  topSuspend: null,\n  topTextInput: null,\n  topTimeUpdate: null,\n  topTouchCancel: null,\n  topTouchEnd: null,\n  topTouchMove: null,\n  topTouchStart: null,\n  topVolumeChange: null,\n  topWaiting: null,\n  topWheel: null\n});\n\nvar EventConstants = {\n  topLevelTypes: topLevelTypes,\n  PropagationPhases: PropagationPhases\n};\n\nmodule.exports = EventConstants;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule EventPluginHub\n */\n\n'use strict';\n\nvar EventPluginRegistry = require('./EventPluginRegistry');\nvar EventPluginUtils = require('./EventPluginUtils');\nvar ReactErrorUtils = require('./ReactErrorUtils');\n\nvar accumulateInto = require('./accumulateInto');\nvar forEachAccumulated = require('./forEachAccumulated');\nvar invariant = require('fbjs/lib/invariant');\nvar warning = require('fbjs/lib/warning');\n\n/**\n * Internal store for event listeners\n */\nvar listenerBank = {};\n\n/**\n * Internal queue of events that have accumulated their dispatches and are\n * waiting to have their dispatches executed.\n */\nvar eventQueue = null;\n\n/**\n * Dispatches an event and releases it back into the pool, unless persistent.\n *\n * @param {?object} event Synthetic event to be dispatched.\n * @param {boolean} simulated If the event is simulated (changes exn behavior)\n * @private\n */\nvar executeDispatchesAndRelease = function (event, simulated) {\n  if (event) {\n    EventPluginUtils.executeDispatchesInOrder(event, simulated);\n\n    if (!event.isPersistent()) {\n      event.constructor.release(event);\n    }\n  }\n};\nvar executeDispatchesAndReleaseSimulated = function (e) {\n  return executeDispatchesAndRelease(e, true);\n};\nvar executeDispatchesAndReleaseTopLevel = function (e) {\n  return executeDispatchesAndRelease(e, false);\n};\n\n/**\n * - `InstanceHandle`: [required] Module that performs logical traversals of DOM\n *   hierarchy given ids of the logical DOM elements involved.\n */\nvar InstanceHandle = null;\n\nfunction validateInstanceHandle() {\n  var valid = InstanceHandle && InstanceHandle.traverseTwoPhase && InstanceHandle.traverseEnterLeave;\n  process.env.NODE_ENV !== 'production' ? warning(valid, 'InstanceHandle not injected before use!') : undefined;\n}\n\n/**\n * This is a unified interface for event plugins to be installed and configured.\n *\n * Event plugins can implement the following properties:\n *\n *   `extractEvents` {function(string, DOMEventTarget, string, object): *}\n *     Required. When a top-level event is fired, this method is expected to\n *     extract synthetic events that will in turn be queued and dispatched.\n *\n *   `eventTypes` {object}\n *     Optional, plugins that fire events must publish a mapping of registration\n *     names that are used to register listeners. Values of this mapping must\n *     be objects that contain `registrationName` or `phasedRegistrationNames`.\n *\n *   `executeDispatch` {function(object, function, string)}\n *     Optional, allows plugins to override how an event gets dispatched. By\n *     default, the listener is simply invoked.\n *\n * Each plugin that is injected into `EventsPluginHub` is immediately operable.\n *\n * @public\n */\nvar EventPluginHub = {\n\n  /**\n   * Methods for injecting dependencies.\n   */\n  injection: {\n\n    /**\n     * @param {object} InjectedMount\n     * @public\n     */\n    injectMount: EventPluginUtils.injection.injectMount,\n\n    /**\n     * @param {object} InjectedInstanceHandle\n     * @public\n     */\n    injectInstanceHandle: function (InjectedInstanceHandle) {\n      InstanceHandle = InjectedInstanceHandle;\n      if (process.env.NODE_ENV !== 'production') {\n        validateInstanceHandle();\n      }\n    },\n\n    getInstanceHandle: function () {\n      if (process.env.NODE_ENV !== 'production') {\n        validateInstanceHandle();\n      }\n      return InstanceHandle;\n    },\n\n    /**\n     * @param {array} InjectedEventPluginOrder\n     * @public\n     */\n    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,\n\n    /**\n     * @param {object} injectedNamesToPlugins Map from names to plugin modules.\n     */\n    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName\n\n  },\n\n  eventNameDispatchConfigs: EventPluginRegistry.eventNameDispatchConfigs,\n\n  registrationNameModules: EventPluginRegistry.registrationNameModules,\n\n  /**\n   * Stores `listener` at `listenerBank[registrationName][id]`. Is idempotent.\n   *\n   * @param {string} id ID of the DOM element.\n   * @param {string} registrationName Name of listener (e.g. `onClick`).\n   * @param {?function} listener The callback to store.\n   */\n  putListener: function (id, registrationName, listener) {\n    !(typeof listener === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected %s listener to be a function, instead got type %s', registrationName, typeof listener) : invariant(false) : undefined;\n\n    var bankForRegistrationName = listenerBank[registrationName] || (listenerBank[registrationName] = {});\n    bankForRegistrationName[id] = listener;\n\n    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];\n    if (PluginModule && PluginModule.didPutListener) {\n      PluginModule.didPutListener(id, registrationName, listener);\n    }\n  },\n\n  /**\n   * @param {string} id ID of the DOM element.\n   * @param {string} registrationName Name of listener (e.g. `onClick`).\n   * @return {?function} The stored callback.\n   */\n  getListener: function (id, registrationName) {\n    var bankForRegistrationName = listenerBank[registrationName];\n    return bankForRegistrationName && bankForRegistrationName[id];\n  },\n\n  /**\n   * Deletes a listener from the registration bank.\n   *\n   * @param {string} id ID of the DOM element.\n   * @param {string} registrationName Name of listener (e.g. `onClick`).\n   */\n  deleteListener: function (id, registrationName) {\n    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];\n    if (PluginModule && PluginModule.willDeleteListener) {\n      PluginModule.willDeleteListener(id, registrationName);\n    }\n\n    var bankForRegistrationName = listenerBank[registrationName];\n    // TODO: This should never be null -- when is it?\n    if (bankForRegistrationName) {\n      delete bankForRegistrationName[id];\n    }\n  },\n\n  /**\n   * Deletes all listeners for the DOM element with the supplied ID.\n   *\n   * @param {string} id ID of the DOM element.\n   */\n  deleteAllListeners: function (id) {\n    for (var registrationName in listenerBank) {\n      if (!listenerBank[registrationName][id]) {\n        continue;\n      }\n\n      var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];\n      if (PluginModule && PluginModule.willDeleteListener) {\n        PluginModule.willDeleteListener(id, registrationName);\n      }\n\n      delete listenerBank[registrationName][id];\n    }\n  },\n\n  /**\n   * Allows registered plugins an opportunity to extract events from top-level\n   * native browser events.\n   *\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {DOMEventTarget} topLevelTarget The listening component root node.\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n   * @param {object} nativeEvent Native browser event.\n   * @return {*} An accumulation of synthetic events.\n   * @internal\n   */\n  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {\n    var events;\n    var plugins = EventPluginRegistry.plugins;\n    for (var i = 0; i < plugins.length; i++) {\n      // Not every plugin in the ordering may be loaded at runtime.\n      var possiblePlugin = plugins[i];\n      if (possiblePlugin) {\n        var extractedEvents = possiblePlugin.extractEvents(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget);\n        if (extractedEvents) {\n          events = accumulateInto(events, extractedEvents);\n        }\n      }\n    }\n    return events;\n  },\n\n  /**\n   * Enqueues a synthetic event that should be dispatched when\n   * `processEventQueue` is invoked.\n   *\n   * @param {*} events An accumulation of synthetic events.\n   * @internal\n   */\n  enqueueEvents: function (events) {\n    if (events) {\n      eventQueue = accumulateInto(eventQueue, events);\n    }\n  },\n\n  /**\n   * Dispatches all synthetic events on the event queue.\n   *\n   * @internal\n   */\n  processEventQueue: function (simulated) {\n    // Set `eventQueue` to null before processing it so that we can tell if more\n    // events get enqueued while processing.\n    var processingEventQueue = eventQueue;\n    eventQueue = null;\n    if (simulated) {\n      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);\n    } else {\n      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);\n    }\n    !!eventQueue ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing ' + 'an event queue. Support for this has not yet been implemented.') : invariant(false) : undefined;\n    // This would be a good time to rethrow if any of the event handlers threw.\n    ReactErrorUtils.rethrowCaughtError();\n  },\n\n  /**\n   * These are needed for tests only. Do not use!\n   */\n  __purge: function () {\n    listenerBank = {};\n  },\n\n  __getListenerBank: function () {\n    return listenerBank;\n  }\n\n};\n\nmodule.exports = EventPluginHub;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule EventPluginRegistry\n * @typechecks static-only\n */\n\n'use strict';\n\nvar invariant = require('fbjs/lib/invariant');\n\n/**\n * Injectable ordering of event plugins.\n */\nvar EventPluginOrder = null;\n\n/**\n * Injectable mapping from names to event plugin modules.\n */\nvar namesToPlugins = {};\n\n/**\n * Recomputes the plugin list using the injected plugins and plugin ordering.\n *\n * @private\n */\nfunction recomputePluginOrdering() {\n  if (!EventPluginOrder) {\n    // Wait until an `EventPluginOrder` is injected.\n    return;\n  }\n  for (var pluginName in namesToPlugins) {\n    var PluginModule = namesToPlugins[pluginName];\n    var pluginIndex = EventPluginOrder.indexOf(pluginName);\n    !(pluginIndex > -1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in ' + 'the plugin ordering, `%s`.', pluginName) : invariant(false) : undefined;\n    if (EventPluginRegistry.plugins[pluginIndex]) {\n      continue;\n    }\n    !PluginModule.extractEvents ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` ' + 'method, but `%s` does not.', pluginName) : invariant(false) : undefined;\n    EventPluginRegistry.plugins[pluginIndex] = PluginModule;\n    var publishedEvents = PluginModule.eventTypes;\n    for (var eventName in publishedEvents) {\n      !publishEventForPlugin(publishedEvents[eventName], PluginModule, eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : invariant(false) : undefined;\n    }\n  }\n}\n\n/**\n * Publishes an event so that it can be dispatched by the supplied plugin.\n *\n * @param {object} dispatchConfig Dispatch configuration for the event.\n * @param {object} PluginModule Plugin publishing the event.\n * @return {boolean} True if the event was successfully published.\n * @private\n */\nfunction publishEventForPlugin(dispatchConfig, PluginModule, eventName) {\n  !!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same ' + 'event name, `%s`.', eventName) : invariant(false) : undefined;\n  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;\n\n  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;\n  if (phasedRegistrationNames) {\n    for (var phaseName in phasedRegistrationNames) {\n      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {\n        var phasedRegistrationName = phasedRegistrationNames[phaseName];\n        publishRegistrationName(phasedRegistrationName, PluginModule, eventName);\n      }\n    }\n    return true;\n  } else if (dispatchConfig.registrationName) {\n    publishRegistrationName(dispatchConfig.registrationName, PluginModule, eventName);\n    return true;\n  }\n  return false;\n}\n\n/**\n * Publishes a registration name that is used to identify dispatched events and\n * can be used with `EventPluginHub.putListener` to register listeners.\n *\n * @param {string} registrationName Registration name to add.\n * @param {object} PluginModule Plugin publishing the event.\n * @private\n */\nfunction publishRegistrationName(registrationName, PluginModule, eventName) {\n  !!EventPluginRegistry.registrationNameModules[registrationName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same ' + 'registration name, `%s`.', registrationName) : invariant(false) : undefined;\n  EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;\n  EventPluginRegistry.registrationNameDependencies[registrationName] = PluginModule.eventTypes[eventName].dependencies;\n}\n\n/**\n * Registers plugins so that they can extract and dispatch events.\n *\n * @see {EventPluginHub}\n */\nvar EventPluginRegistry = {\n\n  /**\n   * Ordered list of injected plugins.\n   */\n  plugins: [],\n\n  /**\n   * Mapping from event name to dispatch config\n   */\n  eventNameDispatchConfigs: {},\n\n  /**\n   * Mapping from registration name to plugin module\n   */\n  registrationNameModules: {},\n\n  /**\n   * Mapping from registration name to event name\n   */\n  registrationNameDependencies: {},\n\n  /**\n   * Injects an ordering of plugins (by plugin name). This allows the ordering\n   * to be decoupled from injection of the actual plugins so that ordering is\n   * always deterministic regardless of packaging, on-the-fly injection, etc.\n   *\n   * @param {array} InjectedEventPluginOrder\n   * @internal\n   * @see {EventPluginHub.injection.injectEventPluginOrder}\n   */\n  injectEventPluginOrder: function (InjectedEventPluginOrder) {\n    !!EventPluginOrder ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than ' + 'once. You are likely trying to load more than one copy of React.') : invariant(false) : undefined;\n    // Clone the ordering so it cannot be dynamically mutated.\n    EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);\n    recomputePluginOrdering();\n  },\n\n  /**\n   * Injects plugins to be used by `EventPluginHub`. The plugin names must be\n   * in the ordering injected by `injectEventPluginOrder`.\n   *\n   * Plugins can be injected as part of page initialization or on-the-fly.\n   *\n   * @param {object} injectedNamesToPlugins Map from names to plugin modules.\n   * @internal\n   * @see {EventPluginHub.injection.injectEventPluginsByName}\n   */\n  injectEventPluginsByName: function (injectedNamesToPlugins) {\n    var isOrderingDirty = false;\n    for (var pluginName in injectedNamesToPlugins) {\n      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {\n        continue;\n      }\n      var PluginModule = injectedNamesToPlugins[pluginName];\n      if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== PluginModule) {\n        !!namesToPlugins[pluginName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins ' + 'using the same name, `%s`.', pluginName) : invariant(false) : undefined;\n        namesToPlugins[pluginName] = PluginModule;\n        isOrderingDirty = true;\n      }\n    }\n    if (isOrderingDirty) {\n      recomputePluginOrdering();\n    }\n  },\n\n  /**\n   * Looks up the plugin for the supplied event.\n   *\n   * @param {object} event A synthetic event.\n   * @return {?object} The plugin that created the supplied event.\n   * @internal\n   */\n  getPluginModuleForEvent: function (event) {\n    var dispatchConfig = event.dispatchConfig;\n    if (dispatchConfig.registrationName) {\n      return EventPluginRegistry.registrationNameModules[dispatchConfig.registrationName] || null;\n    }\n    for (var phase in dispatchConfig.phasedRegistrationNames) {\n      if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {\n        continue;\n      }\n      var PluginModule = EventPluginRegistry.registrationNameModules[dispatchConfig.phasedRegistrationNames[phase]];\n      if (PluginModule) {\n        return PluginModule;\n      }\n    }\n    return null;\n  },\n\n  /**\n   * Exposed for unit testing.\n   * @private\n   */\n  _resetEventPlugins: function () {\n    EventPluginOrder = null;\n    for (var pluginName in namesToPlugins) {\n      if (namesToPlugins.hasOwnProperty(pluginName)) {\n        delete namesToPlugins[pluginName];\n      }\n    }\n    EventPluginRegistry.plugins.length = 0;\n\n    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;\n    for (var eventName in eventNameDispatchConfigs) {\n      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {\n        delete eventNameDispatchConfigs[eventName];\n      }\n    }\n\n    var registrationNameModules = EventPluginRegistry.registrationNameModules;\n    for (var registrationName in registrationNameModules) {\n      if (registrationNameModules.hasOwnProperty(registrationName)) {\n        delete registrationNameModules[registrationName];\n      }\n    }\n  }\n\n};\n\nmodule.exports = EventPluginRegistry;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule EventPluginUtils\n */\n\n'use strict';\n\nvar EventConstants = require('./EventConstants');\nvar ReactErrorUtils = require('./ReactErrorUtils');\n\nvar invariant = require('fbjs/lib/invariant');\nvar warning = require('fbjs/lib/warning');\n\n/**\n * Injected dependencies:\n */\n\n/**\n * - `Mount`: [required] Module that can convert between React dom IDs and\n *   actual node references.\n */\nvar injection = {\n  Mount: null,\n  injectMount: function (InjectedMount) {\n    injection.Mount = InjectedMount;\n    if (process.env.NODE_ENV !== 'production') {\n      process.env.NODE_ENV !== 'production' ? warning(InjectedMount && InjectedMount.getNode && InjectedMount.getID, 'EventPluginUtils.injection.injectMount(...): Injected Mount ' + 'module is missing getNode or getID.') : undefined;\n    }\n  }\n};\n\nvar topLevelTypes = EventConstants.topLevelTypes;\n\nfunction isEndish(topLevelType) {\n  return topLevelType === topLevelTypes.topMouseUp || topLevelType === topLevelTypes.topTouchEnd || topLevelType === topLevelTypes.topTouchCancel;\n}\n\nfunction isMoveish(topLevelType) {\n  return topLevelType === topLevelTypes.topMouseMove || topLevelType === topLevelTypes.topTouchMove;\n}\nfunction isStartish(topLevelType) {\n  return topLevelType === topLevelTypes.topMouseDown || topLevelType === topLevelTypes.topTouchStart;\n}\n\nvar validateEventDispatches;\nif (process.env.NODE_ENV !== 'production') {\n  validateEventDispatches = function (event) {\n    var dispatchListeners = event._dispatchListeners;\n    var dispatchIDs = event._dispatchIDs;\n\n    var listenersIsArr = Array.isArray(dispatchListeners);\n    var idsIsArr = Array.isArray(dispatchIDs);\n    var IDsLen = idsIsArr ? dispatchIDs.length : dispatchIDs ? 1 : 0;\n    var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;\n\n    process.env.NODE_ENV !== 'production' ? warning(idsIsArr === listenersIsArr && IDsLen === listenersLen, 'EventPluginUtils: Invalid `event`.') : undefined;\n  };\n}\n\n/**\n * Dispatch the event to the listener.\n * @param {SyntheticEvent} event SyntheticEvent to handle\n * @param {boolean} simulated If the event is simulated (changes exn behavior)\n * @param {function} listener Application-level callback\n * @param {string} domID DOM id to pass to the callback.\n */\nfunction executeDispatch(event, simulated, listener, domID) {\n  var type = event.type || 'unknown-event';\n  event.currentTarget = injection.Mount.getNode(domID);\n  if (simulated) {\n    ReactErrorUtils.invokeGuardedCallbackWithCatch(type, listener, event, domID);\n  } else {\n    ReactErrorUtils.invokeGuardedCallback(type, listener, event, domID);\n  }\n  event.currentTarget = null;\n}\n\n/**\n * Standard/simple iteration through an event's collected dispatches.\n */\nfunction executeDispatchesInOrder(event, simulated) {\n  var dispatchListeners = event._dispatchListeners;\n  var dispatchIDs = event._dispatchIDs;\n  if (process.env.NODE_ENV !== 'production') {\n    validateEventDispatches(event);\n  }\n  if (Array.isArray(dispatchListeners)) {\n    for (var i = 0; i < dispatchListeners.length; i++) {\n      if (event.isPropagationStopped()) {\n        break;\n      }\n      // Listeners and IDs are two parallel arrays that are always in sync.\n      executeDispatch(event, simulated, dispatchListeners[i], dispatchIDs[i]);\n    }\n  } else if (dispatchListeners) {\n    executeDispatch(event, simulated, dispatchListeners, dispatchIDs);\n  }\n  event._dispatchListeners = null;\n  event._dispatchIDs = null;\n}\n\n/**\n * Standard/simple iteration through an event's collected dispatches, but stops\n * at the first dispatch execution returning true, and returns that id.\n *\n * @return {?string} id of the first dispatch execution who's listener returns\n * true, or null if no listener returned true.\n */\nfunction executeDispatchesInOrderStopAtTrueImpl(event) {\n  var dispatchListeners = event._dispatchListeners;\n  var dispatchIDs = event._dispatchIDs;\n  if (process.env.NODE_ENV !== 'production') {\n    validateEventDispatches(event);\n  }\n  if (Array.isArray(dispatchListeners)) {\n    for (var i = 0; i < dispatchListeners.length; i++) {\n      if (event.isPropagationStopped()) {\n        break;\n      }\n      // Listeners and IDs are two parallel arrays that are always in sync.\n      if (dispatchListeners[i](event, dispatchIDs[i])) {\n        return dispatchIDs[i];\n      }\n    }\n  } else if (dispatchListeners) {\n    if (dispatchListeners(event, dispatchIDs)) {\n      return dispatchIDs;\n    }\n  }\n  return null;\n}\n\n/**\n * @see executeDispatchesInOrderStopAtTrueImpl\n */\nfunction executeDispatchesInOrderStopAtTrue(event) {\n  var ret = executeDispatchesInOrderStopAtTrueImpl(event);\n  event._dispatchIDs = null;\n  event._dispatchListeners = null;\n  return ret;\n}\n\n/**\n * Execution of a \"direct\" dispatch - there must be at most one dispatch\n * accumulated on the event or it is considered an error. It doesn't really make\n * sense for an event with multiple dispatches (bubbled) to keep track of the\n * return values at each dispatch execution, but it does tend to make sense when\n * dealing with \"direct\" dispatches.\n *\n * @return {*} The return value of executing the single dispatch.\n */\nfunction executeDirectDispatch(event) {\n  if (process.env.NODE_ENV !== 'production') {\n    validateEventDispatches(event);\n  }\n  var dispatchListener = event._dispatchListeners;\n  var dispatchID = event._dispatchIDs;\n  !!Array.isArray(dispatchListener) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'executeDirectDispatch(...): Invalid `event`.') : invariant(false) : undefined;\n  var res = dispatchListener ? dispatchListener(event, dispatchID) : null;\n  event._dispatchListeners = null;\n  event._dispatchIDs = null;\n  return res;\n}\n\n/**\n * @param {SyntheticEvent} event\n * @return {boolean} True iff number of dispatches accumulated is greater than 0.\n */\nfunction hasDispatches(event) {\n  return !!event._dispatchListeners;\n}\n\n/**\n * General utilities that are useful in creating custom Event Plugins.\n */\nvar EventPluginUtils = {\n  isEndish: isEndish,\n  isMoveish: isMoveish,\n  isStartish: isStartish,\n\n  executeDirectDispatch: executeDirectDispatch,\n  executeDispatchesInOrder: executeDispatchesInOrder,\n  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,\n  hasDispatches: hasDispatches,\n\n  getNode: function (id) {\n    return injection.Mount.getNode(id);\n  },\n  getID: function (node) {\n    return injection.Mount.getID(node);\n  },\n\n  injection: injection\n};\n\nmodule.exports = EventPluginUtils;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactErrorUtils\n * @typechecks\n */\n\n'use strict';\n\nvar caughtError = null;\n\n/**\n * Call a function while guarding against errors that happens within it.\n *\n * @param {?String} name of the guard to use for logging or debugging\n * @param {Function} func The function to invoke\n * @param {*} a First argument\n * @param {*} b Second argument\n */\nfunction invokeGuardedCallback(name, func, a, b) {\n  try {\n    return func(a, b);\n  } catch (x) {\n    if (caughtError === null) {\n      caughtError = x;\n    }\n    return undefined;\n  }\n}\n\nvar ReactErrorUtils = {\n  invokeGuardedCallback: invokeGuardedCallback,\n\n  /**\n   * Invoked by ReactTestUtils.Simulate so that any errors thrown by the event\n   * handler are sure to be rethrown by rethrowCaughtError.\n   */\n  invokeGuardedCallbackWithCatch: invokeGuardedCallback,\n\n  /**\n   * During execution of guarded functions we will capture the first error which\n   * we will rethrow to be handled by the top level error handler.\n   */\n  rethrowCaughtError: function () {\n    if (caughtError) {\n      var error = caughtError;\n      caughtError = null;\n      throw error;\n    }\n  }\n};\n\nif (process.env.NODE_ENV !== 'production') {\n  /**\n   * To help development we can get better devtools integration by simulating a\n   * real browser event.\n   */\n  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {\n    var fakeNode = document.createElement('react');\n    ReactErrorUtils.invokeGuardedCallback = function (name, func, a, b) {\n      var boundFunc = func.bind(null, a, b);\n      var evtType = 'react-' + name;\n      fakeNode.addEventListener(evtType, boundFunc, false);\n      var evt = document.createEvent('Event');\n      evt.initEvent(evtType, false, false);\n      fakeNode.dispatchEvent(evt);\n      fakeNode.removeEventListener(evtType, boundFunc, false);\n    };\n  }\n}\n\nmodule.exports = ReactErrorUtils;","/**\n * Copyright 2014-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule accumulateInto\n */\n\n'use strict';\n\nvar invariant = require('fbjs/lib/invariant');\n\n/**\n *\n * Accumulates items that must not be null or undefined into the first one. This\n * is used to conserve memory by avoiding array allocations, and thus sacrifices\n * API cleanness. Since `current` can be null before being passed in and not\n * null after this function, make sure to assign it back to `current`:\n *\n * `a = accumulateInto(a, b);`\n *\n * This API should be sparingly used. Try `accumulate` for something cleaner.\n *\n * @return {*|array<*>} An accumulation of items.\n */\n\nfunction accumulateInto(current, next) {\n  !(next != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : invariant(false) : undefined;\n  if (current == null) {\n    return next;\n  }\n\n  // Both are not empty. Warning: Never call x.concat(y) when you are not\n  // certain that x is an Array (x could be a string with concat method).\n  var currentIsArray = Array.isArray(current);\n  var nextIsArray = Array.isArray(next);\n\n  if (currentIsArray && nextIsArray) {\n    current.push.apply(current, next);\n    return current;\n  }\n\n  if (currentIsArray) {\n    current.push(next);\n    return current;\n  }\n\n  if (nextIsArray) {\n    // A bit too dangerous to mutate `next`.\n    return [current].concat(next);\n  }\n\n  return [current, next];\n}\n\nmodule.exports = accumulateInto;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule forEachAccumulated\n */\n\n'use strict';\n\n/**\n * @param {array} arr an \"accumulation\" of items which is either an Array or\n * a single item. Useful when paired with the `accumulate` module. This is a\n * simple utility that allows us to reason about a collection of items, but\n * handling the case when there is exactly one item (and we do not need to\n * allocate an array).\n */\nvar forEachAccumulated = function (arr, cb, scope) {\n  if (Array.isArray(arr)) {\n    arr.forEach(cb, scope);\n  } else if (arr) {\n    cb.call(scope, arr);\n  }\n};\n\nmodule.exports = forEachAccumulated;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactEventEmitterMixin\n */\n\n'use strict';\n\nvar EventPluginHub = require('./EventPluginHub');\n\nfunction runEventQueueInBatch(events) {\n  EventPluginHub.enqueueEvents(events);\n  EventPluginHub.processEventQueue(false);\n}\n\nvar ReactEventEmitterMixin = {\n\n  /**\n   * Streams a fired top-level event to `EventPluginHub` where plugins have the\n   * opportunity to create `ReactEvent`s to be dispatched.\n   *\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {object} topLevelTarget The listening component root node.\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n   * @param {object} nativeEvent Native environment event.\n   */\n  handleTopLevel: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {\n    var events = EventPluginHub.extractEvents(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget);\n    runEventQueueInBatch(events);\n  }\n};\n\nmodule.exports = ReactEventEmitterMixin;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ViewportMetrics\n */\n\n'use strict';\n\nvar ViewportMetrics = {\n\n  currentScrollLeft: 0,\n\n  currentScrollTop: 0,\n\n  refreshScrollValues: function (scrollPosition) {\n    ViewportMetrics.currentScrollLeft = scrollPosition.x;\n    ViewportMetrics.currentScrollTop = scrollPosition.y;\n  }\n\n};\n\nmodule.exports = ViewportMetrics;","/**\n * Copyright 2014-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule Object.assign\n */\n\n// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign\n\n'use strict';\n\nfunction assign(target, sources) {\n  if (target == null) {\n    throw new TypeError('Object.assign target cannot be null or undefined');\n  }\n\n  var to = Object(target);\n  var hasOwnProperty = Object.prototype.hasOwnProperty;\n\n  for (var nextIndex = 1; nextIndex < arguments.length; nextIndex++) {\n    var nextSource = arguments[nextIndex];\n    if (nextSource == null) {\n      continue;\n    }\n\n    var from = Object(nextSource);\n\n    // We don't currently support accessors nor proxies. Therefore this\n    // copy cannot throw. If we ever supported this then we must handle\n    // exceptions and side-effects. We don't support symbols so they won't\n    // be transferred.\n\n    for (var key in from) {\n      if (hasOwnProperty.call(from, key)) {\n        to[key] = from[key];\n      }\n    }\n  }\n\n  return to;\n}\n\nmodule.exports = assign;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule isEventSupported\n */\n\n'use strict';\n\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\n\nvar useHasFeature;\nif (ExecutionEnvironment.canUseDOM) {\n  useHasFeature = document.implementation && document.implementation.hasFeature &&\n  // always returns true in newer browsers as per the standard.\n  // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature\n  document.implementation.hasFeature('', '') !== true;\n}\n\n/**\n * Checks if an event is supported in the current execution environment.\n *\n * NOTE: This will not work correctly for non-generic events such as `change`,\n * `reset`, `load`, `error`, and `select`.\n *\n * Borrows from Modernizr.\n *\n * @param {string} eventNameSuffix Event name, e.g. \"click\".\n * @param {?boolean} capture Check if the capture phase is supported.\n * @return {boolean} True if the event is supported.\n * @internal\n * @license Modernizr 3.0.0pre (Custom Build) | MIT\n */\nfunction isEventSupported(eventNameSuffix, capture) {\n  if (!ExecutionEnvironment.canUseDOM || capture && !('addEventListener' in document)) {\n    return false;\n  }\n\n  var eventName = 'on' + eventNameSuffix;\n  var isSupported = (eventName in document);\n\n  if (!isSupported) {\n    var element = document.createElement('div');\n    element.setAttribute(eventName, 'return;');\n    isSupported = typeof element[eventName] === 'function';\n  }\n\n  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {\n    // This is the only way to test support for the `wheel` event in IE9+.\n    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');\n  }\n\n  return isSupported;\n}\n\nmodule.exports = isEventSupported;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMFeatureFlags\n */\n\n'use strict';\n\nvar ReactDOMFeatureFlags = {\n  useCreateElement: false\n};\n\nmodule.exports = ReactDOMFeatureFlags;","/**\n * Copyright 2014-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactElement\n */\n\n'use strict';\n\nvar ReactCurrentOwner = require('./ReactCurrentOwner');\n\nvar assign = require('./Object.assign');\nvar canDefineProperty = require('./canDefineProperty');\n\n// The Symbol used to tag the ReactElement type. If there is no native Symbol\n// nor polyfill, then a plain number is used for performance.\nvar REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;\n\nvar RESERVED_PROPS = {\n  key: true,\n  ref: true,\n  __self: true,\n  __source: true\n};\n\n/**\n * Base constructor for all React elements. This is only used to make this\n * work with a dynamic instanceof check. Nothing should live on this prototype.\n *\n * @param {*} type\n * @param {*} key\n * @param {string|object} ref\n * @param {*} self A *temporary* helper to detect places where `this` is\n * different from the `owner` when React.createElement is called, so that we\n * can warn. We want to get rid of owner and replace string `ref`s with arrow\n * functions, and as long as `this` and owner are the same, there will be no\n * change in behavior.\n * @param {*} source An annotation object (added by a transpiler or otherwise)\n * indicating filename, line number, and/or other information.\n * @param {*} owner\n * @param {*} props\n * @internal\n */\nvar ReactElement = function (type, key, ref, self, source, owner, props) {\n  var element = {\n    // This tag allow us to uniquely identify this as a React Element\n    $$typeof: REACT_ELEMENT_TYPE,\n\n    // Built-in properties that belong on the element\n    type: type,\n    key: key,\n    ref: ref,\n    props: props,\n\n    // Record the component responsible for creating this element.\n    _owner: owner\n  };\n\n  if (process.env.NODE_ENV !== 'production') {\n    // The validation flag is currently mutative. We put it on\n    // an external backing store so that we can freeze the whole object.\n    // This can be replaced with a WeakMap once they are implemented in\n    // commonly used development environments.\n    element._store = {};\n\n    // To make comparing ReactElements easier for testing purposes, we make\n    // the validation flag non-enumerable (where possible, which should\n    // include every environment we run tests in), so the test framework\n    // ignores it.\n    if (canDefineProperty) {\n      Object.defineProperty(element._store, 'validated', {\n        configurable: false,\n        enumerable: false,\n        writable: true,\n        value: false\n      });\n      // self and source are DEV only properties.\n      Object.defineProperty(element, '_self', {\n        configurable: false,\n        enumerable: false,\n        writable: false,\n        value: self\n      });\n      // Two elements created in two different places should be considered\n      // equal for testing purposes and therefore we hide it from enumeration.\n      Object.defineProperty(element, '_source', {\n        configurable: false,\n        enumerable: false,\n        writable: false,\n        value: source\n      });\n    } else {\n      element._store.validated = false;\n      element._self = self;\n      element._source = source;\n    }\n    Object.freeze(element.props);\n    Object.freeze(element);\n  }\n\n  return element;\n};\n\nReactElement.createElement = function (type, config, children) {\n  var propName;\n\n  // Reserved names are extracted\n  var props = {};\n\n  var key = null;\n  var ref = null;\n  var self = null;\n  var source = null;\n\n  if (config != null) {\n    ref = config.ref === undefined ? null : config.ref;\n    key = config.key === undefined ? null : '' + config.key;\n    self = config.__self === undefined ? null : config.__self;\n    source = config.__source === undefined ? null : config.__source;\n    // Remaining properties are added to a new props object\n    for (propName in config) {\n      if (config.hasOwnProperty(propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n        props[propName] = config[propName];\n      }\n    }\n  }\n\n  // Children can be more than one argument, and those are transferred onto\n  // the newly allocated props object.\n  var childrenLength = arguments.length - 2;\n  if (childrenLength === 1) {\n    props.children = children;\n  } else if (childrenLength > 1) {\n    var childArray = Array(childrenLength);\n    for (var i = 0; i < childrenLength; i++) {\n      childArray[i] = arguments[i + 2];\n    }\n    props.children = childArray;\n  }\n\n  // Resolve default props\n  if (type && type.defaultProps) {\n    var defaultProps = type.defaultProps;\n    for (propName in defaultProps) {\n      if (typeof props[propName] === 'undefined') {\n        props[propName] = defaultProps[propName];\n      }\n    }\n  }\n\n  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);\n};\n\nReactElement.createFactory = function (type) {\n  var factory = ReactElement.createElement.bind(null, type);\n  // Expose the type on the factory and the prototype so that it can be\n  // easily accessed on elements. E.g. `<Foo />.type === Foo`.\n  // This should not be named `constructor` since this may not be the function\n  // that created the element, and it may not even be a constructor.\n  // Legacy hook TODO: Warn if this is accessed\n  factory.type = type;\n  return factory;\n};\n\nReactElement.cloneAndReplaceKey = function (oldElement, newKey) {\n  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);\n\n  return newElement;\n};\n\nReactElement.cloneAndReplaceProps = function (oldElement, newProps) {\n  var newElement = ReactElement(oldElement.type, oldElement.key, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, newProps);\n\n  if (process.env.NODE_ENV !== 'production') {\n    // If the key on the original is valid, then the clone is valid\n    newElement._store.validated = oldElement._store.validated;\n  }\n\n  return newElement;\n};\n\nReactElement.cloneElement = function (element, config, children) {\n  var propName;\n\n  // Original props are copied\n  var props = assign({}, element.props);\n\n  // Reserved names are extracted\n  var key = element.key;\n  var ref = element.ref;\n  // Self is preserved since the owner is preserved.\n  var self = element._self;\n  // Source is preserved since cloneElement is unlikely to be targeted by a\n  // transpiler, and the original source is probably a better indicator of the\n  // true owner.\n  var source = element._source;\n\n  // Owner will be preserved, unless ref is overridden\n  var owner = element._owner;\n\n  if (config != null) {\n    if (config.ref !== undefined) {\n      // Silently steal the ref from the parent.\n      ref = config.ref;\n      owner = ReactCurrentOwner.current;\n    }\n    if (config.key !== undefined) {\n      key = '' + config.key;\n    }\n    // Remaining properties override existing props\n    for (propName in config) {\n      if (config.hasOwnProperty(propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n        props[propName] = config[propName];\n      }\n    }\n  }\n\n  // Children can be more than one argument, and those are transferred onto\n  // the newly allocated props object.\n  var childrenLength = arguments.length - 2;\n  if (childrenLength === 1) {\n    props.children = children;\n  } else if (childrenLength > 1) {\n    var childArray = Array(childrenLength);\n    for (var i = 0; i < childrenLength; i++) {\n      childArray[i] = arguments[i + 2];\n    }\n    props.children = childArray;\n  }\n\n  return ReactElement(element.type, key, ref, self, source, owner, props);\n};\n\n/**\n * @param {?object} object\n * @return {boolean} True if `object` is a valid component.\n * @final\n */\nReactElement.isValidElement = function (object) {\n  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n};\n\nmodule.exports = ReactElement;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule canDefineProperty\n */\n\n'use strict';\n\nvar canDefineProperty = false;\nif (process.env.NODE_ENV !== 'production') {\n  try {\n    Object.defineProperty({}, 'x', { get: function () {} });\n    canDefineProperty = true;\n  } catch (x) {\n    // IE will fail on defineProperty\n  }\n}\n\nmodule.exports = canDefineProperty;","/**\n * Copyright 2014-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactEmptyComponentRegistry\n */\n\n'use strict';\n\n// This registry keeps track of the React IDs of the components that rendered to\n// `null` (in reality a placeholder such as `noscript`)\nvar nullComponentIDsRegistry = {};\n\n/**\n * @param {string} id Component's `_rootNodeID`.\n * @return {boolean} True if the component is rendered to null.\n */\nfunction isNullComponentID(id) {\n  return !!nullComponentIDsRegistry[id];\n}\n\n/**\n * Mark the component as having rendered to null.\n * @param {string} id Component's `_rootNodeID`.\n */\nfunction registerNullComponentID(id) {\n  nullComponentIDsRegistry[id] = true;\n}\n\n/**\n * Unmark the component as having rendered to null: it renders to something now.\n * @param {string} id Component's `_rootNodeID`.\n */\nfunction deregisterNullComponentID(id) {\n  delete nullComponentIDsRegistry[id];\n}\n\nvar ReactEmptyComponentRegistry = {\n  isNullComponentID: isNullComponentID,\n  registerNullComponentID: registerNullComponentID,\n  deregisterNullComponentID: deregisterNullComponentID\n};\n\nmodule.exports = ReactEmptyComponentRegistry;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactInstanceHandles\n * @typechecks static-only\n */\n\n'use strict';\n\nvar ReactRootIndex = require('./ReactRootIndex');\n\nvar invariant = require('fbjs/lib/invariant');\n\nvar SEPARATOR = '.';\nvar SEPARATOR_LENGTH = SEPARATOR.length;\n\n/**\n * Maximum depth of traversals before we consider the possibility of a bad ID.\n */\nvar MAX_TREE_DEPTH = 10000;\n\n/**\n * Creates a DOM ID prefix to use when mounting React components.\n *\n * @param {number} index A unique integer\n * @return {string} React root ID.\n * @internal\n */\nfunction getReactRootIDString(index) {\n  return SEPARATOR + index.toString(36);\n}\n\n/**\n * Checks if a character in the supplied ID is a separator or the end.\n *\n * @param {string} id A React DOM ID.\n * @param {number} index Index of the character to check.\n * @return {boolean} True if the character is a separator or end of the ID.\n * @private\n */\nfunction isBoundary(id, index) {\n  return id.charAt(index) === SEPARATOR || index === id.length;\n}\n\n/**\n * Checks if the supplied string is a valid React DOM ID.\n *\n * @param {string} id A React DOM ID, maybe.\n * @return {boolean} True if the string is a valid React DOM ID.\n * @private\n */\nfunction isValidID(id) {\n  return id === '' || id.charAt(0) === SEPARATOR && id.charAt(id.length - 1) !== SEPARATOR;\n}\n\n/**\n * Checks if the first ID is an ancestor of or equal to the second ID.\n *\n * @param {string} ancestorID\n * @param {string} descendantID\n * @return {boolean} True if `ancestorID` is an ancestor of `descendantID`.\n * @internal\n */\nfunction isAncestorIDOf(ancestorID, descendantID) {\n  return descendantID.indexOf(ancestorID) === 0 && isBoundary(descendantID, ancestorID.length);\n}\n\n/**\n * Gets the parent ID of the supplied React DOM ID, `id`.\n *\n * @param {string} id ID of a component.\n * @return {string} ID of the parent, or an empty string.\n * @private\n */\nfunction getParentID(id) {\n  return id ? id.substr(0, id.lastIndexOf(SEPARATOR)) : '';\n}\n\n/**\n * Gets the next DOM ID on the tree path from the supplied `ancestorID` to the\n * supplied `destinationID`. If they are equal, the ID is returned.\n *\n * @param {string} ancestorID ID of an ancestor node of `destinationID`.\n * @param {string} destinationID ID of the destination node.\n * @return {string} Next ID on the path from `ancestorID` to `destinationID`.\n * @private\n */\nfunction getNextDescendantID(ancestorID, destinationID) {\n  !(isValidID(ancestorID) && isValidID(destinationID)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNextDescendantID(%s, %s): Received an invalid React DOM ID.', ancestorID, destinationID) : invariant(false) : undefined;\n  !isAncestorIDOf(ancestorID, destinationID) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNextDescendantID(...): React has made an invalid assumption about ' + 'the DOM hierarchy. Expected `%s` to be an ancestor of `%s`.', ancestorID, destinationID) : invariant(false) : undefined;\n  if (ancestorID === destinationID) {\n    return ancestorID;\n  }\n  // Skip over the ancestor and the immediate separator. Traverse until we hit\n  // another separator or we reach the end of `destinationID`.\n  var start = ancestorID.length + SEPARATOR_LENGTH;\n  var i;\n  for (i = start; i < destinationID.length; i++) {\n    if (isBoundary(destinationID, i)) {\n      break;\n    }\n  }\n  return destinationID.substr(0, i);\n}\n\n/**\n * Gets the nearest common ancestor ID of two IDs.\n *\n * Using this ID scheme, the nearest common ancestor ID is the longest common\n * prefix of the two IDs that immediately preceded a \"marker\" in both strings.\n *\n * @param {string} oneID\n * @param {string} twoID\n * @return {string} Nearest common ancestor ID, or the empty string if none.\n * @private\n */\nfunction getFirstCommonAncestorID(oneID, twoID) {\n  var minLength = Math.min(oneID.length, twoID.length);\n  if (minLength === 0) {\n    return '';\n  }\n  var lastCommonMarkerIndex = 0;\n  // Use `<=` to traverse until the \"EOL\" of the shorter string.\n  for (var i = 0; i <= minLength; i++) {\n    if (isBoundary(oneID, i) && isBoundary(twoID, i)) {\n      lastCommonMarkerIndex = i;\n    } else if (oneID.charAt(i) !== twoID.charAt(i)) {\n      break;\n    }\n  }\n  var longestCommonID = oneID.substr(0, lastCommonMarkerIndex);\n  !isValidID(longestCommonID) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getFirstCommonAncestorID(%s, %s): Expected a valid React DOM ID: %s', oneID, twoID, longestCommonID) : invariant(false) : undefined;\n  return longestCommonID;\n}\n\n/**\n * Traverses the parent path between two IDs (either up or down). The IDs must\n * not be the same, and there must exist a parent path between them. If the\n * callback returns `false`, traversal is stopped.\n *\n * @param {?string} start ID at which to start traversal.\n * @param {?string} stop ID at which to end traversal.\n * @param {function} cb Callback to invoke each ID with.\n * @param {*} arg Argument to invoke the callback with.\n * @param {?boolean} skipFirst Whether or not to skip the first node.\n * @param {?boolean} skipLast Whether or not to skip the last node.\n * @private\n */\nfunction traverseParentPath(start, stop, cb, arg, skipFirst, skipLast) {\n  start = start || '';\n  stop = stop || '';\n  !(start !== stop) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'traverseParentPath(...): Cannot traverse from and to the same ID, `%s`.', start) : invariant(false) : undefined;\n  var traverseUp = isAncestorIDOf(stop, start);\n  !(traverseUp || isAncestorIDOf(start, stop)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'traverseParentPath(%s, %s, ...): Cannot traverse from two IDs that do ' + 'not have a parent path.', start, stop) : invariant(false) : undefined;\n  // Traverse from `start` to `stop` one depth at a time.\n  var depth = 0;\n  var traverse = traverseUp ? getParentID : getNextDescendantID;\n  for (var id = start;; /* until break */id = traverse(id, stop)) {\n    var ret;\n    if ((!skipFirst || id !== start) && (!skipLast || id !== stop)) {\n      ret = cb(id, traverseUp, arg);\n    }\n    if (ret === false || id === stop) {\n      // Only break //after// visiting `stop`.\n      break;\n    }\n    !(depth++ < MAX_TREE_DEPTH) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'traverseParentPath(%s, %s, ...): Detected an infinite loop while ' + 'traversing the React DOM ID tree. This may be due to malformed IDs: %s', start, stop, id) : invariant(false) : undefined;\n  }\n}\n\n/**\n * Manages the IDs assigned to DOM representations of React components. This\n * uses a specific scheme in order to traverse the DOM efficiently (e.g. in\n * order to simulate events).\n *\n * @internal\n */\nvar ReactInstanceHandles = {\n\n  /**\n   * Constructs a React root ID\n   * @return {string} A React root ID.\n   */\n  createReactRootID: function () {\n    return getReactRootIDString(ReactRootIndex.createReactRootIndex());\n  },\n\n  /**\n   * Constructs a React ID by joining a root ID with a name.\n   *\n   * @param {string} rootID Root ID of a parent component.\n   * @param {string} name A component's name (as flattened children).\n   * @return {string} A React ID.\n   * @internal\n   */\n  createReactID: function (rootID, name) {\n    return rootID + name;\n  },\n\n  /**\n   * Gets the DOM ID of the React component that is the root of the tree that\n   * contains the React component with the supplied DOM ID.\n   *\n   * @param {string} id DOM ID of a React component.\n   * @return {?string} DOM ID of the React component that is the root.\n   * @internal\n   */\n  getReactRootIDFromNodeID: function (id) {\n    if (id && id.charAt(0) === SEPARATOR && id.length > 1) {\n      var index = id.indexOf(SEPARATOR, 1);\n      return index > -1 ? id.substr(0, index) : id;\n    }\n    return null;\n  },\n\n  /**\n   * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that\n   * should would receive a `mouseEnter` or `mouseLeave` event.\n   *\n   * NOTE: Does not invoke the callback on the nearest common ancestor because\n   * nothing \"entered\" or \"left\" that element.\n   *\n   * @param {string} leaveID ID being left.\n   * @param {string} enterID ID being entered.\n   * @param {function} cb Callback to invoke on each entered/left ID.\n   * @param {*} upArg Argument to invoke the callback with on left IDs.\n   * @param {*} downArg Argument to invoke the callback with on entered IDs.\n   * @internal\n   */\n  traverseEnterLeave: function (leaveID, enterID, cb, upArg, downArg) {\n    var ancestorID = getFirstCommonAncestorID(leaveID, enterID);\n    if (ancestorID !== leaveID) {\n      traverseParentPath(leaveID, ancestorID, cb, upArg, false, true);\n    }\n    if (ancestorID !== enterID) {\n      traverseParentPath(ancestorID, enterID, cb, downArg, true, false);\n    }\n  },\n\n  /**\n   * Simulates the traversal of a two-phase, capture/bubble event dispatch.\n   *\n   * NOTE: This traversal happens on IDs without touching the DOM.\n   *\n   * @param {string} targetID ID of the target node.\n   * @param {function} cb Callback to invoke.\n   * @param {*} arg Argument to invoke the callback with.\n   * @internal\n   */\n  traverseTwoPhase: function (targetID, cb, arg) {\n    if (targetID) {\n      traverseParentPath('', targetID, cb, arg, true, false);\n      traverseParentPath(targetID, '', cb, arg, false, true);\n    }\n  },\n\n  /**\n   * Same as `traverseTwoPhase` but skips the `targetID`.\n   */\n  traverseTwoPhaseSkipTarget: function (targetID, cb, arg) {\n    if (targetID) {\n      traverseParentPath('', targetID, cb, arg, true, true);\n      traverseParentPath(targetID, '', cb, arg, true, true);\n    }\n  },\n\n  /**\n   * Traverse a node ID, calling the supplied `cb` for each ancestor ID. For\n   * example, passing `.0.$row-0.1` would result in `cb` getting called\n   * with `.0`, `.0.$row-0`, and `.0.$row-0.1`.\n   *\n   * NOTE: This traversal happens on IDs without touching the DOM.\n   *\n   * @param {string} targetID ID of the target node.\n   * @param {function} cb Callback to invoke.\n   * @param {*} arg Argument to invoke the callback with.\n   * @internal\n   */\n  traverseAncestors: function (targetID, cb, arg) {\n    traverseParentPath('', targetID, cb, arg, true, false);\n  },\n\n  getFirstCommonAncestorID: getFirstCommonAncestorID,\n\n  /**\n   * Exposed for unit testing.\n   * @private\n   */\n  _getNextDescendantID: getNextDescendantID,\n\n  isAncestorIDOf: isAncestorIDOf,\n\n  SEPARATOR: SEPARATOR\n\n};\n\nmodule.exports = ReactInstanceHandles;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactRootIndex\n * @typechecks\n */\n\n'use strict';\n\nvar ReactRootIndexInjection = {\n  /**\n   * @param {function} _createReactRootIndex\n   */\n  injectCreateReactRootIndex: function (_createReactRootIndex) {\n    ReactRootIndex.createReactRootIndex = _createReactRootIndex;\n  }\n};\n\nvar ReactRootIndex = {\n  createReactRootIndex: null,\n  injection: ReactRootIndexInjection\n};\n\nmodule.exports = ReactRootIndex;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactInstanceMap\n */\n\n'use strict';\n\n/**\n * `ReactInstanceMap` maintains a mapping from a public facing stateful\n * instance (key) and the internal representation (value). This allows public\n * methods to accept the user facing instance as an argument and map them back\n * to internal methods.\n */\n\n// TODO: Replace this with ES6: var ReactInstanceMap = new Map();\nvar ReactInstanceMap = {\n\n  /**\n   * This API should be called `delete` but we'd have to make sure to always\n   * transform these to strings for IE support. When this transform is fully\n   * supported we can rename it.\n   */\n  remove: function (key) {\n    key._reactInternalInstance = undefined;\n  },\n\n  get: function (key) {\n    return key._reactInternalInstance;\n  },\n\n  has: function (key) {\n    return key._reactInternalInstance !== undefined;\n  },\n\n  set: function (key, value) {\n    key._reactInternalInstance = value;\n  }\n\n};\n\nmodule.exports = ReactInstanceMap;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactMarkupChecksum\n */\n\n'use strict';\n\nvar adler32 = require('./adler32');\n\nvar TAG_END = /\\/?>/;\n\nvar ReactMarkupChecksum = {\n  CHECKSUM_ATTR_NAME: 'data-react-checksum',\n\n  /**\n   * @param {string} markup Markup string\n   * @return {string} Markup string with checksum attribute attached\n   */\n  addChecksumToMarkup: function (markup) {\n    var checksum = adler32(markup);\n\n    // Add checksum (handle both parent tags and self-closing tags)\n    return markup.replace(TAG_END, ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '=\"' + checksum + '\"$&');\n  },\n\n  /**\n   * @param {string} markup to use\n   * @param {DOMElement} element root React element\n   * @returns {boolean} whether or not the markup is the same\n   */\n  canReuseMarkup: function (markup, element) {\n    var existingChecksum = element.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);\n    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);\n    var markupChecksum = adler32(markup);\n    return markupChecksum === existingChecksum;\n  }\n};\n\nmodule.exports = ReactMarkupChecksum;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule adler32\n */\n\n'use strict';\n\nvar MOD = 65521;\n\n// adler32 is not cryptographically strong, and is only used to sanity check that\n// markup generated on the server matches the markup generated on the client.\n// This implementation (a modified version of the SheetJS version) has been optimized\n// for our use case, at the expense of conforming to the adler32 specification\n// for non-ascii inputs.\nfunction adler32(data) {\n  var a = 1;\n  var b = 0;\n  var i = 0;\n  var l = data.length;\n  var m = l & ~0x3;\n  while (i < m) {\n    for (; i < Math.min(i + 4096, m); i += 4) {\n      b += (a += data.charCodeAt(i)) + (a += data.charCodeAt(i + 1)) + (a += data.charCodeAt(i + 2)) + (a += data.charCodeAt(i + 3));\n    }\n    a %= MOD;\n    b %= MOD;\n  }\n  for (; i < l; i++) {\n    b += a += data.charCodeAt(i);\n  }\n  a %= MOD;\n  b %= MOD;\n  return a | b << 16;\n}\n\nmodule.exports = adler32;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactReconciler\n */\n\n'use strict';\n\nvar ReactRef = require('./ReactRef');\n\n/**\n * Helper to call ReactRef.attachRefs with this composite component, split out\n * to avoid allocations in the transaction mount-ready queue.\n */\nfunction attachRefs() {\n  ReactRef.attachRefs(this, this._currentElement);\n}\n\nvar ReactReconciler = {\n\n  /**\n   * Initializes the component, renders markup, and registers event listeners.\n   *\n   * @param {ReactComponent} internalInstance\n   * @param {string} rootID DOM ID of the root node.\n   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction\n   * @return {?string} Rendered markup to be inserted into the DOM.\n   * @final\n   * @internal\n   */\n  mountComponent: function (internalInstance, rootID, transaction, context) {\n    var markup = internalInstance.mountComponent(rootID, transaction, context);\n    if (internalInstance._currentElement && internalInstance._currentElement.ref != null) {\n      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);\n    }\n    return markup;\n  },\n\n  /**\n   * Releases any resources allocated by `mountComponent`.\n   *\n   * @final\n   * @internal\n   */\n  unmountComponent: function (internalInstance) {\n    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);\n    internalInstance.unmountComponent();\n  },\n\n  /**\n   * Update a component using a new element.\n   *\n   * @param {ReactComponent} internalInstance\n   * @param {ReactElement} nextElement\n   * @param {ReactReconcileTransaction} transaction\n   * @param {object} context\n   * @internal\n   */\n  receiveComponent: function (internalInstance, nextElement, transaction, context) {\n    var prevElement = internalInstance._currentElement;\n\n    if (nextElement === prevElement && context === internalInstance._context) {\n      // Since elements are immutable after the owner is rendered,\n      // we can do a cheap identity compare here to determine if this is a\n      // superfluous reconcile. It's possible for state to be mutable but such\n      // change should trigger an update of the owner which would recreate\n      // the element. We explicitly check for the existence of an owner since\n      // it's possible for an element created outside a composite to be\n      // deeply mutated and reused.\n\n      // TODO: Bailing out early is just a perf optimization right?\n      // TODO: Removing the return statement should affect correctness?\n      return;\n    }\n\n    var refsChanged = ReactRef.shouldUpdateRefs(prevElement, nextElement);\n\n    if (refsChanged) {\n      ReactRef.detachRefs(internalInstance, prevElement);\n    }\n\n    internalInstance.receiveComponent(nextElement, transaction, context);\n\n    if (refsChanged && internalInstance._currentElement && internalInstance._currentElement.ref != null) {\n      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);\n    }\n  },\n\n  /**\n   * Flush any dirty changes in a component.\n   *\n   * @param {ReactComponent} internalInstance\n   * @param {ReactReconcileTransaction} transaction\n   * @internal\n   */\n  performUpdateIfNecessary: function (internalInstance, transaction) {\n    internalInstance.performUpdateIfNecessary(transaction);\n  }\n\n};\n\nmodule.exports = ReactReconciler;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactRef\n */\n\n'use strict';\n\nvar ReactOwner = require('./ReactOwner');\n\nvar ReactRef = {};\n\nfunction attachRef(ref, component, owner) {\n  if (typeof ref === 'function') {\n    ref(component.getPublicInstance());\n  } else {\n    // Legacy ref\n    ReactOwner.addComponentAsRefTo(component, ref, owner);\n  }\n}\n\nfunction detachRef(ref, component, owner) {\n  if (typeof ref === 'function') {\n    ref(null);\n  } else {\n    // Legacy ref\n    ReactOwner.removeComponentAsRefFrom(component, ref, owner);\n  }\n}\n\nReactRef.attachRefs = function (instance, element) {\n  if (element === null || element === false) {\n    return;\n  }\n  var ref = element.ref;\n  if (ref != null) {\n    attachRef(ref, instance, element._owner);\n  }\n};\n\nReactRef.shouldUpdateRefs = function (prevElement, nextElement) {\n  // If either the owner or a `ref` has changed, make sure the newest owner\n  // has stored a reference to `this`, and the previous owner (if different)\n  // has forgotten the reference to `this`. We use the element instead\n  // of the public this.props because the post processing cannot determine\n  // a ref. The ref conceptually lives on the element.\n\n  // TODO: Should this even be possible? The owner cannot change because\n  // it's forbidden by shouldUpdateReactComponent. The ref can change\n  // if you swap the keys of but not the refs. Reconsider where this check\n  // is made. It probably belongs where the key checking and\n  // instantiateReactComponent is done.\n\n  var prevEmpty = prevElement === null || prevElement === false;\n  var nextEmpty = nextElement === null || nextElement === false;\n\n  return(\n    // This has a few false positives w/r/t empty components.\n    prevEmpty || nextEmpty || nextElement._owner !== prevElement._owner || nextElement.ref !== prevElement.ref\n  );\n};\n\nReactRef.detachRefs = function (instance, element) {\n  if (element === null || element === false) {\n    return;\n  }\n  var ref = element.ref;\n  if (ref != null) {\n    detachRef(ref, instance, element._owner);\n  }\n};\n\nmodule.exports = ReactRef;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactOwner\n */\n\n'use strict';\n\nvar invariant = require('fbjs/lib/invariant');\n\n/**\n * ReactOwners are capable of storing references to owned components.\n *\n * All components are capable of //being// referenced by owner components, but\n * only ReactOwner components are capable of //referencing// owned components.\n * The named reference is known as a \"ref\".\n *\n * Refs are available when mounted and updated during reconciliation.\n *\n *   var MyComponent = React.createClass({\n *     render: function() {\n *       return (\n *         <div onClick={this.handleClick}>\n *           <CustomComponent ref=\"custom\" />\n *         </div>\n *       );\n *     },\n *     handleClick: function() {\n *       this.refs.custom.handleClick();\n *     },\n *     componentDidMount: function() {\n *       this.refs.custom.initialize();\n *     }\n *   });\n *\n * Refs should rarely be used. When refs are used, they should only be done to\n * control data that is not handled by React's data flow.\n *\n * @class ReactOwner\n */\nvar ReactOwner = {\n\n  /**\n   * @param {?object} object\n   * @return {boolean} True if `object` is a valid owner.\n   * @final\n   */\n  isValidOwner: function (object) {\n    return !!(object && typeof object.attachRef === 'function' && typeof object.detachRef === 'function');\n  },\n\n  /**\n   * Adds a component by ref to an owner component.\n   *\n   * @param {ReactComponent} component Component to reference.\n   * @param {string} ref Name by which to refer to the component.\n   * @param {ReactOwner} owner Component on which to record the ref.\n   * @final\n   * @internal\n   */\n  addComponentAsRefTo: function (component, ref, owner) {\n    !ReactOwner.isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'addComponentAsRefTo(...): Only a ReactOwner can have refs. You might ' + 'be adding a ref to a component that was not created inside a component\\'s ' + '`render` method, or you have multiple copies of React loaded ' + '(details: https://fb.me/react-refs-must-have-owner).') : invariant(false) : undefined;\n    owner.attachRef(ref, component);\n  },\n\n  /**\n   * Removes a component by ref from an owner component.\n   *\n   * @param {ReactComponent} component Component to dereference.\n   * @param {string} ref Name of the ref to remove.\n   * @param {ReactOwner} owner Component on which the ref is recorded.\n   * @final\n   * @internal\n   */\n  removeComponentAsRefFrom: function (component, ref, owner) {\n    !ReactOwner.isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. You might ' + 'be removing a ref to a component that was not created inside a component\\'s ' + '`render` method, or you have multiple copies of React loaded ' + '(details: https://fb.me/react-refs-must-have-owner).') : invariant(false) : undefined;\n    // Check that `component` is still the current ref because we do not want to\n    // detach the ref if another component stole it.\n    if (owner.getPublicInstance().refs[ref] === component.getPublicInstance()) {\n      owner.detachRef(ref);\n    }\n  }\n\n};\n\nmodule.exports = ReactOwner;","/**\n * Copyright 2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactUpdateQueue\n */\n\n'use strict';\n\nvar ReactCurrentOwner = require('./ReactCurrentOwner');\nvar ReactElement = require('./ReactElement');\nvar ReactInstanceMap = require('./ReactInstanceMap');\nvar ReactUpdates = require('./ReactUpdates');\n\nvar assign = require('./Object.assign');\nvar invariant = require('fbjs/lib/invariant');\nvar warning = require('fbjs/lib/warning');\n\nfunction enqueueUpdate(internalInstance) {\n  ReactUpdates.enqueueUpdate(internalInstance);\n}\n\nfunction getInternalInstanceReadyForUpdate(publicInstance, callerName) {\n  var internalInstance = ReactInstanceMap.get(publicInstance);\n  if (!internalInstance) {\n    if (process.env.NODE_ENV !== 'production') {\n      // Only warn when we have a callerName. Otherwise we should be silent.\n      // We're probably calling from enqueueCallback. We don't want to warn\n      // there because we already warned for the corresponding lifecycle method.\n      process.env.NODE_ENV !== 'production' ? warning(!callerName, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, publicInstance.constructor.displayName) : undefined;\n    }\n    return null;\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '%s(...): Cannot update during an existing state transition ' + '(such as within `render`). Render methods should be a pure function ' + 'of props and state.', callerName) : undefined;\n  }\n\n  return internalInstance;\n}\n\n/**\n * ReactUpdateQueue allows for state updates to be scheduled into a later\n * reconciliation step.\n */\nvar ReactUpdateQueue = {\n\n  /**\n   * Checks whether or not this composite component is mounted.\n   * @param {ReactClass} publicInstance The instance we want to test.\n   * @return {boolean} True if mounted, false otherwise.\n   * @protected\n   * @final\n   */\n  isMounted: function (publicInstance) {\n    if (process.env.NODE_ENV !== 'production') {\n      var owner = ReactCurrentOwner.current;\n      if (owner !== null) {\n        process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : undefined;\n        owner._warnedAboutRefsInRender = true;\n      }\n    }\n    var internalInstance = ReactInstanceMap.get(publicInstance);\n    if (internalInstance) {\n      // During componentWillMount and render this will still be null but after\n      // that will always render to something. At least for now. So we can use\n      // this hack.\n      return !!internalInstance._renderedComponent;\n    } else {\n      return false;\n    }\n  },\n\n  /**\n   * Enqueue a callback that will be executed after all the pending updates\n   * have processed.\n   *\n   * @param {ReactClass} publicInstance The instance to use as `this` context.\n   * @param {?function} callback Called after state is updated.\n   * @internal\n   */\n  enqueueCallback: function (publicInstance, callback) {\n    !(typeof callback === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'enqueueCallback(...): You called `setProps`, `replaceProps`, ' + '`setState`, `replaceState`, or `forceUpdate` with a callback that ' + 'isn\\'t callable.') : invariant(false) : undefined;\n    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);\n\n    // Previously we would throw an error if we didn't have an internal\n    // instance. Since we want to make it a no-op instead, we mirror the same\n    // behavior we have in other enqueue* methods.\n    // We also need to ignore callbacks in componentWillMount. See\n    // enqueueUpdates.\n    if (!internalInstance) {\n      return null;\n    }\n\n    if (internalInstance._pendingCallbacks) {\n      internalInstance._pendingCallbacks.push(callback);\n    } else {\n      internalInstance._pendingCallbacks = [callback];\n    }\n    // TODO: The callback here is ignored when setState is called from\n    // componentWillMount. Either fix it or disallow doing so completely in\n    // favor of getInitialState. Alternatively, we can disallow\n    // componentWillMount during server-side rendering.\n    enqueueUpdate(internalInstance);\n  },\n\n  enqueueCallbackInternal: function (internalInstance, callback) {\n    !(typeof callback === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'enqueueCallback(...): You called `setProps`, `replaceProps`, ' + '`setState`, `replaceState`, or `forceUpdate` with a callback that ' + 'isn\\'t callable.') : invariant(false) : undefined;\n    if (internalInstance._pendingCallbacks) {\n      internalInstance._pendingCallbacks.push(callback);\n    } else {\n      internalInstance._pendingCallbacks = [callback];\n    }\n    enqueueUpdate(internalInstance);\n  },\n\n  /**\n   * Forces an update. This should only be invoked when it is known with\n   * certainty that we are **not** in a DOM transaction.\n   *\n   * You may want to call this when you know that some deeper aspect of the\n   * component's state has changed but `setState` was not called.\n   *\n   * This will not invoke `shouldComponentUpdate`, but it will invoke\n   * `componentWillUpdate` and `componentDidUpdate`.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @internal\n   */\n  enqueueForceUpdate: function (publicInstance) {\n    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'forceUpdate');\n\n    if (!internalInstance) {\n      return;\n    }\n\n    internalInstance._pendingForceUpdate = true;\n\n    enqueueUpdate(internalInstance);\n  },\n\n  /**\n   * Replaces all of the state. Always use this or `setState` to mutate state.\n   * You should treat `this.state` as immutable.\n   *\n   * There is no guarantee that `this.state` will be immediately updated, so\n   * accessing `this.state` after calling this method may return the old value.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {object} completeState Next state.\n   * @internal\n   */\n  enqueueReplaceState: function (publicInstance, completeState) {\n    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceState');\n\n    if (!internalInstance) {\n      return;\n    }\n\n    internalInstance._pendingStateQueue = [completeState];\n    internalInstance._pendingReplaceState = true;\n\n    enqueueUpdate(internalInstance);\n  },\n\n  /**\n   * Sets a subset of the state. This only exists because _pendingState is\n   * internal. This provides a merging strategy that is not available to deep\n   * properties which is confusing. TODO: Expose pendingState or don't use it\n   * during the merge.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {object} partialState Next partial state to be merged with state.\n   * @internal\n   */\n  enqueueSetState: function (publicInstance, partialState) {\n    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setState');\n\n    if (!internalInstance) {\n      return;\n    }\n\n    var queue = internalInstance._pendingStateQueue || (internalInstance._pendingStateQueue = []);\n    queue.push(partialState);\n\n    enqueueUpdate(internalInstance);\n  },\n\n  /**\n   * Sets a subset of the props.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {object} partialProps Subset of the next props.\n   * @internal\n   */\n  enqueueSetProps: function (publicInstance, partialProps) {\n    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setProps');\n    if (!internalInstance) {\n      return;\n    }\n    ReactUpdateQueue.enqueueSetPropsInternal(internalInstance, partialProps);\n  },\n\n  enqueueSetPropsInternal: function (internalInstance, partialProps) {\n    var topLevelWrapper = internalInstance._topLevelWrapper;\n    !topLevelWrapper ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setProps(...): You called `setProps` on a ' + 'component with a parent. This is an anti-pattern since props will ' + 'get reactively updated when rendered. Instead, change the owner\\'s ' + '`render` method to pass the correct value as props to the component ' + 'where it is created.') : invariant(false) : undefined;\n\n    // Merge with the pending element if it exists, otherwise with existing\n    // element props.\n    var wrapElement = topLevelWrapper._pendingElement || topLevelWrapper._currentElement;\n    var element = wrapElement.props;\n    var props = assign({}, element.props, partialProps);\n    topLevelWrapper._pendingElement = ReactElement.cloneAndReplaceProps(wrapElement, ReactElement.cloneAndReplaceProps(element, props));\n\n    enqueueUpdate(topLevelWrapper);\n  },\n\n  /**\n   * Replaces all of the props.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {object} props New props.\n   * @internal\n   */\n  enqueueReplaceProps: function (publicInstance, props) {\n    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceProps');\n    if (!internalInstance) {\n      return;\n    }\n    ReactUpdateQueue.enqueueReplacePropsInternal(internalInstance, props);\n  },\n\n  enqueueReplacePropsInternal: function (internalInstance, props) {\n    var topLevelWrapper = internalInstance._topLevelWrapper;\n    !topLevelWrapper ? process.env.NODE_ENV !== 'production' ? invariant(false, 'replaceProps(...): You called `replaceProps` on a ' + 'component with a parent. This is an anti-pattern since props will ' + 'get reactively updated when rendered. Instead, change the owner\\'s ' + '`render` method to pass the correct value as props to the component ' + 'where it is created.') : invariant(false) : undefined;\n\n    // Merge with the pending element if it exists, otherwise with existing\n    // element props.\n    var wrapElement = topLevelWrapper._pendingElement || topLevelWrapper._currentElement;\n    var element = wrapElement.props;\n    topLevelWrapper._pendingElement = ReactElement.cloneAndReplaceProps(wrapElement, ReactElement.cloneAndReplaceProps(element, props));\n\n    enqueueUpdate(topLevelWrapper);\n  },\n\n  enqueueElementInternal: function (internalInstance, newElement) {\n    internalInstance._pendingElement = newElement;\n    enqueueUpdate(internalInstance);\n  }\n\n};\n\nmodule.exports = ReactUpdateQueue;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactUpdates\n */\n\n'use strict';\n\nvar CallbackQueue = require('./CallbackQueue');\nvar PooledClass = require('./PooledClass');\nvar ReactPerf = require('./ReactPerf');\nvar ReactReconciler = require('./ReactReconciler');\nvar Transaction = require('./Transaction');\n\nvar assign = require('./Object.assign');\nvar invariant = require('fbjs/lib/invariant');\n\nvar dirtyComponents = [];\nvar asapCallbackQueue = CallbackQueue.getPooled();\nvar asapEnqueued = false;\n\nvar batchingStrategy = null;\n\nfunction ensureInjected() {\n  !(ReactUpdates.ReactReconcileTransaction && batchingStrategy) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must inject a reconcile transaction class and batching ' + 'strategy') : invariant(false) : undefined;\n}\n\nvar NESTED_UPDATES = {\n  initialize: function () {\n    this.dirtyComponentsLength = dirtyComponents.length;\n  },\n  close: function () {\n    if (this.dirtyComponentsLength !== dirtyComponents.length) {\n      // Additional updates were enqueued by componentDidUpdate handlers or\n      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run\n      // these new updates so that if A's componentDidUpdate calls setState on\n      // B, B will update before the callback A's updater provided when calling\n      // setState.\n      dirtyComponents.splice(0, this.dirtyComponentsLength);\n      flushBatchedUpdates();\n    } else {\n      dirtyComponents.length = 0;\n    }\n  }\n};\n\nvar UPDATE_QUEUEING = {\n  initialize: function () {\n    this.callbackQueue.reset();\n  },\n  close: function () {\n    this.callbackQueue.notifyAll();\n  }\n};\n\nvar TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];\n\nfunction ReactUpdatesFlushTransaction() {\n  this.reinitializeTransaction();\n  this.dirtyComponentsLength = null;\n  this.callbackQueue = CallbackQueue.getPooled();\n  this.reconcileTransaction = ReactUpdates.ReactReconcileTransaction.getPooled( /* forceHTML */false);\n}\n\nassign(ReactUpdatesFlushTransaction.prototype, Transaction.Mixin, {\n  getTransactionWrappers: function () {\n    return TRANSACTION_WRAPPERS;\n  },\n\n  destructor: function () {\n    this.dirtyComponentsLength = null;\n    CallbackQueue.release(this.callbackQueue);\n    this.callbackQueue = null;\n    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);\n    this.reconcileTransaction = null;\n  },\n\n  perform: function (method, scope, a) {\n    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`\n    // with this transaction's wrappers around it.\n    return Transaction.Mixin.perform.call(this, this.reconcileTransaction.perform, this.reconcileTransaction, method, scope, a);\n  }\n});\n\nPooledClass.addPoolingTo(ReactUpdatesFlushTransaction);\n\nfunction batchedUpdates(callback, a, b, c, d, e) {\n  ensureInjected();\n  batchingStrategy.batchedUpdates(callback, a, b, c, d, e);\n}\n\n/**\n * Array comparator for ReactComponents by mount ordering.\n *\n * @param {ReactComponent} c1 first component you're comparing\n * @param {ReactComponent} c2 second component you're comparing\n * @return {number} Return value usable by Array.prototype.sort().\n */\nfunction mountOrderComparator(c1, c2) {\n  return c1._mountOrder - c2._mountOrder;\n}\n\nfunction runBatchedUpdates(transaction) {\n  var len = transaction.dirtyComponentsLength;\n  !(len === dirtyComponents.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected flush transaction\\'s stored dirty-components length (%s) to ' + 'match dirty-components array length (%s).', len, dirtyComponents.length) : invariant(false) : undefined;\n\n  // Since reconciling a component higher in the owner hierarchy usually (not\n  // always -- see shouldComponentUpdate()) will reconcile children, reconcile\n  // them before their children by sorting the array.\n  dirtyComponents.sort(mountOrderComparator);\n\n  for (var i = 0; i < len; i++) {\n    // If a component is unmounted before pending changes apply, it will still\n    // be here, but we assume that it has cleared its _pendingCallbacks and\n    // that performUpdateIfNecessary is a noop.\n    var component = dirtyComponents[i];\n\n    // If performUpdateIfNecessary happens to enqueue any new updates, we\n    // shouldn't execute the callbacks until the next render happens, so\n    // stash the callbacks first\n    var callbacks = component._pendingCallbacks;\n    component._pendingCallbacks = null;\n\n    ReactReconciler.performUpdateIfNecessary(component, transaction.reconcileTransaction);\n\n    if (callbacks) {\n      for (var j = 0; j < callbacks.length; j++) {\n        transaction.callbackQueue.enqueue(callbacks[j], component.getPublicInstance());\n      }\n    }\n  }\n}\n\nvar flushBatchedUpdates = function () {\n  // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents\n  // array and perform any updates enqueued by mount-ready handlers (i.e.,\n  // componentDidUpdate) but we need to check here too in order to catch\n  // updates enqueued by setState callbacks and asap calls.\n  while (dirtyComponents.length || asapEnqueued) {\n    if (dirtyComponents.length) {\n      var transaction = ReactUpdatesFlushTransaction.getPooled();\n      transaction.perform(runBatchedUpdates, null, transaction);\n      ReactUpdatesFlushTransaction.release(transaction);\n    }\n\n    if (asapEnqueued) {\n      asapEnqueued = false;\n      var queue = asapCallbackQueue;\n      asapCallbackQueue = CallbackQueue.getPooled();\n      queue.notifyAll();\n      CallbackQueue.release(queue);\n    }\n  }\n};\nflushBatchedUpdates = ReactPerf.measure('ReactUpdates', 'flushBatchedUpdates', flushBatchedUpdates);\n\n/**\n * Mark a component as needing a rerender, adding an optional callback to a\n * list of functions which will be executed once the rerender occurs.\n */\nfunction enqueueUpdate(component) {\n  ensureInjected();\n\n  // Various parts of our code (such as ReactCompositeComponent's\n  // _renderValidatedComponent) assume that calls to render aren't nested;\n  // verify that that's the case. (This is called by each top-level update\n  // function, like setProps, setState, forceUpdate, etc.; creation and\n  // destruction of top-level components is guarded in ReactMount.)\n\n  if (!batchingStrategy.isBatchingUpdates) {\n    batchingStrategy.batchedUpdates(enqueueUpdate, component);\n    return;\n  }\n\n  dirtyComponents.push(component);\n}\n\n/**\n * Enqueue a callback to be run at the end of the current batching cycle. Throws\n * if no updates are currently being performed.\n */\nfunction asap(callback, context) {\n  !batchingStrategy.isBatchingUpdates ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates.asap: Can\\'t enqueue an asap callback in a context where' + 'updates are not being batched.') : invariant(false) : undefined;\n  asapCallbackQueue.enqueue(callback, context);\n  asapEnqueued = true;\n}\n\nvar ReactUpdatesInjection = {\n  injectReconcileTransaction: function (ReconcileTransaction) {\n    !ReconcileTransaction ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a reconcile transaction class') : invariant(false) : undefined;\n    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;\n  },\n\n  injectBatchingStrategy: function (_batchingStrategy) {\n    !_batchingStrategy ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batching strategy') : invariant(false) : undefined;\n    !(typeof _batchingStrategy.batchedUpdates === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batchedUpdates() function') : invariant(false) : undefined;\n    !(typeof _batchingStrategy.isBatchingUpdates === 'boolean') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide an isBatchingUpdates boolean attribute') : invariant(false) : undefined;\n    batchingStrategy = _batchingStrategy;\n  }\n};\n\nvar ReactUpdates = {\n  /**\n   * React references `ReactReconcileTransaction` using this property in order\n   * to allow dependency injection.\n   *\n   * @internal\n   */\n  ReactReconcileTransaction: null,\n\n  batchedUpdates: batchedUpdates,\n  enqueueUpdate: enqueueUpdate,\n  flushBatchedUpdates: flushBatchedUpdates,\n  injection: ReactUpdatesInjection,\n  asap: asap\n};\n\nmodule.exports = ReactUpdates;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule CallbackQueue\n */\n\n'use strict';\n\nvar PooledClass = require('./PooledClass');\n\nvar assign = require('./Object.assign');\nvar invariant = require('fbjs/lib/invariant');\n\n/**\n * A specialized pseudo-event module to help keep track of components waiting to\n * be notified when their DOM representations are available for use.\n *\n * This implements `PooledClass`, so you should never need to instantiate this.\n * Instead, use `CallbackQueue.getPooled()`.\n *\n * @class ReactMountReady\n * @implements PooledClass\n * @internal\n */\nfunction CallbackQueue() {\n  this._callbacks = null;\n  this._contexts = null;\n}\n\nassign(CallbackQueue.prototype, {\n\n  /**\n   * Enqueues a callback to be invoked when `notifyAll` is invoked.\n   *\n   * @param {function} callback Invoked when `notifyAll` is invoked.\n   * @param {?object} context Context to call `callback` with.\n   * @internal\n   */\n  enqueue: function (callback, context) {\n    this._callbacks = this._callbacks || [];\n    this._contexts = this._contexts || [];\n    this._callbacks.push(callback);\n    this._contexts.push(context);\n  },\n\n  /**\n   * Invokes all enqueued callbacks and clears the queue. This is invoked after\n   * the DOM representation of a component has been created or updated.\n   *\n   * @internal\n   */\n  notifyAll: function () {\n    var callbacks = this._callbacks;\n    var contexts = this._contexts;\n    if (callbacks) {\n      !(callbacks.length === contexts.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Mismatched list of contexts in callback queue') : invariant(false) : undefined;\n      this._callbacks = null;\n      this._contexts = null;\n      for (var i = 0; i < callbacks.length; i++) {\n        callbacks[i].call(contexts[i]);\n      }\n      callbacks.length = 0;\n      contexts.length = 0;\n    }\n  },\n\n  /**\n   * Resets the internal queue.\n   *\n   * @internal\n   */\n  reset: function () {\n    this._callbacks = null;\n    this._contexts = null;\n  },\n\n  /**\n   * `PooledClass` looks for this.\n   */\n  destructor: function () {\n    this.reset();\n  }\n\n});\n\nPooledClass.addPoolingTo(CallbackQueue);\n\nmodule.exports = CallbackQueue;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule PooledClass\n */\n\n'use strict';\n\nvar invariant = require('fbjs/lib/invariant');\n\n/**\n * Static poolers. Several custom versions for each potential number of\n * arguments. A completely generic pooler is easy to implement, but would\n * require accessing the `arguments` object. In each of these, `this` refers to\n * the Class itself, not an instance. If any others are needed, simply add them\n * here, or in their own files.\n */\nvar oneArgumentPooler = function (copyFieldsFrom) {\n  var Klass = this;\n  if (Klass.instancePool.length) {\n    var instance = Klass.instancePool.pop();\n    Klass.call(instance, copyFieldsFrom);\n    return instance;\n  } else {\n    return new Klass(copyFieldsFrom);\n  }\n};\n\nvar twoArgumentPooler = function (a1, a2) {\n  var Klass = this;\n  if (Klass.instancePool.length) {\n    var instance = Klass.instancePool.pop();\n    Klass.call(instance, a1, a2);\n    return instance;\n  } else {\n    return new Klass(a1, a2);\n  }\n};\n\nvar threeArgumentPooler = function (a1, a2, a3) {\n  var Klass = this;\n  if (Klass.instancePool.length) {\n    var instance = Klass.instancePool.pop();\n    Klass.call(instance, a1, a2, a3);\n    return instance;\n  } else {\n    return new Klass(a1, a2, a3);\n  }\n};\n\nvar fourArgumentPooler = function (a1, a2, a3, a4) {\n  var Klass = this;\n  if (Klass.instancePool.length) {\n    var instance = Klass.instancePool.pop();\n    Klass.call(instance, a1, a2, a3, a4);\n    return instance;\n  } else {\n    return new Klass(a1, a2, a3, a4);\n  }\n};\n\nvar fiveArgumentPooler = function (a1, a2, a3, a4, a5) {\n  var Klass = this;\n  if (Klass.instancePool.length) {\n    var instance = Klass.instancePool.pop();\n    Klass.call(instance, a1, a2, a3, a4, a5);\n    return instance;\n  } else {\n    return new Klass(a1, a2, a3, a4, a5);\n  }\n};\n\nvar standardReleaser = function (instance) {\n  var Klass = this;\n  !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : invariant(false) : undefined;\n  instance.destructor();\n  if (Klass.instancePool.length < Klass.poolSize) {\n    Klass.instancePool.push(instance);\n  }\n};\n\nvar DEFAULT_POOL_SIZE = 10;\nvar DEFAULT_POOLER = oneArgumentPooler;\n\n/**\n * Augments `CopyConstructor` to be a poolable class, augmenting only the class\n * itself (statically) not adding any prototypical fields. Any CopyConstructor\n * you give this may have a `poolSize` property, and will look for a\n * prototypical `destructor` on instances (optional).\n *\n * @param {Function} CopyConstructor Constructor that can be used to reset.\n * @param {Function} pooler Customizable pooler.\n */\nvar addPoolingTo = function (CopyConstructor, pooler) {\n  var NewKlass = CopyConstructor;\n  NewKlass.instancePool = [];\n  NewKlass.getPooled = pooler || DEFAULT_POOLER;\n  if (!NewKlass.poolSize) {\n    NewKlass.poolSize = DEFAULT_POOL_SIZE;\n  }\n  NewKlass.release = standardReleaser;\n  return NewKlass;\n};\n\nvar PooledClass = {\n  addPoolingTo: addPoolingTo,\n  oneArgumentPooler: oneArgumentPooler,\n  twoArgumentPooler: twoArgumentPooler,\n  threeArgumentPooler: threeArgumentPooler,\n  fourArgumentPooler: fourArgumentPooler,\n  fiveArgumentPooler: fiveArgumentPooler\n};\n\nmodule.exports = PooledClass;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule Transaction\n */\n\n'use strict';\n\nvar invariant = require('fbjs/lib/invariant');\n\n/**\n * `Transaction` creates a black box that is able to wrap any method such that\n * certain invariants are maintained before and after the method is invoked\n * (Even if an exception is thrown while invoking the wrapped method). Whoever\n * instantiates a transaction can provide enforcers of the invariants at\n * creation time. The `Transaction` class itself will supply one additional\n * automatic invariant for you - the invariant that any transaction instance\n * should not be run while it is already being run. You would typically create a\n * single instance of a `Transaction` for reuse multiple times, that potentially\n * is used to wrap several different methods. Wrappers are extremely simple -\n * they only require implementing two methods.\n *\n * <pre>\n *                       wrappers (injected at creation time)\n *                                      +        +\n *                                      |        |\n *                    +-----------------|--------|--------------+\n *                    |                 v        |              |\n *                    |      +---------------+   |              |\n *                    |   +--|    wrapper1   |---|----+         |\n *                    |   |  +---------------+   v    |         |\n *                    |   |          +-------------+  |         |\n *                    |   |     +----|   wrapper2  |--------+   |\n *                    |   |     |    +-------------+  |     |   |\n *                    |   |     |                     |     |   |\n *                    |   v     v                     v     v   | wrapper\n *                    | +---+ +---+   +---------+   +---+ +---+ | invariants\n * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained\n * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->\n *                    | |   | |   |   |         |   |   | |   | |\n *                    | |   | |   |   |         |   |   | |   | |\n *                    | |   | |   |   |         |   |   | |   | |\n *                    | +---+ +---+   +---------+   +---+ +---+ |\n *                    |  initialize                    close    |\n *                    +-----------------------------------------+\n * </pre>\n *\n * Use cases:\n * - Preserving the input selection ranges before/after reconciliation.\n *   Restoring selection even in the event of an unexpected error.\n * - Deactivating events while rearranging the DOM, preventing blurs/focuses,\n *   while guaranteeing that afterwards, the event system is reactivated.\n * - Flushing a queue of collected DOM mutations to the main UI thread after a\n *   reconciliation takes place in a worker thread.\n * - Invoking any collected `componentDidUpdate` callbacks after rendering new\n *   content.\n * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue\n *   to preserve the `scrollTop` (an automatic scroll aware DOM).\n * - (Future use case): Layout calculations before and after DOM updates.\n *\n * Transactional plugin API:\n * - A module that has an `initialize` method that returns any precomputation.\n * - and a `close` method that accepts the precomputation. `close` is invoked\n *   when the wrapped process is completed, or has failed.\n *\n * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules\n * that implement `initialize` and `close`.\n * @return {Transaction} Single transaction for reuse in thread.\n *\n * @class Transaction\n */\nvar Mixin = {\n  /**\n   * Sets up this instance so that it is prepared for collecting metrics. Does\n   * so such that this setup method may be used on an instance that is already\n   * initialized, in a way that does not consume additional memory upon reuse.\n   * That can be useful if you decide to make your subclass of this mixin a\n   * \"PooledClass\".\n   */\n  reinitializeTransaction: function () {\n    this.transactionWrappers = this.getTransactionWrappers();\n    if (this.wrapperInitData) {\n      this.wrapperInitData.length = 0;\n    } else {\n      this.wrapperInitData = [];\n    }\n    this._isInTransaction = false;\n  },\n\n  _isInTransaction: false,\n\n  /**\n   * @abstract\n   * @return {Array<TransactionWrapper>} Array of transaction wrappers.\n   */\n  getTransactionWrappers: null,\n\n  isInTransaction: function () {\n    return !!this._isInTransaction;\n  },\n\n  /**\n   * Executes the function within a safety window. Use this for the top level\n   * methods that result in large amounts of computation/mutations that would\n   * need to be safety checked. The optional arguments helps prevent the need\n   * to bind in many cases.\n   *\n   * @param {function} method Member of scope to call.\n   * @param {Object} scope Scope to invoke from.\n   * @param {Object?=} a Argument to pass to the method.\n   * @param {Object?=} b Argument to pass to the method.\n   * @param {Object?=} c Argument to pass to the method.\n   * @param {Object?=} d Argument to pass to the method.\n   * @param {Object?=} e Argument to pass to the method.\n   * @param {Object?=} f Argument to pass to the method.\n   *\n   * @return {*} Return value from `method`.\n   */\n  perform: function (method, scope, a, b, c, d, e, f) {\n    !!this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.perform(...): Cannot initialize a transaction when there ' + 'is already an outstanding transaction.') : invariant(false) : undefined;\n    var errorThrown;\n    var ret;\n    try {\n      this._isInTransaction = true;\n      // Catching errors makes debugging more difficult, so we start with\n      // errorThrown set to true before setting it to false after calling\n      // close -- if it's still set to true in the finally block, it means\n      // one of these calls threw.\n      errorThrown = true;\n      this.initializeAll(0);\n      ret = method.call(scope, a, b, c, d, e, f);\n      errorThrown = false;\n    } finally {\n      try {\n        if (errorThrown) {\n          // If `method` throws, prefer to show that stack trace over any thrown\n          // by invoking `closeAll`.\n          try {\n            this.closeAll(0);\n          } catch (err) {}\n        } else {\n          // Since `method` didn't throw, we don't want to silence the exception\n          // here.\n          this.closeAll(0);\n        }\n      } finally {\n        this._isInTransaction = false;\n      }\n    }\n    return ret;\n  },\n\n  initializeAll: function (startIndex) {\n    var transactionWrappers = this.transactionWrappers;\n    for (var i = startIndex; i < transactionWrappers.length; i++) {\n      var wrapper = transactionWrappers[i];\n      try {\n        // Catching errors makes debugging more difficult, so we start with the\n        // OBSERVED_ERROR state before overwriting it with the real return value\n        // of initialize -- if it's still set to OBSERVED_ERROR in the finally\n        // block, it means wrapper.initialize threw.\n        this.wrapperInitData[i] = Transaction.OBSERVED_ERROR;\n        this.wrapperInitData[i] = wrapper.initialize ? wrapper.initialize.call(this) : null;\n      } finally {\n        if (this.wrapperInitData[i] === Transaction.OBSERVED_ERROR) {\n          // The initializer for wrapper i threw an error; initialize the\n          // remaining wrappers but silence any exceptions from them to ensure\n          // that the first error is the one to bubble up.\n          try {\n            this.initializeAll(i + 1);\n          } catch (err) {}\n        }\n      }\n    }\n  },\n\n  /**\n   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into\n   * them the respective return values of `this.transactionWrappers.init[i]`\n   * (`close`rs that correspond to initializers that failed will not be\n   * invoked).\n   */\n  closeAll: function (startIndex) {\n    !this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.closeAll(): Cannot close transaction when none are open.') : invariant(false) : undefined;\n    var transactionWrappers = this.transactionWrappers;\n    for (var i = startIndex; i < transactionWrappers.length; i++) {\n      var wrapper = transactionWrappers[i];\n      var initData = this.wrapperInitData[i];\n      var errorThrown;\n      try {\n        // Catching errors makes debugging more difficult, so we start with\n        // errorThrown set to true before setting it to false after calling\n        // close -- if it's still set to true in the finally block, it means\n        // wrapper.close threw.\n        errorThrown = true;\n        if (initData !== Transaction.OBSERVED_ERROR && wrapper.close) {\n          wrapper.close.call(this, initData);\n        }\n        errorThrown = false;\n      } finally {\n        if (errorThrown) {\n          // The closer for wrapper i threw an error; close the remaining\n          // wrappers but silence any exceptions from them to ensure that the\n          // first error is the one to bubble up.\n          try {\n            this.closeAll(i + 1);\n          } catch (e) {}\n        }\n      }\n    }\n    this.wrapperInitData.length = 0;\n  }\n};\n\nvar Transaction = {\n\n  Mixin: Mixin,\n\n  /**\n   * Token to look for to determine if an error occurred.\n   */\n  OBSERVED_ERROR: {}\n\n};\n\nmodule.exports = Transaction;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule instantiateReactComponent\n * @typechecks static-only\n */\n\n'use strict';\n\nvar ReactCompositeComponent = require('./ReactCompositeComponent');\nvar ReactEmptyComponent = require('./ReactEmptyComponent');\nvar ReactNativeComponent = require('./ReactNativeComponent');\n\nvar assign = require('./Object.assign');\nvar invariant = require('fbjs/lib/invariant');\nvar warning = require('fbjs/lib/warning');\n\n// To avoid a cyclic dependency, we create the final class in this module\nvar ReactCompositeComponentWrapper = function () {};\nassign(ReactCompositeComponentWrapper.prototype, ReactCompositeComponent.Mixin, {\n  _instantiateReactComponent: instantiateReactComponent\n});\n\nfunction getDeclarationErrorAddendum(owner) {\n  if (owner) {\n    var name = owner.getName();\n    if (name) {\n      return ' Check the render method of `' + name + '`.';\n    }\n  }\n  return '';\n}\n\n/**\n * Check if the type reference is a known internal type. I.e. not a user\n * provided composite type.\n *\n * @param {function} type\n * @return {boolean} Returns true if this is a valid internal type.\n */\nfunction isInternalComponentType(type) {\n  return typeof type === 'function' && typeof type.prototype !== 'undefined' && typeof type.prototype.mountComponent === 'function' && typeof type.prototype.receiveComponent === 'function';\n}\n\n/**\n * Given a ReactNode, create an instance that will actually be mounted.\n *\n * @param {ReactNode} node\n * @return {object} A new instance of the element's constructor.\n * @protected\n */\nfunction instantiateReactComponent(node) {\n  var instance;\n\n  if (node === null || node === false) {\n    instance = new ReactEmptyComponent(instantiateReactComponent);\n  } else if (typeof node === 'object') {\n    var element = node;\n    !(element && (typeof element.type === 'function' || typeof element.type === 'string')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element type is invalid: expected a string (for built-in components) ' + 'or a class/function (for composite components) but got: %s.%s', element.type == null ? element.type : typeof element.type, getDeclarationErrorAddendum(element._owner)) : invariant(false) : undefined;\n\n    // Special case string values\n    if (typeof element.type === 'string') {\n      instance = ReactNativeComponent.createInternalComponent(element);\n    } else if (isInternalComponentType(element.type)) {\n      // This is temporarily available for custom components that are not string\n      // representations. I.e. ART. Once those are updated to use the string\n      // representation, we can drop this code path.\n      instance = new element.type(element);\n    } else {\n      instance = new ReactCompositeComponentWrapper();\n    }\n  } else if (typeof node === 'string' || typeof node === 'number') {\n    instance = ReactNativeComponent.createInstanceForText(node);\n  } else {\n    !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Encountered invalid React node of type %s', typeof node) : invariant(false) : undefined;\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    process.env.NODE_ENV !== 'production' ? warning(typeof instance.construct === 'function' && typeof instance.mountComponent === 'function' && typeof instance.receiveComponent === 'function' && typeof instance.unmountComponent === 'function', 'Only React Components can be mounted.') : undefined;\n  }\n\n  // Sets up the instance. This can probably just move into the constructor now.\n  instance.construct(node);\n\n  // These two fields are used by the DOM and ART diffing algorithms\n  // respectively. Instead of using expandos on components, we should be\n  // storing the state needed by the diffing algorithms elsewhere.\n  instance._mountIndex = 0;\n  instance._mountImage = null;\n\n  if (process.env.NODE_ENV !== 'production') {\n    instance._isOwnerNecessary = false;\n    instance._warnedAboutRefsInRender = false;\n  }\n\n  // Internal instances should fully constructed at this point, so they should\n  // not get any new fields added to them at this point.\n  if (process.env.NODE_ENV !== 'production') {\n    if (Object.preventExtensions) {\n      Object.preventExtensions(instance);\n    }\n  }\n\n  return instance;\n}\n\nmodule.exports = instantiateReactComponent;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactCompositeComponent\n */\n\n'use strict';\n\nvar ReactComponentEnvironment = require('./ReactComponentEnvironment');\nvar ReactCurrentOwner = require('./ReactCurrentOwner');\nvar ReactElement = require('./ReactElement');\nvar ReactInstanceMap = require('./ReactInstanceMap');\nvar ReactPerf = require('./ReactPerf');\nvar ReactPropTypeLocations = require('./ReactPropTypeLocations');\nvar ReactPropTypeLocationNames = require('./ReactPropTypeLocationNames');\nvar ReactReconciler = require('./ReactReconciler');\nvar ReactUpdateQueue = require('./ReactUpdateQueue');\n\nvar assign = require('./Object.assign');\nvar emptyObject = require('fbjs/lib/emptyObject');\nvar invariant = require('fbjs/lib/invariant');\nvar shouldUpdateReactComponent = require('./shouldUpdateReactComponent');\nvar warning = require('fbjs/lib/warning');\n\nfunction getDeclarationErrorAddendum(component) {\n  var owner = component._currentElement._owner || null;\n  if (owner) {\n    var name = owner.getName();\n    if (name) {\n      return ' Check the render method of `' + name + '`.';\n    }\n  }\n  return '';\n}\n\nfunction StatelessComponent(Component) {}\nStatelessComponent.prototype.render = function () {\n  var Component = ReactInstanceMap.get(this)._currentElement.type;\n  return Component(this.props, this.context, this.updater);\n};\n\n/**\n * ------------------ The Life-Cycle of a Composite Component ------------------\n *\n * - constructor: Initialization of state. The instance is now retained.\n *   - componentWillMount\n *   - render\n *   - [children's constructors]\n *     - [children's componentWillMount and render]\n *     - [children's componentDidMount]\n *     - componentDidMount\n *\n *       Update Phases:\n *       - componentWillReceiveProps (only called if parent updated)\n *       - shouldComponentUpdate\n *         - componentWillUpdate\n *           - render\n *           - [children's constructors or receive props phases]\n *         - componentDidUpdate\n *\n *     - componentWillUnmount\n *     - [children's componentWillUnmount]\n *   - [children destroyed]\n * - (destroyed): The instance is now blank, released by React and ready for GC.\n *\n * -----------------------------------------------------------------------------\n */\n\n/**\n * An incrementing ID assigned to each component when it is mounted. This is\n * used to enforce the order in which `ReactUpdates` updates dirty components.\n *\n * @private\n */\nvar nextMountID = 1;\n\n/**\n * @lends {ReactCompositeComponent.prototype}\n */\nvar ReactCompositeComponentMixin = {\n\n  /**\n   * Base constructor for all composite component.\n   *\n   * @param {ReactElement} element\n   * @final\n   * @internal\n   */\n  construct: function (element) {\n    this._currentElement = element;\n    this._rootNodeID = null;\n    this._instance = null;\n\n    // See ReactUpdateQueue\n    this._pendingElement = null;\n    this._pendingStateQueue = null;\n    this._pendingReplaceState = false;\n    this._pendingForceUpdate = false;\n\n    this._renderedComponent = null;\n\n    this._context = null;\n    this._mountOrder = 0;\n    this._topLevelWrapper = null;\n\n    // See ReactUpdates and ReactUpdateQueue.\n    this._pendingCallbacks = null;\n  },\n\n  /**\n   * Initializes the component, renders markup, and registers event listeners.\n   *\n   * @param {string} rootID DOM ID of the root node.\n   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction\n   * @return {?string} Rendered markup to be inserted into the DOM.\n   * @final\n   * @internal\n   */\n  mountComponent: function (rootID, transaction, context) {\n    this._context = context;\n    this._mountOrder = nextMountID++;\n    this._rootNodeID = rootID;\n\n    var publicProps = this._processProps(this._currentElement.props);\n    var publicContext = this._processContext(context);\n\n    var Component = this._currentElement.type;\n\n    // Initialize the public class\n    var inst;\n    var renderedElement;\n\n    // This is a way to detect if Component is a stateless arrow function\n    // component, which is not newable. It might not be 100% reliable but is\n    // something we can do until we start detecting that Component extends\n    // React.Component. We already assume that typeof Component === 'function'.\n    var canInstantiate = ('prototype' in Component);\n\n    if (canInstantiate) {\n      if (process.env.NODE_ENV !== 'production') {\n        ReactCurrentOwner.current = this;\n        try {\n          inst = new Component(publicProps, publicContext, ReactUpdateQueue);\n        } finally {\n          ReactCurrentOwner.current = null;\n        }\n      } else {\n        inst = new Component(publicProps, publicContext, ReactUpdateQueue);\n      }\n    }\n\n    if (!canInstantiate || inst === null || inst === false || ReactElement.isValidElement(inst)) {\n      renderedElement = inst;\n      inst = new StatelessComponent(Component);\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      // This will throw later in _renderValidatedComponent, but add an early\n      // warning now to help debugging\n      if (inst.render == null) {\n        process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`, returned ' + 'null/false from a stateless component, or tried to render an ' + 'element whose type is a function that isn\\'t a React component.', Component.displayName || Component.name || 'Component') : undefined;\n      } else {\n        // We support ES6 inheriting from React.Component, the module pattern,\n        // and stateless components, but not ES6 classes that don't extend\n        process.env.NODE_ENV !== 'production' ? warning(Component.prototype && Component.prototype.isReactComponent || !canInstantiate || !(inst instanceof Component), '%s(...): React component classes must extend React.Component.', Component.displayName || Component.name || 'Component') : undefined;\n      }\n    }\n\n    // These should be set up in the constructor, but as a convenience for\n    // simpler class abstractions, we set them up after the fact.\n    inst.props = publicProps;\n    inst.context = publicContext;\n    inst.refs = emptyObject;\n    inst.updater = ReactUpdateQueue;\n\n    this._instance = inst;\n\n    // Store a reference from the instance back to the internal representation\n    ReactInstanceMap.set(inst, this);\n\n    if (process.env.NODE_ENV !== 'production') {\n      // Since plain JS classes are defined without any special initialization\n      // logic, we can not catch common errors early. Therefore, we have to\n      // catch them here, at initialization time, instead.\n      process.env.NODE_ENV !== 'production' ? warning(!inst.getInitialState || inst.getInitialState.isReactClassApproved, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', this.getName() || 'a component') : undefined;\n      process.env.NODE_ENV !== 'production' ? warning(!inst.getDefaultProps || inst.getDefaultProps.isReactClassApproved, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', this.getName() || 'a component') : undefined;\n      process.env.NODE_ENV !== 'production' ? warning(!inst.propTypes, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', this.getName() || 'a component') : undefined;\n      process.env.NODE_ENV !== 'production' ? warning(!inst.contextTypes, 'contextTypes was defined as an instance property on %s. Use a ' + 'static property to define contextTypes instead.', this.getName() || 'a component') : undefined;\n      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentShouldUpdate !== 'function', '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', this.getName() || 'A component') : undefined;\n      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentDidUnmount !== 'function', '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', this.getName() || 'A component') : undefined;\n      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentWillRecieveProps !== 'function', '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', this.getName() || 'A component') : undefined;\n    }\n\n    var initialState = inst.state;\n    if (initialState === undefined) {\n      inst.state = initialState = null;\n    }\n    !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.state: must be set to an object or null', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;\n\n    this._pendingStateQueue = null;\n    this._pendingReplaceState = false;\n    this._pendingForceUpdate = false;\n\n    if (inst.componentWillMount) {\n      inst.componentWillMount();\n      // When mounting, calls to `setState` by `componentWillMount` will set\n      // `this._pendingStateQueue` without triggering a re-render.\n      if (this._pendingStateQueue) {\n        inst.state = this._processPendingState(inst.props, inst.context);\n      }\n    }\n\n    // If not a stateless component, we now render\n    if (renderedElement === undefined) {\n      renderedElement = this._renderValidatedComponent();\n    }\n\n    this._renderedComponent = this._instantiateReactComponent(renderedElement);\n\n    var markup = ReactReconciler.mountComponent(this._renderedComponent, rootID, transaction, this._processChildContext(context));\n    if (inst.componentDidMount) {\n      transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);\n    }\n\n    return markup;\n  },\n\n  /**\n   * Releases any resources allocated by `mountComponent`.\n   *\n   * @final\n   * @internal\n   */\n  unmountComponent: function () {\n    var inst = this._instance;\n\n    if (inst.componentWillUnmount) {\n      inst.componentWillUnmount();\n    }\n\n    ReactReconciler.unmountComponent(this._renderedComponent);\n    this._renderedComponent = null;\n    this._instance = null;\n\n    // Reset pending fields\n    // Even if this component is scheduled for another update in ReactUpdates,\n    // it would still be ignored because these fields are reset.\n    this._pendingStateQueue = null;\n    this._pendingReplaceState = false;\n    this._pendingForceUpdate = false;\n    this._pendingCallbacks = null;\n    this._pendingElement = null;\n\n    // These fields do not really need to be reset since this object is no\n    // longer accessible.\n    this._context = null;\n    this._rootNodeID = null;\n    this._topLevelWrapper = null;\n\n    // Delete the reference from the instance to this internal representation\n    // which allow the internals to be properly cleaned up even if the user\n    // leaks a reference to the public instance.\n    ReactInstanceMap.remove(inst);\n\n    // Some existing components rely on inst.props even after they've been\n    // destroyed (in event handlers).\n    // TODO: inst.props = null;\n    // TODO: inst.state = null;\n    // TODO: inst.context = null;\n  },\n\n  /**\n   * Filters the context object to only contain keys specified in\n   * `contextTypes`\n   *\n   * @param {object} context\n   * @return {?object}\n   * @private\n   */\n  _maskContext: function (context) {\n    var maskedContext = null;\n    var Component = this._currentElement.type;\n    var contextTypes = Component.contextTypes;\n    if (!contextTypes) {\n      return emptyObject;\n    }\n    maskedContext = {};\n    for (var contextName in contextTypes) {\n      maskedContext[contextName] = context[contextName];\n    }\n    return maskedContext;\n  },\n\n  /**\n   * Filters the context object to only contain keys specified in\n   * `contextTypes`, and asserts that they are valid.\n   *\n   * @param {object} context\n   * @return {?object}\n   * @private\n   */\n  _processContext: function (context) {\n    var maskedContext = this._maskContext(context);\n    if (process.env.NODE_ENV !== 'production') {\n      var Component = this._currentElement.type;\n      if (Component.contextTypes) {\n        this._checkPropTypes(Component.contextTypes, maskedContext, ReactPropTypeLocations.context);\n      }\n    }\n    return maskedContext;\n  },\n\n  /**\n   * @param {object} currentContext\n   * @return {object}\n   * @private\n   */\n  _processChildContext: function (currentContext) {\n    var Component = this._currentElement.type;\n    var inst = this._instance;\n    var childContext = inst.getChildContext && inst.getChildContext();\n    if (childContext) {\n      !(typeof Component.childContextTypes === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;\n      if (process.env.NODE_ENV !== 'production') {\n        this._checkPropTypes(Component.childContextTypes, childContext, ReactPropTypeLocations.childContext);\n      }\n      for (var name in childContext) {\n        !(name in Component.childContextTypes) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): key \"%s\" is not defined in childContextTypes.', this.getName() || 'ReactCompositeComponent', name) : invariant(false) : undefined;\n      }\n      return assign({}, currentContext, childContext);\n    }\n    return currentContext;\n  },\n\n  /**\n   * Processes props by setting default values for unspecified props and\n   * asserting that the props are valid. Does not mutate its argument; returns\n   * a new props object with defaults merged in.\n   *\n   * @param {object} newProps\n   * @return {object}\n   * @private\n   */\n  _processProps: function (newProps) {\n    if (process.env.NODE_ENV !== 'production') {\n      var Component = this._currentElement.type;\n      if (Component.propTypes) {\n        this._checkPropTypes(Component.propTypes, newProps, ReactPropTypeLocations.prop);\n      }\n    }\n    return newProps;\n  },\n\n  /**\n   * Assert that the props are valid\n   *\n   * @param {object} propTypes Map of prop name to a ReactPropType\n   * @param {object} props\n   * @param {string} location e.g. \"prop\", \"context\", \"child context\"\n   * @private\n   */\n  _checkPropTypes: function (propTypes, props, location) {\n    // TODO: Stop validating prop types here and only use the element\n    // validation.\n    var componentName = this.getName();\n    for (var propName in propTypes) {\n      if (propTypes.hasOwnProperty(propName)) {\n        var error;\n        try {\n          // This is intentionally an invariant that gets caught. It's the same\n          // behavior as without this statement except with a better message.\n          !(typeof propTypes[propName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually ' + 'from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], propName) : invariant(false) : undefined;\n          error = propTypes[propName](props, propName, componentName, location);\n        } catch (ex) {\n          error = ex;\n        }\n        if (error instanceof Error) {\n          // We may want to extend this logic for similar errors in\n          // top-level render calls, so I'm abstracting it away into\n          // a function to minimize refactoring in the future\n          var addendum = getDeclarationErrorAddendum(this);\n\n          if (location === ReactPropTypeLocations.prop) {\n            // Preface gives us something to blacklist in warning module\n            process.env.NODE_ENV !== 'production' ? warning(false, 'Failed Composite propType: %s%s', error.message, addendum) : undefined;\n          } else {\n            process.env.NODE_ENV !== 'production' ? warning(false, 'Failed Context Types: %s%s', error.message, addendum) : undefined;\n          }\n        }\n      }\n    }\n  },\n\n  receiveComponent: function (nextElement, transaction, nextContext) {\n    var prevElement = this._currentElement;\n    var prevContext = this._context;\n\n    this._pendingElement = null;\n\n    this.updateComponent(transaction, prevElement, nextElement, prevContext, nextContext);\n  },\n\n  /**\n   * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`\n   * is set, update the component.\n   *\n   * @param {ReactReconcileTransaction} transaction\n   * @internal\n   */\n  performUpdateIfNecessary: function (transaction) {\n    if (this._pendingElement != null) {\n      ReactReconciler.receiveComponent(this, this._pendingElement || this._currentElement, transaction, this._context);\n    }\n\n    if (this._pendingStateQueue !== null || this._pendingForceUpdate) {\n      this.updateComponent(transaction, this._currentElement, this._currentElement, this._context, this._context);\n    }\n  },\n\n  /**\n   * Perform an update to a mounted component. The componentWillReceiveProps and\n   * shouldComponentUpdate methods are called, then (assuming the update isn't\n   * skipped) the remaining update lifecycle methods are called and the DOM\n   * representation is updated.\n   *\n   * By default, this implements React's rendering and reconciliation algorithm.\n   * Sophisticated clients may wish to override this.\n   *\n   * @param {ReactReconcileTransaction} transaction\n   * @param {ReactElement} prevParentElement\n   * @param {ReactElement} nextParentElement\n   * @internal\n   * @overridable\n   */\n  updateComponent: function (transaction, prevParentElement, nextParentElement, prevUnmaskedContext, nextUnmaskedContext) {\n    var inst = this._instance;\n\n    var nextContext = this._context === nextUnmaskedContext ? inst.context : this._processContext(nextUnmaskedContext);\n    var nextProps;\n\n    // Distinguish between a props update versus a simple state update\n    if (prevParentElement === nextParentElement) {\n      // Skip checking prop types again -- we don't read inst.props to avoid\n      // warning for DOM component props in this upgrade\n      nextProps = nextParentElement.props;\n    } else {\n      nextProps = this._processProps(nextParentElement.props);\n      // An update here will schedule an update but immediately set\n      // _pendingStateQueue which will ensure that any state updates gets\n      // immediately reconciled instead of waiting for the next batch.\n\n      if (inst.componentWillReceiveProps) {\n        inst.componentWillReceiveProps(nextProps, nextContext);\n      }\n    }\n\n    var nextState = this._processPendingState(nextProps, nextContext);\n\n    var shouldUpdate = this._pendingForceUpdate || !inst.shouldComponentUpdate || inst.shouldComponentUpdate(nextProps, nextState, nextContext);\n\n    if (process.env.NODE_ENV !== 'production') {\n      process.env.NODE_ENV !== 'production' ? warning(typeof shouldUpdate !== 'undefined', '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', this.getName() || 'ReactCompositeComponent') : undefined;\n    }\n\n    if (shouldUpdate) {\n      this._pendingForceUpdate = false;\n      // Will set `this.props`, `this.state` and `this.context`.\n      this._performComponentUpdate(nextParentElement, nextProps, nextState, nextContext, transaction, nextUnmaskedContext);\n    } else {\n      // If it's determined that a component should not update, we still want\n      // to set props and state but we shortcut the rest of the update.\n      this._currentElement = nextParentElement;\n      this._context = nextUnmaskedContext;\n      inst.props = nextProps;\n      inst.state = nextState;\n      inst.context = nextContext;\n    }\n  },\n\n  _processPendingState: function (props, context) {\n    var inst = this._instance;\n    var queue = this._pendingStateQueue;\n    var replace = this._pendingReplaceState;\n    this._pendingReplaceState = false;\n    this._pendingStateQueue = null;\n\n    if (!queue) {\n      return inst.state;\n    }\n\n    if (replace && queue.length === 1) {\n      return queue[0];\n    }\n\n    var nextState = assign({}, replace ? queue[0] : inst.state);\n    for (var i = replace ? 1 : 0; i < queue.length; i++) {\n      var partial = queue[i];\n      assign(nextState, typeof partial === 'function' ? partial.call(inst, nextState, props, context) : partial);\n    }\n\n    return nextState;\n  },\n\n  /**\n   * Merges new props and state, notifies delegate methods of update and\n   * performs update.\n   *\n   * @param {ReactElement} nextElement Next element\n   * @param {object} nextProps Next public object to set as properties.\n   * @param {?object} nextState Next object to set as state.\n   * @param {?object} nextContext Next public object to set as context.\n   * @param {ReactReconcileTransaction} transaction\n   * @param {?object} unmaskedContext\n   * @private\n   */\n  _performComponentUpdate: function (nextElement, nextProps, nextState, nextContext, transaction, unmaskedContext) {\n    var inst = this._instance;\n\n    var hasComponentDidUpdate = Boolean(inst.componentDidUpdate);\n    var prevProps;\n    var prevState;\n    var prevContext;\n    if (hasComponentDidUpdate) {\n      prevProps = inst.props;\n      prevState = inst.state;\n      prevContext = inst.context;\n    }\n\n    if (inst.componentWillUpdate) {\n      inst.componentWillUpdate(nextProps, nextState, nextContext);\n    }\n\n    this._currentElement = nextElement;\n    this._context = unmaskedContext;\n    inst.props = nextProps;\n    inst.state = nextState;\n    inst.context = nextContext;\n\n    this._updateRenderedComponent(transaction, unmaskedContext);\n\n    if (hasComponentDidUpdate) {\n      transaction.getReactMountReady().enqueue(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), inst);\n    }\n  },\n\n  /**\n   * Call the component's `render` method and update the DOM accordingly.\n   *\n   * @param {ReactReconcileTransaction} transaction\n   * @internal\n   */\n  _updateRenderedComponent: function (transaction, context) {\n    var prevComponentInstance = this._renderedComponent;\n    var prevRenderedElement = prevComponentInstance._currentElement;\n    var nextRenderedElement = this._renderValidatedComponent();\n    if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {\n      ReactReconciler.receiveComponent(prevComponentInstance, nextRenderedElement, transaction, this._processChildContext(context));\n    } else {\n      // These two IDs are actually the same! But nothing should rely on that.\n      var thisID = this._rootNodeID;\n      var prevComponentID = prevComponentInstance._rootNodeID;\n      ReactReconciler.unmountComponent(prevComponentInstance);\n\n      this._renderedComponent = this._instantiateReactComponent(nextRenderedElement);\n      var nextMarkup = ReactReconciler.mountComponent(this._renderedComponent, thisID, transaction, this._processChildContext(context));\n      this._replaceNodeWithMarkupByID(prevComponentID, nextMarkup);\n    }\n  },\n\n  /**\n   * @protected\n   */\n  _replaceNodeWithMarkupByID: function (prevComponentID, nextMarkup) {\n    ReactComponentEnvironment.replaceNodeWithMarkupByID(prevComponentID, nextMarkup);\n  },\n\n  /**\n   * @protected\n   */\n  _renderValidatedComponentWithoutOwnerOrContext: function () {\n    var inst = this._instance;\n    var renderedComponent = inst.render();\n    if (process.env.NODE_ENV !== 'production') {\n      // We allow auto-mocks to proceed as if they're returning null.\n      if (typeof renderedComponent === 'undefined' && inst.render._isMockFunction) {\n        // This is probably bad practice. Consider warning here and\n        // deprecating this convenience.\n        renderedComponent = null;\n      }\n    }\n\n    return renderedComponent;\n  },\n\n  /**\n   * @private\n   */\n  _renderValidatedComponent: function () {\n    var renderedComponent;\n    ReactCurrentOwner.current = this;\n    try {\n      renderedComponent = this._renderValidatedComponentWithoutOwnerOrContext();\n    } finally {\n      ReactCurrentOwner.current = null;\n    }\n    !(\n    // TODO: An `isValidNode` function would probably be more appropriate\n    renderedComponent === null || renderedComponent === false || ReactElement.isValidElement(renderedComponent)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.render(): A valid ReactComponent must be returned. You may have ' + 'returned undefined, an array or some other invalid object.', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;\n    return renderedComponent;\n  },\n\n  /**\n   * Lazily allocates the refs object and stores `component` as `ref`.\n   *\n   * @param {string} ref Reference name.\n   * @param {component} component Component to store as `ref`.\n   * @final\n   * @private\n   */\n  attachRef: function (ref, component) {\n    var inst = this.getPublicInstance();\n    !(inst != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Stateless function components cannot have refs.') : invariant(false) : undefined;\n    var publicComponentInstance = component.getPublicInstance();\n    if (process.env.NODE_ENV !== 'production') {\n      var componentName = component && component.getName ? component.getName() : 'a component';\n      process.env.NODE_ENV !== 'production' ? warning(publicComponentInstance != null, 'Stateless function components cannot be given refs ' + '(See ref \"%s\" in %s created by %s). ' + 'Attempts to access this ref will fail.', ref, componentName, this.getName()) : undefined;\n    }\n    var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;\n    refs[ref] = publicComponentInstance;\n  },\n\n  /**\n   * Detaches a reference name.\n   *\n   * @param {string} ref Name to dereference.\n   * @final\n   * @private\n   */\n  detachRef: function (ref) {\n    var refs = this.getPublicInstance().refs;\n    delete refs[ref];\n  },\n\n  /**\n   * Get a text description of the component that can be used to identify it\n   * in error messages.\n   * @return {string} The name or null.\n   * @internal\n   */\n  getName: function () {\n    var type = this._currentElement.type;\n    var constructor = this._instance && this._instance.constructor;\n    return type.displayName || constructor && constructor.displayName || type.name || constructor && constructor.name || null;\n  },\n\n  /**\n   * Get the publicly accessible representation of this component - i.e. what\n   * is exposed by refs and returned by render. Can be null for stateless\n   * components.\n   *\n   * @return {ReactComponent} the public component instance.\n   * @internal\n   */\n  getPublicInstance: function () {\n    var inst = this._instance;\n    if (inst instanceof StatelessComponent) {\n      return null;\n    }\n    return inst;\n  },\n\n  // Stub\n  _instantiateReactComponent: null\n\n};\n\nReactPerf.measureMethods(ReactCompositeComponentMixin, 'ReactCompositeComponent', {\n  mountComponent: 'mountComponent',\n  updateComponent: 'updateComponent',\n  _renderValidatedComponent: '_renderValidatedComponent'\n});\n\nvar ReactCompositeComponent = {\n\n  Mixin: ReactCompositeComponentMixin\n\n};\n\nmodule.exports = ReactCompositeComponent;","/**\n * Copyright 2014-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactComponentEnvironment\n */\n\n'use strict';\n\nvar invariant = require('fbjs/lib/invariant');\n\nvar injected = false;\n\nvar ReactComponentEnvironment = {\n\n  /**\n   * Optionally injectable environment dependent cleanup hook. (server vs.\n   * browser etc). Example: A browser system caches DOM nodes based on component\n   * ID and must remove that cache entry when this instance is unmounted.\n   */\n  unmountIDFromEnvironment: null,\n\n  /**\n   * Optionally injectable hook for swapping out mount images in the middle of\n   * the tree.\n   */\n  replaceNodeWithMarkupByID: null,\n\n  /**\n   * Optionally injectable hook for processing a queue of child updates. Will\n   * later move into MultiChildComponents.\n   */\n  processChildrenUpdates: null,\n\n  injection: {\n    injectEnvironment: function (environment) {\n      !!injected ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactCompositeComponent: injectEnvironment() can only be called once.') : invariant(false) : undefined;\n      ReactComponentEnvironment.unmountIDFromEnvironment = environment.unmountIDFromEnvironment;\n      ReactComponentEnvironment.replaceNodeWithMarkupByID = environment.replaceNodeWithMarkupByID;\n      ReactComponentEnvironment.processChildrenUpdates = environment.processChildrenUpdates;\n      injected = true;\n    }\n  }\n\n};\n\nmodule.exports = ReactComponentEnvironment;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactPropTypeLocations\n */\n\n'use strict';\n\nvar keyMirror = require('fbjs/lib/keyMirror');\n\nvar ReactPropTypeLocations = keyMirror({\n  prop: null,\n  context: null,\n  childContext: null\n});\n\nmodule.exports = ReactPropTypeLocations;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactPropTypeLocationNames\n */\n\n'use strict';\n\nvar ReactPropTypeLocationNames = {};\n\nif (process.env.NODE_ENV !== 'production') {\n  ReactPropTypeLocationNames = {\n    prop: 'prop',\n    context: 'context',\n    childContext: 'child context'\n  };\n}\n\nmodule.exports = ReactPropTypeLocationNames;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule shouldUpdateReactComponent\n * @typechecks static-only\n */\n\n'use strict';\n\n/**\n * Given a `prevElement` and `nextElement`, determines if the existing\n * instance should be updated as opposed to being destroyed or replaced by a new\n * instance. Both arguments are elements. This ensures that this logic can\n * operate on stateless trees without any backing instance.\n *\n * @param {?object} prevElement\n * @param {?object} nextElement\n * @return {boolean} True if the existing instance should be updated.\n * @protected\n */\nfunction shouldUpdateReactComponent(prevElement, nextElement) {\n  var prevEmpty = prevElement === null || prevElement === false;\n  var nextEmpty = nextElement === null || nextElement === false;\n  if (prevEmpty || nextEmpty) {\n    return prevEmpty === nextEmpty;\n  }\n\n  var prevType = typeof prevElement;\n  var nextType = typeof nextElement;\n  if (prevType === 'string' || prevType === 'number') {\n    return nextType === 'string' || nextType === 'number';\n  } else {\n    return nextType === 'object' && prevElement.type === nextElement.type && prevElement.key === nextElement.key;\n  }\n  return false;\n}\n\nmodule.exports = shouldUpdateReactComponent;","/**\n * Copyright 2014-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactEmptyComponent\n */\n\n'use strict';\n\nvar ReactElement = require('./ReactElement');\nvar ReactEmptyComponentRegistry = require('./ReactEmptyComponentRegistry');\nvar ReactReconciler = require('./ReactReconciler');\n\nvar assign = require('./Object.assign');\n\nvar placeholderElement;\n\nvar ReactEmptyComponentInjection = {\n  injectEmptyComponent: function (component) {\n    placeholderElement = ReactElement.createElement(component);\n  }\n};\n\nvar ReactEmptyComponent = function (instantiate) {\n  this._currentElement = null;\n  this._rootNodeID = null;\n  this._renderedComponent = instantiate(placeholderElement);\n};\nassign(ReactEmptyComponent.prototype, {\n  construct: function (element) {},\n  mountComponent: function (rootID, transaction, context) {\n    ReactEmptyComponentRegistry.registerNullComponentID(rootID);\n    this._rootNodeID = rootID;\n    return ReactReconciler.mountComponent(this._renderedComponent, rootID, transaction, context);\n  },\n  receiveComponent: function () {},\n  unmountComponent: function (rootID, transaction, context) {\n    ReactReconciler.unmountComponent(this._renderedComponent);\n    ReactEmptyComponentRegistry.deregisterNullComponentID(this._rootNodeID);\n    this._rootNodeID = null;\n    this._renderedComponent = null;\n  }\n});\n\nReactEmptyComponent.injection = ReactEmptyComponentInjection;\n\nmodule.exports = ReactEmptyComponent;","/**\n * Copyright 2014-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactNativeComponent\n */\n\n'use strict';\n\nvar assign = require('./Object.assign');\nvar invariant = require('fbjs/lib/invariant');\n\nvar autoGenerateWrapperClass = null;\nvar genericComponentClass = null;\n// This registry keeps track of wrapper classes around native tags.\nvar tagToComponentClass = {};\nvar textComponentClass = null;\n\nvar ReactNativeComponentInjection = {\n  // This accepts a class that receives the tag string. This is a catch all\n  // that can render any kind of tag.\n  injectGenericComponentClass: function (componentClass) {\n    genericComponentClass = componentClass;\n  },\n  // This accepts a text component class that takes the text string to be\n  // rendered as props.\n  injectTextComponentClass: function (componentClass) {\n    textComponentClass = componentClass;\n  },\n  // This accepts a keyed object with classes as values. Each key represents a\n  // tag. That particular tag will use this class instead of the generic one.\n  injectComponentClasses: function (componentClasses) {\n    assign(tagToComponentClass, componentClasses);\n  }\n};\n\n/**\n * Get a composite component wrapper class for a specific tag.\n *\n * @param {ReactElement} element The tag for which to get the class.\n * @return {function} The React class constructor function.\n */\nfunction getComponentClassForElement(element) {\n  if (typeof element.type === 'function') {\n    return element.type;\n  }\n  var tag = element.type;\n  var componentClass = tagToComponentClass[tag];\n  if (componentClass == null) {\n    tagToComponentClass[tag] = componentClass = autoGenerateWrapperClass(tag);\n  }\n  return componentClass;\n}\n\n/**\n * Get a native internal component class for a specific tag.\n *\n * @param {ReactElement} element The element to create.\n * @return {function} The internal class constructor function.\n */\nfunction createInternalComponent(element) {\n  !genericComponentClass ? process.env.NODE_ENV !== 'production' ? invariant(false, 'There is no registered component for the tag %s', element.type) : invariant(false) : undefined;\n  return new genericComponentClass(element.type, element.props);\n}\n\n/**\n * @param {ReactText} text\n * @return {ReactComponent}\n */\nfunction createInstanceForText(text) {\n  return new textComponentClass(text);\n}\n\n/**\n * @param {ReactComponent} component\n * @return {boolean}\n */\nfunction isTextComponent(component) {\n  return component instanceof textComponentClass;\n}\n\nvar ReactNativeComponent = {\n  getComponentClassForElement: getComponentClassForElement,\n  createInternalComponent: createInternalComponent,\n  createInstanceForText: createInstanceForText,\n  isTextComponent: isTextComponent,\n  injection: ReactNativeComponentInjection\n};\n\nmodule.exports = ReactNativeComponent;","/**\n * Copyright 2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule validateDOMNesting\n */\n\n'use strict';\n\nvar assign = require('./Object.assign');\nvar emptyFunction = require('fbjs/lib/emptyFunction');\nvar warning = require('fbjs/lib/warning');\n\nvar validateDOMNesting = emptyFunction;\n\nif (process.env.NODE_ENV !== 'production') {\n  // This validation code was written based on the HTML5 parsing spec:\n  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope\n  //\n  // Note: this does not catch all invalid nesting, nor does it try to (as it's\n  // not clear what practical benefit doing so provides); instead, we warn only\n  // for cases where the parser will give a parse tree differing from what React\n  // intended. For example, <b><div></div></b> is invalid but we don't warn\n  // because it still parses correctly; we do warn for other cases like nested\n  // <p> tags where the beginning of the second element implicitly closes the\n  // first, causing a confusing mess.\n\n  // https://html.spec.whatwg.org/multipage/syntax.html#special\n  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];\n\n  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope\n  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template',\n\n  // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point\n  // TODO: Distinguish by namespace here -- for <title>, including it here\n  // errs on the side of fewer warnings\n  'foreignObject', 'desc', 'title'];\n\n  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope\n  var buttonScopeTags = inScopeTags.concat(['button']);\n\n  // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags\n  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];\n\n  var emptyAncestorInfo = {\n    parentTag: null,\n\n    formTag: null,\n    aTagInScope: null,\n    buttonTagInScope: null,\n    nobrTagInScope: null,\n    pTagInButtonScope: null,\n\n    listItemTagAutoclosing: null,\n    dlItemTagAutoclosing: null\n  };\n\n  var updatedAncestorInfo = function (oldInfo, tag, instance) {\n    var ancestorInfo = assign({}, oldInfo || emptyAncestorInfo);\n    var info = { tag: tag, instance: instance };\n\n    if (inScopeTags.indexOf(tag) !== -1) {\n      ancestorInfo.aTagInScope = null;\n      ancestorInfo.buttonTagInScope = null;\n      ancestorInfo.nobrTagInScope = null;\n    }\n    if (buttonScopeTags.indexOf(tag) !== -1) {\n      ancestorInfo.pTagInButtonScope = null;\n    }\n\n    // See rules for 'li', 'dd', 'dt' start tags in\n    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody\n    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {\n      ancestorInfo.listItemTagAutoclosing = null;\n      ancestorInfo.dlItemTagAutoclosing = null;\n    }\n\n    ancestorInfo.parentTag = info;\n\n    if (tag === 'form') {\n      ancestorInfo.formTag = info;\n    }\n    if (tag === 'a') {\n      ancestorInfo.aTagInScope = info;\n    }\n    if (tag === 'button') {\n      ancestorInfo.buttonTagInScope = info;\n    }\n    if (tag === 'nobr') {\n      ancestorInfo.nobrTagInScope = info;\n    }\n    if (tag === 'p') {\n      ancestorInfo.pTagInButtonScope = info;\n    }\n    if (tag === 'li') {\n      ancestorInfo.listItemTagAutoclosing = info;\n    }\n    if (tag === 'dd' || tag === 'dt') {\n      ancestorInfo.dlItemTagAutoclosing = info;\n    }\n\n    return ancestorInfo;\n  };\n\n  /**\n   * Returns whether\n   */\n  var isTagValidWithParent = function (tag, parentTag) {\n    // First, let's check if we're in an unusual parsing mode...\n    switch (parentTag) {\n      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect\n      case 'select':\n        return tag === 'option' || tag === 'optgroup' || tag === '#text';\n      case 'optgroup':\n        return tag === 'option' || tag === '#text';\n      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>\n      // but\n      case 'option':\n        return tag === '#text';\n\n      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd\n      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption\n      // No special behavior since these rules fall back to \"in body\" mode for\n      // all except special table nodes which cause bad parsing behavior anyway.\n\n      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr\n      case 'tr':\n        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';\n\n      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody\n      case 'tbody':\n      case 'thead':\n      case 'tfoot':\n        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';\n\n      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup\n      case 'colgroup':\n        return tag === 'col' || tag === 'template';\n\n      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable\n      case 'table':\n        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';\n\n      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead\n      case 'head':\n        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';\n\n      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element\n      case 'html':\n        return tag === 'head' || tag === 'body';\n    }\n\n    // Probably in the \"in body\" parsing mode, so we outlaw only tag combos\n    // where the parsing rules cause implicit opens or closes to be added.\n    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody\n    switch (tag) {\n      case 'h1':\n      case 'h2':\n      case 'h3':\n      case 'h4':\n      case 'h5':\n      case 'h6':\n        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';\n\n      case 'rp':\n      case 'rt':\n        return impliedEndTags.indexOf(parentTag) === -1;\n\n      case 'caption':\n      case 'col':\n      case 'colgroup':\n      case 'frame':\n      case 'head':\n      case 'tbody':\n      case 'td':\n      case 'tfoot':\n      case 'th':\n      case 'thead':\n      case 'tr':\n        // These tags are only valid with a few parents that have special child\n        // parsing rules -- if we're down here, then none of those matched and\n        // so we allow it only if we don't know what the parent is, as all other\n        // cases are invalid.\n        return parentTag == null;\n    }\n\n    return true;\n  };\n\n  /**\n   * Returns whether\n   */\n  var findInvalidAncestorForTag = function (tag, ancestorInfo) {\n    switch (tag) {\n      case 'address':\n      case 'article':\n      case 'aside':\n      case 'blockquote':\n      case 'center':\n      case 'details':\n      case 'dialog':\n      case 'dir':\n      case 'div':\n      case 'dl':\n      case 'fieldset':\n      case 'figcaption':\n      case 'figure':\n      case 'footer':\n      case 'header':\n      case 'hgroup':\n      case 'main':\n      case 'menu':\n      case 'nav':\n      case 'ol':\n      case 'p':\n      case 'section':\n      case 'summary':\n      case 'ul':\n\n      case 'pre':\n      case 'listing':\n\n      case 'table':\n\n      case 'hr':\n\n      case 'xmp':\n\n      case 'h1':\n      case 'h2':\n      case 'h3':\n      case 'h4':\n      case 'h5':\n      case 'h6':\n        return ancestorInfo.pTagInButtonScope;\n\n      case 'form':\n        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;\n\n      case 'li':\n        return ancestorInfo.listItemTagAutoclosing;\n\n      case 'dd':\n      case 'dt':\n        return ancestorInfo.dlItemTagAutoclosing;\n\n      case 'button':\n        return ancestorInfo.buttonTagInScope;\n\n      case 'a':\n        // Spec says something about storing a list of markers, but it sounds\n        // equivalent to this check.\n        return ancestorInfo.aTagInScope;\n\n      case 'nobr':\n        return ancestorInfo.nobrTagInScope;\n    }\n\n    return null;\n  };\n\n  /**\n   * Given a ReactCompositeComponent instance, return a list of its recursive\n   * owners, starting at the root and ending with the instance itself.\n   */\n  var findOwnerStack = function (instance) {\n    if (!instance) {\n      return [];\n    }\n\n    var stack = [];\n    /*eslint-disable space-after-keywords */\n    do {\n      /*eslint-enable space-after-keywords */\n      stack.push(instance);\n    } while (instance = instance._currentElement._owner);\n    stack.reverse();\n    return stack;\n  };\n\n  var didWarn = {};\n\n  validateDOMNesting = function (childTag, childInstance, ancestorInfo) {\n    ancestorInfo = ancestorInfo || emptyAncestorInfo;\n    var parentInfo = ancestorInfo.parentTag;\n    var parentTag = parentInfo && parentInfo.tag;\n\n    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;\n    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);\n    var problematic = invalidParent || invalidAncestor;\n\n    if (problematic) {\n      var ancestorTag = problematic.tag;\n      var ancestorInstance = problematic.instance;\n\n      var childOwner = childInstance && childInstance._currentElement._owner;\n      var ancestorOwner = ancestorInstance && ancestorInstance._currentElement._owner;\n\n      var childOwners = findOwnerStack(childOwner);\n      var ancestorOwners = findOwnerStack(ancestorOwner);\n\n      var minStackLen = Math.min(childOwners.length, ancestorOwners.length);\n      var i;\n\n      var deepestCommon = -1;\n      for (i = 0; i < minStackLen; i++) {\n        if (childOwners[i] === ancestorOwners[i]) {\n          deepestCommon = i;\n        } else {\n          break;\n        }\n      }\n\n      var UNKNOWN = '(unknown)';\n      var childOwnerNames = childOwners.slice(deepestCommon + 1).map(function (inst) {\n        return inst.getName() || UNKNOWN;\n      });\n      var ancestorOwnerNames = ancestorOwners.slice(deepestCommon + 1).map(function (inst) {\n        return inst.getName() || UNKNOWN;\n      });\n      var ownerInfo = [].concat(\n      // If the parent and child instances have a common owner ancestor, start\n      // with that -- otherwise we just start with the parent's owners.\n      deepestCommon !== -1 ? childOwners[deepestCommon].getName() || UNKNOWN : [], ancestorOwnerNames, ancestorTag,\n      // If we're warning about an invalid (non-parent) ancestry, add '...'\n      invalidAncestor ? ['...'] : [], childOwnerNames, childTag).join(' > ');\n\n      var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + ownerInfo;\n      if (didWarn[warnKey]) {\n        return;\n      }\n      didWarn[warnKey] = true;\n\n      if (invalidParent) {\n        var info = '';\n        if (ancestorTag === 'table' && childTag === 'tr') {\n          info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';\n        }\n        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): <%s> cannot appear as a child of <%s>. ' + 'See %s.%s', childTag, ancestorTag, ownerInfo, info) : undefined;\n      } else {\n        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): <%s> cannot appear as a descendant of ' + '<%s>. See %s.', childTag, ancestorTag, ownerInfo) : undefined;\n      }\n    }\n  };\n\n  validateDOMNesting.ancestorInfoContextKey = '__validateDOMNesting_ancestorInfo$' + Math.random().toString(36).slice(2);\n\n  validateDOMNesting.updatedAncestorInfo = updatedAncestorInfo;\n\n  // For testing\n  validateDOMNesting.isTagValidInContext = function (tag, ancestorInfo) {\n    ancestorInfo = ancestorInfo || emptyAncestorInfo;\n    var parentInfo = ancestorInfo.parentTag;\n    var parentTag = parentInfo && parentInfo.tag;\n    return isTagValidWithParent(tag, parentTag) && !findInvalidAncestorForTag(tag, ancestorInfo);\n  };\n}\n\nmodule.exports = validateDOMNesting;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDefaultInjection\n */\n\n'use strict';\n\nvar BeforeInputEventPlugin = require('./BeforeInputEventPlugin');\nvar ChangeEventPlugin = require('./ChangeEventPlugin');\nvar ClientReactRootIndex = require('./ClientReactRootIndex');\nvar DefaultEventPluginOrder = require('./DefaultEventPluginOrder');\nvar EnterLeaveEventPlugin = require('./EnterLeaveEventPlugin');\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\nvar HTMLDOMPropertyConfig = require('./HTMLDOMPropertyConfig');\nvar ReactBrowserComponentMixin = require('./ReactBrowserComponentMixin');\nvar ReactComponentBrowserEnvironment = require('./ReactComponentBrowserEnvironment');\nvar ReactDefaultBatchingStrategy = require('./ReactDefaultBatchingStrategy');\nvar ReactDOMComponent = require('./ReactDOMComponent');\nvar ReactDOMTextComponent = require('./ReactDOMTextComponent');\nvar ReactEventListener = require('./ReactEventListener');\nvar ReactInjection = require('./ReactInjection');\nvar ReactInstanceHandles = require('./ReactInstanceHandles');\nvar ReactMount = require('./ReactMount');\nvar ReactReconcileTransaction = require('./ReactReconcileTransaction');\nvar SelectEventPlugin = require('./SelectEventPlugin');\nvar ServerReactRootIndex = require('./ServerReactRootIndex');\nvar SimpleEventPlugin = require('./SimpleEventPlugin');\nvar SVGDOMPropertyConfig = require('./SVGDOMPropertyConfig');\n\nvar alreadyInjected = false;\n\nfunction inject() {\n  if (alreadyInjected) {\n    // TODO: This is currently true because these injections are shared between\n    // the client and the server package. They should be built independently\n    // and not share any injection state. Then this problem will be solved.\n    return;\n  }\n  alreadyInjected = true;\n\n  ReactInjection.EventEmitter.injectReactEventListener(ReactEventListener);\n\n  /**\n   * Inject modules for resolving DOM hierarchy and plugin ordering.\n   */\n  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);\n  ReactInjection.EventPluginHub.injectInstanceHandle(ReactInstanceHandles);\n  ReactInjection.EventPluginHub.injectMount(ReactMount);\n\n  /**\n   * Some important event plugins included by default (without having to require\n   * them).\n   */\n  ReactInjection.EventPluginHub.injectEventPluginsByName({\n    SimpleEventPlugin: SimpleEventPlugin,\n    EnterLeaveEventPlugin: EnterLeaveEventPlugin,\n    ChangeEventPlugin: ChangeEventPlugin,\n    SelectEventPlugin: SelectEventPlugin,\n    BeforeInputEventPlugin: BeforeInputEventPlugin\n  });\n\n  ReactInjection.NativeComponent.injectGenericComponentClass(ReactDOMComponent);\n\n  ReactInjection.NativeComponent.injectTextComponentClass(ReactDOMTextComponent);\n\n  ReactInjection.Class.injectMixin(ReactBrowserComponentMixin);\n\n  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);\n  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);\n\n  ReactInjection.EmptyComponent.injectEmptyComponent('noscript');\n\n  ReactInjection.Updates.injectReconcileTransaction(ReactReconcileTransaction);\n  ReactInjection.Updates.injectBatchingStrategy(ReactDefaultBatchingStrategy);\n\n  ReactInjection.RootIndex.injectCreateReactRootIndex(ExecutionEnvironment.canUseDOM ? ClientReactRootIndex.createReactRootIndex : ServerReactRootIndex.createReactRootIndex);\n\n  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);\n\n  if (process.env.NODE_ENV !== 'production') {\n    var url = ExecutionEnvironment.canUseDOM && window.location.href || '';\n    if (/[?&]react_perf\\b/.test(url)) {\n      var ReactDefaultPerf = require('./ReactDefaultPerf');\n      ReactDefaultPerf.start();\n    }\n  }\n}\n\nmodule.exports = {\n  inject: inject\n};","/**\n * Copyright 2013-2015 Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule BeforeInputEventPlugin\n * @typechecks static-only\n */\n\n'use strict';\n\nvar EventConstants = require('./EventConstants');\nvar EventPropagators = require('./EventPropagators');\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\nvar FallbackCompositionState = require('./FallbackCompositionState');\nvar SyntheticCompositionEvent = require('./SyntheticCompositionEvent');\nvar SyntheticInputEvent = require('./SyntheticInputEvent');\n\nvar keyOf = require('fbjs/lib/keyOf');\n\nvar END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space\nvar START_KEYCODE = 229;\n\nvar canUseCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;\n\nvar documentMode = null;\nif (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {\n  documentMode = document.documentMode;\n}\n\n// Webkit offers a very useful `textInput` event that can be used to\n// directly represent `beforeInput`. The IE `textinput` event is not as\n// useful, so we don't use it.\nvar canUseTextInputEvent = ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode && !isPresto();\n\n// In IE9+, we have access to composition events, but the data supplied\n// by the native compositionend event may be incorrect. Japanese ideographic\n// spaces, for instance (\\u3000) are not recorded correctly.\nvar useFallbackCompositionData = ExecutionEnvironment.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);\n\n/**\n * Opera <= 12 includes TextEvent in window, but does not fire\n * text input events. Rely on keypress instead.\n */\nfunction isPresto() {\n  var opera = window.opera;\n  return typeof opera === 'object' && typeof opera.version === 'function' && parseInt(opera.version(), 10) <= 12;\n}\n\nvar SPACEBAR_CODE = 32;\nvar SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);\n\nvar topLevelTypes = EventConstants.topLevelTypes;\n\n// Events and their corresponding property names.\nvar eventTypes = {\n  beforeInput: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onBeforeInput: null }),\n      captured: keyOf({ onBeforeInputCapture: null })\n    },\n    dependencies: [topLevelTypes.topCompositionEnd, topLevelTypes.topKeyPress, topLevelTypes.topTextInput, topLevelTypes.topPaste]\n  },\n  compositionEnd: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onCompositionEnd: null }),\n      captured: keyOf({ onCompositionEndCapture: null })\n    },\n    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionEnd, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]\n  },\n  compositionStart: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onCompositionStart: null }),\n      captured: keyOf({ onCompositionStartCapture: null })\n    },\n    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionStart, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]\n  },\n  compositionUpdate: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onCompositionUpdate: null }),\n      captured: keyOf({ onCompositionUpdateCapture: null })\n    },\n    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionUpdate, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]\n  }\n};\n\n// Track whether we've ever handled a keypress on the space key.\nvar hasSpaceKeypress = false;\n\n/**\n * Return whether a native keypress event is assumed to be a command.\n * This is required because Firefox fires `keypress` events for key commands\n * (cut, copy, select-all, etc.) even though no character is inserted.\n */\nfunction isKeypressCommand(nativeEvent) {\n  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&\n  // ctrlKey && altKey is equivalent to AltGr, and is not a command.\n  !(nativeEvent.ctrlKey && nativeEvent.altKey);\n}\n\n/**\n * Translate native top level events into event types.\n *\n * @param {string} topLevelType\n * @return {object}\n */\nfunction getCompositionEventType(topLevelType) {\n  switch (topLevelType) {\n    case topLevelTypes.topCompositionStart:\n      return eventTypes.compositionStart;\n    case topLevelTypes.topCompositionEnd:\n      return eventTypes.compositionEnd;\n    case topLevelTypes.topCompositionUpdate:\n      return eventTypes.compositionUpdate;\n  }\n}\n\n/**\n * Does our fallback best-guess model think this event signifies that\n * composition has begun?\n *\n * @param {string} topLevelType\n * @param {object} nativeEvent\n * @return {boolean}\n */\nfunction isFallbackCompositionStart(topLevelType, nativeEvent) {\n  return topLevelType === topLevelTypes.topKeyDown && nativeEvent.keyCode === START_KEYCODE;\n}\n\n/**\n * Does our fallback mode think that this event is the end of composition?\n *\n * @param {string} topLevelType\n * @param {object} nativeEvent\n * @return {boolean}\n */\nfunction isFallbackCompositionEnd(topLevelType, nativeEvent) {\n  switch (topLevelType) {\n    case topLevelTypes.topKeyUp:\n      // Command keys insert or clear IME input.\n      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;\n    case topLevelTypes.topKeyDown:\n      // Expect IME keyCode on each keydown. If we get any other\n      // code we must have exited earlier.\n      return nativeEvent.keyCode !== START_KEYCODE;\n    case topLevelTypes.topKeyPress:\n    case topLevelTypes.topMouseDown:\n    case topLevelTypes.topBlur:\n      // Events are not possible without cancelling IME.\n      return true;\n    default:\n      return false;\n  }\n}\n\n/**\n * Google Input Tools provides composition data via a CustomEvent,\n * with the `data` property populated in the `detail` object. If this\n * is available on the event object, use it. If not, this is a plain\n * composition event and we have nothing special to extract.\n *\n * @param {object} nativeEvent\n * @return {?string}\n */\nfunction getDataFromCustomEvent(nativeEvent) {\n  var detail = nativeEvent.detail;\n  if (typeof detail === 'object' && 'data' in detail) {\n    return detail.data;\n  }\n  return null;\n}\n\n// Track the current IME composition fallback object, if any.\nvar currentComposition = null;\n\n/**\n * @param {string} topLevelType Record from `EventConstants`.\n * @param {DOMEventTarget} topLevelTarget The listening component root node.\n * @param {string} topLevelTargetID ID of `topLevelTarget`.\n * @param {object} nativeEvent Native browser event.\n * @return {?object} A SyntheticCompositionEvent.\n */\nfunction extractCompositionEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {\n  var eventType;\n  var fallbackData;\n\n  if (canUseCompositionEvent) {\n    eventType = getCompositionEventType(topLevelType);\n  } else if (!currentComposition) {\n    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {\n      eventType = eventTypes.compositionStart;\n    }\n  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {\n    eventType = eventTypes.compositionEnd;\n  }\n\n  if (!eventType) {\n    return null;\n  }\n\n  if (useFallbackCompositionData) {\n    // The current composition is stored statically and must not be\n    // overwritten while composition continues.\n    if (!currentComposition && eventType === eventTypes.compositionStart) {\n      currentComposition = FallbackCompositionState.getPooled(topLevelTarget);\n    } else if (eventType === eventTypes.compositionEnd) {\n      if (currentComposition) {\n        fallbackData = currentComposition.getData();\n      }\n    }\n  }\n\n  var event = SyntheticCompositionEvent.getPooled(eventType, topLevelTargetID, nativeEvent, nativeEventTarget);\n\n  if (fallbackData) {\n    // Inject data generated from fallback path into the synthetic event.\n    // This matches the property of native CompositionEventInterface.\n    event.data = fallbackData;\n  } else {\n    var customData = getDataFromCustomEvent(nativeEvent);\n    if (customData !== null) {\n      event.data = customData;\n    }\n  }\n\n  EventPropagators.accumulateTwoPhaseDispatches(event);\n  return event;\n}\n\n/**\n * @param {string} topLevelType Record from `EventConstants`.\n * @param {object} nativeEvent Native browser event.\n * @return {?string} The string corresponding to this `beforeInput` event.\n */\nfunction getNativeBeforeInputChars(topLevelType, nativeEvent) {\n  switch (topLevelType) {\n    case topLevelTypes.topCompositionEnd:\n      return getDataFromCustomEvent(nativeEvent);\n    case topLevelTypes.topKeyPress:\n      /**\n       * If native `textInput` events are available, our goal is to make\n       * use of them. However, there is a special case: the spacebar key.\n       * In Webkit, preventing default on a spacebar `textInput` event\n       * cancels character insertion, but it *also* causes the browser\n       * to fall back to its default spacebar behavior of scrolling the\n       * page.\n       *\n       * Tracking at:\n       * https://code.google.com/p/chromium/issues/detail?id=355103\n       *\n       * To avoid this issue, use the keypress event as if no `textInput`\n       * event is available.\n       */\n      var which = nativeEvent.which;\n      if (which !== SPACEBAR_CODE) {\n        return null;\n      }\n\n      hasSpaceKeypress = true;\n      return SPACEBAR_CHAR;\n\n    case topLevelTypes.topTextInput:\n      // Record the characters to be added to the DOM.\n      var chars = nativeEvent.data;\n\n      // If it's a spacebar character, assume that we have already handled\n      // it at the keypress level and bail immediately. Android Chrome\n      // doesn't give us keycodes, so we need to blacklist it.\n      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {\n        return null;\n      }\n\n      return chars;\n\n    default:\n      // For other native event types, do nothing.\n      return null;\n  }\n}\n\n/**\n * For browsers that do not provide the `textInput` event, extract the\n * appropriate string to use for SyntheticInputEvent.\n *\n * @param {string} topLevelType Record from `EventConstants`.\n * @param {object} nativeEvent Native browser event.\n * @return {?string} The fallback string for this `beforeInput` event.\n */\nfunction getFallbackBeforeInputChars(topLevelType, nativeEvent) {\n  // If we are currently composing (IME) and using a fallback to do so,\n  // try to extract the composed characters from the fallback object.\n  if (currentComposition) {\n    if (topLevelType === topLevelTypes.topCompositionEnd || isFallbackCompositionEnd(topLevelType, nativeEvent)) {\n      var chars = currentComposition.getData();\n      FallbackCompositionState.release(currentComposition);\n      currentComposition = null;\n      return chars;\n    }\n    return null;\n  }\n\n  switch (topLevelType) {\n    case topLevelTypes.topPaste:\n      // If a paste event occurs after a keypress, throw out the input\n      // chars. Paste events should not lead to BeforeInput events.\n      return null;\n    case topLevelTypes.topKeyPress:\n      /**\n       * As of v27, Firefox may fire keypress events even when no character\n       * will be inserted. A few possibilities:\n       *\n       * - `which` is `0`. Arrow keys, Esc key, etc.\n       *\n       * - `which` is the pressed key code, but no char is available.\n       *   Ex: 'AltGr + d` in Polish. There is no modified character for\n       *   this key combination and no character is inserted into the\n       *   document, but FF fires the keypress for char code `100` anyway.\n       *   No `input` event will occur.\n       *\n       * - `which` is the pressed key code, but a command combination is\n       *   being used. Ex: `Cmd+C`. No character is inserted, and no\n       *   `input` event will occur.\n       */\n      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {\n        return String.fromCharCode(nativeEvent.which);\n      }\n      return null;\n    case topLevelTypes.topCompositionEnd:\n      return useFallbackCompositionData ? null : nativeEvent.data;\n    default:\n      return null;\n  }\n}\n\n/**\n * Extract a SyntheticInputEvent for `beforeInput`, based on either native\n * `textInput` or fallback behavior.\n *\n * @param {string} topLevelType Record from `EventConstants`.\n * @param {DOMEventTarget} topLevelTarget The listening component root node.\n * @param {string} topLevelTargetID ID of `topLevelTarget`.\n * @param {object} nativeEvent Native browser event.\n * @return {?object} A SyntheticInputEvent.\n */\nfunction extractBeforeInputEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {\n  var chars;\n\n  if (canUseTextInputEvent) {\n    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);\n  } else {\n    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);\n  }\n\n  // If no characters are being inserted, no BeforeInput event should\n  // be fired.\n  if (!chars) {\n    return null;\n  }\n\n  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, topLevelTargetID, nativeEvent, nativeEventTarget);\n\n  event.data = chars;\n  EventPropagators.accumulateTwoPhaseDispatches(event);\n  return event;\n}\n\n/**\n * Create an `onBeforeInput` event to match\n * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.\n *\n * This event plugin is based on the native `textInput` event\n * available in Chrome, Safari, Opera, and IE. This event fires after\n * `onKeyPress` and `onCompositionEnd`, but before `onInput`.\n *\n * `beforeInput` is spec'd but not implemented in any browsers, and\n * the `input` event does not provide any useful information about what has\n * actually been added, contrary to the spec. Thus, `textInput` is the best\n * available event to identify the characters that have actually been inserted\n * into the target node.\n *\n * This plugin is also responsible for emitting `composition` events, thus\n * allowing us to share composition fallback code for both `beforeInput` and\n * `composition` event types.\n */\nvar BeforeInputEventPlugin = {\n\n  eventTypes: eventTypes,\n\n  /**\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {DOMEventTarget} topLevelTarget The listening component root node.\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n   * @param {object} nativeEvent Native browser event.\n   * @return {*} An accumulation of synthetic events.\n   * @see {EventPluginHub.extractEvents}\n   */\n  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {\n    return [extractCompositionEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget), extractBeforeInputEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget)];\n  }\n};\n\nmodule.exports = BeforeInputEventPlugin;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule EventPropagators\n */\n\n'use strict';\n\nvar EventConstants = require('./EventConstants');\nvar EventPluginHub = require('./EventPluginHub');\n\nvar warning = require('fbjs/lib/warning');\n\nvar accumulateInto = require('./accumulateInto');\nvar forEachAccumulated = require('./forEachAccumulated');\n\nvar PropagationPhases = EventConstants.PropagationPhases;\nvar getListener = EventPluginHub.getListener;\n\n/**\n * Some event types have a notion of different registration names for different\n * \"phases\" of propagation. This finds listeners by a given phase.\n */\nfunction listenerAtPhase(id, event, propagationPhase) {\n  var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];\n  return getListener(id, registrationName);\n}\n\n/**\n * Tags a `SyntheticEvent` with dispatched listeners. Creating this function\n * here, allows us to not have to bind or create functions for each event.\n * Mutating the event's members allows us to not have to create a wrapping\n * \"dispatch\" object that pairs the event with the listener.\n */\nfunction accumulateDirectionalDispatches(domID, upwards, event) {\n  if (process.env.NODE_ENV !== 'production') {\n    process.env.NODE_ENV !== 'production' ? warning(domID, 'Dispatching id must not be null') : undefined;\n  }\n  var phase = upwards ? PropagationPhases.bubbled : PropagationPhases.captured;\n  var listener = listenerAtPhase(domID, event, phase);\n  if (listener) {\n    event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);\n    event._dispatchIDs = accumulateInto(event._dispatchIDs, domID);\n  }\n}\n\n/**\n * Collect dispatches (must be entirely collected before dispatching - see unit\n * tests). Lazily allocate the array to conserve memory.  We must loop through\n * each event and perform the traversal for each one. We cannot perform a\n * single traversal for the entire collection of events because each event may\n * have a different target.\n */\nfunction accumulateTwoPhaseDispatchesSingle(event) {\n  if (event && event.dispatchConfig.phasedRegistrationNames) {\n    EventPluginHub.injection.getInstanceHandle().traverseTwoPhase(event.dispatchMarker, accumulateDirectionalDispatches, event);\n  }\n}\n\n/**\n * Same as `accumulateTwoPhaseDispatchesSingle`, but skips over the targetID.\n */\nfunction accumulateTwoPhaseDispatchesSingleSkipTarget(event) {\n  if (event && event.dispatchConfig.phasedRegistrationNames) {\n    EventPluginHub.injection.getInstanceHandle().traverseTwoPhaseSkipTarget(event.dispatchMarker, accumulateDirectionalDispatches, event);\n  }\n}\n\n/**\n * Accumulates without regard to direction, does not look for phased\n * registration names. Same as `accumulateDirectDispatchesSingle` but without\n * requiring that the `dispatchMarker` be the same as the dispatched ID.\n */\nfunction accumulateDispatches(id, ignoredDirection, event) {\n  if (event && event.dispatchConfig.registrationName) {\n    var registrationName = event.dispatchConfig.registrationName;\n    var listener = getListener(id, registrationName);\n    if (listener) {\n      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);\n      event._dispatchIDs = accumulateInto(event._dispatchIDs, id);\n    }\n  }\n}\n\n/**\n * Accumulates dispatches on an `SyntheticEvent`, but only for the\n * `dispatchMarker`.\n * @param {SyntheticEvent} event\n */\nfunction accumulateDirectDispatchesSingle(event) {\n  if (event && event.dispatchConfig.registrationName) {\n    accumulateDispatches(event.dispatchMarker, null, event);\n  }\n}\n\nfunction accumulateTwoPhaseDispatches(events) {\n  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);\n}\n\nfunction accumulateTwoPhaseDispatchesSkipTarget(events) {\n  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);\n}\n\nfunction accumulateEnterLeaveDispatches(leave, enter, fromID, toID) {\n  EventPluginHub.injection.getInstanceHandle().traverseEnterLeave(fromID, toID, accumulateDispatches, leave, enter);\n}\n\nfunction accumulateDirectDispatches(events) {\n  forEachAccumulated(events, accumulateDirectDispatchesSingle);\n}\n\n/**\n * A small set of propagation patterns, each of which will accept a small amount\n * of information, and generate a set of \"dispatch ready event objects\" - which\n * are sets of events that have already been annotated with a set of dispatched\n * listener functions/ids. The API is designed this way to discourage these\n * propagation strategies from actually executing the dispatches, since we\n * always want to collect the entire set of dispatches before executing event a\n * single one.\n *\n * @constructor EventPropagators\n */\nvar EventPropagators = {\n  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,\n  accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,\n  accumulateDirectDispatches: accumulateDirectDispatches,\n  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches\n};\n\nmodule.exports = EventPropagators;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule FallbackCompositionState\n * @typechecks static-only\n */\n\n'use strict';\n\nvar PooledClass = require('./PooledClass');\n\nvar assign = require('./Object.assign');\nvar getTextContentAccessor = require('./getTextContentAccessor');\n\n/**\n * This helper class stores information about text content of a target node,\n * allowing comparison of content before and after a given event.\n *\n * Identify the node where selection currently begins, then observe\n * both its text content and its current position in the DOM. Since the\n * browser may natively replace the target node during composition, we can\n * use its position to find its replacement.\n *\n * @param {DOMEventTarget} root\n */\nfunction FallbackCompositionState(root) {\n  this._root = root;\n  this._startText = this.getText();\n  this._fallbackText = null;\n}\n\nassign(FallbackCompositionState.prototype, {\n  destructor: function () {\n    this._root = null;\n    this._startText = null;\n    this._fallbackText = null;\n  },\n\n  /**\n   * Get current text of input.\n   *\n   * @return {string}\n   */\n  getText: function () {\n    if ('value' in this._root) {\n      return this._root.value;\n    }\n    return this._root[getTextContentAccessor()];\n  },\n\n  /**\n   * Determine the differing substring between the initially stored\n   * text content and the current content.\n   *\n   * @return {string}\n   */\n  getData: function () {\n    if (this._fallbackText) {\n      return this._fallbackText;\n    }\n\n    var start;\n    var startValue = this._startText;\n    var startLength = startValue.length;\n    var end;\n    var endValue = this.getText();\n    var endLength = endValue.length;\n\n    for (start = 0; start < startLength; start++) {\n      if (startValue[start] !== endValue[start]) {\n        break;\n      }\n    }\n\n    var minEnd = startLength - start;\n    for (end = 1; end <= minEnd; end++) {\n      if (startValue[startLength - end] !== endValue[endLength - end]) {\n        break;\n      }\n    }\n\n    var sliceTail = end > 1 ? 1 - end : undefined;\n    this._fallbackText = endValue.slice(start, sliceTail);\n    return this._fallbackText;\n  }\n});\n\nPooledClass.addPoolingTo(FallbackCompositionState);\n\nmodule.exports = FallbackCompositionState;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule getTextContentAccessor\n */\n\n'use strict';\n\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\n\nvar contentKey = null;\n\n/**\n * Gets the key used to access text content on a DOM node.\n *\n * @return {?string} Key used to access text content.\n * @internal\n */\nfunction getTextContentAccessor() {\n  if (!contentKey && ExecutionEnvironment.canUseDOM) {\n    // Prefer textContent to innerText because many browsers support both but\n    // SVG <text> elements don't support innerText even when <div> does.\n    contentKey = 'textContent' in document.documentElement ? 'textContent' : 'innerText';\n  }\n  return contentKey;\n}\n\nmodule.exports = getTextContentAccessor;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule SyntheticCompositionEvent\n * @typechecks static-only\n */\n\n'use strict';\n\nvar SyntheticEvent = require('./SyntheticEvent');\n\n/**\n * @interface Event\n * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents\n */\nvar CompositionEventInterface = {\n  data: null\n};\n\n/**\n * @param {object} dispatchConfig Configuration used to dispatch this event.\n * @param {string} dispatchMarker Marker identifying the event target.\n * @param {object} nativeEvent Native browser event.\n * @extends {SyntheticUIEvent}\n */\nfunction SyntheticCompositionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {\n  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);\n}\n\nSyntheticEvent.augmentClass(SyntheticCompositionEvent, CompositionEventInterface);\n\nmodule.exports = SyntheticCompositionEvent;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule SyntheticEvent\n * @typechecks static-only\n */\n\n'use strict';\n\nvar PooledClass = require('./PooledClass');\n\nvar assign = require('./Object.assign');\nvar emptyFunction = require('fbjs/lib/emptyFunction');\nvar warning = require('fbjs/lib/warning');\n\n/**\n * @interface Event\n * @see http://www.w3.org/TR/DOM-Level-3-Events/\n */\nvar EventInterface = {\n  type: null,\n  target: null,\n  // currentTarget is set when dispatching; no use in copying it here\n  currentTarget: emptyFunction.thatReturnsNull,\n  eventPhase: null,\n  bubbles: null,\n  cancelable: null,\n  timeStamp: function (event) {\n    return event.timeStamp || Date.now();\n  },\n  defaultPrevented: null,\n  isTrusted: null\n};\n\n/**\n * Synthetic events are dispatched by event plugins, typically in response to a\n * top-level event delegation handler.\n *\n * These systems should generally use pooling to reduce the frequency of garbage\n * collection. The system should check `isPersistent` to determine whether the\n * event should be released into the pool after being dispatched. Users that\n * need a persisted event should invoke `persist`.\n *\n * Synthetic events (and subclasses) implement the DOM Level 3 Events API by\n * normalizing browser quirks. Subclasses do not necessarily have to implement a\n * DOM interface; custom application-specific events can also subclass this.\n *\n * @param {object} dispatchConfig Configuration used to dispatch this event.\n * @param {string} dispatchMarker Marker identifying the event target.\n * @param {object} nativeEvent Native browser event.\n */\nfunction SyntheticEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {\n  this.dispatchConfig = dispatchConfig;\n  this.dispatchMarker = dispatchMarker;\n  this.nativeEvent = nativeEvent;\n\n  var Interface = this.constructor.Interface;\n  for (var propName in Interface) {\n    if (!Interface.hasOwnProperty(propName)) {\n      continue;\n    }\n    var normalize = Interface[propName];\n    if (normalize) {\n      this[propName] = normalize(nativeEvent);\n    } else {\n      if (propName === 'target') {\n        this.target = nativeEventTarget;\n      } else {\n        this[propName] = nativeEvent[propName];\n      }\n    }\n  }\n\n  var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;\n  if (defaultPrevented) {\n    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;\n  } else {\n    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;\n  }\n  this.isPropagationStopped = emptyFunction.thatReturnsFalse;\n}\n\nassign(SyntheticEvent.prototype, {\n\n  preventDefault: function () {\n    this.defaultPrevented = true;\n    var event = this.nativeEvent;\n    if (process.env.NODE_ENV !== 'production') {\n      process.env.NODE_ENV !== 'production' ? warning(event, 'This synthetic event is reused for performance reasons. If you\\'re ' + 'seeing this, you\\'re calling `preventDefault` on a ' + 'released/nullified synthetic event. This is a no-op. See ' + 'https://fb.me/react-event-pooling for more information.') : undefined;\n    }\n    if (!event) {\n      return;\n    }\n\n    if (event.preventDefault) {\n      event.preventDefault();\n    } else {\n      event.returnValue = false;\n    }\n    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;\n  },\n\n  stopPropagation: function () {\n    var event = this.nativeEvent;\n    if (process.env.NODE_ENV !== 'production') {\n      process.env.NODE_ENV !== 'production' ? warning(event, 'This synthetic event is reused for performance reasons. If you\\'re ' + 'seeing this, you\\'re calling `stopPropagation` on a ' + 'released/nullified synthetic event. This is a no-op. See ' + 'https://fb.me/react-event-pooling for more information.') : undefined;\n    }\n    if (!event) {\n      return;\n    }\n\n    if (event.stopPropagation) {\n      event.stopPropagation();\n    } else {\n      event.cancelBubble = true;\n    }\n    this.isPropagationStopped = emptyFunction.thatReturnsTrue;\n  },\n\n  /**\n   * We release all dispatched `SyntheticEvent`s after each event loop, adding\n   * them back into the pool. This allows a way to hold onto a reference that\n   * won't be added back into the pool.\n   */\n  persist: function () {\n    this.isPersistent = emptyFunction.thatReturnsTrue;\n  },\n\n  /**\n   * Checks if this event should be released back into the pool.\n   *\n   * @return {boolean} True if this should not be released, false otherwise.\n   */\n  isPersistent: emptyFunction.thatReturnsFalse,\n\n  /**\n   * `PooledClass` looks for `destructor` on each instance it releases.\n   */\n  destructor: function () {\n    var Interface = this.constructor.Interface;\n    for (var propName in Interface) {\n      this[propName] = null;\n    }\n    this.dispatchConfig = null;\n    this.dispatchMarker = null;\n    this.nativeEvent = null;\n  }\n\n});\n\nSyntheticEvent.Interface = EventInterface;\n\n/**\n * Helper to reduce boilerplate when creating subclasses.\n *\n * @param {function} Class\n * @param {?object} Interface\n */\nSyntheticEvent.augmentClass = function (Class, Interface) {\n  var Super = this;\n\n  var prototype = Object.create(Super.prototype);\n  assign(prototype, Class.prototype);\n  Class.prototype = prototype;\n  Class.prototype.constructor = Class;\n\n  Class.Interface = assign({}, Super.Interface, Interface);\n  Class.augmentClass = Super.augmentClass;\n\n  PooledClass.addPoolingTo(Class, PooledClass.fourArgumentPooler);\n};\n\nPooledClass.addPoolingTo(SyntheticEvent, PooledClass.fourArgumentPooler);\n\nmodule.exports = SyntheticEvent;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule SyntheticInputEvent\n * @typechecks static-only\n */\n\n'use strict';\n\nvar SyntheticEvent = require('./SyntheticEvent');\n\n/**\n * @interface Event\n * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105\n *      /#events-inputevents\n */\nvar InputEventInterface = {\n  data: null\n};\n\n/**\n * @param {object} dispatchConfig Configuration used to dispatch this event.\n * @param {string} dispatchMarker Marker identifying the event target.\n * @param {object} nativeEvent Native browser event.\n * @extends {SyntheticUIEvent}\n */\nfunction SyntheticInputEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {\n  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);\n}\n\nSyntheticEvent.augmentClass(SyntheticInputEvent, InputEventInterface);\n\nmodule.exports = SyntheticInputEvent;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ChangeEventPlugin\n */\n\n'use strict';\n\nvar EventConstants = require('./EventConstants');\nvar EventPluginHub = require('./EventPluginHub');\nvar EventPropagators = require('./EventPropagators');\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\nvar ReactUpdates = require('./ReactUpdates');\nvar SyntheticEvent = require('./SyntheticEvent');\n\nvar getEventTarget = require('./getEventTarget');\nvar isEventSupported = require('./isEventSupported');\nvar isTextInputElement = require('./isTextInputElement');\nvar keyOf = require('fbjs/lib/keyOf');\n\nvar topLevelTypes = EventConstants.topLevelTypes;\n\nvar eventTypes = {\n  change: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onChange: null }),\n      captured: keyOf({ onChangeCapture: null })\n    },\n    dependencies: [topLevelTypes.topBlur, topLevelTypes.topChange, topLevelTypes.topClick, topLevelTypes.topFocus, topLevelTypes.topInput, topLevelTypes.topKeyDown, topLevelTypes.topKeyUp, topLevelTypes.topSelectionChange]\n  }\n};\n\n/**\n * For IE shims\n */\nvar activeElement = null;\nvar activeElementID = null;\nvar activeElementValue = null;\nvar activeElementValueProp = null;\n\n/**\n * SECTION: handle `change` event\n */\nfunction shouldUseChangeEvent(elem) {\n  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();\n  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';\n}\n\nvar doesChangeEventBubble = false;\nif (ExecutionEnvironment.canUseDOM) {\n  // See `handleChange` comment below\n  doesChangeEventBubble = isEventSupported('change') && (!('documentMode' in document) || document.documentMode > 8);\n}\n\nfunction manualDispatchChangeEvent(nativeEvent) {\n  var event = SyntheticEvent.getPooled(eventTypes.change, activeElementID, nativeEvent, getEventTarget(nativeEvent));\n  EventPropagators.accumulateTwoPhaseDispatches(event);\n\n  // If change and propertychange bubbled, we'd just bind to it like all the\n  // other events and have it go through ReactBrowserEventEmitter. Since it\n  // doesn't, we manually listen for the events and so we have to enqueue and\n  // process the abstract event manually.\n  //\n  // Batching is necessary here in order to ensure that all event handlers run\n  // before the next rerender (including event handlers attached to ancestor\n  // elements instead of directly on the input). Without this, controlled\n  // components don't work properly in conjunction with event bubbling because\n  // the component is rerendered and the value reverted before all the event\n  // handlers can run. See https://github.com/facebook/react/issues/708.\n  ReactUpdates.batchedUpdates(runEventInBatch, event);\n}\n\nfunction runEventInBatch(event) {\n  EventPluginHub.enqueueEvents(event);\n  EventPluginHub.processEventQueue(false);\n}\n\nfunction startWatchingForChangeEventIE8(target, targetID) {\n  activeElement = target;\n  activeElementID = targetID;\n  activeElement.attachEvent('onchange', manualDispatchChangeEvent);\n}\n\nfunction stopWatchingForChangeEventIE8() {\n  if (!activeElement) {\n    return;\n  }\n  activeElement.detachEvent('onchange', manualDispatchChangeEvent);\n  activeElement = null;\n  activeElementID = null;\n}\n\nfunction getTargetIDForChangeEvent(topLevelType, topLevelTarget, topLevelTargetID) {\n  if (topLevelType === topLevelTypes.topChange) {\n    return topLevelTargetID;\n  }\n}\nfunction handleEventsForChangeEventIE8(topLevelType, topLevelTarget, topLevelTargetID) {\n  if (topLevelType === topLevelTypes.topFocus) {\n    // stopWatching() should be a noop here but we call it just in case we\n    // missed a blur event somehow.\n    stopWatchingForChangeEventIE8();\n    startWatchingForChangeEventIE8(topLevelTarget, topLevelTargetID);\n  } else if (topLevelType === topLevelTypes.topBlur) {\n    stopWatchingForChangeEventIE8();\n  }\n}\n\n/**\n * SECTION: handle `input` event\n */\nvar isInputEventSupported = false;\nif (ExecutionEnvironment.canUseDOM) {\n  // IE9 claims to support the input event but fails to trigger it when\n  // deleting text, so we ignore its input events\n  isInputEventSupported = isEventSupported('input') && (!('documentMode' in document) || document.documentMode > 9);\n}\n\n/**\n * (For old IE.) Replacement getter/setter for the `value` property that gets\n * set on the active element.\n */\nvar newValueProp = {\n  get: function () {\n    return activeElementValueProp.get.call(this);\n  },\n  set: function (val) {\n    // Cast to a string so we can do equality checks.\n    activeElementValue = '' + val;\n    activeElementValueProp.set.call(this, val);\n  }\n};\n\n/**\n * (For old IE.) Starts tracking propertychange events on the passed-in element\n * and override the value property so that we can distinguish user events from\n * value changes in JS.\n */\nfunction startWatchingForValueChange(target, targetID) {\n  activeElement = target;\n  activeElementID = targetID;\n  activeElementValue = target.value;\n  activeElementValueProp = Object.getOwnPropertyDescriptor(target.constructor.prototype, 'value');\n\n  // Not guarded in a canDefineProperty check: IE8 supports defineProperty only\n  // on DOM elements\n  Object.defineProperty(activeElement, 'value', newValueProp);\n  activeElement.attachEvent('onpropertychange', handlePropertyChange);\n}\n\n/**\n * (For old IE.) Removes the event listeners from the currently-tracked element,\n * if any exists.\n */\nfunction stopWatchingForValueChange() {\n  if (!activeElement) {\n    return;\n  }\n\n  // delete restores the original property definition\n  delete activeElement.value;\n  activeElement.detachEvent('onpropertychange', handlePropertyChange);\n\n  activeElement = null;\n  activeElementID = null;\n  activeElementValue = null;\n  activeElementValueProp = null;\n}\n\n/**\n * (For old IE.) Handles a propertychange event, sending a `change` event if\n * the value of the active element has changed.\n */\nfunction handlePropertyChange(nativeEvent) {\n  if (nativeEvent.propertyName !== 'value') {\n    return;\n  }\n  var value = nativeEvent.srcElement.value;\n  if (value === activeElementValue) {\n    return;\n  }\n  activeElementValue = value;\n\n  manualDispatchChangeEvent(nativeEvent);\n}\n\n/**\n * If a `change` event should be fired, returns the target's ID.\n */\nfunction getTargetIDForInputEvent(topLevelType, topLevelTarget, topLevelTargetID) {\n  if (topLevelType === topLevelTypes.topInput) {\n    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly\n    // what we want so fall through here and trigger an abstract event\n    return topLevelTargetID;\n  }\n}\n\n// For IE8 and IE9.\nfunction handleEventsForInputEventIE(topLevelType, topLevelTarget, topLevelTargetID) {\n  if (topLevelType === topLevelTypes.topFocus) {\n    // In IE8, we can capture almost all .value changes by adding a\n    // propertychange handler and looking for events with propertyName\n    // equal to 'value'\n    // In IE9, propertychange fires for most input events but is buggy and\n    // doesn't fire when text is deleted, but conveniently, selectionchange\n    // appears to fire in all of the remaining cases so we catch those and\n    // forward the event if the value has changed\n    // In either case, we don't want to call the event handler if the value\n    // is changed from JS so we redefine a setter for `.value` that updates\n    // our activeElementValue variable, allowing us to ignore those changes\n    //\n    // stopWatching() should be a noop here but we call it just in case we\n    // missed a blur event somehow.\n    stopWatchingForValueChange();\n    startWatchingForValueChange(topLevelTarget, topLevelTargetID);\n  } else if (topLevelType === topLevelTypes.topBlur) {\n    stopWatchingForValueChange();\n  }\n}\n\n// For IE8 and IE9.\nfunction getTargetIDForInputEventIE(topLevelType, topLevelTarget, topLevelTargetID) {\n  if (topLevelType === topLevelTypes.topSelectionChange || topLevelType === topLevelTypes.topKeyUp || topLevelType === topLevelTypes.topKeyDown) {\n    // On the selectionchange event, the target is just document which isn't\n    // helpful for us so just check activeElement instead.\n    //\n    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire\n    // propertychange on the first input event after setting `value` from a\n    // script and fires only keydown, keypress, keyup. Catching keyup usually\n    // gets it and catching keydown lets us fire an event for the first\n    // keystroke if user does a key repeat (it'll be a little delayed: right\n    // before the second keystroke). Other input methods (e.g., paste) seem to\n    // fire selectionchange normally.\n    if (activeElement && activeElement.value !== activeElementValue) {\n      activeElementValue = activeElement.value;\n      return activeElementID;\n    }\n  }\n}\n\n/**\n * SECTION: handle `click` event\n */\nfunction shouldUseClickEvent(elem) {\n  // Use the `click` event to detect changes to checkbox and radio inputs.\n  // This approach works across all browsers, whereas `change` does not fire\n  // until `blur` in IE8.\n  return elem.nodeName && elem.nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');\n}\n\nfunction getTargetIDForClickEvent(topLevelType, topLevelTarget, topLevelTargetID) {\n  if (topLevelType === topLevelTypes.topClick) {\n    return topLevelTargetID;\n  }\n}\n\n/**\n * This plugin creates an `onChange` event that normalizes change events\n * across form elements. This event fires at a time when it's possible to\n * change the element's value without seeing a flicker.\n *\n * Supported elements are:\n * - input (see `isTextInputElement`)\n * - textarea\n * - select\n */\nvar ChangeEventPlugin = {\n\n  eventTypes: eventTypes,\n\n  /**\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {DOMEventTarget} topLevelTarget The listening component root node.\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n   * @param {object} nativeEvent Native browser event.\n   * @return {*} An accumulation of synthetic events.\n   * @see {EventPluginHub.extractEvents}\n   */\n  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {\n\n    var getTargetIDFunc, handleEventFunc;\n    if (shouldUseChangeEvent(topLevelTarget)) {\n      if (doesChangeEventBubble) {\n        getTargetIDFunc = getTargetIDForChangeEvent;\n      } else {\n        handleEventFunc = handleEventsForChangeEventIE8;\n      }\n    } else if (isTextInputElement(topLevelTarget)) {\n      if (isInputEventSupported) {\n        getTargetIDFunc = getTargetIDForInputEvent;\n      } else {\n        getTargetIDFunc = getTargetIDForInputEventIE;\n        handleEventFunc = handleEventsForInputEventIE;\n      }\n    } else if (shouldUseClickEvent(topLevelTarget)) {\n      getTargetIDFunc = getTargetIDForClickEvent;\n    }\n\n    if (getTargetIDFunc) {\n      var targetID = getTargetIDFunc(topLevelType, topLevelTarget, topLevelTargetID);\n      if (targetID) {\n        var event = SyntheticEvent.getPooled(eventTypes.change, targetID, nativeEvent, nativeEventTarget);\n        event.type = 'change';\n        EventPropagators.accumulateTwoPhaseDispatches(event);\n        return event;\n      }\n    }\n\n    if (handleEventFunc) {\n      handleEventFunc(topLevelType, topLevelTarget, topLevelTargetID);\n    }\n  }\n\n};\n\nmodule.exports = ChangeEventPlugin;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule getEventTarget\n * @typechecks static-only\n */\n\n'use strict';\n\n/**\n * Gets the target node from a native browser event by accounting for\n * inconsistencies in browser DOM APIs.\n *\n * @param {object} nativeEvent Native browser event.\n * @return {DOMEventTarget} Target node.\n */\nfunction getEventTarget(nativeEvent) {\n  var target = nativeEvent.target || nativeEvent.srcElement || window;\n  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).\n  // @see http://www.quirksmode.org/js/events_properties.html\n  return target.nodeType === 3 ? target.parentNode : target;\n}\n\nmodule.exports = getEventTarget;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule isTextInputElement\n */\n\n'use strict';\n\n/**\n * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary\n */\nvar supportedInputTypes = {\n  'color': true,\n  'date': true,\n  'datetime': true,\n  'datetime-local': true,\n  'email': true,\n  'month': true,\n  'number': true,\n  'password': true,\n  'range': true,\n  'search': true,\n  'tel': true,\n  'text': true,\n  'time': true,\n  'url': true,\n  'week': true\n};\n\nfunction isTextInputElement(elem) {\n  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();\n  return nodeName && (nodeName === 'input' && supportedInputTypes[elem.type] || nodeName === 'textarea');\n}\n\nmodule.exports = isTextInputElement;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ClientReactRootIndex\n * @typechecks\n */\n\n'use strict';\n\nvar nextReactRootIndex = 0;\n\nvar ClientReactRootIndex = {\n  createReactRootIndex: function () {\n    return nextReactRootIndex++;\n  }\n};\n\nmodule.exports = ClientReactRootIndex;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule DefaultEventPluginOrder\n */\n\n'use strict';\n\nvar keyOf = require('fbjs/lib/keyOf');\n\n/**\n * Module that is injectable into `EventPluginHub`, that specifies a\n * deterministic ordering of `EventPlugin`s. A convenient way to reason about\n * plugins, without having to package every one of them. This is better than\n * having plugins be ordered in the same order that they are injected because\n * that ordering would be influenced by the packaging order.\n * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that\n * preventing default on events is convenient in `SimpleEventPlugin` handlers.\n */\nvar DefaultEventPluginOrder = [keyOf({ ResponderEventPlugin: null }), keyOf({ SimpleEventPlugin: null }), keyOf({ TapEventPlugin: null }), keyOf({ EnterLeaveEventPlugin: null }), keyOf({ ChangeEventPlugin: null }), keyOf({ SelectEventPlugin: null }), keyOf({ BeforeInputEventPlugin: null })];\n\nmodule.exports = DefaultEventPluginOrder;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule EnterLeaveEventPlugin\n * @typechecks static-only\n */\n\n'use strict';\n\nvar EventConstants = require('./EventConstants');\nvar EventPropagators = require('./EventPropagators');\nvar SyntheticMouseEvent = require('./SyntheticMouseEvent');\n\nvar ReactMount = require('./ReactMount');\nvar keyOf = require('fbjs/lib/keyOf');\n\nvar topLevelTypes = EventConstants.topLevelTypes;\nvar getFirstReactDOM = ReactMount.getFirstReactDOM;\n\nvar eventTypes = {\n  mouseEnter: {\n    registrationName: keyOf({ onMouseEnter: null }),\n    dependencies: [topLevelTypes.topMouseOut, topLevelTypes.topMouseOver]\n  },\n  mouseLeave: {\n    registrationName: keyOf({ onMouseLeave: null }),\n    dependencies: [topLevelTypes.topMouseOut, topLevelTypes.topMouseOver]\n  }\n};\n\nvar extractedEvents = [null, null];\n\nvar EnterLeaveEventPlugin = {\n\n  eventTypes: eventTypes,\n\n  /**\n   * For almost every interaction we care about, there will be both a top-level\n   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that\n   * we do not extract duplicate events. However, moving the mouse into the\n   * browser from outside will not fire a `mouseout` event. In this case, we use\n   * the `mouseover` top-level event.\n   *\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {DOMEventTarget} topLevelTarget The listening component root node.\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n   * @param {object} nativeEvent Native browser event.\n   * @return {*} An accumulation of synthetic events.\n   * @see {EventPluginHub.extractEvents}\n   */\n  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {\n    if (topLevelType === topLevelTypes.topMouseOver && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {\n      return null;\n    }\n    if (topLevelType !== topLevelTypes.topMouseOut && topLevelType !== topLevelTypes.topMouseOver) {\n      // Must not be a mouse in or mouse out - ignoring.\n      return null;\n    }\n\n    var win;\n    if (topLevelTarget.window === topLevelTarget) {\n      // `topLevelTarget` is probably a window object.\n      win = topLevelTarget;\n    } else {\n      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.\n      var doc = topLevelTarget.ownerDocument;\n      if (doc) {\n        win = doc.defaultView || doc.parentWindow;\n      } else {\n        win = window;\n      }\n    }\n\n    var from;\n    var to;\n    var fromID = '';\n    var toID = '';\n    if (topLevelType === topLevelTypes.topMouseOut) {\n      from = topLevelTarget;\n      fromID = topLevelTargetID;\n      to = getFirstReactDOM(nativeEvent.relatedTarget || nativeEvent.toElement);\n      if (to) {\n        toID = ReactMount.getID(to);\n      } else {\n        to = win;\n      }\n      to = to || win;\n    } else {\n      from = win;\n      to = topLevelTarget;\n      toID = topLevelTargetID;\n    }\n\n    if (from === to) {\n      // Nothing pertains to our managed components.\n      return null;\n    }\n\n    var leave = SyntheticMouseEvent.getPooled(eventTypes.mouseLeave, fromID, nativeEvent, nativeEventTarget);\n    leave.type = 'mouseleave';\n    leave.target = from;\n    leave.relatedTarget = to;\n\n    var enter = SyntheticMouseEvent.getPooled(eventTypes.mouseEnter, toID, nativeEvent, nativeEventTarget);\n    enter.type = 'mouseenter';\n    enter.target = to;\n    enter.relatedTarget = from;\n\n    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, fromID, toID);\n\n    extractedEvents[0] = leave;\n    extractedEvents[1] = enter;\n\n    return extractedEvents;\n  }\n\n};\n\nmodule.exports = EnterLeaveEventPlugin;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule SyntheticMouseEvent\n * @typechecks static-only\n */\n\n'use strict';\n\nvar SyntheticUIEvent = require('./SyntheticUIEvent');\nvar ViewportMetrics = require('./ViewportMetrics');\n\nvar getEventModifierState = require('./getEventModifierState');\n\n/**\n * @interface MouseEvent\n * @see http://www.w3.org/TR/DOM-Level-3-Events/\n */\nvar MouseEventInterface = {\n  screenX: null,\n  screenY: null,\n  clientX: null,\n  clientY: null,\n  ctrlKey: null,\n  shiftKey: null,\n  altKey: null,\n  metaKey: null,\n  getModifierState: getEventModifierState,\n  button: function (event) {\n    // Webkit, Firefox, IE9+\n    // which:  1 2 3\n    // button: 0 1 2 (standard)\n    var button = event.button;\n    if ('which' in event) {\n      return button;\n    }\n    // IE<9\n    // which:  undefined\n    // button: 0 0 0\n    // button: 1 4 2 (onmouseup)\n    return button === 2 ? 2 : button === 4 ? 1 : 0;\n  },\n  buttons: null,\n  relatedTarget: function (event) {\n    return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);\n  },\n  // \"Proprietary\" Interface.\n  pageX: function (event) {\n    return 'pageX' in event ? event.pageX : event.clientX + ViewportMetrics.currentScrollLeft;\n  },\n  pageY: function (event) {\n    return 'pageY' in event ? event.pageY : event.clientY + ViewportMetrics.currentScrollTop;\n  }\n};\n\n/**\n * @param {object} dispatchConfig Configuration used to dispatch this event.\n * @param {string} dispatchMarker Marker identifying the event target.\n * @param {object} nativeEvent Native browser event.\n * @extends {SyntheticUIEvent}\n */\nfunction SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {\n  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);\n}\n\nSyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);\n\nmodule.exports = SyntheticMouseEvent;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule SyntheticUIEvent\n * @typechecks static-only\n */\n\n'use strict';\n\nvar SyntheticEvent = require('./SyntheticEvent');\n\nvar getEventTarget = require('./getEventTarget');\n\n/**\n * @interface UIEvent\n * @see http://www.w3.org/TR/DOM-Level-3-Events/\n */\nvar UIEventInterface = {\n  view: function (event) {\n    if (event.view) {\n      return event.view;\n    }\n\n    var target = getEventTarget(event);\n    if (target != null && target.window === target) {\n      // target is a window object\n      return target;\n    }\n\n    var doc = target.ownerDocument;\n    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.\n    if (doc) {\n      return doc.defaultView || doc.parentWindow;\n    } else {\n      return window;\n    }\n  },\n  detail: function (event) {\n    return event.detail || 0;\n  }\n};\n\n/**\n * @param {object} dispatchConfig Configuration used to dispatch this event.\n * @param {string} dispatchMarker Marker identifying the event target.\n * @param {object} nativeEvent Native browser event.\n * @extends {SyntheticEvent}\n */\nfunction SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {\n  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);\n}\n\nSyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);\n\nmodule.exports = SyntheticUIEvent;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule getEventModifierState\n * @typechecks static-only\n */\n\n'use strict';\n\n/**\n * Translation from modifier key to the associated property in the event.\n * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers\n */\n\nvar modifierKeyToProp = {\n  'Alt': 'altKey',\n  'Control': 'ctrlKey',\n  'Meta': 'metaKey',\n  'Shift': 'shiftKey'\n};\n\n// IE8 does not implement getModifierState so we simply map it to the only\n// modifier keys exposed by the event itself, does not support Lock-keys.\n// Currently, all major browsers except Chrome seems to support Lock-keys.\nfunction modifierStateGetter(keyArg) {\n  var syntheticEvent = this;\n  var nativeEvent = syntheticEvent.nativeEvent;\n  if (nativeEvent.getModifierState) {\n    return nativeEvent.getModifierState(keyArg);\n  }\n  var keyProp = modifierKeyToProp[keyArg];\n  return keyProp ? !!nativeEvent[keyProp] : false;\n}\n\nfunction getEventModifierState(nativeEvent) {\n  return modifierStateGetter;\n}\n\nmodule.exports = getEventModifierState;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule HTMLDOMPropertyConfig\n */\n\n'use strict';\n\nvar DOMProperty = require('./DOMProperty');\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\n\nvar MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;\nvar MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;\nvar HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;\nvar HAS_SIDE_EFFECTS = DOMProperty.injection.HAS_SIDE_EFFECTS;\nvar HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;\nvar HAS_POSITIVE_NUMERIC_VALUE = DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;\nvar HAS_OVERLOADED_BOOLEAN_VALUE = DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;\n\nvar hasSVG;\nif (ExecutionEnvironment.canUseDOM) {\n  var implementation = document.implementation;\n  hasSVG = implementation && implementation.hasFeature && implementation.hasFeature('http://www.w3.org/TR/SVG11/feature#BasicStructure', '1.1');\n}\n\nvar HTMLDOMPropertyConfig = {\n  isCustomAttribute: RegExp.prototype.test.bind(/^(data|aria)-[a-z_][a-z\\d_.\\-]*$/),\n  Properties: {\n    /**\n     * Standard Properties\n     */\n    accept: null,\n    acceptCharset: null,\n    accessKey: null,\n    action: null,\n    allowFullScreen: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,\n    allowTransparency: MUST_USE_ATTRIBUTE,\n    alt: null,\n    async: HAS_BOOLEAN_VALUE,\n    autoComplete: null,\n    // autoFocus is polyfilled/normalized by AutoFocusUtils\n    // autoFocus: HAS_BOOLEAN_VALUE,\n    autoPlay: HAS_BOOLEAN_VALUE,\n    capture: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,\n    cellPadding: null,\n    cellSpacing: null,\n    charSet: MUST_USE_ATTRIBUTE,\n    challenge: MUST_USE_ATTRIBUTE,\n    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,\n    classID: MUST_USE_ATTRIBUTE,\n    // To set className on SVG elements, it's necessary to use .setAttribute;\n    // this works on HTML elements too in all browsers except IE8. Conveniently,\n    // IE8 doesn't support SVG and so we can simply use the attribute in\n    // browsers that support SVG and the property in browsers that don't,\n    // regardless of whether the element is HTML or SVG.\n    className: hasSVG ? MUST_USE_ATTRIBUTE : MUST_USE_PROPERTY,\n    cols: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,\n    colSpan: null,\n    content: null,\n    contentEditable: null,\n    contextMenu: MUST_USE_ATTRIBUTE,\n    controls: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,\n    coords: null,\n    crossOrigin: null,\n    data: null, // For `<object />` acts as `src`.\n    dateTime: MUST_USE_ATTRIBUTE,\n    'default': HAS_BOOLEAN_VALUE,\n    defer: HAS_BOOLEAN_VALUE,\n    dir: null,\n    disabled: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,\n    download: HAS_OVERLOADED_BOOLEAN_VALUE,\n    draggable: null,\n    encType: null,\n    form: MUST_USE_ATTRIBUTE,\n    formAction: MUST_USE_ATTRIBUTE,\n    formEncType: MUST_USE_ATTRIBUTE,\n    formMethod: MUST_USE_ATTRIBUTE,\n    formNoValidate: HAS_BOOLEAN_VALUE,\n    formTarget: MUST_USE_ATTRIBUTE,\n    frameBorder: MUST_USE_ATTRIBUTE,\n    headers: null,\n    height: MUST_USE_ATTRIBUTE,\n    hidden: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,\n    high: null,\n    href: null,\n    hrefLang: null,\n    htmlFor: null,\n    httpEquiv: null,\n    icon: null,\n    id: MUST_USE_PROPERTY,\n    inputMode: MUST_USE_ATTRIBUTE,\n    integrity: null,\n    is: MUST_USE_ATTRIBUTE,\n    keyParams: MUST_USE_ATTRIBUTE,\n    keyType: MUST_USE_ATTRIBUTE,\n    kind: null,\n    label: null,\n    lang: null,\n    list: MUST_USE_ATTRIBUTE,\n    loop: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,\n    low: null,\n    manifest: MUST_USE_ATTRIBUTE,\n    marginHeight: null,\n    marginWidth: null,\n    max: null,\n    maxLength: MUST_USE_ATTRIBUTE,\n    media: MUST_USE_ATTRIBUTE,\n    mediaGroup: null,\n    method: null,\n    min: null,\n    minLength: MUST_USE_ATTRIBUTE,\n    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,\n    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,\n    name: null,\n    nonce: MUST_USE_ATTRIBUTE,\n    noValidate: HAS_BOOLEAN_VALUE,\n    open: HAS_BOOLEAN_VALUE,\n    optimum: null,\n    pattern: null,\n    placeholder: null,\n    poster: null,\n    preload: null,\n    radioGroup: null,\n    readOnly: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,\n    rel: null,\n    required: HAS_BOOLEAN_VALUE,\n    reversed: HAS_BOOLEAN_VALUE,\n    role: MUST_USE_ATTRIBUTE,\n    rows: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,\n    rowSpan: null,\n    sandbox: null,\n    scope: null,\n    scoped: HAS_BOOLEAN_VALUE,\n    scrolling: null,\n    seamless: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,\n    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,\n    shape: null,\n    size: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,\n    sizes: MUST_USE_ATTRIBUTE,\n    span: HAS_POSITIVE_NUMERIC_VALUE,\n    spellCheck: null,\n    src: null,\n    srcDoc: MUST_USE_PROPERTY,\n    srcLang: null,\n    srcSet: MUST_USE_ATTRIBUTE,\n    start: HAS_NUMERIC_VALUE,\n    step: null,\n    style: null,\n    summary: null,\n    tabIndex: null,\n    target: null,\n    title: null,\n    type: null,\n    useMap: null,\n    value: MUST_USE_PROPERTY | HAS_SIDE_EFFECTS,\n    width: MUST_USE_ATTRIBUTE,\n    wmode: MUST_USE_ATTRIBUTE,\n    wrap: null,\n\n    /**\n     * RDFa Properties\n     */\n    about: MUST_USE_ATTRIBUTE,\n    datatype: MUST_USE_ATTRIBUTE,\n    inlist: MUST_USE_ATTRIBUTE,\n    prefix: MUST_USE_ATTRIBUTE,\n    // property is also supported for OpenGraph in meta tags.\n    property: MUST_USE_ATTRIBUTE,\n    resource: MUST_USE_ATTRIBUTE,\n    'typeof': MUST_USE_ATTRIBUTE,\n    vocab: MUST_USE_ATTRIBUTE,\n\n    /**\n     * Non-standard Properties\n     */\n    // autoCapitalize and autoCorrect are supported in Mobile Safari for\n    // keyboard hints.\n    autoCapitalize: MUST_USE_ATTRIBUTE,\n    autoCorrect: MUST_USE_ATTRIBUTE,\n    // autoSave allows WebKit/Blink to persist values of input fields on page reloads\n    autoSave: null,\n    // color is for Safari mask-icon link\n    color: null,\n    // itemProp, itemScope, itemType are for\n    // Microdata support. See http://schema.org/docs/gs.html\n    itemProp: MUST_USE_ATTRIBUTE,\n    itemScope: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,\n    itemType: MUST_USE_ATTRIBUTE,\n    // itemID and itemRef are for Microdata support as well but\n    // only specified in the the WHATWG spec document. See\n    // https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api\n    itemID: MUST_USE_ATTRIBUTE,\n    itemRef: MUST_USE_ATTRIBUTE,\n    // results show looking glass icon and recent searches on input\n    // search fields in WebKit/Blink\n    results: null,\n    // IE-only attribute that specifies security restrictions on an iframe\n    // as an alternative to the sandbox attribute on IE<10\n    security: MUST_USE_ATTRIBUTE,\n    // IE-only attribute that controls focus behavior\n    unselectable: MUST_USE_ATTRIBUTE\n  },\n  DOMAttributeNames: {\n    acceptCharset: 'accept-charset',\n    className: 'class',\n    htmlFor: 'for',\n    httpEquiv: 'http-equiv'\n  },\n  DOMPropertyNames: {\n    autoComplete: 'autocomplete',\n    autoFocus: 'autofocus',\n    autoPlay: 'autoplay',\n    autoSave: 'autosave',\n    // `encoding` is equivalent to `enctype`, IE8 lacks an `enctype` setter.\n    // http://www.w3.org/TR/html5/forms.html#dom-fs-encoding\n    encType: 'encoding',\n    hrefLang: 'hreflang',\n    radioGroup: 'radiogroup',\n    spellCheck: 'spellcheck',\n    srcDoc: 'srcdoc',\n    srcSet: 'srcset'\n  }\n};\n\nmodule.exports = HTMLDOMPropertyConfig;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactBrowserComponentMixin\n */\n\n'use strict';\n\nvar ReactInstanceMap = require('./ReactInstanceMap');\n\nvar findDOMNode = require('./findDOMNode');\nvar warning = require('fbjs/lib/warning');\n\nvar didWarnKey = '_getDOMNodeDidWarn';\n\nvar ReactBrowserComponentMixin = {\n  /**\n   * Returns the DOM node rendered by this component.\n   *\n   * @return {DOMElement} The root node of this component.\n   * @final\n   * @protected\n   */\n  getDOMNode: function () {\n    process.env.NODE_ENV !== 'production' ? warning(this.constructor[didWarnKey], '%s.getDOMNode(...) is deprecated. Please use ' + 'ReactDOM.findDOMNode(instance) instead.', ReactInstanceMap.get(this).getName() || this.tagName || 'Unknown') : undefined;\n    this.constructor[didWarnKey] = true;\n    return findDOMNode(this);\n  }\n};\n\nmodule.exports = ReactBrowserComponentMixin;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule findDOMNode\n * @typechecks static-only\n */\n\n'use strict';\n\nvar ReactCurrentOwner = require('./ReactCurrentOwner');\nvar ReactInstanceMap = require('./ReactInstanceMap');\nvar ReactMount = require('./ReactMount');\n\nvar invariant = require('fbjs/lib/invariant');\nvar warning = require('fbjs/lib/warning');\n\n/**\n * Returns the DOM node rendered by this element.\n *\n * @param {ReactComponent|DOMElement} componentOrElement\n * @return {?DOMElement} The root node of this element.\n */\nfunction findDOMNode(componentOrElement) {\n  if (process.env.NODE_ENV !== 'production') {\n    var owner = ReactCurrentOwner.current;\n    if (owner !== null) {\n      process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing getDOMNode or findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : undefined;\n      owner._warnedAboutRefsInRender = true;\n    }\n  }\n  if (componentOrElement == null) {\n    return null;\n  }\n  if (componentOrElement.nodeType === 1) {\n    return componentOrElement;\n  }\n  if (ReactInstanceMap.has(componentOrElement)) {\n    return ReactMount.getNodeFromInstance(componentOrElement);\n  }\n  !(componentOrElement.render == null || typeof componentOrElement.render !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'findDOMNode was called on an unmounted component.') : invariant(false) : undefined;\n  !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element appears to be neither ReactComponent nor DOMNode (keys: %s)', Object.keys(componentOrElement)) : invariant(false) : undefined;\n}\n\nmodule.exports = findDOMNode;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDefaultBatchingStrategy\n */\n\n'use strict';\n\nvar ReactUpdates = require('./ReactUpdates');\nvar Transaction = require('./Transaction');\n\nvar assign = require('./Object.assign');\nvar emptyFunction = require('fbjs/lib/emptyFunction');\n\nvar RESET_BATCHED_UPDATES = {\n  initialize: emptyFunction,\n  close: function () {\n    ReactDefaultBatchingStrategy.isBatchingUpdates = false;\n  }\n};\n\nvar FLUSH_BATCHED_UPDATES = {\n  initialize: emptyFunction,\n  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)\n};\n\nvar TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];\n\nfunction ReactDefaultBatchingStrategyTransaction() {\n  this.reinitializeTransaction();\n}\n\nassign(ReactDefaultBatchingStrategyTransaction.prototype, Transaction.Mixin, {\n  getTransactionWrappers: function () {\n    return TRANSACTION_WRAPPERS;\n  }\n});\n\nvar transaction = new ReactDefaultBatchingStrategyTransaction();\n\nvar ReactDefaultBatchingStrategy = {\n  isBatchingUpdates: false,\n\n  /**\n   * Call the provided function in a context within which calls to `setState`\n   * and friends are batched such that components aren't updated unnecessarily.\n   */\n  batchedUpdates: function (callback, a, b, c, d, e) {\n    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;\n\n    ReactDefaultBatchingStrategy.isBatchingUpdates = true;\n\n    // The code is written this way to avoid extra allocations\n    if (alreadyBatchingUpdates) {\n      callback(a, b, c, d, e);\n    } else {\n      transaction.perform(callback, null, a, b, c, d, e);\n    }\n  }\n};\n\nmodule.exports = ReactDefaultBatchingStrategy;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMComponent\n * @typechecks static-only\n */\n\n/* global hasOwnProperty:true */\n\n'use strict';\n\nvar AutoFocusUtils = require('./AutoFocusUtils');\nvar CSSPropertyOperations = require('./CSSPropertyOperations');\nvar DOMProperty = require('./DOMProperty');\nvar DOMPropertyOperations = require('./DOMPropertyOperations');\nvar EventConstants = require('./EventConstants');\nvar ReactBrowserEventEmitter = require('./ReactBrowserEventEmitter');\nvar ReactComponentBrowserEnvironment = require('./ReactComponentBrowserEnvironment');\nvar ReactDOMButton = require('./ReactDOMButton');\nvar ReactDOMInput = require('./ReactDOMInput');\nvar ReactDOMOption = require('./ReactDOMOption');\nvar ReactDOMSelect = require('./ReactDOMSelect');\nvar ReactDOMTextarea = require('./ReactDOMTextarea');\nvar ReactMount = require('./ReactMount');\nvar ReactMultiChild = require('./ReactMultiChild');\nvar ReactPerf = require('./ReactPerf');\nvar ReactUpdateQueue = require('./ReactUpdateQueue');\n\nvar assign = require('./Object.assign');\nvar canDefineProperty = require('./canDefineProperty');\nvar escapeTextContentForBrowser = require('./escapeTextContentForBrowser');\nvar invariant = require('fbjs/lib/invariant');\nvar isEventSupported = require('./isEventSupported');\nvar keyOf = require('fbjs/lib/keyOf');\nvar setInnerHTML = require('./setInnerHTML');\nvar setTextContent = require('./setTextContent');\nvar shallowEqual = require('fbjs/lib/shallowEqual');\nvar validateDOMNesting = require('./validateDOMNesting');\nvar warning = require('fbjs/lib/warning');\n\nvar deleteListener = ReactBrowserEventEmitter.deleteListener;\nvar listenTo = ReactBrowserEventEmitter.listenTo;\nvar registrationNameModules = ReactBrowserEventEmitter.registrationNameModules;\n\n// For quickly matching children type, to test if can be treated as content.\nvar CONTENT_TYPES = { 'string': true, 'number': true };\n\nvar CHILDREN = keyOf({ children: null });\nvar STYLE = keyOf({ style: null });\nvar HTML = keyOf({ __html: null });\n\nvar ELEMENT_NODE_TYPE = 1;\n\nfunction getDeclarationErrorAddendum(internalInstance) {\n  if (internalInstance) {\n    var owner = internalInstance._currentElement._owner || null;\n    if (owner) {\n      var name = owner.getName();\n      if (name) {\n        return ' This DOM node was rendered by `' + name + '`.';\n      }\n    }\n  }\n  return '';\n}\n\nvar legacyPropsDescriptor;\nif (process.env.NODE_ENV !== 'production') {\n  legacyPropsDescriptor = {\n    props: {\n      enumerable: false,\n      get: function () {\n        var component = this._reactInternalComponent;\n        process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .props of a DOM node; instead, ' + 'recreate the props as `render` did originally or read the DOM ' + 'properties/attributes directly from this node (e.g., ' + 'this.refs.box.className).%s', getDeclarationErrorAddendum(component)) : undefined;\n        return component._currentElement.props;\n      }\n    }\n  };\n}\n\nfunction legacyGetDOMNode() {\n  if (process.env.NODE_ENV !== 'production') {\n    var component = this._reactInternalComponent;\n    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .getDOMNode() of a DOM node; ' + 'instead, use the node directly.%s', getDeclarationErrorAddendum(component)) : undefined;\n  }\n  return this;\n}\n\nfunction legacyIsMounted() {\n  var component = this._reactInternalComponent;\n  if (process.env.NODE_ENV !== 'production') {\n    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .isMounted() of a DOM node.%s', getDeclarationErrorAddendum(component)) : undefined;\n  }\n  return !!component;\n}\n\nfunction legacySetStateEtc() {\n  if (process.env.NODE_ENV !== 'production') {\n    var component = this._reactInternalComponent;\n    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .setState(), .replaceState(), or ' + '.forceUpdate() of a DOM node. This is a no-op.%s', getDeclarationErrorAddendum(component)) : undefined;\n  }\n}\n\nfunction legacySetProps(partialProps, callback) {\n  var component = this._reactInternalComponent;\n  if (process.env.NODE_ENV !== 'production') {\n    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .setProps() of a DOM node. ' + 'Instead, call ReactDOM.render again at the top level.%s', getDeclarationErrorAddendum(component)) : undefined;\n  }\n  if (!component) {\n    return;\n  }\n  ReactUpdateQueue.enqueueSetPropsInternal(component, partialProps);\n  if (callback) {\n    ReactUpdateQueue.enqueueCallbackInternal(component, callback);\n  }\n}\n\nfunction legacyReplaceProps(partialProps, callback) {\n  var component = this._reactInternalComponent;\n  if (process.env.NODE_ENV !== 'production') {\n    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .replaceProps() of a DOM node. ' + 'Instead, call ReactDOM.render again at the top level.%s', getDeclarationErrorAddendum(component)) : undefined;\n  }\n  if (!component) {\n    return;\n  }\n  ReactUpdateQueue.enqueueReplacePropsInternal(component, partialProps);\n  if (callback) {\n    ReactUpdateQueue.enqueueCallbackInternal(component, callback);\n  }\n}\n\nfunction friendlyStringify(obj) {\n  if (typeof obj === 'object') {\n    if (Array.isArray(obj)) {\n      return '[' + obj.map(friendlyStringify).join(', ') + ']';\n    } else {\n      var pairs = [];\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var keyEscaped = /^[a-z$_][\\w$_]*$/i.test(key) ? key : JSON.stringify(key);\n          pairs.push(keyEscaped + ': ' + friendlyStringify(obj[key]));\n        }\n      }\n      return '{' + pairs.join(', ') + '}';\n    }\n  } else if (typeof obj === 'string') {\n    return JSON.stringify(obj);\n  } else if (typeof obj === 'function') {\n    return '[function object]';\n  }\n  // Differs from JSON.stringify in that undefined becauses undefined and that\n  // inf and nan don't become null\n  return String(obj);\n}\n\nvar styleMutationWarning = {};\n\nfunction checkAndWarnForMutatedStyle(style1, style2, component) {\n  if (style1 == null || style2 == null) {\n    return;\n  }\n  if (shallowEqual(style1, style2)) {\n    return;\n  }\n\n  var componentName = component._tag;\n  var owner = component._currentElement._owner;\n  var ownerName;\n  if (owner) {\n    ownerName = owner.getName();\n  }\n\n  var hash = ownerName + '|' + componentName;\n\n  if (styleMutationWarning.hasOwnProperty(hash)) {\n    return;\n  }\n\n  styleMutationWarning[hash] = true;\n\n  process.env.NODE_ENV !== 'production' ? warning(false, '`%s` was passed a style object that has previously been mutated. ' + 'Mutating `style` is deprecated. Consider cloning it beforehand. Check ' + 'the `render` %s. Previous style: %s. Mutated style: %s.', componentName, owner ? 'of `' + ownerName + '`' : 'using <' + componentName + '>', friendlyStringify(style1), friendlyStringify(style2)) : undefined;\n}\n\n/**\n * @param {object} component\n * @param {?object} props\n */\nfunction assertValidProps(component, props) {\n  if (!props) {\n    return;\n  }\n  // Note the use of `==` which checks for null or undefined.\n  if (process.env.NODE_ENV !== 'production') {\n    if (voidElementTags[component._tag]) {\n      process.env.NODE_ENV !== 'production' ? warning(props.children == null && props.dangerouslySetInnerHTML == null, '%s is a void element tag and must not have `children` or ' + 'use `props.dangerouslySetInnerHTML`.%s', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : undefined;\n    }\n  }\n  if (props.dangerouslySetInnerHTML != null) {\n    !(props.children == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.') : invariant(false) : undefined;\n    !(typeof props.dangerouslySetInnerHTML === 'object' && HTML in props.dangerouslySetInnerHTML) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. ' + 'Please visit https://fb.me/react-invariant-dangerously-set-inner-html ' + 'for more information.') : invariant(false) : undefined;\n  }\n  if (process.env.NODE_ENV !== 'production') {\n    process.env.NODE_ENV !== 'production' ? warning(props.innerHTML == null, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.') : undefined;\n    process.env.NODE_ENV !== 'production' ? warning(!props.contentEditable || props.children == null, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.') : undefined;\n  }\n  !(props.style == null || typeof props.style === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'The `style` prop expects a mapping from style properties to values, ' + 'not a string. For example, style={{marginRight: spacing + \\'em\\'}} when ' + 'using JSX.%s', getDeclarationErrorAddendum(component)) : invariant(false) : undefined;\n}\n\nfunction enqueuePutListener(id, registrationName, listener, transaction) {\n  if (process.env.NODE_ENV !== 'production') {\n    // IE8 has no API for event capturing and the `onScroll` event doesn't\n    // bubble.\n    process.env.NODE_ENV !== 'production' ? warning(registrationName !== 'onScroll' || isEventSupported('scroll', true), 'This browser doesn\\'t support the `onScroll` event') : undefined;\n  }\n  var container = ReactMount.findReactContainerForID(id);\n  if (container) {\n    var doc = container.nodeType === ELEMENT_NODE_TYPE ? container.ownerDocument : container;\n    listenTo(registrationName, doc);\n  }\n  transaction.getReactMountReady().enqueue(putListener, {\n    id: id,\n    registrationName: registrationName,\n    listener: listener\n  });\n}\n\nfunction putListener() {\n  var listenerToPut = this;\n  ReactBrowserEventEmitter.putListener(listenerToPut.id, listenerToPut.registrationName, listenerToPut.listener);\n}\n\n// There are so many media events, it makes sense to just\n// maintain a list rather than create a `trapBubbledEvent` for each\nvar mediaEvents = {\n  topAbort: 'abort',\n  topCanPlay: 'canplay',\n  topCanPlayThrough: 'canplaythrough',\n  topDurationChange: 'durationchange',\n  topEmptied: 'emptied',\n  topEncrypted: 'encrypted',\n  topEnded: 'ended',\n  topError: 'error',\n  topLoadedData: 'loadeddata',\n  topLoadedMetadata: 'loadedmetadata',\n  topLoadStart: 'loadstart',\n  topPause: 'pause',\n  topPlay: 'play',\n  topPlaying: 'playing',\n  topProgress: 'progress',\n  topRateChange: 'ratechange',\n  topSeeked: 'seeked',\n  topSeeking: 'seeking',\n  topStalled: 'stalled',\n  topSuspend: 'suspend',\n  topTimeUpdate: 'timeupdate',\n  topVolumeChange: 'volumechange',\n  topWaiting: 'waiting'\n};\n\nfunction trapBubbledEventsLocal() {\n  var inst = this;\n  // If a component renders to null or if another component fatals and causes\n  // the state of the tree to be corrupted, `node` here can be null.\n  !inst._rootNodeID ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Must be mounted to trap events') : invariant(false) : undefined;\n  var node = ReactMount.getNode(inst._rootNodeID);\n  !node ? process.env.NODE_ENV !== 'production' ? invariant(false, 'trapBubbledEvent(...): Requires node to be rendered.') : invariant(false) : undefined;\n\n  switch (inst._tag) {\n    case 'iframe':\n      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load', node)];\n      break;\n    case 'video':\n    case 'audio':\n\n      inst._wrapperState.listeners = [];\n      // create listener for each media event\n      for (var event in mediaEvents) {\n        if (mediaEvents.hasOwnProperty(event)) {\n          inst._wrapperState.listeners.push(ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes[event], mediaEvents[event], node));\n        }\n      }\n\n      break;\n    case 'img':\n      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topError, 'error', node), ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load', node)];\n      break;\n    case 'form':\n      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topReset, 'reset', node), ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topSubmit, 'submit', node)];\n      break;\n  }\n}\n\nfunction mountReadyInputWrapper() {\n  ReactDOMInput.mountReadyWrapper(this);\n}\n\nfunction postUpdateSelectWrapper() {\n  ReactDOMSelect.postUpdateWrapper(this);\n}\n\n// For HTML, certain tags should omit their close tag. We keep a whitelist for\n// those special cased tags.\n\nvar omittedCloseTags = {\n  'area': true,\n  'base': true,\n  'br': true,\n  'col': true,\n  'embed': true,\n  'hr': true,\n  'img': true,\n  'input': true,\n  'keygen': true,\n  'link': true,\n  'meta': true,\n  'param': true,\n  'source': true,\n  'track': true,\n  'wbr': true\n};\n\n// NOTE: menuitem's close tag should be omitted, but that causes problems.\nvar newlineEatingTags = {\n  'listing': true,\n  'pre': true,\n  'textarea': true\n};\n\n// For HTML, certain tags cannot have children. This has the same purpose as\n// `omittedCloseTags` except that `menuitem` should still have its closing tag.\n\nvar voidElementTags = assign({\n  'menuitem': true\n}, omittedCloseTags);\n\n// We accept any tag to be rendered but since this gets injected into arbitrary\n// HTML, we want to make sure that it's a safe tag.\n// http://www.w3.org/TR/REC-xml/#NT-Name\n\nvar VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\\.\\-\\d]*$/; // Simplified subset\nvar validatedTagCache = {};\nvar hasOwnProperty = ({}).hasOwnProperty;\n\nfunction validateDangerousTag(tag) {\n  if (!hasOwnProperty.call(validatedTagCache, tag)) {\n    !VALID_TAG_REGEX.test(tag) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Invalid tag: %s', tag) : invariant(false) : undefined;\n    validatedTagCache[tag] = true;\n  }\n}\n\nfunction processChildContextDev(context, inst) {\n  // Pass down our tag name to child components for validation purposes\n  context = assign({}, context);\n  var info = context[validateDOMNesting.ancestorInfoContextKey];\n  context[validateDOMNesting.ancestorInfoContextKey] = validateDOMNesting.updatedAncestorInfo(info, inst._tag, inst);\n  return context;\n}\n\nfunction isCustomComponent(tagName, props) {\n  return tagName.indexOf('-') >= 0 || props.is != null;\n}\n\n/**\n * Creates a new React class that is idempotent and capable of containing other\n * React components. It accepts event listeners and DOM properties that are\n * valid according to `DOMProperty`.\n *\n *  - Event listeners: `onClick`, `onMouseDown`, etc.\n *  - DOM properties: `className`, `name`, `title`, etc.\n *\n * The `style` property functions differently from the DOM API. It accepts an\n * object mapping of style properties to values.\n *\n * @constructor ReactDOMComponent\n * @extends ReactMultiChild\n */\nfunction ReactDOMComponent(tag) {\n  validateDangerousTag(tag);\n  this._tag = tag.toLowerCase();\n  this._renderedChildren = null;\n  this._previousStyle = null;\n  this._previousStyleCopy = null;\n  this._rootNodeID = null;\n  this._wrapperState = null;\n  this._topLevelWrapper = null;\n  this._nodeWithLegacyProperties = null;\n  if (process.env.NODE_ENV !== 'production') {\n    this._unprocessedContextDev = null;\n    this._processedContextDev = null;\n  }\n}\n\nReactDOMComponent.displayName = 'ReactDOMComponent';\n\nReactDOMComponent.Mixin = {\n\n  construct: function (element) {\n    this._currentElement = element;\n  },\n\n  /**\n   * Generates root tag markup then recurses. This method has side effects and\n   * is not idempotent.\n   *\n   * @internal\n   * @param {string} rootID The root DOM ID for this node.\n   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction\n   * @param {object} context\n   * @return {string} The computed markup.\n   */\n  mountComponent: function (rootID, transaction, context) {\n    this._rootNodeID = rootID;\n\n    var props = this._currentElement.props;\n\n    switch (this._tag) {\n      case 'iframe':\n      case 'img':\n      case 'form':\n      case 'video':\n      case 'audio':\n        this._wrapperState = {\n          listeners: null\n        };\n        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);\n        break;\n      case 'button':\n        props = ReactDOMButton.getNativeProps(this, props, context);\n        break;\n      case 'input':\n        ReactDOMInput.mountWrapper(this, props, context);\n        props = ReactDOMInput.getNativeProps(this, props, context);\n        break;\n      case 'option':\n        ReactDOMOption.mountWrapper(this, props, context);\n        props = ReactDOMOption.getNativeProps(this, props, context);\n        break;\n      case 'select':\n        ReactDOMSelect.mountWrapper(this, props, context);\n        props = ReactDOMSelect.getNativeProps(this, props, context);\n        context = ReactDOMSelect.processChildContext(this, props, context);\n        break;\n      case 'textarea':\n        ReactDOMTextarea.mountWrapper(this, props, context);\n        props = ReactDOMTextarea.getNativeProps(this, props, context);\n        break;\n    }\n\n    assertValidProps(this, props);\n    if (process.env.NODE_ENV !== 'production') {\n      if (context[validateDOMNesting.ancestorInfoContextKey]) {\n        validateDOMNesting(this._tag, this, context[validateDOMNesting.ancestorInfoContextKey]);\n      }\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      this._unprocessedContextDev = context;\n      this._processedContextDev = processChildContextDev(context, this);\n      context = this._processedContextDev;\n    }\n\n    var mountImage;\n    if (transaction.useCreateElement) {\n      var ownerDocument = context[ReactMount.ownerDocumentContextKey];\n      var el = ownerDocument.createElement(this._currentElement.type);\n      DOMPropertyOperations.setAttributeForID(el, this._rootNodeID);\n      // Populate node cache\n      ReactMount.getID(el);\n      this._updateDOMProperties({}, props, transaction, el);\n      this._createInitialChildren(transaction, props, context, el);\n      mountImage = el;\n    } else {\n      var tagOpen = this._createOpenTagMarkupAndPutListeners(transaction, props);\n      var tagContent = this._createContentMarkup(transaction, props, context);\n      if (!tagContent && omittedCloseTags[this._tag]) {\n        mountImage = tagOpen + '/>';\n      } else {\n        mountImage = tagOpen + '>' + tagContent + '</' + this._currentElement.type + '>';\n      }\n    }\n\n    switch (this._tag) {\n      case 'input':\n        transaction.getReactMountReady().enqueue(mountReadyInputWrapper, this);\n      // falls through\n      case 'button':\n      case 'select':\n      case 'textarea':\n        if (props.autoFocus) {\n          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);\n        }\n        break;\n    }\n\n    return mountImage;\n  },\n\n  /**\n   * Creates markup for the open tag and all attributes.\n   *\n   * This method has side effects because events get registered.\n   *\n   * Iterating over object properties is faster than iterating over arrays.\n   * @see http://jsperf.com/obj-vs-arr-iteration\n   *\n   * @private\n   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction\n   * @param {object} props\n   * @return {string} Markup of opening tag.\n   */\n  _createOpenTagMarkupAndPutListeners: function (transaction, props) {\n    var ret = '<' + this._currentElement.type;\n\n    for (var propKey in props) {\n      if (!props.hasOwnProperty(propKey)) {\n        continue;\n      }\n      var propValue = props[propKey];\n      if (propValue == null) {\n        continue;\n      }\n      if (registrationNameModules.hasOwnProperty(propKey)) {\n        if (propValue) {\n          enqueuePutListener(this._rootNodeID, propKey, propValue, transaction);\n        }\n      } else {\n        if (propKey === STYLE) {\n          if (propValue) {\n            if (process.env.NODE_ENV !== 'production') {\n              // See `_updateDOMProperties`. style block\n              this._previousStyle = propValue;\n            }\n            propValue = this._previousStyleCopy = assign({}, props.style);\n          }\n          propValue = CSSPropertyOperations.createMarkupForStyles(propValue);\n        }\n        var markup = null;\n        if (this._tag != null && isCustomComponent(this._tag, props)) {\n          if (propKey !== CHILDREN) {\n            markup = DOMPropertyOperations.createMarkupForCustomAttribute(propKey, propValue);\n          }\n        } else {\n          markup = DOMPropertyOperations.createMarkupForProperty(propKey, propValue);\n        }\n        if (markup) {\n          ret += ' ' + markup;\n        }\n      }\n    }\n\n    // For static pages, no need to put React ID and checksum. Saves lots of\n    // bytes.\n    if (transaction.renderToStaticMarkup) {\n      return ret;\n    }\n\n    var markupForID = DOMPropertyOperations.createMarkupForID(this._rootNodeID);\n    return ret + ' ' + markupForID;\n  },\n\n  /**\n   * Creates markup for the content between the tags.\n   *\n   * @private\n   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction\n   * @param {object} props\n   * @param {object} context\n   * @return {string} Content markup.\n   */\n  _createContentMarkup: function (transaction, props, context) {\n    var ret = '';\n\n    // Intentional use of != to avoid catching zero/false.\n    var innerHTML = props.dangerouslySetInnerHTML;\n    if (innerHTML != null) {\n      if (innerHTML.__html != null) {\n        ret = innerHTML.__html;\n      }\n    } else {\n      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;\n      var childrenToUse = contentToUse != null ? null : props.children;\n      if (contentToUse != null) {\n        // TODO: Validate that text is allowed as a child of this node\n        ret = escapeTextContentForBrowser(contentToUse);\n      } else if (childrenToUse != null) {\n        var mountImages = this.mountChildren(childrenToUse, transaction, context);\n        ret = mountImages.join('');\n      }\n    }\n    if (newlineEatingTags[this._tag] && ret.charAt(0) === '\\n') {\n      // text/html ignores the first character in these tags if it's a newline\n      // Prefer to break application/xml over text/html (for now) by adding\n      // a newline specifically to get eaten by the parser. (Alternately for\n      // textareas, replacing \"^\\n\" with \"\\r\\n\" doesn't get eaten, and the first\n      // \\r is normalized out by HTMLTextAreaElement#value.)\n      // See: <http://www.w3.org/TR/html-polyglot/#newlines-in-textarea-and-pre>\n      // See: <http://www.w3.org/TR/html5/syntax.html#element-restrictions>\n      // See: <http://www.w3.org/TR/html5/syntax.html#newlines>\n      // See: Parsing of \"textarea\" \"listing\" and \"pre\" elements\n      //  from <http://www.w3.org/TR/html5/syntax.html#parsing-main-inbody>\n      return '\\n' + ret;\n    } else {\n      return ret;\n    }\n  },\n\n  _createInitialChildren: function (transaction, props, context, el) {\n    // Intentional use of != to avoid catching zero/false.\n    var innerHTML = props.dangerouslySetInnerHTML;\n    if (innerHTML != null) {\n      if (innerHTML.__html != null) {\n        setInnerHTML(el, innerHTML.__html);\n      }\n    } else {\n      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;\n      var childrenToUse = contentToUse != null ? null : props.children;\n      if (contentToUse != null) {\n        // TODO: Validate that text is allowed as a child of this node\n        setTextContent(el, contentToUse);\n      } else if (childrenToUse != null) {\n        var mountImages = this.mountChildren(childrenToUse, transaction, context);\n        for (var i = 0; i < mountImages.length; i++) {\n          el.appendChild(mountImages[i]);\n        }\n      }\n    }\n  },\n\n  /**\n   * Receives a next element and updates the component.\n   *\n   * @internal\n   * @param {ReactElement} nextElement\n   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction\n   * @param {object} context\n   */\n  receiveComponent: function (nextElement, transaction, context) {\n    var prevElement = this._currentElement;\n    this._currentElement = nextElement;\n    this.updateComponent(transaction, prevElement, nextElement, context);\n  },\n\n  /**\n   * Updates a native DOM component after it has already been allocated and\n   * attached to the DOM. Reconciles the root DOM node, then recurses.\n   *\n   * @param {ReactReconcileTransaction} transaction\n   * @param {ReactElement} prevElement\n   * @param {ReactElement} nextElement\n   * @internal\n   * @overridable\n   */\n  updateComponent: function (transaction, prevElement, nextElement, context) {\n    var lastProps = prevElement.props;\n    var nextProps = this._currentElement.props;\n\n    switch (this._tag) {\n      case 'button':\n        lastProps = ReactDOMButton.getNativeProps(this, lastProps);\n        nextProps = ReactDOMButton.getNativeProps(this, nextProps);\n        break;\n      case 'input':\n        ReactDOMInput.updateWrapper(this);\n        lastProps = ReactDOMInput.getNativeProps(this, lastProps);\n        nextProps = ReactDOMInput.getNativeProps(this, nextProps);\n        break;\n      case 'option':\n        lastProps = ReactDOMOption.getNativeProps(this, lastProps);\n        nextProps = ReactDOMOption.getNativeProps(this, nextProps);\n        break;\n      case 'select':\n        lastProps = ReactDOMSelect.getNativeProps(this, lastProps);\n        nextProps = ReactDOMSelect.getNativeProps(this, nextProps);\n        break;\n      case 'textarea':\n        ReactDOMTextarea.updateWrapper(this);\n        lastProps = ReactDOMTextarea.getNativeProps(this, lastProps);\n        nextProps = ReactDOMTextarea.getNativeProps(this, nextProps);\n        break;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      // If the context is reference-equal to the old one, pass down the same\n      // processed object so the update bailout in ReactReconciler behaves\n      // correctly (and identically in dev and prod). See #5005.\n      if (this._unprocessedContextDev !== context) {\n        this._unprocessedContextDev = context;\n        this._processedContextDev = processChildContextDev(context, this);\n      }\n      context = this._processedContextDev;\n    }\n\n    assertValidProps(this, nextProps);\n    this._updateDOMProperties(lastProps, nextProps, transaction, null);\n    this._updateDOMChildren(lastProps, nextProps, transaction, context);\n\n    if (!canDefineProperty && this._nodeWithLegacyProperties) {\n      this._nodeWithLegacyProperties.props = nextProps;\n    }\n\n    if (this._tag === 'select') {\n      // <select> value update needs to occur after <option> children\n      // reconciliation\n      transaction.getReactMountReady().enqueue(postUpdateSelectWrapper, this);\n    }\n  },\n\n  /**\n   * Reconciles the properties by detecting differences in property values and\n   * updating the DOM as necessary. This function is probably the single most\n   * critical path for performance optimization.\n   *\n   * TODO: Benchmark whether checking for changed values in memory actually\n   *       improves performance (especially statically positioned elements).\n   * TODO: Benchmark the effects of putting this at the top since 99% of props\n   *       do not change for a given reconciliation.\n   * TODO: Benchmark areas that can be improved with caching.\n   *\n   * @private\n   * @param {object} lastProps\n   * @param {object} nextProps\n   * @param {ReactReconcileTransaction} transaction\n   * @param {?DOMElement} node\n   */\n  _updateDOMProperties: function (lastProps, nextProps, transaction, node) {\n    var propKey;\n    var styleName;\n    var styleUpdates;\n    for (propKey in lastProps) {\n      if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey)) {\n        continue;\n      }\n      if (propKey === STYLE) {\n        var lastStyle = this._previousStyleCopy;\n        for (styleName in lastStyle) {\n          if (lastStyle.hasOwnProperty(styleName)) {\n            styleUpdates = styleUpdates || {};\n            styleUpdates[styleName] = '';\n          }\n        }\n        this._previousStyleCopy = null;\n      } else if (registrationNameModules.hasOwnProperty(propKey)) {\n        if (lastProps[propKey]) {\n          // Only call deleteListener if there was a listener previously or\n          // else willDeleteListener gets called when there wasn't actually a\n          // listener (e.g., onClick={null})\n          deleteListener(this._rootNodeID, propKey);\n        }\n      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {\n        if (!node) {\n          node = ReactMount.getNode(this._rootNodeID);\n        }\n        DOMPropertyOperations.deleteValueForProperty(node, propKey);\n      }\n    }\n    for (propKey in nextProps) {\n      var nextProp = nextProps[propKey];\n      var lastProp = propKey === STYLE ? this._previousStyleCopy : lastProps[propKey];\n      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp) {\n        continue;\n      }\n      if (propKey === STYLE) {\n        if (nextProp) {\n          if (process.env.NODE_ENV !== 'production') {\n            checkAndWarnForMutatedStyle(this._previousStyleCopy, this._previousStyle, this);\n            this._previousStyle = nextProp;\n          }\n          nextProp = this._previousStyleCopy = assign({}, nextProp);\n        } else {\n          this._previousStyleCopy = null;\n        }\n        if (lastProp) {\n          // Unset styles on `lastProp` but not on `nextProp`.\n          for (styleName in lastProp) {\n            if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {\n              styleUpdates = styleUpdates || {};\n              styleUpdates[styleName] = '';\n            }\n          }\n          // Update styles that changed since `lastProp`.\n          for (styleName in nextProp) {\n            if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {\n              styleUpdates = styleUpdates || {};\n              styleUpdates[styleName] = nextProp[styleName];\n            }\n          }\n        } else {\n          // Relies on `updateStylesByID` not mutating `styleUpdates`.\n          styleUpdates = nextProp;\n        }\n      } else if (registrationNameModules.hasOwnProperty(propKey)) {\n        if (nextProp) {\n          enqueuePutListener(this._rootNodeID, propKey, nextProp, transaction);\n        } else if (lastProp) {\n          deleteListener(this._rootNodeID, propKey);\n        }\n      } else if (isCustomComponent(this._tag, nextProps)) {\n        if (!node) {\n          node = ReactMount.getNode(this._rootNodeID);\n        }\n        if (propKey === CHILDREN) {\n          nextProp = null;\n        }\n        DOMPropertyOperations.setValueForAttribute(node, propKey, nextProp);\n      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {\n        if (!node) {\n          node = ReactMount.getNode(this._rootNodeID);\n        }\n        // If we're updating to null or undefined, we should remove the property\n        // from the DOM node instead of inadvertantly setting to a string. This\n        // brings us in line with the same behavior we have on initial render.\n        if (nextProp != null) {\n          DOMPropertyOperations.setValueForProperty(node, propKey, nextProp);\n        } else {\n          DOMPropertyOperations.deleteValueForProperty(node, propKey);\n        }\n      }\n    }\n    if (styleUpdates) {\n      if (!node) {\n        node = ReactMount.getNode(this._rootNodeID);\n      }\n      CSSPropertyOperations.setValueForStyles(node, styleUpdates);\n    }\n  },\n\n  /**\n   * Reconciles the children with the various properties that affect the\n   * children content.\n   *\n   * @param {object} lastProps\n   * @param {object} nextProps\n   * @param {ReactReconcileTransaction} transaction\n   * @param {object} context\n   */\n  _updateDOMChildren: function (lastProps, nextProps, transaction, context) {\n    var lastContent = CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;\n    var nextContent = CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;\n\n    var lastHtml = lastProps.dangerouslySetInnerHTML && lastProps.dangerouslySetInnerHTML.__html;\n    var nextHtml = nextProps.dangerouslySetInnerHTML && nextProps.dangerouslySetInnerHTML.__html;\n\n    // Note the use of `!=` which checks for null or undefined.\n    var lastChildren = lastContent != null ? null : lastProps.children;\n    var nextChildren = nextContent != null ? null : nextProps.children;\n\n    // If we're switching from children to content/html or vice versa, remove\n    // the old content\n    var lastHasContentOrHtml = lastContent != null || lastHtml != null;\n    var nextHasContentOrHtml = nextContent != null || nextHtml != null;\n    if (lastChildren != null && nextChildren == null) {\n      this.updateChildren(null, transaction, context);\n    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {\n      this.updateTextContent('');\n    }\n\n    if (nextContent != null) {\n      if (lastContent !== nextContent) {\n        this.updateTextContent('' + nextContent);\n      }\n    } else if (nextHtml != null) {\n      if (lastHtml !== nextHtml) {\n        this.updateMarkup('' + nextHtml);\n      }\n    } else if (nextChildren != null) {\n      this.updateChildren(nextChildren, transaction, context);\n    }\n  },\n\n  /**\n   * Destroys all event registrations for this instance. Does not remove from\n   * the DOM. That must be done by the parent.\n   *\n   * @internal\n   */\n  unmountComponent: function () {\n    switch (this._tag) {\n      case 'iframe':\n      case 'img':\n      case 'form':\n      case 'video':\n      case 'audio':\n        var listeners = this._wrapperState.listeners;\n        if (listeners) {\n          for (var i = 0; i < listeners.length; i++) {\n            listeners[i].remove();\n          }\n        }\n        break;\n      case 'input':\n        ReactDOMInput.unmountWrapper(this);\n        break;\n      case 'html':\n      case 'head':\n      case 'body':\n        /**\n         * Components like <html> <head> and <body> can't be removed or added\n         * easily in a cross-browser way, however it's valuable to be able to\n         * take advantage of React's reconciliation for styling and <title>\n         * management. So we just document it and throw in dangerous cases.\n         */\n        !false ? process.env.NODE_ENV !== 'production' ? invariant(false, '<%s> tried to unmount. Because of cross-browser quirks it is ' + 'impossible to unmount some top-level components (eg <html>, ' + '<head>, and <body>) reliably and efficiently. To fix this, have a ' + 'single top-level component that never unmounts render these ' + 'elements.', this._tag) : invariant(false) : undefined;\n        break;\n    }\n\n    this.unmountChildren();\n    ReactBrowserEventEmitter.deleteAllListeners(this._rootNodeID);\n    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);\n    this._rootNodeID = null;\n    this._wrapperState = null;\n    if (this._nodeWithLegacyProperties) {\n      var node = this._nodeWithLegacyProperties;\n      node._reactInternalComponent = null;\n      this._nodeWithLegacyProperties = null;\n    }\n  },\n\n  getPublicInstance: function () {\n    if (!this._nodeWithLegacyProperties) {\n      var node = ReactMount.getNode(this._rootNodeID);\n\n      node._reactInternalComponent = this;\n      node.getDOMNode = legacyGetDOMNode;\n      node.isMounted = legacyIsMounted;\n      node.setState = legacySetStateEtc;\n      node.replaceState = legacySetStateEtc;\n      node.forceUpdate = legacySetStateEtc;\n      node.setProps = legacySetProps;\n      node.replaceProps = legacyReplaceProps;\n\n      if (process.env.NODE_ENV !== 'production') {\n        if (canDefineProperty) {\n          Object.defineProperties(node, legacyPropsDescriptor);\n        } else {\n          // updateComponent will update this property on subsequent renders\n          node.props = this._currentElement.props;\n        }\n      } else {\n        // updateComponent will update this property on subsequent renders\n        node.props = this._currentElement.props;\n      }\n\n      this._nodeWithLegacyProperties = node;\n    }\n    return this._nodeWithLegacyProperties;\n  }\n\n};\n\nReactPerf.measureMethods(ReactDOMComponent, 'ReactDOMComponent', {\n  mountComponent: 'mountComponent',\n  updateComponent: 'updateComponent'\n});\n\nassign(ReactDOMComponent.prototype, ReactDOMComponent.Mixin, ReactMultiChild.Mixin);\n\nmodule.exports = ReactDOMComponent;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule AutoFocusUtils\n * @typechecks static-only\n */\n\n'use strict';\n\nvar ReactMount = require('./ReactMount');\n\nvar findDOMNode = require('./findDOMNode');\nvar focusNode = require('fbjs/lib/focusNode');\n\nvar Mixin = {\n  componentDidMount: function () {\n    if (this.props.autoFocus) {\n      focusNode(findDOMNode(this));\n    }\n  }\n};\n\nvar AutoFocusUtils = {\n  Mixin: Mixin,\n\n  focusDOMComponent: function () {\n    focusNode(ReactMount.getNode(this._rootNodeID));\n  }\n};\n\nmodule.exports = AutoFocusUtils;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule CSSPropertyOperations\n * @typechecks static-only\n */\n\n'use strict';\n\nvar CSSProperty = require('./CSSProperty');\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\nvar ReactPerf = require('./ReactPerf');\n\nvar camelizeStyleName = require('fbjs/lib/camelizeStyleName');\nvar dangerousStyleValue = require('./dangerousStyleValue');\nvar hyphenateStyleName = require('fbjs/lib/hyphenateStyleName');\nvar memoizeStringOnly = require('fbjs/lib/memoizeStringOnly');\nvar warning = require('fbjs/lib/warning');\n\nvar processStyleName = memoizeStringOnly(function (styleName) {\n  return hyphenateStyleName(styleName);\n});\n\nvar hasShorthandPropertyBug = false;\nvar styleFloatAccessor = 'cssFloat';\nif (ExecutionEnvironment.canUseDOM) {\n  var tempStyle = document.createElement('div').style;\n  try {\n    // IE8 throws \"Invalid argument.\" if resetting shorthand style properties.\n    tempStyle.font = '';\n  } catch (e) {\n    hasShorthandPropertyBug = true;\n  }\n  // IE8 only supports accessing cssFloat (standard) as styleFloat\n  if (document.documentElement.style.cssFloat === undefined) {\n    styleFloatAccessor = 'styleFloat';\n  }\n}\n\nif (process.env.NODE_ENV !== 'production') {\n  // 'msTransform' is correct, but the other prefixes should be capitalized\n  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;\n\n  // style values shouldn't contain a semicolon\n  var badStyleValueWithSemicolonPattern = /;\\s*$/;\n\n  var warnedStyleNames = {};\n  var warnedStyleValues = {};\n\n  var warnHyphenatedStyleName = function (name) {\n    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {\n      return;\n    }\n\n    warnedStyleNames[name] = true;\n    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported style property %s. Did you mean %s?', name, camelizeStyleName(name)) : undefined;\n  };\n\n  var warnBadVendoredStyleName = function (name) {\n    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {\n      return;\n    }\n\n    warnedStyleNames[name] = true;\n    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?', name, name.charAt(0).toUpperCase() + name.slice(1)) : undefined;\n  };\n\n  var warnStyleValueWithSemicolon = function (name, value) {\n    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {\n      return;\n    }\n\n    warnedStyleValues[value] = true;\n    process.env.NODE_ENV !== 'production' ? warning(false, 'Style property values shouldn\\'t contain a semicolon. ' + 'Try \"%s: %s\" instead.', name, value.replace(badStyleValueWithSemicolonPattern, '')) : undefined;\n  };\n\n  /**\n   * @param {string} name\n   * @param {*} value\n   */\n  var warnValidStyle = function (name, value) {\n    if (name.indexOf('-') > -1) {\n      warnHyphenatedStyleName(name);\n    } else if (badVendoredStyleNamePattern.test(name)) {\n      warnBadVendoredStyleName(name);\n    } else if (badStyleValueWithSemicolonPattern.test(value)) {\n      warnStyleValueWithSemicolon(name, value);\n    }\n  };\n}\n\n/**\n * Operations for dealing with CSS properties.\n */\nvar CSSPropertyOperations = {\n\n  /**\n   * Serializes a mapping of style properties for use as inline styles:\n   *\n   *   > createMarkupForStyles({width: '200px', height: 0})\n   *   \"width:200px;height:0;\"\n   *\n   * Undefined values are ignored so that declarative programming is easier.\n   * The result should be HTML-escaped before insertion into the DOM.\n   *\n   * @param {object} styles\n   * @return {?string}\n   */\n  createMarkupForStyles: function (styles) {\n    var serialized = '';\n    for (var styleName in styles) {\n      if (!styles.hasOwnProperty(styleName)) {\n        continue;\n      }\n      var styleValue = styles[styleName];\n      if (process.env.NODE_ENV !== 'production') {\n        warnValidStyle(styleName, styleValue);\n      }\n      if (styleValue != null) {\n        serialized += processStyleName(styleName) + ':';\n        serialized += dangerousStyleValue(styleName, styleValue) + ';';\n      }\n    }\n    return serialized || null;\n  },\n\n  /**\n   * Sets the value for multiple styles on a node.  If a value is specified as\n   * '' (empty string), the corresponding style property will be unset.\n   *\n   * @param {DOMElement} node\n   * @param {object} styles\n   */\n  setValueForStyles: function (node, styles) {\n    var style = node.style;\n    for (var styleName in styles) {\n      if (!styles.hasOwnProperty(styleName)) {\n        continue;\n      }\n      if (process.env.NODE_ENV !== 'production') {\n        warnValidStyle(styleName, styles[styleName]);\n      }\n      var styleValue = dangerousStyleValue(styleName, styles[styleName]);\n      if (styleName === 'float') {\n        styleName = styleFloatAccessor;\n      }\n      if (styleValue) {\n        style[styleName] = styleValue;\n      } else {\n        var expansion = hasShorthandPropertyBug && CSSProperty.shorthandPropertyExpansions[styleName];\n        if (expansion) {\n          // Shorthand property that IE8 won't like unsetting, so unset each\n          // component to placate it\n          for (var individualStyleName in expansion) {\n            style[individualStyleName] = '';\n          }\n        } else {\n          style[styleName] = '';\n        }\n      }\n    }\n  }\n\n};\n\nReactPerf.measureMethods(CSSPropertyOperations, 'CSSPropertyOperations', {\n  setValueForStyles: 'setValueForStyles'\n});\n\nmodule.exports = CSSPropertyOperations;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule CSSProperty\n */\n\n'use strict';\n\n/**\n * CSS properties which accept numbers but are not in units of \"px\".\n */\nvar isUnitlessNumber = {\n  animationIterationCount: true,\n  boxFlex: true,\n  boxFlexGroup: true,\n  boxOrdinalGroup: true,\n  columnCount: true,\n  flex: true,\n  flexGrow: true,\n  flexPositive: true,\n  flexShrink: true,\n  flexNegative: true,\n  flexOrder: true,\n  fontWeight: true,\n  lineClamp: true,\n  lineHeight: true,\n  opacity: true,\n  order: true,\n  orphans: true,\n  tabSize: true,\n  widows: true,\n  zIndex: true,\n  zoom: true,\n\n  // SVG-related properties\n  fillOpacity: true,\n  stopOpacity: true,\n  strokeDashoffset: true,\n  strokeOpacity: true,\n  strokeWidth: true\n};\n\n/**\n * @param {string} prefix vendor-specific prefix, eg: Webkit\n * @param {string} key style name, eg: transitionDuration\n * @return {string} style name prefixed with `prefix`, properly camelCased, eg:\n * WebkitTransitionDuration\n */\nfunction prefixKey(prefix, key) {\n  return prefix + key.charAt(0).toUpperCase() + key.substring(1);\n}\n\n/**\n * Support style names that may come passed in prefixed by adding permutations\n * of vendor prefixes.\n */\nvar prefixes = ['Webkit', 'ms', 'Moz', 'O'];\n\n// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an\n// infinite loop, because it iterates over the newly added props too.\nObject.keys(isUnitlessNumber).forEach(function (prop) {\n  prefixes.forEach(function (prefix) {\n    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];\n  });\n});\n\n/**\n * Most style properties can be unset by doing .style[prop] = '' but IE8\n * doesn't like doing that with shorthand properties so for the properties that\n * IE8 breaks on, which are listed here, we instead unset each of the\n * individual properties. See http://bugs.jquery.com/ticket/12385.\n * The 4-value 'clock' properties like margin, padding, border-width seem to\n * behave without any problems. Curiously, list-style works too without any\n * special prodding.\n */\nvar shorthandPropertyExpansions = {\n  background: {\n    backgroundAttachment: true,\n    backgroundColor: true,\n    backgroundImage: true,\n    backgroundPositionX: true,\n    backgroundPositionY: true,\n    backgroundRepeat: true\n  },\n  backgroundPosition: {\n    backgroundPositionX: true,\n    backgroundPositionY: true\n  },\n  border: {\n    borderWidth: true,\n    borderStyle: true,\n    borderColor: true\n  },\n  borderBottom: {\n    borderBottomWidth: true,\n    borderBottomStyle: true,\n    borderBottomColor: true\n  },\n  borderLeft: {\n    borderLeftWidth: true,\n    borderLeftStyle: true,\n    borderLeftColor: true\n  },\n  borderRight: {\n    borderRightWidth: true,\n    borderRightStyle: true,\n    borderRightColor: true\n  },\n  borderTop: {\n    borderTopWidth: true,\n    borderTopStyle: true,\n    borderTopColor: true\n  },\n  font: {\n    fontStyle: true,\n    fontVariant: true,\n    fontWeight: true,\n    fontSize: true,\n    lineHeight: true,\n    fontFamily: true\n  },\n  outline: {\n    outlineWidth: true,\n    outlineStyle: true,\n    outlineColor: true\n  }\n};\n\nvar CSSProperty = {\n  isUnitlessNumber: isUnitlessNumber,\n  shorthandPropertyExpansions: shorthandPropertyExpansions\n};\n\nmodule.exports = CSSProperty;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule dangerousStyleValue\n * @typechecks static-only\n */\n\n'use strict';\n\nvar CSSProperty = require('./CSSProperty');\n\nvar isUnitlessNumber = CSSProperty.isUnitlessNumber;\n\n/**\n * Convert a value into the proper css writable value. The style name `name`\n * should be logical (no hyphens), as specified\n * in `CSSProperty.isUnitlessNumber`.\n *\n * @param {string} name CSS property name such as `topMargin`.\n * @param {*} value CSS property value such as `10px`.\n * @return {string} Normalized style value with dimensions applied.\n */\nfunction dangerousStyleValue(name, value) {\n  // Note that we've removed escapeTextForBrowser() calls here since the\n  // whole string will be escaped when the attribute is injected into\n  // the markup. If you provide unsafe user data here they can inject\n  // arbitrary CSS which may be problematic (I couldn't repro this):\n  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet\n  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/\n  // This is not an XSS hole but instead a potential CSS injection issue\n  // which has lead to a greater discussion about how we're going to\n  // trust URLs moving forward. See #2115901\n\n  var isEmpty = value == null || typeof value === 'boolean' || value === '';\n  if (isEmpty) {\n    return '';\n  }\n\n  var isNonNumeric = isNaN(value);\n  if (isNonNumeric || value === 0 || isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {\n    return '' + value; // cast to string\n  }\n\n  if (typeof value === 'string') {\n    value = value.trim();\n  }\n  return value + 'px';\n}\n\nmodule.exports = dangerousStyleValue;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMButton\n */\n\n'use strict';\n\nvar mouseListenerNames = {\n  onClick: true,\n  onDoubleClick: true,\n  onMouseDown: true,\n  onMouseMove: true,\n  onMouseUp: true,\n\n  onClickCapture: true,\n  onDoubleClickCapture: true,\n  onMouseDownCapture: true,\n  onMouseMoveCapture: true,\n  onMouseUpCapture: true\n};\n\n/**\n * Implements a <button> native component that does not receive mouse events\n * when `disabled` is set.\n */\nvar ReactDOMButton = {\n  getNativeProps: function (inst, props, context) {\n    if (!props.disabled) {\n      return props;\n    }\n\n    // Copy the props, except the mouse listeners\n    var nativeProps = {};\n    for (var key in props) {\n      if (props.hasOwnProperty(key) && !mouseListenerNames[key]) {\n        nativeProps[key] = props[key];\n      }\n    }\n\n    return nativeProps;\n  }\n};\n\nmodule.exports = ReactDOMButton;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMInput\n */\n\n'use strict';\n\nvar ReactDOMIDOperations = require('./ReactDOMIDOperations');\nvar LinkedValueUtils = require('./LinkedValueUtils');\nvar ReactMount = require('./ReactMount');\nvar ReactUpdates = require('./ReactUpdates');\n\nvar assign = require('./Object.assign');\nvar invariant = require('fbjs/lib/invariant');\n\nvar instancesByReactID = {};\n\nfunction forceUpdateIfMounted() {\n  if (this._rootNodeID) {\n    // DOM component is still mounted; update\n    ReactDOMInput.updateWrapper(this);\n  }\n}\n\n/**\n * Implements an <input> native component that allows setting these optional\n * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.\n *\n * If `checked` or `value` are not supplied (or null/undefined), user actions\n * that affect the checked state or value will trigger updates to the element.\n *\n * If they are supplied (and not null/undefined), the rendered element will not\n * trigger updates to the element. Instead, the props must change in order for\n * the rendered element to be updated.\n *\n * The rendered element will be initialized as unchecked (or `defaultChecked`)\n * with an empty value (or `defaultValue`).\n *\n * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html\n */\nvar ReactDOMInput = {\n  getNativeProps: function (inst, props, context) {\n    var value = LinkedValueUtils.getValue(props);\n    var checked = LinkedValueUtils.getChecked(props);\n\n    var nativeProps = assign({}, props, {\n      defaultChecked: undefined,\n      defaultValue: undefined,\n      value: value != null ? value : inst._wrapperState.initialValue,\n      checked: checked != null ? checked : inst._wrapperState.initialChecked,\n      onChange: inst._wrapperState.onChange\n    });\n\n    return nativeProps;\n  },\n\n  mountWrapper: function (inst, props) {\n    if (process.env.NODE_ENV !== 'production') {\n      LinkedValueUtils.checkPropTypes('input', props, inst._currentElement._owner);\n    }\n\n    var defaultValue = props.defaultValue;\n    inst._wrapperState = {\n      initialChecked: props.defaultChecked || false,\n      initialValue: defaultValue != null ? defaultValue : null,\n      onChange: _handleChange.bind(inst)\n    };\n  },\n\n  mountReadyWrapper: function (inst) {\n    // Can't be in mountWrapper or else server rendering leaks.\n    instancesByReactID[inst._rootNodeID] = inst;\n  },\n\n  unmountWrapper: function (inst) {\n    delete instancesByReactID[inst._rootNodeID];\n  },\n\n  updateWrapper: function (inst) {\n    var props = inst._currentElement.props;\n\n    // TODO: Shouldn't this be getChecked(props)?\n    var checked = props.checked;\n    if (checked != null) {\n      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'checked', checked || false);\n    }\n\n    var value = LinkedValueUtils.getValue(props);\n    if (value != null) {\n      // Cast `value` to a string to ensure the value is set correctly. While\n      // browsers typically do this as necessary, jsdom doesn't.\n      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'value', '' + value);\n    }\n  }\n};\n\nfunction _handleChange(event) {\n  var props = this._currentElement.props;\n\n  var returnValue = LinkedValueUtils.executeOnChange(props, event);\n\n  // Here we use asap to wait until all updates have propagated, which\n  // is important when using controlled components within layers:\n  // https://github.com/facebook/react/issues/1698\n  ReactUpdates.asap(forceUpdateIfMounted, this);\n\n  var name = props.name;\n  if (props.type === 'radio' && name != null) {\n    var rootNode = ReactMount.getNode(this._rootNodeID);\n    var queryRoot = rootNode;\n\n    while (queryRoot.parentNode) {\n      queryRoot = queryRoot.parentNode;\n    }\n\n    // If `rootNode.form` was non-null, then we could try `form.elements`,\n    // but that sometimes behaves strangely in IE8. We could also try using\n    // `form.getElementsByName`, but that will only return direct children\n    // and won't include inputs that use the HTML5 `form=` attribute. Since\n    // the input might not even be in a form, let's just use the global\n    // `querySelectorAll` to ensure we don't miss anything.\n    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type=\"radio\"]');\n\n    for (var i = 0; i < group.length; i++) {\n      var otherNode = group[i];\n      if (otherNode === rootNode || otherNode.form !== rootNode.form) {\n        continue;\n      }\n      // This will throw if radio buttons rendered by different copies of React\n      // and the same name are rendered into the same form (same as #1939).\n      // That's probably okay; we don't support it just as we don't support\n      // mixing React with non-React.\n      var otherID = ReactMount.getID(otherNode);\n      !otherID ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the ' + 'same `name` is not supported.') : invariant(false) : undefined;\n      var otherInstance = instancesByReactID[otherID];\n      !otherInstance ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Unknown radio button ID %s.', otherID) : invariant(false) : undefined;\n      // If this is a controlled radio button group, forcing the input that\n      // was previously checked to update will cause it to be come re-checked\n      // as appropriate.\n      ReactUpdates.asap(forceUpdateIfMounted, otherInstance);\n    }\n  }\n\n  return returnValue;\n}\n\nmodule.exports = ReactDOMInput;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule LinkedValueUtils\n * @typechecks static-only\n */\n\n'use strict';\n\nvar ReactPropTypes = require('./ReactPropTypes');\nvar ReactPropTypeLocations = require('./ReactPropTypeLocations');\n\nvar invariant = require('fbjs/lib/invariant');\nvar warning = require('fbjs/lib/warning');\n\nvar hasReadOnlyValue = {\n  'button': true,\n  'checkbox': true,\n  'image': true,\n  'hidden': true,\n  'radio': true,\n  'reset': true,\n  'submit': true\n};\n\nfunction _assertSingleLink(inputProps) {\n  !(inputProps.checkedLink == null || inputProps.valueLink == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a valueLink. If you want to use ' + 'checkedLink, you probably don\\'t want to use valueLink and vice versa.') : invariant(false) : undefined;\n}\nfunction _assertValueLink(inputProps) {\n  _assertSingleLink(inputProps);\n  !(inputProps.value == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a valueLink and a value or onChange event. If you want ' + 'to use value or onChange, you probably don\\'t want to use valueLink.') : invariant(false) : undefined;\n}\n\nfunction _assertCheckedLink(inputProps) {\n  _assertSingleLink(inputProps);\n  !(inputProps.checked == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a checked property or onChange event. ' + 'If you want to use checked or onChange, you probably don\\'t want to ' + 'use checkedLink') : invariant(false) : undefined;\n}\n\nvar propTypes = {\n  value: function (props, propName, componentName) {\n    if (!props[propName] || hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled) {\n      return null;\n    }\n    return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');\n  },\n  checked: function (props, propName, componentName) {\n    if (!props[propName] || props.onChange || props.readOnly || props.disabled) {\n      return null;\n    }\n    return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');\n  },\n  onChange: ReactPropTypes.func\n};\n\nvar loggedTypeFailures = {};\nfunction getDeclarationErrorAddendum(owner) {\n  if (owner) {\n    var name = owner.getName();\n    if (name) {\n      return ' Check the render method of `' + name + '`.';\n    }\n  }\n  return '';\n}\n\n/**\n * Provide a linked `value` attribute for controlled forms. You should not use\n * this outside of the ReactDOM controlled form components.\n */\nvar LinkedValueUtils = {\n  checkPropTypes: function (tagName, props, owner) {\n    for (var propName in propTypes) {\n      if (propTypes.hasOwnProperty(propName)) {\n        var error = propTypes[propName](props, propName, tagName, ReactPropTypeLocations.prop);\n      }\n      if (error instanceof Error && !(error.message in loggedTypeFailures)) {\n        // Only monitor this failure once because there tends to be a lot of the\n        // same error.\n        loggedTypeFailures[error.message] = true;\n\n        var addendum = getDeclarationErrorAddendum(owner);\n        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed form propType: %s%s', error.message, addendum) : undefined;\n      }\n    }\n  },\n\n  /**\n   * @param {object} inputProps Props for form component\n   * @return {*} current value of the input either from value prop or link.\n   */\n  getValue: function (inputProps) {\n    if (inputProps.valueLink) {\n      _assertValueLink(inputProps);\n      return inputProps.valueLink.value;\n    }\n    return inputProps.value;\n  },\n\n  /**\n   * @param {object} inputProps Props for form component\n   * @return {*} current checked status of the input either from checked prop\n   *             or link.\n   */\n  getChecked: function (inputProps) {\n    if (inputProps.checkedLink) {\n      _assertCheckedLink(inputProps);\n      return inputProps.checkedLink.value;\n    }\n    return inputProps.checked;\n  },\n\n  /**\n   * @param {object} inputProps Props for form component\n   * @param {SyntheticEvent} event change event to handle\n   */\n  executeOnChange: function (inputProps, event) {\n    if (inputProps.valueLink) {\n      _assertValueLink(inputProps);\n      return inputProps.valueLink.requestChange(event.target.value);\n    } else if (inputProps.checkedLink) {\n      _assertCheckedLink(inputProps);\n      return inputProps.checkedLink.requestChange(event.target.checked);\n    } else if (inputProps.onChange) {\n      return inputProps.onChange.call(undefined, event);\n    }\n  }\n};\n\nmodule.exports = LinkedValueUtils;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactPropTypes\n */\n\n'use strict';\n\nvar ReactElement = require('./ReactElement');\nvar ReactPropTypeLocationNames = require('./ReactPropTypeLocationNames');\n\nvar emptyFunction = require('fbjs/lib/emptyFunction');\nvar getIteratorFn = require('./getIteratorFn');\n\n/**\n * Collection of methods that allow declaration and validation of props that are\n * supplied to React components. Example usage:\n *\n *   var Props = require('ReactPropTypes');\n *   var MyArticle = React.createClass({\n *     propTypes: {\n *       // An optional string prop named \"description\".\n *       description: Props.string,\n *\n *       // A required enum prop named \"category\".\n *       category: Props.oneOf(['News','Photos']).isRequired,\n *\n *       // A prop named \"dialog\" that requires an instance of Dialog.\n *       dialog: Props.instanceOf(Dialog).isRequired\n *     },\n *     render: function() { ... }\n *   });\n *\n * A more formal specification of how these methods are used:\n *\n *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)\n *   decl := ReactPropTypes.{type}(.isRequired)?\n *\n * Each and every declaration produces a function with the same signature. This\n * allows the creation of custom validation functions. For example:\n *\n *  var MyLink = React.createClass({\n *    propTypes: {\n *      // An optional string or URI prop named \"href\".\n *      href: function(props, propName, componentName) {\n *        var propValue = props[propName];\n *        if (propValue != null && typeof propValue !== 'string' &&\n *            !(propValue instanceof URI)) {\n *          return new Error(\n *            'Expected a string or an URI for ' + propName + ' in ' +\n *            componentName\n *          );\n *        }\n *      }\n *    },\n *    render: function() {...}\n *  });\n *\n * @internal\n */\n\nvar ANONYMOUS = '<<anonymous>>';\n\nvar ReactPropTypes = {\n  array: createPrimitiveTypeChecker('array'),\n  bool: createPrimitiveTypeChecker('boolean'),\n  func: createPrimitiveTypeChecker('function'),\n  number: createPrimitiveTypeChecker('number'),\n  object: createPrimitiveTypeChecker('object'),\n  string: createPrimitiveTypeChecker('string'),\n\n  any: createAnyTypeChecker(),\n  arrayOf: createArrayOfTypeChecker,\n  element: createElementTypeChecker(),\n  instanceOf: createInstanceTypeChecker,\n  node: createNodeChecker(),\n  objectOf: createObjectOfTypeChecker,\n  oneOf: createEnumTypeChecker,\n  oneOfType: createUnionTypeChecker,\n  shape: createShapeTypeChecker\n};\n\nfunction createChainableTypeChecker(validate) {\n  function checkType(isRequired, props, propName, componentName, location, propFullName) {\n    componentName = componentName || ANONYMOUS;\n    propFullName = propFullName || propName;\n    if (props[propName] == null) {\n      var locationName = ReactPropTypeLocationNames[location];\n      if (isRequired) {\n        return new Error('Required ' + locationName + ' `' + propFullName + '` was not specified in ' + ('`' + componentName + '`.'));\n      }\n      return null;\n    } else {\n      return validate(props, propName, componentName, location, propFullName);\n    }\n  }\n\n  var chainedCheckType = checkType.bind(null, false);\n  chainedCheckType.isRequired = checkType.bind(null, true);\n\n  return chainedCheckType;\n}\n\nfunction createPrimitiveTypeChecker(expectedType) {\n  function validate(props, propName, componentName, location, propFullName) {\n    var propValue = props[propName];\n    var propType = getPropType(propValue);\n    if (propType !== expectedType) {\n      var locationName = ReactPropTypeLocationNames[location];\n      // `propValue` being instance of, say, date/regexp, pass the 'object'\n      // check, but we can offer a more precise error message here rather than\n      // 'of type `object`'.\n      var preciseType = getPreciseType(propValue);\n\n      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));\n    }\n    return null;\n  }\n  return createChainableTypeChecker(validate);\n}\n\nfunction createAnyTypeChecker() {\n  return createChainableTypeChecker(emptyFunction.thatReturns(null));\n}\n\nfunction createArrayOfTypeChecker(typeChecker) {\n  function validate(props, propName, componentName, location, propFullName) {\n    var propValue = props[propName];\n    if (!Array.isArray(propValue)) {\n      var locationName = ReactPropTypeLocationNames[location];\n      var propType = getPropType(propValue);\n      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));\n    }\n    for (var i = 0; i < propValue.length; i++) {\n      var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']');\n      if (error instanceof Error) {\n        return error;\n      }\n    }\n    return null;\n  }\n  return createChainableTypeChecker(validate);\n}\n\nfunction createElementTypeChecker() {\n  function validate(props, propName, componentName, location, propFullName) {\n    if (!ReactElement.isValidElement(props[propName])) {\n      var locationName = ReactPropTypeLocationNames[location];\n      return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a single ReactElement.'));\n    }\n    return null;\n  }\n  return createChainableTypeChecker(validate);\n}\n\nfunction createInstanceTypeChecker(expectedClass) {\n  function validate(props, propName, componentName, location, propFullName) {\n    if (!(props[propName] instanceof expectedClass)) {\n      var locationName = ReactPropTypeLocationNames[location];\n      var expectedClassName = expectedClass.name || ANONYMOUS;\n      var actualClassName = getClassName(props[propName]);\n      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));\n    }\n    return null;\n  }\n  return createChainableTypeChecker(validate);\n}\n\nfunction createEnumTypeChecker(expectedValues) {\n  if (!Array.isArray(expectedValues)) {\n    return createChainableTypeChecker(function () {\n      return new Error('Invalid argument supplied to oneOf, expected an instance of array.');\n    });\n  }\n\n  function validate(props, propName, componentName, location, propFullName) {\n    var propValue = props[propName];\n    for (var i = 0; i < expectedValues.length; i++) {\n      if (propValue === expectedValues[i]) {\n        return null;\n      }\n    }\n\n    var locationName = ReactPropTypeLocationNames[location];\n    var valuesString = JSON.stringify(expectedValues);\n    return new Error('Invalid ' + locationName + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));\n  }\n  return createChainableTypeChecker(validate);\n}\n\nfunction createObjectOfTypeChecker(typeChecker) {\n  function validate(props, propName, componentName, location, propFullName) {\n    var propValue = props[propName];\n    var propType = getPropType(propValue);\n    if (propType !== 'object') {\n      var locationName = ReactPropTypeLocationNames[location];\n      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));\n    }\n    for (var key in propValue) {\n      if (propValue.hasOwnProperty(key)) {\n        var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key);\n        if (error instanceof Error) {\n          return error;\n        }\n      }\n    }\n    return null;\n  }\n  return createChainableTypeChecker(validate);\n}\n\nfunction createUnionTypeChecker(arrayOfTypeCheckers) {\n  if (!Array.isArray(arrayOfTypeCheckers)) {\n    return createChainableTypeChecker(function () {\n      return new Error('Invalid argument supplied to oneOfType, expected an instance of array.');\n    });\n  }\n\n  function validate(props, propName, componentName, location, propFullName) {\n    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {\n      var checker = arrayOfTypeCheckers[i];\n      if (checker(props, propName, componentName, location, propFullName) == null) {\n        return null;\n      }\n    }\n\n    var locationName = ReactPropTypeLocationNames[location];\n    return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));\n  }\n  return createChainableTypeChecker(validate);\n}\n\nfunction createNodeChecker() {\n  function validate(props, propName, componentName, location, propFullName) {\n    if (!isNode(props[propName])) {\n      var locationName = ReactPropTypeLocationNames[location];\n      return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));\n    }\n    return null;\n  }\n  return createChainableTypeChecker(validate);\n}\n\nfunction createShapeTypeChecker(shapeTypes) {\n  function validate(props, propName, componentName, location, propFullName) {\n    var propValue = props[propName];\n    var propType = getPropType(propValue);\n    if (propType !== 'object') {\n      var locationName = ReactPropTypeLocationNames[location];\n      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));\n    }\n    for (var key in shapeTypes) {\n      var checker = shapeTypes[key];\n      if (!checker) {\n        continue;\n      }\n      var error = checker(propValue, key, componentName, location, propFullName + '.' + key);\n      if (error) {\n        return error;\n      }\n    }\n    return null;\n  }\n  return createChainableTypeChecker(validate);\n}\n\nfunction isNode(propValue) {\n  switch (typeof propValue) {\n    case 'number':\n    case 'string':\n    case 'undefined':\n      return true;\n    case 'boolean':\n      return !propValue;\n    case 'object':\n      if (Array.isArray(propValue)) {\n        return propValue.every(isNode);\n      }\n      if (propValue === null || ReactElement.isValidElement(propValue)) {\n        return true;\n      }\n\n      var iteratorFn = getIteratorFn(propValue);\n      if (iteratorFn) {\n        var iterator = iteratorFn.call(propValue);\n        var step;\n        if (iteratorFn !== propValue.entries) {\n          while (!(step = iterator.next()).done) {\n            if (!isNode(step.value)) {\n              return false;\n            }\n          }\n        } else {\n          // Iterator will provide entry [k,v] tuples rather than values.\n          while (!(step = iterator.next()).done) {\n            var entry = step.value;\n            if (entry) {\n              if (!isNode(entry[1])) {\n                return false;\n              }\n            }\n          }\n        }\n      } else {\n        return false;\n      }\n\n      return true;\n    default:\n      return false;\n  }\n}\n\n// Equivalent of `typeof` but with special handling for array and regexp.\nfunction getPropType(propValue) {\n  var propType = typeof propValue;\n  if (Array.isArray(propValue)) {\n    return 'array';\n  }\n  if (propValue instanceof RegExp) {\n    // Old webkits (at least until Android 4.0) return 'function' rather than\n    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/\n    // passes PropTypes.object.\n    return 'object';\n  }\n  return propType;\n}\n\n// This handles more types than `getPropType`. Only used for error messages.\n// See `createPrimitiveTypeChecker`.\nfunction getPreciseType(propValue) {\n  var propType = getPropType(propValue);\n  if (propType === 'object') {\n    if (propValue instanceof Date) {\n      return 'date';\n    } else if (propValue instanceof RegExp) {\n      return 'regexp';\n    }\n  }\n  return propType;\n}\n\n// Returns class name of the object, if any.\nfunction getClassName(propValue) {\n  if (!propValue.constructor || !propValue.constructor.name) {\n    return '<<anonymous>>';\n  }\n  return propValue.constructor.name;\n}\n\nmodule.exports = ReactPropTypes;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule getIteratorFn\n * @typechecks static-only\n */\n\n'use strict';\n\n/* global Symbol */\nvar ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;\nvar FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.\n\n/**\n * Returns the iterator method function contained on the iterable object.\n *\n * Be sure to invoke the function with the iterable as context:\n *\n *     var iteratorFn = getIteratorFn(myIterable);\n *     if (iteratorFn) {\n *       var iterator = iteratorFn.call(myIterable);\n *       ...\n *     }\n *\n * @param {?object} maybeIterable\n * @return {?function}\n */\nfunction getIteratorFn(maybeIterable) {\n  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);\n  if (typeof iteratorFn === 'function') {\n    return iteratorFn;\n  }\n}\n\nmodule.exports = getIteratorFn;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMOption\n */\n\n'use strict';\n\nvar ReactChildren = require('./ReactChildren');\nvar ReactDOMSelect = require('./ReactDOMSelect');\n\nvar assign = require('./Object.assign');\nvar warning = require('fbjs/lib/warning');\n\nvar valueContextKey = ReactDOMSelect.valueContextKey;\n\n/**\n * Implements an <option> native component that warns when `selected` is set.\n */\nvar ReactDOMOption = {\n  mountWrapper: function (inst, props, context) {\n    // TODO (yungsters): Remove support for `selected` in <option>.\n    if (process.env.NODE_ENV !== 'production') {\n      process.env.NODE_ENV !== 'production' ? warning(props.selected == null, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.') : undefined;\n    }\n\n    // Look up whether this option is 'selected' via context\n    var selectValue = context[valueContextKey];\n\n    // If context key is null (e.g., no specified value or after initial mount)\n    // or missing (e.g., for <datalist>), we don't change props.selected\n    var selected = null;\n    if (selectValue != null) {\n      selected = false;\n      if (Array.isArray(selectValue)) {\n        // multiple\n        for (var i = 0; i < selectValue.length; i++) {\n          if ('' + selectValue[i] === '' + props.value) {\n            selected = true;\n            break;\n          }\n        }\n      } else {\n        selected = '' + selectValue === '' + props.value;\n      }\n    }\n\n    inst._wrapperState = { selected: selected };\n  },\n\n  getNativeProps: function (inst, props, context) {\n    var nativeProps = assign({ selected: undefined, children: undefined }, props);\n\n    // Read state only from initial mount because <select> updates value\n    // manually; we need the initial state only for server rendering\n    if (inst._wrapperState.selected != null) {\n      nativeProps.selected = inst._wrapperState.selected;\n    }\n\n    var content = '';\n\n    // Flatten children and warn if they aren't strings or numbers;\n    // invalid types are ignored.\n    ReactChildren.forEach(props.children, function (child) {\n      if (child == null) {\n        return;\n      }\n      if (typeof child === 'string' || typeof child === 'number') {\n        content += child;\n      } else {\n        process.env.NODE_ENV !== 'production' ? warning(false, 'Only strings and numbers are supported as <option> children.') : undefined;\n      }\n    });\n\n    if (content) {\n      nativeProps.children = content;\n    }\n\n    return nativeProps;\n  }\n\n};\n\nmodule.exports = ReactDOMOption;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactChildren\n */\n\n'use strict';\n\nvar PooledClass = require('./PooledClass');\nvar ReactElement = require('./ReactElement');\n\nvar emptyFunction = require('fbjs/lib/emptyFunction');\nvar traverseAllChildren = require('./traverseAllChildren');\n\nvar twoArgumentPooler = PooledClass.twoArgumentPooler;\nvar fourArgumentPooler = PooledClass.fourArgumentPooler;\n\nvar userProvidedKeyEscapeRegex = /\\/(?!\\/)/g;\nfunction escapeUserProvidedKey(text) {\n  return ('' + text).replace(userProvidedKeyEscapeRegex, '//');\n}\n\n/**\n * PooledClass representing the bookkeeping associated with performing a child\n * traversal. Allows avoiding binding callbacks.\n *\n * @constructor ForEachBookKeeping\n * @param {!function} forEachFunction Function to perform traversal with.\n * @param {?*} forEachContext Context to perform context with.\n */\nfunction ForEachBookKeeping(forEachFunction, forEachContext) {\n  this.func = forEachFunction;\n  this.context = forEachContext;\n  this.count = 0;\n}\nForEachBookKeeping.prototype.destructor = function () {\n  this.func = null;\n  this.context = null;\n  this.count = 0;\n};\nPooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);\n\nfunction forEachSingleChild(bookKeeping, child, name) {\n  var func = bookKeeping.func;\n  var context = bookKeeping.context;\n\n  func.call(context, child, bookKeeping.count++);\n}\n\n/**\n * Iterates through children that are typically specified as `props.children`.\n *\n * The provided forEachFunc(child, index) will be called for each\n * leaf child.\n *\n * @param {?*} children Children tree container.\n * @param {function(*, int)} forEachFunc\n * @param {*} forEachContext Context for forEachContext.\n */\nfunction forEachChildren(children, forEachFunc, forEachContext) {\n  if (children == null) {\n    return children;\n  }\n  var traverseContext = ForEachBookKeeping.getPooled(forEachFunc, forEachContext);\n  traverseAllChildren(children, forEachSingleChild, traverseContext);\n  ForEachBookKeeping.release(traverseContext);\n}\n\n/**\n * PooledClass representing the bookkeeping associated with performing a child\n * mapping. Allows avoiding binding callbacks.\n *\n * @constructor MapBookKeeping\n * @param {!*} mapResult Object containing the ordered map of results.\n * @param {!function} mapFunction Function to perform mapping with.\n * @param {?*} mapContext Context to perform mapping with.\n */\nfunction MapBookKeeping(mapResult, keyPrefix, mapFunction, mapContext) {\n  this.result = mapResult;\n  this.keyPrefix = keyPrefix;\n  this.func = mapFunction;\n  this.context = mapContext;\n  this.count = 0;\n}\nMapBookKeeping.prototype.destructor = function () {\n  this.result = null;\n  this.keyPrefix = null;\n  this.func = null;\n  this.context = null;\n  this.count = 0;\n};\nPooledClass.addPoolingTo(MapBookKeeping, fourArgumentPooler);\n\nfunction mapSingleChildIntoContext(bookKeeping, child, childKey) {\n  var result = bookKeeping.result;\n  var keyPrefix = bookKeeping.keyPrefix;\n  var func = bookKeeping.func;\n  var context = bookKeeping.context;\n\n  var mappedChild = func.call(context, child, bookKeeping.count++);\n  if (Array.isArray(mappedChild)) {\n    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);\n  } else if (mappedChild != null) {\n    if (ReactElement.isValidElement(mappedChild)) {\n      mappedChild = ReactElement.cloneAndReplaceKey(mappedChild,\n      // Keep both the (mapped) and old keys if they differ, just as\n      // traverseAllChildren used to do for objects as children\n      keyPrefix + (mappedChild !== child ? escapeUserProvidedKey(mappedChild.key || '') + '/' : '') + childKey);\n    }\n    result.push(mappedChild);\n  }\n}\n\nfunction mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {\n  var escapedPrefix = '';\n  if (prefix != null) {\n    escapedPrefix = escapeUserProvidedKey(prefix) + '/';\n  }\n  var traverseContext = MapBookKeeping.getPooled(array, escapedPrefix, func, context);\n  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);\n  MapBookKeeping.release(traverseContext);\n}\n\n/**\n * Maps children that are typically specified as `props.children`.\n *\n * The provided mapFunction(child, key, index) will be called for each\n * leaf child.\n *\n * @param {?*} children Children tree container.\n * @param {function(*, int)} func The map function.\n * @param {*} context Context for mapFunction.\n * @return {object} Object containing the ordered map of results.\n */\nfunction mapChildren(children, func, context) {\n  if (children == null) {\n    return children;\n  }\n  var result = [];\n  mapIntoWithKeyPrefixInternal(children, result, null, func, context);\n  return result;\n}\n\nfunction forEachSingleChildDummy(traverseContext, child, name) {\n  return null;\n}\n\n/**\n * Count the number of children that are typically specified as\n * `props.children`.\n *\n * @param {?*} children Children tree container.\n * @return {number} The number of children.\n */\nfunction countChildren(children, context) {\n  return traverseAllChildren(children, forEachSingleChildDummy, null);\n}\n\n/**\n * Flatten a children object (typically specified as `props.children`) and\n * return an array with appropriately re-keyed children.\n */\nfunction toArray(children) {\n  var result = [];\n  mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);\n  return result;\n}\n\nvar ReactChildren = {\n  forEach: forEachChildren,\n  map: mapChildren,\n  mapIntoWithKeyPrefixInternal: mapIntoWithKeyPrefixInternal,\n  count: countChildren,\n  toArray: toArray\n};\n\nmodule.exports = ReactChildren;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule traverseAllChildren\n */\n\n'use strict';\n\nvar ReactCurrentOwner = require('./ReactCurrentOwner');\nvar ReactElement = require('./ReactElement');\nvar ReactInstanceHandles = require('./ReactInstanceHandles');\n\nvar getIteratorFn = require('./getIteratorFn');\nvar invariant = require('fbjs/lib/invariant');\nvar warning = require('fbjs/lib/warning');\n\nvar SEPARATOR = ReactInstanceHandles.SEPARATOR;\nvar SUBSEPARATOR = ':';\n\n/**\n * TODO: Test that a single child and an array with one item have the same key\n * pattern.\n */\n\nvar userProvidedKeyEscaperLookup = {\n  '=': '=0',\n  '.': '=1',\n  ':': '=2'\n};\n\nvar userProvidedKeyEscapeRegex = /[=.:]/g;\n\nvar didWarnAboutMaps = false;\n\nfunction userProvidedKeyEscaper(match) {\n  return userProvidedKeyEscaperLookup[match];\n}\n\n/**\n * Generate a key string that identifies a component within a set.\n *\n * @param {*} component A component that could contain a manual key.\n * @param {number} index Index that is used if a manual key is not provided.\n * @return {string}\n */\nfunction getComponentKey(component, index) {\n  if (component && component.key != null) {\n    // Explicit key\n    return wrapUserProvidedKey(component.key);\n  }\n  // Implicit key determined by the index in the set\n  return index.toString(36);\n}\n\n/**\n * Escape a component key so that it is safe to use in a reactid.\n *\n * @param {*} text Component key to be escaped.\n * @return {string} An escaped string.\n */\nfunction escapeUserProvidedKey(text) {\n  return ('' + text).replace(userProvidedKeyEscapeRegex, userProvidedKeyEscaper);\n}\n\n/**\n * Wrap a `key` value explicitly provided by the user to distinguish it from\n * implicitly-generated keys generated by a component's index in its parent.\n *\n * @param {string} key Value of a user-provided `key` attribute\n * @return {string}\n */\nfunction wrapUserProvidedKey(key) {\n  return '$' + escapeUserProvidedKey(key);\n}\n\n/**\n * @param {?*} children Children tree container.\n * @param {!string} nameSoFar Name of the key path so far.\n * @param {!function} callback Callback to invoke with each child found.\n * @param {?*} traverseContext Used to pass information throughout the traversal\n * process.\n * @return {!number} The number of children in this subtree.\n */\nfunction traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {\n  var type = typeof children;\n\n  if (type === 'undefined' || type === 'boolean') {\n    // All of the above are perceived as null.\n    children = null;\n  }\n\n  if (children === null || type === 'string' || type === 'number' || ReactElement.isValidElement(children)) {\n    callback(traverseContext, children,\n    // If it's the only child, treat the name as if it was wrapped in an array\n    // so that it's consistent if the number of children grows.\n    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);\n    return 1;\n  }\n\n  var child;\n  var nextName;\n  var subtreeCount = 0; // Count of children found in the current subtree.\n  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;\n\n  if (Array.isArray(children)) {\n    for (var i = 0; i < children.length; i++) {\n      child = children[i];\n      nextName = nextNamePrefix + getComponentKey(child, i);\n      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);\n    }\n  } else {\n    var iteratorFn = getIteratorFn(children);\n    if (iteratorFn) {\n      var iterator = iteratorFn.call(children);\n      var step;\n      if (iteratorFn !== children.entries) {\n        var ii = 0;\n        while (!(step = iterator.next()).done) {\n          child = step.value;\n          nextName = nextNamePrefix + getComponentKey(child, ii++);\n          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);\n        }\n      } else {\n        if (process.env.NODE_ENV !== 'production') {\n          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.') : undefined;\n          didWarnAboutMaps = true;\n        }\n        // Iterator will provide entry [k,v] tuples rather than values.\n        while (!(step = iterator.next()).done) {\n          var entry = step.value;\n          if (entry) {\n            child = entry[1];\n            nextName = nextNamePrefix + wrapUserProvidedKey(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);\n            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);\n          }\n        }\n      }\n    } else if (type === 'object') {\n      var addendum = '';\n      if (process.env.NODE_ENV !== 'production') {\n        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';\n        if (children._isReactElement) {\n          addendum = ' It looks like you\\'re using an element created by a different ' + 'version of React. Make sure to use only one copy of React.';\n        }\n        if (ReactCurrentOwner.current) {\n          var name = ReactCurrentOwner.current.getName();\n          if (name) {\n            addendum += ' Check the render method of `' + name + '`.';\n          }\n        }\n      }\n      var childrenString = String(children);\n      !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : invariant(false) : undefined;\n    }\n  }\n\n  return subtreeCount;\n}\n\n/**\n * Traverses children that are typically specified as `props.children`, but\n * might also be specified through attributes:\n *\n * - `traverseAllChildren(this.props.children, ...)`\n * - `traverseAllChildren(this.props.leftPanelChildren, ...)`\n *\n * The `traverseContext` is an optional argument that is passed through the\n * entire traversal. It can be used to store accumulations or anything else that\n * the callback might find relevant.\n *\n * @param {?*} children Children tree object.\n * @param {!function} callback To invoke upon traversing each child.\n * @param {?*} traverseContext Context for traversal.\n * @return {!number} The number of children in this subtree.\n */\nfunction traverseAllChildren(children, callback, traverseContext) {\n  if (children == null) {\n    return 0;\n  }\n\n  return traverseAllChildrenImpl(children, '', callback, traverseContext);\n}\n\nmodule.exports = traverseAllChildren;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMSelect\n */\n\n'use strict';\n\nvar LinkedValueUtils = require('./LinkedValueUtils');\nvar ReactMount = require('./ReactMount');\nvar ReactUpdates = require('./ReactUpdates');\n\nvar assign = require('./Object.assign');\nvar warning = require('fbjs/lib/warning');\n\nvar valueContextKey = '__ReactDOMSelect_value$' + Math.random().toString(36).slice(2);\n\nfunction updateOptionsIfPendingUpdateAndMounted() {\n  if (this._rootNodeID && this._wrapperState.pendingUpdate) {\n    this._wrapperState.pendingUpdate = false;\n\n    var props = this._currentElement.props;\n    var value = LinkedValueUtils.getValue(props);\n\n    if (value != null) {\n      updateOptions(this, Boolean(props.multiple), value);\n    }\n  }\n}\n\nfunction getDeclarationErrorAddendum(owner) {\n  if (owner) {\n    var name = owner.getName();\n    if (name) {\n      return ' Check the render method of `' + name + '`.';\n    }\n  }\n  return '';\n}\n\nvar valuePropNames = ['value', 'defaultValue'];\n\n/**\n * Validation function for `value` and `defaultValue`.\n * @private\n */\nfunction checkSelectPropTypes(inst, props) {\n  var owner = inst._currentElement._owner;\n  LinkedValueUtils.checkPropTypes('select', props, owner);\n\n  for (var i = 0; i < valuePropNames.length; i++) {\n    var propName = valuePropNames[i];\n    if (props[propName] == null) {\n      continue;\n    }\n    if (props.multiple) {\n      process.env.NODE_ENV !== 'production' ? warning(Array.isArray(props[propName]), 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum(owner)) : undefined;\n    } else {\n      process.env.NODE_ENV !== 'production' ? warning(!Array.isArray(props[propName]), 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum(owner)) : undefined;\n    }\n  }\n}\n\n/**\n * @param {ReactDOMComponent} inst\n * @param {boolean} multiple\n * @param {*} propValue A stringable (with `multiple`, a list of stringables).\n * @private\n */\nfunction updateOptions(inst, multiple, propValue) {\n  var selectedValue, i;\n  var options = ReactMount.getNode(inst._rootNodeID).options;\n\n  if (multiple) {\n    selectedValue = {};\n    for (i = 0; i < propValue.length; i++) {\n      selectedValue['' + propValue[i]] = true;\n    }\n    for (i = 0; i < options.length; i++) {\n      var selected = selectedValue.hasOwnProperty(options[i].value);\n      if (options[i].selected !== selected) {\n        options[i].selected = selected;\n      }\n    }\n  } else {\n    // Do not set `select.value` as exact behavior isn't consistent across all\n    // browsers for all cases.\n    selectedValue = '' + propValue;\n    for (i = 0; i < options.length; i++) {\n      if (options[i].value === selectedValue) {\n        options[i].selected = true;\n        return;\n      }\n    }\n    if (options.length) {\n      options[0].selected = true;\n    }\n  }\n}\n\n/**\n * Implements a <select> native component that allows optionally setting the\n * props `value` and `defaultValue`. If `multiple` is false, the prop must be a\n * stringable. If `multiple` is true, the prop must be an array of stringables.\n *\n * If `value` is not supplied (or null/undefined), user actions that change the\n * selected option will trigger updates to the rendered options.\n *\n * If it is supplied (and not null/undefined), the rendered options will not\n * update in response to user actions. Instead, the `value` prop must change in\n * order for the rendered options to update.\n *\n * If `defaultValue` is provided, any options with the supplied values will be\n * selected.\n */\nvar ReactDOMSelect = {\n  valueContextKey: valueContextKey,\n\n  getNativeProps: function (inst, props, context) {\n    return assign({}, props, {\n      onChange: inst._wrapperState.onChange,\n      value: undefined\n    });\n  },\n\n  mountWrapper: function (inst, props) {\n    if (process.env.NODE_ENV !== 'production') {\n      checkSelectPropTypes(inst, props);\n    }\n\n    var value = LinkedValueUtils.getValue(props);\n    inst._wrapperState = {\n      pendingUpdate: false,\n      initialValue: value != null ? value : props.defaultValue,\n      onChange: _handleChange.bind(inst),\n      wasMultiple: Boolean(props.multiple)\n    };\n  },\n\n  processChildContext: function (inst, props, context) {\n    // Pass down initial value so initial generated markup has correct\n    // `selected` attributes\n    var childContext = assign({}, context);\n    childContext[valueContextKey] = inst._wrapperState.initialValue;\n    return childContext;\n  },\n\n  postUpdateWrapper: function (inst) {\n    var props = inst._currentElement.props;\n\n    // After the initial mount, we control selected-ness manually so don't pass\n    // the context value down\n    inst._wrapperState.initialValue = undefined;\n\n    var wasMultiple = inst._wrapperState.wasMultiple;\n    inst._wrapperState.wasMultiple = Boolean(props.multiple);\n\n    var value = LinkedValueUtils.getValue(props);\n    if (value != null) {\n      inst._wrapperState.pendingUpdate = false;\n      updateOptions(inst, Boolean(props.multiple), value);\n    } else if (wasMultiple !== Boolean(props.multiple)) {\n      // For simplicity, reapply `defaultValue` if `multiple` is toggled.\n      if (props.defaultValue != null) {\n        updateOptions(inst, Boolean(props.multiple), props.defaultValue);\n      } else {\n        // Revert the select back to its default unselected state.\n        updateOptions(inst, Boolean(props.multiple), props.multiple ? [] : '');\n      }\n    }\n  }\n};\n\nfunction _handleChange(event) {\n  var props = this._currentElement.props;\n  var returnValue = LinkedValueUtils.executeOnChange(props, event);\n\n  this._wrapperState.pendingUpdate = true;\n  ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);\n  return returnValue;\n}\n\nmodule.exports = ReactDOMSelect;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMTextarea\n */\n\n'use strict';\n\nvar LinkedValueUtils = require('./LinkedValueUtils');\nvar ReactDOMIDOperations = require('./ReactDOMIDOperations');\nvar ReactUpdates = require('./ReactUpdates');\n\nvar assign = require('./Object.assign');\nvar invariant = require('fbjs/lib/invariant');\nvar warning = require('fbjs/lib/warning');\n\nfunction forceUpdateIfMounted() {\n  if (this._rootNodeID) {\n    // DOM component is still mounted; update\n    ReactDOMTextarea.updateWrapper(this);\n  }\n}\n\n/**\n * Implements a <textarea> native component that allows setting `value`, and\n * `defaultValue`. This differs from the traditional DOM API because value is\n * usually set as PCDATA children.\n *\n * If `value` is not supplied (or null/undefined), user actions that affect the\n * value will trigger updates to the element.\n *\n * If `value` is supplied (and not null/undefined), the rendered element will\n * not trigger updates to the element. Instead, the `value` prop must change in\n * order for the rendered element to be updated.\n *\n * The rendered element will be initialized with an empty value, the prop\n * `defaultValue` if specified, or the children content (deprecated).\n */\nvar ReactDOMTextarea = {\n  getNativeProps: function (inst, props, context) {\n    !(props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : invariant(false) : undefined;\n\n    // Always set children to the same thing. In IE9, the selection range will\n    // get reset if `textContent` is mutated.\n    var nativeProps = assign({}, props, {\n      defaultValue: undefined,\n      value: undefined,\n      children: inst._wrapperState.initialValue,\n      onChange: inst._wrapperState.onChange\n    });\n\n    return nativeProps;\n  },\n\n  mountWrapper: function (inst, props) {\n    if (process.env.NODE_ENV !== 'production') {\n      LinkedValueUtils.checkPropTypes('textarea', props, inst._currentElement._owner);\n    }\n\n    var defaultValue = props.defaultValue;\n    // TODO (yungsters): Remove support for children content in <textarea>.\n    var children = props.children;\n    if (children != null) {\n      if (process.env.NODE_ENV !== 'production') {\n        process.env.NODE_ENV !== 'production' ? warning(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.') : undefined;\n      }\n      !(defaultValue == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : invariant(false) : undefined;\n      if (Array.isArray(children)) {\n        !(children.length <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, '<textarea> can only have at most one child.') : invariant(false) : undefined;\n        children = children[0];\n      }\n\n      defaultValue = '' + children;\n    }\n    if (defaultValue == null) {\n      defaultValue = '';\n    }\n    var value = LinkedValueUtils.getValue(props);\n\n    inst._wrapperState = {\n      // We save the initial value so that `ReactDOMComponent` doesn't update\n      // `textContent` (unnecessary since we update value).\n      // The initial value can be a boolean or object so that's why it's\n      // forced to be a string.\n      initialValue: '' + (value != null ? value : defaultValue),\n      onChange: _handleChange.bind(inst)\n    };\n  },\n\n  updateWrapper: function (inst) {\n    var props = inst._currentElement.props;\n    var value = LinkedValueUtils.getValue(props);\n    if (value != null) {\n      // Cast `value` to a string to ensure the value is set correctly. While\n      // browsers typically do this as necessary, jsdom doesn't.\n      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'value', '' + value);\n    }\n  }\n};\n\nfunction _handleChange(event) {\n  var props = this._currentElement.props;\n  var returnValue = LinkedValueUtils.executeOnChange(props, event);\n  ReactUpdates.asap(forceUpdateIfMounted, this);\n  return returnValue;\n}\n\nmodule.exports = ReactDOMTextarea;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactMultiChild\n * @typechecks static-only\n */\n\n'use strict';\n\nvar ReactComponentEnvironment = require('./ReactComponentEnvironment');\nvar ReactMultiChildUpdateTypes = require('./ReactMultiChildUpdateTypes');\n\nvar ReactCurrentOwner = require('./ReactCurrentOwner');\nvar ReactReconciler = require('./ReactReconciler');\nvar ReactChildReconciler = require('./ReactChildReconciler');\n\nvar flattenChildren = require('./flattenChildren');\n\n/**\n * Updating children of a component may trigger recursive updates. The depth is\n * used to batch recursive updates to render markup more efficiently.\n *\n * @type {number}\n * @private\n */\nvar updateDepth = 0;\n\n/**\n * Queue of update configuration objects.\n *\n * Each object has a `type` property that is in `ReactMultiChildUpdateTypes`.\n *\n * @type {array<object>}\n * @private\n */\nvar updateQueue = [];\n\n/**\n * Queue of markup to be rendered.\n *\n * @type {array<string>}\n * @private\n */\nvar markupQueue = [];\n\n/**\n * Enqueues markup to be rendered and inserted at a supplied index.\n *\n * @param {string} parentID ID of the parent component.\n * @param {string} markup Markup that renders into an element.\n * @param {number} toIndex Destination index.\n * @private\n */\nfunction enqueueInsertMarkup(parentID, markup, toIndex) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,\n    markupIndex: markupQueue.push(markup) - 1,\n    content: null,\n    fromIndex: null,\n    toIndex: toIndex\n  });\n}\n\n/**\n * Enqueues moving an existing element to another index.\n *\n * @param {string} parentID ID of the parent component.\n * @param {number} fromIndex Source index of the existing element.\n * @param {number} toIndex Destination index of the element.\n * @private\n */\nfunction enqueueMove(parentID, fromIndex, toIndex) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,\n    markupIndex: null,\n    content: null,\n    fromIndex: fromIndex,\n    toIndex: toIndex\n  });\n}\n\n/**\n * Enqueues removing an element at an index.\n *\n * @param {string} parentID ID of the parent component.\n * @param {number} fromIndex Index of the element to remove.\n * @private\n */\nfunction enqueueRemove(parentID, fromIndex) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.REMOVE_NODE,\n    markupIndex: null,\n    content: null,\n    fromIndex: fromIndex,\n    toIndex: null\n  });\n}\n\n/**\n * Enqueues setting the markup of a node.\n *\n * @param {string} parentID ID of the parent component.\n * @param {string} markup Markup that renders into an element.\n * @private\n */\nfunction enqueueSetMarkup(parentID, markup) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.SET_MARKUP,\n    markupIndex: null,\n    content: markup,\n    fromIndex: null,\n    toIndex: null\n  });\n}\n\n/**\n * Enqueues setting the text content.\n *\n * @param {string} parentID ID of the parent component.\n * @param {string} textContent Text content to set.\n * @private\n */\nfunction enqueueTextContent(parentID, textContent) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.TEXT_CONTENT,\n    markupIndex: null,\n    content: textContent,\n    fromIndex: null,\n    toIndex: null\n  });\n}\n\n/**\n * Processes any enqueued updates.\n *\n * @private\n */\nfunction processQueue() {\n  if (updateQueue.length) {\n    ReactComponentEnvironment.processChildrenUpdates(updateQueue, markupQueue);\n    clearQueue();\n  }\n}\n\n/**\n * Clears any enqueued updates.\n *\n * @private\n */\nfunction clearQueue() {\n  updateQueue.length = 0;\n  markupQueue.length = 0;\n}\n\n/**\n * ReactMultiChild are capable of reconciling multiple children.\n *\n * @class ReactMultiChild\n * @internal\n */\nvar ReactMultiChild = {\n\n  /**\n   * Provides common functionality for components that must reconcile multiple\n   * children. This is used by `ReactDOMComponent` to mount, update, and\n   * unmount child components.\n   *\n   * @lends {ReactMultiChild.prototype}\n   */\n  Mixin: {\n\n    _reconcilerInstantiateChildren: function (nestedChildren, transaction, context) {\n      if (process.env.NODE_ENV !== 'production') {\n        if (this._currentElement) {\n          try {\n            ReactCurrentOwner.current = this._currentElement._owner;\n            return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);\n          } finally {\n            ReactCurrentOwner.current = null;\n          }\n        }\n      }\n      return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);\n    },\n\n    _reconcilerUpdateChildren: function (prevChildren, nextNestedChildrenElements, transaction, context) {\n      var nextChildren;\n      if (process.env.NODE_ENV !== 'production') {\n        if (this._currentElement) {\n          try {\n            ReactCurrentOwner.current = this._currentElement._owner;\n            nextChildren = flattenChildren(nextNestedChildrenElements);\n          } finally {\n            ReactCurrentOwner.current = null;\n          }\n          return ReactChildReconciler.updateChildren(prevChildren, nextChildren, transaction, context);\n        }\n      }\n      nextChildren = flattenChildren(nextNestedChildrenElements);\n      return ReactChildReconciler.updateChildren(prevChildren, nextChildren, transaction, context);\n    },\n\n    /**\n     * Generates a \"mount image\" for each of the supplied children. In the case\n     * of `ReactDOMComponent`, a mount image is a string of markup.\n     *\n     * @param {?object} nestedChildren Nested child maps.\n     * @return {array} An array of mounted representations.\n     * @internal\n     */\n    mountChildren: function (nestedChildren, transaction, context) {\n      var children = this._reconcilerInstantiateChildren(nestedChildren, transaction, context);\n      this._renderedChildren = children;\n      var mountImages = [];\n      var index = 0;\n      for (var name in children) {\n        if (children.hasOwnProperty(name)) {\n          var child = children[name];\n          // Inlined for performance, see `ReactInstanceHandles.createReactID`.\n          var rootID = this._rootNodeID + name;\n          var mountImage = ReactReconciler.mountComponent(child, rootID, transaction, context);\n          child._mountIndex = index++;\n          mountImages.push(mountImage);\n        }\n      }\n      return mountImages;\n    },\n\n    /**\n     * Replaces any rendered children with a text content string.\n     *\n     * @param {string} nextContent String of content.\n     * @internal\n     */\n    updateTextContent: function (nextContent) {\n      updateDepth++;\n      var errorThrown = true;\n      try {\n        var prevChildren = this._renderedChildren;\n        // Remove any rendered children.\n        ReactChildReconciler.unmountChildren(prevChildren);\n        // TODO: The setTextContent operation should be enough\n        for (var name in prevChildren) {\n          if (prevChildren.hasOwnProperty(name)) {\n            this._unmountChild(prevChildren[name]);\n          }\n        }\n        // Set new text content.\n        this.setTextContent(nextContent);\n        errorThrown = false;\n      } finally {\n        updateDepth--;\n        if (!updateDepth) {\n          if (errorThrown) {\n            clearQueue();\n          } else {\n            processQueue();\n          }\n        }\n      }\n    },\n\n    /**\n     * Replaces any rendered children with a markup string.\n     *\n     * @param {string} nextMarkup String of markup.\n     * @internal\n     */\n    updateMarkup: function (nextMarkup) {\n      updateDepth++;\n      var errorThrown = true;\n      try {\n        var prevChildren = this._renderedChildren;\n        // Remove any rendered children.\n        ReactChildReconciler.unmountChildren(prevChildren);\n        for (var name in prevChildren) {\n          if (prevChildren.hasOwnProperty(name)) {\n            this._unmountChildByName(prevChildren[name], name);\n          }\n        }\n        this.setMarkup(nextMarkup);\n        errorThrown = false;\n      } finally {\n        updateDepth--;\n        if (!updateDepth) {\n          if (errorThrown) {\n            clearQueue();\n          } else {\n            processQueue();\n          }\n        }\n      }\n    },\n\n    /**\n     * Updates the rendered children with new children.\n     *\n     * @param {?object} nextNestedChildrenElements Nested child element maps.\n     * @param {ReactReconcileTransaction} transaction\n     * @internal\n     */\n    updateChildren: function (nextNestedChildrenElements, transaction, context) {\n      updateDepth++;\n      var errorThrown = true;\n      try {\n        this._updateChildren(nextNestedChildrenElements, transaction, context);\n        errorThrown = false;\n      } finally {\n        updateDepth--;\n        if (!updateDepth) {\n          if (errorThrown) {\n            clearQueue();\n          } else {\n            processQueue();\n          }\n        }\n      }\n    },\n\n    /**\n     * Improve performance by isolating this hot code path from the try/catch\n     * block in `updateChildren`.\n     *\n     * @param {?object} nextNestedChildrenElements Nested child element maps.\n     * @param {ReactReconcileTransaction} transaction\n     * @final\n     * @protected\n     */\n    _updateChildren: function (nextNestedChildrenElements, transaction, context) {\n      var prevChildren = this._renderedChildren;\n      var nextChildren = this._reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, transaction, context);\n      this._renderedChildren = nextChildren;\n      if (!nextChildren && !prevChildren) {\n        return;\n      }\n      var name;\n      // `nextIndex` will increment for each child in `nextChildren`, but\n      // `lastIndex` will be the last index visited in `prevChildren`.\n      var lastIndex = 0;\n      var nextIndex = 0;\n      for (name in nextChildren) {\n        if (!nextChildren.hasOwnProperty(name)) {\n          continue;\n        }\n        var prevChild = prevChildren && prevChildren[name];\n        var nextChild = nextChildren[name];\n        if (prevChild === nextChild) {\n          this.moveChild(prevChild, nextIndex, lastIndex);\n          lastIndex = Math.max(prevChild._mountIndex, lastIndex);\n          prevChild._mountIndex = nextIndex;\n        } else {\n          if (prevChild) {\n            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.\n            lastIndex = Math.max(prevChild._mountIndex, lastIndex);\n            this._unmountChild(prevChild);\n          }\n          // The child must be instantiated before it's mounted.\n          this._mountChildByNameAtIndex(nextChild, name, nextIndex, transaction, context);\n        }\n        nextIndex++;\n      }\n      // Remove children that are no longer present.\n      for (name in prevChildren) {\n        if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {\n          this._unmountChild(prevChildren[name]);\n        }\n      }\n    },\n\n    /**\n     * Unmounts all rendered children. This should be used to clean up children\n     * when this component is unmounted.\n     *\n     * @internal\n     */\n    unmountChildren: function () {\n      var renderedChildren = this._renderedChildren;\n      ReactChildReconciler.unmountChildren(renderedChildren);\n      this._renderedChildren = null;\n    },\n\n    /**\n     * Moves a child component to the supplied index.\n     *\n     * @param {ReactComponent} child Component to move.\n     * @param {number} toIndex Destination index of the element.\n     * @param {number} lastIndex Last index visited of the siblings of `child`.\n     * @protected\n     */\n    moveChild: function (child, toIndex, lastIndex) {\n      // If the index of `child` is less than `lastIndex`, then it needs to\n      // be moved. Otherwise, we do not need to move it because a child will be\n      // inserted or moved before `child`.\n      if (child._mountIndex < lastIndex) {\n        enqueueMove(this._rootNodeID, child._mountIndex, toIndex);\n      }\n    },\n\n    /**\n     * Creates a child component.\n     *\n     * @param {ReactComponent} child Component to create.\n     * @param {string} mountImage Markup to insert.\n     * @protected\n     */\n    createChild: function (child, mountImage) {\n      enqueueInsertMarkup(this._rootNodeID, mountImage, child._mountIndex);\n    },\n\n    /**\n     * Removes a child component.\n     *\n     * @param {ReactComponent} child Child to remove.\n     * @protected\n     */\n    removeChild: function (child) {\n      enqueueRemove(this._rootNodeID, child._mountIndex);\n    },\n\n    /**\n     * Sets this text content string.\n     *\n     * @param {string} textContent Text content to set.\n     * @protected\n     */\n    setTextContent: function (textContent) {\n      enqueueTextContent(this._rootNodeID, textContent);\n    },\n\n    /**\n     * Sets this markup string.\n     *\n     * @param {string} markup Markup to set.\n     * @protected\n     */\n    setMarkup: function (markup) {\n      enqueueSetMarkup(this._rootNodeID, markup);\n    },\n\n    /**\n     * Mounts a child with the supplied name.\n     *\n     * NOTE: This is part of `updateChildren` and is here for readability.\n     *\n     * @param {ReactComponent} child Component to mount.\n     * @param {string} name Name of the child.\n     * @param {number} index Index at which to insert the child.\n     * @param {ReactReconcileTransaction} transaction\n     * @private\n     */\n    _mountChildByNameAtIndex: function (child, name, index, transaction, context) {\n      // Inlined for performance, see `ReactInstanceHandles.createReactID`.\n      var rootID = this._rootNodeID + name;\n      var mountImage = ReactReconciler.mountComponent(child, rootID, transaction, context);\n      child._mountIndex = index;\n      this.createChild(child, mountImage);\n    },\n\n    /**\n     * Unmounts a rendered child.\n     *\n     * NOTE: This is part of `updateChildren` and is here for readability.\n     *\n     * @param {ReactComponent} child Component to unmount.\n     * @private\n     */\n    _unmountChild: function (child) {\n      this.removeChild(child);\n      child._mountIndex = null;\n    }\n\n  }\n\n};\n\nmodule.exports = ReactMultiChild;","/**\n * Copyright 2014-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactChildReconciler\n * @typechecks static-only\n */\n\n'use strict';\n\nvar ReactReconciler = require('./ReactReconciler');\n\nvar instantiateReactComponent = require('./instantiateReactComponent');\nvar shouldUpdateReactComponent = require('./shouldUpdateReactComponent');\nvar traverseAllChildren = require('./traverseAllChildren');\nvar warning = require('fbjs/lib/warning');\n\nfunction instantiateChild(childInstances, child, name) {\n  // We found a component instance.\n  var keyUnique = childInstances[name] === undefined;\n  if (process.env.NODE_ENV !== 'production') {\n    process.env.NODE_ENV !== 'production' ? warning(keyUnique, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.', name) : undefined;\n  }\n  if (child != null && keyUnique) {\n    childInstances[name] = instantiateReactComponent(child, null);\n  }\n}\n\n/**\n * ReactChildReconciler provides helpers for initializing or updating a set of\n * children. Its output is suitable for passing it onto ReactMultiChild which\n * does diffed reordering and insertion.\n */\nvar ReactChildReconciler = {\n  /**\n   * Generates a \"mount image\" for each of the supplied children. In the case\n   * of `ReactDOMComponent`, a mount image is a string of markup.\n   *\n   * @param {?object} nestedChildNodes Nested child maps.\n   * @return {?object} A set of child instances.\n   * @internal\n   */\n  instantiateChildren: function (nestedChildNodes, transaction, context) {\n    if (nestedChildNodes == null) {\n      return null;\n    }\n    var childInstances = {};\n    traverseAllChildren(nestedChildNodes, instantiateChild, childInstances);\n    return childInstances;\n  },\n\n  /**\n   * Updates the rendered children and returns a new set of children.\n   *\n   * @param {?object} prevChildren Previously initialized set of children.\n   * @param {?object} nextChildren Flat child element maps.\n   * @param {ReactReconcileTransaction} transaction\n   * @param {object} context\n   * @return {?object} A new set of child instances.\n   * @internal\n   */\n  updateChildren: function (prevChildren, nextChildren, transaction, context) {\n    // We currently don't have a way to track moves here but if we use iterators\n    // instead of for..in we can zip the iterators and check if an item has\n    // moved.\n    // TODO: If nothing has changed, return the prevChildren object so that we\n    // can quickly bailout if nothing has changed.\n    if (!nextChildren && !prevChildren) {\n      return null;\n    }\n    var name;\n    for (name in nextChildren) {\n      if (!nextChildren.hasOwnProperty(name)) {\n        continue;\n      }\n      var prevChild = prevChildren && prevChildren[name];\n      var prevElement = prevChild && prevChild._currentElement;\n      var nextElement = nextChildren[name];\n      if (prevChild != null && shouldUpdateReactComponent(prevElement, nextElement)) {\n        ReactReconciler.receiveComponent(prevChild, nextElement, transaction, context);\n        nextChildren[name] = prevChild;\n      } else {\n        if (prevChild) {\n          ReactReconciler.unmountComponent(prevChild, name);\n        }\n        // The child must be instantiated before it's mounted.\n        var nextChildInstance = instantiateReactComponent(nextElement, null);\n        nextChildren[name] = nextChildInstance;\n      }\n    }\n    // Unmount children that are no longer present.\n    for (name in prevChildren) {\n      if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {\n        ReactReconciler.unmountComponent(prevChildren[name]);\n      }\n    }\n    return nextChildren;\n  },\n\n  /**\n   * Unmounts all rendered children. This should be used to clean up children\n   * when this component is unmounted.\n   *\n   * @param {?object} renderedChildren Previously initialized set of children.\n   * @internal\n   */\n  unmountChildren: function (renderedChildren) {\n    for (var name in renderedChildren) {\n      if (renderedChildren.hasOwnProperty(name)) {\n        var renderedChild = renderedChildren[name];\n        ReactReconciler.unmountComponent(renderedChild);\n      }\n    }\n  }\n\n};\n\nmodule.exports = ReactChildReconciler;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule flattenChildren\n */\n\n'use strict';\n\nvar traverseAllChildren = require('./traverseAllChildren');\nvar warning = require('fbjs/lib/warning');\n\n/**\n * @param {function} traverseContext Context passed through traversal.\n * @param {?ReactComponent} child React child component.\n * @param {!string} name String name of key path to child.\n */\nfunction flattenSingleChildIntoContext(traverseContext, child, name) {\n  // We found a component instance.\n  var result = traverseContext;\n  var keyUnique = result[name] === undefined;\n  if (process.env.NODE_ENV !== 'production') {\n    process.env.NODE_ENV !== 'production' ? warning(keyUnique, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.', name) : undefined;\n  }\n  if (keyUnique && child != null) {\n    result[name] = child;\n  }\n}\n\n/**\n * Flattens children that are typically specified as `props.children`. Any null\n * children will not be included in the resulting object.\n * @return {!object} flattened children keyed by name.\n */\nfunction flattenChildren(children) {\n  if (children == null) {\n    return children;\n  }\n  var result = {};\n  traverseAllChildren(children, flattenSingleChildIntoContext, result);\n  return result;\n}\n\nmodule.exports = flattenChildren;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactEventListener\n * @typechecks static-only\n */\n\n'use strict';\n\nvar EventListener = require('fbjs/lib/EventListener');\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\nvar PooledClass = require('./PooledClass');\nvar ReactInstanceHandles = require('./ReactInstanceHandles');\nvar ReactMount = require('./ReactMount');\nvar ReactUpdates = require('./ReactUpdates');\n\nvar assign = require('./Object.assign');\nvar getEventTarget = require('./getEventTarget');\nvar getUnboundedScrollPosition = require('fbjs/lib/getUnboundedScrollPosition');\n\nvar DOCUMENT_FRAGMENT_NODE_TYPE = 11;\n\n/**\n * Finds the parent React component of `node`.\n *\n * @param {*} node\n * @return {?DOMEventTarget} Parent container, or `null` if the specified node\n *                           is not nested.\n */\nfunction findParent(node) {\n  // TODO: It may be a good idea to cache this to prevent unnecessary DOM\n  // traversal, but caching is difficult to do correctly without using a\n  // mutation observer to listen for all DOM changes.\n  var nodeID = ReactMount.getID(node);\n  var rootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);\n  var container = ReactMount.findReactContainerForID(rootID);\n  var parent = ReactMount.getFirstReactDOM(container);\n  return parent;\n}\n\n// Used to store ancestor hierarchy in top level callback\nfunction TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {\n  this.topLevelType = topLevelType;\n  this.nativeEvent = nativeEvent;\n  this.ancestors = [];\n}\nassign(TopLevelCallbackBookKeeping.prototype, {\n  destructor: function () {\n    this.topLevelType = null;\n    this.nativeEvent = null;\n    this.ancestors.length = 0;\n  }\n});\nPooledClass.addPoolingTo(TopLevelCallbackBookKeeping, PooledClass.twoArgumentPooler);\n\nfunction handleTopLevelImpl(bookKeeping) {\n  // TODO: Re-enable event.path handling\n  //\n  // if (bookKeeping.nativeEvent.path && bookKeeping.nativeEvent.path.length > 1) {\n  //   // New browsers have a path attribute on native events\n  //   handleTopLevelWithPath(bookKeeping);\n  // } else {\n  //   // Legacy browsers don't have a path attribute on native events\n  //   handleTopLevelWithoutPath(bookKeeping);\n  // }\n\n  void handleTopLevelWithPath; // temporarily unused\n  handleTopLevelWithoutPath(bookKeeping);\n}\n\n// Legacy browsers don't have a path attribute on native events\nfunction handleTopLevelWithoutPath(bookKeeping) {\n  var topLevelTarget = ReactMount.getFirstReactDOM(getEventTarget(bookKeeping.nativeEvent)) || window;\n\n  // Loop through the hierarchy, in case there's any nested components.\n  // It's important that we build the array of ancestors before calling any\n  // event handlers, because event handlers can modify the DOM, leading to\n  // inconsistencies with ReactMount's node cache. See #1105.\n  var ancestor = topLevelTarget;\n  while (ancestor) {\n    bookKeeping.ancestors.push(ancestor);\n    ancestor = findParent(ancestor);\n  }\n\n  for (var i = 0; i < bookKeeping.ancestors.length; i++) {\n    topLevelTarget = bookKeeping.ancestors[i];\n    var topLevelTargetID = ReactMount.getID(topLevelTarget) || '';\n    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, topLevelTarget, topLevelTargetID, bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));\n  }\n}\n\n// New browsers have a path attribute on native events\nfunction handleTopLevelWithPath(bookKeeping) {\n  var path = bookKeeping.nativeEvent.path;\n  var currentNativeTarget = path[0];\n  var eventsFired = 0;\n  for (var i = 0; i < path.length; i++) {\n    var currentPathElement = path[i];\n    if (currentPathElement.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE) {\n      currentNativeTarget = path[i + 1];\n    }\n    // TODO: slow\n    var reactParent = ReactMount.getFirstReactDOM(currentPathElement);\n    if (reactParent === currentPathElement) {\n      var currentPathElementID = ReactMount.getID(currentPathElement);\n      var newRootID = ReactInstanceHandles.getReactRootIDFromNodeID(currentPathElementID);\n      bookKeeping.ancestors.push(currentPathElement);\n\n      var topLevelTargetID = ReactMount.getID(currentPathElement) || '';\n      eventsFired++;\n      ReactEventListener._handleTopLevel(bookKeeping.topLevelType, currentPathElement, topLevelTargetID, bookKeeping.nativeEvent, currentNativeTarget);\n\n      // Jump to the root of this React render tree\n      while (currentPathElementID !== newRootID) {\n        i++;\n        currentPathElement = path[i];\n        currentPathElementID = ReactMount.getID(currentPathElement);\n      }\n    }\n  }\n  if (eventsFired === 0) {\n    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, window, '', bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));\n  }\n}\n\nfunction scrollValueMonitor(cb) {\n  var scrollPosition = getUnboundedScrollPosition(window);\n  cb(scrollPosition);\n}\n\nvar ReactEventListener = {\n  _enabled: true,\n  _handleTopLevel: null,\n\n  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,\n\n  setHandleTopLevel: function (handleTopLevel) {\n    ReactEventListener._handleTopLevel = handleTopLevel;\n  },\n\n  setEnabled: function (enabled) {\n    ReactEventListener._enabled = !!enabled;\n  },\n\n  isEnabled: function () {\n    return ReactEventListener._enabled;\n  },\n\n  /**\n   * Traps top-level events by using event bubbling.\n   *\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {string} handlerBaseName Event name (e.g. \"click\").\n   * @param {object} handle Element on which to attach listener.\n   * @return {?object} An object with a remove function which will forcefully\n   *                  remove the listener.\n   * @internal\n   */\n  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {\n    var element = handle;\n    if (!element) {\n      return null;\n    }\n    return EventListener.listen(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));\n  },\n\n  /**\n   * Traps a top-level event by using event capturing.\n   *\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {string} handlerBaseName Event name (e.g. \"click\").\n   * @param {object} handle Element on which to attach listener.\n   * @return {?object} An object with a remove function which will forcefully\n   *                  remove the listener.\n   * @internal\n   */\n  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {\n    var element = handle;\n    if (!element) {\n      return null;\n    }\n    return EventListener.capture(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));\n  },\n\n  monitorScrollValue: function (refresh) {\n    var callback = scrollValueMonitor.bind(null, refresh);\n    EventListener.listen(window, 'scroll', callback);\n  },\n\n  dispatchEvent: function (topLevelType, nativeEvent) {\n    if (!ReactEventListener._enabled) {\n      return;\n    }\n\n    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(topLevelType, nativeEvent);\n    try {\n      // Event queue being processed in the same cycle allows\n      // `preventDefault`.\n      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);\n    } finally {\n      TopLevelCallbackBookKeeping.release(bookKeeping);\n    }\n  }\n};\n\nmodule.exports = ReactEventListener;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactInjection\n */\n\n'use strict';\n\nvar DOMProperty = require('./DOMProperty');\nvar EventPluginHub = require('./EventPluginHub');\nvar ReactComponentEnvironment = require('./ReactComponentEnvironment');\nvar ReactClass = require('./ReactClass');\nvar ReactEmptyComponent = require('./ReactEmptyComponent');\nvar ReactBrowserEventEmitter = require('./ReactBrowserEventEmitter');\nvar ReactNativeComponent = require('./ReactNativeComponent');\nvar ReactPerf = require('./ReactPerf');\nvar ReactRootIndex = require('./ReactRootIndex');\nvar ReactUpdates = require('./ReactUpdates');\n\nvar ReactInjection = {\n  Component: ReactComponentEnvironment.injection,\n  Class: ReactClass.injection,\n  DOMProperty: DOMProperty.injection,\n  EmptyComponent: ReactEmptyComponent.injection,\n  EventPluginHub: EventPluginHub.injection,\n  EventEmitter: ReactBrowserEventEmitter.injection,\n  NativeComponent: ReactNativeComponent.injection,\n  Perf: ReactPerf.injection,\n  RootIndex: ReactRootIndex.injection,\n  Updates: ReactUpdates.injection\n};\n\nmodule.exports = ReactInjection;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactClass\n */\n\n'use strict';\n\nvar ReactComponent = require('./ReactComponent');\nvar ReactElement = require('./ReactElement');\nvar ReactPropTypeLocations = require('./ReactPropTypeLocations');\nvar ReactPropTypeLocationNames = require('./ReactPropTypeLocationNames');\nvar ReactNoopUpdateQueue = require('./ReactNoopUpdateQueue');\n\nvar assign = require('./Object.assign');\nvar emptyObject = require('fbjs/lib/emptyObject');\nvar invariant = require('fbjs/lib/invariant');\nvar keyMirror = require('fbjs/lib/keyMirror');\nvar keyOf = require('fbjs/lib/keyOf');\nvar warning = require('fbjs/lib/warning');\n\nvar MIXINS_KEY = keyOf({ mixins: null });\n\n/**\n * Policies that describe methods in `ReactClassInterface`.\n */\nvar SpecPolicy = keyMirror({\n  /**\n   * These methods may be defined only once by the class specification or mixin.\n   */\n  DEFINE_ONCE: null,\n  /**\n   * These methods may be defined by both the class specification and mixins.\n   * Subsequent definitions will be chained. These methods must return void.\n   */\n  DEFINE_MANY: null,\n  /**\n   * These methods are overriding the base class.\n   */\n  OVERRIDE_BASE: null,\n  /**\n   * These methods are similar to DEFINE_MANY, except we assume they return\n   * objects. We try to merge the keys of the return values of all the mixed in\n   * functions. If there is a key conflict we throw.\n   */\n  DEFINE_MANY_MERGED: null\n});\n\nvar injectedMixins = [];\n\nvar warnedSetProps = false;\nfunction warnSetProps() {\n  if (!warnedSetProps) {\n    warnedSetProps = true;\n    process.env.NODE_ENV !== 'production' ? warning(false, 'setProps(...) and replaceProps(...) are deprecated. ' + 'Instead, call render again at the top level.') : undefined;\n  }\n}\n\n/**\n * Composite components are higher-level components that compose other composite\n * or native components.\n *\n * To create a new type of `ReactClass`, pass a specification of\n * your new class to `React.createClass`. The only requirement of your class\n * specification is that you implement a `render` method.\n *\n *   var MyComponent = React.createClass({\n *     render: function() {\n *       return <div>Hello World</div>;\n *     }\n *   });\n *\n * The class specification supports a specific protocol of methods that have\n * special meaning (e.g. `render`). See `ReactClassInterface` for\n * more the comprehensive protocol. Any other properties and methods in the\n * class specification will be available on the prototype.\n *\n * @interface ReactClassInterface\n * @internal\n */\nvar ReactClassInterface = {\n\n  /**\n   * An array of Mixin objects to include when defining your component.\n   *\n   * @type {array}\n   * @optional\n   */\n  mixins: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * An object containing properties and methods that should be defined on\n   * the component's constructor instead of its prototype (static methods).\n   *\n   * @type {object}\n   * @optional\n   */\n  statics: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Definition of prop types for this component.\n   *\n   * @type {object}\n   * @optional\n   */\n  propTypes: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Definition of context types for this component.\n   *\n   * @type {object}\n   * @optional\n   */\n  contextTypes: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Definition of context types this component sets for its children.\n   *\n   * @type {object}\n   * @optional\n   */\n  childContextTypes: SpecPolicy.DEFINE_MANY,\n\n  // ==== Definition methods ====\n\n  /**\n   * Invoked when the component is mounted. Values in the mapping will be set on\n   * `this.props` if that prop is not specified (i.e. using an `in` check).\n   *\n   * This method is invoked before `getInitialState` and therefore cannot rely\n   * on `this.state` or use `this.setState`.\n   *\n   * @return {object}\n   * @optional\n   */\n  getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,\n\n  /**\n   * Invoked once before the component is mounted. The return value will be used\n   * as the initial value of `this.state`.\n   *\n   *   getInitialState: function() {\n   *     return {\n   *       isOn: false,\n   *       fooBaz: new BazFoo()\n   *     }\n   *   }\n   *\n   * @return {object}\n   * @optional\n   */\n  getInitialState: SpecPolicy.DEFINE_MANY_MERGED,\n\n  /**\n   * @return {object}\n   * @optional\n   */\n  getChildContext: SpecPolicy.DEFINE_MANY_MERGED,\n\n  /**\n   * Uses props from `this.props` and state from `this.state` to render the\n   * structure of the component.\n   *\n   * No guarantees are made about when or how often this method is invoked, so\n   * it must not have side effects.\n   *\n   *   render: function() {\n   *     var name = this.props.name;\n   *     return <div>Hello, {name}!</div>;\n   *   }\n   *\n   * @return {ReactComponent}\n   * @nosideeffects\n   * @required\n   */\n  render: SpecPolicy.DEFINE_ONCE,\n\n  // ==== Delegate methods ====\n\n  /**\n   * Invoked when the component is initially created and about to be mounted.\n   * This may have side effects, but any external subscriptions or data created\n   * by this method must be cleaned up in `componentWillUnmount`.\n   *\n   * @optional\n   */\n  componentWillMount: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Invoked when the component has been mounted and has a DOM representation.\n   * However, there is no guarantee that the DOM node is in the document.\n   *\n   * Use this as an opportunity to operate on the DOM when the component has\n   * been mounted (initialized and rendered) for the first time.\n   *\n   * @param {DOMElement} rootNode DOM element representing the component.\n   * @optional\n   */\n  componentDidMount: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Invoked before the component receives new props.\n   *\n   * Use this as an opportunity to react to a prop transition by updating the\n   * state using `this.setState`. Current props are accessed via `this.props`.\n   *\n   *   componentWillReceiveProps: function(nextProps, nextContext) {\n   *     this.setState({\n   *       likesIncreasing: nextProps.likeCount > this.props.likeCount\n   *     });\n   *   }\n   *\n   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop\n   * transition may cause a state change, but the opposite is not true. If you\n   * need it, you are probably looking for `componentWillUpdate`.\n   *\n   * @param {object} nextProps\n   * @optional\n   */\n  componentWillReceiveProps: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Invoked while deciding if the component should be updated as a result of\n   * receiving new props, state and/or context.\n   *\n   * Use this as an opportunity to `return false` when you're certain that the\n   * transition to the new props/state/context will not require a component\n   * update.\n   *\n   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {\n   *     return !equal(nextProps, this.props) ||\n   *       !equal(nextState, this.state) ||\n   *       !equal(nextContext, this.context);\n   *   }\n   *\n   * @param {object} nextProps\n   * @param {?object} nextState\n   * @param {?object} nextContext\n   * @return {boolean} True if the component should update.\n   * @optional\n   */\n  shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,\n\n  /**\n   * Invoked when the component is about to update due to a transition from\n   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`\n   * and `nextContext`.\n   *\n   * Use this as an opportunity to perform preparation before an update occurs.\n   *\n   * NOTE: You **cannot** use `this.setState()` in this method.\n   *\n   * @param {object} nextProps\n   * @param {?object} nextState\n   * @param {?object} nextContext\n   * @param {ReactReconcileTransaction} transaction\n   * @optional\n   */\n  componentWillUpdate: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Invoked when the component's DOM representation has been updated.\n   *\n   * Use this as an opportunity to operate on the DOM when the component has\n   * been updated.\n   *\n   * @param {object} prevProps\n   * @param {?object} prevState\n   * @param {?object} prevContext\n   * @param {DOMElement} rootNode DOM element representing the component.\n   * @optional\n   */\n  componentDidUpdate: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Invoked when the component is about to be removed from its parent and have\n   * its DOM representation destroyed.\n   *\n   * Use this as an opportunity to deallocate any external resources.\n   *\n   * NOTE: There is no `componentDidUnmount` since your component will have been\n   * destroyed by that point.\n   *\n   * @optional\n   */\n  componentWillUnmount: SpecPolicy.DEFINE_MANY,\n\n  // ==== Advanced methods ====\n\n  /**\n   * Updates the component's currently mounted DOM representation.\n   *\n   * By default, this implements React's rendering and reconciliation algorithm.\n   * Sophisticated clients may wish to override this.\n   *\n   * @param {ReactReconcileTransaction} transaction\n   * @internal\n   * @overridable\n   */\n  updateComponent: SpecPolicy.OVERRIDE_BASE\n\n};\n\n/**\n * Mapping from class specification keys to special processing functions.\n *\n * Although these are declared like instance properties in the specification\n * when defining classes using `React.createClass`, they are actually static\n * and are accessible on the constructor instead of the prototype. Despite\n * being static, they must be defined outside of the \"statics\" key under\n * which all other static methods are defined.\n */\nvar RESERVED_SPEC_KEYS = {\n  displayName: function (Constructor, displayName) {\n    Constructor.displayName = displayName;\n  },\n  mixins: function (Constructor, mixins) {\n    if (mixins) {\n      for (var i = 0; i < mixins.length; i++) {\n        mixSpecIntoComponent(Constructor, mixins[i]);\n      }\n    }\n  },\n  childContextTypes: function (Constructor, childContextTypes) {\n    if (process.env.NODE_ENV !== 'production') {\n      validateTypeDef(Constructor, childContextTypes, ReactPropTypeLocations.childContext);\n    }\n    Constructor.childContextTypes = assign({}, Constructor.childContextTypes, childContextTypes);\n  },\n  contextTypes: function (Constructor, contextTypes) {\n    if (process.env.NODE_ENV !== 'production') {\n      validateTypeDef(Constructor, contextTypes, ReactPropTypeLocations.context);\n    }\n    Constructor.contextTypes = assign({}, Constructor.contextTypes, contextTypes);\n  },\n  /**\n   * Special case getDefaultProps which should move into statics but requires\n   * automatic merging.\n   */\n  getDefaultProps: function (Constructor, getDefaultProps) {\n    if (Constructor.getDefaultProps) {\n      Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, getDefaultProps);\n    } else {\n      Constructor.getDefaultProps = getDefaultProps;\n    }\n  },\n  propTypes: function (Constructor, propTypes) {\n    if (process.env.NODE_ENV !== 'production') {\n      validateTypeDef(Constructor, propTypes, ReactPropTypeLocations.prop);\n    }\n    Constructor.propTypes = assign({}, Constructor.propTypes, propTypes);\n  },\n  statics: function (Constructor, statics) {\n    mixStaticSpecIntoComponent(Constructor, statics);\n  },\n  autobind: function () {} };\n\n// noop\nfunction validateTypeDef(Constructor, typeDef, location) {\n  for (var propName in typeDef) {\n    if (typeDef.hasOwnProperty(propName)) {\n      // use a warning instead of an invariant so components\n      // don't show up in prod but not in __DEV__\n      process.env.NODE_ENV !== 'production' ? warning(typeof typeDef[propName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', Constructor.displayName || 'ReactClass', ReactPropTypeLocationNames[location], propName) : undefined;\n    }\n  }\n}\n\nfunction validateMethodOverride(proto, name) {\n  var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null;\n\n  // Disallow overriding of base class methods unless explicitly allowed.\n  if (ReactClassMixin.hasOwnProperty(name)) {\n    !(specPolicy === SpecPolicy.OVERRIDE_BASE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to override ' + '`%s` from your class specification. Ensure that your method names ' + 'do not overlap with React methods.', name) : invariant(false) : undefined;\n  }\n\n  // Disallow defining methods more than once unless explicitly allowed.\n  if (proto.hasOwnProperty(name)) {\n    !(specPolicy === SpecPolicy.DEFINE_MANY || specPolicy === SpecPolicy.DEFINE_MANY_MERGED) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to define ' + '`%s` on your component more than once. This conflict may be due ' + 'to a mixin.', name) : invariant(false) : undefined;\n  }\n}\n\n/**\n * Mixin helper which handles policy validation and reserved\n * specification keys when building React classses.\n */\nfunction mixSpecIntoComponent(Constructor, spec) {\n  if (!spec) {\n    return;\n  }\n\n  !(typeof spec !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\\'re attempting to ' + 'use a component class as a mixin. Instead, just use a regular object.') : invariant(false) : undefined;\n  !!ReactElement.isValidElement(spec) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\\'re attempting to ' + 'use a component as a mixin. Instead, just use a regular object.') : invariant(false) : undefined;\n\n  var proto = Constructor.prototype;\n\n  // By handling mixins before any other properties, we ensure the same\n  // chaining order is applied to methods with DEFINE_MANY policy, whether\n  // mixins are listed before or after these methods in the spec.\n  if (spec.hasOwnProperty(MIXINS_KEY)) {\n    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);\n  }\n\n  for (var name in spec) {\n    if (!spec.hasOwnProperty(name)) {\n      continue;\n    }\n\n    if (name === MIXINS_KEY) {\n      // We have already handled mixins in a special case above.\n      continue;\n    }\n\n    var property = spec[name];\n    validateMethodOverride(proto, name);\n\n    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {\n      RESERVED_SPEC_KEYS[name](Constructor, property);\n    } else {\n      // Setup methods on prototype:\n      // The following member methods should not be automatically bound:\n      // 1. Expected ReactClass methods (in the \"interface\").\n      // 2. Overridden methods (that were mixed in).\n      var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);\n      var isAlreadyDefined = proto.hasOwnProperty(name);\n      var isFunction = typeof property === 'function';\n      var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;\n\n      if (shouldAutoBind) {\n        if (!proto.__reactAutoBindMap) {\n          proto.__reactAutoBindMap = {};\n        }\n        proto.__reactAutoBindMap[name] = property;\n        proto[name] = property;\n      } else {\n        if (isAlreadyDefined) {\n          var specPolicy = ReactClassInterface[name];\n\n          // These cases should already be caught by validateMethodOverride.\n          !(isReactClassMethod && (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: Unexpected spec policy %s for key %s ' + 'when mixing in component specs.', specPolicy, name) : invariant(false) : undefined;\n\n          // For methods which are defined more than once, call the existing\n          // methods before calling the new property, merging if appropriate.\n          if (specPolicy === SpecPolicy.DEFINE_MANY_MERGED) {\n            proto[name] = createMergedResultFunction(proto[name], property);\n          } else if (specPolicy === SpecPolicy.DEFINE_MANY) {\n            proto[name] = createChainedFunction(proto[name], property);\n          }\n        } else {\n          proto[name] = property;\n          if (process.env.NODE_ENV !== 'production') {\n            // Add verbose displayName to the function, which helps when looking\n            // at profiling tools.\n            if (typeof property === 'function' && spec.displayName) {\n              proto[name].displayName = spec.displayName + '_' + name;\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nfunction mixStaticSpecIntoComponent(Constructor, statics) {\n  if (!statics) {\n    return;\n  }\n  for (var name in statics) {\n    var property = statics[name];\n    if (!statics.hasOwnProperty(name)) {\n      continue;\n    }\n\n    var isReserved = (name in RESERVED_SPEC_KEYS);\n    !!isReserved ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define a reserved ' + 'property, `%s`, that shouldn\\'t be on the \"statics\" key. Define it ' + 'as an instance property instead; it will still be accessible on the ' + 'constructor.', name) : invariant(false) : undefined;\n\n    var isInherited = (name in Constructor);\n    !!isInherited ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define ' + '`%s` on your component more than once. This conflict may be ' + 'due to a mixin.', name) : invariant(false) : undefined;\n    Constructor[name] = property;\n  }\n}\n\n/**\n * Merge two objects, but throw if both contain the same key.\n *\n * @param {object} one The first object, which is mutated.\n * @param {object} two The second object\n * @return {object} one after it has been mutated to contain everything in two.\n */\nfunction mergeIntoWithNoDuplicateKeys(one, two) {\n  !(one && two && typeof one === 'object' && typeof two === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.') : invariant(false) : undefined;\n\n  for (var key in two) {\n    if (two.hasOwnProperty(key)) {\n      !(one[key] === undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): ' + 'Tried to merge two objects with the same key: `%s`. This conflict ' + 'may be due to a mixin; in particular, this may be caused by two ' + 'getInitialState() or getDefaultProps() methods returning objects ' + 'with clashing keys.', key) : invariant(false) : undefined;\n      one[key] = two[key];\n    }\n  }\n  return one;\n}\n\n/**\n * Creates a function that invokes two functions and merges their return values.\n *\n * @param {function} one Function to invoke first.\n * @param {function} two Function to invoke second.\n * @return {function} Function that invokes the two argument functions.\n * @private\n */\nfunction createMergedResultFunction(one, two) {\n  return function mergedResult() {\n    var a = one.apply(this, arguments);\n    var b = two.apply(this, arguments);\n    if (a == null) {\n      return b;\n    } else if (b == null) {\n      return a;\n    }\n    var c = {};\n    mergeIntoWithNoDuplicateKeys(c, a);\n    mergeIntoWithNoDuplicateKeys(c, b);\n    return c;\n  };\n}\n\n/**\n * Creates a function that invokes two functions and ignores their return vales.\n *\n * @param {function} one Function to invoke first.\n * @param {function} two Function to invoke second.\n * @return {function} Function that invokes the two argument functions.\n * @private\n */\nfunction createChainedFunction(one, two) {\n  return function chainedFunction() {\n    one.apply(this, arguments);\n    two.apply(this, arguments);\n  };\n}\n\n/**\n * Binds a method to the component.\n *\n * @param {object} component Component whose method is going to be bound.\n * @param {function} method Method to be bound.\n * @return {function} The bound method.\n */\nfunction bindAutoBindMethod(component, method) {\n  var boundMethod = method.bind(component);\n  if (process.env.NODE_ENV !== 'production') {\n    boundMethod.__reactBoundContext = component;\n    boundMethod.__reactBoundMethod = method;\n    boundMethod.__reactBoundArguments = null;\n    var componentName = component.constructor.displayName;\n    var _bind = boundMethod.bind;\n    /* eslint-disable block-scoped-var, no-undef */\n    boundMethod.bind = function (newThis) {\n      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      // User is trying to bind() an autobound method; we effectively will\n      // ignore the value of \"this\" that the user is trying to use, so\n      // let's warn.\n      if (newThis !== component && newThis !== null) {\n        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): React component methods may only be bound to the ' + 'component instance. See %s', componentName) : undefined;\n      } else if (!args.length) {\n        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See %s', componentName) : undefined;\n        return boundMethod;\n      }\n      var reboundMethod = _bind.apply(boundMethod, arguments);\n      reboundMethod.__reactBoundContext = component;\n      reboundMethod.__reactBoundMethod = method;\n      reboundMethod.__reactBoundArguments = args;\n      return reboundMethod;\n      /* eslint-enable */\n    };\n  }\n  return boundMethod;\n}\n\n/**\n * Binds all auto-bound methods in a component.\n *\n * @param {object} component Component whose method is going to be bound.\n */\nfunction bindAutoBindMethods(component) {\n  for (var autoBindKey in component.__reactAutoBindMap) {\n    if (component.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {\n      var method = component.__reactAutoBindMap[autoBindKey];\n      component[autoBindKey] = bindAutoBindMethod(component, method);\n    }\n  }\n}\n\n/**\n * Add more to the ReactClass base class. These are all legacy features and\n * therefore not already part of the modern ReactComponent.\n */\nvar ReactClassMixin = {\n\n  /**\n   * TODO: This will be deprecated because state should always keep a consistent\n   * type signature and the only use case for this, is to avoid that.\n   */\n  replaceState: function (newState, callback) {\n    this.updater.enqueueReplaceState(this, newState);\n    if (callback) {\n      this.updater.enqueueCallback(this, callback);\n    }\n  },\n\n  /**\n   * Checks whether or not this composite component is mounted.\n   * @return {boolean} True if mounted, false otherwise.\n   * @protected\n   * @final\n   */\n  isMounted: function () {\n    return this.updater.isMounted(this);\n  },\n\n  /**\n   * Sets a subset of the props.\n   *\n   * @param {object} partialProps Subset of the next props.\n   * @param {?function} callback Called after props are updated.\n   * @final\n   * @public\n   * @deprecated\n   */\n  setProps: function (partialProps, callback) {\n    if (process.env.NODE_ENV !== 'production') {\n      warnSetProps();\n    }\n    this.updater.enqueueSetProps(this, partialProps);\n    if (callback) {\n      this.updater.enqueueCallback(this, callback);\n    }\n  },\n\n  /**\n   * Replace all the props.\n   *\n   * @param {object} newProps Subset of the next props.\n   * @param {?function} callback Called after props are updated.\n   * @final\n   * @public\n   * @deprecated\n   */\n  replaceProps: function (newProps, callback) {\n    if (process.env.NODE_ENV !== 'production') {\n      warnSetProps();\n    }\n    this.updater.enqueueReplaceProps(this, newProps);\n    if (callback) {\n      this.updater.enqueueCallback(this, callback);\n    }\n  }\n};\n\nvar ReactClassComponent = function () {};\nassign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);\n\n/**\n * Module for creating composite components.\n *\n * @class ReactClass\n */\nvar ReactClass = {\n\n  /**\n   * Creates a composite component class given a class specification.\n   *\n   * @param {object} spec Class specification (which must define `render`).\n   * @return {function} Component constructor function.\n   * @public\n   */\n  createClass: function (spec) {\n    var Constructor = function (props, context, updater) {\n      // This constructor is overridden by mocks. The argument is used\n      // by mocks to assert on what gets mounted.\n\n      if (process.env.NODE_ENV !== 'production') {\n        process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : undefined;\n      }\n\n      // Wire up auto-binding\n      if (this.__reactAutoBindMap) {\n        bindAutoBindMethods(this);\n      }\n\n      this.props = props;\n      this.context = context;\n      this.refs = emptyObject;\n      this.updater = updater || ReactNoopUpdateQueue;\n\n      this.state = null;\n\n      // ReactClasses doesn't have constructors. Instead, they use the\n      // getInitialState and componentWillMount methods for initialization.\n\n      var initialState = this.getInitialState ? this.getInitialState() : null;\n      if (process.env.NODE_ENV !== 'production') {\n        // We allow auto-mocks to proceed as if they're returning null.\n        if (typeof initialState === 'undefined' && this.getInitialState._isMockFunction) {\n          // This is probably bad practice. Consider warning here and\n          // deprecating this convenience.\n          initialState = null;\n        }\n      }\n      !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : invariant(false) : undefined;\n\n      this.state = initialState;\n    };\n    Constructor.prototype = new ReactClassComponent();\n    Constructor.prototype.constructor = Constructor;\n\n    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));\n\n    mixSpecIntoComponent(Constructor, spec);\n\n    // Initialize the defaultProps property after all mixins have been merged.\n    if (Constructor.getDefaultProps) {\n      Constructor.defaultProps = Constructor.getDefaultProps();\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      // This is a tag to indicate that the use of these method names is ok,\n      // since it's used with createClass. If it's not, then it's likely a\n      // mistake so we'll warn you to use the static property, property\n      // initializer or constructor respectively.\n      if (Constructor.getDefaultProps) {\n        Constructor.getDefaultProps.isReactClassApproved = {};\n      }\n      if (Constructor.prototype.getInitialState) {\n        Constructor.prototype.getInitialState.isReactClassApproved = {};\n      }\n    }\n\n    !Constructor.prototype.render ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createClass(...): Class specification must implement a `render` method.') : invariant(false) : undefined;\n\n    if (process.env.NODE_ENV !== 'production') {\n      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', spec.displayName || 'A component') : undefined;\n      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', spec.displayName || 'A component') : undefined;\n    }\n\n    // Reduce time spent doing lookups by setting these on the prototype.\n    for (var methodName in ReactClassInterface) {\n      if (!Constructor.prototype[methodName]) {\n        Constructor.prototype[methodName] = null;\n      }\n    }\n\n    return Constructor;\n  },\n\n  injection: {\n    injectMixin: function (mixin) {\n      injectedMixins.push(mixin);\n    }\n  }\n\n};\n\nmodule.exports = ReactClass;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactComponent\n */\n\n'use strict';\n\nvar ReactNoopUpdateQueue = require('./ReactNoopUpdateQueue');\n\nvar canDefineProperty = require('./canDefineProperty');\nvar emptyObject = require('fbjs/lib/emptyObject');\nvar invariant = require('fbjs/lib/invariant');\nvar warning = require('fbjs/lib/warning');\n\n/**\n * Base class helpers for the updating state of a component.\n */\nfunction ReactComponent(props, context, updater) {\n  this.props = props;\n  this.context = context;\n  this.refs = emptyObject;\n  // We initialize the default updater but the real one gets injected by the\n  // renderer.\n  this.updater = updater || ReactNoopUpdateQueue;\n}\n\nReactComponent.prototype.isReactComponent = {};\n\n/**\n * Sets a subset of the state. Always use this to mutate\n * state. You should treat `this.state` as immutable.\n *\n * There is no guarantee that `this.state` will be immediately updated, so\n * accessing `this.state` after calling this method may return the old value.\n *\n * There is no guarantee that calls to `setState` will run synchronously,\n * as they may eventually be batched together.  You can provide an optional\n * callback that will be executed when the call to setState is actually\n * completed.\n *\n * When a function is provided to setState, it will be called at some point in\n * the future (not synchronously). It will be called with the up to date\n * component arguments (state, props, context). These values can be different\n * from this.* because your function may be called after receiveProps but before\n * shouldComponentUpdate, and this new state, props, and context will not yet be\n * assigned to this.\n *\n * @param {object|function} partialState Next partial state or function to\n *        produce next partial state to be merged with current state.\n * @param {?function} callback Called after state is updated.\n * @final\n * @protected\n */\nReactComponent.prototype.setState = function (partialState, callback) {\n  !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setState(...): takes an object of state variables to update or a ' + 'function which returns an object of state variables.') : invariant(false) : undefined;\n  if (process.env.NODE_ENV !== 'production') {\n    process.env.NODE_ENV !== 'production' ? warning(partialState != null, 'setState(...): You passed an undefined or null state object; ' + 'instead, use forceUpdate().') : undefined;\n  }\n  this.updater.enqueueSetState(this, partialState);\n  if (callback) {\n    this.updater.enqueueCallback(this, callback);\n  }\n};\n\n/**\n * Forces an update. This should only be invoked when it is known with\n * certainty that we are **not** in a DOM transaction.\n *\n * You may want to call this when you know that some deeper aspect of the\n * component's state has changed but `setState` was not called.\n *\n * This will not invoke `shouldComponentUpdate`, but it will invoke\n * `componentWillUpdate` and `componentDidUpdate`.\n *\n * @param {?function} callback Called after update is complete.\n * @final\n * @protected\n */\nReactComponent.prototype.forceUpdate = function (callback) {\n  this.updater.enqueueForceUpdate(this);\n  if (callback) {\n    this.updater.enqueueCallback(this, callback);\n  }\n};\n\n/**\n * Deprecated APIs. These APIs used to exist on classic React classes but since\n * we would like to deprecate them, we're not going to move them over to this\n * modern base class. Instead, we define a getter that warns if it's accessed.\n */\nif (process.env.NODE_ENV !== 'production') {\n  var deprecatedAPIs = {\n    getDOMNode: ['getDOMNode', 'Use ReactDOM.findDOMNode(component) instead.'],\n    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],\n    replaceProps: ['replaceProps', 'Instead, call render again at the top level.'],\n    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).'],\n    setProps: ['setProps', 'Instead, call render again at the top level.']\n  };\n  var defineDeprecationWarning = function (methodName, info) {\n    if (canDefineProperty) {\n      Object.defineProperty(ReactComponent.prototype, methodName, {\n        get: function () {\n          process.env.NODE_ENV !== 'production' ? warning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]) : undefined;\n          return undefined;\n        }\n      });\n    }\n  };\n  for (var fnName in deprecatedAPIs) {\n    if (deprecatedAPIs.hasOwnProperty(fnName)) {\n      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);\n    }\n  }\n}\n\nmodule.exports = ReactComponent;","/**\n * Copyright 2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactNoopUpdateQueue\n */\n\n'use strict';\n\nvar warning = require('fbjs/lib/warning');\n\nfunction warnTDZ(publicInstance, callerName) {\n  if (process.env.NODE_ENV !== 'production') {\n    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, publicInstance.constructor && publicInstance.constructor.displayName || '') : undefined;\n  }\n}\n\n/**\n * This is the abstract API for an update queue.\n */\nvar ReactNoopUpdateQueue = {\n\n  /**\n   * Checks whether or not this composite component is mounted.\n   * @param {ReactClass} publicInstance The instance we want to test.\n   * @return {boolean} True if mounted, false otherwise.\n   * @protected\n   * @final\n   */\n  isMounted: function (publicInstance) {\n    return false;\n  },\n\n  /**\n   * Enqueue a callback that will be executed after all the pending updates\n   * have processed.\n   *\n   * @param {ReactClass} publicInstance The instance to use as `this` context.\n   * @param {?function} callback Called after state is updated.\n   * @internal\n   */\n  enqueueCallback: function (publicInstance, callback) {},\n\n  /**\n   * Forces an update. This should only be invoked when it is known with\n   * certainty that we are **not** in a DOM transaction.\n   *\n   * You may want to call this when you know that some deeper aspect of the\n   * component's state has changed but `setState` was not called.\n   *\n   * This will not invoke `shouldComponentUpdate`, but it will invoke\n   * `componentWillUpdate` and `componentDidUpdate`.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @internal\n   */\n  enqueueForceUpdate: function (publicInstance) {\n    warnTDZ(publicInstance, 'forceUpdate');\n  },\n\n  /**\n   * Replaces all of the state. Always use this or `setState` to mutate state.\n   * You should treat `this.state` as immutable.\n   *\n   * There is no guarantee that `this.state` will be immediately updated, so\n   * accessing `this.state` after calling this method may return the old value.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {object} completeState Next state.\n   * @internal\n   */\n  enqueueReplaceState: function (publicInstance, completeState) {\n    warnTDZ(publicInstance, 'replaceState');\n  },\n\n  /**\n   * Sets a subset of the state. This only exists because _pendingState is\n   * internal. This provides a merging strategy that is not available to deep\n   * properties which is confusing. TODO: Expose pendingState or don't use it\n   * during the merge.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {object} partialState Next partial state to be merged with state.\n   * @internal\n   */\n  enqueueSetState: function (publicInstance, partialState) {\n    warnTDZ(publicInstance, 'setState');\n  },\n\n  /**\n   * Sets a subset of the props.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {object} partialProps Subset of the next props.\n   * @internal\n   */\n  enqueueSetProps: function (publicInstance, partialProps) {\n    warnTDZ(publicInstance, 'setProps');\n  },\n\n  /**\n   * Replaces all of the props.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {object} props New props.\n   * @internal\n   */\n  enqueueReplaceProps: function (publicInstance, props) {\n    warnTDZ(publicInstance, 'replaceProps');\n  }\n\n};\n\nmodule.exports = ReactNoopUpdateQueue;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactReconcileTransaction\n * @typechecks static-only\n */\n\n'use strict';\n\nvar CallbackQueue = require('./CallbackQueue');\nvar PooledClass = require('./PooledClass');\nvar ReactBrowserEventEmitter = require('./ReactBrowserEventEmitter');\nvar ReactDOMFeatureFlags = require('./ReactDOMFeatureFlags');\nvar ReactInputSelection = require('./ReactInputSelection');\nvar Transaction = require('./Transaction');\n\nvar assign = require('./Object.assign');\n\n/**\n * Ensures that, when possible, the selection range (currently selected text\n * input) is not disturbed by performing the transaction.\n */\nvar SELECTION_RESTORATION = {\n  /**\n   * @return {Selection} Selection information.\n   */\n  initialize: ReactInputSelection.getSelectionInformation,\n  /**\n   * @param {Selection} sel Selection information returned from `initialize`.\n   */\n  close: ReactInputSelection.restoreSelection\n};\n\n/**\n * Suppresses events (blur/focus) that could be inadvertently dispatched due to\n * high level DOM manipulations (like temporarily removing a text input from the\n * DOM).\n */\nvar EVENT_SUPPRESSION = {\n  /**\n   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before\n   * the reconciliation.\n   */\n  initialize: function () {\n    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();\n    ReactBrowserEventEmitter.setEnabled(false);\n    return currentlyEnabled;\n  },\n\n  /**\n   * @param {boolean} previouslyEnabled Enabled status of\n   *   `ReactBrowserEventEmitter` before the reconciliation occurred. `close`\n   *   restores the previous value.\n   */\n  close: function (previouslyEnabled) {\n    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);\n  }\n};\n\n/**\n * Provides a queue for collecting `componentDidMount` and\n * `componentDidUpdate` callbacks during the the transaction.\n */\nvar ON_DOM_READY_QUEUEING = {\n  /**\n   * Initializes the internal `onDOMReady` queue.\n   */\n  initialize: function () {\n    this.reactMountReady.reset();\n  },\n\n  /**\n   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.\n   */\n  close: function () {\n    this.reactMountReady.notifyAll();\n  }\n};\n\n/**\n * Executed within the scope of the `Transaction` instance. Consider these as\n * being member methods, but with an implied ordering while being isolated from\n * each other.\n */\nvar TRANSACTION_WRAPPERS = [SELECTION_RESTORATION, EVENT_SUPPRESSION, ON_DOM_READY_QUEUEING];\n\n/**\n * Currently:\n * - The order that these are listed in the transaction is critical:\n * - Suppresses events.\n * - Restores selection range.\n *\n * Future:\n * - Restore document/overflow scroll positions that were unintentionally\n *   modified via DOM insertions above the top viewport boundary.\n * - Implement/integrate with customized constraint based layout system and keep\n *   track of which dimensions must be remeasured.\n *\n * @class ReactReconcileTransaction\n */\nfunction ReactReconcileTransaction(forceHTML) {\n  this.reinitializeTransaction();\n  // Only server-side rendering really needs this option (see\n  // `ReactServerRendering`), but server-side uses\n  // `ReactServerRenderingTransaction` instead. This option is here so that it's\n  // accessible and defaults to false when `ReactDOMComponent` and\n  // `ReactTextComponent` checks it in `mountComponent`.`\n  this.renderToStaticMarkup = false;\n  this.reactMountReady = CallbackQueue.getPooled(null);\n  this.useCreateElement = !forceHTML && ReactDOMFeatureFlags.useCreateElement;\n}\n\nvar Mixin = {\n  /**\n   * @see Transaction\n   * @abstract\n   * @final\n   * @return {array<object>} List of operation wrap procedures.\n   *   TODO: convert to array<TransactionWrapper>\n   */\n  getTransactionWrappers: function () {\n    return TRANSACTION_WRAPPERS;\n  },\n\n  /**\n   * @return {object} The queue to collect `onDOMReady` callbacks with.\n   */\n  getReactMountReady: function () {\n    return this.reactMountReady;\n  },\n\n  /**\n   * `PooledClass` looks for this, and will invoke this before allowing this\n   * instance to be reused.\n   */\n  destructor: function () {\n    CallbackQueue.release(this.reactMountReady);\n    this.reactMountReady = null;\n  }\n};\n\nassign(ReactReconcileTransaction.prototype, Transaction.Mixin, Mixin);\n\nPooledClass.addPoolingTo(ReactReconcileTransaction);\n\nmodule.exports = ReactReconcileTransaction;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactInputSelection\n */\n\n'use strict';\n\nvar ReactDOMSelection = require('./ReactDOMSelection');\n\nvar containsNode = require('fbjs/lib/containsNode');\nvar focusNode = require('fbjs/lib/focusNode');\nvar getActiveElement = require('fbjs/lib/getActiveElement');\n\nfunction isInDocument(node) {\n  return containsNode(document.documentElement, node);\n}\n\n/**\n * @ReactInputSelection: React input selection module. Based on Selection.js,\n * but modified to be suitable for react and has a couple of bug fixes (doesn't\n * assume buttons have range selections allowed).\n * Input selection module for React.\n */\nvar ReactInputSelection = {\n\n  hasSelectionCapabilities: function (elem) {\n    var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();\n    return nodeName && (nodeName === 'input' && elem.type === 'text' || nodeName === 'textarea' || elem.contentEditable === 'true');\n  },\n\n  getSelectionInformation: function () {\n    var focusedElem = getActiveElement();\n    return {\n      focusedElem: focusedElem,\n      selectionRange: ReactInputSelection.hasSelectionCapabilities(focusedElem) ? ReactInputSelection.getSelection(focusedElem) : null\n    };\n  },\n\n  /**\n   * @restoreSelection: If any selection information was potentially lost,\n   * restore it. This is useful when performing operations that could remove dom\n   * nodes and place them back in, resulting in focus being lost.\n   */\n  restoreSelection: function (priorSelectionInformation) {\n    var curFocusedElem = getActiveElement();\n    var priorFocusedElem = priorSelectionInformation.focusedElem;\n    var priorSelectionRange = priorSelectionInformation.selectionRange;\n    if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {\n      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {\n        ReactInputSelection.setSelection(priorFocusedElem, priorSelectionRange);\n      }\n      focusNode(priorFocusedElem);\n    }\n  },\n\n  /**\n   * @getSelection: Gets the selection bounds of a focused textarea, input or\n   * contentEditable node.\n   * -@input: Look up selection bounds of this input\n   * -@return {start: selectionStart, end: selectionEnd}\n   */\n  getSelection: function (input) {\n    var selection;\n\n    if ('selectionStart' in input) {\n      // Modern browser with input or textarea.\n      selection = {\n        start: input.selectionStart,\n        end: input.selectionEnd\n      };\n    } else if (document.selection && (input.nodeName && input.nodeName.toLowerCase() === 'input')) {\n      // IE8 input.\n      var range = document.selection.createRange();\n      // There can only be one selection per document in IE, so it must\n      // be in our element.\n      if (range.parentElement() === input) {\n        selection = {\n          start: -range.moveStart('character', -input.value.length),\n          end: -range.moveEnd('character', -input.value.length)\n        };\n      }\n    } else {\n      // Content editable or old IE textarea.\n      selection = ReactDOMSelection.getOffsets(input);\n    }\n\n    return selection || { start: 0, end: 0 };\n  },\n\n  /**\n   * @setSelection: Sets the selection bounds of a textarea or input and focuses\n   * the input.\n   * -@input     Set selection bounds of this input or textarea\n   * -@offsets   Object of same form that is returned from get*\n   */\n  setSelection: function (input, offsets) {\n    var start = offsets.start;\n    var end = offsets.end;\n    if (typeof end === 'undefined') {\n      end = start;\n    }\n\n    if ('selectionStart' in input) {\n      input.selectionStart = start;\n      input.selectionEnd = Math.min(end, input.value.length);\n    } else if (document.selection && (input.nodeName && input.nodeName.toLowerCase() === 'input')) {\n      var range = input.createTextRange();\n      range.collapse(true);\n      range.moveStart('character', start);\n      range.moveEnd('character', end - start);\n      range.select();\n    } else {\n      ReactDOMSelection.setOffsets(input, offsets);\n    }\n  }\n};\n\nmodule.exports = ReactInputSelection;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMSelection\n */\n\n'use strict';\n\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\n\nvar getNodeForCharacterOffset = require('./getNodeForCharacterOffset');\nvar getTextContentAccessor = require('./getTextContentAccessor');\n\n/**\n * While `isCollapsed` is available on the Selection object and `collapsed`\n * is available on the Range object, IE11 sometimes gets them wrong.\n * If the anchor/focus nodes and offsets are the same, the range is collapsed.\n */\nfunction isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {\n  return anchorNode === focusNode && anchorOffset === focusOffset;\n}\n\n/**\n * Get the appropriate anchor and focus node/offset pairs for IE.\n *\n * The catch here is that IE's selection API doesn't provide information\n * about whether the selection is forward or backward, so we have to\n * behave as though it's always forward.\n *\n * IE text differs from modern selection in that it behaves as though\n * block elements end with a new line. This means character offsets will\n * differ between the two APIs.\n *\n * @param {DOMElement} node\n * @return {object}\n */\nfunction getIEOffsets(node) {\n  var selection = document.selection;\n  var selectedRange = selection.createRange();\n  var selectedLength = selectedRange.text.length;\n\n  // Duplicate selection so we can move range without breaking user selection.\n  var fromStart = selectedRange.duplicate();\n  fromStart.moveToElementText(node);\n  fromStart.setEndPoint('EndToStart', selectedRange);\n\n  var startOffset = fromStart.text.length;\n  var endOffset = startOffset + selectedLength;\n\n  return {\n    start: startOffset,\n    end: endOffset\n  };\n}\n\n/**\n * @param {DOMElement} node\n * @return {?object}\n */\nfunction getModernOffsets(node) {\n  var selection = window.getSelection && window.getSelection();\n\n  if (!selection || selection.rangeCount === 0) {\n    return null;\n  }\n\n  var anchorNode = selection.anchorNode;\n  var anchorOffset = selection.anchorOffset;\n  var focusNode = selection.focusNode;\n  var focusOffset = selection.focusOffset;\n\n  var currentRange = selection.getRangeAt(0);\n\n  // In Firefox, range.startContainer and range.endContainer can be \"anonymous\n  // divs\", e.g. the up/down buttons on an <input type=\"number\">. Anonymous\n  // divs do not seem to expose properties, triggering a \"Permission denied\n  // error\" if any of its properties are accessed. The only seemingly possible\n  // way to avoid erroring is to access a property that typically works for\n  // non-anonymous divs and catch any error that may otherwise arise. See\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427\n  try {\n    /* eslint-disable no-unused-expressions */\n    currentRange.startContainer.nodeType;\n    currentRange.endContainer.nodeType;\n    /* eslint-enable no-unused-expressions */\n  } catch (e) {\n    return null;\n  }\n\n  // If the node and offset values are the same, the selection is collapsed.\n  // `Selection.isCollapsed` is available natively, but IE sometimes gets\n  // this value wrong.\n  var isSelectionCollapsed = isCollapsed(selection.anchorNode, selection.anchorOffset, selection.focusNode, selection.focusOffset);\n\n  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;\n\n  var tempRange = currentRange.cloneRange();\n  tempRange.selectNodeContents(node);\n  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);\n\n  var isTempRangeCollapsed = isCollapsed(tempRange.startContainer, tempRange.startOffset, tempRange.endContainer, tempRange.endOffset);\n\n  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;\n  var end = start + rangeLength;\n\n  // Detect whether the selection is backward.\n  var detectionRange = document.createRange();\n  detectionRange.setStart(anchorNode, anchorOffset);\n  detectionRange.setEnd(focusNode, focusOffset);\n  var isBackward = detectionRange.collapsed;\n\n  return {\n    start: isBackward ? end : start,\n    end: isBackward ? start : end\n  };\n}\n\n/**\n * @param {DOMElement|DOMTextNode} node\n * @param {object} offsets\n */\nfunction setIEOffsets(node, offsets) {\n  var range = document.selection.createRange().duplicate();\n  var start, end;\n\n  if (typeof offsets.end === 'undefined') {\n    start = offsets.start;\n    end = start;\n  } else if (offsets.start > offsets.end) {\n    start = offsets.end;\n    end = offsets.start;\n  } else {\n    start = offsets.start;\n    end = offsets.end;\n  }\n\n  range.moveToElementText(node);\n  range.moveStart('character', start);\n  range.setEndPoint('EndToStart', range);\n  range.moveEnd('character', end - start);\n  range.select();\n}\n\n/**\n * In modern non-IE browsers, we can support both forward and backward\n * selections.\n *\n * Note: IE10+ supports the Selection object, but it does not support\n * the `extend` method, which means that even in modern IE, it's not possible\n * to programatically create a backward selection. Thus, for all IE\n * versions, we use the old IE API to create our selections.\n *\n * @param {DOMElement|DOMTextNode} node\n * @param {object} offsets\n */\nfunction setModernOffsets(node, offsets) {\n  if (!window.getSelection) {\n    return;\n  }\n\n  var selection = window.getSelection();\n  var length = node[getTextContentAccessor()].length;\n  var start = Math.min(offsets.start, length);\n  var end = typeof offsets.end === 'undefined' ? start : Math.min(offsets.end, length);\n\n  // IE 11 uses modern selection, but doesn't support the extend method.\n  // Flip backward selections, so we can set with a single range.\n  if (!selection.extend && start > end) {\n    var temp = end;\n    end = start;\n    start = temp;\n  }\n\n  var startMarker = getNodeForCharacterOffset(node, start);\n  var endMarker = getNodeForCharacterOffset(node, end);\n\n  if (startMarker && endMarker) {\n    var range = document.createRange();\n    range.setStart(startMarker.node, startMarker.offset);\n    selection.removeAllRanges();\n\n    if (start > end) {\n      selection.addRange(range);\n      selection.extend(endMarker.node, endMarker.offset);\n    } else {\n      range.setEnd(endMarker.node, endMarker.offset);\n      selection.addRange(range);\n    }\n  }\n}\n\nvar useIEOffsets = ExecutionEnvironment.canUseDOM && 'selection' in document && !('getSelection' in window);\n\nvar ReactDOMSelection = {\n  /**\n   * @param {DOMElement} node\n   */\n  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,\n\n  /**\n   * @param {DOMElement|DOMTextNode} node\n   * @param {object} offsets\n   */\n  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets\n};\n\nmodule.exports = ReactDOMSelection;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule getNodeForCharacterOffset\n */\n\n'use strict';\n\n/**\n * Given any node return the first leaf node without children.\n *\n * @param {DOMElement|DOMTextNode} node\n * @return {DOMElement|DOMTextNode}\n */\nfunction getLeafNode(node) {\n  while (node && node.firstChild) {\n    node = node.firstChild;\n  }\n  return node;\n}\n\n/**\n * Get the next sibling within a container. This will walk up the\n * DOM if a node's siblings have been exhausted.\n *\n * @param {DOMElement|DOMTextNode} node\n * @return {?DOMElement|DOMTextNode}\n */\nfunction getSiblingNode(node) {\n  while (node) {\n    if (node.nextSibling) {\n      return node.nextSibling;\n    }\n    node = node.parentNode;\n  }\n}\n\n/**\n * Get object describing the nodes which contain characters at offset.\n *\n * @param {DOMElement|DOMTextNode} root\n * @param {number} offset\n * @return {?object}\n */\nfunction getNodeForCharacterOffset(root, offset) {\n  var node = getLeafNode(root);\n  var nodeStart = 0;\n  var nodeEnd = 0;\n\n  while (node) {\n    if (node.nodeType === 3) {\n      nodeEnd = nodeStart + node.textContent.length;\n\n      if (nodeStart <= offset && nodeEnd >= offset) {\n        return {\n          node: node,\n          offset: offset - nodeStart\n        };\n      }\n\n      nodeStart = nodeEnd;\n    }\n\n    node = getLeafNode(getSiblingNode(node));\n  }\n}\n\nmodule.exports = getNodeForCharacterOffset;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule SelectEventPlugin\n */\n\n'use strict';\n\nvar EventConstants = require('./EventConstants');\nvar EventPropagators = require('./EventPropagators');\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\nvar ReactInputSelection = require('./ReactInputSelection');\nvar SyntheticEvent = require('./SyntheticEvent');\n\nvar getActiveElement = require('fbjs/lib/getActiveElement');\nvar isTextInputElement = require('./isTextInputElement');\nvar keyOf = require('fbjs/lib/keyOf');\nvar shallowEqual = require('fbjs/lib/shallowEqual');\n\nvar topLevelTypes = EventConstants.topLevelTypes;\n\nvar skipSelectionChangeEvent = ExecutionEnvironment.canUseDOM && 'documentMode' in document && document.documentMode <= 11;\n\nvar eventTypes = {\n  select: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onSelect: null }),\n      captured: keyOf({ onSelectCapture: null })\n    },\n    dependencies: [topLevelTypes.topBlur, topLevelTypes.topContextMenu, topLevelTypes.topFocus, topLevelTypes.topKeyDown, topLevelTypes.topMouseDown, topLevelTypes.topMouseUp, topLevelTypes.topSelectionChange]\n  }\n};\n\nvar activeElement = null;\nvar activeElementID = null;\nvar lastSelection = null;\nvar mouseDown = false;\n\n// Track whether a listener exists for this plugin. If none exist, we do\n// not extract events.\nvar hasListener = false;\nvar ON_SELECT_KEY = keyOf({ onSelect: null });\n\n/**\n * Get an object which is a unique representation of the current selection.\n *\n * The return value will not be consistent across nodes or browsers, but\n * two identical selections on the same node will return identical objects.\n *\n * @param {DOMElement} node\n * @return {object}\n */\nfunction getSelection(node) {\n  if ('selectionStart' in node && ReactInputSelection.hasSelectionCapabilities(node)) {\n    return {\n      start: node.selectionStart,\n      end: node.selectionEnd\n    };\n  } else if (window.getSelection) {\n    var selection = window.getSelection();\n    return {\n      anchorNode: selection.anchorNode,\n      anchorOffset: selection.anchorOffset,\n      focusNode: selection.focusNode,\n      focusOffset: selection.focusOffset\n    };\n  } else if (document.selection) {\n    var range = document.selection.createRange();\n    return {\n      parentElement: range.parentElement(),\n      text: range.text,\n      top: range.boundingTop,\n      left: range.boundingLeft\n    };\n  }\n}\n\n/**\n * Poll selection to see whether it's changed.\n *\n * @param {object} nativeEvent\n * @return {?SyntheticEvent}\n */\nfunction constructSelectEvent(nativeEvent, nativeEventTarget) {\n  // Ensure we have the right element, and that the user is not dragging a\n  // selection (this matches native `select` event behavior). In HTML5, select\n  // fires only on input and textarea thus if there's no focused element we\n  // won't dispatch.\n  if (mouseDown || activeElement == null || activeElement !== getActiveElement()) {\n    return null;\n  }\n\n  // Only fire when selection has actually changed.\n  var currentSelection = getSelection(activeElement);\n  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {\n    lastSelection = currentSelection;\n\n    var syntheticEvent = SyntheticEvent.getPooled(eventTypes.select, activeElementID, nativeEvent, nativeEventTarget);\n\n    syntheticEvent.type = 'select';\n    syntheticEvent.target = activeElement;\n\n    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);\n\n    return syntheticEvent;\n  }\n\n  return null;\n}\n\n/**\n * This plugin creates an `onSelect` event that normalizes select events\n * across form elements.\n *\n * Supported elements are:\n * - input (see `isTextInputElement`)\n * - textarea\n * - contentEditable\n *\n * This differs from native browser implementations in the following ways:\n * - Fires on contentEditable fields as well as inputs.\n * - Fires for collapsed selection.\n * - Fires after user input.\n */\nvar SelectEventPlugin = {\n\n  eventTypes: eventTypes,\n\n  /**\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {DOMEventTarget} topLevelTarget The listening component root node.\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n   * @param {object} nativeEvent Native browser event.\n   * @return {*} An accumulation of synthetic events.\n   * @see {EventPluginHub.extractEvents}\n   */\n  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {\n    if (!hasListener) {\n      return null;\n    }\n\n    switch (topLevelType) {\n      // Track the input node that has focus.\n      case topLevelTypes.topFocus:\n        if (isTextInputElement(topLevelTarget) || topLevelTarget.contentEditable === 'true') {\n          activeElement = topLevelTarget;\n          activeElementID = topLevelTargetID;\n          lastSelection = null;\n        }\n        break;\n      case topLevelTypes.topBlur:\n        activeElement = null;\n        activeElementID = null;\n        lastSelection = null;\n        break;\n\n      // Don't fire the event while the user is dragging. This matches the\n      // semantics of the native select event.\n      case topLevelTypes.topMouseDown:\n        mouseDown = true;\n        break;\n      case topLevelTypes.topContextMenu:\n      case topLevelTypes.topMouseUp:\n        mouseDown = false;\n        return constructSelectEvent(nativeEvent, nativeEventTarget);\n\n      // Chrome and IE fire non-standard event when selection is changed (and\n      // sometimes when it hasn't). IE's event fires out of order with respect\n      // to key and input events on deletion, so we discard it.\n      //\n      // Firefox doesn't support selectionchange, so check selection status\n      // after each key entry. The selection changes after keydown and before\n      // keyup, but we check on keydown as well in the case of holding down a\n      // key, when multiple keydown events are fired but only one keyup is.\n      // This is also our approach for IE handling, for the reason above.\n      case topLevelTypes.topSelectionChange:\n        if (skipSelectionChangeEvent) {\n          break;\n        }\n      // falls through\n      case topLevelTypes.topKeyDown:\n      case topLevelTypes.topKeyUp:\n        return constructSelectEvent(nativeEvent, nativeEventTarget);\n    }\n\n    return null;\n  },\n\n  didPutListener: function (id, registrationName, listener) {\n    if (registrationName === ON_SELECT_KEY) {\n      hasListener = true;\n    }\n  }\n};\n\nmodule.exports = SelectEventPlugin;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ServerReactRootIndex\n * @typechecks\n */\n\n'use strict';\n\n/**\n * Size of the reactRoot ID space. We generate random numbers for React root\n * IDs and if there's a collision the events and DOM update system will\n * get confused. In the future we need a way to generate GUIDs but for\n * now this will work on a smaller scale.\n */\nvar GLOBAL_MOUNT_POINT_MAX = Math.pow(2, 53);\n\nvar ServerReactRootIndex = {\n  createReactRootIndex: function () {\n    return Math.ceil(Math.random() * GLOBAL_MOUNT_POINT_MAX);\n  }\n};\n\nmodule.exports = ServerReactRootIndex;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule SimpleEventPlugin\n */\n\n'use strict';\n\nvar EventConstants = require('./EventConstants');\nvar EventListener = require('fbjs/lib/EventListener');\nvar EventPropagators = require('./EventPropagators');\nvar ReactMount = require('./ReactMount');\nvar SyntheticClipboardEvent = require('./SyntheticClipboardEvent');\nvar SyntheticEvent = require('./SyntheticEvent');\nvar SyntheticFocusEvent = require('./SyntheticFocusEvent');\nvar SyntheticKeyboardEvent = require('./SyntheticKeyboardEvent');\nvar SyntheticMouseEvent = require('./SyntheticMouseEvent');\nvar SyntheticDragEvent = require('./SyntheticDragEvent');\nvar SyntheticTouchEvent = require('./SyntheticTouchEvent');\nvar SyntheticUIEvent = require('./SyntheticUIEvent');\nvar SyntheticWheelEvent = require('./SyntheticWheelEvent');\n\nvar emptyFunction = require('fbjs/lib/emptyFunction');\nvar getEventCharCode = require('./getEventCharCode');\nvar invariant = require('fbjs/lib/invariant');\nvar keyOf = require('fbjs/lib/keyOf');\n\nvar topLevelTypes = EventConstants.topLevelTypes;\n\nvar eventTypes = {\n  abort: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onAbort: true }),\n      captured: keyOf({ onAbortCapture: true })\n    }\n  },\n  blur: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onBlur: true }),\n      captured: keyOf({ onBlurCapture: true })\n    }\n  },\n  canPlay: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onCanPlay: true }),\n      captured: keyOf({ onCanPlayCapture: true })\n    }\n  },\n  canPlayThrough: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onCanPlayThrough: true }),\n      captured: keyOf({ onCanPlayThroughCapture: true })\n    }\n  },\n  click: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onClick: true }),\n      captured: keyOf({ onClickCapture: true })\n    }\n  },\n  contextMenu: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onContextMenu: true }),\n      captured: keyOf({ onContextMenuCapture: true })\n    }\n  },\n  copy: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onCopy: true }),\n      captured: keyOf({ onCopyCapture: true })\n    }\n  },\n  cut: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onCut: true }),\n      captured: keyOf({ onCutCapture: true })\n    }\n  },\n  doubleClick: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onDoubleClick: true }),\n      captured: keyOf({ onDoubleClickCapture: true })\n    }\n  },\n  drag: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onDrag: true }),\n      captured: keyOf({ onDragCapture: true })\n    }\n  },\n  dragEnd: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onDragEnd: true }),\n      captured: keyOf({ onDragEndCapture: true })\n    }\n  },\n  dragEnter: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onDragEnter: true }),\n      captured: keyOf({ onDragEnterCapture: true })\n    }\n  },\n  dragExit: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onDragExit: true }),\n      captured: keyOf({ onDragExitCapture: true })\n    }\n  },\n  dragLeave: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onDragLeave: true }),\n      captured: keyOf({ onDragLeaveCapture: true })\n    }\n  },\n  dragOver: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onDragOver: true }),\n      captured: keyOf({ onDragOverCapture: true })\n    }\n  },\n  dragStart: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onDragStart: true }),\n      captured: keyOf({ onDragStartCapture: true })\n    }\n  },\n  drop: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onDrop: true }),\n      captured: keyOf({ onDropCapture: true })\n    }\n  },\n  durationChange: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onDurationChange: true }),\n      captured: keyOf({ onDurationChangeCapture: true })\n    }\n  },\n  emptied: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onEmptied: true }),\n      captured: keyOf({ onEmptiedCapture: true })\n    }\n  },\n  encrypted: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onEncrypted: true }),\n      captured: keyOf({ onEncryptedCapture: true })\n    }\n  },\n  ended: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onEnded: true }),\n      captured: keyOf({ onEndedCapture: true })\n    }\n  },\n  error: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onError: true }),\n      captured: keyOf({ onErrorCapture: true })\n    }\n  },\n  focus: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onFocus: true }),\n      captured: keyOf({ onFocusCapture: true })\n    }\n  },\n  input: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onInput: true }),\n      captured: keyOf({ onInputCapture: true })\n    }\n  },\n  keyDown: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onKeyDown: true }),\n      captured: keyOf({ onKeyDownCapture: true })\n    }\n  },\n  keyPress: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onKeyPress: true }),\n      captured: keyOf({ onKeyPressCapture: true })\n    }\n  },\n  keyUp: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onKeyUp: true }),\n      captured: keyOf({ onKeyUpCapture: true })\n    }\n  },\n  load: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onLoad: true }),\n      captured: keyOf({ onLoadCapture: true })\n    }\n  },\n  loadedData: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onLoadedData: true }),\n      captured: keyOf({ onLoadedDataCapture: true })\n    }\n  },\n  loadedMetadata: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onLoadedMetadata: true }),\n      captured: keyOf({ onLoadedMetadataCapture: true })\n    }\n  },\n  loadStart: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onLoadStart: true }),\n      captured: keyOf({ onLoadStartCapture: true })\n    }\n  },\n  // Note: We do not allow listening to mouseOver events. Instead, use the\n  // onMouseEnter/onMouseLeave created by `EnterLeaveEventPlugin`.\n  mouseDown: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onMouseDown: true }),\n      captured: keyOf({ onMouseDownCapture: true })\n    }\n  },\n  mouseMove: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onMouseMove: true }),\n      captured: keyOf({ onMouseMoveCapture: true })\n    }\n  },\n  mouseOut: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onMouseOut: true }),\n      captured: keyOf({ onMouseOutCapture: true })\n    }\n  },\n  mouseOver: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onMouseOver: true }),\n      captured: keyOf({ onMouseOverCapture: true })\n    }\n  },\n  mouseUp: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onMouseUp: true }),\n      captured: keyOf({ onMouseUpCapture: true })\n    }\n  },\n  paste: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onPaste: true }),\n      captured: keyOf({ onPasteCapture: true })\n    }\n  },\n  pause: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onPause: true }),\n      captured: keyOf({ onPauseCapture: true })\n    }\n  },\n  play: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onPlay: true }),\n      captured: keyOf({ onPlayCapture: true })\n    }\n  },\n  playing: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onPlaying: true }),\n      captured: keyOf({ onPlayingCapture: true })\n    }\n  },\n  progress: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onProgress: true }),\n      captured: keyOf({ onProgressCapture: true })\n    }\n  },\n  rateChange: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onRateChange: true }),\n      captured: keyOf({ onRateChangeCapture: true })\n    }\n  },\n  reset: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onReset: true }),\n      captured: keyOf({ onResetCapture: true })\n    }\n  },\n  scroll: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onScroll: true }),\n      captured: keyOf({ onScrollCapture: true })\n    }\n  },\n  seeked: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onSeeked: true }),\n      captured: keyOf({ onSeekedCapture: true })\n    }\n  },\n  seeking: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onSeeking: true }),\n      captured: keyOf({ onSeekingCapture: true })\n    }\n  },\n  stalled: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onStalled: true }),\n      captured: keyOf({ onStalledCapture: true })\n    }\n  },\n  submit: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onSubmit: true }),\n      captured: keyOf({ onSubmitCapture: true })\n    }\n  },\n  suspend: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onSuspend: true }),\n      captured: keyOf({ onSuspendCapture: true })\n    }\n  },\n  timeUpdate: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onTimeUpdate: true }),\n      captured: keyOf({ onTimeUpdateCapture: true })\n    }\n  },\n  touchCancel: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onTouchCancel: true }),\n      captured: keyOf({ onTouchCancelCapture: true })\n    }\n  },\n  touchEnd: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onTouchEnd: true }),\n      captured: keyOf({ onTouchEndCapture: true })\n    }\n  },\n  touchMove: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onTouchMove: true }),\n      captured: keyOf({ onTouchMoveCapture: true })\n    }\n  },\n  touchStart: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onTouchStart: true }),\n      captured: keyOf({ onTouchStartCapture: true })\n    }\n  },\n  volumeChange: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onVolumeChange: true }),\n      captured: keyOf({ onVolumeChangeCapture: true })\n    }\n  },\n  waiting: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onWaiting: true }),\n      captured: keyOf({ onWaitingCapture: true })\n    }\n  },\n  wheel: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onWheel: true }),\n      captured: keyOf({ onWheelCapture: true })\n    }\n  }\n};\n\nvar topLevelEventsToDispatchConfig = {\n  topAbort: eventTypes.abort,\n  topBlur: eventTypes.blur,\n  topCanPlay: eventTypes.canPlay,\n  topCanPlayThrough: eventTypes.canPlayThrough,\n  topClick: eventTypes.click,\n  topContextMenu: eventTypes.contextMenu,\n  topCopy: eventTypes.copy,\n  topCut: eventTypes.cut,\n  topDoubleClick: eventTypes.doubleClick,\n  topDrag: eventTypes.drag,\n  topDragEnd: eventTypes.dragEnd,\n  topDragEnter: eventTypes.dragEnter,\n  topDragExit: eventTypes.dragExit,\n  topDragLeave: eventTypes.dragLeave,\n  topDragOver: eventTypes.dragOver,\n  topDragStart: eventTypes.dragStart,\n  topDrop: eventTypes.drop,\n  topDurationChange: eventTypes.durationChange,\n  topEmptied: eventTypes.emptied,\n  topEncrypted: eventTypes.encrypted,\n  topEnded: eventTypes.ended,\n  topError: eventTypes.error,\n  topFocus: eventTypes.focus,\n  topInput: eventTypes.input,\n  topKeyDown: eventTypes.keyDown,\n  topKeyPress: eventTypes.keyPress,\n  topKeyUp: eventTypes.keyUp,\n  topLoad: eventTypes.load,\n  topLoadedData: eventTypes.loadedData,\n  topLoadedMetadata: eventTypes.loadedMetadata,\n  topLoadStart: eventTypes.loadStart,\n  topMouseDown: eventTypes.mouseDown,\n  topMouseMove: eventTypes.mouseMove,\n  topMouseOut: eventTypes.mouseOut,\n  topMouseOver: eventTypes.mouseOver,\n  topMouseUp: eventTypes.mouseUp,\n  topPaste: eventTypes.paste,\n  topPause: eventTypes.pause,\n  topPlay: eventTypes.play,\n  topPlaying: eventTypes.playing,\n  topProgress: eventTypes.progress,\n  topRateChange: eventTypes.rateChange,\n  topReset: eventTypes.reset,\n  topScroll: eventTypes.scroll,\n  topSeeked: eventTypes.seeked,\n  topSeeking: eventTypes.seeking,\n  topStalled: eventTypes.stalled,\n  topSubmit: eventTypes.submit,\n  topSuspend: eventTypes.suspend,\n  topTimeUpdate: eventTypes.timeUpdate,\n  topTouchCancel: eventTypes.touchCancel,\n  topTouchEnd: eventTypes.touchEnd,\n  topTouchMove: eventTypes.touchMove,\n  topTouchStart: eventTypes.touchStart,\n  topVolumeChange: eventTypes.volumeChange,\n  topWaiting: eventTypes.waiting,\n  topWheel: eventTypes.wheel\n};\n\nfor (var type in topLevelEventsToDispatchConfig) {\n  topLevelEventsToDispatchConfig[type].dependencies = [type];\n}\n\nvar ON_CLICK_KEY = keyOf({ onClick: null });\nvar onClickListeners = {};\n\nvar SimpleEventPlugin = {\n\n  eventTypes: eventTypes,\n\n  /**\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {DOMEventTarget} topLevelTarget The listening component root node.\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n   * @param {object} nativeEvent Native browser event.\n   * @return {*} An accumulation of synthetic events.\n   * @see {EventPluginHub.extractEvents}\n   */\n  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {\n    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];\n    if (!dispatchConfig) {\n      return null;\n    }\n    var EventConstructor;\n    switch (topLevelType) {\n      case topLevelTypes.topAbort:\n      case topLevelTypes.topCanPlay:\n      case topLevelTypes.topCanPlayThrough:\n      case topLevelTypes.topDurationChange:\n      case topLevelTypes.topEmptied:\n      case topLevelTypes.topEncrypted:\n      case topLevelTypes.topEnded:\n      case topLevelTypes.topError:\n      case topLevelTypes.topInput:\n      case topLevelTypes.topLoad:\n      case topLevelTypes.topLoadedData:\n      case topLevelTypes.topLoadedMetadata:\n      case topLevelTypes.topLoadStart:\n      case topLevelTypes.topPause:\n      case topLevelTypes.topPlay:\n      case topLevelTypes.topPlaying:\n      case topLevelTypes.topProgress:\n      case topLevelTypes.topRateChange:\n      case topLevelTypes.topReset:\n      case topLevelTypes.topSeeked:\n      case topLevelTypes.topSeeking:\n      case topLevelTypes.topStalled:\n      case topLevelTypes.topSubmit:\n      case topLevelTypes.topSuspend:\n      case topLevelTypes.topTimeUpdate:\n      case topLevelTypes.topVolumeChange:\n      case topLevelTypes.topWaiting:\n        // HTML Events\n        // @see http://www.w3.org/TR/html5/index.html#events-0\n        EventConstructor = SyntheticEvent;\n        break;\n      case topLevelTypes.topKeyPress:\n        // FireFox creates a keypress event for function keys too. This removes\n        // the unwanted keypress events. Enter is however both printable and\n        // non-printable. One would expect Tab to be as well (but it isn't).\n        if (getEventCharCode(nativeEvent) === 0) {\n          return null;\n        }\n      /* falls through */\n      case topLevelTypes.topKeyDown:\n      case topLevelTypes.topKeyUp:\n        EventConstructor = SyntheticKeyboardEvent;\n        break;\n      case topLevelTypes.topBlur:\n      case topLevelTypes.topFocus:\n        EventConstructor = SyntheticFocusEvent;\n        break;\n      case topLevelTypes.topClick:\n        // Firefox creates a click event on right mouse clicks. This removes the\n        // unwanted click events.\n        if (nativeEvent.button === 2) {\n          return null;\n        }\n      /* falls through */\n      case topLevelTypes.topContextMenu:\n      case topLevelTypes.topDoubleClick:\n      case topLevelTypes.topMouseDown:\n      case topLevelTypes.topMouseMove:\n      case topLevelTypes.topMouseOut:\n      case topLevelTypes.topMouseOver:\n      case topLevelTypes.topMouseUp:\n        EventConstructor = SyntheticMouseEvent;\n        break;\n      case topLevelTypes.topDrag:\n      case topLevelTypes.topDragEnd:\n      case topLevelTypes.topDragEnter:\n      case topLevelTypes.topDragExit:\n      case topLevelTypes.topDragLeave:\n      case topLevelTypes.topDragOver:\n      case topLevelTypes.topDragStart:\n      case topLevelTypes.topDrop:\n        EventConstructor = SyntheticDragEvent;\n        break;\n      case topLevelTypes.topTouchCancel:\n      case topLevelTypes.topTouchEnd:\n      case topLevelTypes.topTouchMove:\n      case topLevelTypes.topTouchStart:\n        EventConstructor = SyntheticTouchEvent;\n        break;\n      case topLevelTypes.topScroll:\n        EventConstructor = SyntheticUIEvent;\n        break;\n      case topLevelTypes.topWheel:\n        EventConstructor = SyntheticWheelEvent;\n        break;\n      case topLevelTypes.topCopy:\n      case topLevelTypes.topCut:\n      case topLevelTypes.topPaste:\n        EventConstructor = SyntheticClipboardEvent;\n        break;\n    }\n    !EventConstructor ? process.env.NODE_ENV !== 'production' ? invariant(false, 'SimpleEventPlugin: Unhandled event type, `%s`.', topLevelType) : invariant(false) : undefined;\n    var event = EventConstructor.getPooled(dispatchConfig, topLevelTargetID, nativeEvent, nativeEventTarget);\n    EventPropagators.accumulateTwoPhaseDispatches(event);\n    return event;\n  },\n\n  didPutListener: function (id, registrationName, listener) {\n    // Mobile Safari does not fire properly bubble click events on\n    // non-interactive elements, which means delegated click listeners do not\n    // fire. The workaround for this bug involves attaching an empty click\n    // listener on the target node.\n    if (registrationName === ON_CLICK_KEY) {\n      var node = ReactMount.getNode(id);\n      if (!onClickListeners[id]) {\n        onClickListeners[id] = EventListener.listen(node, 'click', emptyFunction);\n      }\n    }\n  },\n\n  willDeleteListener: function (id, registrationName) {\n    if (registrationName === ON_CLICK_KEY) {\n      onClickListeners[id].remove();\n      delete onClickListeners[id];\n    }\n  }\n\n};\n\nmodule.exports = SimpleEventPlugin;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule SyntheticClipboardEvent\n * @typechecks static-only\n */\n\n'use strict';\n\nvar SyntheticEvent = require('./SyntheticEvent');\n\n/**\n * @interface Event\n * @see http://www.w3.org/TR/clipboard-apis/\n */\nvar ClipboardEventInterface = {\n  clipboardData: function (event) {\n    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;\n  }\n};\n\n/**\n * @param {object} dispatchConfig Configuration used to dispatch this event.\n * @param {string} dispatchMarker Marker identifying the event target.\n * @param {object} nativeEvent Native browser event.\n * @extends {SyntheticUIEvent}\n */\nfunction SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {\n  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);\n}\n\nSyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);\n\nmodule.exports = SyntheticClipboardEvent;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule SyntheticFocusEvent\n * @typechecks static-only\n */\n\n'use strict';\n\nvar SyntheticUIEvent = require('./SyntheticUIEvent');\n\n/**\n * @interface FocusEvent\n * @see http://www.w3.org/TR/DOM-Level-3-Events/\n */\nvar FocusEventInterface = {\n  relatedTarget: null\n};\n\n/**\n * @param {object} dispatchConfig Configuration used to dispatch this event.\n * @param {string} dispatchMarker Marker identifying the event target.\n * @param {object} nativeEvent Native browser event.\n * @extends {SyntheticUIEvent}\n */\nfunction SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {\n  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);\n}\n\nSyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);\n\nmodule.exports = SyntheticFocusEvent;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule SyntheticKeyboardEvent\n * @typechecks static-only\n */\n\n'use strict';\n\nvar SyntheticUIEvent = require('./SyntheticUIEvent');\n\nvar getEventCharCode = require('./getEventCharCode');\nvar getEventKey = require('./getEventKey');\nvar getEventModifierState = require('./getEventModifierState');\n\n/**\n * @interface KeyboardEvent\n * @see http://www.w3.org/TR/DOM-Level-3-Events/\n */\nvar KeyboardEventInterface = {\n  key: getEventKey,\n  location: null,\n  ctrlKey: null,\n  shiftKey: null,\n  altKey: null,\n  metaKey: null,\n  repeat: null,\n  locale: null,\n  getModifierState: getEventModifierState,\n  // Legacy Interface\n  charCode: function (event) {\n    // `charCode` is the result of a KeyPress event and represents the value of\n    // the actual printable character.\n\n    // KeyPress is deprecated, but its replacement is not yet final and not\n    // implemented in any major browser. Only KeyPress has charCode.\n    if (event.type === 'keypress') {\n      return getEventCharCode(event);\n    }\n    return 0;\n  },\n  keyCode: function (event) {\n    // `keyCode` is the result of a KeyDown/Up event and represents the value of\n    // physical keyboard key.\n\n    // The actual meaning of the value depends on the users' keyboard layout\n    // which cannot be detected. Assuming that it is a US keyboard layout\n    // provides a surprisingly accurate mapping for US and European users.\n    // Due to this, it is left to the user to implement at this time.\n    if (event.type === 'keydown' || event.type === 'keyup') {\n      return event.keyCode;\n    }\n    return 0;\n  },\n  which: function (event) {\n    // `which` is an alias for either `keyCode` or `charCode` depending on the\n    // type of the event.\n    if (event.type === 'keypress') {\n      return getEventCharCode(event);\n    }\n    if (event.type === 'keydown' || event.type === 'keyup') {\n      return event.keyCode;\n    }\n    return 0;\n  }\n};\n\n/**\n * @param {object} dispatchConfig Configuration used to dispatch this event.\n * @param {string} dispatchMarker Marker identifying the event target.\n * @param {object} nativeEvent Native browser event.\n * @extends {SyntheticUIEvent}\n */\nfunction SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {\n  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);\n}\n\nSyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);\n\nmodule.exports = SyntheticKeyboardEvent;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule getEventCharCode\n * @typechecks static-only\n */\n\n'use strict';\n\n/**\n * `charCode` represents the actual \"character code\" and is safe to use with\n * `String.fromCharCode`. As such, only keys that correspond to printable\n * characters produce a valid `charCode`, the only exception to this is Enter.\n * The Tab-key is considered non-printable and does not have a `charCode`,\n * presumably because it does not produce a tab-character in browsers.\n *\n * @param {object} nativeEvent Native browser event.\n * @return {number} Normalized `charCode` property.\n */\nfunction getEventCharCode(nativeEvent) {\n  var charCode;\n  var keyCode = nativeEvent.keyCode;\n\n  if ('charCode' in nativeEvent) {\n    charCode = nativeEvent.charCode;\n\n    // FF does not set `charCode` for the Enter-key, check against `keyCode`.\n    if (charCode === 0 && keyCode === 13) {\n      charCode = 13;\n    }\n  } else {\n    // IE8 does not implement `charCode`, but `keyCode` has the correct value.\n    charCode = keyCode;\n  }\n\n  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.\n  // Must not discard the (non-)printable Enter-key.\n  if (charCode >= 32 || charCode === 13) {\n    return charCode;\n  }\n\n  return 0;\n}\n\nmodule.exports = getEventCharCode;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule getEventKey\n * @typechecks static-only\n */\n\n'use strict';\n\nvar getEventCharCode = require('./getEventCharCode');\n\n/**\n * Normalization of deprecated HTML5 `key` values\n * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names\n */\nvar normalizeKey = {\n  'Esc': 'Escape',\n  'Spacebar': ' ',\n  'Left': 'ArrowLeft',\n  'Up': 'ArrowUp',\n  'Right': 'ArrowRight',\n  'Down': 'ArrowDown',\n  'Del': 'Delete',\n  'Win': 'OS',\n  'Menu': 'ContextMenu',\n  'Apps': 'ContextMenu',\n  'Scroll': 'ScrollLock',\n  'MozPrintableKey': 'Unidentified'\n};\n\n/**\n * Translation from legacy `keyCode` to HTML5 `key`\n * Only special keys supported, all others depend on keyboard layout or browser\n * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names\n */\nvar translateToKey = {\n  8: 'Backspace',\n  9: 'Tab',\n  12: 'Clear',\n  13: 'Enter',\n  16: 'Shift',\n  17: 'Control',\n  18: 'Alt',\n  19: 'Pause',\n  20: 'CapsLock',\n  27: 'Escape',\n  32: ' ',\n  33: 'PageUp',\n  34: 'PageDown',\n  35: 'End',\n  36: 'Home',\n  37: 'ArrowLeft',\n  38: 'ArrowUp',\n  39: 'ArrowRight',\n  40: 'ArrowDown',\n  45: 'Insert',\n  46: 'Delete',\n  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',\n  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',\n  144: 'NumLock',\n  145: 'ScrollLock',\n  224: 'Meta'\n};\n\n/**\n * @param {object} nativeEvent Native browser event.\n * @return {string} Normalized `key` property.\n */\nfunction getEventKey(nativeEvent) {\n  if (nativeEvent.key) {\n    // Normalize inconsistent values reported by browsers due to\n    // implementations of a working draft specification.\n\n    // FireFox implements `key` but returns `MozPrintableKey` for all\n    // printable characters (normalized to `Unidentified`), ignore it.\n    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;\n    if (key !== 'Unidentified') {\n      return key;\n    }\n  }\n\n  // Browser does not implement `key`, polyfill as much of it as we can.\n  if (nativeEvent.type === 'keypress') {\n    var charCode = getEventCharCode(nativeEvent);\n\n    // The enter-key is technically both printable and non-printable and can\n    // thus be captured by `keypress`, no other non-printable key should.\n    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);\n  }\n  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {\n    // While user keyboard layout determines the actual meaning of each\n    // `keyCode` value, almost all function keys have a universal value.\n    return translateToKey[nativeEvent.keyCode] || 'Unidentified';\n  }\n  return '';\n}\n\nmodule.exports = getEventKey;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule SyntheticDragEvent\n * @typechecks static-only\n */\n\n'use strict';\n\nvar SyntheticMouseEvent = require('./SyntheticMouseEvent');\n\n/**\n * @interface DragEvent\n * @see http://www.w3.org/TR/DOM-Level-3-Events/\n */\nvar DragEventInterface = {\n  dataTransfer: null\n};\n\n/**\n * @param {object} dispatchConfig Configuration used to dispatch this event.\n * @param {string} dispatchMarker Marker identifying the event target.\n * @param {object} nativeEvent Native browser event.\n * @extends {SyntheticUIEvent}\n */\nfunction SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {\n  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);\n}\n\nSyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);\n\nmodule.exports = SyntheticDragEvent;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule SyntheticTouchEvent\n * @typechecks static-only\n */\n\n'use strict';\n\nvar SyntheticUIEvent = require('./SyntheticUIEvent');\n\nvar getEventModifierState = require('./getEventModifierState');\n\n/**\n * @interface TouchEvent\n * @see http://www.w3.org/TR/touch-events/\n */\nvar TouchEventInterface = {\n  touches: null,\n  targetTouches: null,\n  changedTouches: null,\n  altKey: null,\n  metaKey: null,\n  ctrlKey: null,\n  shiftKey: null,\n  getModifierState: getEventModifierState\n};\n\n/**\n * @param {object} dispatchConfig Configuration used to dispatch this event.\n * @param {string} dispatchMarker Marker identifying the event target.\n * @param {object} nativeEvent Native browser event.\n * @extends {SyntheticUIEvent}\n */\nfunction SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {\n  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);\n}\n\nSyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);\n\nmodule.exports = SyntheticTouchEvent;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule SyntheticWheelEvent\n * @typechecks static-only\n */\n\n'use strict';\n\nvar SyntheticMouseEvent = require('./SyntheticMouseEvent');\n\n/**\n * @interface WheelEvent\n * @see http://www.w3.org/TR/DOM-Level-3-Events/\n */\nvar WheelEventInterface = {\n  deltaX: function (event) {\n    return 'deltaX' in event ? event.deltaX :\n    // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).\n    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;\n  },\n  deltaY: function (event) {\n    return 'deltaY' in event ? event.deltaY :\n    // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).\n    'wheelDeltaY' in event ? -event.wheelDeltaY :\n    // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).\n    'wheelDelta' in event ? -event.wheelDelta : 0;\n  },\n  deltaZ: null,\n\n  // Browsers without \"deltaMode\" is reporting in raw wheel delta where one\n  // notch on the scroll is always +/- 120, roughly equivalent to pixels.\n  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or\n  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.\n  deltaMode: null\n};\n\n/**\n * @param {object} dispatchConfig Configuration used to dispatch this event.\n * @param {string} dispatchMarker Marker identifying the event target.\n * @param {object} nativeEvent Native browser event.\n * @extends {SyntheticMouseEvent}\n */\nfunction SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {\n  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);\n}\n\nSyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);\n\nmodule.exports = SyntheticWheelEvent;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule SVGDOMPropertyConfig\n */\n\n'use strict';\n\nvar DOMProperty = require('./DOMProperty');\n\nvar MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;\n\nvar NS = {\n  xlink: 'http://www.w3.org/1999/xlink',\n  xml: 'http://www.w3.org/XML/1998/namespace'\n};\n\nvar SVGDOMPropertyConfig = {\n  Properties: {\n    clipPath: MUST_USE_ATTRIBUTE,\n    cx: MUST_USE_ATTRIBUTE,\n    cy: MUST_USE_ATTRIBUTE,\n    d: MUST_USE_ATTRIBUTE,\n    dx: MUST_USE_ATTRIBUTE,\n    dy: MUST_USE_ATTRIBUTE,\n    fill: MUST_USE_ATTRIBUTE,\n    fillOpacity: MUST_USE_ATTRIBUTE,\n    fontFamily: MUST_USE_ATTRIBUTE,\n    fontSize: MUST_USE_ATTRIBUTE,\n    fx: MUST_USE_ATTRIBUTE,\n    fy: MUST_USE_ATTRIBUTE,\n    gradientTransform: MUST_USE_ATTRIBUTE,\n    gradientUnits: MUST_USE_ATTRIBUTE,\n    markerEnd: MUST_USE_ATTRIBUTE,\n    markerMid: MUST_USE_ATTRIBUTE,\n    markerStart: MUST_USE_ATTRIBUTE,\n    offset: MUST_USE_ATTRIBUTE,\n    opacity: MUST_USE_ATTRIBUTE,\n    patternContentUnits: MUST_USE_ATTRIBUTE,\n    patternUnits: MUST_USE_ATTRIBUTE,\n    points: MUST_USE_ATTRIBUTE,\n    preserveAspectRatio: MUST_USE_ATTRIBUTE,\n    r: MUST_USE_ATTRIBUTE,\n    rx: MUST_USE_ATTRIBUTE,\n    ry: MUST_USE_ATTRIBUTE,\n    spreadMethod: MUST_USE_ATTRIBUTE,\n    stopColor: MUST_USE_ATTRIBUTE,\n    stopOpacity: MUST_USE_ATTRIBUTE,\n    stroke: MUST_USE_ATTRIBUTE,\n    strokeDasharray: MUST_USE_ATTRIBUTE,\n    strokeLinecap: MUST_USE_ATTRIBUTE,\n    strokeOpacity: MUST_USE_ATTRIBUTE,\n    strokeWidth: MUST_USE_ATTRIBUTE,\n    textAnchor: MUST_USE_ATTRIBUTE,\n    transform: MUST_USE_ATTRIBUTE,\n    version: MUST_USE_ATTRIBUTE,\n    viewBox: MUST_USE_ATTRIBUTE,\n    x1: MUST_USE_ATTRIBUTE,\n    x2: MUST_USE_ATTRIBUTE,\n    x: MUST_USE_ATTRIBUTE,\n    xlinkActuate: MUST_USE_ATTRIBUTE,\n    xlinkArcrole: MUST_USE_ATTRIBUTE,\n    xlinkHref: MUST_USE_ATTRIBUTE,\n    xlinkRole: MUST_USE_ATTRIBUTE,\n    xlinkShow: MUST_USE_ATTRIBUTE,\n    xlinkTitle: MUST_USE_ATTRIBUTE,\n    xlinkType: MUST_USE_ATTRIBUTE,\n    xmlBase: MUST_USE_ATTRIBUTE,\n    xmlLang: MUST_USE_ATTRIBUTE,\n    xmlSpace: MUST_USE_ATTRIBUTE,\n    y1: MUST_USE_ATTRIBUTE,\n    y2: MUST_USE_ATTRIBUTE,\n    y: MUST_USE_ATTRIBUTE\n  },\n  DOMAttributeNamespaces: {\n    xlinkActuate: NS.xlink,\n    xlinkArcrole: NS.xlink,\n    xlinkHref: NS.xlink,\n    xlinkRole: NS.xlink,\n    xlinkShow: NS.xlink,\n    xlinkTitle: NS.xlink,\n    xlinkType: NS.xlink,\n    xmlBase: NS.xml,\n    xmlLang: NS.xml,\n    xmlSpace: NS.xml\n  },\n  DOMAttributeNames: {\n    clipPath: 'clip-path',\n    fillOpacity: 'fill-opacity',\n    fontFamily: 'font-family',\n    fontSize: 'font-size',\n    gradientTransform: 'gradientTransform',\n    gradientUnits: 'gradientUnits',\n    markerEnd: 'marker-end',\n    markerMid: 'marker-mid',\n    markerStart: 'marker-start',\n    patternContentUnits: 'patternContentUnits',\n    patternUnits: 'patternUnits',\n    preserveAspectRatio: 'preserveAspectRatio',\n    spreadMethod: 'spreadMethod',\n    stopColor: 'stop-color',\n    stopOpacity: 'stop-opacity',\n    strokeDasharray: 'stroke-dasharray',\n    strokeLinecap: 'stroke-linecap',\n    strokeOpacity: 'stroke-opacity',\n    strokeWidth: 'stroke-width',\n    textAnchor: 'text-anchor',\n    viewBox: 'viewBox',\n    xlinkActuate: 'xlink:actuate',\n    xlinkArcrole: 'xlink:arcrole',\n    xlinkHref: 'xlink:href',\n    xlinkRole: 'xlink:role',\n    xlinkShow: 'xlink:show',\n    xlinkTitle: 'xlink:title',\n    xlinkType: 'xlink:type',\n    xmlBase: 'xml:base',\n    xmlLang: 'xml:lang',\n    xmlSpace: 'xml:space'\n  }\n};\n\nmodule.exports = SVGDOMPropertyConfig;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDefaultPerf\n * @typechecks static-only\n */\n\n'use strict';\n\nvar DOMProperty = require('./DOMProperty');\nvar ReactDefaultPerfAnalysis = require('./ReactDefaultPerfAnalysis');\nvar ReactMount = require('./ReactMount');\nvar ReactPerf = require('./ReactPerf');\n\nvar performanceNow = require('fbjs/lib/performanceNow');\n\nfunction roundFloat(val) {\n  return Math.floor(val * 100) / 100;\n}\n\nfunction addValue(obj, key, val) {\n  obj[key] = (obj[key] || 0) + val;\n}\n\nvar ReactDefaultPerf = {\n  _allMeasurements: [], // last item in the list is the current one\n  _mountStack: [0],\n  _injected: false,\n\n  start: function () {\n    if (!ReactDefaultPerf._injected) {\n      ReactPerf.injection.injectMeasure(ReactDefaultPerf.measure);\n    }\n\n    ReactDefaultPerf._allMeasurements.length = 0;\n    ReactPerf.enableMeasure = true;\n  },\n\n  stop: function () {\n    ReactPerf.enableMeasure = false;\n  },\n\n  getLastMeasurements: function () {\n    return ReactDefaultPerf._allMeasurements;\n  },\n\n  printExclusive: function (measurements) {\n    measurements = measurements || ReactDefaultPerf._allMeasurements;\n    var summary = ReactDefaultPerfAnalysis.getExclusiveSummary(measurements);\n    console.table(summary.map(function (item) {\n      return {\n        'Component class name': item.componentName,\n        'Total inclusive time (ms)': roundFloat(item.inclusive),\n        'Exclusive mount time (ms)': roundFloat(item.exclusive),\n        'Exclusive render time (ms)': roundFloat(item.render),\n        'Mount time per instance (ms)': roundFloat(item.exclusive / item.count),\n        'Render time per instance (ms)': roundFloat(item.render / item.count),\n        'Instances': item.count\n      };\n    }));\n    // TODO: ReactDefaultPerfAnalysis.getTotalTime() does not return the correct\n    // number.\n  },\n\n  printInclusive: function (measurements) {\n    measurements = measurements || ReactDefaultPerf._allMeasurements;\n    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements);\n    console.table(summary.map(function (item) {\n      return {\n        'Owner > component': item.componentName,\n        'Inclusive time (ms)': roundFloat(item.time),\n        'Instances': item.count\n      };\n    }));\n    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');\n  },\n\n  getMeasurementsSummaryMap: function (measurements) {\n    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements, true);\n    return summary.map(function (item) {\n      return {\n        'Owner > component': item.componentName,\n        'Wasted time (ms)': item.time,\n        'Instances': item.count\n      };\n    });\n  },\n\n  printWasted: function (measurements) {\n    measurements = measurements || ReactDefaultPerf._allMeasurements;\n    console.table(ReactDefaultPerf.getMeasurementsSummaryMap(measurements));\n    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');\n  },\n\n  printDOM: function (measurements) {\n    measurements = measurements || ReactDefaultPerf._allMeasurements;\n    var summary = ReactDefaultPerfAnalysis.getDOMSummary(measurements);\n    console.table(summary.map(function (item) {\n      var result = {};\n      result[DOMProperty.ID_ATTRIBUTE_NAME] = item.id;\n      result.type = item.type;\n      result.args = JSON.stringify(item.args);\n      return result;\n    }));\n    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');\n  },\n\n  _recordWrite: function (id, fnName, totalTime, args) {\n    // TODO: totalTime isn't that useful since it doesn't count paints/reflows\n    var writes = ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1].writes;\n    writes[id] = writes[id] || [];\n    writes[id].push({\n      type: fnName,\n      time: totalTime,\n      args: args\n    });\n  },\n\n  measure: function (moduleName, fnName, func) {\n    return function () {\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      var totalTime;\n      var rv;\n      var start;\n\n      if (fnName === '_renderNewRootComponent' || fnName === 'flushBatchedUpdates') {\n        // A \"measurement\" is a set of metrics recorded for each flush. We want\n        // to group the metrics for a given flush together so we can look at the\n        // components that rendered and the DOM operations that actually\n        // happened to determine the amount of \"wasted work\" performed.\n        ReactDefaultPerf._allMeasurements.push({\n          exclusive: {},\n          inclusive: {},\n          render: {},\n          counts: {},\n          writes: {},\n          displayNames: {},\n          totalTime: 0,\n          created: {}\n        });\n        start = performanceNow();\n        rv = func.apply(this, args);\n        ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1].totalTime = performanceNow() - start;\n        return rv;\n      } else if (fnName === '_mountImageIntoNode' || moduleName === 'ReactBrowserEventEmitter' || moduleName === 'ReactDOMIDOperations' || moduleName === 'CSSPropertyOperations' || moduleName === 'DOMChildrenOperations' || moduleName === 'DOMPropertyOperations') {\n        start = performanceNow();\n        rv = func.apply(this, args);\n        totalTime = performanceNow() - start;\n\n        if (fnName === '_mountImageIntoNode') {\n          var mountID = ReactMount.getID(args[1]);\n          ReactDefaultPerf._recordWrite(mountID, fnName, totalTime, args[0]);\n        } else if (fnName === 'dangerouslyProcessChildrenUpdates') {\n          // special format\n          args[0].forEach(function (update) {\n            var writeArgs = {};\n            if (update.fromIndex !== null) {\n              writeArgs.fromIndex = update.fromIndex;\n            }\n            if (update.toIndex !== null) {\n              writeArgs.toIndex = update.toIndex;\n            }\n            if (update.textContent !== null) {\n              writeArgs.textContent = update.textContent;\n            }\n            if (update.markupIndex !== null) {\n              writeArgs.markup = args[1][update.markupIndex];\n            }\n            ReactDefaultPerf._recordWrite(update.parentID, update.type, totalTime, writeArgs);\n          });\n        } else {\n          // basic format\n          var id = args[0];\n          if (typeof id === 'object') {\n            id = ReactMount.getID(args[0]);\n          }\n          ReactDefaultPerf._recordWrite(id, fnName, totalTime, Array.prototype.slice.call(args, 1));\n        }\n        return rv;\n      } else if (moduleName === 'ReactCompositeComponent' && (fnName === 'mountComponent' || fnName === 'updateComponent' || // TODO: receiveComponent()?\n      fnName === '_renderValidatedComponent')) {\n\n        if (this._currentElement.type === ReactMount.TopLevelWrapper) {\n          return func.apply(this, args);\n        }\n\n        var rootNodeID = fnName === 'mountComponent' ? args[0] : this._rootNodeID;\n        var isRender = fnName === '_renderValidatedComponent';\n        var isMount = fnName === 'mountComponent';\n\n        var mountStack = ReactDefaultPerf._mountStack;\n        var entry = ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1];\n\n        if (isRender) {\n          addValue(entry.counts, rootNodeID, 1);\n        } else if (isMount) {\n          entry.created[rootNodeID] = true;\n          mountStack.push(0);\n        }\n\n        start = performanceNow();\n        rv = func.apply(this, args);\n        totalTime = performanceNow() - start;\n\n        if (isRender) {\n          addValue(entry.render, rootNodeID, totalTime);\n        } else if (isMount) {\n          var subMountTime = mountStack.pop();\n          mountStack[mountStack.length - 1] += totalTime;\n          addValue(entry.exclusive, rootNodeID, totalTime - subMountTime);\n          addValue(entry.inclusive, rootNodeID, totalTime);\n        } else {\n          addValue(entry.inclusive, rootNodeID, totalTime);\n        }\n\n        entry.displayNames[rootNodeID] = {\n          current: this.getName(),\n          owner: this._currentElement._owner ? this._currentElement._owner.getName() : '<root>'\n        };\n\n        return rv;\n      } else {\n        return func.apply(this, args);\n      }\n    };\n  }\n};\n\nmodule.exports = ReactDefaultPerf;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDefaultPerfAnalysis\n */\n\n'use strict';\n\nvar assign = require('./Object.assign');\n\n// Don't try to save users less than 1.2ms (a number I made up)\nvar DONT_CARE_THRESHOLD = 1.2;\nvar DOM_OPERATION_TYPES = {\n  '_mountImageIntoNode': 'set innerHTML',\n  INSERT_MARKUP: 'set innerHTML',\n  MOVE_EXISTING: 'move',\n  REMOVE_NODE: 'remove',\n  SET_MARKUP: 'set innerHTML',\n  TEXT_CONTENT: 'set textContent',\n  'setValueForProperty': 'update attribute',\n  'setValueForAttribute': 'update attribute',\n  'deleteValueForProperty': 'remove attribute',\n  'setValueForStyles': 'update styles',\n  'replaceNodeWithMarkup': 'replace',\n  'updateTextContent': 'set textContent'\n};\n\nfunction getTotalTime(measurements) {\n  // TODO: return number of DOM ops? could be misleading.\n  // TODO: measure dropped frames after reconcile?\n  // TODO: log total time of each reconcile and the top-level component\n  // class that triggered it.\n  var totalTime = 0;\n  for (var i = 0; i < measurements.length; i++) {\n    var measurement = measurements[i];\n    totalTime += measurement.totalTime;\n  }\n  return totalTime;\n}\n\nfunction getDOMSummary(measurements) {\n  var items = [];\n  measurements.forEach(function (measurement) {\n    Object.keys(measurement.writes).forEach(function (id) {\n      measurement.writes[id].forEach(function (write) {\n        items.push({\n          id: id,\n          type: DOM_OPERATION_TYPES[write.type] || write.type,\n          args: write.args\n        });\n      });\n    });\n  });\n  return items;\n}\n\nfunction getExclusiveSummary(measurements) {\n  var candidates = {};\n  var displayName;\n\n  for (var i = 0; i < measurements.length; i++) {\n    var measurement = measurements[i];\n    var allIDs = assign({}, measurement.exclusive, measurement.inclusive);\n\n    for (var id in allIDs) {\n      displayName = measurement.displayNames[id].current;\n\n      candidates[displayName] = candidates[displayName] || {\n        componentName: displayName,\n        inclusive: 0,\n        exclusive: 0,\n        render: 0,\n        count: 0\n      };\n      if (measurement.render[id]) {\n        candidates[displayName].render += measurement.render[id];\n      }\n      if (measurement.exclusive[id]) {\n        candidates[displayName].exclusive += measurement.exclusive[id];\n      }\n      if (measurement.inclusive[id]) {\n        candidates[displayName].inclusive += measurement.inclusive[id];\n      }\n      if (measurement.counts[id]) {\n        candidates[displayName].count += measurement.counts[id];\n      }\n    }\n  }\n\n  // Now make a sorted array with the results.\n  var arr = [];\n  for (displayName in candidates) {\n    if (candidates[displayName].exclusive >= DONT_CARE_THRESHOLD) {\n      arr.push(candidates[displayName]);\n    }\n  }\n\n  arr.sort(function (a, b) {\n    return b.exclusive - a.exclusive;\n  });\n\n  return arr;\n}\n\nfunction getInclusiveSummary(measurements, onlyClean) {\n  var candidates = {};\n  var inclusiveKey;\n\n  for (var i = 0; i < measurements.length; i++) {\n    var measurement = measurements[i];\n    var allIDs = assign({}, measurement.exclusive, measurement.inclusive);\n    var cleanComponents;\n\n    if (onlyClean) {\n      cleanComponents = getUnchangedComponents(measurement);\n    }\n\n    for (var id in allIDs) {\n      if (onlyClean && !cleanComponents[id]) {\n        continue;\n      }\n\n      var displayName = measurement.displayNames[id];\n\n      // Inclusive time is not useful for many components without knowing where\n      // they are instantiated. So we aggregate inclusive time with both the\n      // owner and current displayName as the key.\n      inclusiveKey = displayName.owner + ' > ' + displayName.current;\n\n      candidates[inclusiveKey] = candidates[inclusiveKey] || {\n        componentName: inclusiveKey,\n        time: 0,\n        count: 0\n      };\n\n      if (measurement.inclusive[id]) {\n        candidates[inclusiveKey].time += measurement.inclusive[id];\n      }\n      if (measurement.counts[id]) {\n        candidates[inclusiveKey].count += measurement.counts[id];\n      }\n    }\n  }\n\n  // Now make a sorted array with the results.\n  var arr = [];\n  for (inclusiveKey in candidates) {\n    if (candidates[inclusiveKey].time >= DONT_CARE_THRESHOLD) {\n      arr.push(candidates[inclusiveKey]);\n    }\n  }\n\n  arr.sort(function (a, b) {\n    return b.time - a.time;\n  });\n\n  return arr;\n}\n\nfunction getUnchangedComponents(measurement) {\n  // For a given reconcile, look at which components did not actually\n  // render anything to the DOM and return a mapping of their ID to\n  // the amount of time it took to render the entire subtree.\n  var cleanComponents = {};\n  var dirtyLeafIDs = Object.keys(measurement.writes);\n  var allIDs = assign({}, measurement.exclusive, measurement.inclusive);\n\n  for (var id in allIDs) {\n    var isDirty = false;\n    // For each component that rendered, see if a component that triggered\n    // a DOM op is in its subtree.\n    for (var i = 0; i < dirtyLeafIDs.length; i++) {\n      if (dirtyLeafIDs[i].indexOf(id) === 0) {\n        isDirty = true;\n        break;\n      }\n    }\n    // check if component newly created\n    if (measurement.created[id]) {\n      isDirty = true;\n    }\n    if (!isDirty && measurement.counts[id] > 0) {\n      cleanComponents[id] = true;\n    }\n  }\n  return cleanComponents;\n}\n\nvar ReactDefaultPerfAnalysis = {\n  getExclusiveSummary: getExclusiveSummary,\n  getInclusiveSummary: getInclusiveSummary,\n  getDOMSummary: getDOMSummary,\n  getTotalTime: getTotalTime\n};\n\nmodule.exports = ReactDefaultPerfAnalysis;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactVersion\n */\n\n'use strict';\n\nmodule.exports = '0.14.7';","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n* @providesModule renderSubtreeIntoContainer\n*/\n\n'use strict';\n\nvar ReactMount = require('./ReactMount');\n\nmodule.exports = ReactMount.renderSubtreeIntoContainer;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMServer\n */\n\n'use strict';\n\nvar ReactDefaultInjection = require('./ReactDefaultInjection');\nvar ReactServerRendering = require('./ReactServerRendering');\nvar ReactVersion = require('./ReactVersion');\n\nReactDefaultInjection.inject();\n\nvar ReactDOMServer = {\n  renderToString: ReactServerRendering.renderToString,\n  renderToStaticMarkup: ReactServerRendering.renderToStaticMarkup,\n  version: ReactVersion\n};\n\nmodule.exports = ReactDOMServer;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @typechecks static-only\n * @providesModule ReactServerRendering\n */\n'use strict';\n\nvar ReactDefaultBatchingStrategy = require('./ReactDefaultBatchingStrategy');\nvar ReactElement = require('./ReactElement');\nvar ReactInstanceHandles = require('./ReactInstanceHandles');\nvar ReactMarkupChecksum = require('./ReactMarkupChecksum');\nvar ReactServerBatchingStrategy = require('./ReactServerBatchingStrategy');\nvar ReactServerRenderingTransaction = require('./ReactServerRenderingTransaction');\nvar ReactUpdates = require('./ReactUpdates');\n\nvar emptyObject = require('fbjs/lib/emptyObject');\nvar instantiateReactComponent = require('./instantiateReactComponent');\nvar invariant = require('fbjs/lib/invariant');\n\n/**\n * @param {ReactElement} element\n * @return {string} the HTML markup\n */\nfunction renderToString(element) {\n  !ReactElement.isValidElement(element) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'renderToString(): You must pass a valid ReactElement.') : invariant(false) : undefined;\n\n  var transaction;\n  try {\n    ReactUpdates.injection.injectBatchingStrategy(ReactServerBatchingStrategy);\n\n    var id = ReactInstanceHandles.createReactRootID();\n    transaction = ReactServerRenderingTransaction.getPooled(false);\n\n    return transaction.perform(function () {\n      var componentInstance = instantiateReactComponent(element, null);\n      var markup = componentInstance.mountComponent(id, transaction, emptyObject);\n      return ReactMarkupChecksum.addChecksumToMarkup(markup);\n    }, null);\n  } finally {\n    ReactServerRenderingTransaction.release(transaction);\n    // Revert to the DOM batching strategy since these two renderers\n    // currently share these stateful modules.\n    ReactUpdates.injection.injectBatchingStrategy(ReactDefaultBatchingStrategy);\n  }\n}\n\n/**\n * @param {ReactElement} element\n * @return {string} the HTML markup, without the extra React ID and checksum\n * (for generating static pages)\n */\nfunction renderToStaticMarkup(element) {\n  !ReactElement.isValidElement(element) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'renderToStaticMarkup(): You must pass a valid ReactElement.') : invariant(false) : undefined;\n\n  var transaction;\n  try {\n    ReactUpdates.injection.injectBatchingStrategy(ReactServerBatchingStrategy);\n\n    var id = ReactInstanceHandles.createReactRootID();\n    transaction = ReactServerRenderingTransaction.getPooled(true);\n\n    return transaction.perform(function () {\n      var componentInstance = instantiateReactComponent(element, null);\n      return componentInstance.mountComponent(id, transaction, emptyObject);\n    }, null);\n  } finally {\n    ReactServerRenderingTransaction.release(transaction);\n    // Revert to the DOM batching strategy since these two renderers\n    // currently share these stateful modules.\n    ReactUpdates.injection.injectBatchingStrategy(ReactDefaultBatchingStrategy);\n  }\n}\n\nmodule.exports = {\n  renderToString: renderToString,\n  renderToStaticMarkup: renderToStaticMarkup\n};","/**\n * Copyright 2014-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactServerBatchingStrategy\n * @typechecks\n */\n\n'use strict';\n\nvar ReactServerBatchingStrategy = {\n  isBatchingUpdates: false,\n  batchedUpdates: function (callback) {\n    // Don't do anything here. During the server rendering we don't want to\n    // schedule any updates. We will simply ignore them.\n  }\n};\n\nmodule.exports = ReactServerBatchingStrategy;","/**\n * Copyright 2014-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactServerRenderingTransaction\n * @typechecks\n */\n\n'use strict';\n\nvar PooledClass = require('./PooledClass');\nvar CallbackQueue = require('./CallbackQueue');\nvar Transaction = require('./Transaction');\n\nvar assign = require('./Object.assign');\nvar emptyFunction = require('fbjs/lib/emptyFunction');\n\n/**\n * Provides a `CallbackQueue` queue for collecting `onDOMReady` callbacks\n * during the performing of the transaction.\n */\nvar ON_DOM_READY_QUEUEING = {\n  /**\n   * Initializes the internal `onDOMReady` queue.\n   */\n  initialize: function () {\n    this.reactMountReady.reset();\n  },\n\n  close: emptyFunction\n};\n\n/**\n * Executed within the scope of the `Transaction` instance. Consider these as\n * being member methods, but with an implied ordering while being isolated from\n * each other.\n */\nvar TRANSACTION_WRAPPERS = [ON_DOM_READY_QUEUEING];\n\n/**\n * @class ReactServerRenderingTransaction\n * @param {boolean} renderToStaticMarkup\n */\nfunction ReactServerRenderingTransaction(renderToStaticMarkup) {\n  this.reinitializeTransaction();\n  this.renderToStaticMarkup = renderToStaticMarkup;\n  this.reactMountReady = CallbackQueue.getPooled(null);\n  this.useCreateElement = false;\n}\n\nvar Mixin = {\n  /**\n   * @see Transaction\n   * @abstract\n   * @final\n   * @return {array} Empty list of operation wrap procedures.\n   */\n  getTransactionWrappers: function () {\n    return TRANSACTION_WRAPPERS;\n  },\n\n  /**\n   * @return {object} The queue to collect `onDOMReady` callbacks with.\n   */\n  getReactMountReady: function () {\n    return this.reactMountReady;\n  },\n\n  /**\n   * `PooledClass` looks for this, and will invoke this before allowing this\n   * instance to be reused.\n   */\n  destructor: function () {\n    CallbackQueue.release(this.reactMountReady);\n    this.reactMountReady = null;\n  }\n};\n\nassign(ReactServerRenderingTransaction.prototype, Transaction.Mixin, Mixin);\n\nPooledClass.addPoolingTo(ReactServerRenderingTransaction);\n\nmodule.exports = ReactServerRenderingTransaction;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactIsomorphic\n */\n\n'use strict';\n\nvar ReactChildren = require('./ReactChildren');\nvar ReactComponent = require('./ReactComponent');\nvar ReactClass = require('./ReactClass');\nvar ReactDOMFactories = require('./ReactDOMFactories');\nvar ReactElement = require('./ReactElement');\nvar ReactElementValidator = require('./ReactElementValidator');\nvar ReactPropTypes = require('./ReactPropTypes');\nvar ReactVersion = require('./ReactVersion');\n\nvar assign = require('./Object.assign');\nvar onlyChild = require('./onlyChild');\n\nvar createElement = ReactElement.createElement;\nvar createFactory = ReactElement.createFactory;\nvar cloneElement = ReactElement.cloneElement;\n\nif (process.env.NODE_ENV !== 'production') {\n  createElement = ReactElementValidator.createElement;\n  createFactory = ReactElementValidator.createFactory;\n  cloneElement = ReactElementValidator.cloneElement;\n}\n\nvar React = {\n\n  // Modern\n\n  Children: {\n    map: ReactChildren.map,\n    forEach: ReactChildren.forEach,\n    count: ReactChildren.count,\n    toArray: ReactChildren.toArray,\n    only: onlyChild\n  },\n\n  Component: ReactComponent,\n\n  createElement: createElement,\n  cloneElement: cloneElement,\n  isValidElement: ReactElement.isValidElement,\n\n  // Classic\n\n  PropTypes: ReactPropTypes,\n  createClass: ReactClass.createClass,\n  createFactory: createFactory,\n  createMixin: function (mixin) {\n    // Currently a noop. Will be used to validate and trace mixins.\n    return mixin;\n  },\n\n  // This looks DOM specific but these are actually isomorphic helpers\n  // since they are just generating DOM strings.\n  DOM: ReactDOMFactories,\n\n  version: ReactVersion,\n\n  // Hook for JSX spread, don't use this for anything else.\n  __spread: assign\n};\n\nmodule.exports = React;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMFactories\n * @typechecks static-only\n */\n\n'use strict';\n\nvar ReactElement = require('./ReactElement');\nvar ReactElementValidator = require('./ReactElementValidator');\n\nvar mapObject = require('fbjs/lib/mapObject');\n\n/**\n * Create a factory that creates HTML tag elements.\n *\n * @param {string} tag Tag name (e.g. `div`).\n * @private\n */\nfunction createDOMFactory(tag) {\n  if (process.env.NODE_ENV !== 'production') {\n    return ReactElementValidator.createFactory(tag);\n  }\n  return ReactElement.createFactory(tag);\n}\n\n/**\n * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.\n * This is also accessible via `React.DOM`.\n *\n * @public\n */\nvar ReactDOMFactories = mapObject({\n  a: 'a',\n  abbr: 'abbr',\n  address: 'address',\n  area: 'area',\n  article: 'article',\n  aside: 'aside',\n  audio: 'audio',\n  b: 'b',\n  base: 'base',\n  bdi: 'bdi',\n  bdo: 'bdo',\n  big: 'big',\n  blockquote: 'blockquote',\n  body: 'body',\n  br: 'br',\n  button: 'button',\n  canvas: 'canvas',\n  caption: 'caption',\n  cite: 'cite',\n  code: 'code',\n  col: 'col',\n  colgroup: 'colgroup',\n  data: 'data',\n  datalist: 'datalist',\n  dd: 'dd',\n  del: 'del',\n  details: 'details',\n  dfn: 'dfn',\n  dialog: 'dialog',\n  div: 'div',\n  dl: 'dl',\n  dt: 'dt',\n  em: 'em',\n  embed: 'embed',\n  fieldset: 'fieldset',\n  figcaption: 'figcaption',\n  figure: 'figure',\n  footer: 'footer',\n  form: 'form',\n  h1: 'h1',\n  h2: 'h2',\n  h3: 'h3',\n  h4: 'h4',\n  h5: 'h5',\n  h6: 'h6',\n  head: 'head',\n  header: 'header',\n  hgroup: 'hgroup',\n  hr: 'hr',\n  html: 'html',\n  i: 'i',\n  iframe: 'iframe',\n  img: 'img',\n  input: 'input',\n  ins: 'ins',\n  kbd: 'kbd',\n  keygen: 'keygen',\n  label: 'label',\n  legend: 'legend',\n  li: 'li',\n  link: 'link',\n  main: 'main',\n  map: 'map',\n  mark: 'mark',\n  menu: 'menu',\n  menuitem: 'menuitem',\n  meta: 'meta',\n  meter: 'meter',\n  nav: 'nav',\n  noscript: 'noscript',\n  object: 'object',\n  ol: 'ol',\n  optgroup: 'optgroup',\n  option: 'option',\n  output: 'output',\n  p: 'p',\n  param: 'param',\n  picture: 'picture',\n  pre: 'pre',\n  progress: 'progress',\n  q: 'q',\n  rp: 'rp',\n  rt: 'rt',\n  ruby: 'ruby',\n  s: 's',\n  samp: 'samp',\n  script: 'script',\n  section: 'section',\n  select: 'select',\n  small: 'small',\n  source: 'source',\n  span: 'span',\n  strong: 'strong',\n  style: 'style',\n  sub: 'sub',\n  summary: 'summary',\n  sup: 'sup',\n  table: 'table',\n  tbody: 'tbody',\n  td: 'td',\n  textarea: 'textarea',\n  tfoot: 'tfoot',\n  th: 'th',\n  thead: 'thead',\n  time: 'time',\n  title: 'title',\n  tr: 'tr',\n  track: 'track',\n  u: 'u',\n  ul: 'ul',\n  'var': 'var',\n  video: 'video',\n  wbr: 'wbr',\n\n  // SVG\n  circle: 'circle',\n  clipPath: 'clipPath',\n  defs: 'defs',\n  ellipse: 'ellipse',\n  g: 'g',\n  image: 'image',\n  line: 'line',\n  linearGradient: 'linearGradient',\n  mask: 'mask',\n  path: 'path',\n  pattern: 'pattern',\n  polygon: 'polygon',\n  polyline: 'polyline',\n  radialGradient: 'radialGradient',\n  rect: 'rect',\n  stop: 'stop',\n  svg: 'svg',\n  text: 'text',\n  tspan: 'tspan'\n\n}, createDOMFactory);\n\nmodule.exports = ReactDOMFactories;","/**\n * Copyright 2014-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactElementValidator\n */\n\n/**\n * ReactElementValidator provides a wrapper around a element factory\n * which validates the props passed to the element. This is intended to be\n * used only in DEV and could be replaced by a static type checker for languages\n * that support it.\n */\n\n'use strict';\n\nvar ReactElement = require('./ReactElement');\nvar ReactPropTypeLocations = require('./ReactPropTypeLocations');\nvar ReactPropTypeLocationNames = require('./ReactPropTypeLocationNames');\nvar ReactCurrentOwner = require('./ReactCurrentOwner');\n\nvar canDefineProperty = require('./canDefineProperty');\nvar getIteratorFn = require('./getIteratorFn');\nvar invariant = require('fbjs/lib/invariant');\nvar warning = require('fbjs/lib/warning');\n\nfunction getDeclarationErrorAddendum() {\n  if (ReactCurrentOwner.current) {\n    var name = ReactCurrentOwner.current.getName();\n    if (name) {\n      return ' Check the render method of `' + name + '`.';\n    }\n  }\n  return '';\n}\n\n/**\n * Warn if there's no key explicitly set on dynamic arrays of children or\n * object keys are not valid. This allows us to keep track of children between\n * updates.\n */\nvar ownerHasKeyUseWarning = {};\n\nvar loggedTypeFailures = {};\n\n/**\n * Warn if the element doesn't have an explicit key assigned to it.\n * This element is in an array. The array could grow and shrink or be\n * reordered. All children that haven't already been validated are required to\n * have a \"key\" property assigned to it.\n *\n * @internal\n * @param {ReactElement} element Element that requires a key.\n * @param {*} parentType element's parent's type.\n */\nfunction validateExplicitKey(element, parentType) {\n  if (!element._store || element._store.validated || element.key != null) {\n    return;\n  }\n  element._store.validated = true;\n\n  var addenda = getAddendaForKeyUse('uniqueKey', element, parentType);\n  if (addenda === null) {\n    // we already showed the warning\n    return;\n  }\n  process.env.NODE_ENV !== 'production' ? warning(false, 'Each child in an array or iterator should have a unique \"key\" prop.' + '%s%s%s', addenda.parentOrOwner || '', addenda.childOwner || '', addenda.url || '') : undefined;\n}\n\n/**\n * Shared warning and monitoring code for the key warnings.\n *\n * @internal\n * @param {string} messageType A key used for de-duping warnings.\n * @param {ReactElement} element Component that requires a key.\n * @param {*} parentType element's parent's type.\n * @returns {?object} A set of addenda to use in the warning message, or null\n * if the warning has already been shown before (and shouldn't be shown again).\n */\nfunction getAddendaForKeyUse(messageType, element, parentType) {\n  var addendum = getDeclarationErrorAddendum();\n  if (!addendum) {\n    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;\n    if (parentName) {\n      addendum = ' Check the top-level render call using <' + parentName + '>.';\n    }\n  }\n\n  var memoizer = ownerHasKeyUseWarning[messageType] || (ownerHasKeyUseWarning[messageType] = {});\n  if (memoizer[addendum]) {\n    return null;\n  }\n  memoizer[addendum] = true;\n\n  var addenda = {\n    parentOrOwner: addendum,\n    url: ' See https://fb.me/react-warning-keys for more information.',\n    childOwner: null\n  };\n\n  // Usually the current owner is the offender, but if it accepts children as a\n  // property, it may be the creator of the child that's responsible for\n  // assigning it a key.\n  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {\n    // Give the component that originally created this child.\n    addenda.childOwner = ' It was passed a child from ' + element._owner.getName() + '.';\n  }\n\n  return addenda;\n}\n\n/**\n * Ensure that every element either is passed in a static location, in an\n * array with an explicit keys property defined, or in an object literal\n * with valid key property.\n *\n * @internal\n * @param {ReactNode} node Statically passed child of any type.\n * @param {*} parentType node's parent's type.\n */\nfunction validateChildKeys(node, parentType) {\n  if (typeof node !== 'object') {\n    return;\n  }\n  if (Array.isArray(node)) {\n    for (var i = 0; i < node.length; i++) {\n      var child = node[i];\n      if (ReactElement.isValidElement(child)) {\n        validateExplicitKey(child, parentType);\n      }\n    }\n  } else if (ReactElement.isValidElement(node)) {\n    // This element was passed in a valid location.\n    if (node._store) {\n      node._store.validated = true;\n    }\n  } else if (node) {\n    var iteratorFn = getIteratorFn(node);\n    // Entry iterators provide implicit keys.\n    if (iteratorFn) {\n      if (iteratorFn !== node.entries) {\n        var iterator = iteratorFn.call(node);\n        var step;\n        while (!(step = iterator.next()).done) {\n          if (ReactElement.isValidElement(step.value)) {\n            validateExplicitKey(step.value, parentType);\n          }\n        }\n      }\n    }\n  }\n}\n\n/**\n * Assert that the props are valid\n *\n * @param {string} componentName Name of the component for error messages.\n * @param {object} propTypes Map of prop name to a ReactPropType\n * @param {object} props\n * @param {string} location e.g. \"prop\", \"context\", \"child context\"\n * @private\n */\nfunction checkPropTypes(componentName, propTypes, props, location) {\n  for (var propName in propTypes) {\n    if (propTypes.hasOwnProperty(propName)) {\n      var error;\n      // Prop type validation may throw. In case they do, we don't want to\n      // fail the render phase where it didn't fail before. So we log it.\n      // After these have been cleaned up, we'll let them throw.\n      try {\n        // This is intentionally an invariant that gets caught. It's the same\n        // behavior as without this statement except with a better message.\n        !(typeof propTypes[propName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], propName) : invariant(false) : undefined;\n        error = propTypes[propName](props, propName, componentName, location);\n      } catch (ex) {\n        error = ex;\n      }\n      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], propName, typeof error) : undefined;\n      if (error instanceof Error && !(error.message in loggedTypeFailures)) {\n        // Only monitor this failure once because there tends to be a lot of the\n        // same error.\n        loggedTypeFailures[error.message] = true;\n\n        var addendum = getDeclarationErrorAddendum();\n        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed propType: %s%s', error.message, addendum) : undefined;\n      }\n    }\n  }\n}\n\n/**\n * Given an element, validate that its props follow the propTypes definition,\n * provided by the type.\n *\n * @param {ReactElement} element\n */\nfunction validatePropTypes(element) {\n  var componentClass = element.type;\n  if (typeof componentClass !== 'function') {\n    return;\n  }\n  var name = componentClass.displayName || componentClass.name;\n  if (componentClass.propTypes) {\n    checkPropTypes(name, componentClass.propTypes, element.props, ReactPropTypeLocations.prop);\n  }\n  if (typeof componentClass.getDefaultProps === 'function') {\n    process.env.NODE_ENV !== 'production' ? warning(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : undefined;\n  }\n}\n\nvar ReactElementValidator = {\n\n  createElement: function (type, props, children) {\n    var validType = typeof type === 'string' || typeof type === 'function';\n    // We warn in this case but don't throw. We expect the element creation to\n    // succeed and there will likely be errors in render.\n    process.env.NODE_ENV !== 'production' ? warning(validType, 'React.createElement: type should not be null, undefined, boolean, or ' + 'number. It should be a string (for DOM elements) or a ReactClass ' + '(for composite components).%s', getDeclarationErrorAddendum()) : undefined;\n\n    var element = ReactElement.createElement.apply(this, arguments);\n\n    // The result can be nullish if a mock or a custom function is used.\n    // TODO: Drop this when these are no longer allowed as the type argument.\n    if (element == null) {\n      return element;\n    }\n\n    // Skip key warning if the type isn't valid since our key validation logic\n    // doesn't expect a non-string/function type and can throw confusing errors.\n    // We don't want exception behavior to differ between dev and prod.\n    // (Rendering will throw with a helpful message and as soon as the type is\n    // fixed, the key warnings will appear.)\n    if (validType) {\n      for (var i = 2; i < arguments.length; i++) {\n        validateChildKeys(arguments[i], type);\n      }\n    }\n\n    validatePropTypes(element);\n\n    return element;\n  },\n\n  createFactory: function (type) {\n    var validatedFactory = ReactElementValidator.createElement.bind(null, type);\n    // Legacy hook TODO: Warn if this is accessed\n    validatedFactory.type = type;\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (canDefineProperty) {\n        Object.defineProperty(validatedFactory, 'type', {\n          enumerable: false,\n          get: function () {\n            process.env.NODE_ENV !== 'production' ? warning(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.') : undefined;\n            Object.defineProperty(this, 'type', {\n              value: type\n            });\n            return type;\n          }\n        });\n      }\n    }\n\n    return validatedFactory;\n  },\n\n  cloneElement: function (element, props, children) {\n    var newElement = ReactElement.cloneElement.apply(this, arguments);\n    for (var i = 2; i < arguments.length; i++) {\n      validateChildKeys(arguments[i], newElement.type);\n    }\n    validatePropTypes(newElement);\n    return newElement;\n  }\n\n};\n\nmodule.exports = ReactElementValidator;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule onlyChild\n */\n'use strict';\n\nvar ReactElement = require('./ReactElement');\n\nvar invariant = require('fbjs/lib/invariant');\n\n/**\n * Returns the first child in a collection of children and verifies that there\n * is only one child in the collection. The current implementation of this\n * function assumes that a single child gets passed without a wrapper, but the\n * purpose of this helper function is to abstract away the particular structure\n * of children.\n *\n * @param {?object} children Child collection structure.\n * @return {ReactComponent} The first and only `ReactComponent` contained in the\n * structure.\n */\nfunction onlyChild(children) {\n  !ReactElement.isValidElement(children) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'onlyChild must be passed a children with exactly one child.') : invariant(false) : undefined;\n  return children;\n}\n\nmodule.exports = onlyChild;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule deprecated\n */\n\n'use strict';\n\nvar assign = require('./Object.assign');\nvar warning = require('fbjs/lib/warning');\n\n/**\n * This will log a single deprecation notice per function and forward the call\n * on to the new API.\n *\n * @param {string} fnName The name of the function\n * @param {string} newModule The module that fn will exist in\n * @param {string} newPackage The module that fn will exist in\n * @param {*} ctx The context this forwarded call should run in\n * @param {function} fn The function to forward on to\n * @return {function} The function that will warn once and then call fn\n */\nfunction deprecated(fnName, newModule, newPackage, ctx, fn) {\n  var warned = false;\n  if (process.env.NODE_ENV !== 'production') {\n    var newFn = function () {\n      process.env.NODE_ENV !== 'production' ? warning(warned,\n      // Require examples in this string must be split to prevent React's\n      // build tools from mistaking them for real requires.\n      // Otherwise the build tools will attempt to build a '%s' module.\n      'React.%s is deprecated. Please use %s.%s from require' + '(\\'%s\\') ' + 'instead.', fnName, newModule, fnName, newPackage) : undefined;\n      warned = true;\n      return fn.apply(ctx, arguments);\n    };\n    // We need to make sure all properties of the original fn are copied over.\n    // In particular, this is needed to support PropTypes\n    return assign(newFn, fn);\n  }\n\n  return fn;\n}\n\nmodule.exports = deprecated;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ExecutionEnvironment\n */\n\n'use strict';\n\nvar canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);\n\n/**\n * Simple, lightweight module assisting with the detection and context of\n * Worker. Helps avoid circular dependencies and allows code to reason about\n * whether or not they are in a Worker, even if they never include the main\n * `ReactWorker` dependency.\n */\nvar ExecutionEnvironment = {\n\n  canUseDOM: canUseDOM,\n\n  canUseWorkers: typeof Worker !== 'undefined',\n\n  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),\n\n  canUseViewport: canUseDOM && !!window.screen,\n\n  isInWorker: !canUseDOM // For now, this is true - might change in the future.\n\n};\n\nmodule.exports = ExecutionEnvironment;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule createNodesFromMarkup\n * @typechecks\n */\n\n/*eslint-disable fb-www/unsafe-html*/\n\n'use strict';\n\nvar ExecutionEnvironment = require('./ExecutionEnvironment');\n\nvar createArrayFromMixed = require('./createArrayFromMixed');\nvar getMarkupWrap = require('./getMarkupWrap');\nvar invariant = require('./invariant');\n\n/**\n * Dummy container used to render all markup.\n */\nvar dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;\n\n/**\n * Pattern used by `getNodeName`.\n */\nvar nodeNamePattern = /^\\s*<(\\w+)/;\n\n/**\n * Extracts the `nodeName` of the first element in a string of markup.\n *\n * @param {string} markup String of markup.\n * @return {?string} Node name of the supplied markup.\n */\nfunction getNodeName(markup) {\n  var nodeNameMatch = markup.match(nodeNamePattern);\n  return nodeNameMatch && nodeNameMatch[1].toLowerCase();\n}\n\n/**\n * Creates an array containing the nodes rendered from the supplied markup. The\n * optionally supplied `handleScript` function will be invoked once for each\n * <script> element that is rendered. If no `handleScript` function is supplied,\n * an exception is thrown if any <script> elements are rendered.\n *\n * @param {string} markup A string of valid HTML markup.\n * @param {?function} handleScript Invoked once for each rendered <script>.\n * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.\n */\nfunction createNodesFromMarkup(markup, handleScript) {\n  var node = dummyNode;\n  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup dummy not initialized') : invariant(false) : undefined;\n  var nodeName = getNodeName(markup);\n\n  var wrap = nodeName && getMarkupWrap(nodeName);\n  if (wrap) {\n    node.innerHTML = wrap[1] + markup + wrap[2];\n\n    var wrapDepth = wrap[0];\n    while (wrapDepth--) {\n      node = node.lastChild;\n    }\n  } else {\n    node.innerHTML = markup;\n  }\n\n  var scripts = node.getElementsByTagName('script');\n  if (scripts.length) {\n    !handleScript ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup(...): Unexpected <script> element rendered.') : invariant(false) : undefined;\n    createArrayFromMixed(scripts).forEach(handleScript);\n  }\n\n  var nodes = createArrayFromMixed(node.childNodes);\n  while (node.lastChild) {\n    node.removeChild(node.lastChild);\n  }\n  return nodes;\n}\n\nmodule.exports = createNodesFromMarkup;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule createArrayFromMixed\n * @typechecks\n */\n\n'use strict';\n\nvar toArray = require('./toArray');\n\n/**\n * Perform a heuristic test to determine if an object is \"array-like\".\n *\n *   A monk asked Joshu, a Zen master, \"Has a dog Buddha nature?\"\n *   Joshu replied: \"Mu.\"\n *\n * This function determines if its argument has \"array nature\": it returns\n * true if the argument is an actual array, an `arguments' object, or an\n * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).\n *\n * It will return false for other array-like objects like Filelist.\n *\n * @param {*} obj\n * @return {boolean}\n */\nfunction hasArrayNature(obj) {\n  return(\n    // not null/false\n    !!obj && (\n    // arrays are objects, NodeLists are functions in Safari\n    typeof obj == 'object' || typeof obj == 'function') &&\n    // quacks like an array\n    'length' in obj &&\n    // not window\n    !('setInterval' in obj) &&\n    // no DOM node should be considered an array-like\n    // a 'select' element has 'length' and 'item' properties on IE8\n    typeof obj.nodeType != 'number' && (\n    // a real array\n    Array.isArray(obj) ||\n    // arguments\n    'callee' in obj ||\n    // HTMLCollection/NodeList\n    'item' in obj)\n  );\n}\n\n/**\n * Ensure that the argument is an array by wrapping it in an array if it is not.\n * Creates a copy of the argument if it is already an array.\n *\n * This is mostly useful idiomatically:\n *\n *   var createArrayFromMixed = require('createArrayFromMixed');\n *\n *   function takesOneOrMoreThings(things) {\n *     things = createArrayFromMixed(things);\n *     ...\n *   }\n *\n * This allows you to treat `things' as an array, but accept scalars in the API.\n *\n * If you need to convert an array-like object, like `arguments`, into an array\n * use toArray instead.\n *\n * @param {*} obj\n * @return {array}\n */\nfunction createArrayFromMixed(obj) {\n  if (!hasArrayNature(obj)) {\n    return [obj];\n  } else if (Array.isArray(obj)) {\n    return obj.slice();\n  } else {\n    return toArray(obj);\n  }\n}\n\nmodule.exports = createArrayFromMixed;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule toArray\n * @typechecks\n */\n\n'use strict';\n\nvar invariant = require('./invariant');\n\n/**\n * Convert array-like objects to arrays.\n *\n * This API assumes the caller knows the contents of the data type. For less\n * well defined inputs use createArrayFromMixed.\n *\n * @param {object|function|filelist} obj\n * @return {array}\n */\nfunction toArray(obj) {\n  var length = obj.length;\n\n  // Some browse builtin objects can report typeof 'function' (e.g. NodeList in\n  // old versions of Safari).\n  !(!Array.isArray(obj) && (typeof obj === 'object' || typeof obj === 'function')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Array-like object expected') : invariant(false) : undefined;\n\n  !(typeof length === 'number') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object needs a length property') : invariant(false) : undefined;\n\n  !(length === 0 || length - 1 in obj) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object should have keys for indices') : invariant(false) : undefined;\n\n  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs\n  // without method will throw during the slice call and skip straight to the\n  // fallback.\n  if (obj.hasOwnProperty) {\n    try {\n      return Array.prototype.slice.call(obj);\n    } catch (e) {\n      // IE < 9 does not support Array#slice on collections objects\n    }\n  }\n\n  // Fall back to copying key by key. This assumes all keys have a value,\n  // so will not preserve sparsely populated inputs.\n  var ret = Array(length);\n  for (var ii = 0; ii < length; ii++) {\n    ret[ii] = obj[ii];\n  }\n  return ret;\n}\n\nmodule.exports = toArray;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule invariant\n */\n\n'use strict';\n\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nfunction invariant(condition, format, a, b, c, d, e, f) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  }\n\n  if (!condition) {\n    var error;\n    if (format === undefined) {\n      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error(format.replace(/%s/g, function () {\n        return args[argIndex++];\n      }));\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n}\n\nmodule.exports = invariant;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule getMarkupWrap\n */\n\n/*eslint-disable fb-www/unsafe-html */\n\n'use strict';\n\nvar ExecutionEnvironment = require('./ExecutionEnvironment');\n\nvar invariant = require('./invariant');\n\n/**\n * Dummy container used to detect which wraps are necessary.\n */\nvar dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;\n\n/**\n * Some browsers cannot use `innerHTML` to render certain elements standalone,\n * so we wrap them, render the wrapped nodes, then extract the desired node.\n *\n * In IE8, certain elements cannot render alone, so wrap all elements ('*').\n */\n\nvar shouldWrap = {};\n\nvar selectWrap = [1, '<select multiple=\"true\">', '</select>'];\nvar tableWrap = [1, '<table>', '</table>'];\nvar trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];\n\nvar svgWrap = [1, '<svg xmlns=\"http://www.w3.org/2000/svg\">', '</svg>'];\n\nvar markupWrap = {\n  '*': [1, '?<div>', '</div>'],\n\n  'area': [1, '<map>', '</map>'],\n  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],\n  'legend': [1, '<fieldset>', '</fieldset>'],\n  'param': [1, '<object>', '</object>'],\n  'tr': [2, '<table><tbody>', '</tbody></table>'],\n\n  'optgroup': selectWrap,\n  'option': selectWrap,\n\n  'caption': tableWrap,\n  'colgroup': tableWrap,\n  'tbody': tableWrap,\n  'tfoot': tableWrap,\n  'thead': tableWrap,\n\n  'td': trWrap,\n  'th': trWrap\n};\n\n// Initialize the SVG elements since we know they'll always need to be wrapped\n// consistently. If they are created inside a <div> they will be initialized in\n// the wrong namespace (and will not display).\nvar svgElements = ['circle', 'clipPath', 'defs', 'ellipse', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'text', 'tspan'];\nsvgElements.forEach(function (nodeName) {\n  markupWrap[nodeName] = svgWrap;\n  shouldWrap[nodeName] = true;\n});\n\n/**\n * Gets the markup wrap configuration for the supplied `nodeName`.\n *\n * NOTE: This lazily detects which wraps are necessary for the current browser.\n *\n * @param {string} nodeName Lowercase `nodeName`.\n * @return {?array} Markup wrap configuration, if applicable.\n */\nfunction getMarkupWrap(nodeName) {\n  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Markup wrapping node not initialized') : invariant(false) : undefined;\n  if (!markupWrap.hasOwnProperty(nodeName)) {\n    nodeName = '*';\n  }\n  if (!shouldWrap.hasOwnProperty(nodeName)) {\n    if (nodeName === '*') {\n      dummyNode.innerHTML = '<link />';\n    } else {\n      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';\n    }\n    shouldWrap[nodeName] = !dummyNode.firstChild;\n  }\n  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;\n}\n\nmodule.exports = getMarkupWrap;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule emptyFunction\n */\n\n\"use strict\";\n\nfunction makeEmptyFunction(arg) {\n  return function () {\n    return arg;\n  };\n}\n\n/**\n * This function accepts and discards inputs; it has no side effects. This is\n * primarily useful idiomatically for overridable function endpoints which\n * always need to be callable, since JS lacks a null-call idiom ala Cocoa.\n */\nfunction emptyFunction() {}\n\nemptyFunction.thatReturns = makeEmptyFunction;\nemptyFunction.thatReturnsFalse = makeEmptyFunction(false);\nemptyFunction.thatReturnsTrue = makeEmptyFunction(true);\nemptyFunction.thatReturnsNull = makeEmptyFunction(null);\nemptyFunction.thatReturnsThis = function () {\n  return this;\n};\nemptyFunction.thatReturnsArgument = function (arg) {\n  return arg;\n};\n\nmodule.exports = emptyFunction;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule keyMirror\n * @typechecks static-only\n */\n\n'use strict';\n\nvar invariant = require('./invariant');\n\n/**\n * Constructs an enumeration with keys equal to their value.\n *\n * For example:\n *\n *   var COLORS = keyMirror({blue: null, red: null});\n *   var myColor = COLORS.blue;\n *   var isColorValid = !!COLORS[myColor];\n *\n * The last line could not be performed if the values of the generated enum were\n * not equal to their keys.\n *\n *   Input:  {key1: val1, key2: val2}\n *   Output: {key1: key1, key2: key2}\n *\n * @param {object} obj\n * @return {object}\n */\nvar keyMirror = function (obj) {\n  var ret = {};\n  var key;\n  !(obj instanceof Object && !Array.isArray(obj)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'keyMirror(...): Argument must be an object.') : invariant(false) : undefined;\n  for (key in obj) {\n    if (!obj.hasOwnProperty(key)) {\n      continue;\n    }\n    ret[key] = key;\n  }\n  return ret;\n};\n\nmodule.exports = keyMirror;","/**\n * Copyright 2014-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule warning\n */\n\n'use strict';\n\nvar emptyFunction = require('./emptyFunction');\n\n/**\n * Similar to invariant but only logs a warning if the condition is not met.\n * This can be used to log issues in development environments in critical\n * paths. Removing the logging code for production environments will keep the\n * same logic and follow the same code paths.\n */\n\nvar warning = emptyFunction;\n\nif (process.env.NODE_ENV !== 'production') {\n  warning = function (condition, format) {\n    for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      args[_key - 2] = arguments[_key];\n    }\n\n    if (format === undefined) {\n      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');\n    }\n\n    if (format.indexOf('Failed Composite propType: ') === 0) {\n      return; // Ignore CompositeComponent proptype check.\n    }\n\n    if (!condition) {\n      var argIndex = 0;\n      var message = 'Warning: ' + format.replace(/%s/g, function () {\n        return args[argIndex++];\n      });\n      if (typeof console !== 'undefined') {\n        console.error(message);\n      }\n      try {\n        // --- Welcome to debugging React ---\n        // This error was thrown as a convenience so that you can use this stack\n        // to find the callsite that caused this warning to fire.\n        throw new Error(message);\n      } catch (x) {}\n    }\n  };\n}\n\nmodule.exports = warning;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule emptyObject\n */\n\n'use strict';\n\nvar emptyObject = {};\n\nif (process.env.NODE_ENV !== 'production') {\n  Object.freeze(emptyObject);\n}\n\nmodule.exports = emptyObject;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule containsNode\n * @typechecks\n */\n\n'use strict';\n\nvar isTextNode = require('./isTextNode');\n\n/*eslint-disable no-bitwise */\n\n/**\n * Checks if a given DOM node contains or is another DOM node.\n *\n * @param {?DOMNode} outerNode Outer DOM node.\n * @param {?DOMNode} innerNode Inner DOM node.\n * @return {boolean} True if `outerNode` contains or is `innerNode`.\n */\nfunction containsNode(_x, _x2) {\n  var _again = true;\n\n  _function: while (_again) {\n    var outerNode = _x,\n        innerNode = _x2;\n    _again = false;\n\n    if (!outerNode || !innerNode) {\n      return false;\n    } else if (outerNode === innerNode) {\n      return true;\n    } else if (isTextNode(outerNode)) {\n      return false;\n    } else if (isTextNode(innerNode)) {\n      _x = outerNode;\n      _x2 = innerNode.parentNode;\n      _again = true;\n      continue _function;\n    } else if (outerNode.contains) {\n      return outerNode.contains(innerNode);\n    } else if (outerNode.compareDocumentPosition) {\n      return !!(outerNode.compareDocumentPosition(innerNode) & 16);\n    } else {\n      return false;\n    }\n  }\n}\n\nmodule.exports = containsNode;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule isTextNode\n * @typechecks\n */\n\n'use strict';\n\nvar isNode = require('./isNode');\n\n/**\n * @param {*} object The object to check.\n * @return {boolean} Whether or not the object is a DOM text node.\n */\nfunction isTextNode(object) {\n  return isNode(object) && object.nodeType == 3;\n}\n\nmodule.exports = isTextNode;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule isNode\n * @typechecks\n */\n\n/**\n * @param {*} object The object to check.\n * @return {boolean} Whether or not the object is a DOM node.\n */\n'use strict';\n\nfunction isNode(object) {\n  return !!(object && (typeof Node === 'function' ? object instanceof Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));\n}\n\nmodule.exports = isNode;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule keyOf\n */\n\n/**\n * Allows extraction of a minified key. Let's the build system minify keys\n * without losing the ability to dynamically use key strings as values\n * themselves. Pass in an object with a single key/val pair and it will return\n * you the string key of that single record. Suppose you want to grab the\n * value for a key 'className' inside of an object. Key/val minification may\n * have aliased that key to be 'xa12'. keyOf({className: null}) will return\n * 'xa12' in that case. Resolve keys you want to use once at startup time, then\n * reuse those resolutions.\n */\n\"use strict\";\n\nvar keyOf = function (oneKeyObj) {\n  var key;\n  for (key in oneKeyObj) {\n    if (!oneKeyObj.hasOwnProperty(key)) {\n      continue;\n    }\n    return key;\n  }\n  return null;\n};\n\nmodule.exports = keyOf;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule focusNode\n */\n\n'use strict';\n\n/**\n * @param {DOMElement} node input/textarea to focus\n */\nfunction focusNode(node) {\n  // IE8 can throw \"Can't move focus to the control because it is invisible,\n  // not enabled, or of a type that does not accept the focus.\" for all kinds of\n  // reasons that are too expensive and fragile to test.\n  try {\n    node.focus();\n  } catch (e) {}\n}\n\nmodule.exports = focusNode;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule camelizeStyleName\n * @typechecks\n */\n\n'use strict';\n\nvar camelize = require('./camelize');\n\nvar msPattern = /^-ms-/;\n\n/**\n * Camelcases a hyphenated CSS property name, for example:\n *\n *   > camelizeStyleName('background-color')\n *   < \"backgroundColor\"\n *   > camelizeStyleName('-moz-transition')\n *   < \"MozTransition\"\n *   > camelizeStyleName('-ms-transition')\n *   < \"msTransition\"\n *\n * As Andi Smith suggests\n * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix\n * is converted to lowercase `ms`.\n *\n * @param {string} string\n * @return {string}\n */\nfunction camelizeStyleName(string) {\n  return camelize(string.replace(msPattern, 'ms-'));\n}\n\nmodule.exports = camelizeStyleName;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule camelize\n * @typechecks\n */\n\n\"use strict\";\n\nvar _hyphenPattern = /-(.)/g;\n\n/**\n * Camelcases a hyphenated string, for example:\n *\n *   > camelize('background-color')\n *   < \"backgroundColor\"\n *\n * @param {string} string\n * @return {string}\n */\nfunction camelize(string) {\n  return string.replace(_hyphenPattern, function (_, character) {\n    return character.toUpperCase();\n  });\n}\n\nmodule.exports = camelize;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule hyphenateStyleName\n * @typechecks\n */\n\n'use strict';\n\nvar hyphenate = require('./hyphenate');\n\nvar msPattern = /^ms-/;\n\n/**\n * Hyphenates a camelcased CSS property name, for example:\n *\n *   > hyphenateStyleName('backgroundColor')\n *   < \"background-color\"\n *   > hyphenateStyleName('MozTransition')\n *   < \"-moz-transition\"\n *   > hyphenateStyleName('msTransition')\n *   < \"-ms-transition\"\n *\n * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix\n * is converted to `-ms-`.\n *\n * @param {string} string\n * @return {string}\n */\nfunction hyphenateStyleName(string) {\n  return hyphenate(string).replace(msPattern, '-ms-');\n}\n\nmodule.exports = hyphenateStyleName;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule hyphenate\n * @typechecks\n */\n\n'use strict';\n\nvar _uppercasePattern = /([A-Z])/g;\n\n/**\n * Hyphenates a camelcased string, for example:\n *\n *   > hyphenate('backgroundColor')\n *   < \"background-color\"\n *\n * For CSS style names, use `hyphenateStyleName` instead which works properly\n * with all vendor prefixes, including `ms`.\n *\n * @param {string} string\n * @return {string}\n */\nfunction hyphenate(string) {\n  return string.replace(_uppercasePattern, '-$1').toLowerCase();\n}\n\nmodule.exports = hyphenate;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule memoizeStringOnly\n * @typechecks static-only\n */\n\n'use strict';\n\n/**\n * Memoizes the return value of a function that accepts one string argument.\n *\n * @param {function} callback\n * @return {function}\n */\nfunction memoizeStringOnly(callback) {\n  var cache = {};\n  return function (string) {\n    if (!cache.hasOwnProperty(string)) {\n      cache[string] = callback.call(this, string);\n    }\n    return cache[string];\n  };\n}\n\nmodule.exports = memoizeStringOnly;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule shallowEqual\n * @typechecks\n * \n */\n\n'use strict';\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\n/**\n * Performs equality by iterating through keys on an object and returning false\n * when any key has values which are not strictly equal between the arguments.\n * Returns true when the values of all keys are strictly equal.\n */\nfunction shallowEqual(objA, objB) {\n  if (objA === objB) {\n    return true;\n  }\n\n  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {\n    return false;\n  }\n\n  var keysA = Object.keys(objA);\n  var keysB = Object.keys(objB);\n\n  if (keysA.length !== keysB.length) {\n    return false;\n  }\n\n  // Test for A's keys different from B.\n  var bHasOwnProperty = hasOwnProperty.bind(objB);\n  for (var i = 0; i < keysA.length; i++) {\n    if (!bHasOwnProperty(keysA[i]) || objA[keysA[i]] !== objB[keysA[i]]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nmodule.exports = shallowEqual;","/**\n * Copyright 2013-2015, Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule EventListener\n * @typechecks\n */\n\n'use strict';\n\nvar emptyFunction = require('./emptyFunction');\n\n/**\n * Upstream version of event listener. Does not take into account specific\n * nature of platform.\n */\nvar EventListener = {\n  /**\n   * Listen to DOM events during the bubble phase.\n   *\n   * @param {DOMEventTarget} target DOM element to register listener on.\n   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.\n   * @param {function} callback Callback function.\n   * @return {object} Object with a `remove` method.\n   */\n  listen: function (target, eventType, callback) {\n    if (target.addEventListener) {\n      target.addEventListener(eventType, callback, false);\n      return {\n        remove: function () {\n          target.removeEventListener(eventType, callback, false);\n        }\n      };\n    } else if (target.attachEvent) {\n      target.attachEvent('on' + eventType, callback);\n      return {\n        remove: function () {\n          target.detachEvent('on' + eventType, callback);\n        }\n      };\n    }\n  },\n\n  /**\n   * Listen to DOM events during the capture phase.\n   *\n   * @param {DOMEventTarget} target DOM element to register listener on.\n   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.\n   * @param {function} callback Callback function.\n   * @return {object} Object with a `remove` method.\n   */\n  capture: function (target, eventType, callback) {\n    if (target.addEventListener) {\n      target.addEventListener(eventType, callback, true);\n      return {\n        remove: function () {\n          target.removeEventListener(eventType, callback, true);\n        }\n      };\n    } else {\n      if (process.env.NODE_ENV !== 'production') {\n        console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');\n      }\n      return {\n        remove: emptyFunction\n      };\n    }\n  },\n\n  registerDefault: function () {}\n};\n\nmodule.exports = EventListener;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule getUnboundedScrollPosition\n * @typechecks\n */\n\n'use strict';\n\n/**\n * Gets the scroll position of the supplied element or window.\n *\n * The return values are unbounded, unlike `getScrollPosition`. This means they\n * may be negative or exceed the element boundaries (which is possible using\n * inertial scrolling).\n *\n * @param {DOMWindow|DOMElement} scrollable\n * @return {object} Map with `x` and `y` keys.\n */\nfunction getUnboundedScrollPosition(scrollable) {\n  if (scrollable === window) {\n    return {\n      x: window.pageXOffset || document.documentElement.scrollLeft,\n      y: window.pageYOffset || document.documentElement.scrollTop\n    };\n  }\n  return {\n    x: scrollable.scrollLeft,\n    y: scrollable.scrollTop\n  };\n}\n\nmodule.exports = getUnboundedScrollPosition;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule getActiveElement\n * @typechecks\n */\n\n/* eslint-disable fb-www/typeof-undefined */\n\n/**\n * Same as document.activeElement but wraps in a try-catch block. In IE it is\n * not safe to call document.activeElement if there is nothing focused.\n *\n * The activeElement will be null only if the document or document body is not\n * yet defined.\n */\n'use strict';\n\nfunction getActiveElement() /*?DOMElement*/{\n  if (typeof document === 'undefined') {\n    return null;\n  }\n  try {\n    return document.activeElement || document.body;\n  } catch (e) {\n    return document.body;\n  }\n}\n\nmodule.exports = getActiveElement;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule performanceNow\n * @typechecks\n */\n\n'use strict';\n\nvar performance = require('./performance');\n\nvar performanceNow;\n\n/**\n * Detect if we can use `window.performance.now()` and gracefully fallback to\n * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now\n * because of Facebook's testing infrastructure.\n */\nif (performance.now) {\n  performanceNow = function () {\n    return performance.now();\n  };\n} else {\n  performanceNow = function () {\n    return Date.now();\n  };\n}\n\nmodule.exports = performanceNow;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule performance\n * @typechecks\n */\n\n'use strict';\n\nvar ExecutionEnvironment = require('./ExecutionEnvironment');\n\nvar performance;\n\nif (ExecutionEnvironment.canUseDOM) {\n  performance = window.performance || window.msPerformance || window.webkitPerformance;\n}\n\nmodule.exports = performance || {};","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule mapObject\n */\n\n'use strict';\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\n/**\n * Executes the provided `callback` once for each enumerable own property in the\n * object and constructs a new object from the results. The `callback` is\n * invoked with three arguments:\n *\n *  - the property value\n *  - the property name\n *  - the object being traversed\n *\n * Properties that are added after the call to `mapObject` will not be visited\n * by `callback`. If the values of existing properties are changed, the value\n * passed to `callback` will be the value at the time `mapObject` visits them.\n * Properties that are deleted before being visited are not visited.\n *\n * @grep function objectMap()\n * @grep function objMap()\n *\n * @param {?object} object\n * @param {function} callback\n * @param {*} context\n * @return {?object}\n */\nfunction mapObject(object, callback, context) {\n  if (!object) {\n    return null;\n  }\n  var result = {};\n  for (var name in object) {\n    if (hasOwnProperty.call(object, name)) {\n      result[name] = callback.call(context, object[name], name, object);\n    }\n  }\n  return result;\n}\n\nmodule.exports = mapObject;","exports.name = \"reflux\";\nexports.main = \"src/index.js\";\n","var Reflux = require('reflux-core');\n\nReflux.connect = require('./connect');\n\nReflux.connectFilter = require('./connectFilter');\n\nReflux.ListenerMixin = require('./ListenerMixin');\n\nReflux.listenTo = require('./listenTo');\n\nReflux.listenToMany = require('./listenToMany');\n\nmodule.exports = Reflux;\n","var ListenerMethods = require('reflux-core/lib/ListenerMethods'),\n    ListenerMixin = require('./ListenerMixin'),\n    _ = require('reflux-core/lib/utils');\n\nmodule.exports = function(listenable,key){\n    return {\n        getInitialState: function(){\n            if (!_.isFunction(listenable.getInitialState)) {\n                return {};\n            } else if (key === undefined) {\n                return listenable.getInitialState();\n            } else {\n                return _.object([key],[listenable.getInitialState()]);\n            }\n        },\n        componentDidMount: function(){\n            _.extend(this,ListenerMethods);\n            var me = this, cb = (key === undefined ? this.setState : function(v){\n                if (typeof me.isMounted === \"undefined\" || me.isMounted() === true) {\n                    me.setState(_.object([key],[v]));\n                }\n            });\n            this.listenTo(listenable,cb);\n        },\n        componentWillUnmount: ListenerMixin.componentWillUnmount\n    };\n};\n","var _ = require('reflux-core/lib/utils'),\n    ListenerMethods = require('reflux-core/lib/ListenerMethods');\n\n/**\n * A module meant to be consumed as a mixin by a React component. Supplies the methods from\n * `ListenerMethods` mixin and takes care of teardown of subscriptions.\n * Note that if you're using the `connect` mixin you don't need this mixin, as connect will\n * import everything this mixin contains!\n */\nmodule.exports = _.extend({\n\n    /**\n     * Cleans up all listener previously registered.\n     */\n    componentWillUnmount: ListenerMethods.stopListeningToAll\n\n}, ListenerMethods);\n","var ListenerMethods = require('reflux-core/lib/ListenerMethods'),\n    ListenerMixin = require('./ListenerMixin'),\n    _ = require('reflux-core/lib/utils');\n\nmodule.exports = function(listenable, key, filterFunc) {\n    filterFunc = _.isFunction(key) ? key : filterFunc;\n    return {\n        getInitialState: function() {\n            if (!_.isFunction(listenable.getInitialState)) {\n                return {};\n            } else if (_.isFunction(key)) {\n                return filterFunc.call(this, listenable.getInitialState());\n            } else {\n                // Filter initial payload from store.\n                var result = filterFunc.call(this, listenable.getInitialState());\n                if (typeof(result) !== \"undefined\") {\n                    return _.object([key], [result]);\n                } else {\n                    return {};\n                }\n            }\n        },\n        componentDidMount: function() {\n            _.extend(this, ListenerMethods);\n            var me = this;\n            var cb = function(value) {\n                if (_.isFunction(key)) {\n                    me.setState(filterFunc.call(me, value));\n                } else {\n                    var result = filterFunc.call(me, value);\n                    me.setState(_.object([key], [result]));\n                }\n            };\n\n            this.listenTo(listenable, cb);\n        },\n        componentWillUnmount: ListenerMixin.componentWillUnmount\n    };\n};\n\n","var ListenerMethods = require('reflux-core/lib/ListenerMethods');\n\n/**\n * A mixin factory for a React component. Meant as a more convenient way of using the `ListenerMixin`,\n * without having to manually set listeners in the `componentDidMount` method.\n *\n * @param {Action|Store} listenable An Action or Store that should be\n *  listened to.\n * @param {Function|String} callback The callback to register as event handler\n * @param {Function|String} defaultCallback The callback to register as default handler\n * @returns {Object} An object to be used as a mixin, which sets up the listener for the given listenable.\n */\nmodule.exports = function(listenable,callback,initial){\n    return {\n        /**\n         * Set up the mixin before the initial rendering occurs. Import methods from `ListenerMethods`\n         * and then make the call to `listenTo` with the arguments provided to the factory function\n         */\n        componentDidMount: function() {\n            for(var m in ListenerMethods){\n                if (this[m] !== ListenerMethods[m]){\n                    if (this[m]){\n                        throw \"Can't have other property '\"+m+\"' when using Reflux.listenTo!\";\n                    }\n                    this[m] = ListenerMethods[m];\n                }\n            }\n            this.listenTo(listenable,callback,initial);\n        },\n        /**\n         * Cleans up all listener previously registered.\n         */\n        componentWillUnmount: ListenerMethods.stopListeningToAll\n    };\n};\n","var ListenerMethods = require('reflux-core/lib/ListenerMethods');\n\n/**\n * A mixin factory for a React component. Meant as a more convenient way of using the `listenerMixin`,\n * without having to manually set listeners in the `componentDidMount` method. This version is used\n * to automatically set up a `listenToMany` call.\n *\n * @param {Object} listenables An object of listenables\n * @returns {Object} An object to be used as a mixin, which sets up the listeners for the given listenables.\n */\nmodule.exports = function(listenables){\n    return {\n        /**\n         * Set up the mixin before the initial rendering occurs. Import methods from `ListenerMethods`\n         * and then make the call to `listenTo` with the arguments provided to the factory function\n         */\n        componentDidMount: function() {\n            for(var m in ListenerMethods){\n                if (this[m] !== ListenerMethods[m]){\n                    if (this[m]){\n                        throw \"Can't have other property '\"+m+\"' when using Reflux.listenToMany!\";\n                    }\n                    this[m] = ListenerMethods[m];\n                }\n            }\n            this.listenToMany(listenables);\n        },\n        /**\n         * Cleans up all listener previously registered.\n         */\n        componentWillUnmount: ListenerMethods.stopListeningToAll\n    };\n};\n","exports.name = \"reflux-core\";\nexports.main = \"lib/index.js\";\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nvar Reflux = {\n    version: {\n        \"reflux-core\": \"0.3.0\"\n    }\n};\n\nReflux.ActionMethods = require(\"./ActionMethods\");\n\nReflux.ListenerMethods = require(\"./ListenerMethods\");\n\nReflux.PublisherMethods = require(\"./PublisherMethods\");\n\nReflux.StoreMethods = require(\"./StoreMethods\");\n\nReflux.createAction = require(\"./createAction\");\n\nReflux.createStore = require(\"./createStore\");\n\nvar maker = require(\"./joins\").staticJoinCreator;\n\nReflux.joinTrailing = Reflux.all = maker(\"last\"); // Reflux.all alias for backward compatibility\n\nReflux.joinLeading = maker(\"first\");\n\nReflux.joinStrict = maker(\"strict\");\n\nReflux.joinConcat = maker(\"all\");\n\nvar _ = Reflux.utils = require(\"./utils\");\n\nReflux.EventEmitter = _.EventEmitter;\n\nReflux.Promise = _.Promise;\n\n/**\n * Convenience function for creating a set of actions\n *\n * @param definitions the definitions for the actions to be created\n * @returns an object with actions of corresponding action names\n */\nReflux.createActions = (function () {\n    var reducer = function reducer(definitions, actions) {\n        Object.keys(definitions).forEach(function (actionName) {\n            var val = definitions[actionName];\n            actions[actionName] = Reflux.createAction(val);\n        });\n    };\n\n    return function (definitions) {\n        var actions = {};\n        if (definitions instanceof Array) {\n            definitions.forEach(function (val) {\n                if (_.isObject(val)) {\n                    reducer(val, actions);\n                } else {\n                    actions[val] = Reflux.createAction(val);\n                }\n            });\n        } else {\n            reducer(definitions, actions);\n        }\n        return actions;\n    };\n})();\n\n/**\n * Sets the eventmitter that Reflux uses\n */\nReflux.setEventEmitter = function (ctx) {\n    Reflux.EventEmitter = _.EventEmitter = ctx;\n};\n\n/**\n * Sets the method used for deferring actions and stores\n */\nReflux.nextTick = function (nextTick) {\n    _.nextTick = nextTick;\n};\n\nReflux.use = function (pluginCb) {\n    pluginCb(Reflux);\n};\n\n/**\n * Provides the set of created actions and stores for introspection\n */\n/*eslint-disable no-underscore-dangle*/\nReflux.__keep = require(\"./Keep\");\n/*eslint-enable no-underscore-dangle*/\n\n/**\n * Warn if Function.prototype.bind not available\n */\nif (!Function.prototype.bind) {\n    console.error(\"Function.prototype.bind not available. \" + \"ES5 shim required. \" + \"https://github.com/spoike/refluxjs#es5\");\n}\n\nexports[\"default\"] = Reflux;\nmodule.exports = exports[\"default\"];","/**\n * A module of methods that you want to include in all actions.\n * This module is consumed by `createAction`.\n */\n\"use strict\";\n\nmodule.exports = {};","\"use strict\";\n\nvar _ = require(\"./utils\"),\n    maker = require(\"./joins\").instanceJoinCreator;\n\n/**\n * Extract child listenables from a parent from their\n * children property and return them in a keyed Object\n *\n * @param {Object} listenable The parent listenable\n */\nvar mapChildListenables = function mapChildListenables(listenable) {\n    var i = 0,\n        children = {},\n        childName;\n    for (; i < (listenable.children || []).length; ++i) {\n        childName = listenable.children[i];\n        if (listenable[childName]) {\n            children[childName] = listenable[childName];\n        }\n    }\n    return children;\n};\n\n/**\n * Make a flat dictionary of all listenables including their\n * possible children (recursively), concatenating names in camelCase.\n *\n * @param {Object} listenables The top-level listenables\n */\nvar flattenListenables = function flattenListenables(listenables) {\n    var flattened = {};\n    for (var key in listenables) {\n        var listenable = listenables[key];\n        var childMap = mapChildListenables(listenable);\n\n        // recursively flatten children\n        var children = flattenListenables(childMap);\n\n        // add the primary listenable and chilren\n        flattened[key] = listenable;\n        for (var childKey in children) {\n            var childListenable = children[childKey];\n            flattened[key + _.capitalize(childKey)] = childListenable;\n        }\n    }\n\n    return flattened;\n};\n\n/**\n * A module of methods related to listening.\n */\nmodule.exports = {\n\n    /**\n     * An internal utility function used by `validateListening`\n     *\n     * @param {Action|Store} listenable The listenable we want to search for\n     * @returns {Boolean} The result of a recursive search among `this.subscriptions`\n     */\n    hasListener: function hasListener(listenable) {\n        var i = 0,\n            j,\n            listener,\n            listenables;\n        for (; i < (this.subscriptions || []).length; ++i) {\n            listenables = [].concat(this.subscriptions[i].listenable);\n            for (j = 0; j < listenables.length; j++) {\n                listener = listenables[j];\n                if (listener === listenable || listener.hasListener && listener.hasListener(listenable)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    },\n\n    /**\n     * A convenience method that listens to all listenables in the given object.\n     *\n     * @param {Object} listenables An object of listenables. Keys will be used as callback method names.\n     */\n    listenToMany: function listenToMany(listenables) {\n        var allListenables = flattenListenables(listenables);\n        for (var key in allListenables) {\n            var cbname = _.callbackName(key),\n                localname = this[cbname] ? cbname : this[key] ? key : undefined;\n            if (localname) {\n                this.listenTo(allListenables[key], localname, this[cbname + \"Default\"] || this[localname + \"Default\"] || localname);\n            }\n        }\n    },\n\n    /**\n     * Checks if the current context can listen to the supplied listenable\n     *\n     * @param {Action|Store} listenable An Action or Store that should be\n     *  listened to.\n     * @returns {String|Undefined} An error message, or undefined if there was no problem.\n     */\n    validateListening: function validateListening(listenable) {\n        if (listenable === this) {\n            return \"Listener is not able to listen to itself\";\n        }\n        if (!_.isFunction(listenable.listen)) {\n            return listenable + \" is missing a listen method\";\n        }\n        if (listenable.hasListener && listenable.hasListener(this)) {\n            return \"Listener cannot listen to this listenable because of circular loop\";\n        }\n    },\n\n    /**\n     * Sets up a subscription to the given listenable for the context object\n     *\n     * @param {Action|Store} listenable An Action or Store that should be\n     *  listened to.\n     * @param {Function|String} callback The callback to register as event handler\n     * @param {Function|String} defaultCallback The callback to register as default handler\n     * @returns {Object} A subscription obj where `stop` is an unsub function and `listenable` is the object being listened to\n     */\n    listenTo: function listenTo(listenable, callback, defaultCallback) {\n        var desub,\n            unsubscriber,\n            subscriptionobj,\n            subs = this.subscriptions = this.subscriptions || [];\n        _.throwIf(this.validateListening(listenable));\n        this.fetchInitialState(listenable, defaultCallback);\n        desub = listenable.listen(this[callback] || callback, this);\n        unsubscriber = function () {\n            var index = subs.indexOf(subscriptionobj);\n            _.throwIf(index === -1, \"Tried to remove listen already gone from subscriptions list!\");\n            subs.splice(index, 1);\n            desub();\n        };\n        subscriptionobj = {\n            stop: unsubscriber,\n            listenable: listenable\n        };\n        subs.push(subscriptionobj);\n        return subscriptionobj;\n    },\n\n    /**\n     * Stops listening to a single listenable\n     *\n     * @param {Action|Store} listenable The action or store we no longer want to listen to\n     * @returns {Boolean} True if a subscription was found and removed, otherwise false.\n     */\n    stopListeningTo: function stopListeningTo(listenable) {\n        var sub,\n            i = 0,\n            subs = this.subscriptions || [];\n        for (; i < subs.length; i++) {\n            sub = subs[i];\n            if (sub.listenable === listenable) {\n                sub.stop();\n                _.throwIf(subs.indexOf(sub) !== -1, \"Failed to remove listen from subscriptions list!\");\n                return true;\n            }\n        }\n        return false;\n    },\n\n    /**\n     * Stops all subscriptions and empties subscriptions array\n     */\n    stopListeningToAll: function stopListeningToAll() {\n        var remaining,\n            subs = this.subscriptions || [];\n        while (remaining = subs.length) {\n            subs[0].stop();\n            _.throwIf(subs.length !== remaining - 1, \"Failed to remove listen from subscriptions list!\");\n        }\n    },\n\n    /**\n     * Used in `listenTo`. Fetches initial data from a publisher if it has a `getInitialState` method.\n     * @param {Action|Store} listenable The publisher we want to get initial state from\n     * @param {Function|String} defaultCallback The method to receive the data\n     */\n    fetchInitialState: function fetchInitialState(listenable, defaultCallback) {\n        defaultCallback = defaultCallback && this[defaultCallback] || defaultCallback;\n        var me = this;\n        if (_.isFunction(defaultCallback) && _.isFunction(listenable.getInitialState)) {\n            var data = listenable.getInitialState();\n            if (data && _.isFunction(data.then)) {\n                data.then(function () {\n                    defaultCallback.apply(me, arguments);\n                });\n            } else {\n                defaultCallback.call(this, data);\n            }\n        }\n    },\n\n    /**\n     * The callback will be called once all listenables have triggered at least once.\n     * It will be invoked with the last emission from each listenable.\n     * @param {...Publishers} publishers Publishers that should be tracked.\n     * @param {Function|String} callback The method to call when all publishers have emitted\n     * @returns {Object} A subscription obj where `stop` is an unsub function and `listenable` is an array of listenables\n     */\n    joinTrailing: maker(\"last\"),\n\n    /**\n     * The callback will be called once all listenables have triggered at least once.\n     * It will be invoked with the first emission from each listenable.\n     * @param {...Publishers} publishers Publishers that should be tracked.\n     * @param {Function|String} callback The method to call when all publishers have emitted\n     * @returns {Object} A subscription obj where `stop` is an unsub function and `listenable` is an array of listenables\n     */\n    joinLeading: maker(\"first\"),\n\n    /**\n     * The callback will be called once all listenables have triggered at least once.\n     * It will be invoked with all emission from each listenable.\n     * @param {...Publishers} publishers Publishers that should be tracked.\n     * @param {Function|String} callback The method to call when all publishers have emitted\n     * @returns {Object} A subscription obj where `stop` is an unsub function and `listenable` is an array of listenables\n     */\n    joinConcat: maker(\"all\"),\n\n    /**\n     * The callback will be called once all listenables have triggered.\n     * If a callback triggers twice before that happens, an error is thrown.\n     * @param {...Publishers} publishers Publishers that should be tracked.\n     * @param {Function|String} callback The method to call when all publishers have emitted\n     * @returns {Object} A subscription obj where `stop` is an unsub function and `listenable` is an array of listenables\n     */\n    joinStrict: maker(\"strict\")\n};","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.capitalize = capitalize;\nexports.callbackName = callbackName;\nexports.isObject = isObject;\nexports.extend = extend;\nexports.isFunction = isFunction;\nexports.object = object;\nexports.isArguments = isArguments;\nexports.throwIf = throwIf;\n\nfunction capitalize(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nfunction callbackName(string, prefix) {\n    prefix = prefix || \"on\";\n    return prefix + exports.capitalize(string);\n}\n\n/*\n * isObject, extend, isFunction, isArguments are taken from undescore/lodash in\n * order to remove the dependency\n */\n\nfunction isObject(obj) {\n    var type = typeof obj;\n    return type === \"function\" || type === \"object\" && !!obj;\n}\n\nfunction extend(obj) {\n    if (!isObject(obj)) {\n        return obj;\n    }\n    var source, prop;\n    for (var i = 1, length = arguments.length; i < length; i++) {\n        source = arguments[i];\n        for (prop in source) {\n            if (Object.getOwnPropertyDescriptor && Object.defineProperty) {\n                var propertyDescriptor = Object.getOwnPropertyDescriptor(source, prop);\n                Object.defineProperty(obj, prop, propertyDescriptor);\n            } else {\n                obj[prop] = source[prop];\n            }\n        }\n    }\n    return obj;\n}\n\nfunction isFunction(value) {\n    return typeof value === \"function\";\n}\n\nexports.EventEmitter = require(\"eventemitter3\");\n\nexports.nextTick = function (callback) {\n    setTimeout(callback, 0);\n};\n\nfunction object(keys, vals) {\n    var o = {},\n        i = 0;\n    for (; i < keys.length; i++) {\n        o[keys[i]] = vals[i];\n    }\n    return o;\n}\n\nfunction isArguments(value) {\n    return typeof value === \"object\" && \"callee\" in value && typeof value.length === \"number\";\n}\n\nfunction throwIf(val, msg) {\n    if (val) {\n        throw Error(msg || val);\n    }\n}","/**\n * Internal module used to create static and instance join methods\n */\n\n\"use strict\";\n\nvar createStore = require(\"./createStore\"),\n    _ = require(\"./utils\");\n\nvar slice = Array.prototype.slice,\n    strategyMethodNames = {\n    strict: \"joinStrict\",\n    first: \"joinLeading\",\n    last: \"joinTrailing\",\n    all: \"joinConcat\"\n};\n\n/**\n * Used in `index.js` to create the static join methods\n * @param {String} strategy Which strategy to use when tracking listenable trigger arguments\n * @returns {Function} A static function which returns a store with a join listen on the given listenables using the given strategy\n */\nexports.staticJoinCreator = function (strategy) {\n    return function () /* listenables... */{\n        var listenables = slice.call(arguments);\n        return createStore({\n            init: function init() {\n                this[strategyMethodNames[strategy]].apply(this, listenables.concat(\"triggerAsync\"));\n            }\n        });\n    };\n};\n\n/**\n * Used in `ListenerMethods.js` to create the instance join methods\n * @param {String} strategy Which strategy to use when tracking listenable trigger arguments\n * @returns {Function} An instance method which sets up a join listen on the given listenables using the given strategy\n */\nexports.instanceJoinCreator = function (strategy) {\n    return function () /* listenables..., callback*/{\n        _.throwIf(arguments.length < 2, \"Cannot create a join with less than 2 listenables!\");\n        var listenables = slice.call(arguments),\n            callback = listenables.pop(),\n            numberOfListenables = listenables.length,\n            join = {\n            numberOfListenables: numberOfListenables,\n            callback: this[callback] || callback,\n            listener: this,\n            strategy: strategy\n        },\n            i,\n            cancels = [],\n            subobj;\n        for (i = 0; i < numberOfListenables; i++) {\n            _.throwIf(this.validateListening(listenables[i]));\n        }\n        for (i = 0; i < numberOfListenables; i++) {\n            cancels.push(listenables[i].listen(newListener(i, join), this));\n        }\n        reset(join);\n        subobj = { listenable: listenables };\n        subobj.stop = makeStopper(subobj, cancels, this);\n        this.subscriptions = (this.subscriptions || []).concat(subobj);\n        return subobj;\n    };\n};\n\n// ---- internal join functions ----\n\nfunction makeStopper(subobj, cancels, context) {\n    return function () {\n        var i,\n            subs = context.subscriptions,\n            index = subs ? subs.indexOf(subobj) : -1;\n        _.throwIf(index === -1, \"Tried to remove join already gone from subscriptions list!\");\n        for (i = 0; i < cancels.length; i++) {\n            cancels[i]();\n        }\n        subs.splice(index, 1);\n    };\n}\n\nfunction reset(join) {\n    join.listenablesEmitted = new Array(join.numberOfListenables);\n    join.args = new Array(join.numberOfListenables);\n}\n\nfunction newListener(i, join) {\n    return function () {\n        var callargs = slice.call(arguments);\n        if (join.listenablesEmitted[i]) {\n            switch (join.strategy) {\n                case \"strict\":\n                    throw new Error(\"Strict join failed because listener triggered twice.\");\n                case \"last\":\n                    join.args[i] = callargs;break;\n                case \"all\":\n                    join.args[i].push(callargs);\n            }\n        } else {\n            join.listenablesEmitted[i] = true;\n            join.args[i] = join.strategy === \"all\" ? [callargs] : callargs;\n        }\n        emitIfAllListenablesEmitted(join);\n    };\n}\n\nfunction emitIfAllListenablesEmitted(join) {\n    for (var i = 0; i < join.numberOfListenables; i++) {\n        if (!join.listenablesEmitted[i]) {\n            return;\n        }\n    }\n    join.callback.apply(join.listener, join.args);\n    reset(join);\n}","\"use strict\";\n\nvar _ = require(\"./utils\"),\n    Keep = require(\"./Keep\"),\n    mixer = require(\"./mixer\"),\n    bindMethods = require(\"./bindMethods\");\n\nvar allowed = { preEmit: 1, shouldEmit: 1 };\n\n/**\n * Creates an event emitting Data Store. It is mixed in with functions\n * from the `ListenerMethods` and `PublisherMethods` mixins. `preEmit`\n * and `shouldEmit` may be overridden in the definition object.\n *\n * @param {Object} definition The data store object definition\n * @returns {Store} A data store instance\n */\nmodule.exports = function (definition) {\n\n    var StoreMethods = require(\"./StoreMethods\"),\n        PublisherMethods = require(\"./PublisherMethods\"),\n        ListenerMethods = require(\"./ListenerMethods\");\n\n    definition = definition || {};\n\n    for (var a in StoreMethods) {\n        if (!allowed[a] && (PublisherMethods[a] || ListenerMethods[a])) {\n            throw new Error(\"Cannot override API method \" + a + \" in Reflux.StoreMethods. Use another method name or override it on Reflux.PublisherMethods / Reflux.ListenerMethods instead.\");\n        }\n    }\n\n    for (var d in definition) {\n        if (!allowed[d] && (PublisherMethods[d] || ListenerMethods[d])) {\n            throw new Error(\"Cannot override API method \" + d + \" in store creation. Use another method name or override it on Reflux.PublisherMethods / Reflux.ListenerMethods instead.\");\n        }\n    }\n\n    definition = mixer(definition);\n\n    function Store() {\n        var i = 0,\n            arr;\n        this.subscriptions = [];\n        this.emitter = new _.EventEmitter();\n        this.eventLabel = \"change\";\n        bindMethods(this, definition);\n        if (this.init && _.isFunction(this.init)) {\n            this.init();\n        }\n        if (this.listenables) {\n            arr = [].concat(this.listenables);\n            for (; i < arr.length; i++) {\n                this.listenToMany(arr[i]);\n            }\n        }\n    }\n\n    _.extend(Store.prototype, ListenerMethods, PublisherMethods, StoreMethods, definition);\n\n    var store = new Store();\n    Keep.createdStores.push(store);\n\n    return store;\n};","\"use strict\";\n\nexports.createdStores = [];\n\nexports.createdActions = [];\n\nexports.reset = function () {\n    while (exports.createdStores.length) {\n        exports.createdStores.pop();\n    }\n    while (exports.createdActions.length) {\n        exports.createdActions.pop();\n    }\n};","\"use strict\";\n\nvar _ = require(\"./utils\");\n\nmodule.exports = function mix(def) {\n    var composed = {\n        init: [],\n        preEmit: [],\n        shouldEmit: []\n    };\n\n    var updated = (function mixDef(mixin) {\n        var mixed = {};\n        if (mixin.mixins) {\n            mixin.mixins.forEach(function (subMixin) {\n                _.extend(mixed, mixDef(subMixin));\n            });\n        }\n        _.extend(mixed, mixin);\n        Object.keys(composed).forEach(function (composable) {\n            if (mixin.hasOwnProperty(composable)) {\n                composed[composable].push(mixin[composable]);\n            }\n        });\n        return mixed;\n    })(def);\n\n    if (composed.init.length > 1) {\n        updated.init = function () {\n            var args = arguments;\n            composed.init.forEach(function (init) {\n                init.apply(this, args);\n            }, this);\n        };\n    }\n    if (composed.preEmit.length > 1) {\n        updated.preEmit = function () {\n            return composed.preEmit.reduce((function (args, preEmit) {\n                var newValue = preEmit.apply(this, args);\n                return newValue === undefined ? args : [newValue];\n            }).bind(this), arguments);\n        };\n    }\n    if (composed.shouldEmit.length > 1) {\n        updated.shouldEmit = function () {\n            var args = arguments;\n            return !composed.shouldEmit.some(function (shouldEmit) {\n                return !shouldEmit.apply(this, args);\n            }, this);\n        };\n    }\n    Object.keys(composed).forEach(function (composable) {\n        if (composed[composable].length === 1) {\n            updated[composable] = composed[composable][0];\n        }\n    });\n\n    return updated;\n};","\"use strict\";\n\nmodule.exports = function (store, definition) {\n    for (var name in definition) {\n        if (Object.getOwnPropertyDescriptor && Object.defineProperty) {\n            var propertyDescriptor = Object.getOwnPropertyDescriptor(definition, name);\n\n            if (!propertyDescriptor.value || typeof propertyDescriptor.value !== \"function\" || !definition.hasOwnProperty(name)) {\n                continue;\n            }\n\n            store[name] = definition[name].bind(store);\n        } else {\n            var property = definition[name];\n\n            if (typeof property !== \"function\" || !definition.hasOwnProperty(name)) {\n                continue;\n            }\n\n            store[name] = property.bind(store);\n        }\n    }\n\n    return store;\n};","/**\n * A module of methods that you want to include in all stores.\n * This module is consumed by `createStore`.\n */\n\"use strict\";\n\nmodule.exports = {};","\"use strict\";\n\nvar _ = require(\"./utils\");\n\n/**\n * A module of methods for object that you want to be able to listen to.\n * This module is consumed by `createStore` and `createAction`\n */\nmodule.exports = {\n\n    /**\n     * Hook used by the publisher that is invoked before emitting\n     * and before `shouldEmit`. The arguments are the ones that the action\n     * is invoked with. If this function returns something other than\n     * undefined, that will be passed on as arguments for shouldEmit and\n     * emission.\n     */\n    preEmit: function preEmit() {},\n\n    /**\n     * Hook used by the publisher after `preEmit` to determine if the\n     * event should be emitted with given arguments. This may be overridden\n     * in your application, default implementation always returns true.\n     *\n     * @returns {Boolean} true if event should be emitted\n     */\n    shouldEmit: function shouldEmit() {\n        return true;\n    },\n\n    /**\n     * Subscribes the given callback for action triggered\n     *\n     * @param {Function} callback The callback to register as event handler\n     * @param {Mixed} [optional] bindContext The context to bind the callback with\n     * @returns {Function} Callback that unsubscribes the registered event handler\n     */\n    listen: function listen(callback, bindContext) {\n        bindContext = bindContext || this;\n        var eventHandler = function eventHandler(args) {\n            if (aborted) {\n                return;\n            }\n            callback.apply(bindContext, args);\n        },\n            me = this,\n            aborted = false;\n        this.emitter.addListener(this.eventLabel, eventHandler);\n        return function () {\n            aborted = true;\n            me.emitter.removeListener(me.eventLabel, eventHandler);\n        };\n    },\n\n    /**\n     * Publishes an event using `this.emitter` (if `shouldEmit` agrees)\n     */\n    trigger: function trigger() {\n        var args = arguments,\n            pre = this.preEmit.apply(this, args);\n        args = pre === undefined ? args : _.isArguments(pre) ? pre : [].concat(pre);\n        if (this.shouldEmit.apply(this, args)) {\n            this.emitter.emit(this.eventLabel, args);\n        }\n    },\n\n    /**\n     * Tries to publish the event on the next tick\n     */\n    triggerAsync: function triggerAsync() {\n        var args = arguments,\n            me = this;\n        _.nextTick(function () {\n            me.trigger.apply(me, args);\n        });\n    },\n\n    /**\n     * Wraps the trigger mechanism with a deferral function.\n     *\n     * @param {Function} callback the deferral function,\n     *        first argument is the resolving function and the\n     *        rest are the arguments provided from the previous\n     *        trigger invocation\n     */\n    deferWith: function deferWith(callback) {\n        var oldTrigger = this.trigger,\n            ctx = this,\n            resolver = function resolver() {\n            oldTrigger.apply(ctx, arguments);\n        };\n        this.trigger = function () {\n            callback.apply(ctx, [resolver].concat([].splice.call(arguments, 0)));\n        };\n    }\n\n};","\"use strict\";\n\nvar _ = require(\"./utils\"),\n    ActionMethods = require(\"./ActionMethods\"),\n    PublisherMethods = require(\"./PublisherMethods\"),\n    Keep = require(\"./Keep\");\n\nvar allowed = { preEmit: 1, shouldEmit: 1 };\n\n/**\n * Creates an action functor object. It is mixed in with functions\n * from the `PublisherMethods` mixin. `preEmit` and `shouldEmit` may\n * be overridden in the definition object.\n *\n * @param {Object} definition The action object definition\n */\nvar createAction = function createAction(definition) {\n\n    definition = definition || {};\n    if (!_.isObject(definition)) {\n        definition = { actionName: definition };\n    }\n\n    for (var a in ActionMethods) {\n        if (!allowed[a] && PublisherMethods[a]) {\n            throw new Error(\"Cannot override API method \" + a + \" in Reflux.ActionMethods. Use another method name or override it on Reflux.PublisherMethods instead.\");\n        }\n    }\n\n    for (var d in definition) {\n        if (!allowed[d] && PublisherMethods[d]) {\n            throw new Error(\"Cannot override API method \" + d + \" in action creation. Use another method name or override it on Reflux.PublisherMethods instead.\");\n        }\n    }\n\n    definition.children = definition.children || [];\n    if (definition.asyncResult) {\n        definition.children = definition.children.concat([\"completed\", \"failed\"]);\n    }\n\n    var i = 0,\n        childActions = {};\n    for (; i < definition.children.length; i++) {\n        var name = definition.children[i];\n        childActions[name] = createAction(name);\n    }\n\n    var context = _.extend({\n        eventLabel: \"action\",\n        emitter: new _.EventEmitter(),\n        _isAction: true\n    }, PublisherMethods, ActionMethods, definition);\n\n    var functor = function functor() {\n        var triggerType = functor.sync ? \"trigger\" : \"triggerAsync\";\n        return functor[triggerType].apply(functor, arguments);\n    };\n\n    _.extend(functor, childActions, context);\n\n    Keep.createdActions.push(functor);\n\n    return functor;\n};\n\nmodule.exports = createAction;","exports.name = \"eventemitter3\";\nexports.main = \"index.js\";\n","'use strict';\n\n//\n// We store our EE objects in a plain object whose properties are event names.\n// If `Object.create(null)` is not supported we prefix the event names with a\n// `~` to make sure that the built-in object properties are not overridden or\n// used as an attack vector.\n// We also assume that `Object.create(null)` is available when the event name\n// is an ES6 Symbol.\n//\nvar prefix = typeof Object.create !== 'function' ? '~' : false;\n\n/**\n * Representation of a single EventEmitter function.\n *\n * @param {Function} fn Event handler to be called.\n * @param {Mixed} context Context for function execution.\n * @param {Boolean} once Only emit once\n * @api private\n */\nfunction EE(fn, context, once) {\n  this.fn = fn;\n  this.context = context;\n  this.once = once || false;\n}\n\n/**\n * Minimal EventEmitter interface that is molded against the Node.js\n * EventEmitter interface.\n *\n * @constructor\n * @api public\n */\nfunction EventEmitter() { /* Nothing to set */ }\n\n/**\n * Holds the assigned EventEmitters by name.\n *\n * @type {Object}\n * @private\n */\nEventEmitter.prototype._events = undefined;\n\n/**\n * Return a list of assigned event listeners.\n *\n * @param {String} event The events that should be listed.\n * @param {Boolean} exists We only need to know if there are listeners.\n * @returns {Array|Boolean}\n * @api public\n */\nEventEmitter.prototype.listeners = function listeners(event, exists) {\n  var evt = prefix ? prefix + event : event\n    , available = this._events && this._events[evt];\n\n  if (exists) return !!available;\n  if (!available) return [];\n  if (available.fn) return [available.fn];\n\n  for (var i = 0, l = available.length, ee = new Array(l); i < l; i++) {\n    ee[i] = available[i].fn;\n  }\n\n  return ee;\n};\n\n/**\n * Emit an event to all registered event listeners.\n *\n * @param {String} event The name of the event.\n * @returns {Boolean} Indication if we've emitted an event.\n * @api public\n */\nEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events || !this._events[evt]) return false;\n\n  var listeners = this._events[evt]\n    , len = arguments.length\n    , args\n    , i;\n\n  if ('function' === typeof listeners.fn) {\n    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n\n    switch (len) {\n      case 1: return listeners.fn.call(listeners.context), true;\n      case 2: return listeners.fn.call(listeners.context, a1), true;\n      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n    }\n\n    for (i = 1, args = new Array(len -1); i < len; i++) {\n      args[i - 1] = arguments[i];\n    }\n\n    listeners.fn.apply(listeners.context, args);\n  } else {\n    var length = listeners.length\n      , j;\n\n    for (i = 0; i < length; i++) {\n      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n\n      switch (len) {\n        case 1: listeners[i].fn.call(listeners[i].context); break;\n        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n        default:\n          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n            args[j - 1] = arguments[j];\n          }\n\n          listeners[i].fn.apply(listeners[i].context, args);\n      }\n    }\n  }\n\n  return true;\n};\n\n/**\n * Register a new EventListener for the given event.\n *\n * @param {String} event Name of the event.\n * @param {Functon} fn Callback function.\n * @param {Mixed} context The context of the function.\n * @api public\n */\nEventEmitter.prototype.on = function on(event, fn, context) {\n  var listener = new EE(fn, context || this)\n    , evt = prefix ? prefix + event : event;\n\n  if (!this._events) this._events = prefix ? {} : Object.create(null);\n  if (!this._events[evt]) this._events[evt] = listener;\n  else {\n    if (!this._events[evt].fn) this._events[evt].push(listener);\n    else this._events[evt] = [\n      this._events[evt], listener\n    ];\n  }\n\n  return this;\n};\n\n/**\n * Add an EventListener that's only called once.\n *\n * @param {String} event Name of the event.\n * @param {Function} fn Callback function.\n * @param {Mixed} context The context of the function.\n * @api public\n */\nEventEmitter.prototype.once = function once(event, fn, context) {\n  var listener = new EE(fn, context || this, true)\n    , evt = prefix ? prefix + event : event;\n\n  if (!this._events) this._events = prefix ? {} : Object.create(null);\n  if (!this._events[evt]) this._events[evt] = listener;\n  else {\n    if (!this._events[evt].fn) this._events[evt].push(listener);\n    else this._events[evt] = [\n      this._events[evt], listener\n    ];\n  }\n\n  return this;\n};\n\n/**\n * Remove event listeners.\n *\n * @param {String} event The event we want to remove.\n * @param {Function} fn The listener that we need to find.\n * @param {Mixed} context Only remove listeners matching this context.\n * @param {Boolean} once Only remove once listeners.\n * @api public\n */\nEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events || !this._events[evt]) return this;\n\n  var listeners = this._events[evt]\n    , events = [];\n\n  if (fn) {\n    if (listeners.fn) {\n      if (\n           listeners.fn !== fn\n        || (once && !listeners.once)\n        || (context && listeners.context !== context)\n      ) {\n        events.push(listeners);\n      }\n    } else {\n      for (var i = 0, length = listeners.length; i < length; i++) {\n        if (\n             listeners[i].fn !== fn\n          || (once && !listeners[i].once)\n          || (context && listeners[i].context !== context)\n        ) {\n          events.push(listeners[i]);\n        }\n      }\n    }\n  }\n\n  //\n  // Reset the array, or remove it completely if we have no more listeners.\n  //\n  if (events.length) {\n    this._events[evt] = events.length === 1 ? events[0] : events;\n  } else {\n    delete this._events[evt];\n  }\n\n  return this;\n};\n\n/**\n * Remove all listeners or only the listeners for the specified event.\n *\n * @param {String} event The event want to remove all listeners for.\n * @api public\n */\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n  if (!this._events) return this;\n\n  if (event) delete this._events[prefix ? prefix + event : event];\n  else this._events = prefix ? {} : Object.create(null);\n\n  return this;\n};\n\n//\n// Alias methods names because people roll like that.\n//\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n//\n// This function doesn't apply anymore.\n//\nEventEmitter.prototype.setMaxListeners = function setMaxListeners() {\n  return this;\n};\n\n//\n// Expose the prefix.\n//\nEventEmitter.prefixed = prefix;\n\n//\n// Expose the module.\n//\nif ('undefined' !== typeof module) {\n  module.exports = EventEmitter;\n}\n","exports.name = \"underscore\";\nexports.main = \"underscore.js\";\n","//     Underscore.js 1.8.3\n//     http://underscorejs.org\n//     (c) 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n//     Underscore may be freely distributed under the MIT license.\n\n(function() {\n\n  // Baseline setup\n  // --------------\n\n  // Establish the root object, `window` in the browser, or `exports` on the server.\n  var root = this;\n\n  // Save the previous value of the `_` variable.\n  var previousUnderscore = root._;\n\n  // Save bytes in the minified (but not gzipped) version:\n  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;\n\n  // Create quick reference variables for speed access to core prototypes.\n  var\n    push             = ArrayProto.push,\n    slice            = ArrayProto.slice,\n    toString         = ObjProto.toString,\n    hasOwnProperty   = ObjProto.hasOwnProperty;\n\n  // All **ECMAScript 5** native function implementations that we hope to use\n  // are declared here.\n  var\n    nativeIsArray      = Array.isArray,\n    nativeKeys         = Object.keys,\n    nativeBind         = FuncProto.bind,\n    nativeCreate       = Object.create;\n\n  // Naked function reference for surrogate-prototype-swapping.\n  var Ctor = function(){};\n\n  // Create a safe reference to the Underscore object for use below.\n  var _ = function(obj) {\n    if (obj instanceof _) return obj;\n    if (!(this instanceof _)) return new _(obj);\n    this._wrapped = obj;\n  };\n\n  // Export the Underscore object for **Node.js**, with\n  // backwards-compatibility for the old `require()` API. If we're in\n  // the browser, add `_` as a global object.\n  if (typeof exports !== 'undefined') {\n    if (typeof module !== 'undefined' && module.exports) {\n      exports = module.exports = _;\n    }\n    exports._ = _;\n  } else {\n    root._ = _;\n  }\n\n  // Current version.\n  _.VERSION = '1.8.3';\n\n  // Internal function that returns an efficient (for current engines) version\n  // of the passed-in callback, to be repeatedly applied in other Underscore\n  // functions.\n  var optimizeCb = function(func, context, argCount) {\n    if (context === void 0) return func;\n    switch (argCount == null ? 3 : argCount) {\n      case 1: return function(value) {\n        return func.call(context, value);\n      };\n      case 2: return function(value, other) {\n        return func.call(context, value, other);\n      };\n      case 3: return function(value, index, collection) {\n        return func.call(context, value, index, collection);\n      };\n      case 4: return function(accumulator, value, index, collection) {\n        return func.call(context, accumulator, value, index, collection);\n      };\n    }\n    return function() {\n      return func.apply(context, arguments);\n    };\n  };\n\n  // A mostly-internal function to generate callbacks that can be applied\n  // to each element in a collection, returning the desired result — either\n  // identity, an arbitrary callback, a property matcher, or a property accessor.\n  var cb = function(value, context, argCount) {\n    if (value == null) return _.identity;\n    if (_.isFunction(value)) return optimizeCb(value, context, argCount);\n    if (_.isObject(value)) return _.matcher(value);\n    return _.property(value);\n  };\n  _.iteratee = function(value, context) {\n    return cb(value, context, Infinity);\n  };\n\n  // An internal function for creating assigner functions.\n  var createAssigner = function(keysFunc, undefinedOnly) {\n    return function(obj) {\n      var length = arguments.length;\n      if (length < 2 || obj == null) return obj;\n      for (var index = 1; index < length; index++) {\n        var source = arguments[index],\n            keys = keysFunc(source),\n            l = keys.length;\n        for (var i = 0; i < l; i++) {\n          var key = keys[i];\n          if (!undefinedOnly || obj[key] === void 0) obj[key] = source[key];\n        }\n      }\n      return obj;\n    };\n  };\n\n  // An internal function for creating a new object that inherits from another.\n  var baseCreate = function(prototype) {\n    if (!_.isObject(prototype)) return {};\n    if (nativeCreate) return nativeCreate(prototype);\n    Ctor.prototype = prototype;\n    var result = new Ctor;\n    Ctor.prototype = null;\n    return result;\n  };\n\n  var property = function(key) {\n    return function(obj) {\n      return obj == null ? void 0 : obj[key];\n    };\n  };\n\n  // Helper for collection methods to determine whether a collection\n  // should be iterated as an array or as an object\n  // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength\n  // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094\n  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;\n  var getLength = property('length');\n  var isArrayLike = function(collection) {\n    var length = getLength(collection);\n    return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;\n  };\n\n  // Collection Functions\n  // --------------------\n\n  // The cornerstone, an `each` implementation, aka `forEach`.\n  // Handles raw objects in addition to array-likes. Treats all\n  // sparse array-likes as if they were dense.\n  _.each = _.forEach = function(obj, iteratee, context) {\n    iteratee = optimizeCb(iteratee, context);\n    var i, length;\n    if (isArrayLike(obj)) {\n      for (i = 0, length = obj.length; i < length; i++) {\n        iteratee(obj[i], i, obj);\n      }\n    } else {\n      var keys = _.keys(obj);\n      for (i = 0, length = keys.length; i < length; i++) {\n        iteratee(obj[keys[i]], keys[i], obj);\n      }\n    }\n    return obj;\n  };\n\n  // Return the results of applying the iteratee to each element.\n  _.map = _.collect = function(obj, iteratee, context) {\n    iteratee = cb(iteratee, context);\n    var keys = !isArrayLike(obj) && _.keys(obj),\n        length = (keys || obj).length,\n        results = Array(length);\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys ? keys[index] : index;\n      results[index] = iteratee(obj[currentKey], currentKey, obj);\n    }\n    return results;\n  };\n\n  // Create a reducing function iterating left or right.\n  function createReduce(dir) {\n    // Optimized iterator function as using arguments.length\n    // in the main function will deoptimize the, see #1991.\n    function iterator(obj, iteratee, memo, keys, index, length) {\n      for (; index >= 0 && index < length; index += dir) {\n        var currentKey = keys ? keys[index] : index;\n        memo = iteratee(memo, obj[currentKey], currentKey, obj);\n      }\n      return memo;\n    }\n\n    return function(obj, iteratee, memo, context) {\n      iteratee = optimizeCb(iteratee, context, 4);\n      var keys = !isArrayLike(obj) && _.keys(obj),\n          length = (keys || obj).length,\n          index = dir > 0 ? 0 : length - 1;\n      // Determine the initial value if none is provided.\n      if (arguments.length < 3) {\n        memo = obj[keys ? keys[index] : index];\n        index += dir;\n      }\n      return iterator(obj, iteratee, memo, keys, index, length);\n    };\n  }\n\n  // **Reduce** builds up a single result from a list of values, aka `inject`,\n  // or `foldl`.\n  _.reduce = _.foldl = _.inject = createReduce(1);\n\n  // The right-associative version of reduce, also known as `foldr`.\n  _.reduceRight = _.foldr = createReduce(-1);\n\n  // Return the first value which passes a truth test. Aliased as `detect`.\n  _.find = _.detect = function(obj, predicate, context) {\n    var key;\n    if (isArrayLike(obj)) {\n      key = _.findIndex(obj, predicate, context);\n    } else {\n      key = _.findKey(obj, predicate, context);\n    }\n    if (key !== void 0 && key !== -1) return obj[key];\n  };\n\n  // Return all the elements that pass a truth test.\n  // Aliased as `select`.\n  _.filter = _.select = function(obj, predicate, context) {\n    var results = [];\n    predicate = cb(predicate, context);\n    _.each(obj, function(value, index, list) {\n      if (predicate(value, index, list)) results.push(value);\n    });\n    return results;\n  };\n\n  // Return all the elements for which a truth test fails.\n  _.reject = function(obj, predicate, context) {\n    return _.filter(obj, _.negate(cb(predicate)), context);\n  };\n\n  // Determine whether all of the elements match a truth test.\n  // Aliased as `all`.\n  _.every = _.all = function(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var keys = !isArrayLike(obj) && _.keys(obj),\n        length = (keys || obj).length;\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys ? keys[index] : index;\n      if (!predicate(obj[currentKey], currentKey, obj)) return false;\n    }\n    return true;\n  };\n\n  // Determine if at least one element in the object matches a truth test.\n  // Aliased as `any`.\n  _.some = _.any = function(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var keys = !isArrayLike(obj) && _.keys(obj),\n        length = (keys || obj).length;\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys ? keys[index] : index;\n      if (predicate(obj[currentKey], currentKey, obj)) return true;\n    }\n    return false;\n  };\n\n  // Determine if the array or object contains a given item (using `===`).\n  // Aliased as `includes` and `include`.\n  _.contains = _.includes = _.include = function(obj, item, fromIndex, guard) {\n    if (!isArrayLike(obj)) obj = _.values(obj);\n    if (typeof fromIndex != 'number' || guard) fromIndex = 0;\n    return _.indexOf(obj, item, fromIndex) >= 0;\n  };\n\n  // Invoke a method (with arguments) on every item in a collection.\n  _.invoke = function(obj, method) {\n    var args = slice.call(arguments, 2);\n    var isFunc = _.isFunction(method);\n    return _.map(obj, function(value) {\n      var func = isFunc ? method : value[method];\n      return func == null ? func : func.apply(value, args);\n    });\n  };\n\n  // Convenience version of a common use case of `map`: fetching a property.\n  _.pluck = function(obj, key) {\n    return _.map(obj, _.property(key));\n  };\n\n  // Convenience version of a common use case of `filter`: selecting only objects\n  // containing specific `key:value` pairs.\n  _.where = function(obj, attrs) {\n    return _.filter(obj, _.matcher(attrs));\n  };\n\n  // Convenience version of a common use case of `find`: getting the first object\n  // containing specific `key:value` pairs.\n  _.findWhere = function(obj, attrs) {\n    return _.find(obj, _.matcher(attrs));\n  };\n\n  // Return the maximum element (or element-based computation).\n  _.max = function(obj, iteratee, context) {\n    var result = -Infinity, lastComputed = -Infinity,\n        value, computed;\n    if (iteratee == null && obj != null) {\n      obj = isArrayLike(obj) ? obj : _.values(obj);\n      for (var i = 0, length = obj.length; i < length; i++) {\n        value = obj[i];\n        if (value > result) {\n          result = value;\n        }\n      }\n    } else {\n      iteratee = cb(iteratee, context);\n      _.each(obj, function(value, index, list) {\n        computed = iteratee(value, index, list);\n        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {\n          result = value;\n          lastComputed = computed;\n        }\n      });\n    }\n    return result;\n  };\n\n  // Return the minimum element (or element-based computation).\n  _.min = function(obj, iteratee, context) {\n    var result = Infinity, lastComputed = Infinity,\n        value, computed;\n    if (iteratee == null && obj != null) {\n      obj = isArrayLike(obj) ? obj : _.values(obj);\n      for (var i = 0, length = obj.length; i < length; i++) {\n        value = obj[i];\n        if (value < result) {\n          result = value;\n        }\n      }\n    } else {\n      iteratee = cb(iteratee, context);\n      _.each(obj, function(value, index, list) {\n        computed = iteratee(value, index, list);\n        if (computed < lastComputed || computed === Infinity && result === Infinity) {\n          result = value;\n          lastComputed = computed;\n        }\n      });\n    }\n    return result;\n  };\n\n  // Shuffle a collection, using the modern version of the\n  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).\n  _.shuffle = function(obj) {\n    var set = isArrayLike(obj) ? obj : _.values(obj);\n    var length = set.length;\n    var shuffled = Array(length);\n    for (var index = 0, rand; index < length; index++) {\n      rand = _.random(0, index);\n      if (rand !== index) shuffled[index] = shuffled[rand];\n      shuffled[rand] = set[index];\n    }\n    return shuffled;\n  };\n\n  // Sample **n** random values from a collection.\n  // If **n** is not specified, returns a single random element.\n  // The internal `guard` argument allows it to work with `map`.\n  _.sample = function(obj, n, guard) {\n    if (n == null || guard) {\n      if (!isArrayLike(obj)) obj = _.values(obj);\n      return obj[_.random(obj.length - 1)];\n    }\n    return _.shuffle(obj).slice(0, Math.max(0, n));\n  };\n\n  // Sort the object's values by a criterion produced by an iteratee.\n  _.sortBy = function(obj, iteratee, context) {\n    iteratee = cb(iteratee, context);\n    return _.pluck(_.map(obj, function(value, index, list) {\n      return {\n        value: value,\n        index: index,\n        criteria: iteratee(value, index, list)\n      };\n    }).sort(function(left, right) {\n      var a = left.criteria;\n      var b = right.criteria;\n      if (a !== b) {\n        if (a > b || a === void 0) return 1;\n        if (a < b || b === void 0) return -1;\n      }\n      return left.index - right.index;\n    }), 'value');\n  };\n\n  // An internal function used for aggregate \"group by\" operations.\n  var group = function(behavior) {\n    return function(obj, iteratee, context) {\n      var result = {};\n      iteratee = cb(iteratee, context);\n      _.each(obj, function(value, index) {\n        var key = iteratee(value, index, obj);\n        behavior(result, value, key);\n      });\n      return result;\n    };\n  };\n\n  // Groups the object's values by a criterion. Pass either a string attribute\n  // to group by, or a function that returns the criterion.\n  _.groupBy = group(function(result, value, key) {\n    if (_.has(result, key)) result[key].push(value); else result[key] = [value];\n  });\n\n  // Indexes the object's values by a criterion, similar to `groupBy`, but for\n  // when you know that your index values will be unique.\n  _.indexBy = group(function(result, value, key) {\n    result[key] = value;\n  });\n\n  // Counts instances of an object that group by a certain criterion. Pass\n  // either a string attribute to count by, or a function that returns the\n  // criterion.\n  _.countBy = group(function(result, value, key) {\n    if (_.has(result, key)) result[key]++; else result[key] = 1;\n  });\n\n  // Safely create a real, live array from anything iterable.\n  _.toArray = function(obj) {\n    if (!obj) return [];\n    if (_.isArray(obj)) return slice.call(obj);\n    if (isArrayLike(obj)) return _.map(obj, _.identity);\n    return _.values(obj);\n  };\n\n  // Return the number of elements in an object.\n  _.size = function(obj) {\n    if (obj == null) return 0;\n    return isArrayLike(obj) ? obj.length : _.keys(obj).length;\n  };\n\n  // Split a collection into two arrays: one whose elements all satisfy the given\n  // predicate, and one whose elements all do not satisfy the predicate.\n  _.partition = function(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var pass = [], fail = [];\n    _.each(obj, function(value, key, obj) {\n      (predicate(value, key, obj) ? pass : fail).push(value);\n    });\n    return [pass, fail];\n  };\n\n  // Array Functions\n  // ---------------\n\n  // Get the first element of an array. Passing **n** will return the first N\n  // values in the array. Aliased as `head` and `take`. The **guard** check\n  // allows it to work with `_.map`.\n  _.first = _.head = _.take = function(array, n, guard) {\n    if (array == null) return void 0;\n    if (n == null || guard) return array[0];\n    return _.initial(array, array.length - n);\n  };\n\n  // Returns everything but the last entry of the array. Especially useful on\n  // the arguments object. Passing **n** will return all the values in\n  // the array, excluding the last N.\n  _.initial = function(array, n, guard) {\n    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));\n  };\n\n  // Get the last element of an array. Passing **n** will return the last N\n  // values in the array.\n  _.last = function(array, n, guard) {\n    if (array == null) return void 0;\n    if (n == null || guard) return array[array.length - 1];\n    return _.rest(array, Math.max(0, array.length - n));\n  };\n\n  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.\n  // Especially useful on the arguments object. Passing an **n** will return\n  // the rest N values in the array.\n  _.rest = _.tail = _.drop = function(array, n, guard) {\n    return slice.call(array, n == null || guard ? 1 : n);\n  };\n\n  // Trim out all falsy values from an array.\n  _.compact = function(array) {\n    return _.filter(array, _.identity);\n  };\n\n  // Internal implementation of a recursive `flatten` function.\n  var flatten = function(input, shallow, strict, startIndex) {\n    var output = [], idx = 0;\n    for (var i = startIndex || 0, length = getLength(input); i < length; i++) {\n      var value = input[i];\n      if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {\n        //flatten current level of array or arguments object\n        if (!shallow) value = flatten(value, shallow, strict);\n        var j = 0, len = value.length;\n        output.length += len;\n        while (j < len) {\n          output[idx++] = value[j++];\n        }\n      } else if (!strict) {\n        output[idx++] = value;\n      }\n    }\n    return output;\n  };\n\n  // Flatten out an array, either recursively (by default), or just one level.\n  _.flatten = function(array, shallow) {\n    return flatten(array, shallow, false);\n  };\n\n  // Return a version of the array that does not contain the specified value(s).\n  _.without = function(array) {\n    return _.difference(array, slice.call(arguments, 1));\n  };\n\n  // Produce a duplicate-free version of the array. If the array has already\n  // been sorted, you have the option of using a faster algorithm.\n  // Aliased as `unique`.\n  _.uniq = _.unique = function(array, isSorted, iteratee, context) {\n    if (!_.isBoolean(isSorted)) {\n      context = iteratee;\n      iteratee = isSorted;\n      isSorted = false;\n    }\n    if (iteratee != null) iteratee = cb(iteratee, context);\n    var result = [];\n    var seen = [];\n    for (var i = 0, length = getLength(array); i < length; i++) {\n      var value = array[i],\n          computed = iteratee ? iteratee(value, i, array) : value;\n      if (isSorted) {\n        if (!i || seen !== computed) result.push(value);\n        seen = computed;\n      } else if (iteratee) {\n        if (!_.contains(seen, computed)) {\n          seen.push(computed);\n          result.push(value);\n        }\n      } else if (!_.contains(result, value)) {\n        result.push(value);\n      }\n    }\n    return result;\n  };\n\n  // Produce an array that contains the union: each distinct element from all of\n  // the passed-in arrays.\n  _.union = function() {\n    return _.uniq(flatten(arguments, true, true));\n  };\n\n  // Produce an array that contains every item shared between all the\n  // passed-in arrays.\n  _.intersection = function(array) {\n    var result = [];\n    var argsLength = arguments.length;\n    for (var i = 0, length = getLength(array); i < length; i++) {\n      var item = array[i];\n      if (_.contains(result, item)) continue;\n      for (var j = 1; j < argsLength; j++) {\n        if (!_.contains(arguments[j], item)) break;\n      }\n      if (j === argsLength) result.push(item);\n    }\n    return result;\n  };\n\n  // Take the difference between one array and a number of other arrays.\n  // Only the elements present in just the first array will remain.\n  _.difference = function(array) {\n    var rest = flatten(arguments, true, true, 1);\n    return _.filter(array, function(value){\n      return !_.contains(rest, value);\n    });\n  };\n\n  // Zip together multiple lists into a single array -- elements that share\n  // an index go together.\n  _.zip = function() {\n    return _.unzip(arguments);\n  };\n\n  // Complement of _.zip. Unzip accepts an array of arrays and groups\n  // each array's elements on shared indices\n  _.unzip = function(array) {\n    var length = array && _.max(array, getLength).length || 0;\n    var result = Array(length);\n\n    for (var index = 0; index < length; index++) {\n      result[index] = _.pluck(array, index);\n    }\n    return result;\n  };\n\n  // Converts lists into objects. Pass either a single array of `[key, value]`\n  // pairs, or two parallel arrays of the same length -- one of keys, and one of\n  // the corresponding values.\n  _.object = function(list, values) {\n    var result = {};\n    for (var i = 0, length = getLength(list); i < length; i++) {\n      if (values) {\n        result[list[i]] = values[i];\n      } else {\n        result[list[i][0]] = list[i][1];\n      }\n    }\n    return result;\n  };\n\n  // Generator function to create the findIndex and findLastIndex functions\n  function createPredicateIndexFinder(dir) {\n    return function(array, predicate, context) {\n      predicate = cb(predicate, context);\n      var length = getLength(array);\n      var index = dir > 0 ? 0 : length - 1;\n      for (; index >= 0 && index < length; index += dir) {\n        if (predicate(array[index], index, array)) return index;\n      }\n      return -1;\n    };\n  }\n\n  // Returns the first index on an array-like that passes a predicate test\n  _.findIndex = createPredicateIndexFinder(1);\n  _.findLastIndex = createPredicateIndexFinder(-1);\n\n  // Use a comparator function to figure out the smallest index at which\n  // an object should be inserted so as to maintain order. Uses binary search.\n  _.sortedIndex = function(array, obj, iteratee, context) {\n    iteratee = cb(iteratee, context, 1);\n    var value = iteratee(obj);\n    var low = 0, high = getLength(array);\n    while (low < high) {\n      var mid = Math.floor((low + high) / 2);\n      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;\n    }\n    return low;\n  };\n\n  // Generator function to create the indexOf and lastIndexOf functions\n  function createIndexFinder(dir, predicateFind, sortedIndex) {\n    return function(array, item, idx) {\n      var i = 0, length = getLength(array);\n      if (typeof idx == 'number') {\n        if (dir > 0) {\n            i = idx >= 0 ? idx : Math.max(idx + length, i);\n        } else {\n            length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;\n        }\n      } else if (sortedIndex && idx && length) {\n        idx = sortedIndex(array, item);\n        return array[idx] === item ? idx : -1;\n      }\n      if (item !== item) {\n        idx = predicateFind(slice.call(array, i, length), _.isNaN);\n        return idx >= 0 ? idx + i : -1;\n      }\n      for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {\n        if (array[idx] === item) return idx;\n      }\n      return -1;\n    };\n  }\n\n  // Return the position of the first occurrence of an item in an array,\n  // or -1 if the item is not included in the array.\n  // If the array is large and already in sort order, pass `true`\n  // for **isSorted** to use binary search.\n  _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);\n  _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);\n\n  // Generate an integer Array containing an arithmetic progression. A port of\n  // the native Python `range()` function. See\n  // [the Python documentation](http://docs.python.org/library/functions.html#range).\n  _.range = function(start, stop, step) {\n    if (stop == null) {\n      stop = start || 0;\n      start = 0;\n    }\n    step = step || 1;\n\n    var length = Math.max(Math.ceil((stop - start) / step), 0);\n    var range = Array(length);\n\n    for (var idx = 0; idx < length; idx++, start += step) {\n      range[idx] = start;\n    }\n\n    return range;\n  };\n\n  // Function (ahem) Functions\n  // ------------------\n\n  // Determines whether to execute a function as a constructor\n  // or a normal function with the provided arguments\n  var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {\n    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);\n    var self = baseCreate(sourceFunc.prototype);\n    var result = sourceFunc.apply(self, args);\n    if (_.isObject(result)) return result;\n    return self;\n  };\n\n  // Create a function bound to a given object (assigning `this`, and arguments,\n  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if\n  // available.\n  _.bind = function(func, context) {\n    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));\n    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');\n    var args = slice.call(arguments, 2);\n    var bound = function() {\n      return executeBound(func, bound, context, this, args.concat(slice.call(arguments)));\n    };\n    return bound;\n  };\n\n  // Partially apply a function by creating a version that has had some of its\n  // arguments pre-filled, without changing its dynamic `this` context. _ acts\n  // as a placeholder, allowing any combination of arguments to be pre-filled.\n  _.partial = function(func) {\n    var boundArgs = slice.call(arguments, 1);\n    var bound = function() {\n      var position = 0, length = boundArgs.length;\n      var args = Array(length);\n      for (var i = 0; i < length; i++) {\n        args[i] = boundArgs[i] === _ ? arguments[position++] : boundArgs[i];\n      }\n      while (position < arguments.length) args.push(arguments[position++]);\n      return executeBound(func, bound, this, this, args);\n    };\n    return bound;\n  };\n\n  // Bind a number of an object's methods to that object. Remaining arguments\n  // are the method names to be bound. Useful for ensuring that all callbacks\n  // defined on an object belong to it.\n  _.bindAll = function(obj) {\n    var i, length = arguments.length, key;\n    if (length <= 1) throw new Error('bindAll must be passed function names');\n    for (i = 1; i < length; i++) {\n      key = arguments[i];\n      obj[key] = _.bind(obj[key], obj);\n    }\n    return obj;\n  };\n\n  // Memoize an expensive function by storing its results.\n  _.memoize = function(func, hasher) {\n    var memoize = function(key) {\n      var cache = memoize.cache;\n      var address = '' + (hasher ? hasher.apply(this, arguments) : key);\n      if (!_.has(cache, address)) cache[address] = func.apply(this, arguments);\n      return cache[address];\n    };\n    memoize.cache = {};\n    return memoize;\n  };\n\n  // Delays a function for the given number of milliseconds, and then calls\n  // it with the arguments supplied.\n  _.delay = function(func, wait) {\n    var args = slice.call(arguments, 2);\n    return setTimeout(function(){\n      return func.apply(null, args);\n    }, wait);\n  };\n\n  // Defers a function, scheduling it to run after the current call stack has\n  // cleared.\n  _.defer = _.partial(_.delay, _, 1);\n\n  // Returns a function, that, when invoked, will only be triggered at most once\n  // during a given window of time. Normally, the throttled function will run\n  // as much as it can, without ever going more than once per `wait` duration;\n  // but if you'd like to disable the execution on the leading edge, pass\n  // `{leading: false}`. To disable execution on the trailing edge, ditto.\n  _.throttle = function(func, wait, options) {\n    var context, args, result;\n    var timeout = null;\n    var previous = 0;\n    if (!options) options = {};\n    var later = function() {\n      previous = options.leading === false ? 0 : _.now();\n      timeout = null;\n      result = func.apply(context, args);\n      if (!timeout) context = args = null;\n    };\n    return function() {\n      var now = _.now();\n      if (!previous && options.leading === false) previous = now;\n      var remaining = wait - (now - previous);\n      context = this;\n      args = arguments;\n      if (remaining <= 0 || remaining > wait) {\n        if (timeout) {\n          clearTimeout(timeout);\n          timeout = null;\n        }\n        previous = now;\n        result = func.apply(context, args);\n        if (!timeout) context = args = null;\n      } else if (!timeout && options.trailing !== false) {\n        timeout = setTimeout(later, remaining);\n      }\n      return result;\n    };\n  };\n\n  // Returns a function, that, as long as it continues to be invoked, will not\n  // be triggered. The function will be called after it stops being called for\n  // N milliseconds. If `immediate` is passed, trigger the function on the\n  // leading edge, instead of the trailing.\n  _.debounce = function(func, wait, immediate) {\n    var timeout, args, context, timestamp, result;\n\n    var later = function() {\n      var last = _.now() - timestamp;\n\n      if (last < wait && last >= 0) {\n        timeout = setTimeout(later, wait - last);\n      } else {\n        timeout = null;\n        if (!immediate) {\n          result = func.apply(context, args);\n          if (!timeout) context = args = null;\n        }\n      }\n    };\n\n    return function() {\n      context = this;\n      args = arguments;\n      timestamp = _.now();\n      var callNow = immediate && !timeout;\n      if (!timeout) timeout = setTimeout(later, wait);\n      if (callNow) {\n        result = func.apply(context, args);\n        context = args = null;\n      }\n\n      return result;\n    };\n  };\n\n  // Returns the first function passed as an argument to the second,\n  // allowing you to adjust arguments, run code before and after, and\n  // conditionally execute the original function.\n  _.wrap = function(func, wrapper) {\n    return _.partial(wrapper, func);\n  };\n\n  // Returns a negated version of the passed-in predicate.\n  _.negate = function(predicate) {\n    return function() {\n      return !predicate.apply(this, arguments);\n    };\n  };\n\n  // Returns a function that is the composition of a list of functions, each\n  // consuming the return value of the function that follows.\n  _.compose = function() {\n    var args = arguments;\n    var start = args.length - 1;\n    return function() {\n      var i = start;\n      var result = args[start].apply(this, arguments);\n      while (i--) result = args[i].call(this, result);\n      return result;\n    };\n  };\n\n  // Returns a function that will only be executed on and after the Nth call.\n  _.after = function(times, func) {\n    return function() {\n      if (--times < 1) {\n        return func.apply(this, arguments);\n      }\n    };\n  };\n\n  // Returns a function that will only be executed up to (but not including) the Nth call.\n  _.before = function(times, func) {\n    var memo;\n    return function() {\n      if (--times > 0) {\n        memo = func.apply(this, arguments);\n      }\n      if (times <= 1) func = null;\n      return memo;\n    };\n  };\n\n  // Returns a function that will be executed at most one time, no matter how\n  // often you call it. Useful for lazy initialization.\n  _.once = _.partial(_.before, 2);\n\n  // Object Functions\n  // ----------------\n\n  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.\n  var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');\n  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',\n                      'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];\n\n  function collectNonEnumProps(obj, keys) {\n    var nonEnumIdx = nonEnumerableProps.length;\n    var constructor = obj.constructor;\n    var proto = (_.isFunction(constructor) && constructor.prototype) || ObjProto;\n\n    // Constructor is a special case.\n    var prop = 'constructor';\n    if (_.has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);\n\n    while (nonEnumIdx--) {\n      prop = nonEnumerableProps[nonEnumIdx];\n      if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {\n        keys.push(prop);\n      }\n    }\n  }\n\n  // Retrieve the names of an object's own properties.\n  // Delegates to **ECMAScript 5**'s native `Object.keys`\n  _.keys = function(obj) {\n    if (!_.isObject(obj)) return [];\n    if (nativeKeys) return nativeKeys(obj);\n    var keys = [];\n    for (var key in obj) if (_.has(obj, key)) keys.push(key);\n    // Ahem, IE < 9.\n    if (hasEnumBug) collectNonEnumProps(obj, keys);\n    return keys;\n  };\n\n  // Retrieve all the property names of an object.\n  _.allKeys = function(obj) {\n    if (!_.isObject(obj)) return [];\n    var keys = [];\n    for (var key in obj) keys.push(key);\n    // Ahem, IE < 9.\n    if (hasEnumBug) collectNonEnumProps(obj, keys);\n    return keys;\n  };\n\n  // Retrieve the values of an object's properties.\n  _.values = function(obj) {\n    var keys = _.keys(obj);\n    var length = keys.length;\n    var values = Array(length);\n    for (var i = 0; i < length; i++) {\n      values[i] = obj[keys[i]];\n    }\n    return values;\n  };\n\n  // Returns the results of applying the iteratee to each element of the object\n  // In contrast to _.map it returns an object\n  _.mapObject = function(obj, iteratee, context) {\n    iteratee = cb(iteratee, context);\n    var keys =  _.keys(obj),\n          length = keys.length,\n          results = {},\n          currentKey;\n      for (var index = 0; index < length; index++) {\n        currentKey = keys[index];\n        results[currentKey] = iteratee(obj[currentKey], currentKey, obj);\n      }\n      return results;\n  };\n\n  // Convert an object into a list of `[key, value]` pairs.\n  _.pairs = function(obj) {\n    var keys = _.keys(obj);\n    var length = keys.length;\n    var pairs = Array(length);\n    for (var i = 0; i < length; i++) {\n      pairs[i] = [keys[i], obj[keys[i]]];\n    }\n    return pairs;\n  };\n\n  // Invert the keys and values of an object. The values must be serializable.\n  _.invert = function(obj) {\n    var result = {};\n    var keys = _.keys(obj);\n    for (var i = 0, length = keys.length; i < length; i++) {\n      result[obj[keys[i]]] = keys[i];\n    }\n    return result;\n  };\n\n  // Return a sorted list of the function names available on the object.\n  // Aliased as `methods`\n  _.functions = _.methods = function(obj) {\n    var names = [];\n    for (var key in obj) {\n      if (_.isFunction(obj[key])) names.push(key);\n    }\n    return names.sort();\n  };\n\n  // Extend a given object with all the properties in passed-in object(s).\n  _.extend = createAssigner(_.allKeys);\n\n  // Assigns a given object with all the own properties in the passed-in object(s)\n  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)\n  _.extendOwn = _.assign = createAssigner(_.keys);\n\n  // Returns the first key on an object that passes a predicate test\n  _.findKey = function(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var keys = _.keys(obj), key;\n    for (var i = 0, length = keys.length; i < length; i++) {\n      key = keys[i];\n      if (predicate(obj[key], key, obj)) return key;\n    }\n  };\n\n  // Return a copy of the object only containing the whitelisted properties.\n  _.pick = function(object, oiteratee, context) {\n    var result = {}, obj = object, iteratee, keys;\n    if (obj == null) return result;\n    if (_.isFunction(oiteratee)) {\n      keys = _.allKeys(obj);\n      iteratee = optimizeCb(oiteratee, context);\n    } else {\n      keys = flatten(arguments, false, false, 1);\n      iteratee = function(value, key, obj) { return key in obj; };\n      obj = Object(obj);\n    }\n    for (var i = 0, length = keys.length; i < length; i++) {\n      var key = keys[i];\n      var value = obj[key];\n      if (iteratee(value, key, obj)) result[key] = value;\n    }\n    return result;\n  };\n\n   // Return a copy of the object without the blacklisted properties.\n  _.omit = function(obj, iteratee, context) {\n    if (_.isFunction(iteratee)) {\n      iteratee = _.negate(iteratee);\n    } else {\n      var keys = _.map(flatten(arguments, false, false, 1), String);\n      iteratee = function(value, key) {\n        return !_.contains(keys, key);\n      };\n    }\n    return _.pick(obj, iteratee, context);\n  };\n\n  // Fill in a given object with default properties.\n  _.defaults = createAssigner(_.allKeys, true);\n\n  // Creates an object that inherits from the given prototype object.\n  // If additional properties are provided then they will be added to the\n  // created object.\n  _.create = function(prototype, props) {\n    var result = baseCreate(prototype);\n    if (props) _.extendOwn(result, props);\n    return result;\n  };\n\n  // Create a (shallow-cloned) duplicate of an object.\n  _.clone = function(obj) {\n    if (!_.isObject(obj)) return obj;\n    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);\n  };\n\n  // Invokes interceptor with the obj, and then returns obj.\n  // The primary purpose of this method is to \"tap into\" a method chain, in\n  // order to perform operations on intermediate results within the chain.\n  _.tap = function(obj, interceptor) {\n    interceptor(obj);\n    return obj;\n  };\n\n  // Returns whether an object has a given set of `key:value` pairs.\n  _.isMatch = function(object, attrs) {\n    var keys = _.keys(attrs), length = keys.length;\n    if (object == null) return !length;\n    var obj = Object(object);\n    for (var i = 0; i < length; i++) {\n      var key = keys[i];\n      if (attrs[key] !== obj[key] || !(key in obj)) return false;\n    }\n    return true;\n  };\n\n\n  // Internal recursive comparison function for `isEqual`.\n  var eq = function(a, b, aStack, bStack) {\n    // Identical objects are equal. `0 === -0`, but they aren't identical.\n    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).\n    if (a === b) return a !== 0 || 1 / a === 1 / b;\n    // A strict comparison is necessary because `null == undefined`.\n    if (a == null || b == null) return a === b;\n    // Unwrap any wrapped objects.\n    if (a instanceof _) a = a._wrapped;\n    if (b instanceof _) b = b._wrapped;\n    // Compare `[[Class]]` names.\n    var className = toString.call(a);\n    if (className !== toString.call(b)) return false;\n    switch (className) {\n      // Strings, numbers, regular expressions, dates, and booleans are compared by value.\n      case '[object RegExp]':\n      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')\n      case '[object String]':\n        // Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is\n        // equivalent to `new String(\"5\")`.\n        return '' + a === '' + b;\n      case '[object Number]':\n        // `NaN`s are equivalent, but non-reflexive.\n        // Object(NaN) is equivalent to NaN\n        if (+a !== +a) return +b !== +b;\n        // An `egal` comparison is performed for other numeric values.\n        return +a === 0 ? 1 / +a === 1 / b : +a === +b;\n      case '[object Date]':\n      case '[object Boolean]':\n        // Coerce dates and booleans to numeric primitive values. Dates are compared by their\n        // millisecond representations. Note that invalid dates with millisecond representations\n        // of `NaN` are not equivalent.\n        return +a === +b;\n    }\n\n    var areArrays = className === '[object Array]';\n    if (!areArrays) {\n      if (typeof a != 'object' || typeof b != 'object') return false;\n\n      // Objects with different constructors are not equivalent, but `Object`s or `Array`s\n      // from different frames are.\n      var aCtor = a.constructor, bCtor = b.constructor;\n      if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&\n                               _.isFunction(bCtor) && bCtor instanceof bCtor)\n                          && ('constructor' in a && 'constructor' in b)) {\n        return false;\n      }\n    }\n    // Assume equality for cyclic structures. The algorithm for detecting cyclic\n    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.\n\n    // Initializing stack of traversed objects.\n    // It's done here since we only need them for objects and arrays comparison.\n    aStack = aStack || [];\n    bStack = bStack || [];\n    var length = aStack.length;\n    while (length--) {\n      // Linear search. Performance is inversely proportional to the number of\n      // unique nested structures.\n      if (aStack[length] === a) return bStack[length] === b;\n    }\n\n    // Add the first object to the stack of traversed objects.\n    aStack.push(a);\n    bStack.push(b);\n\n    // Recursively compare objects and arrays.\n    if (areArrays) {\n      // Compare array lengths to determine if a deep comparison is necessary.\n      length = a.length;\n      if (length !== b.length) return false;\n      // Deep compare the contents, ignoring non-numeric properties.\n      while (length--) {\n        if (!eq(a[length], b[length], aStack, bStack)) return false;\n      }\n    } else {\n      // Deep compare objects.\n      var keys = _.keys(a), key;\n      length = keys.length;\n      // Ensure that both objects contain the same number of properties before comparing deep equality.\n      if (_.keys(b).length !== length) return false;\n      while (length--) {\n        // Deep compare each member\n        key = keys[length];\n        if (!(_.has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;\n      }\n    }\n    // Remove the first object from the stack of traversed objects.\n    aStack.pop();\n    bStack.pop();\n    return true;\n  };\n\n  // Perform a deep comparison to check if two objects are equal.\n  _.isEqual = function(a, b) {\n    return eq(a, b);\n  };\n\n  // Is a given array, string, or object empty?\n  // An \"empty\" object has no enumerable own-properties.\n  _.isEmpty = function(obj) {\n    if (obj == null) return true;\n    if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;\n    return _.keys(obj).length === 0;\n  };\n\n  // Is a given value a DOM element?\n  _.isElement = function(obj) {\n    return !!(obj && obj.nodeType === 1);\n  };\n\n  // Is a given value an array?\n  // Delegates to ECMA5's native Array.isArray\n  _.isArray = nativeIsArray || function(obj) {\n    return toString.call(obj) === '[object Array]';\n  };\n\n  // Is a given variable an object?\n  _.isObject = function(obj) {\n    var type = typeof obj;\n    return type === 'function' || type === 'object' && !!obj;\n  };\n\n  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError.\n  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error'], function(name) {\n    _['is' + name] = function(obj) {\n      return toString.call(obj) === '[object ' + name + ']';\n    };\n  });\n\n  // Define a fallback version of the method in browsers (ahem, IE < 9), where\n  // there isn't any inspectable \"Arguments\" type.\n  if (!_.isArguments(arguments)) {\n    _.isArguments = function(obj) {\n      return _.has(obj, 'callee');\n    };\n  }\n\n  // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,\n  // IE 11 (#1621), and in Safari 8 (#1929).\n  if (typeof /./ != 'function' && typeof Int8Array != 'object') {\n    _.isFunction = function(obj) {\n      return typeof obj == 'function' || false;\n    };\n  }\n\n  // Is a given object a finite number?\n  _.isFinite = function(obj) {\n    return isFinite(obj) && !isNaN(parseFloat(obj));\n  };\n\n  // Is the given value `NaN`? (NaN is the only number which does not equal itself).\n  _.isNaN = function(obj) {\n    return _.isNumber(obj) && obj !== +obj;\n  };\n\n  // Is a given value a boolean?\n  _.isBoolean = function(obj) {\n    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';\n  };\n\n  // Is a given value equal to null?\n  _.isNull = function(obj) {\n    return obj === null;\n  };\n\n  // Is a given variable undefined?\n  _.isUndefined = function(obj) {\n    return obj === void 0;\n  };\n\n  // Shortcut function for checking if an object has a given property directly\n  // on itself (in other words, not on a prototype).\n  _.has = function(obj, key) {\n    return obj != null && hasOwnProperty.call(obj, key);\n  };\n\n  // Utility Functions\n  // -----------------\n\n  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its\n  // previous owner. Returns a reference to the Underscore object.\n  _.noConflict = function() {\n    root._ = previousUnderscore;\n    return this;\n  };\n\n  // Keep the identity function around for default iteratees.\n  _.identity = function(value) {\n    return value;\n  };\n\n  // Predicate-generating functions. Often useful outside of Underscore.\n  _.constant = function(value) {\n    return function() {\n      return value;\n    };\n  };\n\n  _.noop = function(){};\n\n  _.property = property;\n\n  // Generates a function for a given object that returns a given property.\n  _.propertyOf = function(obj) {\n    return obj == null ? function(){} : function(key) {\n      return obj[key];\n    };\n  };\n\n  // Returns a predicate for checking whether an object has a given set of\n  // `key:value` pairs.\n  _.matcher = _.matches = function(attrs) {\n    attrs = _.extendOwn({}, attrs);\n    return function(obj) {\n      return _.isMatch(obj, attrs);\n    };\n  };\n\n  // Run a function **n** times.\n  _.times = function(n, iteratee, context) {\n    var accum = Array(Math.max(0, n));\n    iteratee = optimizeCb(iteratee, context, 1);\n    for (var i = 0; i < n; i++) accum[i] = iteratee(i);\n    return accum;\n  };\n\n  // Return a random integer between min and max (inclusive).\n  _.random = function(min, max) {\n    if (max == null) {\n      max = min;\n      min = 0;\n    }\n    return min + Math.floor(Math.random() * (max - min + 1));\n  };\n\n  // A (possibly faster) way to get the current timestamp as an integer.\n  _.now = Date.now || function() {\n    return new Date().getTime();\n  };\n\n   // List of HTML entities for escaping.\n  var escapeMap = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#x27;',\n    '`': '&#x60;'\n  };\n  var unescapeMap = _.invert(escapeMap);\n\n  // Functions for escaping and unescaping strings to/from HTML interpolation.\n  var createEscaper = function(map) {\n    var escaper = function(match) {\n      return map[match];\n    };\n    // Regexes for identifying a key that needs to be escaped\n    var source = '(?:' + _.keys(map).join('|') + ')';\n    var testRegexp = RegExp(source);\n    var replaceRegexp = RegExp(source, 'g');\n    return function(string) {\n      string = string == null ? '' : '' + string;\n      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;\n    };\n  };\n  _.escape = createEscaper(escapeMap);\n  _.unescape = createEscaper(unescapeMap);\n\n  // If the value of the named `property` is a function then invoke it with the\n  // `object` as context; otherwise, return it.\n  _.result = function(object, property, fallback) {\n    var value = object == null ? void 0 : object[property];\n    if (value === void 0) {\n      value = fallback;\n    }\n    return _.isFunction(value) ? value.call(object) : value;\n  };\n\n  // Generate a unique integer id (unique within the entire client session).\n  // Useful for temporary DOM ids.\n  var idCounter = 0;\n  _.uniqueId = function(prefix) {\n    var id = ++idCounter + '';\n    return prefix ? prefix + id : id;\n  };\n\n  // By default, Underscore uses ERB-style template delimiters, change the\n  // following template settings to use alternative delimiters.\n  _.templateSettings = {\n    evaluate    : /<%([\\s\\S]+?)%>/g,\n    interpolate : /<%=([\\s\\S]+?)%>/g,\n    escape      : /<%-([\\s\\S]+?)%>/g\n  };\n\n  // When customizing `templateSettings`, if you don't want to define an\n  // interpolation, evaluation or escaping regex, we need one that is\n  // guaranteed not to match.\n  var noMatch = /(.)^/;\n\n  // Certain characters need to be escaped so that they can be put into a\n  // string literal.\n  var escapes = {\n    \"'\":      \"'\",\n    '\\\\':     '\\\\',\n    '\\r':     'r',\n    '\\n':     'n',\n    '\\u2028': 'u2028',\n    '\\u2029': 'u2029'\n  };\n\n  var escaper = /\\\\|'|\\r|\\n|\\u2028|\\u2029/g;\n\n  var escapeChar = function(match) {\n    return '\\\\' + escapes[match];\n  };\n\n  // JavaScript micro-templating, similar to John Resig's implementation.\n  // Underscore templating handles arbitrary delimiters, preserves whitespace,\n  // and correctly escapes quotes within interpolated code.\n  // NB: `oldSettings` only exists for backwards compatibility.\n  _.template = function(text, settings, oldSettings) {\n    if (!settings && oldSettings) settings = oldSettings;\n    settings = _.defaults({}, settings, _.templateSettings);\n\n    // Combine delimiters into one regular expression via alternation.\n    var matcher = RegExp([\n      (settings.escape || noMatch).source,\n      (settings.interpolate || noMatch).source,\n      (settings.evaluate || noMatch).source\n    ].join('|') + '|$', 'g');\n\n    // Compile the template source, escaping string literals appropriately.\n    var index = 0;\n    var source = \"__p+='\";\n    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {\n      source += text.slice(index, offset).replace(escaper, escapeChar);\n      index = offset + match.length;\n\n      if (escape) {\n        source += \"'+\\n((__t=(\" + escape + \"))==null?'':_.escape(__t))+\\n'\";\n      } else if (interpolate) {\n        source += \"'+\\n((__t=(\" + interpolate + \"))==null?'':__t)+\\n'\";\n      } else if (evaluate) {\n        source += \"';\\n\" + evaluate + \"\\n__p+='\";\n      }\n\n      // Adobe VMs need the match returned to produce the correct offest.\n      return match;\n    });\n    source += \"';\\n\";\n\n    // If a variable is not specified, place data values in local scope.\n    if (!settings.variable) source = 'with(obj||{}){\\n' + source + '}\\n';\n\n    source = \"var __t,__p='',__j=Array.prototype.join,\" +\n      \"print=function(){__p+=__j.call(arguments,'');};\\n\" +\n      source + 'return __p;\\n';\n\n    try {\n      var render = new Function(settings.variable || 'obj', '_', source);\n    } catch (e) {\n      e.source = source;\n      throw e;\n    }\n\n    var template = function(data) {\n      return render.call(this, data, _);\n    };\n\n    // Provide the compiled source as a convenience for precompilation.\n    var argument = settings.variable || 'obj';\n    template.source = 'function(' + argument + '){\\n' + source + '}';\n\n    return template;\n  };\n\n  // Add a \"chain\" function. Start chaining a wrapped Underscore object.\n  _.chain = function(obj) {\n    var instance = _(obj);\n    instance._chain = true;\n    return instance;\n  };\n\n  // OOP\n  // ---------------\n  // If Underscore is called as a function, it returns a wrapped object that\n  // can be used OO-style. This wrapper holds altered versions of all the\n  // underscore functions. Wrapped objects may be chained.\n\n  // Helper function to continue chaining intermediate results.\n  var result = function(instance, obj) {\n    return instance._chain ? _(obj).chain() : obj;\n  };\n\n  // Add your own custom functions to the Underscore object.\n  _.mixin = function(obj) {\n    _.each(_.functions(obj), function(name) {\n      var func = _[name] = obj[name];\n      _.prototype[name] = function() {\n        var args = [this._wrapped];\n        push.apply(args, arguments);\n        return result(this, func.apply(_, args));\n      };\n    });\n  };\n\n  // Add all of the Underscore functions to the wrapper object.\n  _.mixin(_);\n\n  // Add all mutator Array functions to the wrapper.\n  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {\n    var method = ArrayProto[name];\n    _.prototype[name] = function() {\n      var obj = this._wrapped;\n      method.apply(obj, arguments);\n      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];\n      return result(this, obj);\n    };\n  });\n\n  // Add all accessor Array functions to the wrapper.\n  _.each(['concat', 'join', 'slice'], function(name) {\n    var method = ArrayProto[name];\n    _.prototype[name] = function() {\n      return result(this, method.apply(this._wrapped, arguments));\n    };\n  });\n\n  // Extracts the result from a wrapped and chained object.\n  _.prototype.value = function() {\n    return this._wrapped;\n  };\n\n  // Provide unwrapping proxy for some methods used in engine operations\n  // such as arithmetic and JSON stringification.\n  _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;\n\n  _.prototype.toString = function() {\n    return '' + this._wrapped;\n  };\n\n  // AMD registration happens at the end for compatibility with AMD loaders\n  // that may not enforce next-turn semantics on modules. Even though general\n  // practice for AMD registration is to be anonymous, underscore registers\n  // as a named module because, like jQuery, it is a base library that is\n  // popular enough to be bundled in a third party lib, but not be part of\n  // an AMD load request. Those cases could generate an error when an\n  // anonymous define() is called outside of a loader request.\n  if (typeof define === 'function' && define.amd) {\n    define('underscore', [], function() {\n      return _;\n    });\n  }\n}.call(this));\n","exports.name = \"react-dom\";\nexports.main = \"index.js\";\n","'use strict';\n\nmodule.exports = require('react/lib/ReactDOM');\n"]}}]