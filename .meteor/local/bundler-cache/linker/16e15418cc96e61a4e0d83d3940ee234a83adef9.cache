[{"type":"js","data":"(function () {\n\n/* Package-scope variables */\nvar Date, parseInt, originalStringReplace;\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/es5-shim/import_globals.js                                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar global = this;                                                                                                     // 1\n                                                                                                                       // 2\n// Because the es5-{shim,sham}.js code assigns to Date and parseInt,                                                   // 3\n// Meteor treats them as package variables, and so declares them as                                                    // 4\n// variables in package scope, which causes some references to Date and                                                // 5\n// parseInt in the shim/sham code to refer to those undefined package                                                  // 6\n// variables. The simplest solution seems to be to initialize the package                                              // 7\n// variables to their appropriate global values.                                                                       // 8\nDate = global.Date;                                                                                                    // 9\nparseInt = global.parseInt;                                                                                            // 10\n                                                                                                                       // 11\n// Save the original String#replace method, because es5-shim's                                                         // 12\n// reimplementation of it causes problems in markdown/showdown.js.                                                     // 13\n// This original method will be restored in export_globals.js.                                                         // 14\noriginalStringReplace = String.prototype.replace;                                                                      // 15\n                                                                                                                       // 16\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/es5-shim/.npm/package/node_modules/es5-shim/es5-shim.js                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/*!                                                                                                                    // 1\n * https://github.com/es-shims/es5-shim                                                                                // 2\n * @license es5-shim Copyright 2009-2015 by contributors, MIT License                                                  // 3\n * see https://github.com/es-shims/es5-shim/blob/master/LICENSE                                                        // 4\n */                                                                                                                    // 5\n                                                                                                                       // 6\n// vim: ts=4 sts=4 sw=4 expandtab                                                                                      // 7\n                                                                                                                       // 8\n// Add semicolon to prevent IIFE from being passed as argument to concatenated code.                                   // 9\n;                                                                                                                      // 10\n                                                                                                                       // 11\n// UMD (Universal Module Definition)                                                                                   // 12\n// see https://github.com/umdjs/umd/blob/master/returnExports.js                                                       // 13\n(function (root, factory) {                                                                                            // 14\n    'use strict';                                                                                                      // 15\n                                                                                                                       // 16\n    /* global define, exports, module */                                                                               // 17\n    if (typeof define === 'function' && define.amd) {                                                                  // 18\n        // AMD. Register as an anonymous module.                                                                       // 19\n        define(factory);                                                                                               // 20\n    } else if (typeof exports === 'object') {                                                                          // 21\n        // Node. Does not work with strict CommonJS, but                                                               // 22\n        // only CommonJS-like enviroments that support module.exports,                                                 // 23\n        // like Node.                                                                                                  // 24\n        module.exports = factory();                                                                                    // 25\n    } else {                                                                                                           // 26\n        // Browser globals (root is window)                                                                            // 27\n        root.returnExports = factory();                                                                                // 28\n    }                                                                                                                  // 29\n}(this, function () {                                                                                                  // 30\n                                                                                                                       // 31\n/**                                                                                                                    // 32\n * Brings an environment as close to ECMAScript 5 compliance                                                           // 33\n * as is possible with the facilities of erstwhile engines.                                                            // 34\n *                                                                                                                     // 35\n * Annotated ES5: http://es5.github.com/ (specific links below)                                                        // 36\n * ES5 Spec: http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf                                 // 37\n * Required reading: http://javascriptweblog.wordpress.com/2011/12/05/extending-javascript-natives/                    // 38\n */                                                                                                                    // 39\n                                                                                                                       // 40\n// Shortcut to an often accessed properties, in order to avoid multiple                                                // 41\n// dereference that costs universally. This also holds a reference to known-good                                       // 42\n// functions.                                                                                                          // 43\nvar $Array = Array;                                                                                                    // 44\nvar ArrayPrototype = $Array.prototype;                                                                                 // 45\nvar $Object = Object;                                                                                                  // 46\nvar ObjectPrototype = $Object.prototype;                                                                               // 47\nvar FunctionPrototype = Function.prototype;                                                                            // 48\nvar $String = String;                                                                                                  // 49\nvar StringPrototype = $String.prototype;                                                                               // 50\nvar $Number = Number;                                                                                                  // 51\nvar NumberPrototype = $Number.prototype;                                                                               // 52\nvar array_slice = ArrayPrototype.slice;                                                                                // 53\nvar array_splice = ArrayPrototype.splice;                                                                              // 54\nvar array_push = ArrayPrototype.push;                                                                                  // 55\nvar array_unshift = ArrayPrototype.unshift;                                                                            // 56\nvar array_concat = ArrayPrototype.concat;                                                                              // 57\nvar call = FunctionPrototype.call;                                                                                     // 58\nvar max = Math.max;                                                                                                    // 59\nvar min = Math.min;                                                                                                    // 60\n                                                                                                                       // 61\n// Having a toString local variable name breaks in Opera so use to_string.                                             // 62\nvar to_string = ObjectPrototype.toString;                                                                              // 63\n                                                                                                                       // 64\nvar hasToStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';                           // 65\nvar isCallable; /* inlined from https://npmjs.com/is-callable */ var fnToStr = Function.prototype.toString, tryFunctionObject = function tryFunctionObject(value) { try { fnToStr.call(value); return true; } catch (e) { return false; } }, fnClass = '[object Function]', genClass = '[object GeneratorFunction]'; isCallable = function isCallable(value) { if (typeof value !== 'function') { return false; } if (hasToStringTag) { return tryFunctionObject(value); } var strClass = to_string.call(value); return strClass === fnClass || strClass === genClass; };\nvar isRegex; /* inlined from https://npmjs.com/is-regex */ var regexExec = RegExp.prototype.exec, tryRegexExec = function tryRegexExec(value) { try { regexExec.call(value); return true; } catch (e) { return false; } }, regexClass = '[object RegExp]'; isRegex = function isRegex(value) { if (typeof value !== 'object') { return false; } return hasToStringTag ? tryRegexExec(value) : to_string.call(value) === regexClass; };\nvar isString; /* inlined from https://npmjs.com/is-string */ var strValue = String.prototype.valueOf, tryStringObject = function tryStringObject(value) { try { strValue.call(value); return true; } catch (e) { return false; } }, stringClass = '[object String]'; isString = function isString(value) { if (typeof value === 'string') { return true; } if (typeof value !== 'object') { return false; } return hasToStringTag ? tryStringObject(value) : to_string.call(value) === stringClass; };\n                                                                                                                       // 69\n/* inlined from http://npmjs.com/define-properties */                                                                  // 70\nvar defineProperties = (function (has) {                                                                               // 71\n  var supportsDescriptors = $Object.defineProperty && (function () {                                                   // 72\n      try {                                                                                                            // 73\n          var obj = {};                                                                                                // 74\n          $Object.defineProperty(obj, 'x', { enumerable: false, value: obj });                                         // 75\n          for (var _ in obj) { return false; }                                                                         // 76\n          return obj.x === obj;                                                                                        // 77\n      } catch (e) { /* this is ES3 */                                                                                  // 78\n          return false;                                                                                                // 79\n      }                                                                                                                // 80\n  }());                                                                                                                // 81\n                                                                                                                       // 82\n  // Define configurable, writable and non-enumerable props                                                            // 83\n  // if they don't exist.                                                                                              // 84\n  var defineProperty;                                                                                                  // 85\n  if (supportsDescriptors) {                                                                                           // 86\n      defineProperty = function (object, name, method, forceAssign) {                                                  // 87\n          if (!forceAssign && (name in object)) { return; }                                                            // 88\n          $Object.defineProperty(object, name, {                                                                       // 89\n              configurable: true,                                                                                      // 90\n              enumerable: false,                                                                                       // 91\n              writable: true,                                                                                          // 92\n              value: method                                                                                            // 93\n          });                                                                                                          // 94\n      };                                                                                                               // 95\n  } else {                                                                                                             // 96\n      defineProperty = function (object, name, method, forceAssign) {                                                  // 97\n          if (!forceAssign && (name in object)) { return; }                                                            // 98\n          object[name] = method;                                                                                       // 99\n      };                                                                                                               // 100\n  }                                                                                                                    // 101\n  return function defineProperties(object, map, forceAssign) {                                                         // 102\n      for (var name in map) {                                                                                          // 103\n          if (has.call(map, name)) {                                                                                   // 104\n            defineProperty(object, name, map[name], forceAssign);                                                      // 105\n          }                                                                                                            // 106\n      }                                                                                                                // 107\n  };                                                                                                                   // 108\n}(ObjectPrototype.hasOwnProperty));                                                                                    // 109\n                                                                                                                       // 110\n//                                                                                                                     // 111\n// Util                                                                                                                // 112\n// ======                                                                                                              // 113\n//                                                                                                                     // 114\n                                                                                                                       // 115\n/* replaceable with https://npmjs.com/package/es-abstract /helpers/isPrimitive */                                      // 116\nvar isPrimitive = function isPrimitive(input) {                                                                        // 117\n    var type = typeof input;                                                                                           // 118\n    return input === null || (type !== 'object' && type !== 'function');                                               // 119\n};                                                                                                                     // 120\n                                                                                                                       // 121\nvar isActualNaN = $Number.isNaN || function (x) { return x !== x; };                                                   // 122\n                                                                                                                       // 123\nvar ES = {                                                                                                             // 124\n    // ES5 9.4                                                                                                         // 125\n    // http://es5.github.com/#x9.4                                                                                     // 126\n    // http://jsperf.com/to-integer                                                                                    // 127\n    /* replaceable with https://npmjs.com/package/es-abstract ES5.ToInteger */                                         // 128\n    ToInteger: function ToInteger(num) {                                                                               // 129\n        var n = +num;                                                                                                  // 130\n        if (isActualNaN(n)) {                                                                                          // 131\n            n = 0;                                                                                                     // 132\n        } else if (n !== 0 && n !== (1 / 0) && n !== -(1 / 0)) {                                                       // 133\n            n = (n > 0 || -1) * Math.floor(Math.abs(n));                                                               // 134\n        }                                                                                                              // 135\n        return n;                                                                                                      // 136\n    },                                                                                                                 // 137\n                                                                                                                       // 138\n    /* replaceable with https://npmjs.com/package/es-abstract ES5.ToPrimitive */                                       // 139\n    ToPrimitive: function ToPrimitive(input) {                                                                         // 140\n        var val, valueOf, toStr;                                                                                       // 141\n        if (isPrimitive(input)) {                                                                                      // 142\n            return input;                                                                                              // 143\n        }                                                                                                              // 144\n        valueOf = input.valueOf;                                                                                       // 145\n        if (isCallable(valueOf)) {                                                                                     // 146\n            val = valueOf.call(input);                                                                                 // 147\n            if (isPrimitive(val)) {                                                                                    // 148\n                return val;                                                                                            // 149\n            }                                                                                                          // 150\n        }                                                                                                              // 151\n        toStr = input.toString;                                                                                        // 152\n        if (isCallable(toStr)) {                                                                                       // 153\n            val = toStr.call(input);                                                                                   // 154\n            if (isPrimitive(val)) {                                                                                    // 155\n                return val;                                                                                            // 156\n            }                                                                                                          // 157\n        }                                                                                                              // 158\n        throw new TypeError();                                                                                         // 159\n    },                                                                                                                 // 160\n                                                                                                                       // 161\n    // ES5 9.9                                                                                                         // 162\n    // http://es5.github.com/#x9.9                                                                                     // 163\n    /* replaceable with https://npmjs.com/package/es-abstract ES5.ToObject */                                          // 164\n    ToObject: function (o) {                                                                                           // 165\n        /* jshint eqnull: true */                                                                                      // 166\n        if (o == null) { // this matches both null and undefined                                                       // 167\n            throw new TypeError(\"can't convert \" + o + ' to object');                                                  // 168\n        }                                                                                                              // 169\n        return $Object(o);                                                                                             // 170\n    },                                                                                                                 // 171\n                                                                                                                       // 172\n    /* replaceable with https://npmjs.com/package/es-abstract ES5.ToUint32 */                                          // 173\n    ToUint32: function ToUint32(x) {                                                                                   // 174\n        return x >>> 0;                                                                                                // 175\n    }                                                                                                                  // 176\n};                                                                                                                     // 177\n                                                                                                                       // 178\n//                                                                                                                     // 179\n// Function                                                                                                            // 180\n// ========                                                                                                            // 181\n//                                                                                                                     // 182\n                                                                                                                       // 183\n// ES-5 15.3.4.5                                                                                                       // 184\n// http://es5.github.com/#x15.3.4.5                                                                                    // 185\n                                                                                                                       // 186\nvar Empty = function Empty() {};                                                                                       // 187\n                                                                                                                       // 188\ndefineProperties(FunctionPrototype, {                                                                                  // 189\n    bind: function bind(that) { // .length is 1                                                                        // 190\n        // 1. Let Target be the this value.                                                                            // 191\n        var target = this;                                                                                             // 192\n        // 2. If IsCallable(Target) is false, throw a TypeError exception.                                             // 193\n        if (!isCallable(target)) {                                                                                     // 194\n            throw new TypeError('Function.prototype.bind called on incompatible ' + target);                           // 195\n        }                                                                                                              // 196\n        // 3. Let A be a new (possibly empty) internal list of all of the                                              // 197\n        //   argument values provided after thisArg (arg1, arg2 etc), in order.                                        // 198\n        // XXX slicedArgs will stand in for \"A\" if used                                                                // 199\n        var args = array_slice.call(arguments, 1); // for normal call                                                  // 200\n        // 4. Let F be a new native ECMAScript object.                                                                 // 201\n        // 11. Set the [[Prototype]] internal property of F to the standard                                            // 202\n        //   built-in Function prototype object as specified in 15.3.3.1.                                              // 203\n        // 12. Set the [[Call]] internal property of F as described in                                                 // 204\n        //   15.3.4.5.1.                                                                                               // 205\n        // 13. Set the [[Construct]] internal property of F as described in                                            // 206\n        //   15.3.4.5.2.                                                                                               // 207\n        // 14. Set the [[HasInstance]] internal property of F as described in                                          // 208\n        //   15.3.4.5.3.                                                                                               // 209\n        var bound;                                                                                                     // 210\n        var binder = function () {                                                                                     // 211\n                                                                                                                       // 212\n            if (this instanceof bound) {                                                                               // 213\n                // 15.3.4.5.2 [[Construct]]                                                                            // 214\n                // When the [[Construct]] internal method of a function object,                                        // 215\n                // F that was created using the bind function is called with a                                         // 216\n                // list of arguments ExtraArgs, the following steps are taken:                                         // 217\n                // 1. Let target be the value of F's [[TargetFunction]]                                                // 218\n                //   internal property.                                                                                // 219\n                // 2. If target has no [[Construct]] internal method, a                                                // 220\n                //   TypeError exception is thrown.                                                                    // 221\n                // 3. Let boundArgs be the value of F's [[BoundArgs]] internal                                         // 222\n                //   property.                                                                                         // 223\n                // 4. Let args be a new list containing the same values as the                                         // 224\n                //   list boundArgs in the same order followed by the same                                             // 225\n                //   values as the list ExtraArgs in the same order.                                                   // 226\n                // 5. Return the result of calling the [[Construct]] internal                                          // 227\n                //   method of target providing args as the arguments.                                                 // 228\n                                                                                                                       // 229\n                var result = target.apply(                                                                             // 230\n                    this,                                                                                              // 231\n                    array_concat.call(args, array_slice.call(arguments))                                               // 232\n                );                                                                                                     // 233\n                if ($Object(result) === result) {                                                                      // 234\n                    return result;                                                                                     // 235\n                }                                                                                                      // 236\n                return this;                                                                                           // 237\n                                                                                                                       // 238\n            } else {                                                                                                   // 239\n                // 15.3.4.5.1 [[Call]]                                                                                 // 240\n                // When the [[Call]] internal method of a function object, F,                                          // 241\n                // which was created using the bind function is called with a                                          // 242\n                // this value and a list of arguments ExtraArgs, the following                                         // 243\n                // steps are taken:                                                                                    // 244\n                // 1. Let boundArgs be the value of F's [[BoundArgs]] internal                                         // 245\n                //   property.                                                                                         // 246\n                // 2. Let boundThis be the value of F's [[BoundThis]] internal                                         // 247\n                //   property.                                                                                         // 248\n                // 3. Let target be the value of F's [[TargetFunction]] internal                                       // 249\n                //   property.                                                                                         // 250\n                // 4. Let args be a new list containing the same values as the                                         // 251\n                //   list boundArgs in the same order followed by the same                                             // 252\n                //   values as the list ExtraArgs in the same order.                                                   // 253\n                // 5. Return the result of calling the [[Call]] internal method                                        // 254\n                //   of target providing boundThis as the this value and                                               // 255\n                //   providing args as the arguments.                                                                  // 256\n                                                                                                                       // 257\n                // equiv: target.call(this, ...boundArgs, ...args)                                                     // 258\n                return target.apply(                                                                                   // 259\n                    that,                                                                                              // 260\n                    array_concat.call(args, array_slice.call(arguments))                                               // 261\n                );                                                                                                     // 262\n                                                                                                                       // 263\n            }                                                                                                          // 264\n                                                                                                                       // 265\n        };                                                                                                             // 266\n                                                                                                                       // 267\n        // 15. If the [[Class]] internal property of Target is \"Function\", then                                        // 268\n        //     a. Let L be the length property of Target minus the length of A.                                        // 269\n        //     b. Set the length own property of F to either 0 or L, whichever is                                      // 270\n        //       larger.                                                                                               // 271\n        // 16. Else set the length own property of F to 0.                                                             // 272\n                                                                                                                       // 273\n        var boundLength = max(0, target.length - args.length);                                                         // 274\n                                                                                                                       // 275\n        // 17. Set the attributes of the length own property of F to the values                                        // 276\n        //   specified in 15.3.5.1.                                                                                    // 277\n        var boundArgs = [];                                                                                            // 278\n        for (var i = 0; i < boundLength; i++) {                                                                        // 279\n            array_push.call(boundArgs, '$' + i);                                                                       // 280\n        }                                                                                                              // 281\n                                                                                                                       // 282\n        // XXX Build a dynamic function with desired amount of arguments is the only                                   // 283\n        // way to set the length property of a function.                                                               // 284\n        // In environments where Content Security Policies enabled (Chrome extensions,                                 // 285\n        // for ex.) all use of eval or Function costructor throws an exception.                                        // 286\n        // However in all of these environments Function.prototype.bind exists                                         // 287\n        // and so this code will never be executed.                                                                    // 288\n        bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this, arguments); }')(binder);\n                                                                                                                       // 290\n        if (target.prototype) {                                                                                        // 291\n            Empty.prototype = target.prototype;                                                                        // 292\n            bound.prototype = new Empty();                                                                             // 293\n            // Clean up dangling references.                                                                           // 294\n            Empty.prototype = null;                                                                                    // 295\n        }                                                                                                              // 296\n                                                                                                                       // 297\n        // TODO                                                                                                        // 298\n        // 18. Set the [[Extensible]] internal property of F to true.                                                  // 299\n                                                                                                                       // 300\n        // TODO                                                                                                        // 301\n        // 19. Let thrower be the [[ThrowTypeError]] function Object (13.2.3).                                         // 302\n        // 20. Call the [[DefineOwnProperty]] internal method of F with                                                // 303\n        //   arguments \"caller\", PropertyDescriptor {[[Get]]: thrower, [[Set]]:                                        // 304\n        //   thrower, [[Enumerable]]: false, [[Configurable]]: false}, and                                             // 305\n        //   false.                                                                                                    // 306\n        // 21. Call the [[DefineOwnProperty]] internal method of F with                                                // 307\n        //   arguments \"arguments\", PropertyDescriptor {[[Get]]: thrower,                                              // 308\n        //   [[Set]]: thrower, [[Enumerable]]: false, [[Configurable]]: false},                                        // 309\n        //   and false.                                                                                                // 310\n                                                                                                                       // 311\n        // TODO                                                                                                        // 312\n        // NOTE Function objects created using Function.prototype.bind do not                                          // 313\n        // have a prototype property or the [[Code]], [[FormalParameters]], and                                        // 314\n        // [[Scope]] internal properties.                                                                              // 315\n        // XXX can't delete prototype in pure-js.                                                                      // 316\n                                                                                                                       // 317\n        // 22. Return F.                                                                                               // 318\n        return bound;                                                                                                  // 319\n    }                                                                                                                  // 320\n});                                                                                                                    // 321\n                                                                                                                       // 322\n// _Please note: Shortcuts are defined after `Function.prototype.bind` as we                                           // 323\n// us it in defining shortcuts.                                                                                        // 324\nvar owns = call.bind(ObjectPrototype.hasOwnProperty);                                                                  // 325\nvar toStr = call.bind(ObjectPrototype.toString);                                                                       // 326\nvar strSlice = call.bind(StringPrototype.slice);                                                                       // 327\nvar strSplit = call.bind(StringPrototype.split);                                                                       // 328\nvar strIndexOf = call.bind(StringPrototype.indexOf);                                                                   // 329\nvar push = call.bind(array_push);                                                                                      // 330\n                                                                                                                       // 331\n//                                                                                                                     // 332\n// Array                                                                                                               // 333\n// =====                                                                                                               // 334\n//                                                                                                                     // 335\n                                                                                                                       // 336\nvar isArray = $Array.isArray || function isArray(obj) {                                                                // 337\n    return toStr(obj) === '[object Array]';                                                                            // 338\n};                                                                                                                     // 339\n                                                                                                                       // 340\n// ES5 15.4.4.12                                                                                                       // 341\n// http://es5.github.com/#x15.4.4.13                                                                                   // 342\n// Return len+argCount.                                                                                                // 343\n// [bugfix, ielt8]                                                                                                     // 344\n// IE < 8 bug: [].unshift(0) === undefined but should be \"1\"                                                           // 345\nvar hasUnshiftReturnValueBug = [].unshift(0) !== 1;                                                                    // 346\ndefineProperties(ArrayPrototype, {                                                                                     // 347\n    unshift: function () {                                                                                             // 348\n        array_unshift.apply(this, arguments);                                                                          // 349\n        return this.length;                                                                                            // 350\n    }                                                                                                                  // 351\n}, hasUnshiftReturnValueBug);                                                                                          // 352\n                                                                                                                       // 353\n// ES5 15.4.3.2                                                                                                        // 354\n// http://es5.github.com/#x15.4.3.2                                                                                    // 355\n// https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/isArray                                  // 356\ndefineProperties($Array, { isArray: isArray });                                                                        // 357\n                                                                                                                       // 358\n// The IsCallable() check in the Array functions                                                                       // 359\n// has been replaced with a strict check on the                                                                        // 360\n// internal class of the object to trap cases where                                                                    // 361\n// the provided function was actually a regular                                                                        // 362\n// expression literal, which in V8 and                                                                                 // 363\n// JavaScriptCore is a typeof \"function\".  Only in                                                                     // 364\n// V8 are regular expression literals permitted as                                                                     // 365\n// reduce parameters, so it is desirable in the                                                                        // 366\n// general case for the shim to match the more                                                                         // 367\n// strict and common behavior of rejecting regular                                                                     // 368\n// expressions.                                                                                                        // 369\n                                                                                                                       // 370\n// ES5 15.4.4.18                                                                                                       // 371\n// http://es5.github.com/#x15.4.4.18                                                                                   // 372\n// https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/array/forEach                                  // 373\n                                                                                                                       // 374\n// Check failure of by-index access of string characters (IE < 9)                                                      // 375\n// and failure of `0 in boxedString` (Rhino)                                                                           // 376\nvar boxedString = $Object('a');                                                                                        // 377\nvar splitString = boxedString[0] !== 'a' || !(0 in boxedString);                                                       // 378\n                                                                                                                       // 379\nvar properlyBoxesContext = function properlyBoxed(method) {                                                            // 380\n    // Check node 0.6.21 bug where third parameter is not boxed                                                        // 381\n    var properlyBoxesNonStrict = true;                                                                                 // 382\n    var properlyBoxesStrict = true;                                                                                    // 383\n    if (method) {                                                                                                      // 384\n        method.call('foo', function (_, __, context) {                                                                 // 385\n            if (typeof context !== 'object') { properlyBoxesNonStrict = false; }                                       // 386\n        });                                                                                                            // 387\n                                                                                                                       // 388\n        method.call([1], function () {                                                                                 // 389\n            'use strict';                                                                                              // 390\n                                                                                                                       // 391\n            properlyBoxesStrict = typeof this === 'string';                                                            // 392\n        }, 'x');                                                                                                       // 393\n    }                                                                                                                  // 394\n    return !!method && properlyBoxesNonStrict && properlyBoxesStrict;                                                  // 395\n};                                                                                                                     // 396\n                                                                                                                       // 397\ndefineProperties(ArrayPrototype, {                                                                                     // 398\n    forEach: function forEach(callbackfn/*, thisArg*/) {                                                               // 399\n        var object = ES.ToObject(this);                                                                                // 400\n        var self = splitString && isString(this) ? strSplit(this, '') : object;                                        // 401\n        var i = -1;                                                                                                    // 402\n        var length = ES.ToUint32(self.length);                                                                         // 403\n        var T;                                                                                                         // 404\n        if (arguments.length > 1) {                                                                                    // 405\n          T = arguments[1];                                                                                            // 406\n        }                                                                                                              // 407\n                                                                                                                       // 408\n        // If no callback function or if callback is not a callable function                                           // 409\n        if (!isCallable(callbackfn)) {                                                                                 // 410\n            throw new TypeError('Array.prototype.forEach callback must be a function');                                // 411\n        }                                                                                                              // 412\n                                                                                                                       // 413\n        while (++i < length) {                                                                                         // 414\n            if (i in self) {                                                                                           // 415\n                // Invoke the callback function with call, passing arguments:                                          // 416\n                // context, property value, property key, thisArg object                                               // 417\n                if (typeof T === 'undefined') {                                                                        // 418\n                    callbackfn(self[i], i, object);                                                                    // 419\n                } else {                                                                                               // 420\n                    callbackfn.call(T, self[i], i, object);                                                            // 421\n                }                                                                                                      // 422\n            }                                                                                                          // 423\n        }                                                                                                              // 424\n    }                                                                                                                  // 425\n}, !properlyBoxesContext(ArrayPrototype.forEach));                                                                     // 426\n                                                                                                                       // 427\n// ES5 15.4.4.19                                                                                                       // 428\n// http://es5.github.com/#x15.4.4.19                                                                                   // 429\n// https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/map                                    // 430\ndefineProperties(ArrayPrototype, {                                                                                     // 431\n    map: function map(callbackfn/*, thisArg*/) {                                                                       // 432\n        var object = ES.ToObject(this);                                                                                // 433\n        var self = splitString && isString(this) ? strSplit(this, '') : object;                                        // 434\n        var length = ES.ToUint32(self.length);                                                                         // 435\n        var result = $Array(length);                                                                                   // 436\n        var T;                                                                                                         // 437\n        if (arguments.length > 1) {                                                                                    // 438\n            T = arguments[1];                                                                                          // 439\n        }                                                                                                              // 440\n                                                                                                                       // 441\n        // If no callback function or if callback is not a callable function                                           // 442\n        if (!isCallable(callbackfn)) {                                                                                 // 443\n            throw new TypeError('Array.prototype.map callback must be a function');                                    // 444\n        }                                                                                                              // 445\n                                                                                                                       // 446\n        for (var i = 0; i < length; i++) {                                                                             // 447\n            if (i in self) {                                                                                           // 448\n                if (typeof T === 'undefined') {                                                                        // 449\n                    result[i] = callbackfn(self[i], i, object);                                                        // 450\n                } else {                                                                                               // 451\n                    result[i] = callbackfn.call(T, self[i], i, object);                                                // 452\n                }                                                                                                      // 453\n            }                                                                                                          // 454\n        }                                                                                                              // 455\n        return result;                                                                                                 // 456\n    }                                                                                                                  // 457\n}, !properlyBoxesContext(ArrayPrototype.map));                                                                         // 458\n                                                                                                                       // 459\n// ES5 15.4.4.20                                                                                                       // 460\n// http://es5.github.com/#x15.4.4.20                                                                                   // 461\n// https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/filter                                 // 462\ndefineProperties(ArrayPrototype, {                                                                                     // 463\n    filter: function filter(callbackfn/*, thisArg*/) {                                                                 // 464\n        var object = ES.ToObject(this);                                                                                // 465\n        var self = splitString && isString(this) ? strSplit(this, '') : object;                                        // 466\n        var length = ES.ToUint32(self.length);                                                                         // 467\n        var result = [];                                                                                               // 468\n        var value;                                                                                                     // 469\n        var T;                                                                                                         // 470\n        if (arguments.length > 1) {                                                                                    // 471\n            T = arguments[1];                                                                                          // 472\n        }                                                                                                              // 473\n                                                                                                                       // 474\n        // If no callback function or if callback is not a callable function                                           // 475\n        if (!isCallable(callbackfn)) {                                                                                 // 476\n            throw new TypeError('Array.prototype.filter callback must be a function');                                 // 477\n        }                                                                                                              // 478\n                                                                                                                       // 479\n        for (var i = 0; i < length; i++) {                                                                             // 480\n            if (i in self) {                                                                                           // 481\n                value = self[i];                                                                                       // 482\n                if (typeof T === 'undefined' ? callbackfn(value, i, object) : callbackfn.call(T, value, i, object)) {  // 483\n                    push(result, value);                                                                               // 484\n                }                                                                                                      // 485\n            }                                                                                                          // 486\n        }                                                                                                              // 487\n        return result;                                                                                                 // 488\n    }                                                                                                                  // 489\n}, !properlyBoxesContext(ArrayPrototype.filter));                                                                      // 490\n                                                                                                                       // 491\n// ES5 15.4.4.16                                                                                                       // 492\n// http://es5.github.com/#x15.4.4.16                                                                                   // 493\n// https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/every                                    // 494\ndefineProperties(ArrayPrototype, {                                                                                     // 495\n    every: function every(callbackfn/*, thisArg*/) {                                                                   // 496\n        var object = ES.ToObject(this);                                                                                // 497\n        var self = splitString && isString(this) ? strSplit(this, '') : object;                                        // 498\n        var length = ES.ToUint32(self.length);                                                                         // 499\n        var T;                                                                                                         // 500\n        if (arguments.length > 1) {                                                                                    // 501\n            T = arguments[1];                                                                                          // 502\n        }                                                                                                              // 503\n                                                                                                                       // 504\n        // If no callback function or if callback is not a callable function                                           // 505\n        if (!isCallable(callbackfn)) {                                                                                 // 506\n            throw new TypeError('Array.prototype.every callback must be a function');                                  // 507\n        }                                                                                                              // 508\n                                                                                                                       // 509\n        for (var i = 0; i < length; i++) {                                                                             // 510\n            if (i in self && !(typeof T === 'undefined' ? callbackfn(self[i], i, object) : callbackfn.call(T, self[i], i, object))) {\n                return false;                                                                                          // 512\n            }                                                                                                          // 513\n        }                                                                                                              // 514\n        return true;                                                                                                   // 515\n    }                                                                                                                  // 516\n}, !properlyBoxesContext(ArrayPrototype.every));                                                                       // 517\n                                                                                                                       // 518\n// ES5 15.4.4.17                                                                                                       // 519\n// http://es5.github.com/#x15.4.4.17                                                                                   // 520\n// https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/some                                     // 521\ndefineProperties(ArrayPrototype, {                                                                                     // 522\n    some: function some(callbackfn/*, thisArg */) {                                                                    // 523\n        var object = ES.ToObject(this);                                                                                // 524\n        var self = splitString && isString(this) ? strSplit(this, '') : object;                                        // 525\n        var length = ES.ToUint32(self.length);                                                                         // 526\n        var T;                                                                                                         // 527\n        if (arguments.length > 1) {                                                                                    // 528\n            T = arguments[1];                                                                                          // 529\n        }                                                                                                              // 530\n                                                                                                                       // 531\n        // If no callback function or if callback is not a callable function                                           // 532\n        if (!isCallable(callbackfn)) {                                                                                 // 533\n            throw new TypeError('Array.prototype.some callback must be a function');                                   // 534\n        }                                                                                                              // 535\n                                                                                                                       // 536\n        for (var i = 0; i < length; i++) {                                                                             // 537\n            if (i in self && (typeof T === 'undefined' ? callbackfn(self[i], i, object) : callbackfn.call(T, self[i], i, object))) {\n                return true;                                                                                           // 539\n            }                                                                                                          // 540\n        }                                                                                                              // 541\n        return false;                                                                                                  // 542\n    }                                                                                                                  // 543\n}, !properlyBoxesContext(ArrayPrototype.some));                                                                        // 544\n                                                                                                                       // 545\n// ES5 15.4.4.21                                                                                                       // 546\n// http://es5.github.com/#x15.4.4.21                                                                                   // 547\n// https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/reduce                                 // 548\nvar reduceCoercesToObject = false;                                                                                     // 549\nif (ArrayPrototype.reduce) {                                                                                           // 550\n    reduceCoercesToObject = typeof ArrayPrototype.reduce.call('es5', function (_, __, ___, list) { return list; }) === 'object';\n}                                                                                                                      // 552\ndefineProperties(ArrayPrototype, {                                                                                     // 553\n    reduce: function reduce(callbackfn/*, initialValue*/) {                                                            // 554\n        var object = ES.ToObject(this);                                                                                // 555\n        var self = splitString && isString(this) ? strSplit(this, '') : object;                                        // 556\n        var length = ES.ToUint32(self.length);                                                                         // 557\n                                                                                                                       // 558\n        // If no callback function or if callback is not a callable function                                           // 559\n        if (!isCallable(callbackfn)) {                                                                                 // 560\n            throw new TypeError('Array.prototype.reduce callback must be a function');                                 // 561\n        }                                                                                                              // 562\n                                                                                                                       // 563\n        // no value to return if no initial value and an empty array                                                   // 564\n        if (length === 0 && arguments.length === 1) {                                                                  // 565\n            throw new TypeError('reduce of empty array with no initial value');                                        // 566\n        }                                                                                                              // 567\n                                                                                                                       // 568\n        var i = 0;                                                                                                     // 569\n        var result;                                                                                                    // 570\n        if (arguments.length >= 2) {                                                                                   // 571\n            result = arguments[1];                                                                                     // 572\n        } else {                                                                                                       // 573\n            do {                                                                                                       // 574\n                if (i in self) {                                                                                       // 575\n                    result = self[i++];                                                                                // 576\n                    break;                                                                                             // 577\n                }                                                                                                      // 578\n                                                                                                                       // 579\n                // if array contains no values, no initial value to return                                             // 580\n                if (++i >= length) {                                                                                   // 581\n                    throw new TypeError('reduce of empty array with no initial value');                                // 582\n                }                                                                                                      // 583\n            } while (true);                                                                                            // 584\n        }                                                                                                              // 585\n                                                                                                                       // 586\n        for (; i < length; i++) {                                                                                      // 587\n            if (i in self) {                                                                                           // 588\n                result = callbackfn(result, self[i], i, object);                                                       // 589\n            }                                                                                                          // 590\n        }                                                                                                              // 591\n                                                                                                                       // 592\n        return result;                                                                                                 // 593\n    }                                                                                                                  // 594\n}, !reduceCoercesToObject);                                                                                            // 595\n                                                                                                                       // 596\n// ES5 15.4.4.22                                                                                                       // 597\n// http://es5.github.com/#x15.4.4.22                                                                                   // 598\n// https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/reduceRight                            // 599\nvar reduceRightCoercesToObject = false;                                                                                // 600\nif (ArrayPrototype.reduceRight) {                                                                                      // 601\n    reduceRightCoercesToObject = typeof ArrayPrototype.reduceRight.call('es5', function (_, __, ___, list) { return list; }) === 'object';\n}                                                                                                                      // 603\ndefineProperties(ArrayPrototype, {                                                                                     // 604\n    reduceRight: function reduceRight(callbackfn/*, initial*/) {                                                       // 605\n        var object = ES.ToObject(this);                                                                                // 606\n        var self = splitString && isString(this) ? strSplit(this, '') : object;                                        // 607\n        var length = ES.ToUint32(self.length);                                                                         // 608\n                                                                                                                       // 609\n        // If no callback function or if callback is not a callable function                                           // 610\n        if (!isCallable(callbackfn)) {                                                                                 // 611\n            throw new TypeError('Array.prototype.reduceRight callback must be a function');                            // 612\n        }                                                                                                              // 613\n                                                                                                                       // 614\n        // no value to return if no initial value, empty array                                                         // 615\n        if (length === 0 && arguments.length === 1) {                                                                  // 616\n            throw new TypeError('reduceRight of empty array with no initial value');                                   // 617\n        }                                                                                                              // 618\n                                                                                                                       // 619\n        var result;                                                                                                    // 620\n        var i = length - 1;                                                                                            // 621\n        if (arguments.length >= 2) {                                                                                   // 622\n            result = arguments[1];                                                                                     // 623\n        } else {                                                                                                       // 624\n            do {                                                                                                       // 625\n                if (i in self) {                                                                                       // 626\n                    result = self[i--];                                                                                // 627\n                    break;                                                                                             // 628\n                }                                                                                                      // 629\n                                                                                                                       // 630\n                // if array contains no values, no initial value to return                                             // 631\n                if (--i < 0) {                                                                                         // 632\n                    throw new TypeError('reduceRight of empty array with no initial value');                           // 633\n                }                                                                                                      // 634\n            } while (true);                                                                                            // 635\n        }                                                                                                              // 636\n                                                                                                                       // 637\n        if (i < 0) {                                                                                                   // 638\n            return result;                                                                                             // 639\n        }                                                                                                              // 640\n                                                                                                                       // 641\n        do {                                                                                                           // 642\n            if (i in self) {                                                                                           // 643\n                result = callbackfn(result, self[i], i, object);                                                       // 644\n            }                                                                                                          // 645\n        } while (i--);                                                                                                 // 646\n                                                                                                                       // 647\n        return result;                                                                                                 // 648\n    }                                                                                                                  // 649\n}, !reduceRightCoercesToObject);                                                                                       // 650\n                                                                                                                       // 651\n// ES5 15.4.4.14                                                                                                       // 652\n// http://es5.github.com/#x15.4.4.14                                                                                   // 653\n// https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/indexOf                                  // 654\nvar hasFirefox2IndexOfBug = ArrayPrototype.indexOf && [0, 1].indexOf(1, 2) !== -1;                                     // 655\ndefineProperties(ArrayPrototype, {                                                                                     // 656\n    indexOf: function indexOf(searchElement/*, fromIndex */) {                                                         // 657\n        var self = splitString && isString(this) ? strSplit(this, '') : ES.ToObject(this);                             // 658\n        var length = ES.ToUint32(self.length);                                                                         // 659\n                                                                                                                       // 660\n        if (length === 0) {                                                                                            // 661\n            return -1;                                                                                                 // 662\n        }                                                                                                              // 663\n                                                                                                                       // 664\n        var i = 0;                                                                                                     // 665\n        if (arguments.length > 1) {                                                                                    // 666\n            i = ES.ToInteger(arguments[1]);                                                                            // 667\n        }                                                                                                              // 668\n                                                                                                                       // 669\n        // handle negative indices                                                                                     // 670\n        i = i >= 0 ? i : max(0, length + i);                                                                           // 671\n        for (; i < length; i++) {                                                                                      // 672\n            if (i in self && self[i] === searchElement) {                                                              // 673\n                return i;                                                                                              // 674\n            }                                                                                                          // 675\n        }                                                                                                              // 676\n        return -1;                                                                                                     // 677\n    }                                                                                                                  // 678\n}, hasFirefox2IndexOfBug);                                                                                             // 679\n                                                                                                                       // 680\n// ES5 15.4.4.15                                                                                                       // 681\n// http://es5.github.com/#x15.4.4.15                                                                                   // 682\n// https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/lastIndexOf                              // 683\nvar hasFirefox2LastIndexOfBug = ArrayPrototype.lastIndexOf && [0, 1].lastIndexOf(0, -3) !== -1;                        // 684\ndefineProperties(ArrayPrototype, {                                                                                     // 685\n    lastIndexOf: function lastIndexOf(searchElement/*, fromIndex */) {                                                 // 686\n        var self = splitString && isString(this) ? strSplit(this, '') : ES.ToObject(this);                             // 687\n        var length = ES.ToUint32(self.length);                                                                         // 688\n                                                                                                                       // 689\n        if (length === 0) {                                                                                            // 690\n            return -1;                                                                                                 // 691\n        }                                                                                                              // 692\n        var i = length - 1;                                                                                            // 693\n        if (arguments.length > 1) {                                                                                    // 694\n            i = min(i, ES.ToInteger(arguments[1]));                                                                    // 695\n        }                                                                                                              // 696\n        // handle negative indices                                                                                     // 697\n        i = i >= 0 ? i : length - Math.abs(i);                                                                         // 698\n        for (; i >= 0; i--) {                                                                                          // 699\n            if (i in self && searchElement === self[i]) {                                                              // 700\n                return i;                                                                                              // 701\n            }                                                                                                          // 702\n        }                                                                                                              // 703\n        return -1;                                                                                                     // 704\n    }                                                                                                                  // 705\n}, hasFirefox2LastIndexOfBug);                                                                                         // 706\n                                                                                                                       // 707\n// ES5 15.4.4.12                                                                                                       // 708\n// http://es5.github.com/#x15.4.4.12                                                                                   // 709\nvar spliceNoopReturnsEmptyArray = (function () {                                                                       // 710\n    var a = [1, 2];                                                                                                    // 711\n    var result = a.splice();                                                                                           // 712\n    return a.length === 2 && isArray(result) && result.length === 0;                                                   // 713\n}());                                                                                                                  // 714\ndefineProperties(ArrayPrototype, {                                                                                     // 715\n    // Safari 5.0 bug where .splice() returns undefined                                                                // 716\n    splice: function splice(start, deleteCount) {                                                                      // 717\n        if (arguments.length === 0) {                                                                                  // 718\n            return [];                                                                                                 // 719\n        } else {                                                                                                       // 720\n            return array_splice.apply(this, arguments);                                                                // 721\n        }                                                                                                              // 722\n    }                                                                                                                  // 723\n}, !spliceNoopReturnsEmptyArray);                                                                                      // 724\n                                                                                                                       // 725\nvar spliceWorksWithEmptyObject = (function () {                                                                        // 726\n    var obj = {};                                                                                                      // 727\n    ArrayPrototype.splice.call(obj, 0, 0, 1);                                                                          // 728\n    return obj.length === 1;                                                                                           // 729\n}());                                                                                                                  // 730\ndefineProperties(ArrayPrototype, {                                                                                     // 731\n    splice: function splice(start, deleteCount) {                                                                      // 732\n        if (arguments.length === 0) { return []; }                                                                     // 733\n        var args = arguments;                                                                                          // 734\n        this.length = max(ES.ToInteger(this.length), 0);                                                               // 735\n        if (arguments.length > 0 && typeof deleteCount !== 'number') {                                                 // 736\n            args = array_slice.call(arguments);                                                                        // 737\n            if (args.length < 2) {                                                                                     // 738\n                push(args, this.length - start);                                                                       // 739\n            } else {                                                                                                   // 740\n                args[1] = ES.ToInteger(deleteCount);                                                                   // 741\n            }                                                                                                          // 742\n        }                                                                                                              // 743\n        return array_splice.apply(this, args);                                                                         // 744\n    }                                                                                                                  // 745\n}, !spliceWorksWithEmptyObject);                                                                                       // 746\nvar spliceWorksWithLargeSparseArrays = (function () {                                                                  // 747\n    // Per https://github.com/es-shims/es5-shim/issues/295                                                             // 748\n    // Safari 7/8 breaks with sparse arrays of size 1e5 or greater                                                     // 749\n    var arr = new $Array(1e5);                                                                                         // 750\n    // note: the index MUST be 8 or larger or the test will false pass                                                 // 751\n    arr[8] = 'x';                                                                                                      // 752\n    arr.splice(1, 1);                                                                                                  // 753\n    // note: this test must be defined *after* the indexOf shim                                                        // 754\n    // per https://github.com/es-shims/es5-shim/issues/313                                                             // 755\n    return arr.indexOf('x') === 7;                                                                                     // 756\n}());                                                                                                                  // 757\nvar spliceWorksWithSmallSparseArrays = (function () {                                                                  // 758\n    // Per https://github.com/es-shims/es5-shim/issues/295                                                             // 759\n    // Opera 12.15 breaks on this, no idea why.                                                                        // 760\n    var n = 256;                                                                                                       // 761\n    var arr = [];                                                                                                      // 762\n    arr[n] = 'a';                                                                                                      // 763\n    arr.splice(n + 1, 0, 'b');                                                                                         // 764\n    return arr[n] === 'a';                                                                                             // 765\n}());                                                                                                                  // 766\ndefineProperties(ArrayPrototype, {                                                                                     // 767\n    splice: function splice(start, deleteCount) {                                                                      // 768\n        var O = ES.ToObject(this);                                                                                     // 769\n        var A = [];                                                                                                    // 770\n        var len = ES.ToUint32(O.length);                                                                               // 771\n        var relativeStart = ES.ToInteger(start);                                                                       // 772\n        var actualStart = relativeStart < 0 ? max((len + relativeStart), 0) : min(relativeStart, len);                 // 773\n        var actualDeleteCount = min(max(ES.ToInteger(deleteCount), 0), len - actualStart);                             // 774\n                                                                                                                       // 775\n        var k = 0;                                                                                                     // 776\n        var from;                                                                                                      // 777\n        while (k < actualDeleteCount) {                                                                                // 778\n            from = $String(actualStart + k);                                                                           // 779\n            if (owns(O, from)) {                                                                                       // 780\n                A[k] = O[from];                                                                                        // 781\n            }                                                                                                          // 782\n            k += 1;                                                                                                    // 783\n        }                                                                                                              // 784\n                                                                                                                       // 785\n        var items = array_slice.call(arguments, 2);                                                                    // 786\n        var itemCount = items.length;                                                                                  // 787\n        var to;                                                                                                        // 788\n        if (itemCount < actualDeleteCount) {                                                                           // 789\n            k = actualStart;                                                                                           // 790\n            while (k < (len - actualDeleteCount)) {                                                                    // 791\n                from = $String(k + actualDeleteCount);                                                                 // 792\n                to = $String(k + itemCount);                                                                           // 793\n                if (owns(O, from)) {                                                                                   // 794\n                    O[to] = O[from];                                                                                   // 795\n                } else {                                                                                               // 796\n                    delete O[to];                                                                                      // 797\n                }                                                                                                      // 798\n                k += 1;                                                                                                // 799\n            }                                                                                                          // 800\n            k = len;                                                                                                   // 801\n            while (k > (len - actualDeleteCount + itemCount)) {                                                        // 802\n                delete O[k - 1];                                                                                       // 803\n                k -= 1;                                                                                                // 804\n            }                                                                                                          // 805\n        } else if (itemCount > actualDeleteCount) {                                                                    // 806\n            k = len - actualDeleteCount;                                                                               // 807\n            while (k > actualStart) {                                                                                  // 808\n                from = $String(k + actualDeleteCount - 1);                                                             // 809\n                to = $String(k + itemCount - 1);                                                                       // 810\n                if (owns(O, from)) {                                                                                   // 811\n                    O[to] = O[from];                                                                                   // 812\n                } else {                                                                                               // 813\n                    delete O[to];                                                                                      // 814\n                }                                                                                                      // 815\n                k -= 1;                                                                                                // 816\n            }                                                                                                          // 817\n        }                                                                                                              // 818\n        k = actualStart;                                                                                               // 819\n        for (var i = 0; i < items.length; ++i) {                                                                       // 820\n            O[k] = items[i];                                                                                           // 821\n            k += 1;                                                                                                    // 822\n        }                                                                                                              // 823\n        O.length = len - actualDeleteCount + itemCount;                                                                // 824\n                                                                                                                       // 825\n        return A;                                                                                                      // 826\n    }                                                                                                                  // 827\n}, !spliceWorksWithLargeSparseArrays || !spliceWorksWithSmallSparseArrays);                                            // 828\n                                                                                                                       // 829\nvar hasJoinUndefinedBug = [1, 2].join(undefined) !== '1,2';                                                            // 830\nvar originalJoin = ArrayPrototype.join;                                                                                // 831\ndefineProperties(ArrayPrototype, {                                                                                     // 832\n    join: function join(separator) {                                                                                   // 833\n        return originalJoin.call(this, typeof separator === 'undefined' ? ',' : separator);                            // 834\n    }                                                                                                                  // 835\n}, hasJoinUndefinedBug);                                                                                               // 836\n                                                                                                                       // 837\nvar pushShim = function push(item) {                                                                                   // 838\n    var O = ES.ToObject(this);                                                                                         // 839\n    var n = ES.ToUint32(O.length);                                                                                     // 840\n    var i = 0;                                                                                                         // 841\n    while (i < arguments.length) {                                                                                     // 842\n        O[n + i] = arguments[i];                                                                                       // 843\n        i += 1;                                                                                                        // 844\n    }                                                                                                                  // 845\n    O.length = n + i;                                                                                                  // 846\n    return n + i;                                                                                                      // 847\n};                                                                                                                     // 848\n                                                                                                                       // 849\nvar pushIsNotGeneric = (function () {                                                                                  // 850\n    var obj = {};                                                                                                      // 851\n    var result = Array.prototype.push.call(obj, undefined);                                                            // 852\n    return result !== 1 || obj.length !== 1 || typeof obj[0] !== 'undefined' || !owns(obj, 0);                         // 853\n}());                                                                                                                  // 854\ndefineProperties(ArrayPrototype, {                                                                                     // 855\n    push: function push(item) {                                                                                        // 856\n        if (isArray(this)) {                                                                                           // 857\n            return array_push.apply(this, arguments);                                                                  // 858\n        }                                                                                                              // 859\n        return pushShim.apply(this, arguments);                                                                        // 860\n    }                                                                                                                  // 861\n}, pushIsNotGeneric);                                                                                                  // 862\n                                                                                                                       // 863\n// This fixes a very weird bug in Opera 10.6 when pushing `undefined                                                   // 864\nvar pushUndefinedIsWeird = (function () {                                                                              // 865\n    var arr = [];                                                                                                      // 866\n    var result = arr.push(undefined);                                                                                  // 867\n    return result !== 1 || arr.length !== 1 || typeof arr[0] !== 'undefined' || !owns(arr, 0);                         // 868\n}());                                                                                                                  // 869\ndefineProperties(ArrayPrototype, { push: pushShim }, pushUndefinedIsWeird);                                            // 870\n                                                                                                                       // 871\n//                                                                                                                     // 872\n// Object                                                                                                              // 873\n// ======                                                                                                              // 874\n//                                                                                                                     // 875\n                                                                                                                       // 876\n// ES5 15.2.3.14                                                                                                       // 877\n// http://es5.github.com/#x15.2.3.14                                                                                   // 878\n                                                                                                                       // 879\n// http://whattheheadsaid.com/2010/10/a-safer-object-keys-compatibility-implementation                                 // 880\nvar hasDontEnumBug = !({ 'toString': null }).propertyIsEnumerable('toString');                                         // 881\nvar hasProtoEnumBug = function () {}.propertyIsEnumerable('prototype');                                                // 882\nvar hasStringEnumBug = !owns('x', '0');                                                                                // 883\nvar equalsConstructorPrototype = function (o) {                                                                        // 884\n    var ctor = o.constructor;                                                                                          // 885\n    return ctor && ctor.prototype === o;                                                                               // 886\n};                                                                                                                     // 887\nvar blacklistedKeys = {                                                                                                // 888\n    $window: true,                                                                                                     // 889\n    $console: true,                                                                                                    // 890\n    $parent: true,                                                                                                     // 891\n    $self: true,                                                                                                       // 892\n    $frame: true,                                                                                                      // 893\n    $frames: true,                                                                                                     // 894\n    $frameElement: true,                                                                                               // 895\n    $webkitIndexedDB: true,                                                                                            // 896\n    $webkitStorageInfo: true                                                                                           // 897\n};                                                                                                                     // 898\nvar hasAutomationEqualityBug = (function () {                                                                          // 899\n    /* globals window */                                                                                               // 900\n    if (typeof window === 'undefined') { return false; }                                                               // 901\n    for (var k in window) {                                                                                            // 902\n        try {                                                                                                          // 903\n            if (!blacklistedKeys['$' + k] && owns(window, k) && window[k] !== null && typeof window[k] === 'object') {\n                equalsConstructorPrototype(window[k]);                                                                 // 905\n            }                                                                                                          // 906\n        } catch (e) {                                                                                                  // 907\n            return true;                                                                                               // 908\n        }                                                                                                              // 909\n    }                                                                                                                  // 910\n    return false;                                                                                                      // 911\n}());                                                                                                                  // 912\nvar equalsConstructorPrototypeIfNotBuggy = function (object) {                                                         // 913\n    if (typeof window === 'undefined' || !hasAutomationEqualityBug) { return equalsConstructorPrototype(object); }     // 914\n    try {                                                                                                              // 915\n        return equalsConstructorPrototype(object);                                                                     // 916\n    } catch (e) {                                                                                                      // 917\n        return false;                                                                                                  // 918\n    }                                                                                                                  // 919\n};                                                                                                                     // 920\nvar dontEnums = [                                                                                                      // 921\n    'toString',                                                                                                        // 922\n    'toLocaleString',                                                                                                  // 923\n    'valueOf',                                                                                                         // 924\n    'hasOwnProperty',                                                                                                  // 925\n    'isPrototypeOf',                                                                                                   // 926\n    'propertyIsEnumerable',                                                                                            // 927\n    'constructor'                                                                                                      // 928\n];                                                                                                                     // 929\nvar dontEnumsLength = dontEnums.length;                                                                                // 930\n                                                                                                                       // 931\n// taken directly from https://github.com/ljharb/is-arguments/blob/master/index.js                                     // 932\n// can be replaced with require('is-arguments') if we ever use a build process instead                                 // 933\nvar isStandardArguments = function isArguments(value) {                                                                // 934\n    return toStr(value) === '[object Arguments]';                                                                      // 935\n};                                                                                                                     // 936\nvar isLegacyArguments = function isArguments(value) {                                                                  // 937\n    return value !== null &&                                                                                           // 938\n        typeof value === 'object' &&                                                                                   // 939\n        typeof value.length === 'number' &&                                                                            // 940\n        value.length >= 0 &&                                                                                           // 941\n        !isArray(value) &&                                                                                             // 942\n        isCallable(value.callee);                                                                                      // 943\n};                                                                                                                     // 944\nvar isArguments = isStandardArguments(arguments) ? isStandardArguments : isLegacyArguments;                            // 945\n                                                                                                                       // 946\ndefineProperties($Object, {                                                                                            // 947\n    keys: function keys(object) {                                                                                      // 948\n        var isFn = isCallable(object);                                                                                 // 949\n        var isArgs = isArguments(object);                                                                              // 950\n        var isObject = object !== null && typeof object === 'object';                                                  // 951\n        var isStr = isObject && isString(object);                                                                      // 952\n                                                                                                                       // 953\n        if (!isObject && !isFn && !isArgs) {                                                                           // 954\n            throw new TypeError('Object.keys called on a non-object');                                                 // 955\n        }                                                                                                              // 956\n                                                                                                                       // 957\n        var theKeys = [];                                                                                              // 958\n        var skipProto = hasProtoEnumBug && isFn;                                                                       // 959\n        if ((isStr && hasStringEnumBug) || isArgs) {                                                                   // 960\n            for (var i = 0; i < object.length; ++i) {                                                                  // 961\n                push(theKeys, $String(i));                                                                             // 962\n            }                                                                                                          // 963\n        }                                                                                                              // 964\n                                                                                                                       // 965\n        if (!isArgs) {                                                                                                 // 966\n            for (var name in object) {                                                                                 // 967\n                if (!(skipProto && name === 'prototype') && owns(object, name)) {                                      // 968\n                    push(theKeys, $String(name));                                                                      // 969\n                }                                                                                                      // 970\n            }                                                                                                          // 971\n        }                                                                                                              // 972\n                                                                                                                       // 973\n        if (hasDontEnumBug) {                                                                                          // 974\n            var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);                                        // 975\n            for (var j = 0; j < dontEnumsLength; j++) {                                                                // 976\n                var dontEnum = dontEnums[j];                                                                           // 977\n                if (!(skipConstructor && dontEnum === 'constructor') && owns(object, dontEnum)) {                      // 978\n                    push(theKeys, dontEnum);                                                                           // 979\n                }                                                                                                      // 980\n            }                                                                                                          // 981\n        }                                                                                                              // 982\n        return theKeys;                                                                                                // 983\n    }                                                                                                                  // 984\n});                                                                                                                    // 985\n                                                                                                                       // 986\nvar keysWorksWithArguments = $Object.keys && (function () {                                                            // 987\n    // Safari 5.0 bug                                                                                                  // 988\n    return $Object.keys(arguments).length === 2;                                                                       // 989\n}(1, 2));                                                                                                              // 990\nvar keysHasArgumentsLengthBug = $Object.keys && (function () {                                                         // 991\n    var argKeys = $Object.keys(arguments);                                                                             // 992\n    return arguments.length !== 1 || argKeys.length !== 1 || argKeys[0] !== 1;                                         // 993\n}(1));                                                                                                                 // 994\nvar originalKeys = $Object.keys;                                                                                       // 995\ndefineProperties($Object, {                                                                                            // 996\n    keys: function keys(object) {                                                                                      // 997\n        if (isArguments(object)) {                                                                                     // 998\n            return originalKeys(array_slice.call(object));                                                             // 999\n        } else {                                                                                                       // 1000\n            return originalKeys(object);                                                                               // 1001\n        }                                                                                                              // 1002\n    }                                                                                                                  // 1003\n}, !keysWorksWithArguments || keysHasArgumentsLengthBug);                                                              // 1004\n                                                                                                                       // 1005\n//                                                                                                                     // 1006\n// Date                                                                                                                // 1007\n// ====                                                                                                                // 1008\n//                                                                                                                     // 1009\n                                                                                                                       // 1010\n// ES5 15.9.5.43                                                                                                       // 1011\n// http://es5.github.com/#x15.9.5.43                                                                                   // 1012\n// This function returns a String value represent the instance in time                                                 // 1013\n// represented by this Date object. The format of the String is the Date Time                                          // 1014\n// string format defined in 15.9.1.15. All fields are present in the String.                                           // 1015\n// The time zone is always UTC, denoted by the suffix Z. If the time value of                                          // 1016\n// this object is not a finite Number a RangeError exception is thrown.                                                // 1017\nvar negativeDate = -62198755200000;                                                                                    // 1018\nvar negativeYearString = '-000001';                                                                                    // 1019\nvar hasNegativeDateBug = Date.prototype.toISOString && new Date(negativeDate).toISOString().indexOf(negativeYearString) === -1;\nvar hasSafari51DateBug = Date.prototype.toISOString && new Date(-1).toISOString() !== '1969-12-31T23:59:59.999Z';      // 1021\n                                                                                                                       // 1022\ndefineProperties(Date.prototype, {                                                                                     // 1023\n    toISOString: function toISOString() {                                                                              // 1024\n        var result, length, value, year, month;                                                                        // 1025\n        if (!isFinite(this)) {                                                                                         // 1026\n            throw new RangeError('Date.prototype.toISOString called on non-finite value.');                            // 1027\n        }                                                                                                              // 1028\n                                                                                                                       // 1029\n        year = this.getUTCFullYear();                                                                                  // 1030\n                                                                                                                       // 1031\n        month = this.getUTCMonth();                                                                                    // 1032\n        // see https://github.com/es-shims/es5-shim/issues/111                                                         // 1033\n        year += Math.floor(month / 12);                                                                                // 1034\n        month = (month % 12 + 12) % 12;                                                                                // 1035\n                                                                                                                       // 1036\n        // the date time string format is specified in 15.9.1.15.                                                      // 1037\n        result = [month + 1, this.getUTCDate(), this.getUTCHours(), this.getUTCMinutes(), this.getUTCSeconds()];       // 1038\n        year = (                                                                                                       // 1039\n            (year < 0 ? '-' : (year > 9999 ? '+' : '')) +                                                              // 1040\n            strSlice('00000' + Math.abs(year), (0 <= year && year <= 9999) ? -4 : -6)                                  // 1041\n        );                                                                                                             // 1042\n                                                                                                                       // 1043\n        length = result.length;                                                                                        // 1044\n        while (length--) {                                                                                             // 1045\n            value = result[length];                                                                                    // 1046\n            // pad months, days, hours, minutes, and seconds to have two                                               // 1047\n            // digits.                                                                                                 // 1048\n            if (value < 10) {                                                                                          // 1049\n                result[length] = '0' + value;                                                                          // 1050\n            }                                                                                                          // 1051\n        }                                                                                                              // 1052\n        // pad milliseconds to have three digits.                                                                      // 1053\n        return (                                                                                                       // 1054\n            year + '-' + array_slice.call(result, 0, 2).join('-') +                                                    // 1055\n            'T' + array_slice.call(result, 2).join(':') + '.' +                                                        // 1056\n            strSlice('000' + this.getUTCMilliseconds(), -3) + 'Z'                                                      // 1057\n        );                                                                                                             // 1058\n    }                                                                                                                  // 1059\n}, hasNegativeDateBug || hasSafari51DateBug);                                                                          // 1060\n                                                                                                                       // 1061\n// ES5 15.9.5.44                                                                                                       // 1062\n// http://es5.github.com/#x15.9.5.44                                                                                   // 1063\n// This function provides a String representation of a Date object for use by                                          // 1064\n// JSON.stringify (15.12.3).                                                                                           // 1065\nvar dateToJSONIsSupported = (function () {                                                                             // 1066\n    try {                                                                                                              // 1067\n        return Date.prototype.toJSON &&                                                                                // 1068\n            new Date(NaN).toJSON() === null &&                                                                         // 1069\n            new Date(negativeDate).toJSON().indexOf(negativeYearString) !== -1 &&                                      // 1070\n            Date.prototype.toJSON.call({ // generic                                                                    // 1071\n                toISOString: function () { return true; }                                                              // 1072\n            });                                                                                                        // 1073\n    } catch (e) {                                                                                                      // 1074\n        return false;                                                                                                  // 1075\n    }                                                                                                                  // 1076\n}());                                                                                                                  // 1077\nif (!dateToJSONIsSupported) {                                                                                          // 1078\n    Date.prototype.toJSON = function toJSON(key) {                                                                     // 1079\n        // When the toJSON method is called with argument key, the following                                           // 1080\n        // steps are taken:                                                                                            // 1081\n                                                                                                                       // 1082\n        // 1.  Let O be the result of calling ToObject, giving it the this                                             // 1083\n        // value as its argument.                                                                                      // 1084\n        // 2. Let tv be ES.ToPrimitive(O, hint Number).                                                                // 1085\n        var O = $Object(this);                                                                                         // 1086\n        var tv = ES.ToPrimitive(O);                                                                                    // 1087\n        // 3. If tv is a Number and is not finite, return null.                                                        // 1088\n        if (typeof tv === 'number' && !isFinite(tv)) {                                                                 // 1089\n            return null;                                                                                               // 1090\n        }                                                                                                              // 1091\n        // 4. Let toISO be the result of calling the [[Get]] internal method of                                        // 1092\n        // O with argument \"toISOString\".                                                                              // 1093\n        var toISO = O.toISOString;                                                                                     // 1094\n        // 5. If IsCallable(toISO) is false, throw a TypeError exception.                                              // 1095\n        if (!isCallable(toISO)) {                                                                                      // 1096\n            throw new TypeError('toISOString property is not callable');                                               // 1097\n        }                                                                                                              // 1098\n        // 6. Return the result of calling the [[Call]] internal method of                                             // 1099\n        //  toISO with O as the this value and an empty argument list.                                                 // 1100\n        return toISO.call(O);                                                                                          // 1101\n                                                                                                                       // 1102\n        // NOTE 1 The argument is ignored.                                                                             // 1103\n                                                                                                                       // 1104\n        // NOTE 2 The toJSON function is intentionally generic; it does not                                            // 1105\n        // require that its this value be a Date object. Therefore, it can be                                          // 1106\n        // transferred to other kinds of objects for use as a method. However,                                         // 1107\n        // it does require that any such object have a toISOString method. An                                          // 1108\n        // object is free to use the argument key to filter its                                                        // 1109\n        // stringification.                                                                                            // 1110\n    };                                                                                                                 // 1111\n}                                                                                                                      // 1112\n                                                                                                                       // 1113\n// ES5 15.9.4.2                                                                                                        // 1114\n// http://es5.github.com/#x15.9.4.2                                                                                    // 1115\n// based on work shared by Daniel Friesen (dantman)                                                                    // 1116\n// http://gist.github.com/303249                                                                                       // 1117\nvar supportsExtendedYears = Date.parse('+033658-09-27T01:46:40.000Z') === 1e15;                                        // 1118\nvar acceptsInvalidDates = !isNaN(Date.parse('2012-04-04T24:00:00.500Z')) || !isNaN(Date.parse('2012-11-31T23:59:59.000Z')) || !isNaN(Date.parse('2012-12-31T23:59:60.000Z'));\nvar doesNotParseY2KNewYear = isNaN(Date.parse('2000-01-01T00:00:00.000Z'));                                            // 1120\nif (doesNotParseY2KNewYear || acceptsInvalidDates || !supportsExtendedYears) {                                         // 1121\n    // XXX global assignment won't work in embeddings that use                                                         // 1122\n    // an alternate object for the context.                                                                            // 1123\n    /* global Date: true */                                                                                            // 1124\n    /* eslint-disable no-undef */                                                                                      // 1125\n    var maxSafeUnsigned32Bit = Math.pow(2, 31) - 1;                                                                    // 1126\n    var secondsWithinMaxSafeUnsigned32Bit = Math.floor(maxSafeUnsigned32Bit / 1e3);                                    // 1127\n    var hasSafariSignedIntBug = isActualNaN(new Date(1970, 0, 1, 0, 0, 0, maxSafeUnsigned32Bit + 1).getTime());        // 1128\n    Date = (function (NativeDate) {                                                                                    // 1129\n    /* eslint-enable no-undef */                                                                                       // 1130\n        // Date.length === 7                                                                                           // 1131\n        var DateShim = function Date(Y, M, D, h, m, s, ms) {                                                           // 1132\n            var length = arguments.length;                                                                             // 1133\n            var date;                                                                                                  // 1134\n            if (this instanceof NativeDate) {                                                                          // 1135\n                var seconds = s;                                                                                       // 1136\n                var millis = ms;                                                                                       // 1137\n                if (hasSafariSignedIntBug && length >= 7 && ms > maxSafeUnsigned32Bit) {                               // 1138\n                    // work around a Safari 8/9 bug where it treats the seconds as signed                              // 1139\n                    var msToShift = Math.floor(ms / maxSafeUnsigned32Bit) * maxSafeUnsigned32Bit;                      // 1140\n                    var sToShift = Math.floor(msToShift / 1e3);                                                        // 1141\n                    seconds += sToShift;                                                                               // 1142\n                    millis -= sToShift * 1e3;                                                                          // 1143\n                }                                                                                                      // 1144\n                date = length === 1 && $String(Y) === Y ? // isString(Y)                                               // 1145\n                    // We explicitly pass it through parse:                                                            // 1146\n                    new NativeDate(DateShim.parse(Y)) :                                                                // 1147\n                    // We have to manually make calls depending on argument                                            // 1148\n                    // length here                                                                                     // 1149\n                    length >= 7 ? new NativeDate(Y, M, D, h, m, seconds, millis) :                                     // 1150\n                    length >= 6 ? new NativeDate(Y, M, D, h, m, seconds) :                                             // 1151\n                    length >= 5 ? new NativeDate(Y, M, D, h, m) :                                                      // 1152\n                    length >= 4 ? new NativeDate(Y, M, D, h) :                                                         // 1153\n                    length >= 3 ? new NativeDate(Y, M, D) :                                                            // 1154\n                    length >= 2 ? new NativeDate(Y, M) :                                                               // 1155\n                    length >= 1 ? new NativeDate(Y) :                                                                  // 1156\n                                  new NativeDate();                                                                    // 1157\n            } else {                                                                                                   // 1158\n                date = NativeDate.apply(this, arguments);                                                              // 1159\n            }                                                                                                          // 1160\n            if (!isPrimitive(date)) {                                                                                  // 1161\n              // Prevent mixups with unfixed Date object                                                               // 1162\n              defineProperties(date, { constructor: DateShim }, true);                                                 // 1163\n            }                                                                                                          // 1164\n            return date;                                                                                               // 1165\n        };                                                                                                             // 1166\n                                                                                                                       // 1167\n        // 15.9.1.15 Date Time String Format.                                                                          // 1168\n        var isoDateExpression = new RegExp('^' +                                                                       // 1169\n            '(\\\\d{4}|[+-]\\\\d{6})' + // four-digit year capture or sign +                                               // 1170\n                                      // 6-digit extended year                                                         // 1171\n            '(?:-(\\\\d{2})' + // optional month capture                                                                 // 1172\n            '(?:-(\\\\d{2})' + // optional day capture                                                                   // 1173\n            '(?:' + // capture hours:minutes:seconds.milliseconds                                                      // 1174\n                'T(\\\\d{2})' + // hours capture                                                                         // 1175\n                ':(\\\\d{2})' + // minutes capture                                                                       // 1176\n                '(?:' + // optional :seconds.milliseconds                                                              // 1177\n                    ':(\\\\d{2})' + // seconds capture                                                                   // 1178\n                    '(?:(\\\\.\\\\d{1,}))?' + // milliseconds capture                                                      // 1179\n                ')?' +                                                                                                 // 1180\n            '(' + // capture UTC offset component                                                                      // 1181\n                'Z|' + // UTC capture                                                                                  // 1182\n                '(?:' + // offset specifier +/-hours:minutes                                                           // 1183\n                    '([-+])' + // sign capture                                                                         // 1184\n                    '(\\\\d{2})' + // hours offset capture                                                               // 1185\n                    ':(\\\\d{2})' + // minutes offset capture                                                            // 1186\n                ')' +                                                                                                  // 1187\n            ')?)?)?)?' +                                                                                               // 1188\n        '$');                                                                                                          // 1189\n                                                                                                                       // 1190\n        var months = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365];                                     // 1191\n                                                                                                                       // 1192\n        var dayFromMonth = function dayFromMonth(year, month) {                                                        // 1193\n            var t = month > 1 ? 1 : 0;                                                                                 // 1194\n            return (                                                                                                   // 1195\n                months[month] +                                                                                        // 1196\n                Math.floor((year - 1969 + t) / 4) -                                                                    // 1197\n                Math.floor((year - 1901 + t) / 100) +                                                                  // 1198\n                Math.floor((year - 1601 + t) / 400) +                                                                  // 1199\n                365 * (year - 1970)                                                                                    // 1200\n            );                                                                                                         // 1201\n        };                                                                                                             // 1202\n                                                                                                                       // 1203\n        var toUTC = function toUTC(t) {                                                                                // 1204\n            var s = 0;                                                                                                 // 1205\n            var ms = t;                                                                                                // 1206\n            if (hasSafariSignedIntBug && ms > maxSafeUnsigned32Bit) {                                                  // 1207\n                // work around a Safari 8/9 bug where it treats the seconds as signed                                  // 1208\n                var msToShift = Math.floor(ms / maxSafeUnsigned32Bit) * maxSafeUnsigned32Bit;                          // 1209\n                var sToShift = Math.floor(msToShift / 1e3);                                                            // 1210\n                s += sToShift;                                                                                         // 1211\n                ms -= sToShift * 1e3;                                                                                  // 1212\n            }                                                                                                          // 1213\n            return $Number(new NativeDate(1970, 0, 1, 0, 0, s, ms));                                                   // 1214\n        };                                                                                                             // 1215\n                                                                                                                       // 1216\n        // Copy any custom methods a 3rd party library may have added                                                  // 1217\n        for (var key in NativeDate) {                                                                                  // 1218\n            if (owns(NativeDate, key)) {                                                                               // 1219\n                DateShim[key] = NativeDate[key];                                                                       // 1220\n            }                                                                                                          // 1221\n        }                                                                                                              // 1222\n                                                                                                                       // 1223\n        // Copy \"native\" methods explicitly; they may be non-enumerable                                                // 1224\n        defineProperties(DateShim, {                                                                                   // 1225\n            now: NativeDate.now,                                                                                       // 1226\n            UTC: NativeDate.UTC                                                                                        // 1227\n        }, true);                                                                                                      // 1228\n        DateShim.prototype = NativeDate.prototype;                                                                     // 1229\n        defineProperties(DateShim.prototype, {                                                                         // 1230\n            constructor: DateShim                                                                                      // 1231\n        }, true);                                                                                                      // 1232\n                                                                                                                       // 1233\n        // Upgrade Date.parse to handle simplified ISO 8601 strings                                                    // 1234\n        var parseShim = function parse(string) {                                                                       // 1235\n            var match = isoDateExpression.exec(string);                                                                // 1236\n            if (match) {                                                                                               // 1237\n                // parse months, days, hours, minutes, seconds, and milliseconds                                       // 1238\n                // provide default values if necessary                                                                 // 1239\n                // parse the UTC offset component                                                                      // 1240\n                var year = $Number(match[1]),                                                                          // 1241\n                    month = $Number(match[2] || 1) - 1,                                                                // 1242\n                    day = $Number(match[3] || 1) - 1,                                                                  // 1243\n                    hour = $Number(match[4] || 0),                                                                     // 1244\n                    minute = $Number(match[5] || 0),                                                                   // 1245\n                    second = $Number(match[6] || 0),                                                                   // 1246\n                    millisecond = Math.floor($Number(match[7] || 0) * 1000),                                           // 1247\n                    // When time zone is missed, local offset should be used                                           // 1248\n                    // (ES 5.1 bug)                                                                                    // 1249\n                    // see https://bugs.ecmascript.org/show_bug.cgi?id=112                                             // 1250\n                    isLocalTime = Boolean(match[4] && !match[8]),                                                      // 1251\n                    signOffset = match[9] === '-' ? 1 : -1,                                                            // 1252\n                    hourOffset = $Number(match[10] || 0),                                                              // 1253\n                    minuteOffset = $Number(match[11] || 0),                                                            // 1254\n                    result;                                                                                            // 1255\n                var hasMinutesOrSecondsOrMilliseconds = minute > 0 || second > 0 || millisecond > 0;                   // 1256\n                if (                                                                                                   // 1257\n                    hour < (hasMinutesOrSecondsOrMilliseconds ? 24 : 25) &&                                            // 1258\n                    minute < 60 && second < 60 && millisecond < 1000 &&                                                // 1259\n                    month > -1 && month < 12 && hourOffset < 24 &&                                                     // 1260\n                    minuteOffset < 60 && // detect invalid offsets                                                     // 1261\n                    day > -1 &&                                                                                        // 1262\n                    day < (dayFromMonth(year, month + 1) - dayFromMonth(year, month))                                  // 1263\n                ) {                                                                                                    // 1264\n                    result = (                                                                                         // 1265\n                        (dayFromMonth(year, month) + day) * 24 +                                                       // 1266\n                        hour +                                                                                         // 1267\n                        hourOffset * signOffset                                                                        // 1268\n                    ) * 60;                                                                                            // 1269\n                    result = (                                                                                         // 1270\n                        (result + minute + minuteOffset * signOffset) * 60 +                                           // 1271\n                        second                                                                                         // 1272\n                    ) * 1000 + millisecond;                                                                            // 1273\n                    if (isLocalTime) {                                                                                 // 1274\n                        result = toUTC(result);                                                                        // 1275\n                    }                                                                                                  // 1276\n                    if (-8.64e15 <= result && result <= 8.64e15) {                                                     // 1277\n                        return result;                                                                                 // 1278\n                    }                                                                                                  // 1279\n                }                                                                                                      // 1280\n                return NaN;                                                                                            // 1281\n            }                                                                                                          // 1282\n            return NativeDate.parse.apply(this, arguments);                                                            // 1283\n        };                                                                                                             // 1284\n        defineProperties(DateShim, { parse: parseShim });                                                              // 1285\n                                                                                                                       // 1286\n        return DateShim;                                                                                               // 1287\n    }(Date));                                                                                                          // 1288\n    /* global Date: false */                                                                                           // 1289\n}                                                                                                                      // 1290\n                                                                                                                       // 1291\n// ES5 15.9.4.4                                                                                                        // 1292\n// http://es5.github.com/#x15.9.4.4                                                                                    // 1293\nif (!Date.now) {                                                                                                       // 1294\n    Date.now = function now() {                                                                                        // 1295\n        return new Date().getTime();                                                                                   // 1296\n    };                                                                                                                 // 1297\n}                                                                                                                      // 1298\n                                                                                                                       // 1299\n//                                                                                                                     // 1300\n// Number                                                                                                              // 1301\n// ======                                                                                                              // 1302\n//                                                                                                                     // 1303\n                                                                                                                       // 1304\n// ES5.1 15.7.4.5                                                                                                      // 1305\n// http://es5.github.com/#x15.7.4.5                                                                                    // 1306\nvar hasToFixedBugs = NumberPrototype.toFixed && (                                                                      // 1307\n  (0.00008).toFixed(3) !== '0.000' ||                                                                                  // 1308\n  (0.9).toFixed(0) !== '1' ||                                                                                          // 1309\n  (1.255).toFixed(2) !== '1.25' ||                                                                                     // 1310\n  (1000000000000000128).toFixed(0) !== '1000000000000000128'                                                           // 1311\n);                                                                                                                     // 1312\n                                                                                                                       // 1313\nvar toFixedHelpers = {                                                                                                 // 1314\n  base: 1e7,                                                                                                           // 1315\n  size: 6,                                                                                                             // 1316\n  data: [0, 0, 0, 0, 0, 0],                                                                                            // 1317\n  multiply: function multiply(n, c) {                                                                                  // 1318\n      var i = -1;                                                                                                      // 1319\n      var c2 = c;                                                                                                      // 1320\n      while (++i < toFixedHelpers.size) {                                                                              // 1321\n          c2 += n * toFixedHelpers.data[i];                                                                            // 1322\n          toFixedHelpers.data[i] = c2 % toFixedHelpers.base;                                                           // 1323\n          c2 = Math.floor(c2 / toFixedHelpers.base);                                                                   // 1324\n      }                                                                                                                // 1325\n  },                                                                                                                   // 1326\n  divide: function divide(n) {                                                                                         // 1327\n      var i = toFixedHelpers.size, c = 0;                                                                              // 1328\n      while (--i >= 0) {                                                                                               // 1329\n          c += toFixedHelpers.data[i];                                                                                 // 1330\n          toFixedHelpers.data[i] = Math.floor(c / n);                                                                  // 1331\n          c = (c % n) * toFixedHelpers.base;                                                                           // 1332\n      }                                                                                                                // 1333\n  },                                                                                                                   // 1334\n  numToString: function numToString() {                                                                                // 1335\n      var i = toFixedHelpers.size;                                                                                     // 1336\n      var s = '';                                                                                                      // 1337\n      while (--i >= 0) {                                                                                               // 1338\n          if (s !== '' || i === 0 || toFixedHelpers.data[i] !== 0) {                                                   // 1339\n              var t = $String(toFixedHelpers.data[i]);                                                                 // 1340\n              if (s === '') {                                                                                          // 1341\n                  s = t;                                                                                               // 1342\n              } else {                                                                                                 // 1343\n                  s += strSlice('0000000', 0, 7 - t.length) + t;                                                       // 1344\n              }                                                                                                        // 1345\n          }                                                                                                            // 1346\n      }                                                                                                                // 1347\n      return s;                                                                                                        // 1348\n  },                                                                                                                   // 1349\n  pow: function pow(x, n, acc) {                                                                                       // 1350\n      return (n === 0 ? acc : (n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc)));                        // 1351\n  },                                                                                                                   // 1352\n  log: function log(x) {                                                                                               // 1353\n      var n = 0;                                                                                                       // 1354\n      var x2 = x;                                                                                                      // 1355\n      while (x2 >= 4096) {                                                                                             // 1356\n          n += 12;                                                                                                     // 1357\n          x2 /= 4096;                                                                                                  // 1358\n      }                                                                                                                // 1359\n      while (x2 >= 2) {                                                                                                // 1360\n          n += 1;                                                                                                      // 1361\n          x2 /= 2;                                                                                                     // 1362\n      }                                                                                                                // 1363\n      return n;                                                                                                        // 1364\n  }                                                                                                                    // 1365\n};                                                                                                                     // 1366\n                                                                                                                       // 1367\nvar toFixedShim = function toFixed(fractionDigits) {                                                                   // 1368\n    var f, x, s, m, e, z, j, k;                                                                                        // 1369\n                                                                                                                       // 1370\n    // Test for NaN and round fractionDigits down                                                                      // 1371\n    f = $Number(fractionDigits);                                                                                       // 1372\n    f = isActualNaN(f) ? 0 : Math.floor(f);                                                                            // 1373\n                                                                                                                       // 1374\n    if (f < 0 || f > 20) {                                                                                             // 1375\n        throw new RangeError('Number.toFixed called with invalid number of decimals');                                 // 1376\n    }                                                                                                                  // 1377\n                                                                                                                       // 1378\n    x = $Number(this);                                                                                                 // 1379\n                                                                                                                       // 1380\n    if (isActualNaN(x)) {                                                                                              // 1381\n        return 'NaN';                                                                                                  // 1382\n    }                                                                                                                  // 1383\n                                                                                                                       // 1384\n    // If it is too big or small, return the string value of the number                                                // 1385\n    if (x <= -1e21 || x >= 1e21) {                                                                                     // 1386\n        return $String(x);                                                                                             // 1387\n    }                                                                                                                  // 1388\n                                                                                                                       // 1389\n    s = '';                                                                                                            // 1390\n                                                                                                                       // 1391\n    if (x < 0) {                                                                                                       // 1392\n        s = '-';                                                                                                       // 1393\n        x = -x;                                                                                                        // 1394\n    }                                                                                                                  // 1395\n                                                                                                                       // 1396\n    m = '0';                                                                                                           // 1397\n                                                                                                                       // 1398\n    if (x > 1e-21) {                                                                                                   // 1399\n        // 1e-21 < x < 1e21                                                                                            // 1400\n        // -70 < log2(x) < 70                                                                                          // 1401\n        e = toFixedHelpers.log(x * toFixedHelpers.pow(2, 69, 1)) - 69;                                                 // 1402\n        z = (e < 0 ? x * toFixedHelpers.pow(2, -e, 1) : x / toFixedHelpers.pow(2, e, 1));                              // 1403\n        z *= 0x10000000000000; // Math.pow(2, 52);                                                                     // 1404\n        e = 52 - e;                                                                                                    // 1405\n                                                                                                                       // 1406\n        // -18 < e < 122                                                                                               // 1407\n        // x = z / 2 ^ e                                                                                               // 1408\n        if (e > 0) {                                                                                                   // 1409\n            toFixedHelpers.multiply(0, z);                                                                             // 1410\n            j = f;                                                                                                     // 1411\n                                                                                                                       // 1412\n            while (j >= 7) {                                                                                           // 1413\n                toFixedHelpers.multiply(1e7, 0);                                                                       // 1414\n                j -= 7;                                                                                                // 1415\n            }                                                                                                          // 1416\n                                                                                                                       // 1417\n            toFixedHelpers.multiply(toFixedHelpers.pow(10, j, 1), 0);                                                  // 1418\n            j = e - 1;                                                                                                 // 1419\n                                                                                                                       // 1420\n            while (j >= 23) {                                                                                          // 1421\n                toFixedHelpers.divide(1 << 23);                                                                        // 1422\n                j -= 23;                                                                                               // 1423\n            }                                                                                                          // 1424\n                                                                                                                       // 1425\n            toFixedHelpers.divide(1 << j);                                                                             // 1426\n            toFixedHelpers.multiply(1, 1);                                                                             // 1427\n            toFixedHelpers.divide(2);                                                                                  // 1428\n            m = toFixedHelpers.numToString();                                                                          // 1429\n        } else {                                                                                                       // 1430\n            toFixedHelpers.multiply(0, z);                                                                             // 1431\n            toFixedHelpers.multiply(1 << (-e), 0);                                                                     // 1432\n            m = toFixedHelpers.numToString() + strSlice('0.00000000000000000000', 2, 2 + f);                           // 1433\n        }                                                                                                              // 1434\n    }                                                                                                                  // 1435\n                                                                                                                       // 1436\n    if (f > 0) {                                                                                                       // 1437\n        k = m.length;                                                                                                  // 1438\n                                                                                                                       // 1439\n        if (k <= f) {                                                                                                  // 1440\n            m = s + strSlice('0.0000000000000000000', 0, f - k + 2) + m;                                               // 1441\n        } else {                                                                                                       // 1442\n            m = s + strSlice(m, 0, k - f) + '.' + strSlice(m, k - f);                                                  // 1443\n        }                                                                                                              // 1444\n    } else {                                                                                                           // 1445\n        m = s + m;                                                                                                     // 1446\n    }                                                                                                                  // 1447\n                                                                                                                       // 1448\n    return m;                                                                                                          // 1449\n};                                                                                                                     // 1450\ndefineProperties(NumberPrototype, { toFixed: toFixedShim }, hasToFixedBugs);                                           // 1451\n                                                                                                                       // 1452\nvar hasToPrecisionUndefinedBug = (function () {                                                                        // 1453\n    try {                                                                                                              // 1454\n        return 1.0.toPrecision(undefined) === '1';                                                                     // 1455\n    } catch (e) {                                                                                                      // 1456\n        return true;                                                                                                   // 1457\n    }                                                                                                                  // 1458\n}());                                                                                                                  // 1459\nvar originalToPrecision = NumberPrototype.toPrecision;                                                                 // 1460\ndefineProperties(NumberPrototype, {                                                                                    // 1461\n    toPrecision: function toPrecision(precision) {                                                                     // 1462\n        return typeof precision === 'undefined' ? originalToPrecision.call(this) : originalToPrecision.call(this, precision);\n    }                                                                                                                  // 1464\n}, hasToPrecisionUndefinedBug);                                                                                        // 1465\n                                                                                                                       // 1466\n//                                                                                                                     // 1467\n// String                                                                                                              // 1468\n// ======                                                                                                              // 1469\n//                                                                                                                     // 1470\n                                                                                                                       // 1471\n// ES5 15.5.4.14                                                                                                       // 1472\n// http://es5.github.com/#x15.5.4.14                                                                                   // 1473\n                                                                                                                       // 1474\n// [bugfix, IE lt 9, firefox 4, Konqueror, Opera, obscure browsers]                                                    // 1475\n// Many browsers do not split properly with regular expressions or they                                                // 1476\n// do not perform the split correctly under obscure conditions.                                                        // 1477\n// See http://blog.stevenlevithan.com/archives/cross-browser-split                                                     // 1478\n// I've tested in many browsers and this seems to cover the deviant ones:                                              // 1479\n//    'ab'.split(/(?:ab)*/) should be [\"\", \"\"], not [\"\"]                                                               // 1480\n//    '.'.split(/(.?)(.?)/) should be [\"\", \".\", \"\", \"\"], not [\"\", \"\"]                                                  // 1481\n//    'tesst'.split(/(s)*/) should be [\"t\", undefined, \"e\", \"s\", \"t\"], not                                             // 1482\n//       [undefined, \"t\", undefined, \"e\", ...]                                                                         // 1483\n//    ''.split(/.?/) should be [], not [\"\"]                                                                            // 1484\n//    '.'.split(/()()/) should be [\".\"], not [\"\", \"\", \".\"]                                                             // 1485\n                                                                                                                       // 1486\nif (                                                                                                                   // 1487\n    'ab'.split(/(?:ab)*/).length !== 2 ||                                                                              // 1488\n    '.'.split(/(.?)(.?)/).length !== 4 ||                                                                              // 1489\n    'tesst'.split(/(s)*/)[1] === 't' ||                                                                                // 1490\n    'test'.split(/(?:)/, -1).length !== 4 ||                                                                           // 1491\n    ''.split(/.?/).length ||                                                                                           // 1492\n    '.'.split(/()()/).length > 1                                                                                       // 1493\n) {                                                                                                                    // 1494\n    (function () {                                                                                                     // 1495\n        var compliantExecNpcg = typeof (/()??/).exec('')[1] === 'undefined'; // NPCG: nonparticipating capturing group\n        var maxSafe32BitInt = Math.pow(2, 32) - 1;                                                                     // 1497\n                                                                                                                       // 1498\n        StringPrototype.split = function (separator, limit) {                                                          // 1499\n            var string = this;                                                                                         // 1500\n            if (typeof separator === 'undefined' && limit === 0) {                                                     // 1501\n                return [];                                                                                             // 1502\n            }                                                                                                          // 1503\n                                                                                                                       // 1504\n            // If `separator` is not a regex, use native split                                                         // 1505\n            if (!isRegex(separator)) {                                                                                 // 1506\n                return strSplit(this, separator, limit);                                                               // 1507\n            }                                                                                                          // 1508\n                                                                                                                       // 1509\n            var output = [];                                                                                           // 1510\n            var flags = (separator.ignoreCase ? 'i' : '') +                                                            // 1511\n                        (separator.multiline ? 'm' : '') +                                                             // 1512\n                        (separator.unicode ? 'u' : '') + // in ES6                                                     // 1513\n                        (separator.sticky ? 'y' : ''), // Firefox 3+ and ES6                                           // 1514\n                lastLastIndex = 0,                                                                                     // 1515\n                // Make `global` and avoid `lastIndex` issues by working with a copy                                   // 1516\n                separator2, match, lastIndex, lastLength;                                                              // 1517\n            var separatorCopy = new RegExp(separator.source, flags + 'g');                                             // 1518\n            string += ''; // Type-convert                                                                              // 1519\n            if (!compliantExecNpcg) {                                                                                  // 1520\n                // Doesn't need flags gy, but they don't hurt                                                          // 1521\n                separator2 = new RegExp('^' + separatorCopy.source + '$(?!\\\\s)', flags);                               // 1522\n            }                                                                                                          // 1523\n            /* Values for `limit`, per the spec:                                                                       // 1524\n             * If undefined: 4294967295 // maxSafe32BitInt                                                             // 1525\n             * If 0, Infinity, or NaN: 0                                                                               // 1526\n             * If positive number: limit = Math.floor(limit); if (limit > 4294967295) limit -= 4294967296;             // 1527\n             * If negative number: 4294967296 - Math.floor(Math.abs(limit))                                            // 1528\n             * If other: Type-convert, then use the above rules                                                        // 1529\n             */                                                                                                        // 1530\n            var splitLimit = typeof limit === 'undefined' ? maxSafe32BitInt : ES.ToUint32(limit);                      // 1531\n            match = separatorCopy.exec(string);                                                                        // 1532\n            while (match) {                                                                                            // 1533\n                // `separatorCopy.lastIndex` is not reliable cross-browser                                             // 1534\n                lastIndex = match.index + match[0].length;                                                             // 1535\n                if (lastIndex > lastLastIndex) {                                                                       // 1536\n                    push(output, strSlice(string, lastLastIndex, match.index));                                        // 1537\n                    // Fix browsers whose `exec` methods don't consistently return `undefined` for                     // 1538\n                    // nonparticipating capturing groups                                                               // 1539\n                    if (!compliantExecNpcg && match.length > 1) {                                                      // 1540\n                        /* eslint-disable no-loop-func */                                                              // 1541\n                        match[0].replace(separator2, function () {                                                     // 1542\n                            for (var i = 1; i < arguments.length - 2; i++) {                                           // 1543\n                                if (typeof arguments[i] === 'undefined') {                                             // 1544\n                                    match[i] = void 0;                                                                 // 1545\n                                }                                                                                      // 1546\n                            }                                                                                          // 1547\n                        });                                                                                            // 1548\n                        /* eslint-enable no-loop-func */                                                               // 1549\n                    }                                                                                                  // 1550\n                    if (match.length > 1 && match.index < string.length) {                                             // 1551\n                        array_push.apply(output, array_slice.call(match, 1));                                          // 1552\n                    }                                                                                                  // 1553\n                    lastLength = match[0].length;                                                                      // 1554\n                    lastLastIndex = lastIndex;                                                                         // 1555\n                    if (output.length >= splitLimit) {                                                                 // 1556\n                        break;                                                                                         // 1557\n                    }                                                                                                  // 1558\n                }                                                                                                      // 1559\n                if (separatorCopy.lastIndex === match.index) {                                                         // 1560\n                    separatorCopy.lastIndex++; // Avoid an infinite loop                                               // 1561\n                }                                                                                                      // 1562\n                match = separatorCopy.exec(string);                                                                    // 1563\n            }                                                                                                          // 1564\n            if (lastLastIndex === string.length) {                                                                     // 1565\n                if (lastLength || !separatorCopy.test('')) {                                                           // 1566\n                    push(output, '');                                                                                  // 1567\n                }                                                                                                      // 1568\n            } else {                                                                                                   // 1569\n                push(output, strSlice(string, lastLastIndex));                                                         // 1570\n            }                                                                                                          // 1571\n            return output.length > splitLimit ? strSlice(output, 0, splitLimit) : output;                              // 1572\n        };                                                                                                             // 1573\n    }());                                                                                                              // 1574\n                                                                                                                       // 1575\n// [bugfix, chrome]                                                                                                    // 1576\n// If separator is undefined, then the result array contains just one String,                                          // 1577\n// which is the this value (converted to a String). If limit is not undefined,                                         // 1578\n// then the output array is truncated so that it contains no more than limit                                           // 1579\n// elements.                                                                                                           // 1580\n// \"0\".split(undefined, 0) -> []                                                                                       // 1581\n} else if ('0'.split(void 0, 0).length) {                                                                              // 1582\n    StringPrototype.split = function split(separator, limit) {                                                         // 1583\n        if (typeof separator === 'undefined' && limit === 0) { return []; }                                            // 1584\n        return strSplit(this, separator, limit);                                                                       // 1585\n    };                                                                                                                 // 1586\n}                                                                                                                      // 1587\n                                                                                                                       // 1588\nvar str_replace = StringPrototype.replace;                                                                             // 1589\nvar replaceReportsGroupsCorrectly = (function () {                                                                     // 1590\n    var groups = [];                                                                                                   // 1591\n    'x'.replace(/x(.)?/g, function (match, group) {                                                                    // 1592\n        push(groups, group);                                                                                           // 1593\n    });                                                                                                                // 1594\n    return groups.length === 1 && typeof groups[0] === 'undefined';                                                    // 1595\n}());                                                                                                                  // 1596\n                                                                                                                       // 1597\nif (!replaceReportsGroupsCorrectly) {                                                                                  // 1598\n    StringPrototype.replace = function replace(searchValue, replaceValue) {                                            // 1599\n        var isFn = isCallable(replaceValue);                                                                           // 1600\n        var hasCapturingGroups = isRegex(searchValue) && (/\\)[*?]/).test(searchValue.source);                          // 1601\n        if (!isFn || !hasCapturingGroups) {                                                                            // 1602\n            return str_replace.call(this, searchValue, replaceValue);                                                  // 1603\n        } else {                                                                                                       // 1604\n            var wrappedReplaceValue = function (match) {                                                               // 1605\n                var length = arguments.length;                                                                         // 1606\n                var originalLastIndex = searchValue.lastIndex;                                                         // 1607\n                searchValue.lastIndex = 0;                                                                             // 1608\n                var args = searchValue.exec(match) || [];                                                              // 1609\n                searchValue.lastIndex = originalLastIndex;                                                             // 1610\n                push(args, arguments[length - 2], arguments[length - 1]);                                              // 1611\n                return replaceValue.apply(this, args);                                                                 // 1612\n            };                                                                                                         // 1613\n            return str_replace.call(this, searchValue, wrappedReplaceValue);                                           // 1614\n        }                                                                                                              // 1615\n    };                                                                                                                 // 1616\n}                                                                                                                      // 1617\n                                                                                                                       // 1618\n// ECMA-262, 3rd B.2.3                                                                                                 // 1619\n// Not an ECMAScript standard, although ECMAScript 3rd Edition has a                                                   // 1620\n// non-normative section suggesting uniform semantics and it should be                                                 // 1621\n// normalized across all browsers                                                                                      // 1622\n// [bugfix, IE lt 9] IE < 9 substr() with negative value not working in IE                                             // 1623\nvar string_substr = StringPrototype.substr;                                                                            // 1624\nvar hasNegativeSubstrBug = ''.substr && '0b'.substr(-1) !== 'b';                                                       // 1625\ndefineProperties(StringPrototype, {                                                                                    // 1626\n    substr: function substr(start, length) {                                                                           // 1627\n        var normalizedStart = start;                                                                                   // 1628\n        if (start < 0) {                                                                                               // 1629\n            normalizedStart = max(this.length + start, 0);                                                             // 1630\n        }                                                                                                              // 1631\n        return string_substr.call(this, normalizedStart, length);                                                      // 1632\n    }                                                                                                                  // 1633\n}, hasNegativeSubstrBug);                                                                                              // 1634\n                                                                                                                       // 1635\n// ES5 15.5.4.20                                                                                                       // 1636\n// whitespace from: http://es5.github.io/#x15.5.4.20                                                                   // 1637\nvar ws = '\\x09\\x0A\\x0B\\x0C\\x0D\\x20\\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003' +                                          // 1638\n    '\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028' +                                             // 1639\n    '\\u2029\\uFEFF';                                                                                                    // 1640\nvar zeroWidth = '\\u200b';                                                                                              // 1641\nvar wsRegexChars = '[' + ws + ']';                                                                                     // 1642\nvar trimBeginRegexp = new RegExp('^' + wsRegexChars + wsRegexChars + '*');                                             // 1643\nvar trimEndRegexp = new RegExp(wsRegexChars + wsRegexChars + '*$');                                                    // 1644\nvar hasTrimWhitespaceBug = StringPrototype.trim && (ws.trim() || !zeroWidth.trim());                                   // 1645\ndefineProperties(StringPrototype, {                                                                                    // 1646\n    // http://blog.stevenlevithan.com/archives/faster-trim-javascript                                                  // 1647\n    // http://perfectionkills.com/whitespace-deviations/                                                               // 1648\n    trim: function trim() {                                                                                            // 1649\n        if (typeof this === 'undefined' || this === null) {                                                            // 1650\n            throw new TypeError(\"can't convert \" + this + ' to object');                                               // 1651\n        }                                                                                                              // 1652\n        return $String(this).replace(trimBeginRegexp, '').replace(trimEndRegexp, '');                                  // 1653\n    }                                                                                                                  // 1654\n}, hasTrimWhitespaceBug);                                                                                              // 1655\n                                                                                                                       // 1656\nvar hasLastIndexBug = StringPrototype.lastIndexOf && 'abcあい'.lastIndexOf('あい', 2) !== -1;                              // 1657\ndefineProperties(StringPrototype, {                                                                                    // 1658\n    lastIndexOf: function lastIndexOf(searchString) {                                                                  // 1659\n        if (typeof this === 'undefined' || this === null) {                                                            // 1660\n            throw new TypeError(\"can't convert \" + this + ' to object');                                               // 1661\n        }                                                                                                              // 1662\n        var S = $String(this);                                                                                         // 1663\n        var searchStr = $String(searchString);                                                                         // 1664\n        var numPos = arguments.length > 1 ? $Number(arguments[1]) : NaN;                                               // 1665\n        var pos = isActualNaN(numPos) ? Infinity : ES.ToInteger(numPos);                                               // 1666\n        var start = min(max(pos, 0), S.length);                                                                        // 1667\n        var searchLen = searchStr.length;                                                                              // 1668\n        var k = start + searchLen;                                                                                     // 1669\n        while (k > 0) {                                                                                                // 1670\n            k = max(0, k - searchLen);                                                                                 // 1671\n            var index = strIndexOf(strSlice(S, k, start + searchLen), searchStr);                                      // 1672\n            if (index !== -1) {                                                                                        // 1673\n                return k + index;                                                                                      // 1674\n            }                                                                                                          // 1675\n        }                                                                                                              // 1676\n        return -1;                                                                                                     // 1677\n    }                                                                                                                  // 1678\n}, hasLastIndexBug);                                                                                                   // 1679\n                                                                                                                       // 1680\nvar originalLastIndexOf = StringPrototype.lastIndexOf;                                                                 // 1681\ndefineProperties(StringPrototype, {                                                                                    // 1682\n    lastIndexOf: function lastIndexOf(searchString) {                                                                  // 1683\n        return originalLastIndexOf.apply(this, arguments);                                                             // 1684\n    }                                                                                                                  // 1685\n}, StringPrototype.lastIndexOf.length !== 1);                                                                          // 1686\n                                                                                                                       // 1687\n// ES-5 15.1.2.2                                                                                                       // 1688\n/* eslint-disable radix */                                                                                             // 1689\nif (parseInt(ws + '08') !== 8 || parseInt(ws + '0x16') !== 22) {                                                       // 1690\n/* eslint-enable radix */                                                                                              // 1691\n    /* global parseInt: true */                                                                                        // 1692\n    parseInt = (function (origParseInt) {                                                                              // 1693\n        var hexRegex = /^[\\-+]?0[xX]/;                                                                                 // 1694\n        return function parseInt(str, radix) {                                                                         // 1695\n            var string = $String(str).trim();                                                                          // 1696\n            var defaultedRadix = $Number(radix) || (hexRegex.test(string) ? 16 : 10);                                  // 1697\n            return origParseInt(string, defaultedRadix);                                                               // 1698\n        };                                                                                                             // 1699\n    }(parseInt));                                                                                                      // 1700\n}                                                                                                                      // 1701\n                                                                                                                       // 1702\nif (String(new RangeError('test')) !== 'RangeError: test') {                                                           // 1703\n    var originalErrorToString = Error.prototype.toString;                                                              // 1704\n    var errorToStringShim = function toString() {                                                                      // 1705\n        if (typeof this === 'undefined' || this === null) {                                                            // 1706\n            throw new TypeError(\"can't convert \" + this + ' to object');                                               // 1707\n        }                                                                                                              // 1708\n        var name = this.name;                                                                                          // 1709\n        if (typeof name === 'undefined') {                                                                             // 1710\n            name = 'Error';                                                                                            // 1711\n        } else if (typeof name !== 'string') {                                                                         // 1712\n            name = $String(name);                                                                                      // 1713\n        }                                                                                                              // 1714\n        var msg = this.message;                                                                                        // 1715\n        if (typeof msg === 'undefined') {                                                                              // 1716\n            msg = '';                                                                                                  // 1717\n        } else if (typeof msg !== 'string') {                                                                          // 1718\n            msg = $String(msg);                                                                                        // 1719\n        }                                                                                                              // 1720\n        if (!name) {                                                                                                   // 1721\n            return msg;                                                                                                // 1722\n        }                                                                                                              // 1723\n        if (!msg) {                                                                                                    // 1724\n            return name;                                                                                               // 1725\n        }                                                                                                              // 1726\n        return name + ': ' + msg;                                                                                      // 1727\n    };                                                                                                                 // 1728\n    // can't use defineProperties here because of toString enumeration issue in IE <= 8                                // 1729\n    Error.prototype.toString = errorToStringShim;                                                                      // 1730\n}                                                                                                                      // 1731\n                                                                                                                       // 1732\n}));                                                                                                                   // 1733\n                                                                                                                       // 1734\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/es5-shim/export_globals.js                                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar global = this;                                                                                                     // 1\n                                                                                                                       // 2\nif (global.Date !== Date) {                                                                                            // 3\n  global.Date = Date;                                                                                                  // 4\n}                                                                                                                      // 5\n                                                                                                                       // 6\nif (global.parseInt !== parseInt) {                                                                                    // 7\n  global.parseInt = parseInt;                                                                                          // 8\n}                                                                                                                      // 9\n                                                                                                                       // 10\nvar Sp = String.prototype;                                                                                             // 11\nif (Sp.replace !== originalStringReplace) {                                                                            // 12\n  // Restore the original value of String#replace, because the es5-shim                                                // 13\n  // reimplementation is buggy. See also import_globals.js.                                                            // 14\n  Sp.replace = originalStringReplace;                                                                                  // 15\n}                                                                                                                      // 16\n                                                                                                                       // 17\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['es5-shim'] = {}, {\n  Date: Date,\n  parseInt: parseInt\n});\n\n})();\n","servePath":"/packages/es5-shim.js","sourceMap":{"version":3,"sources":["/packages/es5-shim/import_globals.js","/packages/es5-shim/.npm/package/node_modules/es5-shim/es5-shim.js","/packages/es5-shim/export_globals.js"],"names":[],"mappings":";;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACfrsDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H","file":"/packages/es5-shim.js","sourcesContent":["var global = this;\n\n// Because the es5-{shim,sham}.js code assigns to Date and parseInt,\n// Meteor treats them as package variables, and so declares them as\n// variables in package scope, which causes some references to Date and\n// parseInt in the shim/sham code to refer to those undefined package\n// variables. The simplest solution seems to be to initialize the package\n// variables to their appropriate global values.\nDate = global.Date;\nparseInt = global.parseInt;\n\n// Save the original String#replace method, because es5-shim's\n// reimplementation of it causes problems in markdown/showdown.js.\n// This original method will be restored in export_globals.js.\noriginalStringReplace = String.prototype.replace;\n","/*!\n * https://github.com/es-shims/es5-shim\n * @license es5-shim Copyright 2009-2015 by contributors, MIT License\n * see https://github.com/es-shims/es5-shim/blob/master/LICENSE\n */\n\n// vim: ts=4 sts=4 sw=4 expandtab\n\n// Add semicolon to prevent IIFE from being passed as argument to concatenated code.\n;\n\n// UMD (Universal Module Definition)\n// see https://github.com/umdjs/umd/blob/master/returnExports.js\n(function (root, factory) {\n    'use strict';\n\n    /* global define, exports, module */\n    if (typeof define === 'function' && define.amd) {\n        // AMD. Register as an anonymous module.\n        define(factory);\n    } else if (typeof exports === 'object') {\n        // Node. Does not work with strict CommonJS, but\n        // only CommonJS-like enviroments that support module.exports,\n        // like Node.\n        module.exports = factory();\n    } else {\n        // Browser globals (root is window)\n        root.returnExports = factory();\n    }\n}(this, function () {\n\n/**\n * Brings an environment as close to ECMAScript 5 compliance\n * as is possible with the facilities of erstwhile engines.\n *\n * Annotated ES5: http://es5.github.com/ (specific links below)\n * ES5 Spec: http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf\n * Required reading: http://javascriptweblog.wordpress.com/2011/12/05/extending-javascript-natives/\n */\n\n// Shortcut to an often accessed properties, in order to avoid multiple\n// dereference that costs universally. This also holds a reference to known-good\n// functions.\nvar $Array = Array;\nvar ArrayPrototype = $Array.prototype;\nvar $Object = Object;\nvar ObjectPrototype = $Object.prototype;\nvar FunctionPrototype = Function.prototype;\nvar $String = String;\nvar StringPrototype = $String.prototype;\nvar $Number = Number;\nvar NumberPrototype = $Number.prototype;\nvar array_slice = ArrayPrototype.slice;\nvar array_splice = ArrayPrototype.splice;\nvar array_push = ArrayPrototype.push;\nvar array_unshift = ArrayPrototype.unshift;\nvar array_concat = ArrayPrototype.concat;\nvar call = FunctionPrototype.call;\nvar max = Math.max;\nvar min = Math.min;\n\n// Having a toString local variable name breaks in Opera so use to_string.\nvar to_string = ObjectPrototype.toString;\n\nvar hasToStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';\nvar isCallable; /* inlined from https://npmjs.com/is-callable */ var fnToStr = Function.prototype.toString, tryFunctionObject = function tryFunctionObject(value) { try { fnToStr.call(value); return true; } catch (e) { return false; } }, fnClass = '[object Function]', genClass = '[object GeneratorFunction]'; isCallable = function isCallable(value) { if (typeof value !== 'function') { return false; } if (hasToStringTag) { return tryFunctionObject(value); } var strClass = to_string.call(value); return strClass === fnClass || strClass === genClass; };\nvar isRegex; /* inlined from https://npmjs.com/is-regex */ var regexExec = RegExp.prototype.exec, tryRegexExec = function tryRegexExec(value) { try { regexExec.call(value); return true; } catch (e) { return false; } }, regexClass = '[object RegExp]'; isRegex = function isRegex(value) { if (typeof value !== 'object') { return false; } return hasToStringTag ? tryRegexExec(value) : to_string.call(value) === regexClass; };\nvar isString; /* inlined from https://npmjs.com/is-string */ var strValue = String.prototype.valueOf, tryStringObject = function tryStringObject(value) { try { strValue.call(value); return true; } catch (e) { return false; } }, stringClass = '[object String]'; isString = function isString(value) { if (typeof value === 'string') { return true; } if (typeof value !== 'object') { return false; } return hasToStringTag ? tryStringObject(value) : to_string.call(value) === stringClass; };\n\n/* inlined from http://npmjs.com/define-properties */\nvar defineProperties = (function (has) {\n  var supportsDescriptors = $Object.defineProperty && (function () {\n      try {\n          var obj = {};\n          $Object.defineProperty(obj, 'x', { enumerable: false, value: obj });\n          for (var _ in obj) { return false; }\n          return obj.x === obj;\n      } catch (e) { /* this is ES3 */\n          return false;\n      }\n  }());\n\n  // Define configurable, writable and non-enumerable props\n  // if they don't exist.\n  var defineProperty;\n  if (supportsDescriptors) {\n      defineProperty = function (object, name, method, forceAssign) {\n          if (!forceAssign && (name in object)) { return; }\n          $Object.defineProperty(object, name, {\n              configurable: true,\n              enumerable: false,\n              writable: true,\n              value: method\n          });\n      };\n  } else {\n      defineProperty = function (object, name, method, forceAssign) {\n          if (!forceAssign && (name in object)) { return; }\n          object[name] = method;\n      };\n  }\n  return function defineProperties(object, map, forceAssign) {\n      for (var name in map) {\n          if (has.call(map, name)) {\n            defineProperty(object, name, map[name], forceAssign);\n          }\n      }\n  };\n}(ObjectPrototype.hasOwnProperty));\n\n//\n// Util\n// ======\n//\n\n/* replaceable with https://npmjs.com/package/es-abstract /helpers/isPrimitive */\nvar isPrimitive = function isPrimitive(input) {\n    var type = typeof input;\n    return input === null || (type !== 'object' && type !== 'function');\n};\n\nvar isActualNaN = $Number.isNaN || function (x) { return x !== x; };\n\nvar ES = {\n    // ES5 9.4\n    // http://es5.github.com/#x9.4\n    // http://jsperf.com/to-integer\n    /* replaceable with https://npmjs.com/package/es-abstract ES5.ToInteger */\n    ToInteger: function ToInteger(num) {\n        var n = +num;\n        if (isActualNaN(n)) {\n            n = 0;\n        } else if (n !== 0 && n !== (1 / 0) && n !== -(1 / 0)) {\n            n = (n > 0 || -1) * Math.floor(Math.abs(n));\n        }\n        return n;\n    },\n\n    /* replaceable with https://npmjs.com/package/es-abstract ES5.ToPrimitive */\n    ToPrimitive: function ToPrimitive(input) {\n        var val, valueOf, toStr;\n        if (isPrimitive(input)) {\n            return input;\n        }\n        valueOf = input.valueOf;\n        if (isCallable(valueOf)) {\n            val = valueOf.call(input);\n            if (isPrimitive(val)) {\n                return val;\n            }\n        }\n        toStr = input.toString;\n        if (isCallable(toStr)) {\n            val = toStr.call(input);\n            if (isPrimitive(val)) {\n                return val;\n            }\n        }\n        throw new TypeError();\n    },\n\n    // ES5 9.9\n    // http://es5.github.com/#x9.9\n    /* replaceable with https://npmjs.com/package/es-abstract ES5.ToObject */\n    ToObject: function (o) {\n        /* jshint eqnull: true */\n        if (o == null) { // this matches both null and undefined\n            throw new TypeError(\"can't convert \" + o + ' to object');\n        }\n        return $Object(o);\n    },\n\n    /* replaceable with https://npmjs.com/package/es-abstract ES5.ToUint32 */\n    ToUint32: function ToUint32(x) {\n        return x >>> 0;\n    }\n};\n\n//\n// Function\n// ========\n//\n\n// ES-5 15.3.4.5\n// http://es5.github.com/#x15.3.4.5\n\nvar Empty = function Empty() {};\n\ndefineProperties(FunctionPrototype, {\n    bind: function bind(that) { // .length is 1\n        // 1. Let Target be the this value.\n        var target = this;\n        // 2. If IsCallable(Target) is false, throw a TypeError exception.\n        if (!isCallable(target)) {\n            throw new TypeError('Function.prototype.bind called on incompatible ' + target);\n        }\n        // 3. Let A be a new (possibly empty) internal list of all of the\n        //   argument values provided after thisArg (arg1, arg2 etc), in order.\n        // XXX slicedArgs will stand in for \"A\" if used\n        var args = array_slice.call(arguments, 1); // for normal call\n        // 4. Let F be a new native ECMAScript object.\n        // 11. Set the [[Prototype]] internal property of F to the standard\n        //   built-in Function prototype object as specified in 15.3.3.1.\n        // 12. Set the [[Call]] internal property of F as described in\n        //   15.3.4.5.1.\n        // 13. Set the [[Construct]] internal property of F as described in\n        //   15.3.4.5.2.\n        // 14. Set the [[HasInstance]] internal property of F as described in\n        //   15.3.4.5.3.\n        var bound;\n        var binder = function () {\n\n            if (this instanceof bound) {\n                // 15.3.4.5.2 [[Construct]]\n                // When the [[Construct]] internal method of a function object,\n                // F that was created using the bind function is called with a\n                // list of arguments ExtraArgs, the following steps are taken:\n                // 1. Let target be the value of F's [[TargetFunction]]\n                //   internal property.\n                // 2. If target has no [[Construct]] internal method, a\n                //   TypeError exception is thrown.\n                // 3. Let boundArgs be the value of F's [[BoundArgs]] internal\n                //   property.\n                // 4. Let args be a new list containing the same values as the\n                //   list boundArgs in the same order followed by the same\n                //   values as the list ExtraArgs in the same order.\n                // 5. Return the result of calling the [[Construct]] internal\n                //   method of target providing args as the arguments.\n\n                var result = target.apply(\n                    this,\n                    array_concat.call(args, array_slice.call(arguments))\n                );\n                if ($Object(result) === result) {\n                    return result;\n                }\n                return this;\n\n            } else {\n                // 15.3.4.5.1 [[Call]]\n                // When the [[Call]] internal method of a function object, F,\n                // which was created using the bind function is called with a\n                // this value and a list of arguments ExtraArgs, the following\n                // steps are taken:\n                // 1. Let boundArgs be the value of F's [[BoundArgs]] internal\n                //   property.\n                // 2. Let boundThis be the value of F's [[BoundThis]] internal\n                //   property.\n                // 3. Let target be the value of F's [[TargetFunction]] internal\n                //   property.\n                // 4. Let args be a new list containing the same values as the\n                //   list boundArgs in the same order followed by the same\n                //   values as the list ExtraArgs in the same order.\n                // 5. Return the result of calling the [[Call]] internal method\n                //   of target providing boundThis as the this value and\n                //   providing args as the arguments.\n\n                // equiv: target.call(this, ...boundArgs, ...args)\n                return target.apply(\n                    that,\n                    array_concat.call(args, array_slice.call(arguments))\n                );\n\n            }\n\n        };\n\n        // 15. If the [[Class]] internal property of Target is \"Function\", then\n        //     a. Let L be the length property of Target minus the length of A.\n        //     b. Set the length own property of F to either 0 or L, whichever is\n        //       larger.\n        // 16. Else set the length own property of F to 0.\n\n        var boundLength = max(0, target.length - args.length);\n\n        // 17. Set the attributes of the length own property of F to the values\n        //   specified in 15.3.5.1.\n        var boundArgs = [];\n        for (var i = 0; i < boundLength; i++) {\n            array_push.call(boundArgs, '$' + i);\n        }\n\n        // XXX Build a dynamic function with desired amount of arguments is the only\n        // way to set the length property of a function.\n        // In environments where Content Security Policies enabled (Chrome extensions,\n        // for ex.) all use of eval or Function costructor throws an exception.\n        // However in all of these environments Function.prototype.bind exists\n        // and so this code will never be executed.\n        bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this, arguments); }')(binder);\n\n        if (target.prototype) {\n            Empty.prototype = target.prototype;\n            bound.prototype = new Empty();\n            // Clean up dangling references.\n            Empty.prototype = null;\n        }\n\n        // TODO\n        // 18. Set the [[Extensible]] internal property of F to true.\n\n        // TODO\n        // 19. Let thrower be the [[ThrowTypeError]] function Object (13.2.3).\n        // 20. Call the [[DefineOwnProperty]] internal method of F with\n        //   arguments \"caller\", PropertyDescriptor {[[Get]]: thrower, [[Set]]:\n        //   thrower, [[Enumerable]]: false, [[Configurable]]: false}, and\n        //   false.\n        // 21. Call the [[DefineOwnProperty]] internal method of F with\n        //   arguments \"arguments\", PropertyDescriptor {[[Get]]: thrower,\n        //   [[Set]]: thrower, [[Enumerable]]: false, [[Configurable]]: false},\n        //   and false.\n\n        // TODO\n        // NOTE Function objects created using Function.prototype.bind do not\n        // have a prototype property or the [[Code]], [[FormalParameters]], and\n        // [[Scope]] internal properties.\n        // XXX can't delete prototype in pure-js.\n\n        // 22. Return F.\n        return bound;\n    }\n});\n\n// _Please note: Shortcuts are defined after `Function.prototype.bind` as we\n// us it in defining shortcuts.\nvar owns = call.bind(ObjectPrototype.hasOwnProperty);\nvar toStr = call.bind(ObjectPrototype.toString);\nvar strSlice = call.bind(StringPrototype.slice);\nvar strSplit = call.bind(StringPrototype.split);\nvar strIndexOf = call.bind(StringPrototype.indexOf);\nvar push = call.bind(array_push);\n\n//\n// Array\n// =====\n//\n\nvar isArray = $Array.isArray || function isArray(obj) {\n    return toStr(obj) === '[object Array]';\n};\n\n// ES5 15.4.4.12\n// http://es5.github.com/#x15.4.4.13\n// Return len+argCount.\n// [bugfix, ielt8]\n// IE < 8 bug: [].unshift(0) === undefined but should be \"1\"\nvar hasUnshiftReturnValueBug = [].unshift(0) !== 1;\ndefineProperties(ArrayPrototype, {\n    unshift: function () {\n        array_unshift.apply(this, arguments);\n        return this.length;\n    }\n}, hasUnshiftReturnValueBug);\n\n// ES5 15.4.3.2\n// http://es5.github.com/#x15.4.3.2\n// https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/isArray\ndefineProperties($Array, { isArray: isArray });\n\n// The IsCallable() check in the Array functions\n// has been replaced with a strict check on the\n// internal class of the object to trap cases where\n// the provided function was actually a regular\n// expression literal, which in V8 and\n// JavaScriptCore is a typeof \"function\".  Only in\n// V8 are regular expression literals permitted as\n// reduce parameters, so it is desirable in the\n// general case for the shim to match the more\n// strict and common behavior of rejecting regular\n// expressions.\n\n// ES5 15.4.4.18\n// http://es5.github.com/#x15.4.4.18\n// https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/array/forEach\n\n// Check failure of by-index access of string characters (IE < 9)\n// and failure of `0 in boxedString` (Rhino)\nvar boxedString = $Object('a');\nvar splitString = boxedString[0] !== 'a' || !(0 in boxedString);\n\nvar properlyBoxesContext = function properlyBoxed(method) {\n    // Check node 0.6.21 bug where third parameter is not boxed\n    var properlyBoxesNonStrict = true;\n    var properlyBoxesStrict = true;\n    if (method) {\n        method.call('foo', function (_, __, context) {\n            if (typeof context !== 'object') { properlyBoxesNonStrict = false; }\n        });\n\n        method.call([1], function () {\n            'use strict';\n\n            properlyBoxesStrict = typeof this === 'string';\n        }, 'x');\n    }\n    return !!method && properlyBoxesNonStrict && properlyBoxesStrict;\n};\n\ndefineProperties(ArrayPrototype, {\n    forEach: function forEach(callbackfn/*, thisArg*/) {\n        var object = ES.ToObject(this);\n        var self = splitString && isString(this) ? strSplit(this, '') : object;\n        var i = -1;\n        var length = ES.ToUint32(self.length);\n        var T;\n        if (arguments.length > 1) {\n          T = arguments[1];\n        }\n\n        // If no callback function or if callback is not a callable function\n        if (!isCallable(callbackfn)) {\n            throw new TypeError('Array.prototype.forEach callback must be a function');\n        }\n\n        while (++i < length) {\n            if (i in self) {\n                // Invoke the callback function with call, passing arguments:\n                // context, property value, property key, thisArg object\n                if (typeof T === 'undefined') {\n                    callbackfn(self[i], i, object);\n                } else {\n                    callbackfn.call(T, self[i], i, object);\n                }\n            }\n        }\n    }\n}, !properlyBoxesContext(ArrayPrototype.forEach));\n\n// ES5 15.4.4.19\n// http://es5.github.com/#x15.4.4.19\n// https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/map\ndefineProperties(ArrayPrototype, {\n    map: function map(callbackfn/*, thisArg*/) {\n        var object = ES.ToObject(this);\n        var self = splitString && isString(this) ? strSplit(this, '') : object;\n        var length = ES.ToUint32(self.length);\n        var result = $Array(length);\n        var T;\n        if (arguments.length > 1) {\n            T = arguments[1];\n        }\n\n        // If no callback function or if callback is not a callable function\n        if (!isCallable(callbackfn)) {\n            throw new TypeError('Array.prototype.map callback must be a function');\n        }\n\n        for (var i = 0; i < length; i++) {\n            if (i in self) {\n                if (typeof T === 'undefined') {\n                    result[i] = callbackfn(self[i], i, object);\n                } else {\n                    result[i] = callbackfn.call(T, self[i], i, object);\n                }\n            }\n        }\n        return result;\n    }\n}, !properlyBoxesContext(ArrayPrototype.map));\n\n// ES5 15.4.4.20\n// http://es5.github.com/#x15.4.4.20\n// https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/filter\ndefineProperties(ArrayPrototype, {\n    filter: function filter(callbackfn/*, thisArg*/) {\n        var object = ES.ToObject(this);\n        var self = splitString && isString(this) ? strSplit(this, '') : object;\n        var length = ES.ToUint32(self.length);\n        var result = [];\n        var value;\n        var T;\n        if (arguments.length > 1) {\n            T = arguments[1];\n        }\n\n        // If no callback function or if callback is not a callable function\n        if (!isCallable(callbackfn)) {\n            throw new TypeError('Array.prototype.filter callback must be a function');\n        }\n\n        for (var i = 0; i < length; i++) {\n            if (i in self) {\n                value = self[i];\n                if (typeof T === 'undefined' ? callbackfn(value, i, object) : callbackfn.call(T, value, i, object)) {\n                    push(result, value);\n                }\n            }\n        }\n        return result;\n    }\n}, !properlyBoxesContext(ArrayPrototype.filter));\n\n// ES5 15.4.4.16\n// http://es5.github.com/#x15.4.4.16\n// https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/every\ndefineProperties(ArrayPrototype, {\n    every: function every(callbackfn/*, thisArg*/) {\n        var object = ES.ToObject(this);\n        var self = splitString && isString(this) ? strSplit(this, '') : object;\n        var length = ES.ToUint32(self.length);\n        var T;\n        if (arguments.length > 1) {\n            T = arguments[1];\n        }\n\n        // If no callback function or if callback is not a callable function\n        if (!isCallable(callbackfn)) {\n            throw new TypeError('Array.prototype.every callback must be a function');\n        }\n\n        for (var i = 0; i < length; i++) {\n            if (i in self && !(typeof T === 'undefined' ? callbackfn(self[i], i, object) : callbackfn.call(T, self[i], i, object))) {\n                return false;\n            }\n        }\n        return true;\n    }\n}, !properlyBoxesContext(ArrayPrototype.every));\n\n// ES5 15.4.4.17\n// http://es5.github.com/#x15.4.4.17\n// https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/some\ndefineProperties(ArrayPrototype, {\n    some: function some(callbackfn/*, thisArg */) {\n        var object = ES.ToObject(this);\n        var self = splitString && isString(this) ? strSplit(this, '') : object;\n        var length = ES.ToUint32(self.length);\n        var T;\n        if (arguments.length > 1) {\n            T = arguments[1];\n        }\n\n        // If no callback function or if callback is not a callable function\n        if (!isCallable(callbackfn)) {\n            throw new TypeError('Array.prototype.some callback must be a function');\n        }\n\n        for (var i = 0; i < length; i++) {\n            if (i in self && (typeof T === 'undefined' ? callbackfn(self[i], i, object) : callbackfn.call(T, self[i], i, object))) {\n                return true;\n            }\n        }\n        return false;\n    }\n}, !properlyBoxesContext(ArrayPrototype.some));\n\n// ES5 15.4.4.21\n// http://es5.github.com/#x15.4.4.21\n// https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/reduce\nvar reduceCoercesToObject = false;\nif (ArrayPrototype.reduce) {\n    reduceCoercesToObject = typeof ArrayPrototype.reduce.call('es5', function (_, __, ___, list) { return list; }) === 'object';\n}\ndefineProperties(ArrayPrototype, {\n    reduce: function reduce(callbackfn/*, initialValue*/) {\n        var object = ES.ToObject(this);\n        var self = splitString && isString(this) ? strSplit(this, '') : object;\n        var length = ES.ToUint32(self.length);\n\n        // If no callback function or if callback is not a callable function\n        if (!isCallable(callbackfn)) {\n            throw new TypeError('Array.prototype.reduce callback must be a function');\n        }\n\n        // no value to return if no initial value and an empty array\n        if (length === 0 && arguments.length === 1) {\n            throw new TypeError('reduce of empty array with no initial value');\n        }\n\n        var i = 0;\n        var result;\n        if (arguments.length >= 2) {\n            result = arguments[1];\n        } else {\n            do {\n                if (i in self) {\n                    result = self[i++];\n                    break;\n                }\n\n                // if array contains no values, no initial value to return\n                if (++i >= length) {\n                    throw new TypeError('reduce of empty array with no initial value');\n                }\n            } while (true);\n        }\n\n        for (; i < length; i++) {\n            if (i in self) {\n                result = callbackfn(result, self[i], i, object);\n            }\n        }\n\n        return result;\n    }\n}, !reduceCoercesToObject);\n\n// ES5 15.4.4.22\n// http://es5.github.com/#x15.4.4.22\n// https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/reduceRight\nvar reduceRightCoercesToObject = false;\nif (ArrayPrototype.reduceRight) {\n    reduceRightCoercesToObject = typeof ArrayPrototype.reduceRight.call('es5', function (_, __, ___, list) { return list; }) === 'object';\n}\ndefineProperties(ArrayPrototype, {\n    reduceRight: function reduceRight(callbackfn/*, initial*/) {\n        var object = ES.ToObject(this);\n        var self = splitString && isString(this) ? strSplit(this, '') : object;\n        var length = ES.ToUint32(self.length);\n\n        // If no callback function or if callback is not a callable function\n        if (!isCallable(callbackfn)) {\n            throw new TypeError('Array.prototype.reduceRight callback must be a function');\n        }\n\n        // no value to return if no initial value, empty array\n        if (length === 0 && arguments.length === 1) {\n            throw new TypeError('reduceRight of empty array with no initial value');\n        }\n\n        var result;\n        var i = length - 1;\n        if (arguments.length >= 2) {\n            result = arguments[1];\n        } else {\n            do {\n                if (i in self) {\n                    result = self[i--];\n                    break;\n                }\n\n                // if array contains no values, no initial value to return\n                if (--i < 0) {\n                    throw new TypeError('reduceRight of empty array with no initial value');\n                }\n            } while (true);\n        }\n\n        if (i < 0) {\n            return result;\n        }\n\n        do {\n            if (i in self) {\n                result = callbackfn(result, self[i], i, object);\n            }\n        } while (i--);\n\n        return result;\n    }\n}, !reduceRightCoercesToObject);\n\n// ES5 15.4.4.14\n// http://es5.github.com/#x15.4.4.14\n// https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/indexOf\nvar hasFirefox2IndexOfBug = ArrayPrototype.indexOf && [0, 1].indexOf(1, 2) !== -1;\ndefineProperties(ArrayPrototype, {\n    indexOf: function indexOf(searchElement/*, fromIndex */) {\n        var self = splitString && isString(this) ? strSplit(this, '') : ES.ToObject(this);\n        var length = ES.ToUint32(self.length);\n\n        if (length === 0) {\n            return -1;\n        }\n\n        var i = 0;\n        if (arguments.length > 1) {\n            i = ES.ToInteger(arguments[1]);\n        }\n\n        // handle negative indices\n        i = i >= 0 ? i : max(0, length + i);\n        for (; i < length; i++) {\n            if (i in self && self[i] === searchElement) {\n                return i;\n            }\n        }\n        return -1;\n    }\n}, hasFirefox2IndexOfBug);\n\n// ES5 15.4.4.15\n// http://es5.github.com/#x15.4.4.15\n// https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/lastIndexOf\nvar hasFirefox2LastIndexOfBug = ArrayPrototype.lastIndexOf && [0, 1].lastIndexOf(0, -3) !== -1;\ndefineProperties(ArrayPrototype, {\n    lastIndexOf: function lastIndexOf(searchElement/*, fromIndex */) {\n        var self = splitString && isString(this) ? strSplit(this, '') : ES.ToObject(this);\n        var length = ES.ToUint32(self.length);\n\n        if (length === 0) {\n            return -1;\n        }\n        var i = length - 1;\n        if (arguments.length > 1) {\n            i = min(i, ES.ToInteger(arguments[1]));\n        }\n        // handle negative indices\n        i = i >= 0 ? i : length - Math.abs(i);\n        for (; i >= 0; i--) {\n            if (i in self && searchElement === self[i]) {\n                return i;\n            }\n        }\n        return -1;\n    }\n}, hasFirefox2LastIndexOfBug);\n\n// ES5 15.4.4.12\n// http://es5.github.com/#x15.4.4.12\nvar spliceNoopReturnsEmptyArray = (function () {\n    var a = [1, 2];\n    var result = a.splice();\n    return a.length === 2 && isArray(result) && result.length === 0;\n}());\ndefineProperties(ArrayPrototype, {\n    // Safari 5.0 bug where .splice() returns undefined\n    splice: function splice(start, deleteCount) {\n        if (arguments.length === 0) {\n            return [];\n        } else {\n            return array_splice.apply(this, arguments);\n        }\n    }\n}, !spliceNoopReturnsEmptyArray);\n\nvar spliceWorksWithEmptyObject = (function () {\n    var obj = {};\n    ArrayPrototype.splice.call(obj, 0, 0, 1);\n    return obj.length === 1;\n}());\ndefineProperties(ArrayPrototype, {\n    splice: function splice(start, deleteCount) {\n        if (arguments.length === 0) { return []; }\n        var args = arguments;\n        this.length = max(ES.ToInteger(this.length), 0);\n        if (arguments.length > 0 && typeof deleteCount !== 'number') {\n            args = array_slice.call(arguments);\n            if (args.length < 2) {\n                push(args, this.length - start);\n            } else {\n                args[1] = ES.ToInteger(deleteCount);\n            }\n        }\n        return array_splice.apply(this, args);\n    }\n}, !spliceWorksWithEmptyObject);\nvar spliceWorksWithLargeSparseArrays = (function () {\n    // Per https://github.com/es-shims/es5-shim/issues/295\n    // Safari 7/8 breaks with sparse arrays of size 1e5 or greater\n    var arr = new $Array(1e5);\n    // note: the index MUST be 8 or larger or the test will false pass\n    arr[8] = 'x';\n    arr.splice(1, 1);\n    // note: this test must be defined *after* the indexOf shim\n    // per https://github.com/es-shims/es5-shim/issues/313\n    return arr.indexOf('x') === 7;\n}());\nvar spliceWorksWithSmallSparseArrays = (function () {\n    // Per https://github.com/es-shims/es5-shim/issues/295\n    // Opera 12.15 breaks on this, no idea why.\n    var n = 256;\n    var arr = [];\n    arr[n] = 'a';\n    arr.splice(n + 1, 0, 'b');\n    return arr[n] === 'a';\n}());\ndefineProperties(ArrayPrototype, {\n    splice: function splice(start, deleteCount) {\n        var O = ES.ToObject(this);\n        var A = [];\n        var len = ES.ToUint32(O.length);\n        var relativeStart = ES.ToInteger(start);\n        var actualStart = relativeStart < 0 ? max((len + relativeStart), 0) : min(relativeStart, len);\n        var actualDeleteCount = min(max(ES.ToInteger(deleteCount), 0), len - actualStart);\n\n        var k = 0;\n        var from;\n        while (k < actualDeleteCount) {\n            from = $String(actualStart + k);\n            if (owns(O, from)) {\n                A[k] = O[from];\n            }\n            k += 1;\n        }\n\n        var items = array_slice.call(arguments, 2);\n        var itemCount = items.length;\n        var to;\n        if (itemCount < actualDeleteCount) {\n            k = actualStart;\n            while (k < (len - actualDeleteCount)) {\n                from = $String(k + actualDeleteCount);\n                to = $String(k + itemCount);\n                if (owns(O, from)) {\n                    O[to] = O[from];\n                } else {\n                    delete O[to];\n                }\n                k += 1;\n            }\n            k = len;\n            while (k > (len - actualDeleteCount + itemCount)) {\n                delete O[k - 1];\n                k -= 1;\n            }\n        } else if (itemCount > actualDeleteCount) {\n            k = len - actualDeleteCount;\n            while (k > actualStart) {\n                from = $String(k + actualDeleteCount - 1);\n                to = $String(k + itemCount - 1);\n                if (owns(O, from)) {\n                    O[to] = O[from];\n                } else {\n                    delete O[to];\n                }\n                k -= 1;\n            }\n        }\n        k = actualStart;\n        for (var i = 0; i < items.length; ++i) {\n            O[k] = items[i];\n            k += 1;\n        }\n        O.length = len - actualDeleteCount + itemCount;\n\n        return A;\n    }\n}, !spliceWorksWithLargeSparseArrays || !spliceWorksWithSmallSparseArrays);\n\nvar hasJoinUndefinedBug = [1, 2].join(undefined) !== '1,2';\nvar originalJoin = ArrayPrototype.join;\ndefineProperties(ArrayPrototype, {\n    join: function join(separator) {\n        return originalJoin.call(this, typeof separator === 'undefined' ? ',' : separator);\n    }\n}, hasJoinUndefinedBug);\n\nvar pushShim = function push(item) {\n    var O = ES.ToObject(this);\n    var n = ES.ToUint32(O.length);\n    var i = 0;\n    while (i < arguments.length) {\n        O[n + i] = arguments[i];\n        i += 1;\n    }\n    O.length = n + i;\n    return n + i;\n};\n\nvar pushIsNotGeneric = (function () {\n    var obj = {};\n    var result = Array.prototype.push.call(obj, undefined);\n    return result !== 1 || obj.length !== 1 || typeof obj[0] !== 'undefined' || !owns(obj, 0);\n}());\ndefineProperties(ArrayPrototype, {\n    push: function push(item) {\n        if (isArray(this)) {\n            return array_push.apply(this, arguments);\n        }\n        return pushShim.apply(this, arguments);\n    }\n}, pushIsNotGeneric);\n\n// This fixes a very weird bug in Opera 10.6 when pushing `undefined\nvar pushUndefinedIsWeird = (function () {\n    var arr = [];\n    var result = arr.push(undefined);\n    return result !== 1 || arr.length !== 1 || typeof arr[0] !== 'undefined' || !owns(arr, 0);\n}());\ndefineProperties(ArrayPrototype, { push: pushShim }, pushUndefinedIsWeird);\n\n//\n// Object\n// ======\n//\n\n// ES5 15.2.3.14\n// http://es5.github.com/#x15.2.3.14\n\n// http://whattheheadsaid.com/2010/10/a-safer-object-keys-compatibility-implementation\nvar hasDontEnumBug = !({ 'toString': null }).propertyIsEnumerable('toString');\nvar hasProtoEnumBug = function () {}.propertyIsEnumerable('prototype');\nvar hasStringEnumBug = !owns('x', '0');\nvar equalsConstructorPrototype = function (o) {\n    var ctor = o.constructor;\n    return ctor && ctor.prototype === o;\n};\nvar blacklistedKeys = {\n    $window: true,\n    $console: true,\n    $parent: true,\n    $self: true,\n    $frame: true,\n    $frames: true,\n    $frameElement: true,\n    $webkitIndexedDB: true,\n    $webkitStorageInfo: true\n};\nvar hasAutomationEqualityBug = (function () {\n    /* globals window */\n    if (typeof window === 'undefined') { return false; }\n    for (var k in window) {\n        try {\n            if (!blacklistedKeys['$' + k] && owns(window, k) && window[k] !== null && typeof window[k] === 'object') {\n                equalsConstructorPrototype(window[k]);\n            }\n        } catch (e) {\n            return true;\n        }\n    }\n    return false;\n}());\nvar equalsConstructorPrototypeIfNotBuggy = function (object) {\n    if (typeof window === 'undefined' || !hasAutomationEqualityBug) { return equalsConstructorPrototype(object); }\n    try {\n        return equalsConstructorPrototype(object);\n    } catch (e) {\n        return false;\n    }\n};\nvar dontEnums = [\n    'toString',\n    'toLocaleString',\n    'valueOf',\n    'hasOwnProperty',\n    'isPrototypeOf',\n    'propertyIsEnumerable',\n    'constructor'\n];\nvar dontEnumsLength = dontEnums.length;\n\n// taken directly from https://github.com/ljharb/is-arguments/blob/master/index.js\n// can be replaced with require('is-arguments') if we ever use a build process instead\nvar isStandardArguments = function isArguments(value) {\n    return toStr(value) === '[object Arguments]';\n};\nvar isLegacyArguments = function isArguments(value) {\n    return value !== null &&\n        typeof value === 'object' &&\n        typeof value.length === 'number' &&\n        value.length >= 0 &&\n        !isArray(value) &&\n        isCallable(value.callee);\n};\nvar isArguments = isStandardArguments(arguments) ? isStandardArguments : isLegacyArguments;\n\ndefineProperties($Object, {\n    keys: function keys(object) {\n        var isFn = isCallable(object);\n        var isArgs = isArguments(object);\n        var isObject = object !== null && typeof object === 'object';\n        var isStr = isObject && isString(object);\n\n        if (!isObject && !isFn && !isArgs) {\n            throw new TypeError('Object.keys called on a non-object');\n        }\n\n        var theKeys = [];\n        var skipProto = hasProtoEnumBug && isFn;\n        if ((isStr && hasStringEnumBug) || isArgs) {\n            for (var i = 0; i < object.length; ++i) {\n                push(theKeys, $String(i));\n            }\n        }\n\n        if (!isArgs) {\n            for (var name in object) {\n                if (!(skipProto && name === 'prototype') && owns(object, name)) {\n                    push(theKeys, $String(name));\n                }\n            }\n        }\n\n        if (hasDontEnumBug) {\n            var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);\n            for (var j = 0; j < dontEnumsLength; j++) {\n                var dontEnum = dontEnums[j];\n                if (!(skipConstructor && dontEnum === 'constructor') && owns(object, dontEnum)) {\n                    push(theKeys, dontEnum);\n                }\n            }\n        }\n        return theKeys;\n    }\n});\n\nvar keysWorksWithArguments = $Object.keys && (function () {\n    // Safari 5.0 bug\n    return $Object.keys(arguments).length === 2;\n}(1, 2));\nvar keysHasArgumentsLengthBug = $Object.keys && (function () {\n    var argKeys = $Object.keys(arguments);\n    return arguments.length !== 1 || argKeys.length !== 1 || argKeys[0] !== 1;\n}(1));\nvar originalKeys = $Object.keys;\ndefineProperties($Object, {\n    keys: function keys(object) {\n        if (isArguments(object)) {\n            return originalKeys(array_slice.call(object));\n        } else {\n            return originalKeys(object);\n        }\n    }\n}, !keysWorksWithArguments || keysHasArgumentsLengthBug);\n\n//\n// Date\n// ====\n//\n\n// ES5 15.9.5.43\n// http://es5.github.com/#x15.9.5.43\n// This function returns a String value represent the instance in time\n// represented by this Date object. The format of the String is the Date Time\n// string format defined in 15.9.1.15. All fields are present in the String.\n// The time zone is always UTC, denoted by the suffix Z. If the time value of\n// this object is not a finite Number a RangeError exception is thrown.\nvar negativeDate = -62198755200000;\nvar negativeYearString = '-000001';\nvar hasNegativeDateBug = Date.prototype.toISOString && new Date(negativeDate).toISOString().indexOf(negativeYearString) === -1;\nvar hasSafari51DateBug = Date.prototype.toISOString && new Date(-1).toISOString() !== '1969-12-31T23:59:59.999Z';\n\ndefineProperties(Date.prototype, {\n    toISOString: function toISOString() {\n        var result, length, value, year, month;\n        if (!isFinite(this)) {\n            throw new RangeError('Date.prototype.toISOString called on non-finite value.');\n        }\n\n        year = this.getUTCFullYear();\n\n        month = this.getUTCMonth();\n        // see https://github.com/es-shims/es5-shim/issues/111\n        year += Math.floor(month / 12);\n        month = (month % 12 + 12) % 12;\n\n        // the date time string format is specified in 15.9.1.15.\n        result = [month + 1, this.getUTCDate(), this.getUTCHours(), this.getUTCMinutes(), this.getUTCSeconds()];\n        year = (\n            (year < 0 ? '-' : (year > 9999 ? '+' : '')) +\n            strSlice('00000' + Math.abs(year), (0 <= year && year <= 9999) ? -4 : -6)\n        );\n\n        length = result.length;\n        while (length--) {\n            value = result[length];\n            // pad months, days, hours, minutes, and seconds to have two\n            // digits.\n            if (value < 10) {\n                result[length] = '0' + value;\n            }\n        }\n        // pad milliseconds to have three digits.\n        return (\n            year + '-' + array_slice.call(result, 0, 2).join('-') +\n            'T' + array_slice.call(result, 2).join(':') + '.' +\n            strSlice('000' + this.getUTCMilliseconds(), -3) + 'Z'\n        );\n    }\n}, hasNegativeDateBug || hasSafari51DateBug);\n\n// ES5 15.9.5.44\n// http://es5.github.com/#x15.9.5.44\n// This function provides a String representation of a Date object for use by\n// JSON.stringify (15.12.3).\nvar dateToJSONIsSupported = (function () {\n    try {\n        return Date.prototype.toJSON &&\n            new Date(NaN).toJSON() === null &&\n            new Date(negativeDate).toJSON().indexOf(negativeYearString) !== -1 &&\n            Date.prototype.toJSON.call({ // generic\n                toISOString: function () { return true; }\n            });\n    } catch (e) {\n        return false;\n    }\n}());\nif (!dateToJSONIsSupported) {\n    Date.prototype.toJSON = function toJSON(key) {\n        // When the toJSON method is called with argument key, the following\n        // steps are taken:\n\n        // 1.  Let O be the result of calling ToObject, giving it the this\n        // value as its argument.\n        // 2. Let tv be ES.ToPrimitive(O, hint Number).\n        var O = $Object(this);\n        var tv = ES.ToPrimitive(O);\n        // 3. If tv is a Number and is not finite, return null.\n        if (typeof tv === 'number' && !isFinite(tv)) {\n            return null;\n        }\n        // 4. Let toISO be the result of calling the [[Get]] internal method of\n        // O with argument \"toISOString\".\n        var toISO = O.toISOString;\n        // 5. If IsCallable(toISO) is false, throw a TypeError exception.\n        if (!isCallable(toISO)) {\n            throw new TypeError('toISOString property is not callable');\n        }\n        // 6. Return the result of calling the [[Call]] internal method of\n        //  toISO with O as the this value and an empty argument list.\n        return toISO.call(O);\n\n        // NOTE 1 The argument is ignored.\n\n        // NOTE 2 The toJSON function is intentionally generic; it does not\n        // require that its this value be a Date object. Therefore, it can be\n        // transferred to other kinds of objects for use as a method. However,\n        // it does require that any such object have a toISOString method. An\n        // object is free to use the argument key to filter its\n        // stringification.\n    };\n}\n\n// ES5 15.9.4.2\n// http://es5.github.com/#x15.9.4.2\n// based on work shared by Daniel Friesen (dantman)\n// http://gist.github.com/303249\nvar supportsExtendedYears = Date.parse('+033658-09-27T01:46:40.000Z') === 1e15;\nvar acceptsInvalidDates = !isNaN(Date.parse('2012-04-04T24:00:00.500Z')) || !isNaN(Date.parse('2012-11-31T23:59:59.000Z')) || !isNaN(Date.parse('2012-12-31T23:59:60.000Z'));\nvar doesNotParseY2KNewYear = isNaN(Date.parse('2000-01-01T00:00:00.000Z'));\nif (doesNotParseY2KNewYear || acceptsInvalidDates || !supportsExtendedYears) {\n    // XXX global assignment won't work in embeddings that use\n    // an alternate object for the context.\n    /* global Date: true */\n    /* eslint-disable no-undef */\n    var maxSafeUnsigned32Bit = Math.pow(2, 31) - 1;\n    var secondsWithinMaxSafeUnsigned32Bit = Math.floor(maxSafeUnsigned32Bit / 1e3);\n    var hasSafariSignedIntBug = isActualNaN(new Date(1970, 0, 1, 0, 0, 0, maxSafeUnsigned32Bit + 1).getTime());\n    Date = (function (NativeDate) {\n    /* eslint-enable no-undef */\n        // Date.length === 7\n        var DateShim = function Date(Y, M, D, h, m, s, ms) {\n            var length = arguments.length;\n            var date;\n            if (this instanceof NativeDate) {\n                var seconds = s;\n                var millis = ms;\n                if (hasSafariSignedIntBug && length >= 7 && ms > maxSafeUnsigned32Bit) {\n                    // work around a Safari 8/9 bug where it treats the seconds as signed\n                    var msToShift = Math.floor(ms / maxSafeUnsigned32Bit) * maxSafeUnsigned32Bit;\n                    var sToShift = Math.floor(msToShift / 1e3);\n                    seconds += sToShift;\n                    millis -= sToShift * 1e3;\n                }\n                date = length === 1 && $String(Y) === Y ? // isString(Y)\n                    // We explicitly pass it through parse:\n                    new NativeDate(DateShim.parse(Y)) :\n                    // We have to manually make calls depending on argument\n                    // length here\n                    length >= 7 ? new NativeDate(Y, M, D, h, m, seconds, millis) :\n                    length >= 6 ? new NativeDate(Y, M, D, h, m, seconds) :\n                    length >= 5 ? new NativeDate(Y, M, D, h, m) :\n                    length >= 4 ? new NativeDate(Y, M, D, h) :\n                    length >= 3 ? new NativeDate(Y, M, D) :\n                    length >= 2 ? new NativeDate(Y, M) :\n                    length >= 1 ? new NativeDate(Y) :\n                                  new NativeDate();\n            } else {\n                date = NativeDate.apply(this, arguments);\n            }\n            if (!isPrimitive(date)) {\n              // Prevent mixups with unfixed Date object\n              defineProperties(date, { constructor: DateShim }, true);\n            }\n            return date;\n        };\n\n        // 15.9.1.15 Date Time String Format.\n        var isoDateExpression = new RegExp('^' +\n            '(\\\\d{4}|[+-]\\\\d{6})' + // four-digit year capture or sign +\n                                      // 6-digit extended year\n            '(?:-(\\\\d{2})' + // optional month capture\n            '(?:-(\\\\d{2})' + // optional day capture\n            '(?:' + // capture hours:minutes:seconds.milliseconds\n                'T(\\\\d{2})' + // hours capture\n                ':(\\\\d{2})' + // minutes capture\n                '(?:' + // optional :seconds.milliseconds\n                    ':(\\\\d{2})' + // seconds capture\n                    '(?:(\\\\.\\\\d{1,}))?' + // milliseconds capture\n                ')?' +\n            '(' + // capture UTC offset component\n                'Z|' + // UTC capture\n                '(?:' + // offset specifier +/-hours:minutes\n                    '([-+])' + // sign capture\n                    '(\\\\d{2})' + // hours offset capture\n                    ':(\\\\d{2})' + // minutes offset capture\n                ')' +\n            ')?)?)?)?' +\n        '$');\n\n        var months = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365];\n\n        var dayFromMonth = function dayFromMonth(year, month) {\n            var t = month > 1 ? 1 : 0;\n            return (\n                months[month] +\n                Math.floor((year - 1969 + t) / 4) -\n                Math.floor((year - 1901 + t) / 100) +\n                Math.floor((year - 1601 + t) / 400) +\n                365 * (year - 1970)\n            );\n        };\n\n        var toUTC = function toUTC(t) {\n            var s = 0;\n            var ms = t;\n            if (hasSafariSignedIntBug && ms > maxSafeUnsigned32Bit) {\n                // work around a Safari 8/9 bug where it treats the seconds as signed\n                var msToShift = Math.floor(ms / maxSafeUnsigned32Bit) * maxSafeUnsigned32Bit;\n                var sToShift = Math.floor(msToShift / 1e3);\n                s += sToShift;\n                ms -= sToShift * 1e3;\n            }\n            return $Number(new NativeDate(1970, 0, 1, 0, 0, s, ms));\n        };\n\n        // Copy any custom methods a 3rd party library may have added\n        for (var key in NativeDate) {\n            if (owns(NativeDate, key)) {\n                DateShim[key] = NativeDate[key];\n            }\n        }\n\n        // Copy \"native\" methods explicitly; they may be non-enumerable\n        defineProperties(DateShim, {\n            now: NativeDate.now,\n            UTC: NativeDate.UTC\n        }, true);\n        DateShim.prototype = NativeDate.prototype;\n        defineProperties(DateShim.prototype, {\n            constructor: DateShim\n        }, true);\n\n        // Upgrade Date.parse to handle simplified ISO 8601 strings\n        var parseShim = function parse(string) {\n            var match = isoDateExpression.exec(string);\n            if (match) {\n                // parse months, days, hours, minutes, seconds, and milliseconds\n                // provide default values if necessary\n                // parse the UTC offset component\n                var year = $Number(match[1]),\n                    month = $Number(match[2] || 1) - 1,\n                    day = $Number(match[3] || 1) - 1,\n                    hour = $Number(match[4] || 0),\n                    minute = $Number(match[5] || 0),\n                    second = $Number(match[6] || 0),\n                    millisecond = Math.floor($Number(match[7] || 0) * 1000),\n                    // When time zone is missed, local offset should be used\n                    // (ES 5.1 bug)\n                    // see https://bugs.ecmascript.org/show_bug.cgi?id=112\n                    isLocalTime = Boolean(match[4] && !match[8]),\n                    signOffset = match[9] === '-' ? 1 : -1,\n                    hourOffset = $Number(match[10] || 0),\n                    minuteOffset = $Number(match[11] || 0),\n                    result;\n                var hasMinutesOrSecondsOrMilliseconds = minute > 0 || second > 0 || millisecond > 0;\n                if (\n                    hour < (hasMinutesOrSecondsOrMilliseconds ? 24 : 25) &&\n                    minute < 60 && second < 60 && millisecond < 1000 &&\n                    month > -1 && month < 12 && hourOffset < 24 &&\n                    minuteOffset < 60 && // detect invalid offsets\n                    day > -1 &&\n                    day < (dayFromMonth(year, month + 1) - dayFromMonth(year, month))\n                ) {\n                    result = (\n                        (dayFromMonth(year, month) + day) * 24 +\n                        hour +\n                        hourOffset * signOffset\n                    ) * 60;\n                    result = (\n                        (result + minute + minuteOffset * signOffset) * 60 +\n                        second\n                    ) * 1000 + millisecond;\n                    if (isLocalTime) {\n                        result = toUTC(result);\n                    }\n                    if (-8.64e15 <= result && result <= 8.64e15) {\n                        return result;\n                    }\n                }\n                return NaN;\n            }\n            return NativeDate.parse.apply(this, arguments);\n        };\n        defineProperties(DateShim, { parse: parseShim });\n\n        return DateShim;\n    }(Date));\n    /* global Date: false */\n}\n\n// ES5 15.9.4.4\n// http://es5.github.com/#x15.9.4.4\nif (!Date.now) {\n    Date.now = function now() {\n        return new Date().getTime();\n    };\n}\n\n//\n// Number\n// ======\n//\n\n// ES5.1 15.7.4.5\n// http://es5.github.com/#x15.7.4.5\nvar hasToFixedBugs = NumberPrototype.toFixed && (\n  (0.00008).toFixed(3) !== '0.000' ||\n  (0.9).toFixed(0) !== '1' ||\n  (1.255).toFixed(2) !== '1.25' ||\n  (1000000000000000128).toFixed(0) !== '1000000000000000128'\n);\n\nvar toFixedHelpers = {\n  base: 1e7,\n  size: 6,\n  data: [0, 0, 0, 0, 0, 0],\n  multiply: function multiply(n, c) {\n      var i = -1;\n      var c2 = c;\n      while (++i < toFixedHelpers.size) {\n          c2 += n * toFixedHelpers.data[i];\n          toFixedHelpers.data[i] = c2 % toFixedHelpers.base;\n          c2 = Math.floor(c2 / toFixedHelpers.base);\n      }\n  },\n  divide: function divide(n) {\n      var i = toFixedHelpers.size, c = 0;\n      while (--i >= 0) {\n          c += toFixedHelpers.data[i];\n          toFixedHelpers.data[i] = Math.floor(c / n);\n          c = (c % n) * toFixedHelpers.base;\n      }\n  },\n  numToString: function numToString() {\n      var i = toFixedHelpers.size;\n      var s = '';\n      while (--i >= 0) {\n          if (s !== '' || i === 0 || toFixedHelpers.data[i] !== 0) {\n              var t = $String(toFixedHelpers.data[i]);\n              if (s === '') {\n                  s = t;\n              } else {\n                  s += strSlice('0000000', 0, 7 - t.length) + t;\n              }\n          }\n      }\n      return s;\n  },\n  pow: function pow(x, n, acc) {\n      return (n === 0 ? acc : (n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc)));\n  },\n  log: function log(x) {\n      var n = 0;\n      var x2 = x;\n      while (x2 >= 4096) {\n          n += 12;\n          x2 /= 4096;\n      }\n      while (x2 >= 2) {\n          n += 1;\n          x2 /= 2;\n      }\n      return n;\n  }\n};\n\nvar toFixedShim = function toFixed(fractionDigits) {\n    var f, x, s, m, e, z, j, k;\n\n    // Test for NaN and round fractionDigits down\n    f = $Number(fractionDigits);\n    f = isActualNaN(f) ? 0 : Math.floor(f);\n\n    if (f < 0 || f > 20) {\n        throw new RangeError('Number.toFixed called with invalid number of decimals');\n    }\n\n    x = $Number(this);\n\n    if (isActualNaN(x)) {\n        return 'NaN';\n    }\n\n    // If it is too big or small, return the string value of the number\n    if (x <= -1e21 || x >= 1e21) {\n        return $String(x);\n    }\n\n    s = '';\n\n    if (x < 0) {\n        s = '-';\n        x = -x;\n    }\n\n    m = '0';\n\n    if (x > 1e-21) {\n        // 1e-21 < x < 1e21\n        // -70 < log2(x) < 70\n        e = toFixedHelpers.log(x * toFixedHelpers.pow(2, 69, 1)) - 69;\n        z = (e < 0 ? x * toFixedHelpers.pow(2, -e, 1) : x / toFixedHelpers.pow(2, e, 1));\n        z *= 0x10000000000000; // Math.pow(2, 52);\n        e = 52 - e;\n\n        // -18 < e < 122\n        // x = z / 2 ^ e\n        if (e > 0) {\n            toFixedHelpers.multiply(0, z);\n            j = f;\n\n            while (j >= 7) {\n                toFixedHelpers.multiply(1e7, 0);\n                j -= 7;\n            }\n\n            toFixedHelpers.multiply(toFixedHelpers.pow(10, j, 1), 0);\n            j = e - 1;\n\n            while (j >= 23) {\n                toFixedHelpers.divide(1 << 23);\n                j -= 23;\n            }\n\n            toFixedHelpers.divide(1 << j);\n            toFixedHelpers.multiply(1, 1);\n            toFixedHelpers.divide(2);\n            m = toFixedHelpers.numToString();\n        } else {\n            toFixedHelpers.multiply(0, z);\n            toFixedHelpers.multiply(1 << (-e), 0);\n            m = toFixedHelpers.numToString() + strSlice('0.00000000000000000000', 2, 2 + f);\n        }\n    }\n\n    if (f > 0) {\n        k = m.length;\n\n        if (k <= f) {\n            m = s + strSlice('0.0000000000000000000', 0, f - k + 2) + m;\n        } else {\n            m = s + strSlice(m, 0, k - f) + '.' + strSlice(m, k - f);\n        }\n    } else {\n        m = s + m;\n    }\n\n    return m;\n};\ndefineProperties(NumberPrototype, { toFixed: toFixedShim }, hasToFixedBugs);\n\nvar hasToPrecisionUndefinedBug = (function () {\n    try {\n        return 1.0.toPrecision(undefined) === '1';\n    } catch (e) {\n        return true;\n    }\n}());\nvar originalToPrecision = NumberPrototype.toPrecision;\ndefineProperties(NumberPrototype, {\n    toPrecision: function toPrecision(precision) {\n        return typeof precision === 'undefined' ? originalToPrecision.call(this) : originalToPrecision.call(this, precision);\n    }\n}, hasToPrecisionUndefinedBug);\n\n//\n// String\n// ======\n//\n\n// ES5 15.5.4.14\n// http://es5.github.com/#x15.5.4.14\n\n// [bugfix, IE lt 9, firefox 4, Konqueror, Opera, obscure browsers]\n// Many browsers do not split properly with regular expressions or they\n// do not perform the split correctly under obscure conditions.\n// See http://blog.stevenlevithan.com/archives/cross-browser-split\n// I've tested in many browsers and this seems to cover the deviant ones:\n//    'ab'.split(/(?:ab)*/) should be [\"\", \"\"], not [\"\"]\n//    '.'.split(/(.?)(.?)/) should be [\"\", \".\", \"\", \"\"], not [\"\", \"\"]\n//    'tesst'.split(/(s)*/) should be [\"t\", undefined, \"e\", \"s\", \"t\"], not\n//       [undefined, \"t\", undefined, \"e\", ...]\n//    ''.split(/.?/) should be [], not [\"\"]\n//    '.'.split(/()()/) should be [\".\"], not [\"\", \"\", \".\"]\n\nif (\n    'ab'.split(/(?:ab)*/).length !== 2 ||\n    '.'.split(/(.?)(.?)/).length !== 4 ||\n    'tesst'.split(/(s)*/)[1] === 't' ||\n    'test'.split(/(?:)/, -1).length !== 4 ||\n    ''.split(/.?/).length ||\n    '.'.split(/()()/).length > 1\n) {\n    (function () {\n        var compliantExecNpcg = typeof (/()??/).exec('')[1] === 'undefined'; // NPCG: nonparticipating capturing group\n        var maxSafe32BitInt = Math.pow(2, 32) - 1;\n\n        StringPrototype.split = function (separator, limit) {\n            var string = this;\n            if (typeof separator === 'undefined' && limit === 0) {\n                return [];\n            }\n\n            // If `separator` is not a regex, use native split\n            if (!isRegex(separator)) {\n                return strSplit(this, separator, limit);\n            }\n\n            var output = [];\n            var flags = (separator.ignoreCase ? 'i' : '') +\n                        (separator.multiline ? 'm' : '') +\n                        (separator.unicode ? 'u' : '') + // in ES6\n                        (separator.sticky ? 'y' : ''), // Firefox 3+ and ES6\n                lastLastIndex = 0,\n                // Make `global` and avoid `lastIndex` issues by working with a copy\n                separator2, match, lastIndex, lastLength;\n            var separatorCopy = new RegExp(separator.source, flags + 'g');\n            string += ''; // Type-convert\n            if (!compliantExecNpcg) {\n                // Doesn't need flags gy, but they don't hurt\n                separator2 = new RegExp('^' + separatorCopy.source + '$(?!\\\\s)', flags);\n            }\n            /* Values for `limit`, per the spec:\n             * If undefined: 4294967295 // maxSafe32BitInt\n             * If 0, Infinity, or NaN: 0\n             * If positive number: limit = Math.floor(limit); if (limit > 4294967295) limit -= 4294967296;\n             * If negative number: 4294967296 - Math.floor(Math.abs(limit))\n             * If other: Type-convert, then use the above rules\n             */\n            var splitLimit = typeof limit === 'undefined' ? maxSafe32BitInt : ES.ToUint32(limit);\n            match = separatorCopy.exec(string);\n            while (match) {\n                // `separatorCopy.lastIndex` is not reliable cross-browser\n                lastIndex = match.index + match[0].length;\n                if (lastIndex > lastLastIndex) {\n                    push(output, strSlice(string, lastLastIndex, match.index));\n                    // Fix browsers whose `exec` methods don't consistently return `undefined` for\n                    // nonparticipating capturing groups\n                    if (!compliantExecNpcg && match.length > 1) {\n                        /* eslint-disable no-loop-func */\n                        match[0].replace(separator2, function () {\n                            for (var i = 1; i < arguments.length - 2; i++) {\n                                if (typeof arguments[i] === 'undefined') {\n                                    match[i] = void 0;\n                                }\n                            }\n                        });\n                        /* eslint-enable no-loop-func */\n                    }\n                    if (match.length > 1 && match.index < string.length) {\n                        array_push.apply(output, array_slice.call(match, 1));\n                    }\n                    lastLength = match[0].length;\n                    lastLastIndex = lastIndex;\n                    if (output.length >= splitLimit) {\n                        break;\n                    }\n                }\n                if (separatorCopy.lastIndex === match.index) {\n                    separatorCopy.lastIndex++; // Avoid an infinite loop\n                }\n                match = separatorCopy.exec(string);\n            }\n            if (lastLastIndex === string.length) {\n                if (lastLength || !separatorCopy.test('')) {\n                    push(output, '');\n                }\n            } else {\n                push(output, strSlice(string, lastLastIndex));\n            }\n            return output.length > splitLimit ? strSlice(output, 0, splitLimit) : output;\n        };\n    }());\n\n// [bugfix, chrome]\n// If separator is undefined, then the result array contains just one String,\n// which is the this value (converted to a String). If limit is not undefined,\n// then the output array is truncated so that it contains no more than limit\n// elements.\n// \"0\".split(undefined, 0) -> []\n} else if ('0'.split(void 0, 0).length) {\n    StringPrototype.split = function split(separator, limit) {\n        if (typeof separator === 'undefined' && limit === 0) { return []; }\n        return strSplit(this, separator, limit);\n    };\n}\n\nvar str_replace = StringPrototype.replace;\nvar replaceReportsGroupsCorrectly = (function () {\n    var groups = [];\n    'x'.replace(/x(.)?/g, function (match, group) {\n        push(groups, group);\n    });\n    return groups.length === 1 && typeof groups[0] === 'undefined';\n}());\n\nif (!replaceReportsGroupsCorrectly) {\n    StringPrototype.replace = function replace(searchValue, replaceValue) {\n        var isFn = isCallable(replaceValue);\n        var hasCapturingGroups = isRegex(searchValue) && (/\\)[*?]/).test(searchValue.source);\n        if (!isFn || !hasCapturingGroups) {\n            return str_replace.call(this, searchValue, replaceValue);\n        } else {\n            var wrappedReplaceValue = function (match) {\n                var length = arguments.length;\n                var originalLastIndex = searchValue.lastIndex;\n                searchValue.lastIndex = 0;\n                var args = searchValue.exec(match) || [];\n                searchValue.lastIndex = originalLastIndex;\n                push(args, arguments[length - 2], arguments[length - 1]);\n                return replaceValue.apply(this, args);\n            };\n            return str_replace.call(this, searchValue, wrappedReplaceValue);\n        }\n    };\n}\n\n// ECMA-262, 3rd B.2.3\n// Not an ECMAScript standard, although ECMAScript 3rd Edition has a\n// non-normative section suggesting uniform semantics and it should be\n// normalized across all browsers\n// [bugfix, IE lt 9] IE < 9 substr() with negative value not working in IE\nvar string_substr = StringPrototype.substr;\nvar hasNegativeSubstrBug = ''.substr && '0b'.substr(-1) !== 'b';\ndefineProperties(StringPrototype, {\n    substr: function substr(start, length) {\n        var normalizedStart = start;\n        if (start < 0) {\n            normalizedStart = max(this.length + start, 0);\n        }\n        return string_substr.call(this, normalizedStart, length);\n    }\n}, hasNegativeSubstrBug);\n\n// ES5 15.5.4.20\n// whitespace from: http://es5.github.io/#x15.5.4.20\nvar ws = '\\x09\\x0A\\x0B\\x0C\\x0D\\x20\\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003' +\n    '\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028' +\n    '\\u2029\\uFEFF';\nvar zeroWidth = '\\u200b';\nvar wsRegexChars = '[' + ws + ']';\nvar trimBeginRegexp = new RegExp('^' + wsRegexChars + wsRegexChars + '*');\nvar trimEndRegexp = new RegExp(wsRegexChars + wsRegexChars + '*$');\nvar hasTrimWhitespaceBug = StringPrototype.trim && (ws.trim() || !zeroWidth.trim());\ndefineProperties(StringPrototype, {\n    // http://blog.stevenlevithan.com/archives/faster-trim-javascript\n    // http://perfectionkills.com/whitespace-deviations/\n    trim: function trim() {\n        if (typeof this === 'undefined' || this === null) {\n            throw new TypeError(\"can't convert \" + this + ' to object');\n        }\n        return $String(this).replace(trimBeginRegexp, '').replace(trimEndRegexp, '');\n    }\n}, hasTrimWhitespaceBug);\n\nvar hasLastIndexBug = StringPrototype.lastIndexOf && 'abcあい'.lastIndexOf('あい', 2) !== -1;\ndefineProperties(StringPrototype, {\n    lastIndexOf: function lastIndexOf(searchString) {\n        if (typeof this === 'undefined' || this === null) {\n            throw new TypeError(\"can't convert \" + this + ' to object');\n        }\n        var S = $String(this);\n        var searchStr = $String(searchString);\n        var numPos = arguments.length > 1 ? $Number(arguments[1]) : NaN;\n        var pos = isActualNaN(numPos) ? Infinity : ES.ToInteger(numPos);\n        var start = min(max(pos, 0), S.length);\n        var searchLen = searchStr.length;\n        var k = start + searchLen;\n        while (k > 0) {\n            k = max(0, k - searchLen);\n            var index = strIndexOf(strSlice(S, k, start + searchLen), searchStr);\n            if (index !== -1) {\n                return k + index;\n            }\n        }\n        return -1;\n    }\n}, hasLastIndexBug);\n\nvar originalLastIndexOf = StringPrototype.lastIndexOf;\ndefineProperties(StringPrototype, {\n    lastIndexOf: function lastIndexOf(searchString) {\n        return originalLastIndexOf.apply(this, arguments);\n    }\n}, StringPrototype.lastIndexOf.length !== 1);\n\n// ES-5 15.1.2.2\n/* eslint-disable radix */\nif (parseInt(ws + '08') !== 8 || parseInt(ws + '0x16') !== 22) {\n/* eslint-enable radix */\n    /* global parseInt: true */\n    parseInt = (function (origParseInt) {\n        var hexRegex = /^[\\-+]?0[xX]/;\n        return function parseInt(str, radix) {\n            var string = $String(str).trim();\n            var defaultedRadix = $Number(radix) || (hexRegex.test(string) ? 16 : 10);\n            return origParseInt(string, defaultedRadix);\n        };\n    }(parseInt));\n}\n\nif (String(new RangeError('test')) !== 'RangeError: test') {\n    var originalErrorToString = Error.prototype.toString;\n    var errorToStringShim = function toString() {\n        if (typeof this === 'undefined' || this === null) {\n            throw new TypeError(\"can't convert \" + this + ' to object');\n        }\n        var name = this.name;\n        if (typeof name === 'undefined') {\n            name = 'Error';\n        } else if (typeof name !== 'string') {\n            name = $String(name);\n        }\n        var msg = this.message;\n        if (typeof msg === 'undefined') {\n            msg = '';\n        } else if (typeof msg !== 'string') {\n            msg = $String(msg);\n        }\n        if (!name) {\n            return msg;\n        }\n        if (!msg) {\n            return name;\n        }\n        return name + ': ' + msg;\n    };\n    // can't use defineProperties here because of toString enumeration issue in IE <= 8\n    Error.prototype.toString = errorToStringShim;\n}\n\n}));\n","var global = this;\n\nif (global.Date !== Date) {\n  global.Date = Date;\n}\n\nif (global.parseInt !== parseInt) {\n  global.parseInt = parseInt;\n}\n\nvar Sp = String.prototype;\nif (Sp.replace !== originalStringReplace) {\n  // Restore the original value of String#replace, because the es5-shim\n  // reimplementation is buggy. See also import_globals.js.\n  Sp.replace = originalStringReplace;\n}\n"]}}]