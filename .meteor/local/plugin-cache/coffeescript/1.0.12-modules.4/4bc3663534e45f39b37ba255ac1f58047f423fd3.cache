{"source":"__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nvar indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };\n\n_.extend(TAPi18n.prototype, {\n  server_translators: null,\n  _registerServerTranslator: function(lang_tag, package_name) {\n    if (this._enabled()) {\n      if (!(lang_tag in this.server_translators)) {\n        this.server_translators[lang_tag] = this._getSpecificLangTranslator(lang_tag);\n      }\n      if (lang_tag !== this._fallback_language) {\n        this.addResourceBundle(lang_tag, package_name, this.translations[lang_tag][package_name]);\n      }\n    }\n    if (!(this._fallback_language in this.server_translators)) {\n      return this.server_translators[this._fallback_language] = this._getSpecificLangTranslator(this._fallback_language);\n    }\n  },\n  _registerAllServerTranslators: function() {\n    var i, lang_tag, len, package_name, ref, results;\n    ref = this._getProjectLanguages();\n    results = [];\n    for (i = 0, len = ref.length; i < len; i++) {\n      lang_tag = ref[i];\n      results.push((function() {\n        var results1;\n        results1 = [];\n        for (package_name in this.translations[lang_tag]) {\n          results1.push(this._registerServerTranslator(lang_tag, package_name));\n        }\n        return results1;\n      }).call(this));\n    }\n    return results;\n  },\n  _getPackageI18nextProxy: function(package_name) {\n    return (function(_this) {\n      return function(key, options, lang_tag) {\n        if (lang_tag == null) {\n          lang_tag = null;\n        }\n        if (lang_tag == null) {\n          return _this.server_translators[_this._fallback_language]((_this._getPackageDomain(package_name)) + \":\" + key, options);\n        } else if (!(lang_tag in _this.server_translators)) {\n          console.log(\"Warning: language \" + lang_tag + \" is not supported in this project, fallback language (\" + _this._fallback_language + \")\");\n          return _this.server_translators[_this._fallback_language]((_this._getPackageDomain(package_name)) + \":\" + key, options);\n        } else {\n          return _this.server_translators[lang_tag]((_this._getPackageDomain(package_name)) + \":\" + key, options);\n        }\n      };\n    })(this);\n  },\n  _registerHTTPMethod: function() {\n    var methods, self;\n    self = this;\n    methods = {};\n    if (!self._enabled()) {\n      throw new Meteor.Error(500, \"tap-i18n has to be enabled in order to register the HTTP method\");\n    }\n    methods[(self.conf.i18n_files_route.replace(/\\/$/, \"\")) + \"/multi/:langs\"] = {\n      get: function() {\n        var i, lang_tag, langs, language_translations, len, output;\n        if (!RegExp(\"^((\" + globals.langauges_tags_regex + \",)*\" + globals.langauges_tags_regex + \"|all).json$\").test(this.params.langs)) {\n          return this.setStatusCode(401);\n        }\n        langs = this.params.langs.replace(\".json\", \"\");\n        if (langs === \"all\") {\n          output = self.translations;\n        } else {\n          output = {};\n          langs = langs.split(\",\");\n          for (i = 0, len = langs.length; i < len; i++) {\n            lang_tag = langs[i];\n            if (indexOf.call(self._getProjectLanguages(), lang_tag) >= 0 && lang_tag !== self._fallback_language) {\n              language_translations = self.translations[lang_tag];\n              if (language_translations != null) {\n                output[lang_tag] = language_translations;\n              }\n            }\n          }\n        }\n        return JSON.stringify(output);\n      }\n    };\n    methods[(self.conf.i18n_files_route.replace(/\\/$/, \"\")) + \"/:lang\"] = {\n      get: function() {\n        var lang_tag, language_translations;\n        if (!RegExp(\"^\" + globals.langauges_tags_regex + \".json$\").test(this.params.lang)) {\n          return this.setStatusCode(401);\n        }\n        lang_tag = this.params.lang.replace(\".json\", \"\");\n        if (indexOf.call(self._getProjectLanguages(), lang_tag) < 0 || lang_tag === self._fallback_language) {\n          return this.setStatusCode(404);\n        }\n        language_translations = self.translations[lang_tag];\n        return JSON.stringify(language_translations != null ? language_translations : {});\n      }\n    };\n    return HTTP.methods(methods);\n  },\n  _onceEnabled: function() {\n    return this._registerAllServerTranslators();\n  }\n});\n","sourceMap":{"version":3,"file":"/lib/tap_i18n/tap_i18n-server.coffee.js","sourceRoot":"","sources":["/packages/tap_i18n/lib/tap_i18n/tap_i18n-server.coffee"],"names":[],"mappings":"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","sourcesContent":["_.extend TAPi18n.prototype,\n  server_translators: null\n\n  _registerServerTranslator: (lang_tag, package_name) ->\n    if @_enabled()\n      if not(lang_tag of @server_translators)\n        @server_translators[lang_tag] = @_getSpecificLangTranslator(lang_tag)\n\n      # fallback language is integrated, and isn't part of @translations \n      if lang_tag != @_fallback_language\n        @addResourceBundle(lang_tag, package_name, @translations[lang_tag][package_name])\n\n    if not(@_fallback_language of @server_translators)\n      @server_translators[@_fallback_language] = @_getSpecificLangTranslator(@_fallback_language)\n\n  _registerAllServerTranslators: () ->\n    for lang_tag in @_getProjectLanguages()\n      for package_name of @translations[lang_tag]\n        @_registerServerTranslator(lang_tag, package_name)\n\n  _getPackageI18nextProxy: (package_name) ->\n    # A proxy to TAPi18next.t where the namespace is preset to the package's\n    (key, options, lang_tag=null) =>\n      if not lang_tag?\n        # translate to fallback_language\n        return @server_translators[@_fallback_language] \"#{@_getPackageDomain(package_name)}:#{key}\", options\n      else if not(lang_tag of @server_translators)\n        console.log \"Warning: language #{lang_tag} is not supported in this project, fallback language (#{@_fallback_language})\"\n        return @server_translators[@_fallback_language] \"#{@_getPackageDomain(package_name)}:#{key}\", options\n      else\n        return @server_translators[lang_tag] \"#{@_getPackageDomain(package_name)}:#{key}\", options\n\n  _registerHTTPMethod: ->\n    self = @\n\n    methods = {}\n\n    if not self._enabled()\n      throw new Meteor.Error 500, \"tap-i18n has to be enabled in order to register the HTTP method\"\n\n    methods[\"#{self.conf.i18n_files_route.replace(/\\/$/, \"\")}/multi/:langs\"] =\n      get: () ->\n        if not RegExp(\"^((#{globals.langauges_tags_regex},)*#{globals.langauges_tags_regex}|all).json$\").test(@params.langs)\n          return @setStatusCode(401)\n\n        langs = @params.langs.replace \".json\", \"\"\n\n        if langs == \"all\"\n          output = self.translations\n        else\n          output = {}\n\n          langs = langs.split(\",\")\n          for lang_tag in langs\n            if lang_tag in self._getProjectLanguages() and \\\n               lang_tag != self._fallback_language # fallback language is integrated to the bundle\n              language_translations = self.translations[lang_tag]\n\n              if language_translations?\n                output[lang_tag] = language_translations\n\n        return JSON.stringify(output)\n\n    methods[\"#{self.conf.i18n_files_route.replace(/\\/$/, \"\")}/:lang\"] =\n      get: () ->\n        if not RegExp(\"^#{globals.langauges_tags_regex}.json$\").test(@params.lang)\n          return @setStatusCode(401)\n\n        lang_tag = @params.lang.replace \".json\", \"\"\n\n        if lang_tag not in self._getProjectLanguages() or \\\n           lang_tag == self._fallback_language # fallback language is integrated to the bundle\n          return @setStatusCode(404) # not found\n\n        language_translations = self.translations[lang_tag]\n        # returning {} if lang_tag is not in translations allows the project\n        # developer to force a language supporte with project-tap.i18n's\n        # supported_languages property, even if that language has no lang\n        # files.\n        return JSON.stringify(if language_translations? then language_translations else {})\n\n    HTTP.methods methods\n\n  _onceEnabled: ->\n    @_registerAllServerTranslators()"]}}