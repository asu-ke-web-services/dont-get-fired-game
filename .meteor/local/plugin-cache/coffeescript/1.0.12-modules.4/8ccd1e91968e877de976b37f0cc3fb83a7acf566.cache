{"source":"__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nvar fallback_language;         \n\nfallback_language = globals.fallback_language;\n\nTAPi18n = function() {\n  EventEmitter.call(this);\n  this._fallback_language = fallback_language;\n  this._language_changed_tracker = new Tracker.Dependency;\n  this._loaded_languages = [fallback_language];\n  this.conf = null;\n  this.packages = {};\n  this.languages_names = {};\n  this.translations = {};\n  if (Meteor.isClient) {\n    Session.set(this._loaded_lang_session_key, null);\n    this._languageSpecificTranslators = {};\n    this._languageSpecificTranslatorsTrackers = {};\n  }\n  if (Meteor.isServer) {\n    this.server_translators = {};\n    Meteor.startup((function(_this) {\n      return function() {\n        if (_this._enabled()) {\n          return _this._registerHTTPMethod();\n        }\n      };\n    })(this));\n  }\n  this.__ = this._getPackageI18nextProxy(globals.project_translations_domain);\n  TAPi18next.setLng(fallback_language);\n  return this;\n};\n\nUtil.inherits(TAPi18n, EventEmitter);\n\n_.extend(TAPi18n.prototype, {\n  _loaded_lang_session_key: \"TAPi18n::loaded_lang\",\n  _enable: function(conf) {\n    this.conf = conf;\n    return this._onceEnabled();\n  },\n  _onceEnabled: function() {},\n  _enabled: function() {\n    return this.conf != null;\n  },\n  _getPackageDomain: function(package_name) {\n    return package_name.replace(/:/g, \"-\");\n  },\n  addResourceBundle: function(lang_tag, package_name, translations) {\n    return TAPi18next.addResourceBundle(lang_tag, this._getPackageDomain(package_name), translations);\n  },\n  _getSpecificLangTranslator: function(lang) {\n    var current_lang, translator;\n    current_lang = TAPi18next.lng();\n    translator = null;\n    TAPi18next.setLng(lang, {\n      fixLng: true\n    }, (function(_this) {\n      return function(lang_translator) {\n        return translator = lang_translator;\n      };\n    })(this));\n    TAPi18next.setLng(current_lang);\n    return translator;\n  },\n  _getProjectLanguages: function() {\n    if (this._enabled()) {\n      if (_.isArray(this.conf.supported_languages)) {\n        return _.union([this._fallback_language], this.conf.supported_languages);\n      } else {\n        return _.keys(this.languages_names);\n      }\n    } else {\n      return [this._fallback_language];\n    }\n  },\n  getLanguages: function() {\n    var i, lang_tag, languages, len, ref;\n    if (!this._enabled()) {\n      return null;\n    }\n    languages = {};\n    ref = this._getProjectLanguages();\n    for (i = 0, len = ref.length; i < len; i++) {\n      lang_tag = ref[i];\n      languages[lang_tag] = {\n        name: this.languages_names[lang_tag][1],\n        en: this.languages_names[lang_tag][0]\n      };\n    }\n    return languages;\n  },\n  _loadLangFileObject: function(language_tag, data) {\n    var package_keys, package_name, ref, results;\n    results = [];\n    for (package_name in data) {\n      package_keys = data[package_name];\n      package_keys = _.extend({}, package_keys, ((ref = this._loadTranslations_cache[language_tag]) != null ? ref[package_name] : void 0) || {});\n      results.push(this.addResourceBundle(language_tag, package_name, package_keys));\n    }\n    return results;\n  },\n  _loadTranslations_cache: {},\n  loadTranslations: function(translations, namespace) {\n    var language_tag, project_languages, results, translation_keys;\n    project_languages = this._getProjectLanguages();\n    results = [];\n    for (language_tag in translations) {\n      translation_keys = translations[language_tag];\n      if (this._loadTranslations_cache[language_tag] == null) {\n        this._loadTranslations_cache[language_tag] = {};\n      }\n      if (this._loadTranslations_cache[language_tag][namespace] == null) {\n        this._loadTranslations_cache[language_tag][namespace] = {};\n      }\n      _.extend(this._loadTranslations_cache[language_tag][namespace], translation_keys);\n      this.addResourceBundle(language_tag, namespace, translation_keys);\n      if (Meteor.isClient && this.getLanguage() === language_tag) {\n        results.push(this._language_changed_tracker.changed());\n      } else {\n        results.push(void 0);\n      }\n    }\n    return results;\n  }\n});\n","sourceMap":{"version":3,"file":"/lib/tap_i18n/tap_i18n-common.coffee.js","sourceRoot":"","sources":["/packages/tap_i18n/lib/tap_i18n/tap_i18n-common.coffee"],"names":[],"mappings":"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","sourcesContent":["fallback_language = globals.fallback_language\n\nTAPi18n = ->\n  EventEmitter.call @\n\n  @_fallback_language = fallback_language\n\n  @_language_changed_tracker = new Tracker.Dependency\n\n  @_loaded_languages = [fallback_language] # stores the loaded languages, the fallback language is loaded automatically\n\n  @conf = null # If conf isn't null we assume that tap:i18n is enabled for the project.\n             # We assume conf is valid, we sterilize and validate it during the build process.\n\n  @packages = {} # Stores the packages' package-tap.i18n jsons\n\n  @languages_names = {} # Stores languages that we've found languages files for in the project dir.\n                                      # format:\n                                      # {\n                                      #    lang_tag: [lang_name_in_english, lang_name_in_local_language]\n                                      # }\n\n  @translations = {} # Stores the packages/project translations - Server side only\n                   # fallback_language translations are not stored here\n\n\n  if Meteor.isClient\n    Session.set @_loaded_lang_session_key, null\n\n    @_languageSpecificTranslators = {}\n    @_languageSpecificTranslatorsTrackers = {}\n\n  if Meteor.isServer\n    @server_translators = {}\n\n    Meteor.startup =>\n      # If tap-i18n is enabled for that project\n      if @_enabled()\n        @_registerHTTPMethod()\n\n  @__ = @_getPackageI18nextProxy(globals.project_translations_domain)\n\n  TAPi18next.setLng fallback_language\n\n  return @\n\nUtil.inherits TAPi18n, EventEmitter\n\n_.extend TAPi18n.prototype,\n  _loaded_lang_session_key: \"TAPi18n::loaded_lang\"\n\n  _enable: (conf) ->\n    # tap:i18n gets enabled for a project once a conf file is set for it.\n    # It can be either a conf object that was set by project-tap.i18n file or\n    # a default conf, which is being added if the project has lang files\n    # (*.i18n.json) but not project-tap.i18n\n    @conf = conf\n\n    @._onceEnabled()\n\n  _onceEnabled: () ->\n    # The arch specific code can use this for procedures that should be performed once\n    # tap:i18n gets enabled (project conf file is being set)\n    return\n\n  _enabled: ->\n    # read the comment of @conf\n    @conf?\n\n  _getPackageDomain: (package_name) ->\n    package_name.replace(/:/g, \"-\")\n\n  addResourceBundle: (lang_tag, package_name, translations) ->\n    TAPi18next.addResourceBundle(lang_tag, @_getPackageDomain(package_name), translations)\n\n  _getSpecificLangTranslator: (lang) ->\n    current_lang = TAPi18next.lng()\n\n    translator = null\n    TAPi18next.setLng lang, {fixLng: true}, (lang_translator) =>\n      translator = lang_translator\n\n    # Restore i18next lang that had been changed in the process of generating\n    # lang specific translator\n    TAPi18next.setLng current_lang\n\n    return translator\n\n  _getProjectLanguages: () ->\n    # Return an array of languages available for the current project\n    if @._enabled()\n      if _.isArray @.conf.supported_languages\n        return _.union([@._fallback_language], @.conf.supported_languages)\n      else\n        # If supported_languages is null, all the languages we found\n        # translations files to in the project level are considered supported.\n        # We use the @.languages_names array to tell which languages we found\n        # since for every i18n.json file we found in the project level we add\n        # an entry for its language to @.languages_names in the build process.\n        #\n        # We also know for certain that when tap-i18n is enabled the fallback\n        # lang is in @.languages_names\n        return _.keys @.languages_names\n    else\n      return [@._fallback_language]\n\n  getLanguages: ->\n    if not @._enabled()\n      return null\n\n    languages = {}\n    for lang_tag in @._getProjectLanguages()\n      languages[lang_tag] =\n        name: @.languages_names[lang_tag][1]\n        en: @.languages_names[lang_tag][0]\n\n    languages\n\n  _loadLangFileObject: (language_tag, data) ->\n    for package_name, package_keys of data\n      # Translations that are added by loadTranslations() have higher priority\n      package_keys = _.extend({}, package_keys, @_loadTranslations_cache[language_tag]?[package_name] or {})\n\n      @addResourceBundle(language_tag, package_name, package_keys)\n\n  _loadTranslations_cache: {}\n  loadTranslations: (translations, namespace) ->\n    project_languages = @_getProjectLanguages()\n\n    for language_tag, translation_keys of translations\n      if not @_loadTranslations_cache[language_tag]?\n        @_loadTranslations_cache[language_tag] = {}\n\n      if not @_loadTranslations_cache[language_tag][namespace]?\n        @_loadTranslations_cache[language_tag][namespace] = {}\n\n      _.extend(@_loadTranslations_cache[language_tag][namespace], translation_keys)\n\n      @addResourceBundle(language_tag, namespace, translation_keys)\n\n      if Meteor.isClient and @getLanguage() == language_tag\n        # Retranslate if session language updated\n        @_language_changed_tracker.changed()"]}}