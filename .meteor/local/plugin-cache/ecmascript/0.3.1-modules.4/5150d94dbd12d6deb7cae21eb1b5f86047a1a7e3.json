{"metadata":{"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}},"usedHelpers":[]},"ignored":false,"code":"var Fiber = Npm.require('fibers');\nvar Future = Npm.require('fibers/future');\n\ntestAsyncMulti(\"mongo-livedata - doc fetcher\", [function (test, expect) {\n  var self = this;\n  var collName = \"docfetcher-\" + Random.id();\n  var collection = new Mongo.Collection(collName);\n  var id1 = collection.insert({ x: 1 });\n  var id2 = collection.insert({ y: 2 });\n\n  var fetcher = new MongoTest.DocFetcher(MongoInternals.defaultRemoteCollectionDriver().mongo);\n\n  // Test basic operation.\n  fetcher.fetch(collName, id1, Random.id(), expect(null, { _id: id1, x: 1 }));\n  fetcher.fetch(collName, \"nonexistent!\", Random.id(), expect(null, null));\n\n  var fetched = false;\n  var cacheKey = Random.id();\n  var expected = { _id: id2, y: 2 };\n  fetcher.fetch(collName, id2, cacheKey, expect(function (e, d) {\n    fetched = true;\n    test.isFalse(e);\n    test.equal(d, expected);\n  }));\n  // The fetcher yields.\n  test.isFalse(fetched);\n\n  // Now ask for another document with the same cache key. Because a fetch for\n  // that cache key is in flight, we will get the other fetch's document, not\n  // this random document.\n  fetcher.fetch(collName, Random.id(), cacheKey, expect(function (e, d) {\n    test.isFalse(e);\n    test.equal(d, expected);\n  }));\n}]);","ast":null,"map":{"version":3,"sources":["/packages/mongo/doc_fetcher_tests.js"],"names":[],"mappings":"AAAA,IAAI,KAAK,GAAG,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;AAClC,IAAI,MAAM,GAAG,GAAG,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC;;AAE1C,cAAc,CAAC,8BAA8B,EAAE,CAC7C,UAAU,IAAI,EAAE,MAAM,EAAE;AACtB,MAAI,IAAI,GAAG,IAAI,CAAC;AAChB,MAAI,QAAQ,GAAG,aAAa,GAAG,MAAM,CAAC,EAAE,EAAE,CAAC;AAC3C,MAAI,UAAU,GAAG,IAAI,KAAK,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;AAChD,MAAI,GAAG,GAAG,UAAU,CAAC,MAAM,CAAC,EAAC,CAAC,EAAE,CAAC,EAAC,CAAC,CAAC;AACpC,MAAI,GAAG,GAAG,UAAU,CAAC,MAAM,CAAC,EAAC,CAAC,EAAE,CAAC,EAAC,CAAC,CAAC;;AAEpC,MAAI,OAAO,GAAG,IAAI,SAAS,CAAC,UAAU,CACpC,cAAc,CAAC,6BAA6B,EAAE,CAAC,KAAK,CAAC,CAAC;;;AAGxD,SAAO,CAAC,KAAK,CAAC,QAAQ,EAAE,GAAG,EAAE,MAAM,CAAC,EAAE,EAAE,EAAE,MAAM,CAAC,IAAI,EAAE,EAAC,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,EAAC,CAAC,CAAC,CAAC;AAC1E,SAAO,CAAC,KAAK,CAAC,QAAQ,EAAE,cAAc,EAAE,MAAM,CAAC,EAAE,EAAE,EAAE,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;;AAEzE,MAAI,OAAO,GAAG,KAAK,CAAC;AACpB,MAAI,QAAQ,GAAG,MAAM,CAAC,EAAE,EAAE,CAAC;AAC3B,MAAI,QAAQ,GAAG,EAAC,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,EAAC,CAAC;AAChC,SAAO,CAAC,KAAK,CAAC,QAAQ,EAAE,GAAG,EAAE,QAAQ,EAAE,MAAM,CAAC,UAAU,CAAC,EAAE,CAAC,EAAE;AAC5D,WAAO,GAAG,IAAI,CAAC;AACf,QAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;AAChB,QAAI,CAAC,KAAK,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;GACzB,CAAC,CAAC,CAAC;;AAEJ,MAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;;;;;AAKtB,SAAO,CAAC,KAAK,CAAC,QAAQ,EAAE,MAAM,CAAC,EAAE,EAAE,EAAE,QAAQ,EAAE,MAAM,CAAC,UAAU,CAAC,EAAE,CAAC,EAAE;AACpE,QAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;AAChB,QAAI,CAAC,KAAK,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;GACzB,CAAC,CAAC,CAAC;CACL,CACF,CAAC,CAAC","file":"/packages/mongo/doc_fetcher_tests.js.map","sourcesContent":["var Fiber = Npm.require('fibers');\nvar Future = Npm.require('fibers/future');\n\ntestAsyncMulti(\"mongo-livedata - doc fetcher\", [\n  function (test, expect) {\n    var self = this;\n    var collName = \"docfetcher-\" + Random.id();\n    var collection = new Mongo.Collection(collName);\n    var id1 = collection.insert({x: 1});\n    var id2 = collection.insert({y: 2});\n\n    var fetcher = new MongoTest.DocFetcher(\n      MongoInternals.defaultRemoteCollectionDriver().mongo);\n\n    // Test basic operation.\n    fetcher.fetch(collName, id1, Random.id(), expect(null, {_id: id1, x: 1}));\n    fetcher.fetch(collName, \"nonexistent!\", Random.id(), expect(null, null));\n\n    var fetched = false;\n    var cacheKey = Random.id();\n    var expected = {_id: id2, y: 2};\n    fetcher.fetch(collName, id2, cacheKey, expect(function (e, d) {\n      fetched = true;\n      test.isFalse(e);\n      test.equal(d, expected);\n    }));\n    // The fetcher yields.\n    test.isFalse(fetched);\n\n    // Now ask for another document with the same cache key. Because a fetch for\n    // that cache key is in flight, we will get the other fetch's document, not\n    // this random document.\n    fetcher.fetch(collName, Random.id(), cacheKey, expect(function (e, d) {\n      test.isFalse(e);\n      test.equal(d, expected);\n    }));\n  }\n]);\n"]},"hash":"5150d94dbd12d6deb7cae21eb1b5f86047a1a7e3"}
