{"metadata":{"modules":{"imports":[{"source":"./definition/strategy","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Strategy"}]},{"source":"../data/goals","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"dataGoals"}]},{"source":"../data/industries","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"dataIndustries"}]},{"source":"../data/companyNames","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"dataCompanyNames"}]},{"source":"./point-distribution-strategy","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"PointDistributionStrategy"}]},{"source":"../utils/random","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"RandomUtil"}]},{"source":"../utils/templating","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"TemplatingUtils"}]}],"exports":{"exported":["RandomCompanyBuildingStrategy"],"specifiers":[{"kind":"local","local":"RandomCompanyBuildingStrategy","exported":"default"}]}},"usedHelpers":["inherits","class-call-check","interop-require-default"]},"ignored":false,"code":"exports.__esModule = true;\n\nvar _definitionStrategy = require('./definition/strategy');\n\nvar _definitionStrategy2 = babelHelpers.interopRequireDefault(_definitionStrategy);\n\nvar _dataGoals = require('../data/goals');\n\nvar _dataGoals2 = babelHelpers.interopRequireDefault(_dataGoals);\n\nvar _dataIndustries = require('../data/industries');\n\nvar _dataIndustries2 = babelHelpers.interopRequireDefault(_dataIndustries);\n\nvar _dataCompanyNames = require('../data/companyNames');\n\nvar _dataCompanyNames2 = babelHelpers.interopRequireDefault(_dataCompanyNames);\n\nvar _pointDistributionStrategy = require('./point-distribution-strategy');\n\nvar _pointDistributionStrategy2 = babelHelpers.interopRequireDefault(_pointDistributionStrategy);\n\nvar _utilsRandom = require('../utils/random');\n\nvar _utilsRandom2 = babelHelpers.interopRequireDefault(_utilsRandom);\n\nvar _utilsTemplating = require('../utils/templating');\n\nvar _utilsTemplating2 = babelHelpers.interopRequireDefault(_utilsTemplating);\n\nvar RandomCompanyBuildingStrategy = (function (_Strategy) {\n  babelHelpers.inherits(RandomCompanyBuildingStrategy, _Strategy);\n\n  function RandomCompanyBuildingStrategy(companyBuilder, industryBuilder, goalBuilder) {\n    babelHelpers.classCallCheck(this, RandomCompanyBuildingStrategy);\n\n    _Strategy.call(this);\n\n    this.companyBuilder = companyBuilder;\n    this.industryBuilder = industryBuilder;\n    this.goalBuilder = goalBuilder;\n\n    this.goalData = _dataGoals2['default'];\n    this.industryData = _dataIndustries2['default'];\n    this.companyNamesData = _dataCompanyNames2['default'];\n\n    this.numberOfPoints = 25.0;\n    this.pointDistributionStrategy = new _pointDistributionStrategy2['default'](5, this.numberOfPoints);\n  }\n\n  RandomCompanyBuildingStrategy.prototype.pickAnIndustry = (function () {\n    function pickAnIndustry() {\n      var industry = _utilsRandom2['default'].pick(this.industryData);\n\n      return industry;\n    }\n\n    return pickAnIndustry;\n  })();\n\n  RandomCompanyBuildingStrategy.prototype.pickAGoal = (function () {\n    function pickAGoal() {\n      var goal = _utilsRandom2['default'].pick(this.goalData);\n\n      return goal;\n    }\n\n    return pickAGoal;\n  })();\n\n  RandomCompanyBuildingStrategy.prototype.createCompanyName = (function () {\n    function createCompanyName(industryName) {\n      var rawName = _utilsRandom2['default'].pick(this.companyNamesData);\n      var companyName = _utilsTemplating2['default'].templatize(rawName, {\n        name: industryName\n      });\n\n      return companyName;\n    }\n\n    return createCompanyName;\n  })();\n\n  RandomCompanyBuildingStrategy.prototype.execute = (function () {\n    function execute() {\n      // TODO create a system of 25 \"points\" to distribute amoung these different initial settings\n      // Sort of to weight them so that you never have an AMAZING start state\n      var industryOptions = this.pickAnIndustry();\n      var goalOptions = this.pickAGoal();\n      var companyName = this.createCompanyName(industryOptions.name);\n\n      var points = this.pointDistributionStrategy.execute();\n\n      /* should be between (0.001 and 0.0001] */\n      var marketPenetration = Math.floor(points[0] * 10 / this.numberOfPoints) / 10000;\n      /* Between [1 to 3) */\n      var numberOfFactories = Math.floor(points[1] * 3 / this.numberOfPoints + 1);\n      /* Between 0.1 to 0.4 */\n      var averageFactoryEfficiency = Math.floor(points[2] * 4 / this.numberOfPoints + 1) / 10;\n      /* Between .3 and .7 */\n      var companySatisfaction = Math.floor(points[3] * 3 / this.numberOfPoints + 4) / 10;\n      /* Between .3 and .7 */\n      var customerSatisfaction = Math.floor(points[4] * 3 / this.numberOfPoints + 4) / 10;\n\n      // Build the goal\n      this.goalBuilder.setFromOptions(goalOptions);\n\n      var goal = this.goalBuilder.build();\n\n      // Build the industry\n      this.industryBuilder.setFromOptions(industryOptions);\n\n      var industry = this.industryBuilder.build();\n\n      // Build the company\n      this.companyBuilder.setGoal(goal);\n      this.companyBuilder.setIndustry(industry);\n      this.companyBuilder.setName(companyName);\n      this.companyBuilder.setMarketPenetration(marketPenetration);\n      this.companyBuilder.setNumberOfFactories(numberOfFactories);\n      this.companyBuilder.setAverageFactoryEfficiency(averageFactoryEfficiency);\n      this.companyBuilder.setCompanySatisfaction(companySatisfaction);\n      this.companyBuilder.setCustomerSatisfaction(customerSatisfaction);\n\n      return this.companyBuilder.build();\n    }\n\n    return execute;\n  })();\n\n  return RandomCompanyBuildingStrategy;\n})(_definitionStrategy2['default']);\n\nexports['default'] = RandomCompanyBuildingStrategy;\nmodule.exports = exports['default'];","ast":null,"map":{"version":3,"sources":["/client/strategies/random-company-building-strategy.js"],"names":[],"mappings":"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","file":"/client/strategies/random-company-building-strategy.js.map","sourcesContent":["import Strategy from './definition/strategy';\nimport dataGoals from '../data/goals';\nimport dataIndustries from '../data/industries';\nimport dataCompanyNames from '../data/companyNames';\nimport PointDistributionStrategy from './point-distribution-strategy';\nimport RandomUtil from '../utils/random';\nimport TemplatingUtils from '../utils/templating';\n\nexport default class RandomCompanyBuildingStrategy extends Strategy {\n  constructor( companyBuilder, industryBuilder, goalBuilder ) {\n    super();\n\n    this.companyBuilder = companyBuilder;\n    this.industryBuilder = industryBuilder;\n    this.goalBuilder = goalBuilder;\n\n    this.goalData = dataGoals;\n    this.industryData = dataIndustries;\n    this.companyNamesData = dataCompanyNames;\n\n    this.numberOfPoints = 25.0;\n    this.pointDistributionStrategy = new PointDistributionStrategy( 5, this.numberOfPoints );\n  }\n\n  pickAnIndustry() {\n    let industry = RandomUtil.pick( this.industryData );\n\n    return industry;\n  }\n\n  pickAGoal() {\n    let goal = RandomUtil.pick(this.goalData);\n\n    return goal;\n  }\n\n  createCompanyName(industryName) {\n    let rawName = RandomUtil.pick(this.companyNamesData);\n    let companyName = TemplatingUtils.templatize(rawName, {\n      name: industryName\n    });\n\n    return companyName;\n  }\n\n  execute() {\n    // TODO create a system of 25 \"points\" to distribute amoung these different initial settings\n    // Sort of to weight them so that you never have an AMAZING start state\n    let industryOptions = this.pickAnIndustry();\n    let goalOptions = this.pickAGoal();\n    let companyName = this.createCompanyName(industryOptions.name);\n\n    let points = this.pointDistributionStrategy.execute();\n\n    /* should be between (0.001 and 0.0001] */\n    let marketPenetration = Math.floor( points[0] * 10 / this.numberOfPoints ) / 10000;\n    /* Between [1 to 3) */\n    let numberOfFactories = Math.floor( points[1] * 3 / this.numberOfPoints + 1 );\n    /* Between 0.1 to 0.4 */\n    let averageFactoryEfficiency = Math.floor( points[2] * 4 / this.numberOfPoints + 1 ) / 10;\n    /* Between .3 and .7 */\n    let companySatisfaction = Math.floor( points[3] * 3 / this.numberOfPoints + 4 ) / 10;\n    /* Between .3 and .7 */\n    let customerSatisfaction = Math.floor( points[4] * 3 / this.numberOfPoints + 4 ) / 10;\n\n    // Build the goal\n    this.goalBuilder.setFromOptions(goalOptions);\n\n    let goal = this.goalBuilder.build();\n\n    // Build the industry\n    this.industryBuilder.setFromOptions(industryOptions);\n\n    let industry = this.industryBuilder.build();\n\n    // Build the company\n    this.companyBuilder.setGoal(goal);\n    this.companyBuilder.setIndustry(industry);\n    this.companyBuilder.setName(companyName);\n    this.companyBuilder.setMarketPenetration(marketPenetration);\n    this.companyBuilder.setNumberOfFactories(numberOfFactories);\n    this.companyBuilder.setAverageFactoryEfficiency(averageFactoryEfficiency);\n    this.companyBuilder.setCompanySatisfaction(companySatisfaction);\n    this.companyBuilder.setCustomerSatisfaction(customerSatisfaction);\n\n    return this.companyBuilder.build();\n  }\n}\n"]},"hash":"bd8d61b0903f64815dfc652eb0e77ef1e8704e62"}
