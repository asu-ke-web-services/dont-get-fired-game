{"metadata":{"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}},"usedHelpers":[]},"ignored":false,"code":"// These are tests of Babel's generated output.  Write tests here when a runtime\n// test won't do.  Some tests also serve to catch when Babel changes its output,\n// such as when it changes its runtime helpers!\n\nfunction transform(input) {\n  return Babel.transformMeteor(input).code;\n};\n\nfunction contains(haystack, needle) {\n  return haystack.indexOf(needle) >= 0;\n};\n\nTinytest.add(\"ecmascript - transpilation - const\", function (test) {\n  // make sure `const` is turned into `var` (rather than passing\n  // through, such as when you have es6.blockScoping on but\n  // es6.constants off)\n  var output = transform('const x = 5;');\n  test.isFalse(contains(output, 'const'));\n  test.isTrue(contains(output, 'var'));\n});\n\nTinytest.add(\"ecmascript - transpilation - class methods\", function (test) {\n  var output = transform('class Foo {\\n  static staticMethod() {\\n    return \\'classy\\';\\n  }\\n\\n  prototypeMethod() {\\n    return \\'prototypical\\';\\n  }\\n\\n  [computedMethod]() {\\n    return \\'computed\\';\\n  }\\n}');\n\n  // test that we are in \"loose\" mode and methods of classes are still\n  // assigned in a simple matter that does rely on Object.defineProperty.\n  test.isTrue(contains(output, 'Foo.staticMethod = function staticMethod('));\n  test.isTrue(contains(output, 'Foo.prototype.prototypeMethod = function prototypeMethod('));\n  test.isTrue(contains(output, 'Foo.prototype[computedMethod] = function ('));\n  test.isFalse(contains(output, 'createClass'));\n});\n\nTinytest.add(\"ecmascript - transpilation - helpers - classCallCheck\", function (test) {\n  var output = transform('\\nclass Foo {\\n  constructor(x) {\\n    this.x = x;\\n  }\\n}');\n\n  // test that the classCallCheck helper is still in use\n  test.isTrue(contains(output, 'babelHelpers.classCallCheck'));\n});\n\nTinytest.add(\"ecmascript - transpilation - helpers - inherits\", function (test) {\n  var output = transform('\\nclass Foo {}\\nclass Bar extends Foo {}\\n');\n\n  test.isTrue(contains(output, 'babelHelpers.inherits'));\n});\n\nTinytest.add(\"ecmascript - transpilation - helpers - bind\", function (test) {\n  var output = transform('\\n  var foo = new Foo(...oneTwo, 3);\\n');\n\n  test.isTrue(contains(output, 'babelHelpers.bind'));\n});\n\nTinytest.add(\"ecmascript - transpilation - helpers - extends\", function (test) {\n  var output = transform('\\n  var full = {a:1, ...middle, d:4};\\n');\n\n  test.isTrue(contains(output, 'babelHelpers._extends'));\n});\n\nTinytest.add(\"ecmascript - transpilation - helpers - objectWithoutProperties\", function (test) {\n  var output = transform('\\nvar {a, ...rest} = obj;\\n');\n\n  test.isTrue(contains(output, 'babelHelpers.objectWithoutProperties'));\n});\n\nTinytest.add(\"ecmascript - transpilation - helpers - objectDestructuringEmpty\", function (test) {\n  var output = transform('\\nvar {} = null;\\n');\n\n  test.isTrue(contains(output, 'babelHelpers.objectDestructuringEmpty'));\n});\n\nTinytest.add(\"ecmascript - transpilation - helpers - taggedTemplateLiteralLoose\", function (test) {\n  var output = transform('\\nvar x = asdf`A${foo}C`\\n');\n\n  test.isTrue(contains(output, 'babelHelpers.taggedTemplateLiteralLoose'));\n});\n\nTinytest.add(\"ecmascript - transpilation - helpers - createClass\", function (test) {\n  var output = transform('\\nclass Foo {\\n  get blah() { return 123; }\\n}\\n');\n\n  test.isTrue(contains(output, 'babelHelpers.createClass'));\n});\n\nTinytest.add(\"ecmascript - transpilation - flow\", function (test) {\n  var output = transform('var foo = function (one: any, two: number, three?): string {};');\n  test.isTrue(contains(output, '(one, two, three)'));\n});","ast":null,"map":{"version":3,"sources":["/packages/ecmascript/transpilation-tests.js"],"names":[],"mappings":"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","file":"/packages/ecmascript/transpilation-tests.js.map","sourcesContent":["// These are tests of Babel's generated output.  Write tests here when a runtime\n// test won't do.  Some tests also serve to catch when Babel changes its output,\n// such as when it changes its runtime helpers!\n\nfunction transform(input) {\n  return Babel.transformMeteor(input).code;\n};\n\nfunction contains(haystack, needle) {\n  return haystack.indexOf(needle) >= 0;\n};\n\nTinytest.add(\"ecmascript - transpilation - const\", (test) => {\n  // make sure `const` is turned into `var` (rather than passing\n  // through, such as when you have es6.blockScoping on but\n  // es6.constants off)\n  const output = transform('const x = 5;');\n  test.isFalse(contains(output, 'const'));\n  test.isTrue(contains(output, 'var'));\n});\n\nTinytest.add(\"ecmascript - transpilation - class methods\", (test) => {\n  const output = transform(\n`class Foo {\n  static staticMethod() {\n    return 'classy';\n  }\n\n  prototypeMethod() {\n    return 'prototypical';\n  }\n\n  [computedMethod]() {\n    return 'computed';\n  }\n}`);\n\n  // test that we are in \"loose\" mode and methods of classes are still\n  // assigned in a simple matter that does rely on Object.defineProperty.\n  test.isTrue(contains(output, 'Foo.staticMethod = function staticMethod('));\n  test.isTrue(contains(output,\n                       'Foo.prototype.prototypeMethod = function prototypeMethod('));\n  test.isTrue(contains(output, 'Foo.prototype[computedMethod] = function ('));\n  test.isFalse(contains(output, 'createClass'));\n});\n\nTinytest.add(\"ecmascript - transpilation - helpers - classCallCheck\", (test) => {\n  const output = transform(`\nclass Foo {\n  constructor(x) {\n    this.x = x;\n  }\n}`);\n\n  // test that the classCallCheck helper is still in use\n  test.isTrue(contains(output, 'babelHelpers.classCallCheck'));\n});\n\nTinytest.add(\"ecmascript - transpilation - helpers - inherits\", (test) => {\n  const output = transform(`\nclass Foo {}\nclass Bar extends Foo {}\n`);\n\n  test.isTrue(contains(output, 'babelHelpers.inherits'));\n});\n\nTinytest.add(\"ecmascript - transpilation - helpers - bind\", (test) => {\n  const output = transform(`\n  var foo = new Foo(...oneTwo, 3);\n`);\n\n  test.isTrue(contains(output, 'babelHelpers.bind'));\n});\n\nTinytest.add(\"ecmascript - transpilation - helpers - extends\", (test) => {\n  const output = transform(`\n  var full = {a:1, ...middle, d:4};\n`);\n\n  test.isTrue(contains(output, 'babelHelpers._extends'));\n});\n\nTinytest.add(\"ecmascript - transpilation - helpers - objectWithoutProperties\", (test) => {\n  const output = transform(`\nvar {a, ...rest} = obj;\n`);\n\n  test.isTrue(contains(output, 'babelHelpers.objectWithoutProperties'));\n});\n\nTinytest.add(\"ecmascript - transpilation - helpers - objectDestructuringEmpty\", (test) => {\n  const output = transform(`\nvar {} = null;\n`);\n\n  test.isTrue(contains(output, 'babelHelpers.objectDestructuringEmpty'));\n});\n\nTinytest.add(\"ecmascript - transpilation - helpers - taggedTemplateLiteralLoose\", (test) => {\n  const output = transform(`\nvar x = asdf\\`A\\${foo}C\\`\n`);\n\n  test.isTrue(contains(output, 'babelHelpers.taggedTemplateLiteralLoose'));\n});\n\nTinytest.add(\"ecmascript - transpilation - helpers - createClass\", (test) => {\n  const output = transform(`\nclass Foo {\n  get blah() { return 123; }\n}\n`);\n\n  test.isTrue(contains(output, 'babelHelpers.createClass'));\n});\n\nTinytest.add(\"ecmascript - transpilation - flow\", (test) => {\n  const output = transform(\n    'var foo = function (one: any, two: number, three?): string {};');\n  test.isTrue(contains(output, '(one, two, three)'));\n});\n"]},"hash":"b03642feaa13fe27d52ffe11fcf3ed49ee50a955"}
