{"metadata":{"modules":{"imports":[{"source":"./definition/builder","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Builder"}]},{"source":"../models/industry","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Industry"}]},{"source":"underscore","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"_"}]}],"exports":{"exported":["IndustryBuilder"],"specifiers":[{"kind":"local","local":"IndustryBuilder","exported":"default"}]}},"usedHelpers":["inherits","class-call-check","interop-require-default"]},"ignored":false,"code":"exports.__esModule = true;\n\nvar _definitionBuilder = require('./definition/builder');\n\nvar _definitionBuilder2 = babelHelpers.interopRequireDefault(_definitionBuilder);\n\nvar _modelsIndustry = require('../models/industry');\n\nvar _modelsIndustry2 = babelHelpers.interopRequireDefault(_modelsIndustry);\n\nvar _underscore = require('underscore');\n\nvar _underscore2 = babelHelpers.interopRequireDefault(_underscore);\n\n/**\n * The Industry Builder allows you to lazily build\n * industries.\n *\n * @type {Builder}\n */\n\nvar IndustryBuilder = (function (_Builder) {\n  babelHelpers.inherits(IndustryBuilder, _Builder);\n\n  function IndustryBuilder() {\n    babelHelpers.classCallCheck(this, IndustryBuilder);\n\n    _Builder.call(this);\n\n    this.options = {};\n    this.options.potentialSalesPerQuarter = 0;\n    this.options.initialRevenuePerSale = 0;\n    this.options.initialCostPerFactory = 0;\n    this.options.quarterCostPerFactory = 0;\n    this.options.maximumOutputPerFactory = 0;\n    this.options.materialCostsPerSale = 0;\n    this.options.wastePerSale = 1;\n    this.options.comments = '';\n  }\n\n  IndustryBuilder.prototype.setPotentialSalesPerQuarter = (function () {\n    function setPotentialSalesPerQuarter(potential) {\n      this.options.potentialSalesPerQuarter = potential;\n    }\n\n    return setPotentialSalesPerQuarter;\n  })();\n\n  IndustryBuilder.prototype.setInitialRevenuePerSale = (function () {\n    function setInitialRevenuePerSale(initial) {\n      this.options.initialRevenuePerSale = initial;\n    }\n\n    return setInitialRevenuePerSale;\n  })();\n\n  IndustryBuilder.prototype.setInitialCostPerFactory = (function () {\n    function setInitialCostPerFactory(initial) {\n      this.options.initialCostPerFactory = initial;\n    }\n\n    return setInitialCostPerFactory;\n  })();\n\n  IndustryBuilder.prototype.setQuarterCostPerFactory = (function () {\n    function setQuarterCostPerFactory(cost) {\n      this.options.quarterCostPerFactory = cost;\n    }\n\n    return setQuarterCostPerFactory;\n  })();\n\n  IndustryBuilder.prototype.setMaximumOutputPerFactory = (function () {\n    function setMaximumOutputPerFactory(output) {\n      this.options.maximumOutputPerFactory = output;\n    }\n\n    return setMaximumOutputPerFactory;\n  })();\n\n  IndustryBuilder.prototype.setMaterialCostsPerSale = (function () {\n    function setMaterialCostsPerSale(costs) {\n      this.options.materialCostsPerSale = costs;\n    }\n\n    return setMaterialCostsPerSale;\n  })();\n\n  IndustryBuilder.prototype.setWastePerSale = (function () {\n    function setWastePerSale(wastePerSale) {\n      this.options.wastePerSale = wastePerSale;\n    }\n\n    return setWastePerSale;\n  })();\n\n  IndustryBuilder.prototype.setComment = (function () {\n    function setComment(comment) {\n      this.options.comment = comment;\n    }\n\n    return setComment;\n  })();\n\n  IndustryBuilder.prototype.setFromOptions = (function () {\n    function setFromOptions(options) {\n      this.options = _underscore2['default'].extend(this.options, options);\n    }\n\n    return setFromOptions;\n  })();\n\n  /**\n   * @override\n   * @return {Industry}\n   */\n\n  IndustryBuilder.prototype.build = (function () {\n    function build() {\n      return new _modelsIndustry2['default'](this.options);\n    }\n\n    return build;\n  })();\n\n  return IndustryBuilder;\n})(_definitionBuilder2['default']);\n\nexports['default'] = IndustryBuilder;\nmodule.exports = exports['default'];","ast":null,"map":{"version":3,"sources":["/client/builders/industry-builder.js"],"names":[],"mappings":";;iCAAoB,sBAAsB;;;;8BACrB,oBAAoB;;;;0BAC3B,YAAY;;;;;;;;;;;IAQL,eAAe;wBAAf,eAAe;;AACvB,WADQ,eAAe,GACpB;sCADK,eAAe;;AAEhC,uBAAO,CAAC;;AAER,QAAI,CAAC,OAAO,GAAG,EAAE,CAAC;AAClB,QAAI,CAAC,OAAO,CAAC,wBAAwB,GAAG,CAAC,CAAC;AAC1C,QAAI,CAAC,OAAO,CAAC,qBAAqB,GAAG,CAAC,CAAC;AACvC,QAAI,CAAC,OAAO,CAAC,qBAAqB,GAAG,CAAC,CAAC;AACvC,QAAI,CAAC,OAAO,CAAC,qBAAqB,GAAG,CAAC,CAAC;AACvC,QAAI,CAAC,OAAO,CAAC,uBAAuB,GAAG,CAAC,CAAC;AACzC,QAAI,CAAC,OAAO,CAAC,oBAAoB,GAAG,CAAC,CAAC;AACtC,QAAI,CAAC,OAAO,CAAC,YAAY,GAAG,CAAC,CAAC;AAC9B,QAAI,CAAC,OAAO,CAAC,QAAQ,GAAG,EAAE,CAAC;GAC5B;;AAbkB,iBAAe,WAelC,2BAA2B;AAAA,yCAAE,SAAS,EAAG;AACvC,UAAI,CAAC,OAAO,CAAC,wBAAwB,GAAG,SAAS,CAAC;KACnD;;;;;AAjBkB,iBAAe,WAmBlC,wBAAwB;AAAA,sCAAE,OAAO,EAAG;AAClC,UAAI,CAAC,OAAO,CAAC,qBAAqB,GAAG,OAAO,CAAC;KAC9C;;;;;AArBkB,iBAAe,WAuBlC,wBAAwB;AAAA,sCAAE,OAAO,EAAG;AAClC,UAAI,CAAC,OAAO,CAAC,qBAAqB,GAAG,OAAO,CAAC;KAC9C;;;;;AAzBkB,iBAAe,WA2BlC,wBAAwB;AAAA,sCAAE,IAAI,EAAG;AAC/B,UAAI,CAAC,OAAO,CAAC,qBAAqB,GAAG,IAAI,CAAC;KAC3C;;;;;AA7BkB,iBAAe,WA+BlC,0BAA0B;AAAA,wCAAE,MAAM,EAAG;AACnC,UAAI,CAAC,OAAO,CAAC,uBAAuB,GAAG,MAAM,CAAC;KAC/C;;;;;AAjCkB,iBAAe,WAmClC,uBAAuB;AAAA,qCAAE,KAAK,EAAG;AAC/B,UAAI,CAAC,OAAO,CAAC,oBAAoB,GAAG,KAAK,CAAC;KAC3C;;;;;AArCkB,iBAAe,WAuClC,eAAe;AAAA,6BAAE,YAAY,EAAG;AAC9B,UAAI,CAAC,OAAO,CAAC,YAAY,GAAG,YAAY,CAAC;KAC1C;;;;;AAzCkB,iBAAe,WA2ClC,UAAU;AAAA,wBAAE,OAAO,EAAG;AACpB,UAAI,CAAC,OAAO,CAAC,OAAO,GAAG,OAAO,CAAC;KAChC;;;;;AA7CkB,iBAAe,WA+ClC,cAAc;AAAA,4BAAE,OAAO,EAAG;AACxB,UAAI,CAAC,OAAO,GAAG,wBAAE,MAAM,CAAE,IAAI,CAAC,OAAO,EAAE,OAAO,CAAE,CAAC;KAClD;;;;;;;;;;AAjDkB,iBAAe,WAuDlC,KAAK;AAAA,qBAAG;AACN,aAAO,gCAAc,IAAI,CAAC,OAAO,CAAE,CAAC;KACrC;;;;;SAzDkB,eAAe;;;qBAAf,eAAe","file":"/client/builders/industry-builder.js.map","sourcesContent":["import Builder from './definition/builder';\nimport Industry from '../models/industry';\nimport _ from 'underscore';\n\n/**\n * The Industry Builder allows you to lazily build\n * industries.\n *\n * @type {Builder}\n */\nexport default class IndustryBuilder extends Builder {\n  constructor() {\n    super();\n\n    this.options = {};\n    this.options.potentialSalesPerQuarter = 0;\n    this.options.initialRevenuePerSale = 0;\n    this.options.initialCostPerFactory = 0;\n    this.options.quarterCostPerFactory = 0;\n    this.options.maximumOutputPerFactory = 0;\n    this.options.materialCostsPerSale = 0;\n    this.options.wastePerSale = 1;\n    this.options.comments = '';\n  }\n\n  setPotentialSalesPerQuarter( potential ) {\n    this.options.potentialSalesPerQuarter = potential;\n  }\n\n  setInitialRevenuePerSale( initial ) {\n    this.options.initialRevenuePerSale = initial;\n  }\n\n  setInitialCostPerFactory( initial ) {\n    this.options.initialCostPerFactory = initial;\n  }\n\n  setQuarterCostPerFactory( cost ) {\n    this.options.quarterCostPerFactory = cost;\n  }\n\n  setMaximumOutputPerFactory( output ) {\n    this.options.maximumOutputPerFactory = output;\n  }\n\n  setMaterialCostsPerSale( costs ) {\n    this.options.materialCostsPerSale = costs;\n  }\n\n  setWastePerSale( wastePerSale ) {\n    this.options.wastePerSale = wastePerSale;\n  }\n\n  setComment( comment ) {\n    this.options.comment = comment;\n  }\n\n  setFromOptions( options ) {\n    this.options = _.extend( this.options, options );\n  }\n\n  /**\n   * @override\n   * @return {Industry}\n   */\n  build() {\n    return new Industry( this.options );\n  }\n}\n"]},"hash":"830098465772d4852dce2dfd5991a53e7de52ca4"}
