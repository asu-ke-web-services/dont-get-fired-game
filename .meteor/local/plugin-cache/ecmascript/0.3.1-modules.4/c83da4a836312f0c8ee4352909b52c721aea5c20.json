{"metadata":{"modules":{"imports":[],"exports":{"exported":["Builder"],"specifiers":[{"kind":"local","local":"Builder","exported":"default"}]}},"usedHelpers":["class-call-check"]},"ignored":false,"code":"exports.__esModule = true;\n/**\n * Builders should have a build method\n *\n * The builder pattern is an object creation software\n * design pattern. The intention is to allow for lazy\n * creation of an object.\n *\n * @type {Builder}\n */\n\nvar Builder = (function () {\n  function Builder() {\n    babelHelpers.classCallCheck(this, Builder);\n  }\n\n  Builder.prototype.build = (function () {\n    function build() {}\n\n    return build;\n  })();\n\n  return Builder;\n})();\n\nexports[\"default\"] = Builder;\nmodule.exports = exports[\"default\"];","ast":null,"map":{"version":3,"sources":["/client/builders/definition/builder.js"],"names":[],"mappings":";;;;;;;;;;;IASqB,OAAO;WAAP,OAAO;sCAAP,OAAO;;;AAAP,SAAO,WAC1B,KAAK;AAAA,qBAAG,EAAE;;;;;SADS,OAAO;;;qBAAP,OAAO","file":"/client/builders/definition/builder.js.map","sourcesContent":["/**\n * Builders should have a build method\n *\n * The builder pattern is an object creation software\n * design pattern. The intention is to allow for lazy\n * creation of an object.\n *\n * @type {Builder}\n */\nexport default class Builder {\n  build() {}\n}\n"]},"hash":"c83da4a836312f0c8ee4352909b52c721aea5c20"}
