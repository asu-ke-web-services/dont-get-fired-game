{"metadata":{"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}},"usedHelpers":[]},"ignored":false,"code":"MongoInternals.RemoteCollectionDriver = function (mongo_url, options) {\n  var self = this;\n  self.mongo = new MongoConnection(mongo_url, options);\n};\n\n_.extend(MongoInternals.RemoteCollectionDriver.prototype, {\n  open: function (name) {\n    var self = this;\n    var ret = {};\n    _.each(['find', 'findOne', 'insert', 'update', 'upsert', 'remove', '_ensureIndex', '_dropIndex', '_createCappedCollection', 'dropCollection', 'rawCollection'], function (m) {\n      ret[m] = _.bind(self.mongo[m], self.mongo, name);\n    });\n    return ret;\n  }\n});\n\n// Create the singleton RemoteCollectionDriver only on demand, so we\n// only require Mongo configuration if it's actually used (eg, not if\n// you're only trying to receive data from a remote DDP server.)\nMongoInternals.defaultRemoteCollectionDriver = _.once(function () {\n  var connectionOptions = {};\n\n  var mongoUrl = process.env.MONGO_URL;\n\n  if (process.env.MONGO_OPLOG_URL) {\n    connectionOptions.oplogUrl = process.env.MONGO_OPLOG_URL;\n  }\n\n  if (!mongoUrl) throw new Error(\"MONGO_URL must be set in environment\");\n\n  return new MongoInternals.RemoteCollectionDriver(mongoUrl, connectionOptions);\n});","ast":null,"map":{"version":3,"sources":["/packages/mongo/remote_collection_driver.js"],"names":[],"mappings":"AAAA,cAAc,CAAC,sBAAsB,GAAG,UACtC,SAAS,EAAE,OAAO,EAAE;AACpB,MAAI,IAAI,GAAG,IAAI,CAAC;AAChB,MAAI,CAAC,KAAK,GAAG,IAAI,eAAe,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;CACtD,CAAC;;AAEF,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,sBAAsB,CAAC,SAAS,EAAE;AACxD,MAAI,EAAE,UAAU,IAAI,EAAE;AACpB,QAAI,IAAI,GAAG,IAAI,CAAC;AAChB,QAAI,GAAG,GAAG,EAAE,CAAC;AACb,KAAC,CAAC,IAAI,CACJ,CAAC,MAAM,EAAE,SAAS,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAC/C,QAAQ,EAAE,cAAc,EAAE,YAAY,EAAE,yBAAyB,EACjE,gBAAgB,EAAE,eAAe,CAAC,EACnC,UAAU,CAAC,EAAE;AACX,SAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;KAClD,CAAC,CAAC;AACL,WAAO,GAAG,CAAC;GACZ;CACF,CAAC,CAAC;;;;;AAMH,cAAc,CAAC,6BAA6B,GAAG,CAAC,CAAC,IAAI,CAAC,YAAY;AAChE,MAAI,iBAAiB,GAAG,EAAE,CAAC;;AAE3B,MAAI,QAAQ,GAAG,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC;;AAErC,MAAI,OAAO,CAAC,GAAG,CAAC,eAAe,EAAE;AAC/B,qBAAiB,CAAC,QAAQ,GAAG,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC;GAC1D;;AAED,MAAI,CAAE,QAAQ,EACZ,MAAM,IAAI,KAAK,CAAC,sCAAsC,CAAC,CAAC;;AAE1D,SAAO,IAAI,cAAc,CAAC,sBAAsB,CAAC,QAAQ,EAAE,iBAAiB,CAAC,CAAC;CAC/E,CAAC,CAAC","file":"/packages/mongo/remote_collection_driver.js.map","sourcesContent":["MongoInternals.RemoteCollectionDriver = function (\n  mongo_url, options) {\n  var self = this;\n  self.mongo = new MongoConnection(mongo_url, options);\n};\n\n_.extend(MongoInternals.RemoteCollectionDriver.prototype, {\n  open: function (name) {\n    var self = this;\n    var ret = {};\n    _.each(\n      ['find', 'findOne', 'insert', 'update', 'upsert',\n       'remove', '_ensureIndex', '_dropIndex', '_createCappedCollection',\n       'dropCollection', 'rawCollection'],\n      function (m) {\n        ret[m] = _.bind(self.mongo[m], self.mongo, name);\n      });\n    return ret;\n  }\n});\n\n\n// Create the singleton RemoteCollectionDriver only on demand, so we\n// only require Mongo configuration if it's actually used (eg, not if\n// you're only trying to receive data from a remote DDP server.)\nMongoInternals.defaultRemoteCollectionDriver = _.once(function () {\n  var connectionOptions = {};\n\n  var mongoUrl = process.env.MONGO_URL;\n\n  if (process.env.MONGO_OPLOG_URL) {\n    connectionOptions.oplogUrl = process.env.MONGO_OPLOG_URL;\n  }\n\n  if (! mongoUrl)\n    throw new Error(\"MONGO_URL must be set in environment\");\n\n  return new MongoInternals.RemoteCollectionDriver(mongoUrl, connectionOptions);\n});\n"]},"hash":"79796e457a3627a2964aa8148787bfa7d342912a"}
