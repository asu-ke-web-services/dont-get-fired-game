{"metadata":{"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}},"usedHelpers":[]},"ignored":false,"code":"Tinytest.add('random', function (test) {\n  // Deterministic with a specified seed, which should generate the\n  // same sequence in all environments.\n  //\n  // For repeatable unit test failures using deterministic random\n  // number sequences it's fine if a new Meteor release changes the\n  // algorithm being used and it starts generating a different\n  // sequence for a seed, as long as the sequence is consistent for\n  // a particular release.\n  var random = Random.createWithSeeds(0);\n  test.equal(random.id(), \"cp9hWvhg8GSvuZ9os\");\n  test.equal(random.id(), \"3f3k6Xo7rrHCifQhR\");\n  test.equal(random.id(), \"shxDnjWWmnKPEoLhM\");\n  test.equal(random.id(), \"6QTjB8C5SEqhmz4ni\");\n});\n\n// node crypto and window.crypto.getRandomValues() don't let us specify a seed,\n// but at least test that the output is in the right format.\nTinytest.add('random - format', function (test) {\n  var idLen = 17;\n  test.equal(Random.id().length, idLen);\n  test.equal(Random.id(29).length, 29);\n  var numDigits = 9;\n  var hexStr = Random.hexString(numDigits);\n  test.equal(hexStr.length, numDigits);\n  parseInt(hexStr, 16); // should not throw\n  var frac = Random.fraction();\n  test.isTrue(frac < 1.0);\n  test.isTrue(frac >= 0.0);\n\n  test.equal(Random.secret().length, 43);\n  test.equal(Random.secret(13).length, 13);\n});\n\nTinytest.add('random - Alea is last resort', function (test) {\n  if (Meteor.isServer) {\n    test.isTrue(Random.alea === undefined);\n  }\n  if (Meteor.isClient) {\n    var useGetRandomValues = !!(typeof window !== \"undefined\" && window.crypto && window.crypto.getRandomValues);\n    test.equal(Random.alea === undefined, useGetRandomValues);\n  }\n});\n\nTinytest.add('random - createWithSeeds requires parameters', function (test) {\n  test.throws(function () {\n    Random.createWithSeeds();\n  });\n});","ast":null,"map":{"version":3,"sources":["/packages/random/random_tests.js"],"names":[],"mappings":"AAAA,QAAQ,CAAC,GAAG,CAAC,QAAQ,EAAE,UAAU,IAAI,EAAE;;;;;;;;;AASrC,MAAI,MAAM,GAAG,MAAM,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;AACvC,MAAI,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,EAAE,EAAE,mBAAmB,CAAC,CAAC;AAC7C,MAAI,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,EAAE,EAAE,mBAAmB,CAAC,CAAC;AAC7C,MAAI,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,EAAE,EAAE,mBAAmB,CAAC,CAAC;AAC7C,MAAI,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,EAAE,EAAE,mBAAmB,CAAC,CAAC;CAC9C,CAAC,CAAC;;;;AAIH,QAAQ,CAAC,GAAG,CAAC,iBAAiB,EAAE,UAAU,IAAI,EAAE;AAC9C,MAAI,KAAK,GAAG,EAAE,CAAC;AACf,MAAI,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,EAAE,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;AACtC,MAAI,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;AACrC,MAAI,SAAS,GAAG,CAAC,CAAC;AAClB,MAAI,MAAM,GAAG,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;AACzC,MAAI,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;AACrC,UAAQ,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;AACrB,MAAI,IAAI,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC;AAC7B,MAAI,CAAC,MAAM,CAAC,IAAI,GAAG,GAAG,CAAC,CAAC;AACxB,MAAI,CAAC,MAAM,CAAC,IAAI,IAAI,GAAG,CAAC,CAAC;;AAEzB,MAAI,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;AACvC,MAAI,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;CAC1C,CAAC,CAAC;;AAEH,QAAQ,CAAC,GAAG,CAAC,8BAA8B,EAAE,UAAU,IAAI,EAAE;AAC3D,MAAI,MAAM,CAAC,QAAQ,EAAE;AACnB,QAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,KAAK,SAAS,CAAC,CAAC;GACxC;AACD,MAAI,MAAM,CAAC,QAAQ,EAAE;AACnB,QAAI,kBAAkB,GAAG,CAAC,EAAE,OAAO,MAAM,KAAK,WAAW,IACrD,MAAM,CAAC,MAAM,IAAI,MAAM,CAAC,MAAM,CAAC,eAAe,CAAA,AAAC,CAAC;AACpD,QAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,KAAK,SAAS,EAAE,kBAAkB,CAAC,CAAC;GAC3D;CACF,CAAC,CAAC;;AAEH,QAAQ,CAAC,GAAG,CAAC,8CAA8C,EAAE,UAAU,IAAI,EAAE;AAC3E,MAAI,CAAC,MAAM,CAAC,YAAY;AACtB,UAAM,CAAC,eAAe,EAAE,CAAC;GAC1B,CAAC,CAAC;CACJ,CAAC,CAAC","file":"/packages/random/random_tests.js.map","sourcesContent":["Tinytest.add('random', function (test) {\n  // Deterministic with a specified seed, which should generate the\n  // same sequence in all environments.\n  //\n  // For repeatable unit test failures using deterministic random\n  // number sequences it's fine if a new Meteor release changes the\n  // algorithm being used and it starts generating a different\n  // sequence for a seed, as long as the sequence is consistent for\n  // a particular release.\n  var random = Random.createWithSeeds(0);\n  test.equal(random.id(), \"cp9hWvhg8GSvuZ9os\");\n  test.equal(random.id(), \"3f3k6Xo7rrHCifQhR\");\n  test.equal(random.id(), \"shxDnjWWmnKPEoLhM\");\n  test.equal(random.id(), \"6QTjB8C5SEqhmz4ni\");\n});\n\n// node crypto and window.crypto.getRandomValues() don't let us specify a seed,\n// but at least test that the output is in the right format.\nTinytest.add('random - format', function (test) {\n  var idLen = 17;\n  test.equal(Random.id().length, idLen);\n  test.equal(Random.id(29).length, 29);\n  var numDigits = 9;\n  var hexStr = Random.hexString(numDigits);\n  test.equal(hexStr.length, numDigits);\n  parseInt(hexStr, 16); // should not throw\n  var frac = Random.fraction();\n  test.isTrue(frac < 1.0);\n  test.isTrue(frac >= 0.0);\n\n  test.equal(Random.secret().length, 43);\n  test.equal(Random.secret(13).length, 13);\n});\n\nTinytest.add('random - Alea is last resort', function (test) {\n  if (Meteor.isServer) {\n    test.isTrue(Random.alea === undefined);\n  }\n  if (Meteor.isClient) {\n    var useGetRandomValues = !!(typeof window !== \"undefined\" &&\n        window.crypto && window.crypto.getRandomValues);\n    test.equal(Random.alea === undefined, useGetRandomValues);\n  }\n});\n\nTinytest.add('random - createWithSeeds requires parameters', function (test) {\n  test.throws(function () {\n    Random.createWithSeeds();\n  });\n});\n"]},"hash":"625bf59d41bf284066b6e4160dc270a1cea92e94"}
