{"metadata":{"modules":{"imports":[],"exports":{"exported":["Strategy"],"specifiers":[{"kind":"local","local":"Strategy","exported":"default"}]}},"usedHelpers":["class-call-check"]},"ignored":false,"code":"exports.__esModule = true;\n/**\n * Stategies should have an execute method\n *\n * The strategy pattern (also known as the policy pattern)\n * is a software design pattern that enables an algorithm's\n * behavior to be selected at runtime.\n *\n * @type {Strategy}\n */\n\nvar Strategy = (function () {\n  function Strategy() {\n    babelHelpers.classCallCheck(this, Strategy);\n  }\n\n  Strategy.prototype.execute = (function () {\n    function execute() {}\n\n    return execute;\n  })();\n\n  return Strategy;\n})();\n\nexports[\"default\"] = Strategy;\nmodule.exports = exports[\"default\"];","ast":null,"map":{"version":3,"sources":["/client/strategies/definition/strategy.js"],"names":[],"mappings":";;;;;;;;;;;IASqB,QAAQ;WAAR,QAAQ;sCAAR,QAAQ;;;AAAR,UAAQ,WAC3B,OAAO;AAAA,uBAAG,EAAE;;;;;SADO,QAAQ;;;qBAAR,QAAQ","file":"/client/strategies/definition/strategy.js.map","sourcesContent":["/**\n * Stategies should have an execute method\n *\n * The strategy pattern (also known as the policy pattern)\n * is a software design pattern that enables an algorithm's\n * behavior to be selected at runtime.\n *\n * @type {Strategy}\n */\nexport default class Strategy {\n  execute() {}\n}\n"]},"hash":"bcf52ec5b17e26ff64dd1c8079f63b802f9d3e08"}
