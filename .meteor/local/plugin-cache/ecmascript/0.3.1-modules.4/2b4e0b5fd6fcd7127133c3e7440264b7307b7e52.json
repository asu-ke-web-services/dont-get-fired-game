{"metadata":{"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}},"usedHelpers":[]},"ignored":false,"code":"var OplogCollection = new Mongo.Collection(\"oplog-\" + Random.id());\n\nTinytest.add(\"mongo-livedata - oplog - cursorSupported\", function (test) {\n  var oplogEnabled = !!MongoInternals.defaultRemoteCollectionDriver().mongo._oplogHandle;\n\n  var supported = function (expected, selector, options) {\n    var cursor = OplogCollection.find(selector, options);\n    var handle = cursor.observeChanges({ added: function () {} });\n    // If there's no oplog at all, we shouldn't ever use it.\n    if (!oplogEnabled) expected = false;\n    test.equal(!!handle._multiplexer._observeDriver._usesOplog, expected);\n    handle.stop();\n  };\n\n  supported(true, \"asdf\");\n  supported(true, 1234);\n  supported(true, new Mongo.ObjectID());\n\n  supported(true, { _id: \"asdf\" });\n  supported(true, { _id: 1234 });\n  supported(true, { _id: new Mongo.ObjectID() });\n\n  supported(true, { foo: \"asdf\",\n    bar: 1234,\n    baz: new Mongo.ObjectID(),\n    eeney: true,\n    miney: false,\n    moe: null });\n\n  supported(true, {});\n\n  supported(true, { $and: [{ foo: \"asdf\" }, { bar: \"baz\" }] });\n  supported(true, { foo: { x: 1 } });\n  supported(true, { foo: { $gt: 1 } });\n  supported(true, { foo: [1, 2, 3] });\n\n  // No $where.\n  supported(false, { $where: \"xxx\" });\n  supported(false, { $and: [{ foo: \"adsf\" }, { $where: \"xxx\" }] });\n  // No geoqueries.\n  supported(false, { x: { $near: [1, 1] } });\n  // Nothing Minimongo doesn't understand.  (Minimongo happens to fail to\n  // implement $elemMatch inside $all which MongoDB supports.)\n  supported(false, { x: { $all: [{ $elemMatch: { y: 2 } }] } });\n\n  supported(true, {}, { sort: { x: 1 } });\n  supported(true, {}, { sort: { x: 1 }, limit: 5 });\n  supported(false, {}, { sort: { $natural: 1 }, limit: 5 });\n  supported(false, {}, { limit: 5 });\n  supported(false, {}, { skip: 2, limit: 5 });\n  supported(false, {}, { skip: 2 });\n});\n\nprocess.env.MONGO_OPLOG_URL && testAsyncMulti(\"mongo-livedata - oplog - entry skipping\", [function (test, expect) {\n  var self = this;\n  self.collectionName = Random.id();\n  self.collection = new Mongo.Collection(self.collectionName);\n  self.collection._ensureIndex({ species: 1 });\n\n  // Fill collection with lots of irrelevant objects (red cats) and some\n  // relevant ones (blue dogs).\n  self.IRRELEVANT_SIZE = 15000;\n  self.RELEVANT_SIZE = 10;\n  var docs = [];\n  var i;\n  for (i = 0; i < self.IRRELEVANT_SIZE; ++i) {\n    docs.push({\n      name: \"cat \" + i,\n      species: 'cat',\n      color: 'red'\n    });\n  }\n  for (i = 0; i < self.RELEVANT_SIZE; ++i) {\n    docs.push({\n      name: \"dog \" + i,\n      species: 'dog',\n      color: 'blue'\n    });\n  }\n  // XXX implement bulk insert #1255\n  var rawCollection = self.collection.rawCollection();\n  rawCollection.insert(docs, Meteor.bindEnvironment(expect(function (err) {\n    test.isFalse(err);\n  })));\n}, function (test, expect) {\n  var self = this;\n\n  test.equal(self.collection.find().count(), self.IRRELEVANT_SIZE + self.RELEVANT_SIZE);\n\n  var blueDog5Id = null;\n  var gotSpot = false;\n\n  // Watch for blue dogs.\n  self.subHandle = self.collection.find({ species: 'dog', color: 'blue' }).observeChanges({\n    added: function (id, fields) {\n      if (fields.name === 'dog 5') blueDog5Id = id;\n    },\n    changed: function (id, fields) {\n      if (EJSON.equals(id, blueDog5Id) && fields.name === 'spot') gotSpot = true;\n    }\n  });\n  test.isTrue(self.subHandle._multiplexer._observeDriver._usesOplog);\n  test.isTrue(blueDog5Id);\n  test.isFalse(gotSpot);\n\n  self.skipped = false;\n  self.skipHandle = MongoInternals.defaultRemoteCollectionDriver().mongo._oplogHandle.onSkippedEntries(function () {\n    self.skipped = true;\n  });\n\n  // Dye all the cats blue. This adds lots of oplog mentries that look like\n  // they might in theory be relevant (since they say \"something you didn't\n  // know about is now blue\", and who knows, maybe it's a dog) which puts\n  // the OplogObserveDriver into FETCHING mode, which performs poorly.\n  self.collection.update({ species: 'cat' }, { $set: { color: 'blue' } }, { multi: true });\n  self.collection.update(blueDog5Id, { $set: { name: 'spot' } });\n\n  // We ought to see the spot change soon!  It's important to keep this\n  // timeout relatively small (ie, small enough that if we set\n  // $METEOR_OPLOG_TOO_FAR_BEHIND to something enormous, say 200000, that\n  // the test fails).\n  pollUntil(expect, function () {\n    return gotSpot;\n  }, 2000);\n}, function (test, expect) {\n  var self = this;\n  test.isTrue(self.skipped);\n\n  self.skipHandle.stop();\n  self.subHandle.stop();\n  self.collection.remove({});\n}]);","ast":null,"map":{"version":3,"sources":["/packages/mongo/oplog_tests.js"],"names":[],"mappings":"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","file":"/packages/mongo/oplog_tests.js.map","sourcesContent":["var OplogCollection = new Mongo.Collection(\"oplog-\" + Random.id());\n\nTinytest.add(\"mongo-livedata - oplog - cursorSupported\", function (test) {\n  var oplogEnabled =\n        !!MongoInternals.defaultRemoteCollectionDriver().mongo._oplogHandle;\n\n  var supported = function (expected, selector, options) {\n    var cursor = OplogCollection.find(selector, options);\n    var handle = cursor.observeChanges({added: function () {}});\n    // If there's no oplog at all, we shouldn't ever use it.\n    if (!oplogEnabled)\n      expected = false;\n    test.equal(!!handle._multiplexer._observeDriver._usesOplog, expected);\n    handle.stop();\n  };\n\n  supported(true, \"asdf\");\n  supported(true, 1234);\n  supported(true, new Mongo.ObjectID());\n\n  supported(true, {_id: \"asdf\"});\n  supported(true, {_id: 1234});\n  supported(true, {_id: new Mongo.ObjectID()});\n\n  supported(true, {foo: \"asdf\",\n                   bar: 1234,\n                   baz: new Mongo.ObjectID(),\n                   eeney: true,\n                   miney: false,\n                   moe: null});\n\n  supported(true, {});\n\n  supported(true, {$and: [{foo: \"asdf\"}, {bar: \"baz\"}]});\n  supported(true, {foo: {x: 1}});\n  supported(true, {foo: {$gt: 1}});\n  supported(true, {foo: [1, 2, 3]});\n\n  // No $where.\n  supported(false, {$where: \"xxx\"});\n  supported(false, {$and: [{foo: \"adsf\"}, {$where: \"xxx\"}]});\n  // No geoqueries.\n  supported(false, {x: {$near: [1,1]}});\n  // Nothing Minimongo doesn't understand.  (Minimongo happens to fail to\n  // implement $elemMatch inside $all which MongoDB supports.)\n  supported(false, {x: {$all: [{$elemMatch: {y: 2}}]}});\n\n  supported(true, {}, { sort: {x:1} });\n  supported(true, {}, { sort: {x:1}, limit: 5 });\n  supported(false, {}, { sort: {$natural:1}, limit: 5 });\n  supported(false, {}, { limit: 5 });\n  supported(false, {}, { skip: 2, limit: 5 });\n  supported(false, {}, { skip: 2 });\n});\n\nprocess.env.MONGO_OPLOG_URL && testAsyncMulti(\n  \"mongo-livedata - oplog - entry skipping\", [\n    function (test, expect) {\n      var self = this;\n      self.collectionName = Random.id();\n      self.collection = new Mongo.Collection(self.collectionName);\n      self.collection._ensureIndex({species: 1});\n\n      // Fill collection with lots of irrelevant objects (red cats) and some\n      // relevant ones (blue dogs).\n      self.IRRELEVANT_SIZE = 15000;\n      self.RELEVANT_SIZE = 10;\n      var docs = [];\n      var i;\n      for (i = 0; i < self.IRRELEVANT_SIZE; ++i) {\n        docs.push({\n          name: \"cat \" + i,\n          species: 'cat',\n          color: 'red'\n        });\n      }\n      for (i = 0; i < self.RELEVANT_SIZE; ++i) {\n        docs.push({\n          name: \"dog \" + i,\n          species: 'dog',\n          color: 'blue'\n        });\n      }\n      // XXX implement bulk insert #1255\n      var rawCollection = self.collection.rawCollection();\n      rawCollection.insert(docs, Meteor.bindEnvironment(expect(function (err) {\n        test.isFalse(err);\n      })));\n    },\n    function (test, expect) {\n      var self = this;\n\n      test.equal(self.collection.find().count(),\n                 self.IRRELEVANT_SIZE + self.RELEVANT_SIZE);\n\n      var blueDog5Id = null;\n      var gotSpot = false;\n\n      // Watch for blue dogs.\n      self.subHandle =\n        self.collection.find({species: 'dog', color: 'blue'}).observeChanges({\n          added: function (id, fields) {\n            if (fields.name === 'dog 5')\n              blueDog5Id = id;\n          },\n          changed: function (id, fields) {\n            if (EJSON.equals(id, blueDog5Id) && fields.name === 'spot')\n              gotSpot = true;\n          }\n        });\n      test.isTrue(self.subHandle._multiplexer._observeDriver._usesOplog);\n      test.isTrue(blueDog5Id);\n      test.isFalse(gotSpot);\n\n      self.skipped = false;\n      self.skipHandle =\n        MongoInternals.defaultRemoteCollectionDriver().mongo\n        ._oplogHandle.onSkippedEntries(function () {\n          self.skipped = true;\n        });\n\n      // Dye all the cats blue. This adds lots of oplog mentries that look like\n      // they might in theory be relevant (since they say \"something you didn't\n      // know about is now blue\", and who knows, maybe it's a dog) which puts\n      // the OplogObserveDriver into FETCHING mode, which performs poorly.\n      self.collection.update({species: 'cat'},\n                             {$set: {color: 'blue'}},\n                             {multi: true});\n      self.collection.update(blueDog5Id, {$set: {name: 'spot'}});\n\n      // We ought to see the spot change soon!  It's important to keep this\n      // timeout relatively small (ie, small enough that if we set\n      // $METEOR_OPLOG_TOO_FAR_BEHIND to something enormous, say 200000, that\n      // the test fails).\n      pollUntil(expect, function () {\n        return gotSpot;\n      }, 2000);\n    },\n    function (test, expect) {\n      var self = this;\n      test.isTrue(self.skipped);\n\n      self.skipHandle.stop();\n      self.subHandle.stop();\n      self.collection.remove({});\n    }\n  ]\n);\n"]},"hash":"2b4e0b5fd6fcd7127133c3e7440264b7307b7e52"}
