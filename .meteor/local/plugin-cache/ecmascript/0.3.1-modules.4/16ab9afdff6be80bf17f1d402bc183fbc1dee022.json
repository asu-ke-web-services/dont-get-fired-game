{"metadata":{"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}},"usedHelpers":[]},"ignored":false,"code":"var makeCollection = function () {\n  if (Meteor.isServer) return new Mongo.Collection(Random.id());else return new Mongo.Collection(null);\n};\n\n_.each([{ added: 'added', forceOrdered: true }, { added: 'added', forceOrdered: false }, { added: 'addedBefore', forceOrdered: false }], function (options) {\n  var added = options.added;\n  var forceOrdered = options.forceOrdered;\n  Tinytest.addAsync(\"observeChanges - single id - basics \" + added + (forceOrdered ? \" force ordered\" : \"\"), function (test, onComplete) {\n    var c = makeCollection();\n    var counter = 0;\n    var callbacks = [added, \"changed\", \"removed\"];\n    if (forceOrdered) callbacks.push(\"movedBefore\");\n    withCallbackLogger(test, callbacks, Meteor.isServer, function (logger) {\n      var barid = c.insert({ thing: \"stuff\" });\n      var fooid = c.insert({ noodles: \"good\", bacon: \"bad\", apples: \"ok\" });\n\n      var handle = c.find(fooid).observeChanges(logger);\n      if (added === 'added') logger.expectResult(added, [fooid, { noodles: \"good\", bacon: \"bad\", apples: \"ok\" }]);else logger.expectResult(added, [fooid, { noodles: \"good\", bacon: \"bad\", apples: \"ok\" }, null]);\n      c.update(fooid, { noodles: \"alright\", potatoes: \"tasty\", apples: \"ok\" });\n      logger.expectResult(\"changed\", [fooid, { noodles: \"alright\", potatoes: \"tasty\", bacon: undefined }]);\n\n      c.remove(fooid);\n      logger.expectResult(\"removed\", [fooid]);\n\n      c.remove(barid);\n\n      c.insert({ noodles: \"good\", bacon: \"bad\", apples: \"ok\" });\n      logger.expectNoResult();\n      handle.stop();\n\n      var badCursor = c.find({}, { fields: { noodles: 1, _id: false } });\n      test.throws(function () {\n        badCursor.observeChanges(logger);\n      });\n\n      onComplete();\n    });\n  });\n});\n\nTinytest.addAsync(\"observeChanges - callback isolation\", function (test, onComplete) {\n  var c = makeCollection();\n  withCallbackLogger(test, [\"added\", \"changed\", \"removed\"], Meteor.isServer, function (logger) {\n    var handles = [];\n    var cursor = c.find();\n    handles.push(cursor.observeChanges(logger));\n    // fields-tampering observer\n    handles.push(cursor.observeChanges({\n      added: function (id, fields) {\n        fields.apples = 'green';\n      },\n      changed: function (id, fields) {\n        fields.apples = 'green';\n      }\n    }));\n\n    var fooid = c.insert({ apples: \"ok\" });\n    logger.expectResult(\"added\", [fooid, { apples: \"ok\" }]);\n\n    c.update(fooid, { apples: \"not ok\" });\n    logger.expectResult(\"changed\", [fooid, { apples: \"not ok\" }]);\n\n    test.equal(c.findOne(fooid).apples, \"not ok\");\n\n    _.each(handles, function (handle) {\n      handle.stop();\n    });\n    onComplete();\n  });\n});\n\nTinytest.addAsync(\"observeChanges - single id - initial adds\", function (test, onComplete) {\n  var c = makeCollection();\n  withCallbackLogger(test, [\"added\", \"changed\", \"removed\"], Meteor.isServer, function (logger) {\n    var fooid = c.insert({ noodles: \"good\", bacon: \"bad\", apples: \"ok\" });\n    var handle = c.find(fooid).observeChanges(logger);\n    logger.expectResult(\"added\", [fooid, { noodles: \"good\", bacon: \"bad\", apples: \"ok\" }]);\n    logger.expectNoResult();\n    handle.stop();\n    onComplete();\n  });\n});\n\nTinytest.addAsync(\"observeChanges - unordered - initial adds\", function (test, onComplete) {\n  var c = makeCollection();\n  withCallbackLogger(test, [\"added\", \"changed\", \"removed\"], Meteor.isServer, function (logger) {\n    var fooid = c.insert({ noodles: \"good\", bacon: \"bad\", apples: \"ok\" });\n    var barid = c.insert({ noodles: \"good\", bacon: \"weird\", apples: \"ok\" });\n    var handle = c.find().observeChanges(logger);\n    logger.expectResultUnordered([{ callback: \"added\",\n      args: [fooid, { noodles: \"good\", bacon: \"bad\", apples: \"ok\" }] }, { callback: \"added\",\n      args: [barid, { noodles: \"good\", bacon: \"weird\", apples: \"ok\" }] }]);\n    logger.expectNoResult();\n    handle.stop();\n    onComplete();\n  });\n});\n\nTinytest.addAsync(\"observeChanges - unordered - basics\", function (test, onComplete) {\n  var c = makeCollection();\n  withCallbackLogger(test, [\"added\", \"changed\", \"removed\"], Meteor.isServer, function (logger) {\n    var handle = c.find().observeChanges(logger);\n    var barid = c.insert({ thing: \"stuff\" });\n    logger.expectResultOnly(\"added\", [barid, { thing: \"stuff\" }]);\n\n    var fooid = c.insert({ noodles: \"good\", bacon: \"bad\", apples: \"ok\" });\n\n    logger.expectResultOnly(\"added\", [fooid, { noodles: \"good\", bacon: \"bad\", apples: \"ok\" }]);\n\n    c.update(fooid, { noodles: \"alright\", potatoes: \"tasty\", apples: \"ok\" });\n    c.update(fooid, { noodles: \"alright\", potatoes: \"tasty\", apples: \"ok\" });\n    logger.expectResultOnly(\"changed\", [fooid, { noodles: \"alright\", potatoes: \"tasty\", bacon: undefined }]);\n    c.remove(fooid);\n    logger.expectResultOnly(\"removed\", [fooid]);\n    c.remove(barid);\n    logger.expectResultOnly(\"removed\", [barid]);\n\n    fooid = c.insert({ noodles: \"good\", bacon: \"bad\", apples: \"ok\" });\n\n    logger.expectResult(\"added\", [fooid, { noodles: \"good\", bacon: \"bad\", apples: \"ok\" }]);\n    logger.expectNoResult();\n    handle.stop();\n    onComplete();\n  });\n});\n\nif (Meteor.isServer) {\n  Tinytest.addAsync(\"observeChanges - unordered - specific fields\", function (test, onComplete) {\n    var c = makeCollection();\n    withCallbackLogger(test, [\"added\", \"changed\", \"removed\"], Meteor.isServer, function (logger) {\n      var handle = c.find({}, { fields: { noodles: 1, bacon: 1 } }).observeChanges(logger);\n      var barid = c.insert({ thing: \"stuff\" });\n      logger.expectResultOnly(\"added\", [barid, {}]);\n\n      var fooid = c.insert({ noodles: \"good\", bacon: \"bad\", apples: \"ok\" });\n\n      logger.expectResultOnly(\"added\", [fooid, { noodles: \"good\", bacon: \"bad\" }]);\n\n      c.update(fooid, { noodles: \"alright\", potatoes: \"tasty\", apples: \"ok\" });\n      logger.expectResultOnly(\"changed\", [fooid, { noodles: \"alright\", bacon: undefined }]);\n      c.update(fooid, { noodles: \"alright\", potatoes: \"meh\", apples: \"ok\" });\n      c.remove(fooid);\n      logger.expectResultOnly(\"removed\", [fooid]);\n      c.remove(barid);\n      logger.expectResultOnly(\"removed\", [barid]);\n\n      fooid = c.insert({ noodles: \"good\", bacon: \"bad\" });\n\n      logger.expectResult(\"added\", [fooid, { noodles: \"good\", bacon: \"bad\" }]);\n      logger.expectNoResult();\n      handle.stop();\n      onComplete();\n    });\n  });\n\n  Tinytest.addAsync(\"observeChanges - unordered - specific fields + selector on excluded fields\", function (test, onComplete) {\n    var c = makeCollection();\n    withCallbackLogger(test, [\"added\", \"changed\", \"removed\"], Meteor.isServer, function (logger) {\n      var handle = c.find({ mac: 1, cheese: 2 }, { fields: { noodles: 1, bacon: 1, eggs: 1 } }).observeChanges(logger);\n      var barid = c.insert({ thing: \"stuff\", mac: 1, cheese: 2 });\n      logger.expectResultOnly(\"added\", [barid, {}]);\n\n      var fooid = c.insert({ noodles: \"good\", bacon: \"bad\", apples: \"ok\", mac: 1, cheese: 2 });\n\n      logger.expectResultOnly(\"added\", [fooid, { noodles: \"good\", bacon: \"bad\" }]);\n\n      c.update(fooid, { noodles: \"alright\", potatoes: \"tasty\", apples: \"ok\", mac: 1, cheese: 2 });\n      logger.expectResultOnly(\"changed\", [fooid, { noodles: \"alright\", bacon: undefined }]);\n\n      // Doesn't get update event, since modifies only hidden fields\n      c.update(fooid, { noodles: \"alright\", potatoes: \"meh\", apples: \"ok\", mac: 1, cheese: 2 });\n      logger.expectNoResult();\n\n      c.remove(fooid);\n      logger.expectResultOnly(\"removed\", [fooid]);\n      c.remove(barid);\n      logger.expectResultOnly(\"removed\", [barid]);\n\n      fooid = c.insert({ noodles: \"good\", bacon: \"bad\", mac: 1, cheese: 2 });\n\n      logger.expectResult(\"added\", [fooid, { noodles: \"good\", bacon: \"bad\" }]);\n      logger.expectNoResult();\n      handle.stop();\n      onComplete();\n    });\n  });\n}\n\nTinytest.addAsync(\"observeChanges - unordered - specific fields + modify on excluded fields\", function (test, onComplete) {\n  var c = makeCollection();\n  withCallbackLogger(test, [\"added\", \"changed\", \"removed\"], Meteor.isServer, function (logger) {\n    var handle = c.find({ mac: 1, cheese: 2 }, { fields: { noodles: 1, bacon: 1, eggs: 1 } }).observeChanges(logger);\n    var fooid = c.insert({ noodles: \"good\", bacon: \"bad\", apples: \"ok\", mac: 1, cheese: 2 });\n\n    logger.expectResultOnly(\"added\", [fooid, { noodles: \"good\", bacon: \"bad\" }]);\n\n    // Noodles go into shadow, mac appears as eggs\n    c.update(fooid, { $rename: { noodles: 'shadow', apples: 'eggs' } });\n    logger.expectResultOnly(\"changed\", [fooid, { eggs: \"ok\", noodles: undefined }]);\n\n    c.remove(fooid);\n    logger.expectResultOnly(\"removed\", [fooid]);\n    logger.expectNoResult();\n    handle.stop();\n    onComplete();\n  });\n});\n\nTinytest.addAsync(\"observeChanges - unordered - unset parent of observed field\", function (test, onComplete) {\n  var c = makeCollection();\n  withCallbackLogger(test, ['added', 'changed', 'removed'], Meteor.isServer, function (logger) {\n    var handle = c.find({}, { fields: { 'type.name': 1 } }).observeChanges(logger);\n    var id = c.insert({ type: { name: 'foobar' } });\n    logger.expectResultOnly('added', [id, { type: { name: 'foobar' } }]);\n\n    c.update(id, { $unset: { type: 1 } });\n    test.equal(c.find().fetch(), [{ _id: id }]);\n    logger.expectResultOnly('changed', [id, { type: undefined }]);\n\n    handle.stop();\n    onComplete();\n  });\n});\n\nTinytest.addAsync(\"observeChanges - unordered - enters and exits result set through change\", function (test, onComplete) {\n  var c = makeCollection();\n  withCallbackLogger(test, [\"added\", \"changed\", \"removed\"], Meteor.isServer, function (logger) {\n    var handle = c.find({ noodles: \"good\" }).observeChanges(logger);\n    var barid = c.insert({ thing: \"stuff\" });\n\n    var fooid = c.insert({ noodles: \"good\", bacon: \"bad\", apples: \"ok\" });\n    logger.expectResultOnly(\"added\", [fooid, { noodles: \"good\", bacon: \"bad\", apples: \"ok\" }]);\n\n    c.update(fooid, { noodles: \"alright\", potatoes: \"tasty\", apples: \"ok\" });\n    logger.expectResultOnly(\"removed\", [fooid]);\n    c.remove(fooid);\n    c.remove(barid);\n\n    fooid = c.insert({ noodles: \"ok\", bacon: \"bad\", apples: \"ok\" });\n    c.update(fooid, { noodles: \"good\", potatoes: \"tasty\", apples: \"ok\" });\n    logger.expectResult(\"added\", [fooid, { noodles: \"good\", potatoes: \"tasty\", apples: \"ok\" }]);\n    logger.expectNoResult();\n    handle.stop();\n    onComplete();\n  });\n});\n\nif (Meteor.isServer) {\n  testAsyncMulti(\"observeChanges - tailable\", [function (test, expect) {\n    var self = this;\n    var collName = \"cap_\" + Random.id();\n    var coll = new Mongo.Collection(collName);\n    coll._createCappedCollection(1000000);\n    self.xs = [];\n    self.expects = [];\n    self.insert = function (fields) {\n      coll.insert(_.extend({ ts: new MongoInternals.MongoTimestamp(0, 0) }, fields));\n    };\n\n    // Tailable observe shouldn't show things that are in the initial\n    // contents.\n    self.insert({ x: 1 });\n    // Wait for one added call before going to the next test function.\n    self.expects.push(expect());\n\n    var cursor = coll.find({ y: { $ne: 7 } }, { tailable: true });\n    self.handle = cursor.observeChanges({\n      added: function (id, fields) {\n        self.xs.push(fields.x);\n        test.notEqual(self.expects.length, 0);\n        self.expects.pop()();\n      },\n      changed: function () {\n        test.fail({ unexpected: \"changed\" });\n      },\n      removed: function () {\n        test.fail({ unexpected: \"removed\" });\n      }\n    });\n\n    // Nothing happens synchronously.\n    test.equal(self.xs, []);\n  }, function (test, expect) {\n    var self = this;\n    // The cursors sees the first element.\n    test.equal(self.xs, [1]);\n    self.xs = [];\n\n    self.insert({ x: 2, y: 3 });\n    self.insert({ x: 3, y: 7 }); // filtered out by the query\n    self.insert({ x: 4 });\n    // Expect two added calls to happen.\n    self.expects = [expect(), expect()];\n  }, function (test, expect) {\n    var self = this;\n    test.equal(self.xs, [2, 4]);\n    self.xs = [];\n    self.handle.stop();\n\n    self.insert({ x: 5 });\n    // XXX This timeout isn't perfect but it's pretty hard to prove that an\n    // event WON'T happen without something like a write fence.\n    Meteor.setTimeout(expect(), 1000);\n  }, function (test, expect) {\n    var self = this;\n    test.equal(self.xs, []);\n  }]);\n}\n\ntestAsyncMulti(\"observeChanges - bad query\", [function (test, expect) {\n  var c = makeCollection();\n  var observeThrows = function () {\n    test.throws(function () {\n      c.find({ __id: { $in: null } }).observeChanges({\n        added: function () {\n          test.fail(\"added shouldn't be called\");\n        }\n      });\n    }, '$in needs an array');\n  };\n\n  if (Meteor.isClient) {\n    observeThrows();\n    return;\n  }\n\n  // Test that if two copies of the same bad observeChanges run in parallel\n  // and are de-duped, both observeChanges calls will throw.\n  var Fiber = Npm.require('fibers');\n  var Future = Npm.require('fibers/future');\n  var f1 = new Future();\n  var f2 = new Future();\n  Fiber(function () {\n    // The observeChanges call in here will yield when we talk to mongod,\n    // which will allow the second Fiber to start and observe a duplicate\n    // query.\n    observeThrows();\n    f1['return']();\n  }).run();\n  Fiber(function () {\n    test.isFalse(f1.isResolved()); // first observe hasn't thrown yet\n    observeThrows();\n    f2['return']();\n  }).run();\n  f1.wait();\n  f2.wait();\n}]);","ast":null,"map":{"version":3,"sources":["/packages/mongo/observe_changes_tests.js"],"names":[],"mappings":"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","file":"/packages/mongo/observe_changes_tests.js.map","sourcesContent":["var makeCollection = function () {\n  if (Meteor.isServer)\n    return new Mongo.Collection(Random.id());\n  else\n    return new Mongo.Collection(null);\n};\n\n_.each ([{added:'added', forceOrdered: true},\n         {added:'added', forceOrdered: false},\n         {added: 'addedBefore', forceOrdered: false}], function (options) {\n           var added = options.added;\n           var forceOrdered = options.forceOrdered;\n  Tinytest.addAsync(\"observeChanges - single id - basics \"\n                    + added\n                    + (forceOrdered ? \" force ordered\" : \"\"),\n                    function (test, onComplete) {\n    var c = makeCollection();\n    var counter = 0;\n    var callbacks = [added, \"changed\", \"removed\"];\n    if (forceOrdered)\n      callbacks.push(\"movedBefore\");\n    withCallbackLogger(test,\n                       callbacks,\n                       Meteor.isServer,\n                       function (logger) {\n    var barid = c.insert({thing: \"stuff\"});\n    var fooid = c.insert({noodles: \"good\", bacon: \"bad\", apples: \"ok\"});\n\n    var handle = c.find(fooid).observeChanges(logger);\n    if (added === 'added')\n      logger.expectResult(added, [fooid, {noodles: \"good\", bacon: \"bad\",apples: \"ok\"}]);\n    else\n      logger.expectResult(added,\n                          [fooid, {noodles: \"good\", bacon: \"bad\", apples: \"ok\"}, null]);\n    c.update(fooid, {noodles: \"alright\", potatoes: \"tasty\", apples: \"ok\"});\n    logger.expectResult(\"changed\",\n                        [fooid, {noodles: \"alright\", potatoes: \"tasty\", bacon: undefined}]);\n\n    c.remove(fooid);\n    logger.expectResult(\"removed\", [fooid]);\n\n    c.remove(barid);\n\n    c.insert({noodles: \"good\", bacon: \"bad\", apples: \"ok\"});\n    logger.expectNoResult();\n    handle.stop();\n\n    var badCursor = c.find({}, {fields: {noodles: 1, _id: false}});\n    test.throws(function () {\n      badCursor.observeChanges(logger);\n    });\n\n    onComplete();\n    });\n  });\n});\n\nTinytest.addAsync(\"observeChanges - callback isolation\", function (test, onComplete) {\n  var c = makeCollection();\n  withCallbackLogger(test, [\"added\", \"changed\", \"removed\"], Meteor.isServer, function (logger) {\n    var handles = [];\n    var cursor = c.find();\n    handles.push(cursor.observeChanges(logger));\n    // fields-tampering observer\n    handles.push(cursor.observeChanges({\n      added: function(id, fields) {\n        fields.apples = 'green';\n      },\n      changed: function(id, fields) {\n        fields.apples = 'green';\n      },\n    }));\n\n    var fooid = c.insert({apples: \"ok\"});\n    logger.expectResult(\"added\", [fooid, {apples: \"ok\"}]);\n\n    c.update(fooid, {apples: \"not ok\"})\n    logger.expectResult(\"changed\", [fooid, {apples: \"not ok\"}]);\n\n    test.equal(c.findOne(fooid).apples, \"not ok\");\n\n    _.each(handles, function(handle) { handle.stop(); });\n    onComplete();\n  });\n\n});\n\nTinytest.addAsync(\"observeChanges - single id - initial adds\", function (test, onComplete) {\n  var c = makeCollection();\n  withCallbackLogger(test, [\"added\", \"changed\", \"removed\"], Meteor.isServer, function (logger) {\n  var fooid = c.insert({noodles: \"good\", bacon: \"bad\", apples: \"ok\"});\n  var handle = c.find(fooid).observeChanges(logger);\n  logger.expectResult(\"added\", [fooid, {noodles: \"good\", bacon: \"bad\", apples: \"ok\"}]);\n  logger.expectNoResult();\n  handle.stop();\n  onComplete();\n  });\n});\n\n\n\nTinytest.addAsync(\"observeChanges - unordered - initial adds\", function (test, onComplete) {\n  var c = makeCollection();\n  withCallbackLogger(test, [\"added\", \"changed\", \"removed\"], Meteor.isServer, function (logger) {\n  var fooid = c.insert({noodles: \"good\", bacon: \"bad\", apples: \"ok\"});\n  var barid = c.insert({noodles: \"good\", bacon: \"weird\", apples: \"ok\"});\n  var handle = c.find().observeChanges(logger);\n  logger.expectResultUnordered([\n    {callback: \"added\",\n     args: [fooid, {noodles: \"good\", bacon: \"bad\", apples: \"ok\"}]},\n    {callback: \"added\",\n     args: [barid, {noodles: \"good\", bacon: \"weird\", apples: \"ok\"}]}\n  ]);\n  logger.expectNoResult();\n  handle.stop();\n  onComplete();\n  });\n});\n\nTinytest.addAsync(\"observeChanges - unordered - basics\", function (test, onComplete) {\n  var c = makeCollection();\n  withCallbackLogger(test, [\"added\", \"changed\", \"removed\"], Meteor.isServer, function (logger) {\n  var handle = c.find().observeChanges(logger);\n  var barid = c.insert({thing: \"stuff\"});\n  logger.expectResultOnly(\"added\", [barid, {thing: \"stuff\"}]);\n\n  var fooid = c.insert({noodles: \"good\", bacon: \"bad\", apples: \"ok\"});\n\n  logger.expectResultOnly(\"added\", [fooid, {noodles: \"good\", bacon: \"bad\", apples: \"ok\"}]);\n\n  c.update(fooid, {noodles: \"alright\", potatoes: \"tasty\", apples: \"ok\"});\n  c.update(fooid, {noodles: \"alright\", potatoes: \"tasty\", apples: \"ok\"});\n  logger.expectResultOnly(\"changed\",\n                      [fooid, {noodles: \"alright\", potatoes: \"tasty\", bacon: undefined}]);\n  c.remove(fooid);\n  logger.expectResultOnly(\"removed\", [fooid]);\n  c.remove(barid);\n  logger.expectResultOnly(\"removed\", [barid]);\n\n  fooid = c.insert({noodles: \"good\", bacon: \"bad\", apples: \"ok\"});\n\n  logger.expectResult(\"added\", [fooid, {noodles: \"good\", bacon: \"bad\", apples: \"ok\"}]);\n  logger.expectNoResult();\n  handle.stop();\n  onComplete();\n  });\n});\n\nif (Meteor.isServer) {\n  Tinytest.addAsync(\"observeChanges - unordered - specific fields\", function (test, onComplete) {\n    var c = makeCollection();\n    withCallbackLogger(test, [\"added\", \"changed\", \"removed\"], Meteor.isServer, function (logger) {\n      var handle = c.find({}, {fields:{noodles: 1, bacon: 1}}).observeChanges(logger);\n      var barid = c.insert({thing: \"stuff\"});\n      logger.expectResultOnly(\"added\", [barid, {}]);\n\n      var fooid = c.insert({noodles: \"good\", bacon: \"bad\", apples: \"ok\"});\n\n      logger.expectResultOnly(\"added\", [fooid, {noodles: \"good\", bacon: \"bad\"}]);\n\n      c.update(fooid, {noodles: \"alright\", potatoes: \"tasty\", apples: \"ok\"});\n      logger.expectResultOnly(\"changed\",\n                              [fooid, {noodles: \"alright\", bacon: undefined}]);\n      c.update(fooid, {noodles: \"alright\", potatoes: \"meh\", apples: \"ok\"});\n      c.remove(fooid);\n      logger.expectResultOnly(\"removed\", [fooid]);\n      c.remove(barid);\n      logger.expectResultOnly(\"removed\", [barid]);\n\n      fooid = c.insert({noodles: \"good\", bacon: \"bad\"});\n\n      logger.expectResult(\"added\", [fooid, {noodles: \"good\", bacon: \"bad\"}]);\n      logger.expectNoResult();\n      handle.stop();\n      onComplete();\n    });\n  });\n\n  Tinytest.addAsync(\"observeChanges - unordered - specific fields + selector on excluded fields\", function (test, onComplete) {\n    var c = makeCollection();\n    withCallbackLogger(test, [\"added\", \"changed\", \"removed\"], Meteor.isServer, function (logger) {\n      var handle = c.find({ mac: 1, cheese: 2 },\n                          {fields:{noodles: 1, bacon: 1, eggs: 1}}).observeChanges(logger);\n      var barid = c.insert({thing: \"stuff\", mac: 1, cheese: 2});\n      logger.expectResultOnly(\"added\", [barid, {}]);\n\n      var fooid = c.insert({noodles: \"good\", bacon: \"bad\", apples: \"ok\", mac: 1, cheese: 2});\n\n      logger.expectResultOnly(\"added\", [fooid, {noodles: \"good\", bacon: \"bad\"}]);\n\n      c.update(fooid, {noodles: \"alright\", potatoes: \"tasty\", apples: \"ok\", mac: 1, cheese: 2});\n      logger.expectResultOnly(\"changed\",\n                              [fooid, {noodles: \"alright\", bacon: undefined}]);\n\n      // Doesn't get update event, since modifies only hidden fields\n      c.update(fooid, {noodles: \"alright\", potatoes: \"meh\", apples: \"ok\", mac: 1, cheese: 2});\n      logger.expectNoResult();\n\n      c.remove(fooid);\n      logger.expectResultOnly(\"removed\", [fooid]);\n      c.remove(barid);\n      logger.expectResultOnly(\"removed\", [barid]);\n\n      fooid = c.insert({noodles: \"good\", bacon: \"bad\", mac: 1, cheese: 2});\n\n      logger.expectResult(\"added\", [fooid, {noodles: \"good\", bacon: \"bad\"}]);\n      logger.expectNoResult();\n      handle.stop();\n      onComplete();\n    });\n  });\n}\n\nTinytest.addAsync(\"observeChanges - unordered - specific fields + modify on excluded fields\", function (test, onComplete) {\n  var c = makeCollection();\n  withCallbackLogger(test, [\"added\", \"changed\", \"removed\"], Meteor.isServer, function (logger) {\n    var handle = c.find({ mac: 1, cheese: 2 },\n                        {fields:{noodles: 1, bacon: 1, eggs: 1}}).observeChanges(logger);\n    var fooid = c.insert({noodles: \"good\", bacon: \"bad\", apples: \"ok\", mac: 1, cheese: 2});\n\n    logger.expectResultOnly(\"added\", [fooid, {noodles: \"good\", bacon: \"bad\"}]);\n\n\n    // Noodles go into shadow, mac appears as eggs\n    c.update(fooid, {$rename: { noodles: 'shadow', apples: 'eggs' }});\n    logger.expectResultOnly(\"changed\",\n                            [fooid, {eggs:\"ok\", noodles: undefined}]);\n\n    c.remove(fooid);\n    logger.expectResultOnly(\"removed\", [fooid]);\n    logger.expectNoResult();\n    handle.stop();\n    onComplete();\n  });\n});\n\nTinytest.addAsync(\n  \"observeChanges - unordered - unset parent of observed field\",\n  function (test, onComplete) {\n    var c = makeCollection();\n    withCallbackLogger(\n      test, ['added', 'changed', 'removed'], Meteor.isServer,\n      function (logger) {\n        var handle = c.find({}, {fields: {'type.name': 1}}).observeChanges(logger);\n        var id = c.insert({ type: { name: 'foobar' } });\n        logger.expectResultOnly('added', [id, { type: { name: 'foobar' } }]);\n\n        c.update(id, { $unset: { type: 1 } });\n        test.equal(c.find().fetch(), [{ _id: id }]);\n        logger.expectResultOnly('changed', [id, { type: undefined }]);\n\n        handle.stop();\n        onComplete();\n      }\n    );\n  }\n);\n\n\n\nTinytest.addAsync(\"observeChanges - unordered - enters and exits result set through change\", function (test, onComplete) {\n  var c = makeCollection();\n  withCallbackLogger(test, [\"added\", \"changed\", \"removed\"], Meteor.isServer, function (logger) {\n  var handle = c.find({noodles: \"good\"}).observeChanges(logger);\n  var barid = c.insert({thing: \"stuff\"});\n\n  var fooid = c.insert({noodles: \"good\", bacon: \"bad\", apples: \"ok\"});\n  logger.expectResultOnly(\"added\", [fooid, {noodles: \"good\", bacon: \"bad\", apples: \"ok\"}]);\n\n  c.update(fooid, {noodles: \"alright\", potatoes: \"tasty\", apples: \"ok\"});\n  logger.expectResultOnly(\"removed\",\n                      [fooid]);\n  c.remove(fooid);\n  c.remove(barid);\n\n  fooid = c.insert({noodles: \"ok\", bacon: \"bad\", apples: \"ok\"});\n  c.update(fooid, {noodles: \"good\", potatoes: \"tasty\", apples: \"ok\"});\n  logger.expectResult(\"added\", [fooid, {noodles: \"good\", potatoes: \"tasty\", apples: \"ok\"}]);\n  logger.expectNoResult();\n  handle.stop();\n  onComplete();\n  });\n});\n\n\nif (Meteor.isServer) {\n  testAsyncMulti(\"observeChanges - tailable\", [\n    function (test, expect) {\n      var self = this;\n      var collName = \"cap_\" + Random.id();\n      var coll = new Mongo.Collection(collName);\n      coll._createCappedCollection(1000000);\n      self.xs = [];\n      self.expects = [];\n      self.insert = function (fields) {\n        coll.insert(_.extend({ts: new MongoInternals.MongoTimestamp(0, 0)},\n                             fields));\n      };\n\n      // Tailable observe shouldn't show things that are in the initial\n      // contents.\n      self.insert({x: 1});\n      // Wait for one added call before going to the next test function.\n      self.expects.push(expect());\n\n      var cursor = coll.find({y: {$ne: 7}}, {tailable: true});\n      self.handle = cursor.observeChanges({\n        added: function (id, fields) {\n          self.xs.push(fields.x);\n          test.notEqual(self.expects.length, 0);\n          self.expects.pop()();\n        },\n        changed: function () {\n          test.fail({unexpected: \"changed\"});\n        },\n        removed: function () {\n          test.fail({unexpected: \"removed\"});\n        }\n      });\n\n      // Nothing happens synchronously.\n      test.equal(self.xs, []);\n    },\n    function (test, expect) {\n      var self = this;\n      // The cursors sees the first element.\n      test.equal(self.xs, [1]);\n      self.xs = [];\n\n      self.insert({x: 2, y: 3});\n      self.insert({x: 3, y: 7});  // filtered out by the query\n      self.insert({x: 4});\n      // Expect two added calls to happen.\n      self.expects = [expect(), expect()];\n    },\n    function (test, expect) {\n      var self = this;\n      test.equal(self.xs, [2, 4]);\n      self.xs = [];\n      self.handle.stop();\n\n      self.insert({x: 5});\n      // XXX This timeout isn't perfect but it's pretty hard to prove that an\n      // event WON'T happen without something like a write fence.\n      Meteor.setTimeout(expect(), 1000);\n    },\n    function (test, expect) {\n      var self = this;\n      test.equal(self.xs, []);\n    }\n  ]);\n}\n\n\ntestAsyncMulti(\"observeChanges - bad query\", [\n  function (test, expect) {\n    var c = makeCollection();\n    var observeThrows = function () {\n      test.throws(function () {\n        c.find({__id: {$in: null}}).observeChanges({\n          added: function () {\n            test.fail(\"added shouldn't be called\");\n          }\n        });\n      }, '$in needs an array');\n    };\n\n    if (Meteor.isClient) {\n      observeThrows();\n      return;\n    }\n\n    // Test that if two copies of the same bad observeChanges run in parallel\n    // and are de-duped, both observeChanges calls will throw.\n    var Fiber = Npm.require('fibers');\n    var Future = Npm.require('fibers/future');\n    var f1 = new Future;\n    var f2 = new Future;\n    Fiber(function () {\n      // The observeChanges call in here will yield when we talk to mongod,\n      // which will allow the second Fiber to start and observe a duplicate\n      // query.\n      observeThrows();\n      f1['return']();\n    }).run();\n    Fiber(function () {\n      test.isFalse(f1.isResolved());  // first observe hasn't thrown yet\n      observeThrows();\n      f2['return']();\n    }).run();\n    f1.wait();\n    f2.wait();\n  }\n]);\n"]},"hash":"16ab9afdff6be80bf17f1d402bc183fbc1dee022"}
